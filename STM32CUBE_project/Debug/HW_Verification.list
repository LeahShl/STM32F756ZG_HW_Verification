
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c7c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bec  08017e4c  08017e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa38  0801aa38  0001c1c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801aa38  0801aa38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa40  0801aa40  0001c1c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa40  0801aa40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801aa44  0801aa44  0001ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0801aa48  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0801aad0  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0801ab70  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088ac  200001c8  0801ac10  0001c1c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008a74  0801ac10  0001ca74  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c1c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ff4c  00000000  00000000  0001c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000809d  00000000  00000000  0004c144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002450  00000000  00000000  000541e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ca1  00000000  00000000  00056638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000389fb  00000000  00000000  000582d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003cbe8  00000000  00000000  00090cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011548e  00000000  00000000  000cd8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e2d4a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009b34  00000000  00000000  001e2d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001ec8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017e34 	.word	0x08017e34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08017e34 	.word	0x08017e34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fd19 	bl	8002074 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fc6c 	bl	8000f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 feb9 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fc5c 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e4 	.word	0x200001e4
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fad9 	bl	8004c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fc43 	bl	8002fb8 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fbf4 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	2000022c 	.word	0x2000022c
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fa09 	bl	8002ba4 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fbc4 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000028c 	.word	0x2000028c
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200b      	movs	r0, #11
 8000824:	f002 f987 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 f9a0 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200c      	movs	r0, #12
 8000834:	f002 f97f 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 f998 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	200d      	movs	r0, #13
 8000844:	f002 f977 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 f990 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	200e      	movs	r0, #14
 8000854:	f002 f96f 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 f988 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2010      	movs	r0, #16
 8000864:	f002 f967 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 f980 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2011      	movs	r0, #17
 8000874:	f002 f95f 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 f978 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 f957 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 f970 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 f94f 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 f968 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 f947 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 f960 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 f93f 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 f958 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 f937 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 f950 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 f92f 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 f948 	bl	8002b6e <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <MX_GPIO_Init+0xa4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a26      	ldr	r2, [pc, #152]	@ (8000990 <MX_GPIO_Init+0xa4>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_GPIO_Init+0xa4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_GPIO_Init+0xa4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_GPIO_Init+0xa4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

}
 8000982:	bf00      	nop
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_I2C1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <MX_I2C1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <MX_I2C1_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009d0:	f004 fb10 	bl	8004ff4 <HAL_I2C_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 faa3 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009e2:	f006 fcb3 	bl	800734c <HAL_I2CEx_ConfigAnalogFilter>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 fa9a 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009f4:	f006 fcf5 	bl	80073e2 <HAL_I2CEx_ConfigDigitalFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 fa91 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002b0 	.word	0x200002b0
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	20404768 	.word	0x20404768

08000a14 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <MX_I2C2_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <MX_I2C2_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a26:	2214      	movs	r2, #20
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a4e:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a50:	f004 fad0 	bl	8004ff4 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 fa63 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a62:	f006 fc73 	bl	800734c <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 fa5a 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a74:	f006 fcb5 	bl	80073e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 fa51 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000304 	.word	0x20000304
 8000a8c:	40005800 	.word	0x40005800
 8000a90:	20404768 	.word	0x20404768

08000a94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0ac      	sub	sp, #176	@ 0xb0
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	2284      	movs	r2, #132	@ 0x84
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f016 fb1a 	bl	80170ee <memset>
  if(i2cHandle->Instance==I2C1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a57      	ldr	r2, [pc, #348]	@ (8000c1c <HAL_I2C_MspInit+0x188>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	f040 80b9 	bne.w	8000c38 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ac6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000aca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f007 f9ab 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ae0:	f000 fa20 	bl	8000f24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af0:	4b4b      	ldr	r3, [pc, #300]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b16:	2304      	movs	r3, #4
 8000b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4840      	ldr	r0, [pc, #256]	@ (8000c24 <HAL_I2C_MspInit+0x190>)
 8000b24:	f004 f8ba 	bl	8004c9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b28:	4b3d      	ldr	r3, [pc, #244]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000b2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b34:	4b3a      	ldr	r3, [pc, #232]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000b40:	4b39      	ldr	r3, [pc, #228]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b42:	4a3a      	ldr	r2, [pc, #232]	@ (8000c2c <HAL_I2C_MspInit+0x198>)
 8000b44:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000b46:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b4c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4e:	4b36      	ldr	r3, [pc, #216]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5a:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b60:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b62:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b68:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b80:	4829      	ldr	r0, [pc, #164]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b82:	f002 fa19 	bl	8002fb8 <HAL_DMA_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000b8c:	f000 f9ca 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a25      	ldr	r2, [pc, #148]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000b9e:	4a25      	ldr	r2, [pc, #148]	@ (8000c34 <HAL_I2C_MspInit+0x1a0>)
 8000ba0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000ba4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ba8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bac:	2240      	movs	r2, #64	@ 0x40
 8000bae:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bbc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000bdc:	4814      	ldr	r0, [pc, #80]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bde:	f002 f9eb 	bl	8002fb8 <HAL_DMA_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000be8:	f000 f99c 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	201f      	movs	r0, #31
 8000bfe:	f001 ff9a 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c02:	201f      	movs	r0, #31
 8000c04:	f001 ffb3 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2020      	movs	r0, #32
 8000c0e:	f001 ff92 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c12:	2020      	movs	r0, #32
 8000c14:	f001 ffab 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c18:	e0be      	b.n	8000d98 <HAL_I2C_MspInit+0x304>
 8000c1a:	bf00      	nop
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400
 8000c28:	20000358 	.word	0x20000358
 8000c2c:	40026088 	.word	0x40026088
 8000c30:	200003b8 	.word	0x200003b8
 8000c34:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a58      	ldr	r2, [pc, #352]	@ (8000da0 <HAL_I2C_MspInit+0x30c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f040 80aa 	bne.w	8000d98 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 f8eb 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000c60:	f000 f960 	bl	8000f24 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b4f      	ldr	r3, [pc, #316]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	4a4e      	ldr	r2, [pc, #312]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c70:	4b4c      	ldr	r3, [pc, #304]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c84:	2312      	movs	r3, #18
 8000c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c96:	2304      	movs	r3, #4
 8000c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4841      	ldr	r0, [pc, #260]	@ (8000da8 <HAL_I2C_MspInit+0x314>)
 8000ca4:	f003 fffa 	bl	8004c9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a3d      	ldr	r2, [pc, #244]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000cae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8000db0 <HAL_I2C_MspInit+0x31c>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000cc6:	4b39      	ldr	r3, [pc, #228]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cc8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b34      	ldr	r3, [pc, #208]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000d00:	482a      	ldr	r0, [pc, #168]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000d02:	f002 f959 	bl	8002fb8 <HAL_DMA_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000d0c:	f000 f90a 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a26      	ldr	r2, [pc, #152]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000d14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d16:	4a25      	ldr	r2, [pc, #148]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d1e:	4a26      	ldr	r2, [pc, #152]	@ (8000db8 <HAL_I2C_MspInit+0x324>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000d22:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d24:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d28:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2a:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d2c:	2240      	movs	r2, #64	@ 0x40
 8000d2e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000d5c:	4815      	ldr	r0, [pc, #84]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d5e:	f002 f92b 	bl	8002fb8 <HAL_DMA_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8000d68:	f000 f8dc 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a11      	ldr	r2, [pc, #68]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d72:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2021      	movs	r0, #33	@ 0x21
 8000d7e:	f001 feda 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d82:	2021      	movs	r0, #33	@ 0x21
 8000d84:	f001 fef3 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2022      	movs	r0, #34	@ 0x22
 8000d8e:	f001 fed2 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000d92:	2022      	movs	r0, #34	@ 0x22
 8000d94:	f001 feeb 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	37b0      	adds	r7, #176	@ 0xb0
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40005800 	.word	0x40005800
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	20000418 	.word	0x20000418
 8000db0:	40026058 	.word	0x40026058
 8000db4:	20000478 	.word	0x20000478
 8000db8:	400260b8 	.word	0x400260b8

08000dbc <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <_write+0x3c>)
 8000dca:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <_write+0x40>)
 8000dd8:	f009 fa7e 	bl	800a2d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8000ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de0:	2201      	movs	r2, #1
 8000de2:	6979      	ldr	r1, [r7, #20]
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <_write+0x40>)
 8000de6:	f009 fa77 	bl	800a2d8 <HAL_UART_Transmit>
	return len + 1;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3301      	adds	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08017e4c 	.word	0x08017e4c
 8000dfc:	2000092c 	.word	0x2000092c

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f001 f8b5 	bl	8001f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f820 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f7ff fd6e 	bl	80008ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000e10:	f7ff fcea 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e14:	f000 fdc4 	bl	80019a0 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000e18:	f00a fdb2 	bl	800b980 <MX_LWIP_Init>
  MX_CRC_Init();
 8000e1c:	f7ff fca2 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8000e20:	f000 fd5e 	bl	80018e0 <MX_UART4_Init>
  MX_UART5_Init();
 8000e24:	f000 fd8c 	bl	8001940 <MX_UART5_Init>
  MX_I2C1_Init();
 8000e28:	f7ff fdb4 	bl	8000994 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e2c:	f7ff fdf2 	bl	8000a14 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000e30:	f000 f87e 	bl	8000f30 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000e34:	f000 f8ba 	bl	8000fac <MX_SPI4_Init>
  MX_ADC1_Init();
 8000e38:	f7ff fbd0 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8000e3c:	f000 fcae 	bl	800179c <MX_TIM6_Init>
  MX_TIM2_Init();
 8000e40:	f000 fc5e 	bl	8001700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 8000e44:	f015 fb2c 	bl	80164a0 <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <main+0x48>

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	@ 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2230      	movs	r2, #48	@ 0x30
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f016 f947 	bl	80170ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	4a29      	ldr	r2, [pc, #164]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <SystemClock_Config+0xd4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a24      	ldr	r2, [pc, #144]	@ (8000f20 <SystemClock_Config+0xd4>)
 8000e8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <SystemClock_Config+0xd4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000eb8:	23d8      	movs	r3, #216	@ 0xd8
 8000eba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 fb27 	bl	800751c <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ed4:	f000 f826 	bl	8000f24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed8:	f006 fad0 	bl	800747c <HAL_PWREx_EnableOverDrive>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ee2:	f000 f81f 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2302      	movs	r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ef2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ef6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2107      	movs	r1, #7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fdad 	bl	8007a64 <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f10:	f000 f808 	bl	8000f24 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3750      	adds	r7, #80	@ 0x50
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <MX_SPI1_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f66:	2218      	movs	r2, #24
 8000f68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f7e:	2207      	movs	r2, #7
 8000f80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f90:	f007 fb3e 	bl	8008610 <HAL_SPI_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f7ff ffc3 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200004d8 	.word	0x200004d8
 8000fa8:	40013000 	.word	0x40013000

08000fac <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fb2:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <MX_SPI4_Init+0x6c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fc4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_SPI4_Init+0x68>)
 8001002:	f007 fb05 	bl	8008610 <HAL_SPI_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 800100c:	f7ff ff8a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000053c 	.word	0x2000053c
 8001018:	40013400 	.word	0x40013400

0800101c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	@ 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4aa1      	ldr	r2, [pc, #644]	@ (80012c0 <HAL_SPI_MspInit+0x2a4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	f040 80a9 	bne.w	8001192 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001040:	4ba0      	ldr	r3, [pc, #640]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001044:	4a9f      	ldr	r2, [pc, #636]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001046:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800104a:	6453      	str	r3, [r2, #68]	@ 0x44
 800104c:	4b9d      	ldr	r3, [pc, #628]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800104e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b9a      	ldr	r3, [pc, #616]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a99      	ldr	r2, [pc, #612]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
 8001064:	4b97      	ldr	r3, [pc, #604]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b94      	ldr	r3, [pc, #592]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	4a93      	ldr	r2, [pc, #588]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	6313      	str	r3, [r2, #48]	@ 0x30
 800107c:	4b91      	ldr	r3, [pc, #580]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001088:	2370      	movs	r3, #112	@ 0x70
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001098:	2305      	movs	r3, #5
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4889      	ldr	r0, [pc, #548]	@ (80012c8 <HAL_SPI_MspInit+0x2ac>)
 80010a4:	f003 fdfa 	bl	8004c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010a8:	2320      	movs	r3, #32
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b8:	2305      	movs	r3, #5
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4882      	ldr	r0, [pc, #520]	@ (80012cc <HAL_SPI_MspInit+0x2b0>)
 80010c4:	f003 fdea 	bl	8004c9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80010c8:	4b81      	ldr	r3, [pc, #516]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010ca:	4a82      	ldr	r2, [pc, #520]	@ (80012d4 <HAL_SPI_MspInit+0x2b8>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80010ce:	4b80      	ldr	r3, [pc, #512]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010d0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d6:	4b7e      	ldr	r3, [pc, #504]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b7c      	ldr	r3, [pc, #496]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b7b      	ldr	r3, [pc, #492]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ea:	4b79      	ldr	r3, [pc, #484]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f0:	4b77      	ldr	r3, [pc, #476]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80010f6:	4b76      	ldr	r3, [pc, #472]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010fc:	4b74      	ldr	r3, [pc, #464]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001102:	4b73      	ldr	r3, [pc, #460]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001108:	4871      	ldr	r0, [pc, #452]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 800110a:	f001 ff55 	bl	8002fb8 <HAL_DMA_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001114:	f7ff ff06 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a6d      	ldr	r2, [pc, #436]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 800111c:	659a      	str	r2, [r3, #88]	@ 0x58
 800111e:	4a6c      	ldr	r2, [pc, #432]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001124:	4b6c      	ldr	r3, [pc, #432]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001126:	4a6d      	ldr	r2, [pc, #436]	@ (80012dc <HAL_SPI_MspInit+0x2c0>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800112a:	4b6b      	ldr	r3, [pc, #428]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800112c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001132:	4b69      	ldr	r3, [pc, #420]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001134:	2240      	movs	r2, #64	@ 0x40
 8001136:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b67      	ldr	r3, [pc, #412]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b66      	ldr	r3, [pc, #408]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b62      	ldr	r3, [pc, #392]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001152:	4b61      	ldr	r3, [pc, #388]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001158:	4b5f      	ldr	r3, [pc, #380]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115e:	4b5e      	ldr	r3, [pc, #376]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001164:	485c      	ldr	r0, [pc, #368]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001166:	f001 ff27 	bl	8002fb8 <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001170:	f7ff fed8 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a58      	ldr	r2, [pc, #352]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001178:	655a      	str	r2, [r3, #84]	@ 0x54
 800117a:	4a57      	ldr	r2, [pc, #348]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2023      	movs	r0, #35	@ 0x23
 8001186:	f001 fcd6 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800118a:	2023      	movs	r0, #35	@ 0x23
 800118c:	f001 fcef 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001190:	e091      	b.n	80012b6 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a52      	ldr	r2, [pc, #328]	@ (80012e0 <HAL_SPI_MspInit+0x2c4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 808c 	bne.w	80012b6 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800119e:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a48      	ldr	r2, [pc, #288]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a42      	ldr	r2, [pc, #264]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011ce:	2374      	movs	r3, #116	@ 0x74
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011de:	2305      	movs	r3, #5
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	483e      	ldr	r0, [pc, #248]	@ (80012e4 <HAL_SPI_MspInit+0x2c8>)
 80011ea:	f003 fd57 	bl	8004c9c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80011ee:	4b3e      	ldr	r3, [pc, #248]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 80011f0:	4a3e      	ldr	r2, [pc, #248]	@ (80012ec <HAL_SPI_MspInit+0x2d0>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 80011f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 800120a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001210:	4b35      	ldr	r3, [pc, #212]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001216:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800122e:	482e      	ldr	r0, [pc, #184]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001230:	f001 fec2 	bl	8002fb8 <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800123a:	f7ff fe73 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a29      	ldr	r2, [pc, #164]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001242:	659a      	str	r2, [r3, #88]	@ 0x58
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800124c:	4a29      	ldr	r2, [pc, #164]	@ (80012f4 <HAL_SPI_MspInit+0x2d8>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001252:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001256:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800125a:	2240      	movs	r2, #64	@ 0x40
 800125c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800126a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800128a:	4819      	ldr	r0, [pc, #100]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800128c:	f001 fe94 	bl	8002fb8 <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8001296:	f7ff fe45 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800129e:	655a      	str	r2, [r3, #84]	@ 0x54
 80012a0:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2054      	movs	r0, #84	@ 0x54
 80012ac:	f001 fc43 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80012b0:	2054      	movs	r0, #84	@ 0x54
 80012b2:	f001 fc5c 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	@ 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40013000 	.word	0x40013000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	200005a0 	.word	0x200005a0
 80012d4:	40026440 	.word	0x40026440
 80012d8:	20000600 	.word	0x20000600
 80012dc:	40026458 	.word	0x40026458
 80012e0:	40013400 	.word	0x40013400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	20000660 	.word	0x20000660
 80012ec:	40026410 	.word	0x40026410
 80012f0:	200006c0 	.word	0x200006c0
 80012f4:	40026428 	.word	0x40026428

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_MspInit+0x44>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <HAL_MspInit+0x44>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <HAL_MspInit+0x44>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_MspInit+0x44>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x44>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x44>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 fe29 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <DMA1_Stream0_IRQHandler+0x10>)
 80013a6:	f001 ffa7 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000a14 	.word	0x20000a14

080013b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <DMA1_Stream1_IRQHandler+0x10>)
 80013ba:	f001 ff9d 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200007bc 	.word	0x200007bc

080013c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Stream2_IRQHandler+0x10>)
 80013ce:	f001 ff93 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200009b4 	.word	0x200009b4

080013dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <DMA1_Stream3_IRQHandler+0x10>)
 80013e2:	f001 ff89 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000418 	.word	0x20000418

080013f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <DMA1_Stream5_IRQHandler+0x10>)
 80013f6:	f001 ff7f 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000358 	.word	0x20000358

08001404 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <DMA1_Stream6_IRQHandler+0x10>)
 800140a:	f001 ff75 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200003b8 	.word	0x200003b8

08001418 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <I2C1_EV_IRQHandler+0x10>)
 800141e:	f004 fa2b 	bl	8005878 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002b0 	.word	0x200002b0

0800142c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <I2C1_ER_IRQHandler+0x10>)
 8001432:	f004 fa3b 	bl	80058ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002b0 	.word	0x200002b0

08001440 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <I2C2_EV_IRQHandler+0x10>)
 8001446:	f004 fa17 	bl	8005878 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000304 	.word	0x20000304

08001454 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <I2C2_ER_IRQHandler+0x10>)
 800145a:	f004 fa27 	bl	80058ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000304 	.word	0x20000304

08001468 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <SPI1_IRQHandler+0x10>)
 800146e:	f007 fd0f 	bl	8008e90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200004d8 	.word	0x200004d8

0800147c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <USART3_IRQHandler+0x10>)
 8001482:	f009 f855 	bl	800a530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000092c 	.word	0x2000092c

08001490 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Stream7_IRQHandler+0x10>)
 8001496:	f001 ff2f 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000478 	.word	0x20000478

080014a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <UART4_IRQHandler+0x10>)
 80014aa:	f009 f841 	bl	800a530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000081c 	.word	0x2000081c

080014b8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <UART5_IRQHandler+0x10>)
 80014be:	f009 f837 	bl	800a530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200008a4 	.word	0x200008a4

080014cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM6_DAC_IRQHandler+0x10>)
 80014d2:	f008 facd 	bl	8009a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000770 	.word	0x20000770

080014e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA2_Stream0_IRQHandler+0x10>)
 80014e6:	f001 ff07 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000660 	.word	0x20000660

080014f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <DMA2_Stream1_IRQHandler+0x10>)
 80014fa:	f001 fefd 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200006c0 	.word	0x200006c0

08001508 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <DMA2_Stream2_IRQHandler+0x10>)
 800150e:	f001 fef3 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200005a0 	.word	0x200005a0

0800151c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA2_Stream3_IRQHandler+0x10>)
 8001522:	f001 fee9 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000600 	.word	0x20000600

08001530 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA2_Stream4_IRQHandler+0x10>)
 8001536:	f001 fedf 	bl	80032f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000022c 	.word	0x2000022c

08001544 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <ETH_IRQHandler+0x10>)
 800154a:	f002 fcbb 	bl	8003ec4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20005454 	.word	0x20005454

08001558 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <ETH_WKUP_IRQHandler+0x10>)
 800155e:	f002 fcb1 	bl	8003ec4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20005454 	.word	0x20005454

0800156c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <SPI4_IRQHandler+0x10>)
 8001572:	f007 fc8d 	bl	8008e90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000053c 	.word	0x2000053c

08001580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_kill>:

int _kill(int pid, int sig)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800159a:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <_kill+0x20>)
 800159c:	2216      	movs	r2, #22
 800159e:	601a      	str	r2, [r3, #0]
  return -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20008a64 	.word	0x20008a64

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe5 	bl	8001590 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <_exit+0x12>

080015ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015dc:	f3af 8000 	nop.w
 80015e0:	4601      	mov	r1, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	b2ca      	uxtb	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbf0      	blt.n	80015dc <_read+0x12>
  }

  return len;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162c:	605a      	str	r2, [r3, #4]
  return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_isatty>:

int _isatty(int file)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d205      	bcs.n	80016a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <_sbrk+0x6c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016a6:	e009      	b.n	80016bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a06      	ldr	r2, [pc, #24]	@ (80016d0 <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	20050000 	.word	0x20050000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	20000720 	.word	0x20000720
 80016d4:	20008a78 	.word	0x20008a78
 80016d8:	20008a64 	.word	0x20008a64

080016dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_TIM2_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <MX_TIM2_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001746:	4814      	ldr	r0, [pc, #80]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001748:	f008 f82a 	bl	80097a0 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001752:	f7ff fbe7 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001764:	f008 fa8c 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800176e:	f7ff fbd9 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001780:	f008 fcb0 	bl	800a0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800178a:	f7ff fbcb 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000724 	.word	0x20000724

0800179c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_TIM6_Init+0x64>)
 80017ae:	4a15      	ldr	r2, [pc, #84]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <MX_TIM6_Init+0x64>)
 80017b4:	f240 221b 	movw	r2, #539	@ 0x21b
 80017b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_TIM6_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <MX_TIM6_Init+0x64>)
 80017c2:	2263      	movs	r2, #99	@ 0x63
 80017c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_TIM6_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <MX_TIM6_Init+0x64>)
 80017ce:	f007 ffe7 	bl	80097a0 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017d8:	f7ff fba4 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017dc:	2320      	movs	r3, #32
 80017de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_TIM6_Init+0x64>)
 80017ea:	f008 fc7b 	bl	800a0e4 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f7ff fb96 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000770 	.word	0x20000770
 8001804:	40001000 	.word	0x40001000

08001808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001818:	d10c      	bne.n	8001834 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181a:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_TIM_Base_MspInit+0xc8>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a2c      	ldr	r2, [pc, #176]	@ (80018d0 <HAL_TIM_Base_MspInit+0xc8>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_TIM_Base_MspInit+0xc8>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001832:	e049      	b.n	80018c8 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a26      	ldr	r2, [pc, #152]	@ (80018d4 <HAL_TIM_Base_MspInit+0xcc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d144      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <HAL_TIM_Base_MspInit+0xc8>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a23      	ldr	r2, [pc, #140]	@ (80018d0 <HAL_TIM_Base_MspInit+0xc8>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <HAL_TIM_Base_MspInit+0xc8>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001858:	4a20      	ldr	r2, [pc, #128]	@ (80018dc <HAL_TIM_Base_MspInit+0xd4>)
 800185a:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 800185c:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 800185e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001862:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001870:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001876:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001878:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 800187a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800187e:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001886:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001890:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001894:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 800189c:	480e      	ldr	r0, [pc, #56]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 800189e:	f001 fb8b 	bl	8002fb8 <HAL_DMA_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 80018a8:	f7ff fb3c 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 80018b0:	621a      	str	r2, [r3, #32]
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <HAL_TIM_Base_MspInit+0xd0>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2036      	movs	r0, #54	@ 0x36
 80018be:	f001 f93a 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018c2:	2036      	movs	r0, #54	@ 0x36
 80018c4:	f001 f953 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40001000 	.word	0x40001000
 80018d8:	200007bc 	.word	0x200007bc
 80018dc:	40026028 	.word	0x40026028

080018e0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_UART4_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	@ (800193c <MX_UART4_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <MX_UART4_Init+0x58>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_UART4_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_UART4_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <MX_UART4_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_UART4_Init+0x58>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <MX_UART4_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_UART4_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <MX_UART4_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_UART4_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_UART4_Init+0x58>)
 8001924:	f008 fc8a 	bl	800a23c <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800192e:	f7ff faf9 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000081c 	.word	0x2000081c
 800193c:	40004c00 	.word	0x40004c00

08001940 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <MX_UART5_Init+0x58>)
 8001946:	4a15      	ldr	r2, [pc, #84]	@ (800199c <MX_UART5_Init+0x5c>)
 8001948:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <MX_UART5_Init+0x58>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <MX_UART5_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <MX_UART5_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <MX_UART5_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <MX_UART5_Init+0x58>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <MX_UART5_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <MX_UART5_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <MX_UART5_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <MX_UART5_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_UART5_Init+0x58>)
 8001984:	f008 fc5a 	bl	800a23c <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800198e:	f7ff fac9 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200008a4 	.word	0x200008a4
 800199c:	40005000 	.word	0x40005000

080019a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <MX_USART3_UART_Init+0x5c>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_USART3_UART_Init+0x58>)
 80019e4:	f008 fc2a 	bl	800a23c <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019ee:	f7ff fa99 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000092c 	.word	0x2000092c
 80019fc:	40004800 	.word	0x40004800

08001a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0b0      	sub	sp, #192	@ 0xc0
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a1c:	2284      	movs	r2, #132	@ 0x84
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f015 fb64 	bl	80170ee <memset>
  if(uartHandle->Instance==UART4)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4ab0      	ldr	r2, [pc, #704]	@ (8001cec <HAL_UART_MspInit+0x2ec>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d173      	bne.n	8001b18 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f006 f9f6 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a4a:	f7ff fa6b 	bl	8000f24 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a4e:	4ba8      	ldr	r3, [pc, #672]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	4aa7      	ldr	r2, [pc, #668]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5a:	4ba5      	ldr	r3, [pc, #660]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4ba2      	ldr	r3, [pc, #648]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4aa1      	ldr	r2, [pc, #644]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b9f      	ldr	r3, [pc, #636]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4893      	ldr	r0, [pc, #588]	@ (8001cf4 <HAL_UART_MspInit+0x2f4>)
 8001aa6:	f003 f8f9 	bl	8004c9c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001aaa:	4b93      	ldr	r3, [pc, #588]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001aac:	4a93      	ldr	r2, [pc, #588]	@ (8001cfc <HAL_UART_MspInit+0x2fc>)
 8001aae:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ab0:	4b91      	ldr	r3, [pc, #580]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ab2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ab6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abe:	4b8e      	ldr	r3, [pc, #568]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aca:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001acc:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad2:	4b89      	ldr	r3, [pc, #548]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ad8:	4b87      	ldr	r3, [pc, #540]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ade:	4b86      	ldr	r3, [pc, #536]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae4:	4b84      	ldr	r3, [pc, #528]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001aea:	4883      	ldr	r0, [pc, #524]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001aec:	f001 fa64 	bl	8002fb8 <HAL_DMA_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001af6:	f7ff fa15 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001afe:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b00:	4a7d      	ldr	r2, [pc, #500]	@ (8001cf8 <HAL_UART_MspInit+0x2f8>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2034      	movs	r0, #52	@ 0x34
 8001b0c:	f001 f813 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b10:	2034      	movs	r0, #52	@ 0x34
 8001b12:	f001 f82c 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b16:	e0e4      	b.n	8001ce2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a78      	ldr	r2, [pc, #480]	@ (8001d00 <HAL_UART_MspInit+0x300>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	f040 8095 	bne.w	8001c4e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b32:	4618      	mov	r0, r3
 8001b34:	f006 f97c 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001b3e:	f7ff f9f1 	bl	8000f24 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b42:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b68      	ldr	r3, [pc, #416]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b65      	ldr	r3, [pc, #404]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a64      	ldr	r2, [pc, #400]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4850      	ldr	r0, [pc, #320]	@ (8001cf4 <HAL_UART_MspInit+0x2f4>)
 8001bb2:	f003 f873 	bl	8004c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bd8:	4619      	mov	r1, r3
 8001bda:	484a      	ldr	r0, [pc, #296]	@ (8001d04 <HAL_UART_MspInit+0x304>)
 8001bdc:	f003 f85e 	bl	8004c9c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001be0:	4b49      	ldr	r3, [pc, #292]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001be2:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <HAL_UART_MspInit+0x30c>)
 8001be4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001be6:	4b48      	ldr	r3, [pc, #288]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001be8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bec:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bee:	4b46      	ldr	r3, [pc, #280]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf4:	4b44      	ldr	r3, [pc, #272]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfa:	4b43      	ldr	r3, [pc, #268]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001bfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c00:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c02:	4b41      	ldr	r3, [pc, #260]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c08:	4b3f      	ldr	r3, [pc, #252]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c14:	4b3c      	ldr	r3, [pc, #240]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001c20:	4839      	ldr	r0, [pc, #228]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c22:	f001 f9c9 	bl	8002fb8 <HAL_DMA_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8001c2c:	f7ff f97a 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a35      	ldr	r2, [pc, #212]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c34:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c36:	4a34      	ldr	r2, [pc, #208]	@ (8001d08 <HAL_UART_MspInit+0x308>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2035      	movs	r0, #53	@ 0x35
 8001c42:	f000 ff78 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c46:	2035      	movs	r0, #53	@ 0x35
 8001c48:	f000 ff91 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8001c4c:	e049      	b.n	8001ce2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <HAL_UART_MspInit+0x310>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d144      	bne.n	8001ce2 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c66:	4618      	mov	r0, r3
 8001c68:	f006 f8e2 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8001c72:	f7ff f957 	bl	8000f24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_UART_MspInit+0x2f0>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ca6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001caa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <HAL_UART_MspInit+0x304>)
 8001cce:	f002 ffe5 	bl	8004c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2027      	movs	r0, #39	@ 0x27
 8001cd8:	f000 ff2d 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cdc:	2027      	movs	r0, #39	@ 0x27
 8001cde:	f000 ff46 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	37c0      	adds	r7, #192	@ 0xc0
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40004c00 	.word	0x40004c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	200009b4 	.word	0x200009b4
 8001cfc:	40026040 	.word	0x40026040
 8001d00:	40005000 	.word	0x40005000
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	20000a14 	.word	0x20000a14
 8001d0c:	40026010 	.word	0x40026010
 8001d10:	40004800 	.word	0x40004800

08001d14 <Reset_Handler>:
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d4c <LoopFillZerobss+0xe>
 8001d18:	f7ff fce0 	bl	80016dc <SystemInit>
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <LoopFillZerobss+0x12>)
 8001d1e:	490d      	ldr	r1, [pc, #52]	@ (8001d54 <LoopFillZerobss+0x16>)
 8001d20:	4a0d      	ldr	r2, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x1a>)
 8001d22:	2300      	movs	r3, #0
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:
 8001d26:	58d4      	ldr	r4, [r2, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:
 8001d2c:	18c4      	adds	r4, r0, r3
 8001d2e:	428c      	cmp	r4, r1
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <LoopFillZerobss+0x1e>)
 8001d34:	4c0a      	ldr	r4, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x22>)
 8001d36:	2300      	movs	r3, #0
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:
 8001d3e:	42a2      	cmp	r2, r4
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>
 8001d42:	f015 fa23 	bl	801718c <__libc_init_array>
 8001d46:	f7ff f85b 	bl	8000e00 <main>
 8001d4a:	4770      	bx	lr
 8001d4c:	20050000 	.word	0x20050000
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000088 	.word	0x20000088
 8001d58:	0801aa48 	.word	0x0801aa48
 8001d5c:	200001c8 	.word	0x200001c8
 8001d60:	20008a74 	.word	0x20008a74

08001d64 <ADC_IRQHandler>:
 8001d64:	e7fe      	b.n	8001d64 <ADC_IRQHandler>

08001d66 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <LAN8742_RegisterBusIO+0x28>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <LAN8742_RegisterBusIO+0x28>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <LAN8742_RegisterBusIO+0x28>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d92:	e014      	b.n	8001dbe <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d139      	bne.n	8001e5a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e01c      	b.n	8001e3a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f107 020c 	add.w	r2, r7, #12
 8001e08:	2112      	movs	r1, #18
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	4798      	blx	r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da03      	bge.n	8001e1c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001e14:	f06f 0304 	mvn.w	r3, #4
 8001e18:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001e1a:	e00b      	b.n	8001e34 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d105      	bne.n	8001e34 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
         break;
 8001e32:	e005      	b.n	8001e40 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b1f      	cmp	r3, #31
 8001e3e:	d9df      	bls.n	8001e00 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b1f      	cmp	r3, #31
 8001e46:	d902      	bls.n	8001e4e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e48:	f06f 0302 	mvn.w	r3, #2
 8001e4c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 }
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6810      	ldr	r0, [r2, #0]
 8001e78:	f107 020c 	add.w	r2, r7, #12
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4798      	blx	r3
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da02      	bge.n	8001e8c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e86:	f06f 0304 	mvn.w	r3, #4
 8001e8a:	e06e      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6810      	ldr	r0, [r2, #0]
 8001e94:	f107 020c 	add.w	r2, r7, #12
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4798      	blx	r3
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da02      	bge.n	8001ea8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ea2:	f06f 0304 	mvn.w	r3, #4
 8001ea6:	e060      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e059      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6810      	ldr	r0, [r2, #0]
 8001ebe:	f107 020c 	add.w	r2, r7, #12
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4798      	blx	r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da02      	bge.n	8001ed2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ecc:	f06f 0304 	mvn.w	r3, #4
 8001ed0:	e04b      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11b      	bne.n	8001f14 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <LAN8742_GetLinkState+0x90>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e03a      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e033      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e02c      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f10:	2305      	movs	r3, #5
 8001f12:	e02a      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6810      	ldr	r0, [r2, #0]
 8001f1c:	f107 020c 	add.w	r2, r7, #12
 8001f20:	211f      	movs	r1, #31
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da02      	bge.n	8001f30 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f2a:	f06f 0304 	mvn.w	r3, #4
 8001f2e:	e01c      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f3a:	2306      	movs	r3, #6
 8001f3c:	e015      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 031c 	and.w	r3, r3, #28
 8001f44:	2b18      	cmp	r3, #24
 8001f46:	d101      	bne.n	8001f4c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e00e      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 031c 	and.w	r3, r3, #28
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d101      	bne.n	8001f5a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e007      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 031c 	and.w	r3, r3, #28
 8001f60:	2b14      	cmp	r3, #20
 8001f62:	d101      	bne.n	8001f68 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f64:	2304      	movs	r3, #4
 8001f66:	e000      	b.n	8001f6a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f68:	2305      	movs	r3, #5
    }
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f76:	2003      	movs	r0, #3
 8001f78:	f000 fdd2 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7c:	200f      	movs	r0, #15
 8001f7e:	f000 f805 	bl	8001f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f82:	f7ff f9b9 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_InitTick+0x54>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_InitTick+0x58>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fded 	bl	8002b8a <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00e      	b.n	8001fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d80a      	bhi.n	8001fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fc8:	f000 fdb5 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fcc:	4a06      	ldr	r2, [pc, #24]	@ (8001fe8 <HAL_InitTick+0x5c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008
 8002010:	20000a74 	.word	0x20000a74

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000a74 	.word	0x20000a74

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <HAL_Delay+0x44>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffde 	bl	8002014 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000008 	.word	0x20000008

08002074 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e031      	b.n	80020ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe faf4 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <HAL_ADC_Init+0x84>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fae0 	bl	8002688 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80020de:	e001      	b.n	80020e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	ffffeefd 	.word	0xffffeefd

080020fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_ADC_Start_DMA+0x22>
 800211a:	2302      	movs	r3, #2
 800211c:	e0d6      	b.n	80022cc <HAL_ADC_Start_DMA+0x1d0>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d018      	beq.n	8002166 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002144:	4b63      	ldr	r3, [pc, #396]	@ (80022d4 <HAL_ADC_Start_DMA+0x1d8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a63      	ldr	r2, [pc, #396]	@ (80022d8 <HAL_ADC_Start_DMA+0x1dc>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9a      	lsrs	r2, r3, #18
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002158:	e002      	b.n	8002160 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3b01      	subs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 809e 	bne.w	80022b2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800217a:	4b58      	ldr	r3, [pc, #352]	@ (80022dc <HAL_ADC_Start_DMA+0x1e0>)
 800217c:	4013      	ands	r3, r2
 800217e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800219c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f023 0206 	bic.w	r2, r3, #6
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80021be:	e002      	b.n	80021c6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	4a43      	ldr	r2, [pc, #268]	@ (80022e0 <HAL_ADC_Start_DMA+0x1e4>)
 80021d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	4a42      	ldr	r2, [pc, #264]	@ (80022e4 <HAL_ADC_Start_DMA+0x1e8>)
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e2:	4a41      	ldr	r2, [pc, #260]	@ (80022e8 <HAL_ADC_Start_DMA+0x1ec>)
 80021e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800220e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	334c      	adds	r3, #76	@ 0x4c
 800221a:	4619      	mov	r1, r3
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f000 ff78 	bl	8003114 <HAL_DMA_Start_IT>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002228:	4b30      	ldr	r3, [pc, #192]	@ (80022ec <HAL_ADC_Start_DMA+0x1f0>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10f      	bne.n	8002254 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d143      	bne.n	80022ca <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	e03a      	b.n	80022ca <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a25      	ldr	r2, [pc, #148]	@ (80022f0 <HAL_ADC_Start_DMA+0x1f4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10e      	bne.n	800227c <HAL_ADC_Start_DMA+0x180>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800227a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_ADC_Start_DMA+0x1f0>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d120      	bne.n	80022ca <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	@ (80022f4 <HAL_ADC_Start_DMA+0x1f8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11b      	bne.n	80022ca <HAL_ADC_Start_DMA+0x1ce>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d114      	bne.n	80022ca <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e00b      	b.n	80022ca <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f043 0210 	orr.w	r2, r3, #16
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	fffff8fe 	.word	0xfffff8fe
 80022e0:	0800287d 	.word	0x0800287d
 80022e4:	08002937 	.word	0x08002937
 80022e8:	08002953 	.word	0x08002953
 80022ec:	40012300 	.word	0x40012300
 80022f0:	40012000 	.word	0x40012000
 80022f4:	40012200 	.word	0x40012200

080022f8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Stop_DMA+0x1a>
 800230e:	2302      	movs	r3, #2
 8002310:	e046      	b.n	80023a0 <HAL_ADC_Stop_DMA+0xa8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12e      	bne.n	8002396 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002346:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d10f      	bne.n	8002376 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	4618      	mov	r0, r3
 800235c:	f000 ff3a 	bl	80031d4 <HAL_DMA_Abort>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002384:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_ADC_Stop_DMA+0xb0>)
 800238c:	4013      	ands	r3, r2
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	ffffeefe 	.word	0xffffeefe

080023ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e13a      	b.n	8002666 <HAL_ADC_ConfigChannel+0x292>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	d93a      	bls.n	8002476 <HAL_ADC_ConfigChannel+0xa2>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002408:	d035      	beq.n	8002476 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68d9      	ldr	r1, [r3, #12]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	3b1e      	subs	r3, #30
 8002420:	2207      	movs	r2, #7
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a8f      	ldr	r2, [pc, #572]	@ (8002674 <HAL_ADC_ConfigChannel+0x2a0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10a      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68d9      	ldr	r1, [r3, #12]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	061a      	lsls	r2, r3, #24
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244e:	e039      	b.n	80024c4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	4603      	mov	r3, r0
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4403      	add	r3, r0
 8002468:	3b1e      	subs	r3, #30
 800246a:	409a      	lsls	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002474:	e026      	b.n	80024c4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6919      	ldr	r1, [r3, #16]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2207      	movs	r2, #7
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43da      	mvns	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	400a      	ands	r2, r1
 800249c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	4603      	mov	r3, r0
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4403      	add	r3, r0
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	409a      	lsls	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d824      	bhi.n	8002516 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b05      	subs	r3, #5
 80024de:	221f      	movs	r2, #31
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43da      	mvns	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	400a      	ands	r2, r1
 80024ec:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	3b05      	subs	r3, #5
 8002508:	fa00 f203 	lsl.w	r2, r0, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34
 8002514:	e04c      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d824      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b23      	subs	r3, #35	@ 0x23
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b23      	subs	r3, #35	@ 0x23
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
 8002566:	e023      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b41      	subs	r3, #65	@ 0x41
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43da      	mvns	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	400a      	ands	r2, r1
 8002588:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	3b41      	subs	r3, #65	@ 0x41
 80025a4:	fa00 f203 	lsl.w	r2, r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a30      	ldr	r2, [pc, #192]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10a      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1fc>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a2c      	ldr	r2, [pc, #176]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 80025ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a28      	ldr	r2, [pc, #160]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10f      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x226>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d10b      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a25      	ldr	r2, [pc, #148]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 80025e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025ee:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a22      	ldr	r2, [pc, #136]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 80025f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d12b      	bne.n	800265c <HAL_ADC_ConfigChannel+0x288>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1a      	ldr	r2, [pc, #104]	@ (8002674 <HAL_ADC_ConfigChannel+0x2a0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d003      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x242>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b11      	cmp	r3, #17
 8002614:	d122      	bne.n	800265c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a18      	ldr	r2, [pc, #96]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 800261c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002620:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002622:	4b16      	ldr	r3, [pc, #88]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a15      	ldr	r2, [pc, #84]	@ (800267c <HAL_ADC_ConfigChannel+0x2a8>)
 8002628:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800262c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <HAL_ADC_ConfigChannel+0x2a0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d111      	bne.n	800265c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_ADC_ConfigChannel+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <HAL_ADC_ConfigChannel+0x2b0>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0c9a      	lsrs	r2, r3, #18
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800264e:	e002      	b.n	8002656 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	10000012 	.word	0x10000012
 8002678:	40012000 	.word	0x40012000
 800267c:	40012300 	.word	0x40012300
 8002680:	20000000 	.word	0x20000000
 8002684:	431bde83 	.word	0x431bde83

08002688 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002690:	4b78      	ldr	r3, [pc, #480]	@ (8002874 <ADC_Init+0x1ec>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a77      	ldr	r2, [pc, #476]	@ (8002874 <ADC_Init+0x1ec>)
 8002696:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800269a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800269c:	4b75      	ldr	r3, [pc, #468]	@ (8002874 <ADC_Init+0x1ec>)
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4973      	ldr	r1, [pc, #460]	@ (8002874 <ADC_Init+0x1ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	021a      	lsls	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <ADC_Init+0x1f0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800272a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6899      	ldr	r1, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800274c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	e00f      	b.n	8002782 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002780:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0202 	bic.w	r2, r2, #2
 8002790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	005a      	lsls	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01b      	beq.n	80027e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	3b01      	subs	r3, #1
 80027dc:	035a      	lsls	r2, r3, #13
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	e007      	b.n	80027f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	3b01      	subs	r3, #1
 8002814:	051a      	lsls	r2, r3, #20
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800282c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800283a:	025a      	lsls	r2, r3, #9
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	029a      	lsls	r2, r3, #10
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40012300 	.word	0x40012300
 8002878:	0f000001 	.word	0x0f000001

0800287c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d13c      	bne.n	8002910 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d12b      	bne.n	8002908 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d127      	bne.n	8002908 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d119      	bne.n	8002908 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0220 	bic.w	r2, r2, #32
 80028e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f013 fdb1 	bl	8016470 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800290e:	e00e      	b.n	800292e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fd4f 	bl	80023c0 <HAL_ADC_ErrorCallback>
}
 8002922:	e004      	b.n	800292e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002942:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff fd31 	bl	80023ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2240      	movs	r2, #64	@ 0x40
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7ff fd24 	bl	80023c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	05fa0000 	.word	0x05fa0000

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	@ (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	@ (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	@ (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	@ 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e054      	b.n	8002c60 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7f5b      	ldrb	r3, [r3, #29]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fdee 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	791b      	ldrb	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <HAL_CRC_Init+0xc4>)
 8002be0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0218 	bic.w	r2, r2, #24
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	e00c      	b.n	8002c0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6899      	ldr	r1, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f94c 	bl	8002e9c <HAL_CRCEx_Polynomial_Set>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e028      	b.n	8002c60 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	795b      	ldrb	r3, [r3, #5]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c1e:	611a      	str	r2, [r3, #16]
 8002c20:	e004      	b.n	8002c2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6912      	ldr	r2, [r2, #16]
 8002c2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	04c11db7 	.word	0x04c11db7

08002c6c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d006      	beq.n	8002ca8 <HAL_CRC_Calculate+0x3c>
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d829      	bhi.n	8002cf2 <HAL_CRC_Calculate+0x86>
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d019      	beq.n	8002cd6 <HAL_CRC_Calculate+0x6a>
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d01e      	beq.n	8002ce4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002ca6:	e024      	b.n	8002cf2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e00a      	b.n	8002cc4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d3f0      	bcc.n	8002cae <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	613b      	str	r3, [r7, #16]
      break;
 8002cd4:	e00e      	b.n	8002cf4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f812 	bl	8002d04 <CRC_Handle_8>
 8002ce0:	6138      	str	r0, [r7, #16]
      break;
 8002ce2:	e007      	b.n	8002cf4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f89d 	bl	8002e28 <CRC_Handle_16>
 8002cee:	6138      	str	r0, [r7, #16]
      break;
 8002cf0:	e000      	b.n	8002cf4 <HAL_CRC_Calculate+0x88>
      break;
 8002cf2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002cfa:	693b      	ldr	r3, [r7, #16]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	e023      	b.n	8002d5e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3301      	adds	r3, #1
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	440b      	add	r3, r1
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d30:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	440b      	add	r3, r1
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002d40:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3303      	adds	r3, #3
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	440b      	add	r3, r1
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002d54:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3d6      	bcc.n	8002d16 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d051      	beq.n	8002e16 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d108      	bne.n	8002d8e <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4413      	add	r3, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	7013      	strb	r3, [r2, #0]
 8002d8c:	e043      	b.n	8002e16 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d118      	bne.n	8002dca <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b21b      	sxth	r3, r3
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	3301      	adds	r3, #1
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	440b      	add	r3, r1
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b21b      	sxth	r3, r3
 8002db6:	4313      	orrs	r3, r2
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	8b7a      	ldrh	r2, [r7, #26]
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e025      	b.n	8002e16 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d120      	bne.n	8002e16 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	4413      	add	r3, r2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b21b      	sxth	r3, r3
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3301      	adds	r3, #1
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	440b      	add	r3, r1
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b21b      	sxth	r3, r3
 8002df6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	8b7a      	ldrh	r2, [r7, #26]
 8002e02:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3724      	adds	r7, #36	@ 0x24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e013      	b.n	8002e62 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	041a      	lsls	r2, r3, #16
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	440b      	add	r3, r1
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d3e6      	bcc.n	8002e3a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	4413      	add	r3, r2
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002eac:	231f      	movs	r3, #31
 8002eae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
 8002ebe:	e063      	b.n	8002f88 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ec0:	bf00      	nop
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1e5a      	subs	r2, r3, #1
 8002ec6:	613a      	str	r2, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_CRCEx_Polynomial_Set+0x44>
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b18      	cmp	r3, #24
 8002ee4:	d846      	bhi.n	8002f74 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <HAL_CRCEx_Polynomial_Set+0x50>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f7b 	.word	0x08002f7b
 8002ef0:	08002f75 	.word	0x08002f75
 8002ef4:	08002f75 	.word	0x08002f75
 8002ef8:	08002f75 	.word	0x08002f75
 8002efc:	08002f75 	.word	0x08002f75
 8002f00:	08002f75 	.word	0x08002f75
 8002f04:	08002f75 	.word	0x08002f75
 8002f08:	08002f75 	.word	0x08002f75
 8002f0c:	08002f69 	.word	0x08002f69
 8002f10:	08002f75 	.word	0x08002f75
 8002f14:	08002f75 	.word	0x08002f75
 8002f18:	08002f75 	.word	0x08002f75
 8002f1c:	08002f75 	.word	0x08002f75
 8002f20:	08002f75 	.word	0x08002f75
 8002f24:	08002f75 	.word	0x08002f75
 8002f28:	08002f75 	.word	0x08002f75
 8002f2c:	08002f5d 	.word	0x08002f5d
 8002f30:	08002f75 	.word	0x08002f75
 8002f34:	08002f75 	.word	0x08002f75
 8002f38:	08002f75 	.word	0x08002f75
 8002f3c:	08002f75 	.word	0x08002f75
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08002f75 	.word	0x08002f75
 8002f48:	08002f75 	.word	0x08002f75
 8002f4c:	08002f51 	.word	0x08002f51
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d913      	bls.n	8002f7e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f5a:	e010      	b.n	8002f7e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b07      	cmp	r3, #7
 8002f60:	d90f      	bls.n	8002f82 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f66:	e00c      	b.n	8002f82 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d90b      	bls.n	8002f86 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f72:	e008      	b.n	8002f86 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
        break;
 8002f78:	e006      	b.n	8002f88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e004      	b.n	8002f88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e002      	b.n	8002f88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f86:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 0118 	bic.w	r1, r3, #24
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff f826 	bl	8002014 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e099      	b.n	8003108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff4:	e00f      	b.n	8003016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff6:	f7ff f80d 	bl	8002014 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b05      	cmp	r3, #5
 8003002:	d908      	bls.n	8003016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e078      	b.n	8003108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e8      	bne.n	8002ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4b38      	ldr	r3, [pc, #224]	@ (8003110 <HAL_DMA_Init+0x158>)
 8003030:	4013      	ands	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	2b04      	cmp	r3, #4
 800306e:	d107      	bne.n	8003080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	4313      	orrs	r3, r2
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0307 	bic.w	r3, r3, #7
 8003096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d117      	bne.n	80030da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fb23 	bl	8003708 <DMA_CheckFifoParam>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2240      	movs	r2, #64	@ 0x40
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030d6:	2301      	movs	r3, #1
 80030d8:	e016      	b.n	8003108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fada 	bl	800369c <DMA_CalcBaseAndBitshift>
 80030e8:	4603      	mov	r3, r0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	223f      	movs	r2, #63	@ 0x3f
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	f010803f 	.word	0xf010803f

08003114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_DMA_Start_IT+0x26>
 8003136:	2302      	movs	r3, #2
 8003138:	e048      	b.n	80031cc <HAL_DMA_Start_IT+0xb8>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d137      	bne.n	80031be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fa6c 	bl	8003640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	223f      	movs	r2, #63	@ 0x3f
 800316e:	409a      	lsls	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0216 	orr.w	r2, r2, #22
 8003182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003192:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e005      	b.n	80031ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031e2:	f7fe ff17 	bl	8002014 <HAL_GetTick>
 80031e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e052      	b.n	80032ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0216 	bic.w	r2, r2, #22
 8003214:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003224:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <HAL_DMA_Abort+0x62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0208 	bic.w	r2, r2, #8
 8003244:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003256:	e013      	b.n	8003280 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003258:	f7fe fedc 	bl	8002014 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b05      	cmp	r3, #5
 8003264:	d90c      	bls.n	8003280 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2203      	movs	r2, #3
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e015      	b.n	80032ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e4      	bne.n	8003258 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003292:	223f      	movs	r2, #63	@ 0x3f
 8003294:	409a      	lsls	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00c      	b.n	80032ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2205      	movs	r2, #5
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003304:	4b8e      	ldr	r3, [pc, #568]	@ (8003540 <HAL_DMA_IRQHandler+0x248>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a8e      	ldr	r2, [pc, #568]	@ (8003544 <HAL_DMA_IRQHandler+0x24c>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0a9b      	lsrs	r3, r3, #10
 8003310:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003316:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003322:	2208      	movs	r2, #8
 8003324:	409a      	lsls	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01a      	beq.n	8003364 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003350:	2208      	movs	r2, #8
 8003352:	409a      	lsls	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003368:	2201      	movs	r2, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00b      	beq.n	800339a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	2201      	movs	r2, #1
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	f043 0202 	orr.w	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	2204      	movs	r2, #4
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d012      	beq.n	80033d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	2204      	movs	r2, #4
 80033be:	409a      	lsls	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	f043 0204 	orr.w	r2, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	2210      	movs	r2, #16
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d043      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03c      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	2210      	movs	r2, #16
 80033f4:	409a      	lsls	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d018      	beq.n	800343a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d108      	bne.n	8003428 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d024      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
 8003426:	e01f      	b.n	8003468 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e016      	b.n	8003468 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0208 	bic.w	r2, r2, #8
 8003456:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346c:	2220      	movs	r2, #32
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 808f 	beq.w	8003598 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8087 	beq.w	8003598 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	2220      	movs	r2, #32
 8003490:	409a      	lsls	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d136      	bne.n	8003510 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0216 	bic.w	r2, r2, #22
 80034b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x1da>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0208 	bic.w	r2, r2, #8
 80034e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	223f      	movs	r2, #63	@ 0x3f
 80034e8:	409a      	lsls	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d07e      	beq.n	8003604 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
        }
        return;
 800350e:	e079      	b.n	8003604 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01d      	beq.n	800355a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10d      	bne.n	8003548 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	2b00      	cmp	r3, #0
 8003532:	d031      	beq.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e02c      	b.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
 800353e:	bf00      	nop
 8003540:	20000000 	.word	0x20000000
 8003544:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d023      	beq.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
 8003558:	e01e      	b.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10f      	bne.n	8003588 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0210 	bic.w	r2, r2, #16
 8003576:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d032      	beq.n	8003606 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d022      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2205      	movs	r2, #5
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3301      	adds	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d307      	bcc.n	80035e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f2      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x2cc>
 80035de:	e000      	b.n	80035e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e000      	b.n	8003606 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003604:	bf00      	nop
    }
  }
}
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800361a:	b2db      	uxtb	r3, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800365c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d108      	bne.n	8003680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800367e:	e007      	b.n	8003690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3b10      	subs	r3, #16
 80036ac:	4a13      	ldr	r2, [pc, #76]	@ (80036fc <DMA_CalcBaseAndBitshift+0x60>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b6:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <DMA_CalcBaseAndBitshift+0x64>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d908      	bls.n	80036dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <DMA_CalcBaseAndBitshift+0x68>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	1d1a      	adds	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036da:	e006      	b.n	80036ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <DMA_CalcBaseAndBitshift+0x68>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	aaaaaaab 	.word	0xaaaaaaab
 8003700:	0801a864 	.word	0x0801a864
 8003704:	fffffc00 	.word	0xfffffc00

08003708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d856      	bhi.n	80037d6 <DMA_CheckFifoParam+0xce>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <DMA_CheckFifoParam+0x28>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003741 	.word	0x08003741
 8003734:	08003753 	.word	0x08003753
 8003738:	08003741 	.word	0x08003741
 800373c:	080037d7 	.word	0x080037d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d046      	beq.n	80037da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e043      	b.n	80037da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800375a:	d140      	bne.n	80037de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003760:	e03d      	b.n	80037de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376a:	d121      	bne.n	80037b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d837      	bhi.n	80037e2 <DMA_CheckFifoParam+0xda>
 8003772:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <DMA_CheckFifoParam+0x70>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	08003789 	.word	0x08003789
 800377c:	0800378f 	.word	0x0800378f
 8003780:	08003789 	.word	0x08003789
 8003784:	080037a1 	.word	0x080037a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e030      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d025      	beq.n	80037e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379e:	e022      	b.n	80037e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037a8:	d11f      	bne.n	80037ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ae:	e01c      	b.n	80037ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d903      	bls.n	80037be <DMA_CheckFifoParam+0xb6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037bc:	e018      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      break;
 80037c2:	e015      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e00b      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037d6:	bf00      	nop
 80037d8:	e00a      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
 80037dc:	e008      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e006      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
    }
  } 
  
  return status; 
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e086      	b.n	8003920 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f008 fbdb 	bl	800bfe0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382a:	4b3f      	ldr	r3, [pc, #252]	@ (8003928 <HAL_ETH_Init+0x128>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	4a3e      	ldr	r2, [pc, #248]	@ (8003928 <HAL_ETH_Init+0x128>)
 8003830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003834:	6453      	str	r3, [r2, #68]	@ 0x44
 8003836:	4b3c      	ldr	r3, [pc, #240]	@ (8003928 <HAL_ETH_Init+0x128>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003842:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <HAL_ETH_Init+0x12c>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a39      	ldr	r2, [pc, #228]	@ (800392c <HAL_ETH_Init+0x12c>)
 8003848:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800384c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800384e:	4b37      	ldr	r3, [pc, #220]	@ (800392c <HAL_ETH_Init+0x12c>)
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4935      	ldr	r1, [pc, #212]	@ (800392c <HAL_ETH_Init+0x12c>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800385c:	4b33      	ldr	r3, [pc, #204]	@ (800392c <HAL_ETH_Init+0x12c>)
 800385e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003876:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003878:	f7fe fbcc 	bl	8002014 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800387e:	e011      	b.n	80038a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003880:	f7fe fbc8 	bl	8002014 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800388e:	d909      	bls.n	80038a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	22e0      	movs	r2, #224	@ 0xe0
 800389c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e03d      	b.n	8003920 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e4      	bne.n	8003880 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 ff34 	bl	8004724 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 ffdf 	bl	8004880 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f001 f835 	bl	8004932 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	461a      	mov	r2, r3
 80038ce:	2100      	movs	r1, #0
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 ff9d 	bl	8004810 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80038e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_ETH_Init+0x130>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800390a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2210      	movs	r2, #16
 800391a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	40013800 	.word	0x40013800
 8003930:	00020060 	.word	0x00020060

08003934 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003942:	2b10      	cmp	r3, #16
 8003944:	d15f      	bne.n	8003a06 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa2e 	bl	8003dbc <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003968:	2001      	movs	r0, #1
 800396a:	f7fe fb5f 	bl	800202c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003988:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800398c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039a4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fd58 	bl	800445c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7fe fb31 	bl	800202c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0204 	orr.w	r2, r2, #4
 80039e0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ea:	69d9      	ldr	r1, [r3, #28]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <HAL_ETH_Start_IT+0xdc>)
 80039f2:	430b      	orrs	r3, r1
 80039f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039f8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2240      	movs	r2, #64	@ 0x40
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	0001a0c1 	.word	0x0001a0c1

08003a14 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a22:	2b40      	cmp	r3, #64	@ 0x40
 8003a24:	d16e      	bne.n	8003b04 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_ETH_Stop_IT+0xfc>)
 8003a3e:	400b      	ands	r3, r1
 8003a40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a44:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a5c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	f023 0302 	bic.w	r3, r3, #2
 8003a70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a74:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0204 	bic.w	r2, r2, #4
 8003a84:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f7fe facc 	bl	800202c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fcdd 	bl	800445c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0208 	bic.w	r2, r2, #8
 8003ab0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aba:	2001      	movs	r0, #1
 8003abc:	f7fe fab6 	bl	800202c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e00e      	b.n	8003aec <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	3212      	adds	r2, #18
 8003ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d9ed      	bls.n	8003ace <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2210      	movs	r2, #16
 8003afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	fffe5f3e 	.word	0xfffe5f3e

08003b14 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e07c      	b.n	8003c34 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b40:	2b40      	cmp	r3, #64	@ 0x40
 8003b42:	d176      	bne.n	8003c32 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003b44:	2200      	movs	r2, #0
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 ff61 	bl	8004a10 <ETH_Prepare_Tx_Descriptors>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f043 0202 	orr.w	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e065      	b.n	8003c34 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b68:	f3bf 8f4f 	dsb	sy
}
 8003b6c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3206      	adds	r2, #6
 8003b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d904      	bls.n	8003b98 <HAL_ETH_Transmit+0x84>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	1f1a      	subs	r2, r3, #4
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3106      	adds	r1, #6
 8003ba4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ba8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bac:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003bae:	f7fe fa31 	bl	8002014 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003bb4:	e037      	b.n	8003c26 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d011      	beq.n	8003bec <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f043 0208 	orr.w	r2, r3, #8
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e023      	b.n	8003c34 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bf2:	d018      	beq.n	8003c26 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fe fa0e 	bl	8002014 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <HAL_ETH_Transmit+0xf6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10d      	bne.n	8003c26 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003c20:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e006      	b.n	8003c34 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	dbc3      	blt.n	8003bb6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5a:	f043 0201 	orr.w	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0a4      	b.n	8003db2 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d001      	beq.n	8003c76 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e09d      	b.n	8003db2 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	3212      	adds	r2, #18
 8003c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c86:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c8c:	f1c3 0304 	rsb	r3, r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c92:	e066      	b.n	8003d62 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <HAL_ETH_ReadData+0x88>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d03c      	beq.n	8003d3e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ce6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f008 fb31 	bl	800c384 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	441a      	add	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d902      	bls.n	8003d50 <HAL_ETH_ReadData+0x114>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3b04      	subs	r3, #4
 8003d4e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	3212      	adds	r2, #18
 8003d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db06      	blt.n	8003d78 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d202      	bcs.n	8003d78 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d08d      	beq.n	8003c94 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	441a      	add	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f815 	bl	8003dbc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d108      	bne.n	8003db0 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3720      	adds	r7, #32
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dd0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	3212      	adds	r2, #18
 8003dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ddc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003de4:	e042      	b.n	8003e6c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d112      	bne.n	8003e14 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	4618      	mov	r0, r3
 8003df4:	f008 fa96 	bl	800c324 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	74fb      	strb	r3, [r7, #19]
 8003e02:	e007      	b.n	8003e14 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	461a      	mov	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <ETH_UpdateDescriptor+0x104>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	6053      	str	r3, [r2, #4]
 8003e2e:	e005      	b.n	8003e3c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d902      	bls.n	8003e5a <ETH_UpdateDescriptor+0x9e>
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	3b04      	subs	r3, #4
 8003e58:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	3212      	adds	r2, #18
 8003e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e64:	617b      	str	r3, [r7, #20]
      desccount--;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <ETH_UpdateDescriptor+0xbc>
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1b6      	bne.n	8003de6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d01a      	beq.n	8003eb8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3303      	adds	r3, #3
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003e8c:	f3bf 8f5f 	dmb	sy
}
 8003e90:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6919      	ldr	r1, [r3, #16]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	18ca      	adds	r2, r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eaa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	80004000 	.word	0x80004000

08003ec4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003eec:	4b4b      	ldr	r3, [pc, #300]	@ (800401c <HAL_ETH_IRQHandler+0x158>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00e      	beq.n	8003f1a <HAL_ETH_IRQHandler+0x56>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b43      	ldr	r3, [pc, #268]	@ (8004020 <HAL_ETH_IRQHandler+0x15c>)
 8003f12:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f891 	bl	800403c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00f      	beq.n	8003f44 <HAL_ETH_IRQHandler+0x80>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f36:	461a      	mov	r2, r3
 8003f38:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003f3c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f872 	bl	8004028 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d042      	beq.n	8003fd4 <HAL_ETH_IRQHandler+0x110>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03d      	beq.n	8003fd4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f043 0208 	orr.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01a      	beq.n	8003fa8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	4b29      	ldr	r3, [pc, #164]	@ (8004024 <HAL_ETH_IRQHandler+0x160>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003f98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f9c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	22e0      	movs	r2, #224	@ 0xe0
 8003fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003fa6:	e012      	b.n	8003fce <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fcc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f83e 	bl	8004050 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f838 	bl	8004064 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004006:	4b05      	ldr	r3, [pc, #20]	@ (800401c <HAL_ETH_IRQHandler+0x158>)
 8004008:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800400c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f832 	bl	8004078 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40013c00 	.word	0x40013c00
 8004020:	00010040 	.word	0x00010040
 8004024:	007e2000 	.word	0x007e2000

08004028 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 031c 	and.w	r3, r3, #28
 80040a8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	02db      	lsls	r3, r3, #11
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	019b      	lsls	r3, r3, #6
 80040ba:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0302 	bic.w	r3, r3, #2
 80040ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80040dc:	f7fd ff9a 	bl	8002014 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040e2:	e00d      	b.n	8004100 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80040e4:	f7fd ff96 	bl	8002014 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f2:	d301      	bcc.n	80040f8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e010      	b.n	800411a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ec      	bne.n	80040e4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	b29b      	uxth	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 031c 	and.w	r3, r3, #28
 800413e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	02db      	lsls	r3, r3, #11
 8004144:	b29b      	uxth	r3, r3
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	019b      	lsls	r3, r3, #6
 8004150:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800417c:	f7fd ff4a 	bl	8002014 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004182:	e00d      	b.n	80041a0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004184:	f7fd ff46 	bl	8002014 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004192:	d301      	bcc.n	8004198 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e009      	b.n	80041ac <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ec      	bne.n	8004184 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0e6      	b.n	8004396 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bf14      	ite	ne
 80042e2:	2301      	movne	r3, #1
 80042e4:	2300      	moveq	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf14      	ite	ne
 8004316:	2301      	movne	r3, #1
 8004318:	2300      	moveq	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	b29a      	uxth	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e00b      	b.n	80043ce <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d105      	bne.n	80043cc <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80043c0:	6839      	ldr	r1, [r7, #0]
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f870 	bl	80044a8 <ETH_SetMACConfig>

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 031c 	bic.w	r3, r3, #28
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043f0:	f003 fcea 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 80043f4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a14      	ldr	r2, [pc, #80]	@ (800444c <HAL_ETH_SetMDIOClockRange+0x74>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d804      	bhi.n	8004408 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f043 0308 	orr.w	r3, r3, #8
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e019      	b.n	800443c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a11      	ldr	r2, [pc, #68]	@ (8004450 <HAL_ETH_SetMDIOClockRange+0x78>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d204      	bcs.n	800441a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f043 030c 	orr.w	r3, r3, #12
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e010      	b.n	800443c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a0d      	ldr	r2, [pc, #52]	@ (8004454 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d90c      	bls.n	800443c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a0c      	ldr	r2, [pc, #48]	@ (8004458 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d804      	bhi.n	8004434 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f043 0304 	orr.w	r3, r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	e003      	b.n	800443c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f043 0310 	orr.w	r3, r3, #16
 800443a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	611a      	str	r2, [r3, #16]
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	02160ebf 	.word	0x02160ebf
 8004450:	03938700 	.word	0x03938700
 8004454:	05f5e0ff 	.word	0x05f5e0ff
 8004458:	08f0d17f 	.word	0x08f0d17f

0800445c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800447e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800448c:	2001      	movs	r0, #1
 800448e:	f7fd fdcd 	bl	800202c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800449c:	6193      	str	r3, [r2, #24]
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4b53      	ldr	r3, [pc, #332]	@ (800460c <ETH_SetMACConfig+0x164>)
 80044be:	4013      	ands	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	7b9b      	ldrb	r3, [r3, #14]
 80044c6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	7c12      	ldrb	r2, [r2, #16]
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d102      	bne.n	80044d6 <ETH_SetMACConfig+0x2e>
 80044d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044d4:	e000      	b.n	80044d8 <ETH_SetMACConfig+0x30>
 80044d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	7c52      	ldrb	r2, [r2, #17]
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d102      	bne.n	80044e8 <ETH_SetMACConfig+0x40>
 80044e2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80044e6:	e000      	b.n	80044ea <ETH_SetMACConfig+0x42>
 80044e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	7fdb      	ldrb	r3, [r3, #31]
 80044f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80044f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	7f92      	ldrb	r2, [r2, #30]
 8004504:	2a00      	cmp	r2, #0
 8004506:	d102      	bne.n	800450e <ETH_SetMACConfig+0x66>
 8004508:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800450c:	e000      	b.n	8004510 <ETH_SetMACConfig+0x68>
 800450e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004510:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	7f1b      	ldrb	r3, [r3, #28]
 8004516:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004518:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800451e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	791b      	ldrb	r3, [r3, #4]
 8004524:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004526:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800452e:	2a00      	cmp	r2, #0
 8004530:	d102      	bne.n	8004538 <ETH_SetMACConfig+0x90>
 8004532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004536:	e000      	b.n	800453a <ETH_SetMACConfig+0x92>
 8004538:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800453a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	7bdb      	ldrb	r3, [r3, #15]
 8004540:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004542:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004548:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004550:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004552:	4313      	orrs	r3, r2
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800456a:	2001      	movs	r0, #1
 800456c:	f7fd fd5e 	bl	800202c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004586:	4013      	ands	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004596:	2a00      	cmp	r2, #0
 8004598:	d101      	bne.n	800459e <ETH_SetMACConfig+0xf6>
 800459a:	2280      	movs	r2, #128	@ 0x80
 800459c:	e000      	b.n	80045a0 <ETH_SetMACConfig+0xf8>
 800459e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80045a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80045ae:	2a01      	cmp	r2, #1
 80045b0:	d101      	bne.n	80045b6 <ETH_SetMACConfig+0x10e>
 80045b2:	2208      	movs	r2, #8
 80045b4:	e000      	b.n	80045b8 <ETH_SetMACConfig+0x110>
 80045b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80045b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80045c0:	2a01      	cmp	r2, #1
 80045c2:	d101      	bne.n	80045c8 <ETH_SetMACConfig+0x120>
 80045c4:	2204      	movs	r2, #4
 80045c6:	e000      	b.n	80045ca <ETH_SetMACConfig+0x122>
 80045c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80045d2:	2a01      	cmp	r2, #1
 80045d4:	d101      	bne.n	80045da <ETH_SetMACConfig+0x132>
 80045d6:	2202      	movs	r2, #2
 80045d8:	e000      	b.n	80045dc <ETH_SetMACConfig+0x134>
 80045da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045dc:	4313      	orrs	r3, r2
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7fd fd19 	bl	800202c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	619a      	str	r2, [r3, #24]
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	fd20810f 	.word	0xfd20810f

08004610 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4b3d      	ldr	r3, [pc, #244]	@ (8004720 <ETH_SetDMAConfig+0x110>)
 800462a:	4013      	ands	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	7b1b      	ldrb	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <ETH_SetDMAConfig+0x2c>
 8004636:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800463a:	e000      	b.n	800463e <ETH_SetDMAConfig+0x2e>
 800463c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	7b5b      	ldrb	r3, [r3, #13]
 8004642:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004644:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	7f52      	ldrb	r2, [r2, #29]
 800464a:	2a00      	cmp	r2, #0
 800464c:	d102      	bne.n	8004654 <ETH_SetDMAConfig+0x44>
 800464e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004652:	e000      	b.n	8004656 <ETH_SetDMAConfig+0x46>
 8004654:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004656:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	7b9b      	ldrb	r3, [r3, #14]
 800465c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800465e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004664:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	7f1b      	ldrb	r3, [r3, #28]
 800466a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800466c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	7f9b      	ldrb	r3, [r3, #30]
 8004672:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004674:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800467a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004682:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004684:	4313      	orrs	r3, r2
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004694:	461a      	mov	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046a6:	2001      	movs	r0, #1
 80046a8:	f7fd fcc0 	bl	800202c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b4:	461a      	mov	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	791b      	ldrb	r3, [r3, #4]
 80046be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80046ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80046da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004704:	2001      	movs	r0, #1
 8004706:	f7fd fc91 	bl	800202c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	f8de3f23 	.word	0xf8de3f23

08004724 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0a6      	sub	sp, #152	@ 0x98
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004738:	2300      	movs	r3, #0
 800473a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004760:	2300      	movs	r3, #0
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004766:	2300      	movs	r3, #0
 8004768:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004770:	2300      	movs	r3, #0
 8004772:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800478c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004790:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004798:	2300      	movs	r3, #0
 800479a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800479e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fe7f 	bl	80044a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80047ae:	2301      	movs	r3, #1
 80047b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047de:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047e4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047ea:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff05 	bl	8004610 <ETH_SetDMAConfig>
}
 8004806:	bf00      	nop
 8004808:	3798      	adds	r7, #152	@ 0x98
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3305      	adds	r3, #5
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	3204      	adds	r2, #4
 8004828:	7812      	ldrb	r2, [r2, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4b11      	ldr	r3, [pc, #68]	@ (8004878 <ETH_MACAddressConfig+0x68>)
 8004832:	4413      	add	r3, r2
 8004834:	461a      	mov	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3303      	adds	r3, #3
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	061a      	lsls	r2, r3, #24
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3302      	adds	r3, #2
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3301      	adds	r3, #1
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	4313      	orrs	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4b06      	ldr	r3, [pc, #24]	@ (800487c <ETH_MACAddressConfig+0x6c>)
 8004862:	4413      	add	r3, r2
 8004864:	461a      	mov	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	6013      	str	r3, [r2, #0]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40028040 	.word	0x40028040
 800487c:	40028044 	.word	0x40028044

08004880 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e03e      	b.n	800490c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68d9      	ldr	r1, [r3, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	440b      	add	r3, r1
 800489e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	3206      	adds	r2, #6
 80048c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d80c      	bhi.n	80048f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68d9      	ldr	r1, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	e004      	b.n	80048fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	461a      	mov	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d9bd      	bls.n	800488e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004924:	611a      	str	r2, [r3, #16]
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e048      	b.n	80049d2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6919      	ldr	r1, [r3, #16]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	440b      	add	r3, r1
 8004950:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2200      	movs	r2, #0
 8004968:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2200      	movs	r2, #0
 800496e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800497c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	3212      	adds	r2, #18
 800499e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d80c      	bhi.n	80049c2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6919      	ldr	r1, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	440b      	add	r3, r1
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	60da      	str	r2, [r3, #12]
 80049c0:	e004      	b.n	80049cc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d9b3      	bls.n	8004940 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a02:	60da      	str	r2, [r3, #12]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b091      	sub	sp, #68	@ 0x44
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3318      	adds	r3, #24
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a52:	d007      	beq.n	8004a64 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a58:	3304      	adds	r3, #4
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004a64:	2302      	movs	r3, #2
 8004a66:	e111      	b.n	8004c8c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	4b86      	ldr	r3, [pc, #536]	@ (8004c98 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a82:	6852      	ldr	r2, [r2, #4]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004aea:	e082      	b.n	8004bf2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d006      	beq.n	8004b0c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e005      	b.n	8004b18 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d902      	bls.n	8004b2a <ETH_Prepare_Tx_Descriptors+0x11a>
 8004b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b26:	3b04      	subs	r3, #4
 8004b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b32:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b40:	d007      	beq.n	8004b52 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b46:	3304      	adds	r3, #4
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d029      	beq.n	8004ba6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004b60:	2300      	movs	r3, #0
 8004b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b64:	e019      	b.n	8004b9a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004b66:	f3bf 8f5f 	dmb	sy
}
 8004b6a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b76:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d902      	bls.n	8004b8a <ETH_Prepare_Tx_Descriptors+0x17a>
 8004b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b86:	3b04      	subs	r3, #4
 8004b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b92:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	3301      	adds	r3, #1
 8004b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d3e1      	bcc.n	8004b66 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e072      	b.n	8004c8c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	4b32      	ldr	r3, [pc, #200]	@ (8004c98 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd2:	6852      	ldr	r2, [r2, #4]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	3301      	adds	r3, #1
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004be0:	f3bf 8f5f 	dmb	sy
}
 8004be4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f47f af78 	bne.w	8004aec <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e005      	b.n	8004c1c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	6a3a      	ldr	r2, [r7, #32]
 8004c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004c32:	f3bf 8f5f 	dmb	sy
}
 8004c36:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c58:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8004c60:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	2301      	movs	r3, #1
 8004c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f383 8810 	msr	PRIMASK, r3
}
 8004c6e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	4413      	add	r3, r2
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3744      	adds	r7, #68	@ 0x44
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	ffffe000 	.word	0xffffe000

08004c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	@ 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	e175      	b.n	8004fa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	f040 8164 	bne.w	8004fa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d005      	beq.n	8004cf2 <HAL_GPIO_Init+0x56>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d130      	bne.n	8004d54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d28:	2201      	movs	r2, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 0201 	and.w	r2, r3, #1
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d017      	beq.n	8004d90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d123      	bne.n	8004de4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	08da      	lsrs	r2, r3, #3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3208      	adds	r2, #8
 8004da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	220f      	movs	r2, #15
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	08da      	lsrs	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3208      	adds	r2, #8
 8004dde:	69b9      	ldr	r1, [r7, #24]
 8004de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2203      	movs	r2, #3
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0203 	and.w	r2, r3, #3
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80be 	beq.w	8004fa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e26:	4b66      	ldr	r3, [pc, #408]	@ (8004fc0 <HAL_GPIO_Init+0x324>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	4a65      	ldr	r2, [pc, #404]	@ (8004fc0 <HAL_GPIO_Init+0x324>)
 8004e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <HAL_GPIO_Init+0x324>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e3e:	4a61      	ldr	r2, [pc, #388]	@ (8004fc4 <HAL_GPIO_Init+0x328>)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	3302      	adds	r3, #2
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	220f      	movs	r2, #15
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a58      	ldr	r2, [pc, #352]	@ (8004fc8 <HAL_GPIO_Init+0x32c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d037      	beq.n	8004eda <HAL_GPIO_Init+0x23e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a57      	ldr	r2, [pc, #348]	@ (8004fcc <HAL_GPIO_Init+0x330>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d031      	beq.n	8004ed6 <HAL_GPIO_Init+0x23a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a56      	ldr	r2, [pc, #344]	@ (8004fd0 <HAL_GPIO_Init+0x334>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d02b      	beq.n	8004ed2 <HAL_GPIO_Init+0x236>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a55      	ldr	r2, [pc, #340]	@ (8004fd4 <HAL_GPIO_Init+0x338>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d025      	beq.n	8004ece <HAL_GPIO_Init+0x232>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a54      	ldr	r2, [pc, #336]	@ (8004fd8 <HAL_GPIO_Init+0x33c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <HAL_GPIO_Init+0x22e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a53      	ldr	r2, [pc, #332]	@ (8004fdc <HAL_GPIO_Init+0x340>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d019      	beq.n	8004ec6 <HAL_GPIO_Init+0x22a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a52      	ldr	r2, [pc, #328]	@ (8004fe0 <HAL_GPIO_Init+0x344>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_GPIO_Init+0x226>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a51      	ldr	r2, [pc, #324]	@ (8004fe4 <HAL_GPIO_Init+0x348>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00d      	beq.n	8004ebe <HAL_GPIO_Init+0x222>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a50      	ldr	r2, [pc, #320]	@ (8004fe8 <HAL_GPIO_Init+0x34c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <HAL_GPIO_Init+0x21e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a4f      	ldr	r2, [pc, #316]	@ (8004fec <HAL_GPIO_Init+0x350>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_GPIO_Init+0x21a>
 8004eb2:	2309      	movs	r3, #9
 8004eb4:	e012      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	e010      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	e00e      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004ebe:	2307      	movs	r3, #7
 8004ec0:	e00c      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004ec2:	2306      	movs	r3, #6
 8004ec4:	e00a      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004ec6:	2305      	movs	r3, #5
 8004ec8:	e008      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004eca:	2304      	movs	r3, #4
 8004ecc:	e006      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e004      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e002      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <HAL_GPIO_Init+0x240>
 8004eda:	2300      	movs	r3, #0
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	f002 0203 	and.w	r2, r2, #3
 8004ee2:	0092      	lsls	r2, r2, #2
 8004ee4:	4093      	lsls	r3, r2
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004eec:	4935      	ldr	r1, [pc, #212]	@ (8004fc4 <HAL_GPIO_Init+0x328>)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	089b      	lsrs	r3, r3, #2
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004efa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4013      	ands	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f1e:	4a34      	ldr	r2, [pc, #208]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f24:	4b32      	ldr	r3, [pc, #200]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f48:	4a29      	ldr	r2, [pc, #164]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	43db      	mvns	r3, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f72:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ff0 <HAL_GPIO_Init+0x354>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b0f      	cmp	r3, #15
 8004fac:	f67f ae86 	bls.w	8004cbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	3724      	adds	r7, #36	@ 0x24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40013800 	.word	0x40013800
 8004fc8:	40020000 	.word	0x40020000
 8004fcc:	40020400 	.word	0x40020400
 8004fd0:	40020800 	.word	0x40020800
 8004fd4:	40020c00 	.word	0x40020c00
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40021400 	.word	0x40021400
 8004fe0:	40021800 	.word	0x40021800
 8004fe4:	40021c00 	.word	0x40021c00
 8004fe8:	40022000 	.word	0x40022000
 8004fec:	40022400 	.word	0x40022400
 8004ff0:	40013c00 	.word	0x40013c00

08004ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e08b      	b.n	800511e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fb fd3a 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2224      	movs	r2, #36	@ 0x24
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005044:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005054:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	e006      	b.n	800507c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800507a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d108      	bne.n	8005096 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005092:	605a      	str	r2, [r3, #4]
 8005094:	e007      	b.n	80050a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6859      	ldr	r1, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005128 <HAL_I2C_Init+0x134>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69d9      	ldr	r1, [r3, #28]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	02008000 	.word	0x02008000

0800512c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	@ 0x28
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	461a      	mov	r2, r3
 8005138:	460b      	mov	r3, r1
 800513a:	817b      	strh	r3, [r7, #10]
 800513c:	4613      	mov	r3, r2
 800513e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b20      	cmp	r3, #32
 800514e:	f040 80ef 	bne.w	8005330 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800515c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005160:	d101      	bne.n	8005166 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
 8005164:	e0e5      	b.n	8005332 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005170:	2302      	movs	r3, #2
 8005172:	e0de      	b.n	8005332 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2221      	movs	r2, #33	@ 0x21
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2210      	movs	r2, #16
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	893a      	ldrh	r2, [r7, #8]
 800519c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a66      	ldr	r2, [pc, #408]	@ (800533c <HAL_I2C_Master_Transmit_DMA+0x210>)
 80051a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a66      	ldr	r2, [pc, #408]	@ (8005340 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80051a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2bff      	cmp	r3, #255	@ 0xff
 80051b2:	d906      	bls.n	80051c2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	22ff      	movs	r2, #255	@ 0xff
 80051b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e007      	b.n	80051d2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051d0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01a      	beq.n	8005210 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	781a      	ldrb	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d074      	beq.n	8005302 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d022      	beq.n	8005266 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	4a47      	ldr	r2, [pc, #284]	@ (8005344 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005226:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	4a46      	ldr	r2, [pc, #280]	@ (8005348 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800522e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	2200      	movs	r2, #0
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	2200      	movs	r2, #0
 800523e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005250:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005256:	f7fd ff5d 	bl	8003114 <HAL_DMA_Start_IT>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d13a      	bne.n	80052da <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005264:	e013      	b.n	800528e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e051      	b.n	8005332 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005292:	b2db      	uxtb	r3, r3
 8005294:	3301      	adds	r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	8979      	ldrh	r1, [r7, #10]
 800529a:	4b2c      	ldr	r3, [pc, #176]	@ (800534c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f001 ff3f 	bl	8007124 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80052c0:	2110      	movs	r1, #16
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f001 ff60 	bl	8007188 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e028      	b.n	800532c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	f043 0210 	orr.w	r2, r3, #16
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e017      	b.n	8005332 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005306:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	8979      	ldrh	r1, [r7, #10]
 800530e:	4b0f      	ldr	r3, [pc, #60]	@ (800534c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f001 ff04 	bl	8007124 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005324:	2101      	movs	r1, #1
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f001 ff2e 	bl	8007188 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e000      	b.n	8005332 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	ffff0000 	.word	0xffff0000
 8005340:	08005e7b 	.word	0x08005e7b
 8005344:	08006ea7 	.word	0x08006ea7
 8005348:	08007075 	.word	0x08007075
 800534c:	80002000 	.word	0x80002000
 8005350:	080059ef 	.word	0x080059ef

08005354 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	461a      	mov	r2, r3
 8005360:	460b      	mov	r3, r1
 8005362:	817b      	strh	r3, [r7, #10]
 8005364:	4613      	mov	r3, r2
 8005366:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b20      	cmp	r3, #32
 8005372:	f040 80cd 	bne.w	8005510 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005384:	d101      	bne.n	800538a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	e0c3      	b.n	8005512 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_I2C_Master_Receive_DMA+0x44>
 8005394:	2302      	movs	r3, #2
 8005396:	e0bc      	b.n	8005512 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2222      	movs	r2, #34	@ 0x22
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2210      	movs	r2, #16
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	893a      	ldrh	r2, [r7, #8]
 80053c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4a55      	ldr	r2, [pc, #340]	@ (800551c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80053c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4a55      	ldr	r2, [pc, #340]	@ (8005520 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80053cc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2bff      	cmp	r3, #255	@ 0xff
 80053d6:	d906      	bls.n	80053e6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80053de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e007      	b.n	80053f6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80053f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053f4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d070      	beq.n	80054e0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d020      	beq.n	8005448 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	4a46      	ldr	r2, [pc, #280]	@ (8005524 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800540c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	4a45      	ldr	r2, [pc, #276]	@ (8005528 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005414:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	2200      	movs	r2, #0
 800541c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	2200      	movs	r2, #0
 8005424:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3324      	adds	r3, #36	@ 0x24
 8005430:	4619      	mov	r1, r3
 8005432:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005438:	f7fd fe6c 	bl	8003114 <HAL_DMA_Start_IT>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d138      	bne.n	80054b8 <HAL_I2C_Master_Receive_DMA+0x164>
 8005446:	e013      	b.n	8005470 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e050      	b.n	8005512 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005474:	b2da      	uxtb	r2, r3
 8005476:	8979      	ldrh	r1, [r7, #10]
 8005478:	4b2c      	ldr	r3, [pc, #176]	@ (800552c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f001 fe50 	bl	8007124 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800549e:	2110      	movs	r1, #16
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f001 fe71 	bl	8007188 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e029      	b.n	800550c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054cc:	f043 0210 	orr.w	r2, r3, #16
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e018      	b.n	8005512 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a13      	ldr	r2, [pc, #76]	@ (8005530 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80054e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	8979      	ldrh	r1, [r7, #10]
 80054ee:	4b0f      	ldr	r3, [pc, #60]	@ (800552c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f001 fe14 	bl	8007124 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005504:	2102      	movs	r1, #2
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 fe3e 	bl	8007188 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	ffff0000 	.word	0xffff0000
 8005520:	08005e7b 	.word	0x08005e7b
 8005524:	08006f7d 	.word	0x08006f7d
 8005528:	08007075 	.word	0x08007075
 800552c:	80002400 	.word	0x80002400
 8005530:	080059ef 	.word	0x080059ef

08005534 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b20      	cmp	r3, #32
 800554c:	f040 80d1 	bne.w	80056f2 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005562:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0c5      	b.n	80056f4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005572:	2302      	movs	r3, #2
 8005574:	e0be      	b.n	80056f4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2221      	movs	r2, #33	@ 0x21
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	88fa      	ldrh	r2, [r7, #6]
 800559e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a53      	ldr	r2, [pc, #332]	@ (80056fc <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80055ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a53      	ldr	r2, [pc, #332]	@ (8005700 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80055b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055be:	d117      	bne.n	80055f0 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d068      	beq.n	80056cc <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d022      	beq.n	8005648 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005606:	4a3f      	ldr	r2, [pc, #252]	@ (8005704 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005608:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560e:	4a3e      	ldr	r2, [pc, #248]	@ (8005708 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005610:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561e:	2200      	movs	r2, #0
 8005620:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800562a:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005632:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005638:	f7fd fd6c 	bl	8003114 <HAL_DMA_Start_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d12e      	bne.n	80056a4 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005646:	e013      	b.n	8005670 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2228      	movs	r2, #40	@ 0x28
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e041      	b.n	80056f4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800567e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f001 fd7b 	bl	8007188 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e024      	b.n	80056ee <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2228      	movs	r2, #40	@ 0x28
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b8:	f043 0210 	orr.w	r2, r3, #16
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e013      	b.n	80056f4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f001 fd4d 	bl	8007188 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	ffff0000 	.word	0xffff0000
 8005700:	0800631d 	.word	0x0800631d
 8005704:	08006f3d 	.word	0x08006f3d
 8005708:	08007075 	.word	0x08007075

0800570c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b20      	cmp	r3, #32
 8005724:	f040 809b 	bne.w	800585e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_I2C_Slave_Receive_DMA+0x28>
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800573a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e08f      	b.n	8005860 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_I2C_Slave_Receive_DMA+0x42>
 800574a:	2302      	movs	r3, #2
 800574c:	e088      	b.n	8005860 <HAL_I2C_Slave_Receive_DMA+0x154>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2222      	movs	r2, #34	@ 0x22
 800575a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a38      	ldr	r2, [pc, #224]	@ (8005868 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005786:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a38      	ldr	r2, [pc, #224]	@ (800586c <HAL_I2C_Slave_Receive_DMA+0x160>)
 800578c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d020      	beq.n	80057d8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579a:	4a35      	ldr	r2, [pc, #212]	@ (8005870 <HAL_I2C_Slave_Receive_DMA+0x164>)
 800579c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	4a34      	ldr	r2, [pc, #208]	@ (8005874 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80057a4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057aa:	2200      	movs	r2, #0
 80057ac:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b2:	2200      	movs	r2, #0
 80057b4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3324      	adds	r3, #36	@ 0x24
 80057c0:	4619      	mov	r1, r3
 80057c2:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057c8:	f7fd fca4 	bl	8003114 <HAL_DMA_Start_IT>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d12f      	bne.n	8005836 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80057d6:	e013      	b.n	8005800 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2228      	movs	r2, #40	@ 0x28
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e02f      	b.n	8005860 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800580e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005818:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f001 fcb3 	bl	8007188 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005830:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e014      	b.n	8005860 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2228      	movs	r2, #40	@ 0x28
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	f043 0210 	orr.w	r2, r3, #16
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
  }
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	ffff0000 	.word	0xffff0000
 800586c:	0800631d 	.word	0x0800631d
 8005870:	0800702f 	.word	0x0800702f
 8005874:	08007075 	.word	0x08007075

08005878 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
  }
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d010      	beq.n	80058f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	09db      	lsrs	r3, r3, #7
 80058d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e0:	f043 0201 	orr.w	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	0a9b      	lsrs	r3, r3, #10
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	09db      	lsrs	r3, r3, #7
 8005902:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	f043 0208 	orr.w	r2, r3, #8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800591e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	0a5b      	lsrs	r3, r3, #9
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d010      	beq.n	800594e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	09db      	lsrs	r3, r3, #7
 8005930:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593c:	f043 0202 	orr.w	r2, r3, #2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800594c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005952:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 030b 	and.w	r3, r3, #11
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 f965 	bl	8006c30 <I2C_ITError>
  }
}
 8005966:	bf00      	nop
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
 800597a:	4613      	mov	r3, r2
 800597c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af02      	add	r7, sp, #8
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <I2C_Master_ISR_IT+0x1e>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e12e      	b.n	8005c6a <I2C_Master_ISR_IT+0x27c>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d013      	beq.n	8005a48 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2210      	movs	r2, #16
 8005a32:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a38:	f043 0204 	orr.w	r2, r3, #4
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f001 fa0c 	bl	8006e5e <I2C_Flush_TXDR>
 8005a46:	e0fb      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d023      	beq.n	8005a9c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01d      	beq.n	8005a9c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0304 	bic.w	r3, r3, #4
 8005a66:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a9a:	e0d1      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	099b      	lsrs	r3, r3, #6
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d12a      	bne.n	8005afe <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d024      	beq.n	8005afe <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01e      	beq.n	8005afe <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80ba 	beq.w	8005c40 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005afc:	e0a0      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	09db      	lsrs	r3, r3, #7
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d06b      	beq.n	8005be2 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	099b      	lsrs	r3, r3, #6
 8005b0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d065      	beq.n	8005be2 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d04e      	beq.n	8005bbe <I2C_Master_ISR_IT+0x1d0>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d14a      	bne.n	8005bbe <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b34:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2bff      	cmp	r3, #255	@ 0xff
 8005b3e:	d91c      	bls.n	8005b7a <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d103      	bne.n	8005b5c <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b5a:	e002      	b.n	8005b62 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	22ff      	movs	r2, #255	@ 0xff
 8005b60:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	8a79      	ldrh	r1, [r7, #18]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f001 fad6 	bl	8007124 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b78:	e032      	b.n	8005be0 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b8c:	d00b      	beq.n	8005ba6 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b92:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b98:	8a79      	ldrh	r1, [r7, #18]
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	9000      	str	r0, [sp, #0]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f001 fac0 	bl	8007124 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ba4:	e01c      	b.n	8005be0 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	8a79      	ldrh	r1, [r7, #18]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f001 fab4 	bl	8007124 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bbc:	e010      	b.n	8005be0 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bcc:	d003      	beq.n	8005bd6 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fd09 	bl	80065e6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bd4:	e034      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bd6:	2140      	movs	r1, #64	@ 0x40
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f001 f829 	bl	8006c30 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bde:	e02f      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
 8005be0:	e02e      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d028      	beq.n	8005c40 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d022      	beq.n	8005c40 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d119      	bne.n	8005c38 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c12:	d015      	beq.n	8005c40 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c1c:	d108      	bne.n	8005c30 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	e007      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fcd8 	bl	80065e6 <I2C_ITMasterSeqCplt>
 8005c36:	e003      	b.n	8005c40 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c38:	2140      	movs	r1, #64	@ 0x40
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fff8 	bl	8006c30 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005c58:	6979      	ldr	r1, [r7, #20]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fd5e 	bl	800671c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b086      	sub	sp, #24
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <I2C_Slave_ISR_IT+0x24>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e0ed      	b.n	8005e72 <I2C_Slave_ISR_IT+0x200>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005cb6:	6939      	ldr	r1, [r7, #16]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fdf9 	bl	80068b0 <I2C_ITSlaveCplt>
 8005cbe:	e0d3      	b.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d04d      	beq.n	8005d68 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d047      	beq.n	8005d68 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d128      	bne.n	8005d34 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b28      	cmp	r3, #40	@ 0x28
 8005cec:	d108      	bne.n	8005d00 <I2C_Slave_ISR_IT+0x8e>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf4:	d104      	bne.n	8005d00 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cf6:	6939      	ldr	r1, [r7, #16]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 ff43 	bl	8006b84 <I2C_ITListenCplt>
 8005cfe:	e032      	b.n	8005d66 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b29      	cmp	r3, #41	@ 0x29
 8005d0a:	d10e      	bne.n	8005d2a <I2C_Slave_ISR_IT+0xb8>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d12:	d00a      	beq.n	8005d2a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2210      	movs	r2, #16
 8005d1a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f001 f89e 	bl	8006e5e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fc9c 	bl	8006660 <I2C_ITSlaveSeqCplt>
 8005d28:	e01d      	b.n	8005d66 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2210      	movs	r2, #16
 8005d30:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d32:	e096      	b.n	8005e62 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2210      	movs	r2, #16
 8005d3a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d40:	f043 0204 	orr.w	r2, r3, #4
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <I2C_Slave_ISR_IT+0xe6>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d54:	f040 8085 	bne.w	8005e62 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 ff66 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d64:	e07d      	b.n	8005e62 <I2C_Slave_ISR_IT+0x1f0>
 8005d66:	e07c      	b.n	8005e62 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	089b      	lsrs	r3, r3, #2
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d030      	beq.n	8005dd6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02a      	beq.n	8005dd6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d018      	beq.n	8005dbc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d14f      	bne.n	8005e66 <I2C_Slave_ISR_IT+0x1f4>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dcc:	d04b      	beq.n	8005e66 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fc46 	bl	8006660 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005dd4:	e047      	b.n	8005e66 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	08db      	lsrs	r3, r3, #3
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	08db      	lsrs	r3, r3, #3
 8005de6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dee:	6939      	ldr	r1, [r7, #16]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fb74 	bl	80064de <I2C_ITAddrCplt>
 8005df6:	e037      	b.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d031      	beq.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02b      	beq.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e4a:	e00d      	b.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e52:	d002      	beq.n	8005e5a <I2C_Slave_ISR_IT+0x1e8>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fc00 	bl	8006660 <I2C_ITSlaveSeqCplt>
 8005e60:	e002      	b.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005e66:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af02      	add	r7, sp, #8
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <I2C_Master_ISR_DMA+0x1a>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0f0      	b.n	8006076 <I2C_Master_ISR_DMA+0x1fc>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d017      	beq.n	8005ed8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d011      	beq.n	8005ed8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2210      	movs	r2, #16
 8005eba:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec0:	f043 0204 	orr.w	r2, r3, #4
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ec8:	2120      	movs	r1, #32
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f001 f95c 	bl	8007188 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 ffc4 	bl	8006e5e <I2C_Flush_TXDR>
 8005ed6:	e0c9      	b.n	800606c <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	09db      	lsrs	r3, r3, #7
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8081 	beq.w	8005fe8 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d07a      	beq.n	8005fe8 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f00:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d05c      	beq.n	8005fc6 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f18:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2bff      	cmp	r3, #255	@ 0xff
 8005f22:	d914      	bls.n	8005f4e <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d103      	bne.n	8005f40 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f3e:	e002      	b.n	8005f46 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	22ff      	movs	r2, #255	@ 0xff
 8005f44:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005f46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e010      	b.n	8005f70 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f60:	d003      	beq.n	8005f6a <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e002      	b.n	8005f70 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f6e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	8a79      	ldrh	r1, [r7, #18]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f001 f8d0 	bl	8007124 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b22      	cmp	r3, #34	@ 0x22
 8005fa0:	d108      	bne.n	8005fb4 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fb2:	e05b      	b.n	800606c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fc4:	e052      	b.n	800606c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd4:	d003      	beq.n	8005fde <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 fb05 	bl	80065e6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005fdc:	e046      	b.n	800606c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fde:	2140      	movs	r1, #64	@ 0x40
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fe25 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005fe6:	e041      	b.n	800606c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d029      	beq.n	8006048 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d023      	beq.n	8006048 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d119      	bne.n	800603e <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006018:	d027      	beq.n	800606a <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006022:	d108      	bne.n	8006036 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006032:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006034:	e019      	b.n	800606a <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fad5 	bl	80065e6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800603c:	e015      	b.n	800606a <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800603e:	2140      	movs	r1, #64	@ 0x40
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fdf5 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006046:	e010      	b.n	800606a <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fb5a 	bl	800671c <I2C_ITMasterCplt>
 8006068:	e000      	b.n	800606c <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800606a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800608c:	4b94      	ldr	r3, [pc, #592]	@ (80062e0 <I2C_Mem_ISR_DMA+0x260>)
 800608e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <I2C_Mem_ISR_DMA+0x1e>
 800609a:	2302      	movs	r3, #2
 800609c:	e139      	b.n	8006312 <I2C_Mem_ISR_DMA+0x292>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	091b      	lsrs	r3, r3, #4
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d017      	beq.n	80060e2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d011      	beq.n	80060e2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2210      	movs	r2, #16
 80060c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ca:	f043 0204 	orr.w	r2, r3, #4
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80060d2:	2120      	movs	r1, #32
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f001 f857 	bl	8007188 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 febf 	bl	8006e5e <I2C_Flush_TXDR>
 80060e0:	e112      	b.n	8006308 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00f      	beq.n	800610e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006102:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800610a:	651a      	str	r2, [r3, #80]	@ 0x50
 800610c:	e0fc      	b.n	8006308 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	09db      	lsrs	r3, r3, #7
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d06e      	beq.n	80061f8 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	099b      	lsrs	r3, r3, #6
 800611e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006122:	2b00      	cmp	r3, #0
 8006124:	d068      	beq.n	80061f8 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006126:	2101      	movs	r1, #1
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f001 f8b1 	bl	8007290 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800612e:	2110      	movs	r1, #16
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f001 f829 	bl	8007188 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d056      	beq.n	80061ee <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006144:	b29b      	uxth	r3, r3
 8006146:	2bff      	cmp	r3, #255	@ 0xff
 8006148:	d91e      	bls.n	8006188 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	d103      	bne.n	8006166 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006164:	e002      	b.n	800616c <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	@ 0xff
 800616a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006170:	b299      	uxth	r1, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006176:	b2da      	uxtb	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 ffcf 	bl	8007124 <I2C_TransferConfig>
 8006186:	e011      	b.n	80061ac <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006196:	b299      	uxth	r1, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619c:	b2da      	uxtb	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 ffbc 	bl	8007124 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b22      	cmp	r3, #34	@ 0x22
 80061c8:	d108      	bne.n	80061dc <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061da:	e095      	b.n	8006308 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061ec:	e08c      	b.n	8006308 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061ee:	2140      	movs	r1, #64	@ 0x40
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fd1d 	bl	8006c30 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80061f6:	e087      	b.n	8006308 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	099b      	lsrs	r3, r3, #6
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d071      	beq.n	80062e8 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800620c:	2b00      	cmp	r3, #0
 800620e:	d06b      	beq.n	80062e8 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006210:	2101      	movs	r1, #1
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f001 f83c 	bl	8007290 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006218:	2110      	movs	r1, #16
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 ffb4 	bl	8007188 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b22      	cmp	r3, #34	@ 0x22
 800622a:	d101      	bne.n	8006230 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 800622c:	4b2d      	ldr	r3, [pc, #180]	@ (80062e4 <I2C_Mem_ISR_DMA+0x264>)
 800622e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	2bff      	cmp	r3, #255	@ 0xff
 8006238:	d91e      	bls.n	8006278 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	0c1b      	lsrs	r3, r3, #16
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	d103      	bne.n	8006256 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006254:	e002      	b.n	800625c <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	22ff      	movs	r2, #255	@ 0xff
 800625a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006260:	b299      	uxth	r1, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006266:	b2da      	uxtb	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 ff57 	bl	8007124 <I2C_TransferConfig>
 8006276:	e011      	b.n	800629c <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006286:	b299      	uxth	r1, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628c:	b2da      	uxtb	r2, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 ff44 	bl	8007124 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b22      	cmp	r3, #34	@ 0x22
 80062b8:	d108      	bne.n	80062cc <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062c8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062ca:	e01d      	b.n	8006308 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062da:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062dc:	e014      	b.n	8006308 <I2C_Mem_ISR_DMA+0x288>
 80062de:	bf00      	nop
 80062e0:	80002000 	.word	0x80002000
 80062e4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fa0a 	bl	800671c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop

0800631c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <I2C_Slave_ISR_DMA+0x24>
 800633c:	2302      	movs	r3, #2
 800633e:	e0ca      	b.n	80064d6 <I2C_Slave_ISR_DMA+0x1ba>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 faa4 	bl	80068b0 <I2C_ITSlaveCplt>
 8006368:	e0b0      	b.n	80064cc <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	091b      	lsrs	r3, r3, #4
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 809a 	beq.w	80064ac <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	091b      	lsrs	r3, r3, #4
 800637c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 8093 	beq.w	80064ac <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	0b9b      	lsrs	r3, r3, #14
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d105      	bne.n	800639e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0bdb      	lsrs	r3, r3, #15
 8006396:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800639a:	2b00      	cmp	r3, #0
 800639c:	d07f      	beq.n	800649e <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0bdb      	lsrs	r3, r3, #15
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80063be:	2301      	movs	r3, #1
 80063c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00d      	beq.n	80063e6 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	0b9b      	lsrs	r3, r3, #14
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80063e2:	2301      	movs	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d128      	bne.n	800643e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b28      	cmp	r3, #40	@ 0x28
 80063f6:	d108      	bne.n	800640a <I2C_Slave_ISR_DMA+0xee>
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063fe:	d104      	bne.n	800640a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fbbe 	bl	8006b84 <I2C_ITListenCplt>
 8006408:	e048      	b.n	800649c <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b29      	cmp	r3, #41	@ 0x29
 8006414:	d10e      	bne.n	8006434 <I2C_Slave_ISR_DMA+0x118>
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800641c:	d00a      	beq.n	8006434 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2210      	movs	r2, #16
 8006424:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fd19 	bl	8006e5e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f917 	bl	8006660 <I2C_ITSlaveSeqCplt>
 8006432:	e033      	b.n	800649c <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2210      	movs	r2, #16
 800643a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800643c:	e034      	b.n	80064a8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2210      	movs	r2, #16
 8006444:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f043 0204 	orr.w	r2, r3, #4
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006458:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <I2C_Slave_ISR_DMA+0x14c>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006466:	d11f      	bne.n	80064a8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b21      	cmp	r3, #33	@ 0x21
 800646c:	d002      	beq.n	8006474 <I2C_Slave_ISR_DMA+0x158>
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b29      	cmp	r3, #41	@ 0x29
 8006472:	d103      	bne.n	800647c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2221      	movs	r2, #33	@ 0x21
 8006478:	631a      	str	r2, [r3, #48]	@ 0x30
 800647a:	e008      	b.n	800648e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b22      	cmp	r3, #34	@ 0x22
 8006480:	d002      	beq.n	8006488 <I2C_Slave_ISR_DMA+0x16c>
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2b2a      	cmp	r3, #42	@ 0x2a
 8006486:	d102      	bne.n	800648e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2222      	movs	r2, #34	@ 0x22
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	4619      	mov	r1, r3
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 fbcb 	bl	8006c30 <I2C_ITError>
      if (treatdmanack == 1U)
 800649a:	e005      	b.n	80064a8 <I2C_Slave_ISR_DMA+0x18c>
 800649c:	e004      	b.n	80064a8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2210      	movs	r2, #16
 80064a4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064a6:	e011      	b.n	80064cc <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80064a8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064aa:	e00f      	b.n	80064cc <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	08db      	lsrs	r3, r3, #3
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	08db      	lsrs	r3, r3, #3
 80064bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f809 	bl	80064de <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064f4:	2b28      	cmp	r3, #40	@ 0x28
 80064f6:	d16a      	bne.n	80065ce <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	0c1b      	lsrs	r3, r3, #16
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	b29b      	uxth	r3, r3
 8006512:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006516:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006524:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006532:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d138      	bne.n	80065ae <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800653c:	897b      	ldrh	r3, [r7, #10]
 800653e:	09db      	lsrs	r3, r3, #7
 8006540:	b29a      	uxth	r2, r3
 8006542:	89bb      	ldrh	r3, [r7, #12]
 8006544:	4053      	eors	r3, r2
 8006546:	b29b      	uxth	r3, r3
 8006548:	f003 0306 	and.w	r3, r3, #6
 800654c:	2b00      	cmp	r3, #0
 800654e:	d11c      	bne.n	800658a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006550:	897b      	ldrh	r3, [r7, #10]
 8006552:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006562:	2b02      	cmp	r3, #2
 8006564:	d13b      	bne.n	80065de <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800657c:	89ba      	ldrh	r2, [r7, #12]
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff f9f3 	bl	800596e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006588:	e029      	b.n	80065de <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800658a:	893b      	ldrh	r3, [r7, #8]
 800658c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800658e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fe7c 	bl	8007290 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065a0:	89ba      	ldrh	r2, [r7, #12]
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff f9e1 	bl	800596e <HAL_I2C_AddrCallback>
}
 80065ac:	e017      	b.n	80065de <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fe6c 	bl	8007290 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065c0:	89ba      	ldrh	r2, [r7, #12]
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff f9d1 	bl	800596e <HAL_I2C_AddrCallback>
}
 80065cc:	e007      	b.n	80065de <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2208      	movs	r2, #8
 80065d4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b21      	cmp	r3, #33	@ 0x21
 8006600:	d115      	bne.n	800662e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2211      	movs	r2, #17
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006616:	2101      	movs	r1, #1
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fe39 	bl	8007290 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f010 f956 	bl	80168d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800662c:	e014      	b.n	8006658 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2212      	movs	r2, #18
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006642:	2102      	movs	r1, #2
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fe23 	bl	8007290 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f010 f956 	bl	8016904 <HAL_I2C_MasterRxCpltCallback>
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	0b9b      	lsrs	r3, r3, #14
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e00d      	b.n	80066b2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	0bdb      	lsrs	r3, r3, #15
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d007      	beq.n	80066b2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b29      	cmp	r3, #41	@ 0x29
 80066bc:	d112      	bne.n	80066e4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2228      	movs	r2, #40	@ 0x28
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2221      	movs	r2, #33	@ 0x21
 80066ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066cc:	2101      	movs	r1, #1
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fdde 	bl	8007290 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f010 f927 	bl	8016930 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80066e2:	e017      	b.n	8006714 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ee:	d111      	bne.n	8006714 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2228      	movs	r2, #40	@ 0x28
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2222      	movs	r2, #34	@ 0x22
 80066fc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066fe:	2102      	movs	r1, #2
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fdc5 	bl	8007290 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f010 f924 	bl	801695c <HAL_I2C_SlaveRxCpltCallback>
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2220      	movs	r2, #32
 8006730:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b21      	cmp	r3, #33	@ 0x21
 800673c:	d107      	bne.n	800674e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800673e:	2101      	movs	r1, #1
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fda5 	bl	8007290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2211      	movs	r2, #17
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30
 800674c:	e00c      	b.n	8006768 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b22      	cmp	r3, #34	@ 0x22
 8006758:	d106      	bne.n	8006768 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800675a:	2102      	movs	r1, #2
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fd97 	bl	8007290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2212      	movs	r2, #18
 8006766:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6859      	ldr	r1, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b4d      	ldr	r3, [pc, #308]	@ (80068a8 <I2C_ITMasterCplt+0x18c>)
 8006774:	400b      	ands	r3, r1
 8006776:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a4a      	ldr	r2, [pc, #296]	@ (80068ac <I2C_ITMasterCplt+0x190>)
 8006782:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2210      	movs	r2, #16
 8006796:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	f043 0204 	orr.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b60      	cmp	r3, #96	@ 0x60
 80067ae:	d10b      	bne.n	80067c8 <I2C_ITMasterCplt+0xac>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80067c6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fb48 	bl	8006e5e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b60      	cmp	r3, #96	@ 0x60
 80067de:	d002      	beq.n	80067e6 <I2C_ITMasterCplt+0xca>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa1f 	bl	8006c30 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067f2:	e054      	b.n	800689e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b21      	cmp	r3, #33	@ 0x21
 80067fe:	d124      	bne.n	800684a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d10b      	bne.n	8006832 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff f8b7 	bl	800599e <HAL_I2C_MemTxCpltCallback>
}
 8006830:	e035      	b.n	800689e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f010 f848 	bl	80168d8 <HAL_I2C_MasterTxCpltCallback>
}
 8006848:	e029      	b.n	800689e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b22      	cmp	r3, #34	@ 0x22
 8006854:	d123      	bne.n	800689e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b40      	cmp	r3, #64	@ 0x40
 800686e:	d10b      	bne.n	8006888 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff f896 	bl	80059b2 <HAL_I2C_MemRxCpltCallback>
}
 8006886:	e00a      	b.n	800689e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f010 f833 	bl	8016904 <HAL_I2C_MasterRxCpltCallback>
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	fe00e800 	.word	0xfe00e800
 80068ac:	ffff0000 	.word	0xffff0000

080068b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2220      	movs	r2, #32
 80068da:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068dc:	7afb      	ldrb	r3, [r7, #11]
 80068de:	2b21      	cmp	r3, #33	@ 0x21
 80068e0:	d002      	beq.n	80068e8 <I2C_ITSlaveCplt+0x38>
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b29      	cmp	r3, #41	@ 0x29
 80068e6:	d108      	bne.n	80068fa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80068e8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fccf 	bl	8007290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2221      	movs	r2, #33	@ 0x21
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80068f8:	e019      	b.n	800692e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	2b22      	cmp	r3, #34	@ 0x22
 80068fe:	d002      	beq.n	8006906 <I2C_ITSlaveCplt+0x56>
 8006900:	7afb      	ldrb	r3, [r7, #11]
 8006902:	2b2a      	cmp	r3, #42	@ 0x2a
 8006904:	d108      	bne.n	8006918 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006906:	f248 0102 	movw	r1, #32770	@ 0x8002
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fcc0 	bl	8007290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2222      	movs	r2, #34	@ 0x22
 8006914:	631a      	str	r2, [r3, #48]	@ 0x30
 8006916:	e00a      	b.n	800692e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	2b28      	cmp	r3, #40	@ 0x28
 800691c:	d107      	bne.n	800692e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800691e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fcb4 	bl	8007290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800693c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4b8c      	ldr	r3, [pc, #560]	@ (8006b7c <I2C_ITSlaveCplt+0x2cc>)
 800694a:	400b      	ands	r3, r1
 800694c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa85 	bl	8006e5e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	0b9b      	lsrs	r3, r3, #14
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d013      	beq.n	8006988 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800696e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	b29a      	uxth	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006986:	e018      	b.n	80069ba <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	0bdb      	lsrs	r3, r3, #15
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d006      	beq.n	80069ba <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	089b      	lsrs	r3, r3, #2
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d020      	beq.n	8006a08 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f023 0304 	bic.w	r3, r3, #4
 80069cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	091b      	lsrs	r3, r3, #4
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d04a      	beq.n	8006ac0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d044      	beq.n	8006ac0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d128      	bne.n	8006a92 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b28      	cmp	r3, #40	@ 0x28
 8006a4a:	d108      	bne.n	8006a5e <I2C_ITSlaveCplt+0x1ae>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a52:	d104      	bne.n	8006a5e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a54:	6979      	ldr	r1, [r7, #20]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f894 	bl	8006b84 <I2C_ITListenCplt>
 8006a5c:	e030      	b.n	8006ac0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b29      	cmp	r3, #41	@ 0x29
 8006a68:	d10e      	bne.n	8006a88 <I2C_ITSlaveCplt+0x1d8>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a70:	d00a      	beq.n	8006a88 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2210      	movs	r2, #16
 8006a78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f9ef 	bl	8006e5e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fded 	bl	8006660 <I2C_ITSlaveSeqCplt>
 8006a86:	e01b      	b.n	8006ac0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	61da      	str	r2, [r3, #28]
 8006a90:	e016      	b.n	8006ac0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2210      	movs	r2, #16
 8006a98:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f043 0204 	orr.w	r2, r3, #4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <I2C_ITSlaveCplt+0x204>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab2:	d105      	bne.n	8006ac0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8b8 	bl	8006c30 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d010      	beq.n	8006af8 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f8a7 	bl	8006c30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b28      	cmp	r3, #40	@ 0x28
 8006aec:	d141      	bne.n	8006b72 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006aee:	6979      	ldr	r1, [r7, #20]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f847 	bl	8006b84 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006af6:	e03c      	b.n	8006b72 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b00:	d014      	beq.n	8006b2c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fdac 	bl	8006660 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b80 <I2C_ITSlaveCplt+0x2d0>)
 8006b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7fe ff30 	bl	800598a <HAL_I2C_ListenCpltCallback>
}
 8006b2a:	e022      	b.n	8006b72 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b22      	cmp	r3, #34	@ 0x22
 8006b36:	d10e      	bne.n	8006b56 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f00f ff04 	bl	801695c <HAL_I2C_SlaveRxCpltCallback>
}
 8006b54:	e00d      	b.n	8006b72 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f00f fedf 	bl	8016930 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b72:	bf00      	nop
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	fe00e800 	.word	0xfe00e800
 8006b80:	ffff0000 	.word	0xffff0000

08006b84 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a26      	ldr	r2, [pc, #152]	@ (8006c2c <I2C_ITListenCplt+0xa8>)
 8006b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	089b      	lsrs	r3, r3, #2
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d022      	beq.n	8006c02 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d012      	beq.n	8006c02 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	f043 0204 	orr.w	r2, r3, #4
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c02:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fb42 	bl	8007290 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2210      	movs	r2, #16
 8006c12:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fe feb4 	bl	800598a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	ffff0000 	.word	0xffff0000

08006c30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c40:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a6d      	ldr	r2, [pc, #436]	@ (8006e04 <I2C_ITError+0x1d4>)
 8006c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b28      	cmp	r3, #40	@ 0x28
 8006c66:	d005      	beq.n	8006c74 <I2C_ITError+0x44>
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b29      	cmp	r3, #41	@ 0x29
 8006c6c:	d002      	beq.n	8006c74 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c72:	d10b      	bne.n	8006c8c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c74:	2103      	movs	r1, #3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fb0a 	bl	8007290 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2228      	movs	r2, #40	@ 0x28
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a60      	ldr	r2, [pc, #384]	@ (8006e08 <I2C_ITError+0x1d8>)
 8006c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c8a:	e030      	b.n	8006cee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c8c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fafd 	bl	8007290 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8e1 	bl	8006e5e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b60      	cmp	r3, #96	@ 0x60
 8006ca6:	d01f      	beq.n	8006ce8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d114      	bne.n	8006ce8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d109      	bne.n	8006ce0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2210      	movs	r2, #16
 8006cd2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd8:	f043 0204 	orr.w	r2, r3, #4
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d039      	beq.n	8006d70 <I2C_ITError+0x140>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b11      	cmp	r3, #17
 8006d00:	d002      	beq.n	8006d08 <I2C_ITError+0xd8>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b21      	cmp	r3, #33	@ 0x21
 8006d06:	d133      	bne.n	8006d70 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d16:	d107      	bne.n	8006d28 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fc fc6d 	bl	800360c <HAL_DMA_GetState>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d017      	beq.n	8006d68 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	4a33      	ldr	r2, [pc, #204]	@ (8006e0c <I2C_ITError+0x1dc>)
 8006d3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fc fab1 	bl	80032b4 <HAL_DMA_Abort_IT>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d04d      	beq.n	8006df4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d62:	4610      	mov	r0, r2
 8006d64:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d66:	e045      	b.n	8006df4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f851 	bl	8006e10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d6e:	e041      	b.n	8006df4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d039      	beq.n	8006dec <I2C_ITError+0x1bc>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b12      	cmp	r3, #18
 8006d7c:	d002      	beq.n	8006d84 <I2C_ITError+0x154>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2b22      	cmp	r3, #34	@ 0x22
 8006d82:	d133      	bne.n	8006dec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d92:	d107      	bne.n	8006da4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006da2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fc fc2f 	bl	800360c <HAL_DMA_GetState>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d017      	beq.n	8006de4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db8:	4a14      	ldr	r2, [pc, #80]	@ (8006e0c <I2C_ITError+0x1dc>)
 8006dba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fc fa73 	bl	80032b4 <HAL_DMA_Abort_IT>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d011      	beq.n	8006df8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006dde:	4610      	mov	r0, r2
 8006de0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006de2:	e009      	b.n	8006df8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f813 	bl	8006e10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dea:	e005      	b.n	8006df8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f80f 	bl	8006e10 <I2C_TreatErrorCallback>
  }
}
 8006df2:	e002      	b.n	8006dfa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006df4:	bf00      	nop
 8006df6:	e000      	b.n	8006dfa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006df8:	bf00      	nop
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	ffff0000 	.word	0xffff0000
 8006e08:	08005c73 	.word	0x08005c73
 8006e0c:	080070e9 	.word	0x080070e9

08006e10 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b60      	cmp	r3, #96	@ 0x60
 8006e22:	d10e      	bne.n	8006e42 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fe fdcd 	bl	80059da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e40:	e009      	b.n	8006e56 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fe fdb8 	bl	80059c6 <HAL_I2C_ErrorCallback>
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d103      	bne.n	8006e7c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d007      	beq.n	8006e9a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0201 	orr.w	r2, r2, #1
 8006e98:	619a      	str	r2, [r3, #24]
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ec2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ece:	2120      	movs	r1, #32
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f959 	bl	8007188 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006ed6:	e02d      	b.n	8006f34 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2bff      	cmp	r3, #255	@ 0xff
 8006eee:	d903      	bls.n	8006ef8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	22ff      	movs	r2, #255	@ 0xff
 8006ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ef6:	e004      	b.n	8006f02 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3328      	adds	r3, #40	@ 0x28
 8006f12:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f18:	f7fc f8fc 	bl	8003114 <HAL_DMA_Start_IT>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f22:	2110      	movs	r1, #16
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff fe83 	bl	8006c30 <I2C_ITError>
}
 8006f2a:	e003      	b.n	8006f34 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f2c:	2140      	movs	r1, #64	@ 0x40
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f92a 	bl	8007188 <I2C_Enable_IRQ>
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f56:	d002      	beq.n	8006f5e <I2C_DMASlaveTransmitCplt+0x22>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f6c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff fb76 	bl	8006660 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f98:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006fa4:	2120      	movs	r1, #32
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f8ee 	bl	8007188 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006fac:	e03b      	b.n	8007026 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006fb6:	441a      	add	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2bff      	cmp	r3, #255	@ 0xff
 8006fc4:	d911      	bls.n	8006fea <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	0c1b      	lsrs	r3, r3, #16
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d103      	bne.n	8006fe2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fe0:	e008      	b.n	8006ff4 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	22ff      	movs	r2, #255	@ 0xff
 8006fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fe8:	e004      	b.n	8006ff4 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3324      	adds	r3, #36	@ 0x24
 8006ffe:	4619      	mov	r1, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800700a:	f7fc f883 	bl	8003114 <HAL_DMA_Start_IT>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007014:	2110      	movs	r1, #16
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff fe0a 	bl	8006c30 <I2C_ITError>
}
 800701c:	e003      	b.n	8007026 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800701e:	2140      	movs	r1, #64	@ 0x40
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f8b1 	bl	8007188 <I2C_Enable_IRQ>
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10e      	bne.n	800706c <I2C_DMASlaveReceiveCplt+0x3e>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007054:	d00a      	beq.n	800706c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007064:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fafa 	bl	8006660 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007084:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800709a:	2301      	movs	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80070b2:	2301      	movs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fc fab6 	bl	8003628 <HAL_DMA_GetError>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d00e      	beq.n	80070e0 <I2C_DMAError+0x6c>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00b      	beq.n	80070e0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070d6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80070d8:	2110      	movs	r1, #16
 80070da:	68b8      	ldr	r0, [r7, #8]
 80070dc:	f7ff fda8 	bl	8006c30 <I2C_ITError>
  }
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	2200      	movs	r2, #0
 8007104:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	2200      	movs	r2, #0
 8007114:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff fe7a 	bl	8006e10 <I2C_TreatErrorCallback>
}
 800711c:	bf00      	nop
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	817b      	strh	r3, [r7, #10]
 8007132:	4613      	mov	r3, r2
 8007134:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007136:	897b      	ldrh	r3, [r7, #10]
 8007138:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800713c:	7a7b      	ldrb	r3, [r7, #9]
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007144:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	4313      	orrs	r3, r2
 800714e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007152:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	0d5b      	lsrs	r3, r3, #21
 800715e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007162:	4b08      	ldr	r3, [pc, #32]	@ (8007184 <I2C_TransferConfig+0x60>)
 8007164:	430b      	orrs	r3, r1
 8007166:	43db      	mvns	r3, r3
 8007168:	ea02 0103 	and.w	r1, r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	03ff63ff 	.word	0x03ff63ff

08007188 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719c:	4a39      	ldr	r2, [pc, #228]	@ (8007284 <I2C_Enable_IRQ+0xfc>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d032      	beq.n	8007208 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071a6:	4a38      	ldr	r2, [pc, #224]	@ (8007288 <I2C_Enable_IRQ+0x100>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d02d      	beq.n	8007208 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071b0:	4a36      	ldr	r2, [pc, #216]	@ (800728c <I2C_Enable_IRQ+0x104>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d028      	beq.n	8007208 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80071b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da03      	bge.n	80071c6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80071c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071c6:	887b      	ldrh	r3, [r7, #2]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80071d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80071d8:	887b      	ldrh	r3, [r7, #2]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80071e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d103      	bne.n	80071f8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80071f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80071f8:	887b      	ldrh	r3, [r7, #2]
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d133      	bne.n	8007266 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f043 0320 	orr.w	r3, r3, #32
 8007204:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007206:	e02e      	b.n	8007266 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800720c:	2b00      	cmp	r3, #0
 800720e:	da03      	bge.n	8007218 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007216:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007218:	887b      	ldrh	r3, [r7, #2]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007228:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800722a:	887b      	ldrh	r3, [r7, #2]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800723a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800723c:	887b      	ldrh	r3, [r7, #2]
 800723e:	2b10      	cmp	r3, #16
 8007240:	d103      	bne.n	800724a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007248:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800724a:	887b      	ldrh	r3, [r7, #2]
 800724c:	2b20      	cmp	r3, #32
 800724e:	d103      	bne.n	8007258 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007256:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007258:	887b      	ldrh	r3, [r7, #2]
 800725a:	2b40      	cmp	r3, #64	@ 0x40
 800725c:	d103      	bne.n	8007266 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007264:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	430a      	orrs	r2, r1
 8007274:	601a      	str	r2, [r3, #0]
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	08005e7b 	.word	0x08005e7b
 8007288:	0800631d 	.word	0x0800631d
 800728c:	08006081 	.word	0x08006081

08007290 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80072a0:	887b      	ldrh	r3, [r7, #2]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00f      	beq.n	80072ca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80072b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072be:	2b28      	cmp	r3, #40	@ 0x28
 80072c0:	d003      	beq.n	80072ca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80072ca:	887b      	ldrh	r3, [r7, #2]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00f      	beq.n	80072f4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80072da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072e8:	2b28      	cmp	r3, #40	@ 0x28
 80072ea:	d003      	beq.n	80072f4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80072f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da03      	bge.n	8007304 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007302:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007304:	887b      	ldrh	r3, [r7, #2]
 8007306:	2b10      	cmp	r3, #16
 8007308:	d103      	bne.n	8007312 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007310:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007312:	887b      	ldrh	r3, [r7, #2]
 8007314:	2b20      	cmp	r3, #32
 8007316:	d103      	bne.n	8007320 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f043 0320 	orr.w	r3, r3, #32
 800731e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	2b40      	cmp	r3, #64	@ 0x40
 8007324:	d103      	bne.n	800732e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6819      	ldr	r1, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	43da      	mvns	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	400a      	ands	r2, r1
 800733e:	601a      	str	r2, [r3, #0]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b20      	cmp	r3, #32
 8007360:	d138      	bne.n	80073d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800736c:	2302      	movs	r3, #2
 800736e:	e032      	b.n	80073d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2224      	movs	r2, #36	@ 0x24
 800737c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0201 	bic.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800739e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6819      	ldr	r1, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e000      	b.n	80073d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d139      	bne.n	800746c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007402:	2302      	movs	r3, #2
 8007404:	e033      	b.n	800746e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2224      	movs	r2, #36	@ 0x24
 8007412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	021b      	lsls	r3, r3, #8
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	e000      	b.n	800746e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800746c:	2302      	movs	r3, #2
  }
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007486:	4b23      	ldr	r3, [pc, #140]	@ (8007514 <HAL_PWREx_EnableOverDrive+0x98>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	4a22      	ldr	r2, [pc, #136]	@ (8007514 <HAL_PWREx_EnableOverDrive+0x98>)
 800748c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007490:	6413      	str	r3, [r2, #64]	@ 0x40
 8007492:	4b20      	ldr	r3, [pc, #128]	@ (8007514 <HAL_PWREx_EnableOverDrive+0x98>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800749e:	4b1e      	ldr	r3, [pc, #120]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074aa:	f7fa fdb3 	bl	8002014 <HAL_GetTick>
 80074ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074b0:	e009      	b.n	80074c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074b2:	f7fa fdaf 	bl	8002014 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074c0:	d901      	bls.n	80074c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e022      	b.n	800750c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074c6:	4b14      	ldr	r3, [pc, #80]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d2:	d1ee      	bne.n	80074b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074d4:	4b10      	ldr	r3, [pc, #64]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0f      	ldr	r2, [pc, #60]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074e0:	f7fa fd98 	bl	8002014 <HAL_GetTick>
 80074e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074e6:	e009      	b.n	80074fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074e8:	f7fa fd94 	bl	8002014 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074f6:	d901      	bls.n	80074fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e007      	b.n	800750c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074fc:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007508:	d1ee      	bne.n	80074e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40023800 	.word	0x40023800
 8007518:	40007000 	.word	0x40007000

0800751c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007524:	2300      	movs	r3, #0
 8007526:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e291      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8087 	beq.w	800764e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007540:	4b96      	ldr	r3, [pc, #600]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 030c 	and.w	r3, r3, #12
 8007548:	2b04      	cmp	r3, #4
 800754a:	d00c      	beq.n	8007566 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800754c:	4b93      	ldr	r3, [pc, #588]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 030c 	and.w	r3, r3, #12
 8007554:	2b08      	cmp	r3, #8
 8007556:	d112      	bne.n	800757e <HAL_RCC_OscConfig+0x62>
 8007558:	4b90      	ldr	r3, [pc, #576]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007564:	d10b      	bne.n	800757e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007566:	4b8d      	ldr	r3, [pc, #564]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d06c      	beq.n	800764c <HAL_RCC_OscConfig+0x130>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d168      	bne.n	800764c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e26b      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007586:	d106      	bne.n	8007596 <HAL_RCC_OscConfig+0x7a>
 8007588:	4b84      	ldr	r3, [pc, #528]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a83      	ldr	r2, [pc, #524]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 800758e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	e02e      	b.n	80075f4 <HAL_RCC_OscConfig+0xd8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0x9c>
 800759e:	4b7f      	ldr	r3, [pc, #508]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a7e      	ldr	r2, [pc, #504]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	4b7c      	ldr	r3, [pc, #496]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7b      	ldr	r2, [pc, #492]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e01d      	b.n	80075f4 <HAL_RCC_OscConfig+0xd8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCC_OscConfig+0xc0>
 80075c2:	4b76      	ldr	r3, [pc, #472]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a75      	ldr	r2, [pc, #468]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	4b73      	ldr	r3, [pc, #460]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a72      	ldr	r2, [pc, #456]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e00b      	b.n	80075f4 <HAL_RCC_OscConfig+0xd8>
 80075dc:	4b6f      	ldr	r3, [pc, #444]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a6e      	ldr	r2, [pc, #440]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	4b6c      	ldr	r3, [pc, #432]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a6b      	ldr	r2, [pc, #428]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80075ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d013      	beq.n	8007624 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fc:	f7fa fd0a 	bl	8002014 <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007604:	f7fa fd06 	bl	8002014 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b64      	cmp	r3, #100	@ 0x64
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e21f      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	4b61      	ldr	r3, [pc, #388]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f0      	beq.n	8007604 <HAL_RCC_OscConfig+0xe8>
 8007622:	e014      	b.n	800764e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fa fcf6 	bl	8002014 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800762c:	f7fa fcf2 	bl	8002014 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b64      	cmp	r3, #100	@ 0x64
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e20b      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763e:	4b57      	ldr	r3, [pc, #348]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x110>
 800764a:	e000      	b.n	800764e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d069      	beq.n	800772e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800765a:	4b50      	ldr	r3, [pc, #320]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 030c 	and.w	r3, r3, #12
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007666:	4b4d      	ldr	r3, [pc, #308]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 030c 	and.w	r3, r3, #12
 800766e:	2b08      	cmp	r3, #8
 8007670:	d11c      	bne.n	80076ac <HAL_RCC_OscConfig+0x190>
 8007672:	4b4a      	ldr	r3, [pc, #296]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d116      	bne.n	80076ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800767e:	4b47      	ldr	r3, [pc, #284]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d005      	beq.n	8007696 <HAL_RCC_OscConfig+0x17a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d001      	beq.n	8007696 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e1df      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007696:	4b41      	ldr	r3, [pc, #260]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	493d      	ldr	r1, [pc, #244]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076aa:	e040      	b.n	800772e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d023      	beq.n	80076fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076b4:	4b39      	ldr	r3, [pc, #228]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a38      	ldr	r2, [pc, #224]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c0:	f7fa fca8 	bl	8002014 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076c8:	f7fa fca4 	bl	8002014 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e1bd      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076da:	4b30      	ldr	r3, [pc, #192]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f0      	beq.n	80076c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e6:	4b2d      	ldr	r3, [pc, #180]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	4929      	ldr	r1, [pc, #164]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]
 80076fa:	e018      	b.n	800772e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076fc:	4b27      	ldr	r3, [pc, #156]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a26      	ldr	r2, [pc, #152]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007702:	f023 0301 	bic.w	r3, r3, #1
 8007706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007708:	f7fa fc84 	bl	8002014 <HAL_GetTick>
 800770c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800770e:	e008      	b.n	8007722 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007710:	f7fa fc80 	bl	8002014 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e199      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007722:	4b1e      	ldr	r3, [pc, #120]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f0      	bne.n	8007710 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d038      	beq.n	80077ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d019      	beq.n	8007776 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007742:	4b16      	ldr	r3, [pc, #88]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007746:	4a15      	ldr	r2, [pc, #84]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007748:	f043 0301 	orr.w	r3, r3, #1
 800774c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774e:	f7fa fc61 	bl	8002014 <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007756:	f7fa fc5d 	bl	8002014 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e176      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007768:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 800776a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f0      	beq.n	8007756 <HAL_RCC_OscConfig+0x23a>
 8007774:	e01a      	b.n	80077ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007776:	4b09      	ldr	r3, [pc, #36]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 8007778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800777a:	4a08      	ldr	r2, [pc, #32]	@ (800779c <HAL_RCC_OscConfig+0x280>)
 800777c:	f023 0301 	bic.w	r3, r3, #1
 8007780:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007782:	f7fa fc47 	bl	8002014 <HAL_GetTick>
 8007786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800778a:	f7fa fc43 	bl	8002014 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d903      	bls.n	80077a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e15c      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
 800779c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a0:	4b91      	ldr	r3, [pc, #580]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80077a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1ee      	bne.n	800778a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80a4 	beq.w	8007902 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ba:	4b8b      	ldr	r3, [pc, #556]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10d      	bne.n	80077e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077c6:	4b88      	ldr	r3, [pc, #544]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	4a87      	ldr	r2, [pc, #540]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80077cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80077d2:	4b85      	ldr	r3, [pc, #532]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077da:	60bb      	str	r3, [r7, #8]
 80077dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077e2:	4b82      	ldr	r3, [pc, #520]	@ (80079ec <HAL_RCC_OscConfig+0x4d0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d118      	bne.n	8007820 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077ee:	4b7f      	ldr	r3, [pc, #508]	@ (80079ec <HAL_RCC_OscConfig+0x4d0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a7e      	ldr	r2, [pc, #504]	@ (80079ec <HAL_RCC_OscConfig+0x4d0>)
 80077f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077fa:	f7fa fc0b 	bl	8002014 <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007802:	f7fa fc07 	bl	8002014 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b64      	cmp	r3, #100	@ 0x64
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e120      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007814:	4b75      	ldr	r3, [pc, #468]	@ (80079ec <HAL_RCC_OscConfig+0x4d0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d106      	bne.n	8007836 <HAL_RCC_OscConfig+0x31a>
 8007828:	4b6f      	ldr	r3, [pc, #444]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782c:	4a6e      	ldr	r2, [pc, #440]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	6713      	str	r3, [r2, #112]	@ 0x70
 8007834:	e02d      	b.n	8007892 <HAL_RCC_OscConfig+0x376>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10c      	bne.n	8007858 <HAL_RCC_OscConfig+0x33c>
 800783e:	4b6a      	ldr	r3, [pc, #424]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007842:	4a69      	ldr	r2, [pc, #420]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	6713      	str	r3, [r2, #112]	@ 0x70
 800784a:	4b67      	ldr	r3, [pc, #412]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784e:	4a66      	ldr	r2, [pc, #408]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007850:	f023 0304 	bic.w	r3, r3, #4
 8007854:	6713      	str	r3, [r2, #112]	@ 0x70
 8007856:	e01c      	b.n	8007892 <HAL_RCC_OscConfig+0x376>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2b05      	cmp	r3, #5
 800785e:	d10c      	bne.n	800787a <HAL_RCC_OscConfig+0x35e>
 8007860:	4b61      	ldr	r3, [pc, #388]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007864:	4a60      	ldr	r2, [pc, #384]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007866:	f043 0304 	orr.w	r3, r3, #4
 800786a:	6713      	str	r3, [r2, #112]	@ 0x70
 800786c:	4b5e      	ldr	r3, [pc, #376]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800786e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007870:	4a5d      	ldr	r2, [pc, #372]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6713      	str	r3, [r2, #112]	@ 0x70
 8007878:	e00b      	b.n	8007892 <HAL_RCC_OscConfig+0x376>
 800787a:	4b5b      	ldr	r3, [pc, #364]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800787c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787e:	4a5a      	ldr	r2, [pc, #360]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007880:	f023 0301 	bic.w	r3, r3, #1
 8007884:	6713      	str	r3, [r2, #112]	@ 0x70
 8007886:	4b58      	ldr	r3, [pc, #352]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788a:	4a57      	ldr	r2, [pc, #348]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800788c:	f023 0304 	bic.w	r3, r3, #4
 8007890:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d015      	beq.n	80078c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789a:	f7fa fbbb 	bl	8002014 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a0:	e00a      	b.n	80078b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a2:	f7fa fbb7 	bl	8002014 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d901      	bls.n	80078b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e0ce      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b8:	4b4b      	ldr	r3, [pc, #300]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80078ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0ee      	beq.n	80078a2 <HAL_RCC_OscConfig+0x386>
 80078c4:	e014      	b.n	80078f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c6:	f7fa fba5 	bl	8002014 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078cc:	e00a      	b.n	80078e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ce:	f7fa fba1 	bl	8002014 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078dc:	4293      	cmp	r3, r2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e0b8      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e4:	4b40      	ldr	r3, [pc, #256]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80078e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1ee      	bne.n	80078ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d105      	bne.n	8007902 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f6:	4b3c      	ldr	r3, [pc, #240]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	4a3b      	ldr	r2, [pc, #236]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80078fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007900:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80a4 	beq.w	8007a54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800790c:	4b36      	ldr	r3, [pc, #216]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 030c 	and.w	r3, r3, #12
 8007914:	2b08      	cmp	r3, #8
 8007916:	d06b      	beq.n	80079f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d149      	bne.n	80079b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007920:	4b31      	ldr	r3, [pc, #196]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a30      	ldr	r2, [pc, #192]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800792a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792c:	f7fa fb72 	bl	8002014 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007934:	f7fa fb6e 	bl	8002014 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e087      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007946:	4b28      	ldr	r3, [pc, #160]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69da      	ldr	r2, [r3, #28]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007960:	019b      	lsls	r3, r3, #6
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	085b      	lsrs	r3, r3, #1
 800796a:	3b01      	subs	r3, #1
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	061b      	lsls	r3, r3, #24
 8007976:	4313      	orrs	r3, r2
 8007978:	4a1b      	ldr	r2, [pc, #108]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 800797a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800797e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007980:	4b19      	ldr	r3, [pc, #100]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a18      	ldr	r2, [pc, #96]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 8007986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800798a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798c:	f7fa fb42 	bl	8002014 <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007994:	f7fa fb3e 	bl	8002014 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e057      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a6:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0f0      	beq.n	8007994 <HAL_RCC_OscConfig+0x478>
 80079b2:	e04f      	b.n	8007a54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b4:	4b0c      	ldr	r3, [pc, #48]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a0b      	ldr	r2, [pc, #44]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80079ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c0:	f7fa fb28 	bl	8002014 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c8:	f7fa fb24 	bl	8002014 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e03d      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079da:	4b03      	ldr	r3, [pc, #12]	@ (80079e8 <HAL_RCC_OscConfig+0x4cc>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f0      	bne.n	80079c8 <HAL_RCC_OscConfig+0x4ac>
 80079e6:	e035      	b.n	8007a54 <HAL_RCC_OscConfig+0x538>
 80079e8:	40023800 	.word	0x40023800
 80079ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80079f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a60 <HAL_RCC_OscConfig+0x544>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d028      	beq.n	8007a50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d121      	bne.n	8007a50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d11a      	bne.n	8007a50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a20:	4013      	ands	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d111      	bne.n	8007a50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d107      	bne.n	8007a50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d001      	beq.n	8007a54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40023800 	.word	0x40023800

08007a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0d0      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d910      	bls.n	8007aac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a8a:	4b67      	ldr	r3, [pc, #412]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f023 020f 	bic.w	r2, r3, #15
 8007a92:	4965      	ldr	r1, [pc, #404]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a9a:	4b63      	ldr	r3, [pc, #396]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d001      	beq.n	8007aac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e0b8      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d020      	beq.n	8007afa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ac4:	4b59      	ldr	r3, [pc, #356]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4a58      	ldr	r2, [pc, #352]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007aca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ace:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007adc:	4b53      	ldr	r3, [pc, #332]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	4a52      	ldr	r2, [pc, #328]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007ae2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ae8:	4b50      	ldr	r3, [pc, #320]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	494d      	ldr	r1, [pc, #308]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d040      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d107      	bne.n	8007b1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0e:	4b47      	ldr	r3, [pc, #284]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d115      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e07f      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d107      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b26:	4b41      	ldr	r3, [pc, #260]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e073      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b36:	4b3d      	ldr	r3, [pc, #244]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e06b      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b46:	4b39      	ldr	r3, [pc, #228]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f023 0203 	bic.w	r2, r3, #3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4936      	ldr	r1, [pc, #216]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b58:	f7fa fa5c 	bl	8002014 <HAL_GetTick>
 8007b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5e:	e00a      	b.n	8007b76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b60:	f7fa fa58 	bl	8002014 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e053      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b76:	4b2d      	ldr	r3, [pc, #180]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 020c 	and.w	r2, r3, #12
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d1eb      	bne.n	8007b60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 030f 	and.w	r3, r3, #15
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d210      	bcs.n	8007bb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b96:	4b24      	ldr	r3, [pc, #144]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f023 020f 	bic.w	r2, r3, #15
 8007b9e:	4922      	ldr	r1, [pc, #136]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba6:	4b20      	ldr	r3, [pc, #128]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d001      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e032      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bc4:	4b19      	ldr	r3, [pc, #100]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4916      	ldr	r1, [pc, #88]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007be2:	4b12      	ldr	r3, [pc, #72]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	490e      	ldr	r1, [pc, #56]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bf6:	f000 f821 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c8>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	091b      	lsrs	r3, r3, #4
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	490a      	ldr	r1, [pc, #40]	@ (8007c30 <HAL_RCC_ClockConfig+0x1cc>)
 8007c08:	5ccb      	ldrb	r3, [r1, r3]
 8007c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0e:	4a09      	ldr	r2, [pc, #36]	@ (8007c34 <HAL_RCC_ClockConfig+0x1d0>)
 8007c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c12:	4b09      	ldr	r3, [pc, #36]	@ (8007c38 <HAL_RCC_ClockConfig+0x1d4>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fa f9b8 	bl	8001f8c <HAL_InitTick>

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40023c00 	.word	0x40023c00
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	0801a84c 	.word	0x0801a84c
 8007c34:	20000000 	.word	0x20000000
 8007c38:	20000004 	.word	0x20000004

08007c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c40:	b090      	sub	sp, #64	@ 0x40
 8007c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c54:	4b59      	ldr	r3, [pc, #356]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 030c 	and.w	r3, r3, #12
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d00d      	beq.n	8007c7c <HAL_RCC_GetSysClockFreq+0x40>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	f200 80a1 	bhi.w	8007da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_RCC_GetSysClockFreq+0x34>
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d003      	beq.n	8007c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c6e:	e09b      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c70:	4b53      	ldr	r3, [pc, #332]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c74:	e09b      	b.n	8007dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c76:	4b53      	ldr	r3, [pc, #332]	@ (8007dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c7a:	e098      	b.n	8007dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c86:	4b4d      	ldr	r3, [pc, #308]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d028      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c92:	4b4a      	ldr	r3, [pc, #296]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	2200      	movs	r2, #0
 8007c9a:	623b      	str	r3, [r7, #32]
 8007c9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4b47      	ldr	r3, [pc, #284]	@ (8007dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ca8:	fb03 f201 	mul.w	r2, r3, r1
 8007cac:	2300      	movs	r3, #0
 8007cae:	fb00 f303 	mul.w	r3, r0, r3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	4a43      	ldr	r2, [pc, #268]	@ (8007dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8007cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cbc:	460a      	mov	r2, r1
 8007cbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cc2:	4413      	add	r3, r2
 8007cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc8:	2200      	movs	r2, #0
 8007cca:	61bb      	str	r3, [r7, #24]
 8007ccc:	61fa      	str	r2, [r7, #28]
 8007cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007cd6:	f7f8 faeb 	bl	80002b0 <__aeabi_uldivmod>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4613      	mov	r3, r2
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce2:	e053      	b.n	8007d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce4:	4b35      	ldr	r3, [pc, #212]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	099b      	lsrs	r3, r3, #6
 8007cea:	2200      	movs	r2, #0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	617a      	str	r2, [r7, #20]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cf6:	f04f 0b00 	mov.w	fp, #0
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	f04f 0000 	mov.w	r0, #0
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	0159      	lsls	r1, r3, #5
 8007d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d0c:	0150      	lsls	r0, r2, #5
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	ebb2 080a 	subs.w	r8, r2, sl
 8007d16:	eb63 090b 	sbc.w	r9, r3, fp
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8007d32:	eb63 0509 	sbc.w	r5, r3, r9
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	00eb      	lsls	r3, r5, #3
 8007d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d44:	00e2      	lsls	r2, r4, #3
 8007d46:	4614      	mov	r4, r2
 8007d48:	461d      	mov	r5, r3
 8007d4a:	eb14 030a 	adds.w	r3, r4, sl
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	eb45 030b 	adc.w	r3, r5, fp
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d62:	4629      	mov	r1, r5
 8007d64:	028b      	lsls	r3, r1, #10
 8007d66:	4621      	mov	r1, r4
 8007d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	028a      	lsls	r2, r1, #10
 8007d70:	4610      	mov	r0, r2
 8007d72:	4619      	mov	r1, r3
 8007d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d76:	2200      	movs	r2, #0
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	60fa      	str	r2, [r7, #12]
 8007d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d80:	f7f8 fa96 	bl	80002b0 <__aeabi_uldivmod>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4613      	mov	r3, r2
 8007d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	0c1b      	lsrs	r3, r3, #16
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	3301      	adds	r3, #1
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007d9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007da6:	e002      	b.n	8007dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007da8:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3740      	adds	r7, #64	@ 0x40
 8007db4:	46bd      	mov	sp, r7
 8007db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dba:	bf00      	nop
 8007dbc:	40023800 	.word	0x40023800
 8007dc0:	00f42400 	.word	0x00f42400
 8007dc4:	017d7840 	.word	0x017d7840

08007dc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dcc:	4b03      	ldr	r3, [pc, #12]	@ (8007ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dce:	681b      	ldr	r3, [r3, #0]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	20000000 	.word	0x20000000

08007de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007de4:	f7ff fff0 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007de8:	4602      	mov	r2, r0
 8007dea:	4b05      	ldr	r3, [pc, #20]	@ (8007e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	0a9b      	lsrs	r3, r3, #10
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	4903      	ldr	r1, [pc, #12]	@ (8007e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007df6:	5ccb      	ldrb	r3, [r1, r3]
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40023800 	.word	0x40023800
 8007e04:	0801a85c 	.word	0x0801a85c

08007e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e0c:	f7ff ffdc 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007e10:	4602      	mov	r2, r0
 8007e12:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	0b5b      	lsrs	r3, r3, #13
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	4903      	ldr	r1, [pc, #12]	@ (8007e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e1e:	5ccb      	ldrb	r3, [r1, r3]
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	0801a85c 	.word	0x0801a85c

08007e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e58:	4b69      	ldr	r3, [pc, #420]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	4a68      	ldr	r2, [pc, #416]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007e62:	6093      	str	r3, [r2, #8]
 8007e64:	4b66      	ldr	r3, [pc, #408]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e6c:	4964      	ldr	r1, [pc, #400]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d017      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e98:	4959      	ldr	r1, [pc, #356]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea8:	d101      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d017      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ec6:	4b4e      	ldr	r3, [pc, #312]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ecc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed4:	494a      	ldr	r1, [pc, #296]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ee4:	d101      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 808b 	beq.w	800802a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f14:	4b3a      	ldr	r3, [pc, #232]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f18:	4a39      	ldr	r2, [pc, #228]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f20:	4b37      	ldr	r3, [pc, #220]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f2c:	4b35      	ldr	r3, [pc, #212]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a34      	ldr	r2, [pc, #208]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f38:	f7fa f86c 	bl	8002014 <HAL_GetTick>
 8007f3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f40:	f7fa f868 	bl	8002014 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	@ 0x64
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e357      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f52:	4b2c      	ldr	r3, [pc, #176]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0f0      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f5e:	4b28      	ldr	r3, [pc, #160]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d035      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d02e      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f7c:	4b20      	ldr	r3, [pc, #128]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f86:	4b1e      	ldr	r3, [pc, #120]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f90:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f92:	4b1b      	ldr	r3, [pc, #108]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f96:	4a1a      	ldr	r2, [pc, #104]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007f9e:	4a18      	ldr	r2, [pc, #96]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fa4:	4b16      	ldr	r3, [pc, #88]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d114      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7fa f830 	bl	8002014 <HAL_GetTick>
 8007fb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fb6:	e00a      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fb8:	f7fa f82c 	bl	8002014 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e319      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fce:	4b0c      	ldr	r3, [pc, #48]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0ee      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fe6:	d111      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007fe8:	4b05      	ldr	r3, [pc, #20]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007ff4:	4b04      	ldr	r3, [pc, #16]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ff6:	400b      	ands	r3, r1
 8007ff8:	4901      	ldr	r1, [pc, #4]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
 8007ffe:	e00b      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008000:	40023800 	.word	0x40023800
 8008004:	40007000 	.word	0x40007000
 8008008:	0ffffcff 	.word	0x0ffffcff
 800800c:	4baa      	ldr	r3, [pc, #680]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	4aa9      	ldr	r2, [pc, #676]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008012:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008016:	6093      	str	r3, [r2, #8]
 8008018:	4ba7      	ldr	r3, [pc, #668]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800801a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008024:	49a4      	ldr	r1, [pc, #656]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008026:	4313      	orrs	r3, r2
 8008028:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	2b00      	cmp	r3, #0
 8008034:	d010      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008036:	4ba0      	ldr	r3, [pc, #640]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800803c:	4a9e      	ldr	r2, [pc, #632]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800803e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008042:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008046:	4b9c      	ldr	r3, [pc, #624]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008048:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008050:	4999      	ldr	r1, [pc, #612]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008052:	4313      	orrs	r3, r2
 8008054:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008064:	4b94      	ldr	r3, [pc, #592]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008072:	4991      	ldr	r1, [pc, #580]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008074:	4313      	orrs	r3, r2
 8008076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008086:	4b8c      	ldr	r3, [pc, #560]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008094:	4988      	ldr	r1, [pc, #544]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008096:	4313      	orrs	r3, r2
 8008098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080a8:	4b83      	ldr	r3, [pc, #524]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b6:	4980      	ldr	r1, [pc, #512]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080ca:	4b7b      	ldr	r3, [pc, #492]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d8:	4977      	ldr	r1, [pc, #476]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080ec:	4b72      	ldr	r3, [pc, #456]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f2:	f023 0203 	bic.w	r2, r3, #3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fa:	496f      	ldr	r1, [pc, #444]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800810e:	4b6a      	ldr	r3, [pc, #424]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008114:	f023 020c 	bic.w	r2, r3, #12
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800811c:	4966      	ldr	r1, [pc, #408]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008130:	4b61      	ldr	r3, [pc, #388]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008136:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800813e:	495e      	ldr	r1, [pc, #376]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008140:	4313      	orrs	r3, r2
 8008142:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008152:	4b59      	ldr	r3, [pc, #356]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008158:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008160:	4955      	ldr	r1, [pc, #340]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008174:	4b50      	ldr	r3, [pc, #320]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008182:	494d      	ldr	r1, [pc, #308]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008196:	4b48      	ldr	r3, [pc, #288]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a4:	4944      	ldr	r1, [pc, #272]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80081b8:	4b3f      	ldr	r3, [pc, #252]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c6:	493c      	ldr	r1, [pc, #240]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80081da:	4b37      	ldr	r3, [pc, #220]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e8:	4933      	ldr	r1, [pc, #204]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081fc:	4b2e      	ldr	r3, [pc, #184]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008202:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800820a:	492b      	ldr	r1, [pc, #172]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820c:	4313      	orrs	r3, r2
 800820e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d011      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800821e:	4b26      	ldr	r3, [pc, #152]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008224:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800822c:	4922      	ldr	r1, [pc, #136]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800823c:	d101      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800823e:	2301      	movs	r3, #1
 8008240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0308 	and.w	r3, r3, #8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800824e:	2301      	movs	r3, #1
 8008250:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800825e:	4b16      	ldr	r3, [pc, #88]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008264:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800826c:	4912      	ldr	r1, [pc, #72]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826e:	4313      	orrs	r3, r2
 8008270:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008280:	4b0d      	ldr	r3, [pc, #52]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008286:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008290:	4909      	ldr	r1, [pc, #36]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d006      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80d9 	beq.w	800845e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082ac:	4b02      	ldr	r3, [pc, #8]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a01      	ldr	r2, [pc, #4]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082b6:	e001      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80082b8:	40023800 	.word	0x40023800
 80082bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082be:	f7f9 fea9 	bl	8002014 <HAL_GetTick>
 80082c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082c4:	e008      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082c6:	f7f9 fea5 	bl	8002014 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b64      	cmp	r3, #100	@ 0x64
 80082d2:	d901      	bls.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e194      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082d8:	4b6c      	ldr	r3, [pc, #432]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d021      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11d      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80082f8:	4b64      	ldr	r3, [pc, #400]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082fe:	0c1b      	lsrs	r3, r3, #16
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008306:	4b61      	ldr	r3, [pc, #388]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800830c:	0e1b      	lsrs	r3, r3, #24
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	019a      	lsls	r2, r3, #6
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	041b      	lsls	r3, r3, #16
 800831e:	431a      	orrs	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	061b      	lsls	r3, r3, #24
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	071b      	lsls	r3, r3, #28
 800832c:	4957      	ldr	r1, [pc, #348]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008344:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008348:	d00a      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008352:	2b00      	cmp	r3, #0
 8008354:	d02e      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800835e:	d129      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008360:	4b4a      	ldr	r3, [pc, #296]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800836e:	4b47      	ldr	r3, [pc, #284]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008374:	0f1b      	lsrs	r3, r3, #28
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	019a      	lsls	r2, r3, #6
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	061b      	lsls	r3, r3, #24
 800838e:	431a      	orrs	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	071b      	lsls	r3, r3, #28
 8008394:	493d      	ldr	r1, [pc, #244]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800839c:	4b3b      	ldr	r3, [pc, #236]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800839e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083a2:	f023 021f 	bic.w	r2, r3, #31
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083aa:	3b01      	subs	r3, #1
 80083ac:	4937      	ldr	r1, [pc, #220]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01d      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083c0:	4b32      	ldr	r3, [pc, #200]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083c6:	0e1b      	lsrs	r3, r3, #24
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083ce:	4b2f      	ldr	r3, [pc, #188]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d4:	0f1b      	lsrs	r3, r3, #28
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	019a      	lsls	r2, r3, #6
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	041b      	lsls	r3, r3, #16
 80083e8:	431a      	orrs	r2, r3
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	061b      	lsls	r3, r3, #24
 80083ee:	431a      	orrs	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	071b      	lsls	r3, r3, #28
 80083f4:	4925      	ldr	r1, [pc, #148]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d011      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	019a      	lsls	r2, r3, #6
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	061b      	lsls	r3, r3, #24
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	071b      	lsls	r3, r3, #28
 8008424:	4919      	ldr	r1, [pc, #100]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800842c:	4b17      	ldr	r3, [pc, #92]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a16      	ldr	r2, [pc, #88]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008432:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008438:	f7f9 fdec 	bl	8002014 <HAL_GetTick>
 800843c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800843e:	e008      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008440:	f7f9 fde8 	bl	8002014 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b64      	cmp	r3, #100	@ 0x64
 800844c:	d901      	bls.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e0d7      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008452:	4b0e      	ldr	r3, [pc, #56]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f0      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b01      	cmp	r3, #1
 8008462:	f040 80cd 	bne.w	8008600 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008466:	4b09      	ldr	r3, [pc, #36]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a08      	ldr	r2, [pc, #32]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800846c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008472:	f7f9 fdcf 	bl	8002014 <HAL_GetTick>
 8008476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008478:	e00a      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800847a:	f7f9 fdcb 	bl	8002014 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b64      	cmp	r3, #100	@ 0x64
 8008486:	d903      	bls.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e0ba      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800848c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008490:	4b5e      	ldr	r3, [pc, #376]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800849c:	d0ed      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02e      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d12a      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80084c6:	4b51      	ldr	r3, [pc, #324]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084d4:	4b4d      	ldr	r3, [pc, #308]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084da:	0f1b      	lsrs	r3, r3, #28
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	019a      	lsls	r2, r3, #6
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	041b      	lsls	r3, r3, #16
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	061b      	lsls	r3, r3, #24
 80084f4:	431a      	orrs	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	071b      	lsls	r3, r3, #28
 80084fa:	4944      	ldr	r1, [pc, #272]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008502:	4b42      	ldr	r3, [pc, #264]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008508:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	3b01      	subs	r3, #1
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	493d      	ldr	r1, [pc, #244]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d022      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800852c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008530:	d11d      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008532:	4b36      	ldr	r3, [pc, #216]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008538:	0e1b      	lsrs	r3, r3, #24
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008540:	4b32      	ldr	r3, [pc, #200]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	019a      	lsls	r2, r3, #6
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	041b      	lsls	r3, r3, #16
 800855a:	431a      	orrs	r2, r3
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	061b      	lsls	r3, r3, #24
 8008560:	431a      	orrs	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	071b      	lsls	r3, r3, #28
 8008566:	4929      	ldr	r1, [pc, #164]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008568:	4313      	orrs	r3, r2
 800856a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b00      	cmp	r3, #0
 8008578:	d028      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800857a:	4b24      	ldr	r3, [pc, #144]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800857c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008580:	0e1b      	lsrs	r3, r3, #24
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008588:	4b20      	ldr	r3, [pc, #128]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	019a      	lsls	r2, r3, #6
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	041b      	lsls	r3, r3, #16
 80085a0:	431a      	orrs	r2, r3
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	071b      	lsls	r3, r3, #28
 80085ae:	4917      	ldr	r1, [pc, #92]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085b6:	4b15      	ldr	r3, [pc, #84]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	4911      	ldr	r1, [pc, #68]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80085cc:	4b0f      	ldr	r3, [pc, #60]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a0e      	ldr	r2, [pc, #56]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d8:	f7f9 fd1c 	bl	8002014 <HAL_GetTick>
 80085dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085e0:	f7f9 fd18 	bl	8002014 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b64      	cmp	r3, #100	@ 0x64
 80085ec:	d901      	bls.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e007      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085f2:	4b06      	ldr	r3, [pc, #24]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fe:	d1ef      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3720      	adds	r7, #32
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40023800 	.word	0x40023800

08008610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e09d      	b.n	800875e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008626:	2b00      	cmp	r3, #0
 8008628:	d108      	bne.n	800863c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008632:	d009      	beq.n	8008648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	61da      	str	r2, [r3, #28]
 800863a:	e005      	b.n	8008648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d106      	bne.n	8008668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7f8 fcda 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800867e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008688:	d902      	bls.n	8008690 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	e002      	b.n	8008696 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008694:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800869e:	d007      	beq.n	80086b0 <HAL_SPI_Init+0xa0>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086a8:	d002      	beq.n	80086b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086e8:	431a      	orrs	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f2:	ea42 0103 	orr.w	r1, r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	f003 0204 	and.w	r2, r3, #4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800872c:	ea42 0103 	orr.w	r1, r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69da      	ldr	r2, [r3, #28]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800874c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b01      	cmp	r3, #1
 8008780:	d001      	beq.n	8008786 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008782:	2302      	movs	r3, #2
 8008784:	e0d4      	b.n	8008930 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <HAL_SPI_Transmit_DMA+0x2a>
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e0cc      	b.n	8008930 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_SPI_Transmit_DMA+0x3c>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e0c5      	b.n	8008930 <HAL_SPI_Transmit_DMA+0x1c8>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2203      	movs	r2, #3
 80087b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	88fa      	ldrh	r2, [r7, #6]
 80087c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	88fa      	ldrh	r2, [r7, #6]
 80087ca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f6:	d10f      	bne.n	8008818 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008806:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008816:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881c:	4a46      	ldr	r2, [pc, #280]	@ (8008938 <HAL_SPI_Transmit_DMA+0x1d0>)
 800881e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008824:	4a45      	ldr	r2, [pc, #276]	@ (800893c <HAL_SPI_Transmit_DMA+0x1d4>)
 8008826:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882c:	4a44      	ldr	r2, [pc, #272]	@ (8008940 <HAL_SPI_Transmit_DMA+0x1d8>)
 800882e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008834:	2200      	movs	r2, #0
 8008836:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008846:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008850:	d82d      	bhi.n	80088ae <HAL_SPI_Transmit_DMA+0x146>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800885c:	d127      	bne.n	80088ae <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008862:	b29b      	uxth	r3, r3
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10f      	bne.n	800888c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800887a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008880:	b29b      	uxth	r3, r3
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800888a:	e010      	b.n	80088ae <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800889a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3301      	adds	r3, #1
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b6:	4619      	mov	r1, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	330c      	adds	r3, #12
 80088be:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088c6:	f7fa fc25 	bl	8003114 <HAL_DMA_Start_IT>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088d4:	f043 0210 	orr.w	r2, r3, #16
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e023      	b.n	8008930 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f2:	2b40      	cmp	r3, #64	@ 0x40
 80088f4:	d007      	beq.n	8008906 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008904:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0220 	orr.w	r2, r2, #32
 800891c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0202 	orr.w	r2, r2, #2
 800892c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	080092d9 	.word	0x080092d9
 800893c:	080090f5 	.word	0x080090f5
 8008940:	0800932d 	.word	0x0800932d

08008944 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b01      	cmp	r3, #1
 800895c:	d001      	beq.n	8008962 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800895e:	2302      	movs	r3, #2
 8008960:	e105      	b.n	8008b6e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_SPI_Receive_DMA+0x2a>
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e0fd      	b.n	8008b6e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d110      	bne.n	800899c <HAL_SPI_Receive_DMA+0x58>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008982:	d10b      	bne.n	800899c <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2204      	movs	r2, #4
 8008988:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 f8f6 	bl	8008b84 <HAL_SPI_TransmitReceive_DMA>
 8008998:	4603      	mov	r3, r0
 800899a:	e0e8      	b.n	8008b6e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d101      	bne.n	80089aa <HAL_SPI_Receive_DMA+0x66>
 80089a6:	2302      	movs	r3, #2
 80089a8:	e0e1      	b.n	8008b6e <HAL_SPI_Receive_DMA+0x22a>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2204      	movs	r2, #4
 80089b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	88fa      	ldrh	r2, [r7, #6]
 80089d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089f6:	d10f      	bne.n	8008a18 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008a16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a26:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a30:	d908      	bls.n	8008a44 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a40:	605a      	str	r2, [r3, #4]
 8008a42:	e042      	b.n	8008aca <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a52:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a5e:	d134      	bne.n	8008aca <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a6e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d111      	bne.n	8008aa4 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a8e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008aa2:	e012      	b.n	8008aca <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ab2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	085b      	lsrs	r3, r3, #1
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ace:	4a2a      	ldr	r2, [pc, #168]	@ (8008b78 <HAL_SPI_Receive_DMA+0x234>)
 8008ad0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad6:	4a29      	ldr	r2, [pc, #164]	@ (8008b7c <HAL_SPI_Receive_DMA+0x238>)
 8008ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ade:	4a28      	ldr	r2, [pc, #160]	@ (8008b80 <HAL_SPI_Receive_DMA+0x23c>)
 8008ae0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	4619      	mov	r1, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b02:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008b04:	f7fa fb06 	bl	8003114 <HAL_DMA_Start_IT>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b12:	f043 0210 	orr.w	r2, r3, #16
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e023      	b.n	8008b6e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b30:	2b40      	cmp	r3, #64	@ 0x40
 8008b32:	d007      	beq.n	8008b44 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b42:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0220 	orr.w	r2, r2, #32
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0201 	orr.w	r2, r2, #1
 8008b6a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	080092f5 	.word	0x080092f5
 8008b7c:	0800919d 	.word	0x0800919d
 8008b80:	0800932d 	.word	0x0800932d

08008b84 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b98:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d00c      	beq.n	8008bc0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bac:	d106      	bne.n	8008bbc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <HAL_SPI_TransmitReceive_DMA+0x38>
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d001      	beq.n	8008bc0 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e158      	b.n	8008e72 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008bcc:	887b      	ldrh	r3, [r7, #2]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e14d      	b.n	8008e72 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e146      	b.n	8008e72 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d003      	beq.n	8008c00 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2205      	movs	r2, #5
 8008bfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	887a      	ldrh	r2, [r7, #2]
 8008c10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	887a      	ldrh	r2, [r7, #2]
 8008c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	887a      	ldrh	r2, [r7, #2]
 8008c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	887a      	ldrh	r2, [r7, #2]
 8008c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008c48:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c52:	d908      	bls.n	8008c66 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c62:	605a      	str	r2, [r3, #4]
 8008c64:	e06f      	b.n	8008d46 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c74:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c80:	d126      	bne.n	8008cd0 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10f      	bne.n	8008cae <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c9c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cac:	e010      	b.n	8008cd0 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cbc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	085b      	lsrs	r3, r3, #1
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	3301      	adds	r3, #1
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cda:	d134      	bne.n	8008d46 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cea:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d111      	bne.n	8008d20 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d0a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	085b      	lsrs	r3, r3, #1
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008d1e:	e012      	b.n	8008d46 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d108      	bne.n	8008d64 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d56:	4a49      	ldr	r2, [pc, #292]	@ (8008e7c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008d58:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5e:	4a48      	ldr	r2, [pc, #288]	@ (8008e80 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008d60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d62:	e007      	b.n	8008d74 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d68:	4a46      	ldr	r2, [pc, #280]	@ (8008e84 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008d6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d70:	4a45      	ldr	r2, [pc, #276]	@ (8008e88 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d78:	4a44      	ldr	r2, [pc, #272]	@ (8008e8c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008d7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d80:	2200      	movs	r2, #0
 8008d82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	4619      	mov	r1, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d94:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d9c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d9e:	f7fa f9b9 	bl	8003114 <HAL_DMA_Start_IT>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dac:	f043 0210 	orr.w	r2, r3, #16
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e058      	b.n	8008e72 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ddc:	2200      	movs	r2, #0
 8008dde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de4:	2200      	movs	r2, #0
 8008de6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dec:	2200      	movs	r2, #0
 8008dee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	4619      	mov	r1, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	330c      	adds	r3, #12
 8008e00:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e08:	f7fa f984 	bl	8003114 <HAL_DMA_Start_IT>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e16:	f043 0210 	orr.w	r2, r3, #16
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e023      	b.n	8008e72 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e34:	2b40      	cmp	r3, #64	@ 0x40
 8008e36:	d007      	beq.n	8008e48 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e46:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0220 	orr.w	r2, r2, #32
 8008e5e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0202 	orr.w	r2, r2, #2
 8008e6e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	080092f5 	.word	0x080092f5
 8008e80:	0800919d 	.word	0x0800919d
 8008e84:	08009311 	.word	0x08009311
 8008e88:	08009247 	.word	0x08009247
 8008e8c:	0800932d 	.word	0x0800932d

08008e90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	099b      	lsrs	r3, r3, #6
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10f      	bne.n	8008ed4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	099b      	lsrs	r3, r3, #6
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	4798      	blx	r3
    return;
 8008ed2:	e0d7      	b.n	8009084 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <HAL_SPI_IRQHandler+0x66>
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	09db      	lsrs	r3, r3, #7
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3
    return;
 8008ef4:	e0c6      	b.n	8009084 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	095b      	lsrs	r3, r3, #5
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10c      	bne.n	8008f1c <HAL_SPI_IRQHandler+0x8c>
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	099b      	lsrs	r3, r3, #6
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d106      	bne.n	8008f1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	0a1b      	lsrs	r3, r3, #8
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 80b4 	beq.w	8009084 <HAL_SPI_IRQHandler+0x1f4>
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	095b      	lsrs	r3, r3, #5
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 80ad 	beq.w	8009084 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	099b      	lsrs	r3, r3, #6
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d023      	beq.n	8008f7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d011      	beq.n	8008f66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f46:	f043 0204 	orr.w	r2, r3, #4
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f4e:	2300      	movs	r3, #0
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	617b      	str	r3, [r7, #20]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	e00b      	b.n	8008f7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f66:	2300      	movs	r3, #0
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	693b      	ldr	r3, [r7, #16]
        return;
 8008f7c:	e082      	b.n	8009084 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d014      	beq.n	8008fb4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	60fb      	str	r3, [r7, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	0a1b      	lsrs	r3, r3, #8
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00c      	beq.n	8008fda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fc4:	f043 0208 	orr.w	r2, r3, #8
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60bb      	str	r3, [r7, #8]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	60bb      	str	r3, [r7, #8]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d04f      	beq.n	8009082 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ff0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d104      	bne.n	800900e <HAL_SPI_IRQHandler+0x17e>
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d034      	beq.n	8009078 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f022 0203 	bic.w	r2, r2, #3
 800901c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009022:	2b00      	cmp	r3, #0
 8009024:	d011      	beq.n	800904a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902a:	4a18      	ldr	r2, [pc, #96]	@ (800908c <HAL_SPI_IRQHandler+0x1fc>)
 800902c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009032:	4618      	mov	r0, r3
 8009034:	f7fa f93e 	bl	80032b4 <HAL_DMA_Abort_IT>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d005      	beq.n	800904a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904e:	2b00      	cmp	r3, #0
 8009050:	d016      	beq.n	8009080 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009056:	4a0d      	ldr	r2, [pc, #52]	@ (800908c <HAL_SPI_IRQHandler+0x1fc>)
 8009058:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905e:	4618      	mov	r0, r3
 8009060:	f7fa f928 	bl	80032b4 <HAL_DMA_Abort_IT>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800906e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009076:	e003      	b.n	8009080 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f831 	bl	80090e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800907e:	e000      	b.n	8009082 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009080:	bf00      	nop
    return;
 8009082:	bf00      	nop
  }
}
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	0800936d 	.word	0x0800936d

08009090 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009100:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009102:	f7f8 ff87 	bl	8002014 <HAL_GetTick>
 8009106:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009116:	d03b      	beq.n	8009190 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0220 	bic.w	r2, r2, #32
 8009126:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0202 	bic.w	r2, r2, #2
 8009136:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	2164      	movs	r1, #100	@ 0x64
 800913c:	6978      	ldr	r0, [r7, #20]
 800913e:	f000 fac5 	bl	80096cc <SPI_EndRxTxTransaction>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800914c:	f043 0220 	orr.w	r2, r3, #32
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2200      	movs	r2, #0
 8009176:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009188:	6978      	ldr	r0, [r7, #20]
 800918a:	f7ff ffa9 	bl	80090e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800918e:	e002      	b.n	8009196 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009190:	6978      	ldr	r0, [r7, #20]
 8009192:	f00d fcaf 	bl	8016af4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091aa:	f7f8 ff33 	bl	8002014 <HAL_GetTick>
 80091ae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091be:	d03c      	beq.n	800923a <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0220 	bic.w	r2, r2, #32
 80091ce:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <SPI_DMAReceiveCplt+0x58>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091e0:	d108      	bne.n	80091f4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0203 	bic.w	r2, r2, #3
 80091f0:	605a      	str	r2, [r3, #4]
 80091f2:	e007      	b.n	8009204 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 0201 	bic.w	r2, r2, #1
 8009202:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	2164      	movs	r1, #100	@ 0x64
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f9e3 	bl	80095d4 <SPI_EndRxTransaction>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff ff54 	bl	80090e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009238:	e002      	b.n	8009240 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f00d fc7a 	bl	8016b34 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009252:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009254:	f7f8 fede 	bl	8002014 <HAL_GetTick>
 8009258:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009268:	d030      	beq.n	80092cc <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0220 	bic.w	r2, r2, #32
 8009278:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	2164      	movs	r1, #100	@ 0x64
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fa24 	bl	80096cc <SPI_EndRxTxTransaction>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800928e:	f043 0220 	orr.w	r2, r3, #32
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0203 	bic.w	r2, r2, #3
 80092a4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff ff0b 	bl	80090e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80092ca:	e002      	b.n	80092d2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7ff fedf 	bl	8009090 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7ff fedc 	bl	80090a4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009300:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff fed8 	bl	80090b8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff fed4 	bl	80090cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009338:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0203 	bic.w	r2, r2, #3
 8009348:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800934e:	f043 0210 	orr.w	r2, r3, #16
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f7ff febe 	bl	80090e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009378:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff fea9 	bl	80090e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093a8:	f7f8 fe34 	bl	8002014 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	4413      	add	r3, r2
 80093b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093b8:	f7f8 fe2c 	bl	8002014 <HAL_GetTick>
 80093bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093be:	4b39      	ldr	r3, [pc, #228]	@ (80094a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	015b      	lsls	r3, r3, #5
 80093c4:	0d1b      	lsrs	r3, r3, #20
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093ce:	e055      	b.n	800947c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093d6:	d051      	beq.n	800947c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093d8:	f7f8 fe1c 	bl	8002014 <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	69fa      	ldr	r2, [r7, #28]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d902      	bls.n	80093ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d13d      	bne.n	800946a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009406:	d111      	bne.n	800942c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009410:	d004      	beq.n	800941c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800941a:	d107      	bne.n	800942c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800942a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009434:	d10f      	bne.n	8009456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e018      	b.n	800949c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	61fb      	str	r3, [r7, #28]
 8009474:	e002      	b.n	800947c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	3b01      	subs	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4013      	ands	r3, r2
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	bf0c      	ite	eq
 800948c:	2301      	moveq	r3, #1
 800948e:	2300      	movne	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	429a      	cmp	r2, r3
 8009498:	d19a      	bne.n	80093d0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20000000 	.word	0x20000000

080094a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	@ 0x28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80094ba:	f7f8 fdab 	bl	8002014 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	4413      	add	r3, r2
 80094c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80094ca:	f7f8 fda3 	bl	8002014 <HAL_GetTick>
 80094ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80094d8:	4b3d      	ldr	r3, [pc, #244]	@ (80095d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	00da      	lsls	r2, r3, #3
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	0d1b      	lsrs	r3, r3, #20
 80094e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094f0:	e061      	b.n	80095b6 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094f8:	d107      	bne.n	800950a <SPI_WaitFifoStateUntilTimeout+0x62>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009508:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009510:	d051      	beq.n	80095b6 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009512:	f7f8 fd7f 	bl	8002014 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800951e:	429a      	cmp	r2, r3
 8009520:	d902      	bls.n	8009528 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	2b00      	cmp	r3, #0
 8009526:	d13d      	bne.n	80095a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009540:	d111      	bne.n	8009566 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800954a:	d004      	beq.n	8009556 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009554:	d107      	bne.n	8009566 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800956e:	d10f      	bne.n	8009590 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800958e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e011      	b.n	80095c8 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ae:	e002      	b.n	80095b6 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4013      	ands	r3, r2
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d195      	bne.n	80094f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3728      	adds	r7, #40	@ 0x28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000000 	.word	0x20000000

080095d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af02      	add	r7, sp, #8
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095e8:	d111      	bne.n	800960e <SPI_EndRxTransaction+0x3a>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095f2:	d004      	beq.n	80095fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095fc:	d107      	bne.n	800960e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800960c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009616:	d112      	bne.n	800963e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2200      	movs	r2, #0
 8009620:	2180      	movs	r1, #128	@ 0x80
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff feb8 	bl	8009398 <SPI_WaitFlagStateUntilTimeout>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d021      	beq.n	8009672 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009632:	f043 0220 	orr.w	r2, r3, #32
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e03d      	b.n	80096ba <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800963e:	4b21      	ldr	r3, [pc, #132]	@ (80096c4 <SPI_EndRxTransaction+0xf0>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a21      	ldr	r2, [pc, #132]	@ (80096c8 <SPI_EndRxTransaction+0xf4>)
 8009644:	fba2 2303 	umull	r2, r3, r2, r3
 8009648:	0d5b      	lsrs	r3, r3, #21
 800964a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800964e:	fb02 f303 	mul.w	r3, r2, r3
 8009652:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	3b01      	subs	r3, #1
 800965e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800966a:	2b80      	cmp	r3, #128	@ 0x80
 800966c:	d0f2      	beq.n	8009654 <SPI_EndRxTransaction+0x80>
 800966e:	e000      	b.n	8009672 <SPI_EndRxTransaction+0x9e>
        break;
 8009670:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800967a:	d11d      	bne.n	80096b8 <SPI_EndRxTransaction+0xe4>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009684:	d004      	beq.n	8009690 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800968e:	d113      	bne.n	80096b8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2200      	movs	r2, #0
 8009698:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff ff03 	bl	80094a8 <SPI_WaitFifoStateUntilTimeout>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ac:	f043 0220 	orr.w	r2, r3, #32
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e000      	b.n	80096ba <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20000000 	.word	0x20000000
 80096c8:	165e9f81 	.word	0x165e9f81

080096cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af02      	add	r7, sp, #8
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2200      	movs	r2, #0
 80096e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff fedf 	bl	80094a8 <SPI_WaitFifoStateUntilTimeout>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d007      	beq.n	8009700 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f4:	f043 0220 	orr.w	r2, r3, #32
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e046      	b.n	800978e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009700:	4b25      	ldr	r3, [pc, #148]	@ (8009798 <SPI_EndRxTxTransaction+0xcc>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a25      	ldr	r2, [pc, #148]	@ (800979c <SPI_EndRxTxTransaction+0xd0>)
 8009706:	fba2 2303 	umull	r2, r3, r2, r3
 800970a:	0d5b      	lsrs	r3, r3, #21
 800970c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009710:	fb02 f303 	mul.w	r3, r2, r3
 8009714:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800971e:	d112      	bne.n	8009746 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2200      	movs	r2, #0
 8009728:	2180      	movs	r1, #128	@ 0x80
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7ff fe34 	bl	8009398 <SPI_WaitFlagStateUntilTimeout>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d016      	beq.n	8009764 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800973a:	f043 0220 	orr.w	r2, r3, #32
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e023      	b.n	800978e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	3b01      	subs	r3, #1
 8009750:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800975c:	2b80      	cmp	r3, #128	@ 0x80
 800975e:	d0f2      	beq.n	8009746 <SPI_EndRxTxTransaction+0x7a>
 8009760:	e000      	b.n	8009764 <SPI_EndRxTxTransaction+0x98>
        break;
 8009762:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2200      	movs	r2, #0
 800976c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fe99 	bl	80094a8 <SPI_WaitFifoStateUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009780:	f043 0220 	orr.w	r2, r3, #32
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	e000      	b.n	800978e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000000 	.word	0x20000000
 800979c:	165e9f81 	.word	0x165e9f81

080097a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e049      	b.n	8009846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7f8 f81e 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	3304      	adds	r3, #4
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f000 fb40 	bl	8009e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b01      	cmp	r3, #1
 8009862:	d001      	beq.n	8009868 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e04c      	b.n	8009902 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a26      	ldr	r2, [pc, #152]	@ (8009910 <HAL_TIM_Base_Start+0xc0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d022      	beq.n	80098c0 <HAL_TIM_Base_Start+0x70>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009882:	d01d      	beq.n	80098c0 <HAL_TIM_Base_Start+0x70>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a22      	ldr	r2, [pc, #136]	@ (8009914 <HAL_TIM_Base_Start+0xc4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d018      	beq.n	80098c0 <HAL_TIM_Base_Start+0x70>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a21      	ldr	r2, [pc, #132]	@ (8009918 <HAL_TIM_Base_Start+0xc8>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d013      	beq.n	80098c0 <HAL_TIM_Base_Start+0x70>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a1f      	ldr	r2, [pc, #124]	@ (800991c <HAL_TIM_Base_Start+0xcc>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d00e      	beq.n	80098c0 <HAL_TIM_Base_Start+0x70>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009920 <HAL_TIM_Base_Start+0xd0>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d009      	beq.n	80098c0 <HAL_TIM_Base_Start+0x70>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009924 <HAL_TIM_Base_Start+0xd4>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d004      	beq.n	80098c0 <HAL_TIM_Base_Start+0x70>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009928 <HAL_TIM_Base_Start+0xd8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d115      	bne.n	80098ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	4b19      	ldr	r3, [pc, #100]	@ (800992c <HAL_TIM_Base_Start+0xdc>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b06      	cmp	r3, #6
 80098d0:	d015      	beq.n	80098fe <HAL_TIM_Base_Start+0xae>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098d8:	d011      	beq.n	80098fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0201 	orr.w	r2, r2, #1
 80098e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ea:	e008      	b.n	80098fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	e000      	b.n	8009900 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40010000 	.word	0x40010000
 8009914:	40000400 	.word	0x40000400
 8009918:	40000800 	.word	0x40000800
 800991c:	40000c00 	.word	0x40000c00
 8009920:	40010400 	.word	0x40010400
 8009924:	40014000 	.word	0x40014000
 8009928:	40001800 	.word	0x40001800
 800992c:	00010007 	.word	0x00010007

08009930 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6a1a      	ldr	r2, [r3, #32]
 800993e:	4b0f      	ldr	r3, [pc, #60]	@ (800997c <HAL_TIM_Base_Stop+0x4c>)
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10f      	bne.n	8009966 <HAL_TIM_Base_Stop+0x36>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6a1a      	ldr	r2, [r3, #32]
 800994c:	f240 4344 	movw	r3, #1092	@ 0x444
 8009950:	4013      	ands	r3, r2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d107      	bne.n	8009966 <HAL_TIM_Base_Stop+0x36>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0201 	bic.w	r2, r2, #1
 8009964:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	00111111 	.word	0x00111111

08009980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b01      	cmp	r3, #1
 8009992:	d001      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e054      	b.n	8009a42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f042 0201 	orr.w	r2, r2, #1
 80099ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a26      	ldr	r2, [pc, #152]	@ (8009a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d022      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x80>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c2:	d01d      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x80>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a22      	ldr	r2, [pc, #136]	@ (8009a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d018      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x80>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a21      	ldr	r2, [pc, #132]	@ (8009a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d013      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x80>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a1f      	ldr	r2, [pc, #124]	@ (8009a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00e      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x80>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a60 <HAL_TIM_Base_Start_IT+0xe0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d009      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x80>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009a64 <HAL_TIM_Base_Start_IT+0xe4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d004      	beq.n	8009a00 <HAL_TIM_Base_Start_IT+0x80>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009a68 <HAL_TIM_Base_Start_IT+0xe8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d115      	bne.n	8009a2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	4b19      	ldr	r3, [pc, #100]	@ (8009a6c <HAL_TIM_Base_Start_IT+0xec>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2b06      	cmp	r3, #6
 8009a10:	d015      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0xbe>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a18:	d011      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0201 	orr.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2a:	e008      	b.n	8009a3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0201 	orr.w	r2, r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e000      	b.n	8009a40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40000400 	.word	0x40000400
 8009a58:	40000800 	.word	0x40000800
 8009a5c:	40000c00 	.word	0x40000c00
 8009a60:	40010400 	.word	0x40010400
 8009a64:	40014000 	.word	0x40014000
 8009a68:	40001800 	.word	0x40001800
 8009a6c:	00010007 	.word	0x00010007

08009a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d020      	beq.n	8009ad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01b      	beq.n	8009ad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f06f 0202 	mvn.w	r2, #2
 8009aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f9b4 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 8009ac0:	e005      	b.n	8009ace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9a6 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f9b7 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f003 0304 	and.w	r3, r3, #4
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d020      	beq.n	8009b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d01b      	beq.n	8009b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f06f 0204 	mvn.w	r2, #4
 8009af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2202      	movs	r2, #2
 8009af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f98e 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 8009b0c:	e005      	b.n	8009b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f980 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f991 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d020      	beq.n	8009b6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d01b      	beq.n	8009b6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f06f 0208 	mvn.w	r2, #8
 8009b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2204      	movs	r2, #4
 8009b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	f003 0303 	and.w	r3, r3, #3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f968 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 8009b58:	e005      	b.n	8009b66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f95a 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f96b 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f003 0310 	and.w	r3, r3, #16
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d020      	beq.n	8009bb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f003 0310 	and.w	r3, r3, #16
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01b      	beq.n	8009bb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f06f 0210 	mvn.w	r2, #16
 8009b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2208      	movs	r2, #8
 8009b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f942 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 8009ba4:	e005      	b.n	8009bb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f934 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f945 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00c      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f06f 0201 	mvn.w	r2, #1
 8009bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f00d f85a 	bl	8016c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d104      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00c      	beq.n	8009c0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d007      	beq.n	8009c0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fb05 	bl	800a214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00c      	beq.n	8009c2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fafd 	bl	800a228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00c      	beq.n	8009c52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d007      	beq.n	8009c52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f8ff 	bl	8009e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00c      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f003 0320 	and.w	r3, r3, #32
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d007      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f06f 0220 	mvn.w	r2, #32
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fac5 	bl	800a200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_TIM_ConfigClockSource+0x1c>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e0b4      	b.n	8009e06 <HAL_TIM_ConfigClockSource+0x186>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	4b56      	ldr	r3, [pc, #344]	@ (8009e10 <HAL_TIM_ConfigClockSource+0x190>)
 8009cb8:	4013      	ands	r3, r2
 8009cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd4:	d03e      	beq.n	8009d54 <HAL_TIM_ConfigClockSource+0xd4>
 8009cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cda:	f200 8087 	bhi.w	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce2:	f000 8086 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x172>
 8009ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cea:	d87f      	bhi.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009cec:	2b70      	cmp	r3, #112	@ 0x70
 8009cee:	d01a      	beq.n	8009d26 <HAL_TIM_ConfigClockSource+0xa6>
 8009cf0:	2b70      	cmp	r3, #112	@ 0x70
 8009cf2:	d87b      	bhi.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009cf4:	2b60      	cmp	r3, #96	@ 0x60
 8009cf6:	d050      	beq.n	8009d9a <HAL_TIM_ConfigClockSource+0x11a>
 8009cf8:	2b60      	cmp	r3, #96	@ 0x60
 8009cfa:	d877      	bhi.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009cfc:	2b50      	cmp	r3, #80	@ 0x50
 8009cfe:	d03c      	beq.n	8009d7a <HAL_TIM_ConfigClockSource+0xfa>
 8009d00:	2b50      	cmp	r3, #80	@ 0x50
 8009d02:	d873      	bhi.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009d04:	2b40      	cmp	r3, #64	@ 0x40
 8009d06:	d058      	beq.n	8009dba <HAL_TIM_ConfigClockSource+0x13a>
 8009d08:	2b40      	cmp	r3, #64	@ 0x40
 8009d0a:	d86f      	bhi.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009d0c:	2b30      	cmp	r3, #48	@ 0x30
 8009d0e:	d064      	beq.n	8009dda <HAL_TIM_ConfigClockSource+0x15a>
 8009d10:	2b30      	cmp	r3, #48	@ 0x30
 8009d12:	d86b      	bhi.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d060      	beq.n	8009dda <HAL_TIM_ConfigClockSource+0x15a>
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d867      	bhi.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d05c      	beq.n	8009dda <HAL_TIM_ConfigClockSource+0x15a>
 8009d20:	2b10      	cmp	r3, #16
 8009d22:	d05a      	beq.n	8009dda <HAL_TIM_ConfigClockSource+0x15a>
 8009d24:	e062      	b.n	8009dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d36:	f000 f9b5 	bl	800a0a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	609a      	str	r2, [r3, #8]
      break;
 8009d52:	e04f      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d64:	f000 f99e 	bl	800a0a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689a      	ldr	r2, [r3, #8]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d76:	609a      	str	r2, [r3, #8]
      break;
 8009d78:	e03c      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d86:	461a      	mov	r2, r3
 8009d88:	f000 f912 	bl	8009fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2150      	movs	r1, #80	@ 0x50
 8009d92:	4618      	mov	r0, r3
 8009d94:	f000 f96b 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 8009d98:	e02c      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009da6:	461a      	mov	r2, r3
 8009da8:	f000 f931 	bl	800a00e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2160      	movs	r1, #96	@ 0x60
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f95b 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 8009db8:	e01c      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f000 f8f2 	bl	8009fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2140      	movs	r1, #64	@ 0x40
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 f94b 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 8009dd8:	e00c      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f000 f942 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 8009dea:	e003      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	73fb      	strb	r3, [r7, #15]
      break;
 8009df0:	e000      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	fffeff88 	.word	0xfffeff88

08009e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a43      	ldr	r2, [pc, #268]	@ (8009f84 <TIM_Base_SetConfig+0x120>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d013      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e82:	d00f      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a40      	ldr	r2, [pc, #256]	@ (8009f88 <TIM_Base_SetConfig+0x124>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d00b      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8009f8c <TIM_Base_SetConfig+0x128>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d007      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a3e      	ldr	r2, [pc, #248]	@ (8009f90 <TIM_Base_SetConfig+0x12c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d003      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a3d      	ldr	r2, [pc, #244]	@ (8009f94 <TIM_Base_SetConfig+0x130>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d108      	bne.n	8009eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a32      	ldr	r2, [pc, #200]	@ (8009f84 <TIM_Base_SetConfig+0x120>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d02b      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec4:	d027      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8009f88 <TIM_Base_SetConfig+0x124>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d023      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8009f8c <TIM_Base_SetConfig+0x128>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d01f      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8009f90 <TIM_Base_SetConfig+0x12c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d01b      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8009f94 <TIM_Base_SetConfig+0x130>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d017      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8009f98 <TIM_Base_SetConfig+0x134>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d013      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8009f9c <TIM_Base_SetConfig+0x138>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00f      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a29      	ldr	r2, [pc, #164]	@ (8009fa0 <TIM_Base_SetConfig+0x13c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d00b      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a28      	ldr	r2, [pc, #160]	@ (8009fa4 <TIM_Base_SetConfig+0x140>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d007      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a27      	ldr	r2, [pc, #156]	@ (8009fa8 <TIM_Base_SetConfig+0x144>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d003      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a26      	ldr	r2, [pc, #152]	@ (8009fac <TIM_Base_SetConfig+0x148>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d108      	bne.n	8009f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a0e      	ldr	r2, [pc, #56]	@ (8009f84 <TIM_Base_SetConfig+0x120>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_Base_SetConfig+0xf2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a10      	ldr	r2, [pc, #64]	@ (8009f94 <TIM_Base_SetConfig+0x130>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d103      	bne.n	8009f5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	691a      	ldr	r2, [r3, #16]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f043 0204 	orr.w	r2, r3, #4
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	601a      	str	r2, [r3, #0]
}
 8009f76:	bf00      	nop
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40000400 	.word	0x40000400
 8009f8c:	40000800 	.word	0x40000800
 8009f90:	40000c00 	.word	0x40000c00
 8009f94:	40010400 	.word	0x40010400
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	40014400 	.word	0x40014400
 8009fa0:	40014800 	.word	0x40014800
 8009fa4:	40001800 	.word	0x40001800
 8009fa8:	40001c00 	.word	0x40001c00
 8009fac:	40002000 	.word	0x40002000

08009fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	f023 0201 	bic.w	r2, r3, #1
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f023 030a 	bic.w	r3, r3, #10
 8009fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	621a      	str	r2, [r3, #32]
}
 800a002:	bf00      	nop
 800a004:	371c      	adds	r7, #28
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a00e:	b480      	push	{r7}
 800a010:	b087      	sub	sp, #28
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	f023 0210 	bic.w	r2, r3, #16
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	031b      	lsls	r3, r3, #12
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	4313      	orrs	r3, r2
 800a042:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a04a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	621a      	str	r2, [r3, #32]
}
 800a062:	bf00      	nop
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a06e:	b480      	push	{r7}
 800a070:	b085      	sub	sp, #20
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	f043 0307 	orr.w	r3, r3, #7
 800a090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	609a      	str	r2, [r3, #8]
}
 800a098:	bf00      	nop
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	021a      	lsls	r2, r3, #8
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	609a      	str	r2, [r3, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d101      	bne.n	800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e06d      	b.n	800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a30      	ldr	r2, [pc, #192]	@ (800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d004      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a2f      	ldr	r2, [pc, #188]	@ (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d108      	bne.n	800a142 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a136:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4313      	orrs	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4313      	orrs	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a20      	ldr	r2, [pc, #128]	@ (800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d022      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a16e:	d01d      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a1d      	ldr	r2, [pc, #116]	@ (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d018      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d013      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d00e      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a15      	ldr	r2, [pc, #84]	@ (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d009      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a16      	ldr	r2, [pc, #88]	@ (800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d004      	beq.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a15      	ldr	r2, [pc, #84]	@ (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d10c      	bne.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	40010000 	.word	0x40010000
 800a1e8:	40010400 	.word	0x40010400
 800a1ec:	40000400 	.word	0x40000400
 800a1f0:	40000800 	.word	0x40000800
 800a1f4:	40000c00 	.word	0x40000c00
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	40001800 	.word	0x40001800

0800a200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e040      	b.n	800a2d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7f7 fbce 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2224      	movs	r2, #36	@ 0x24
 800a268:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0201 	bic.w	r2, r2, #1
 800a278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fece 	bl	800b024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fc67 	bl	800ab5c <UART_SetConfig>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e01b      	b.n	800a2d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0201 	orr.w	r2, r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 ff4d 	bl	800b168 <UART_CheckIdleState>
 800a2ce:	4603      	mov	r3, r0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	@ 0x28
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d177      	bne.n	800a3e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <HAL_UART_Transmit+0x24>
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e070      	b.n	800a3e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2221      	movs	r2, #33	@ 0x21
 800a30c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a30e:	f7f7 fe81 	bl	8002014 <HAL_GetTick>
 800a312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	88fa      	ldrh	r2, [r7, #6]
 800a318:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	88fa      	ldrh	r2, [r7, #6]
 800a320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a32c:	d108      	bne.n	800a340 <HAL_UART_Transmit+0x68>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d104      	bne.n	800a340 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a336:	2300      	movs	r3, #0
 800a338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	e003      	b.n	800a348 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a344:	2300      	movs	r3, #0
 800a346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a348:	e02f      	b.n	800a3aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2200      	movs	r2, #0
 800a352:	2180      	movs	r1, #128	@ 0x80
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 ff5e 	bl	800b216 <UART_WaitOnFlagUntilTimeout>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d004      	beq.n	800a36a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2220      	movs	r2, #32
 800a364:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e03b      	b.n	800a3e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10b      	bne.n	800a388 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a37e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	3302      	adds	r3, #2
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	e007      	b.n	800a398 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	3301      	adds	r3, #1
 800a396:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1c9      	bne.n	800a34a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2140      	movs	r1, #64	@ 0x40
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 ff28 	bl	800b216 <UART_WaitOnFlagUntilTimeout>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e005      	b.n	800a3e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	e000      	b.n	800a3e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a3e0:	2302      	movs	r3, #2
  }
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b08b      	sub	sp, #44	@ 0x2c
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	d147      	bne.n	800a492 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <HAL_UART_Transmit_IT+0x22>
 800a408:	88fb      	ldrh	r3, [r7, #6]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e040      	b.n	800a494 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	88fa      	ldrh	r2, [r7, #6]
 800a424:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2221      	movs	r2, #33	@ 0x21
 800a43a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a444:	d107      	bne.n	800a456 <HAL_UART_Transmit_IT+0x6a>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d103      	bne.n	800a456 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a13      	ldr	r2, [pc, #76]	@ (800a4a0 <HAL_UART_Transmit_IT+0xb4>)
 800a452:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a454:	e002      	b.n	800a45c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4a12      	ldr	r2, [pc, #72]	@ (800a4a4 <HAL_UART_Transmit_IT+0xb8>)
 800a45a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	613b      	str	r3, [r7, #16]
   return(result);
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a470:	627b      	str	r3, [r7, #36]	@ 0x24
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	623b      	str	r3, [r7, #32]
 800a47c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	69f9      	ldr	r1, [r7, #28]
 800a480:	6a3a      	ldr	r2, [r7, #32]
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	61bb      	str	r3, [r7, #24]
   return(result);
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e6      	bne.n	800a45c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	e000      	b.n	800a494 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a492:	2302      	movs	r3, #2
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	372c      	adds	r7, #44	@ 0x2c
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	0800b86d 	.word	0x0800b86d
 800a4a4:	0800b7b7 	.word	0x0800b7b7

0800a4a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	@ 0x28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	d132      	bne.n	800a526 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <HAL_UART_Receive_DMA+0x24>
 800a4c6:	88fb      	ldrh	r3, [r7, #6]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e02b      	b.n	800a528 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d018      	beq.n	800a516 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	e853 3f00 	ldrex	r3, [r3]
 800a4f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	623b      	str	r3, [r7, #32]
 800a504:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a506:	69f9      	ldr	r1, [r7, #28]
 800a508:	6a3a      	ldr	r2, [r7, #32]
 800a50a:	e841 2300 	strex	r3, r2, [r1]
 800a50e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e6      	bne.n	800a4e4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	461a      	mov	r2, r3
 800a51a:	68b9      	ldr	r1, [r7, #8]
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fee7 	bl	800b2f0 <UART_Start_Receive_DMA>
 800a522:	4603      	mov	r3, r0
 800a524:	e000      	b.n	800a528 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a526:	2302      	movs	r3, #2
  }
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3728      	adds	r7, #40	@ 0x28
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b0ba      	sub	sp, #232	@ 0xe8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a55a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a55e:	4013      	ands	r3, r2
 800a560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d115      	bne.n	800a598 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a570:	f003 0320 	and.w	r3, r3, #32
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00f      	beq.n	800a598 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 82b1 	beq.w	800aaf0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
      }
      return;
 800a596:	e2ab      	b.n	800aaf0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 8117 	beq.w	800a7d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a5a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a5ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a5b2:	4b85      	ldr	r3, [pc, #532]	@ (800a7c8 <HAL_UART_IRQHandler+0x298>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 810a 	beq.w	800a7d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d011      	beq.n	800a5ec <HAL_UART_IRQHandler+0xbc>
 800a5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00b      	beq.n	800a5ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5e2:	f043 0201 	orr.w	r2, r3, #1
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d011      	beq.n	800a61c <HAL_UART_IRQHandler+0xec>
 800a5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2202      	movs	r2, #2
 800a60a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a612:	f043 0204 	orr.w	r2, r3, #4
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	d011      	beq.n	800a64c <HAL_UART_IRQHandler+0x11c>
 800a628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00b      	beq.n	800a64c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2204      	movs	r2, #4
 800a63a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a642:	f043 0202 	orr.w	r2, r3, #2
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a64c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d017      	beq.n	800a688 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d105      	bne.n	800a670 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a668:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00b      	beq.n	800a688 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2208      	movs	r2, #8
 800a676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a67e:	f043 0208 	orr.w	r2, r3, #8
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a68c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a690:	2b00      	cmp	r3, #0
 800a692:	d012      	beq.n	800a6ba <HAL_UART_IRQHandler+0x18a>
 800a694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a698:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00c      	beq.n	800a6ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6b0:	f043 0220 	orr.w	r2, r3, #32
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 8217 	beq.w	800aaf4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00d      	beq.n	800a6ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a702:	2b40      	cmp	r3, #64	@ 0x40
 800a704:	d005      	beq.n	800a712 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a70a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d04f      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 feb2 	bl	800b47c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a722:	2b40      	cmp	r3, #64	@ 0x40
 800a724:	d141      	bne.n	800a7aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a734:	e853 3f00 	ldrex	r3, [r3]
 800a738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3308      	adds	r3, #8
 800a74e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a75e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1d9      	bne.n	800a726 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a776:	2b00      	cmp	r3, #0
 800a778:	d013      	beq.n	800a7a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a77e:	4a13      	ldr	r2, [pc, #76]	@ (800a7cc <HAL_UART_IRQHandler+0x29c>)
 800a780:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a786:	4618      	mov	r0, r3
 800a788:	f7f8 fd94 	bl	80032b4 <HAL_DMA_Abort_IT>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d017      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a79c:	4610      	mov	r0, r2
 800a79e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a0:	e00f      	b.n	800a7c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f9c4 	bl	800ab30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a8:	e00b      	b.n	800a7c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f9c0 	bl	800ab30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	e007      	b.n	800a7c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f9bc 	bl	800ab30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a7c0:	e198      	b.n	800aaf4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c2:	bf00      	nop
    return;
 800a7c4:	e196      	b.n	800aaf4 <HAL_UART_IRQHandler+0x5c4>
 800a7c6:	bf00      	nop
 800a7c8:	04000120 	.word	0x04000120
 800a7cc:	0800b793 	.word	0x0800b793

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	f040 8166 	bne.w	800aaa6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7de:	f003 0310 	and.w	r3, r3, #16
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 815f 	beq.w	800aaa6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 8158 	beq.w	800aaa6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2210      	movs	r2, #16
 800a7fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a808:	2b40      	cmp	r3, #64	@ 0x40
 800a80a:	f040 80d0 	bne.w	800a9ae <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a81a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 80ab 	beq.w	800a97a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a82a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a82e:	429a      	cmp	r2, r3
 800a830:	f080 80a3 	bcs.w	800a97a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a83a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a848:	f000 8086 	beq.w	800a958 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	461a      	mov	r2, r3
 800a872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a876:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a87a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a882:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a886:	e841 2300 	strex	r3, r2, [r1]
 800a88a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a88e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1da      	bne.n	800a84c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3308      	adds	r3, #8
 800a89c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a8a0:	e853 3f00 	ldrex	r3, [r3]
 800a8a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a8a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8a8:	f023 0301 	bic.w	r3, r3, #1
 800a8ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a8ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e1      	bne.n	800a896 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e3      	bne.n	800a8d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a928:	f023 0310 	bic.w	r3, r3, #16
 800a92c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a93a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a93c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e4      	bne.n	800a918 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a952:	4618      	mov	r0, r3
 800a954:	f7f8 fc3e 	bl	80031d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	b29b      	uxth	r3, r3
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f8e6 	bl	800ab44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a978:	e0be      	b.n	800aaf8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a980:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a984:	429a      	cmp	r2, r3
 800a986:	f040 80b7 	bne.w	800aaf8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a994:	f040 80b0 	bne.w	800aaf8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2202      	movs	r2, #2
 800a99c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f8cc 	bl	800ab44 <HAL_UARTEx_RxEventCallback>
      return;
 800a9ac:	e0a4      	b.n	800aaf8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 8096 	beq.w	800aafc <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800a9d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 8091 	beq.w	800aafc <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e4      	bne.n	800a9da <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3308      	adds	r3, #8
 800aa16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	623b      	str	r3, [r7, #32]
   return(result);
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	f023 0301 	bic.w	r3, r3, #1
 800aa26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa34:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e3      	bne.n	800aa10 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f023 0310 	bic.w	r3, r3, #16
 800aa70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	69b9      	ldr	r1, [r7, #24]
 800aa84:	69fa      	ldr	r2, [r7, #28]
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e4      	bne.n	800aa5c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2202      	movs	r2, #2
 800aa96:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f850 	bl	800ab44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaa4:	e02a      	b.n	800aafc <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aaa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00e      	beq.n	800aad0 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d008      	beq.n	800aad0 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d01c      	beq.n	800ab00 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
    }
    return;
 800aace:	e017      	b.n	800ab00 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d012      	beq.n	800ab02 <HAL_UART_IRQHandler+0x5d2>
 800aadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00c      	beq.n	800ab02 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 ff1f 	bl	800b92c <UART_EndTransmit_IT>
    return;
 800aaee:	e008      	b.n	800ab02 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aaf0:	bf00      	nop
 800aaf2:	e006      	b.n	800ab02 <HAL_UART_IRQHandler+0x5d2>
    return;
 800aaf4:	bf00      	nop
 800aaf6:	e004      	b.n	800ab02 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aaf8:	bf00      	nop
 800aafa:	e002      	b.n	800ab02 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aafc:	bf00      	nop
 800aafe:	e000      	b.n	800ab02 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ab00:	bf00      	nop
  }

}
 800ab02:	37e8      	adds	r7, #232	@ 0xe8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b088      	sub	sp, #32
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	4ba6      	ldr	r3, [pc, #664]	@ (800ae20 <UART_SetConfig+0x2c4>)
 800ab88:	4013      	ands	r3, r2
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	6812      	ldr	r2, [r2, #0]
 800ab8e:	6979      	ldr	r1, [r7, #20]
 800ab90:	430b      	orrs	r3, r1
 800ab92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	430a      	orrs	r2, r1
 800abcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a94      	ldr	r2, [pc, #592]	@ (800ae24 <UART_SetConfig+0x2c8>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d120      	bne.n	800ac1a <UART_SetConfig+0xbe>
 800abd8:	4b93      	ldr	r3, [pc, #588]	@ (800ae28 <UART_SetConfig+0x2cc>)
 800abda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abde:	f003 0303 	and.w	r3, r3, #3
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d816      	bhi.n	800ac14 <UART_SetConfig+0xb8>
 800abe6:	a201      	add	r2, pc, #4	@ (adr r2, 800abec <UART_SetConfig+0x90>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800abfd 	.word	0x0800abfd
 800abf0:	0800ac09 	.word	0x0800ac09
 800abf4:	0800ac03 	.word	0x0800ac03
 800abf8:	0800ac0f 	.word	0x0800ac0f
 800abfc:	2301      	movs	r3, #1
 800abfe:	77fb      	strb	r3, [r7, #31]
 800ac00:	e150      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac02:	2302      	movs	r3, #2
 800ac04:	77fb      	strb	r3, [r7, #31]
 800ac06:	e14d      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac08:	2304      	movs	r3, #4
 800ac0a:	77fb      	strb	r3, [r7, #31]
 800ac0c:	e14a      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac0e:	2308      	movs	r3, #8
 800ac10:	77fb      	strb	r3, [r7, #31]
 800ac12:	e147      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac14:	2310      	movs	r3, #16
 800ac16:	77fb      	strb	r3, [r7, #31]
 800ac18:	e144      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a83      	ldr	r2, [pc, #524]	@ (800ae2c <UART_SetConfig+0x2d0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d132      	bne.n	800ac8a <UART_SetConfig+0x12e>
 800ac24:	4b80      	ldr	r3, [pc, #512]	@ (800ae28 <UART_SetConfig+0x2cc>)
 800ac26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2a:	f003 030c 	and.w	r3, r3, #12
 800ac2e:	2b0c      	cmp	r3, #12
 800ac30:	d828      	bhi.n	800ac84 <UART_SetConfig+0x128>
 800ac32:	a201      	add	r2, pc, #4	@ (adr r2, 800ac38 <UART_SetConfig+0xdc>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac6d 	.word	0x0800ac6d
 800ac3c:	0800ac85 	.word	0x0800ac85
 800ac40:	0800ac85 	.word	0x0800ac85
 800ac44:	0800ac85 	.word	0x0800ac85
 800ac48:	0800ac79 	.word	0x0800ac79
 800ac4c:	0800ac85 	.word	0x0800ac85
 800ac50:	0800ac85 	.word	0x0800ac85
 800ac54:	0800ac85 	.word	0x0800ac85
 800ac58:	0800ac73 	.word	0x0800ac73
 800ac5c:	0800ac85 	.word	0x0800ac85
 800ac60:	0800ac85 	.word	0x0800ac85
 800ac64:	0800ac85 	.word	0x0800ac85
 800ac68:	0800ac7f 	.word	0x0800ac7f
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	77fb      	strb	r3, [r7, #31]
 800ac70:	e118      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac72:	2302      	movs	r3, #2
 800ac74:	77fb      	strb	r3, [r7, #31]
 800ac76:	e115      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac78:	2304      	movs	r3, #4
 800ac7a:	77fb      	strb	r3, [r7, #31]
 800ac7c:	e112      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac7e:	2308      	movs	r3, #8
 800ac80:	77fb      	strb	r3, [r7, #31]
 800ac82:	e10f      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac84:	2310      	movs	r3, #16
 800ac86:	77fb      	strb	r3, [r7, #31]
 800ac88:	e10c      	b.n	800aea4 <UART_SetConfig+0x348>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a68      	ldr	r2, [pc, #416]	@ (800ae30 <UART_SetConfig+0x2d4>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d120      	bne.n	800acd6 <UART_SetConfig+0x17a>
 800ac94:	4b64      	ldr	r3, [pc, #400]	@ (800ae28 <UART_SetConfig+0x2cc>)
 800ac96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac9e:	2b30      	cmp	r3, #48	@ 0x30
 800aca0:	d013      	beq.n	800acca <UART_SetConfig+0x16e>
 800aca2:	2b30      	cmp	r3, #48	@ 0x30
 800aca4:	d814      	bhi.n	800acd0 <UART_SetConfig+0x174>
 800aca6:	2b20      	cmp	r3, #32
 800aca8:	d009      	beq.n	800acbe <UART_SetConfig+0x162>
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d810      	bhi.n	800acd0 <UART_SetConfig+0x174>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <UART_SetConfig+0x15c>
 800acb2:	2b10      	cmp	r3, #16
 800acb4:	d006      	beq.n	800acc4 <UART_SetConfig+0x168>
 800acb6:	e00b      	b.n	800acd0 <UART_SetConfig+0x174>
 800acb8:	2300      	movs	r3, #0
 800acba:	77fb      	strb	r3, [r7, #31]
 800acbc:	e0f2      	b.n	800aea4 <UART_SetConfig+0x348>
 800acbe:	2302      	movs	r3, #2
 800acc0:	77fb      	strb	r3, [r7, #31]
 800acc2:	e0ef      	b.n	800aea4 <UART_SetConfig+0x348>
 800acc4:	2304      	movs	r3, #4
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	e0ec      	b.n	800aea4 <UART_SetConfig+0x348>
 800acca:	2308      	movs	r3, #8
 800accc:	77fb      	strb	r3, [r7, #31]
 800acce:	e0e9      	b.n	800aea4 <UART_SetConfig+0x348>
 800acd0:	2310      	movs	r3, #16
 800acd2:	77fb      	strb	r3, [r7, #31]
 800acd4:	e0e6      	b.n	800aea4 <UART_SetConfig+0x348>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a56      	ldr	r2, [pc, #344]	@ (800ae34 <UART_SetConfig+0x2d8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d120      	bne.n	800ad22 <UART_SetConfig+0x1c6>
 800ace0:	4b51      	ldr	r3, [pc, #324]	@ (800ae28 <UART_SetConfig+0x2cc>)
 800ace2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800acea:	2bc0      	cmp	r3, #192	@ 0xc0
 800acec:	d013      	beq.n	800ad16 <UART_SetConfig+0x1ba>
 800acee:	2bc0      	cmp	r3, #192	@ 0xc0
 800acf0:	d814      	bhi.n	800ad1c <UART_SetConfig+0x1c0>
 800acf2:	2b80      	cmp	r3, #128	@ 0x80
 800acf4:	d009      	beq.n	800ad0a <UART_SetConfig+0x1ae>
 800acf6:	2b80      	cmp	r3, #128	@ 0x80
 800acf8:	d810      	bhi.n	800ad1c <UART_SetConfig+0x1c0>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <UART_SetConfig+0x1a8>
 800acfe:	2b40      	cmp	r3, #64	@ 0x40
 800ad00:	d006      	beq.n	800ad10 <UART_SetConfig+0x1b4>
 800ad02:	e00b      	b.n	800ad1c <UART_SetConfig+0x1c0>
 800ad04:	2300      	movs	r3, #0
 800ad06:	77fb      	strb	r3, [r7, #31]
 800ad08:	e0cc      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	77fb      	strb	r3, [r7, #31]
 800ad0e:	e0c9      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad10:	2304      	movs	r3, #4
 800ad12:	77fb      	strb	r3, [r7, #31]
 800ad14:	e0c6      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad16:	2308      	movs	r3, #8
 800ad18:	77fb      	strb	r3, [r7, #31]
 800ad1a:	e0c3      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad1c:	2310      	movs	r3, #16
 800ad1e:	77fb      	strb	r3, [r7, #31]
 800ad20:	e0c0      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a44      	ldr	r2, [pc, #272]	@ (800ae38 <UART_SetConfig+0x2dc>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d125      	bne.n	800ad78 <UART_SetConfig+0x21c>
 800ad2c:	4b3e      	ldr	r3, [pc, #248]	@ (800ae28 <UART_SetConfig+0x2cc>)
 800ad2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad3a:	d017      	beq.n	800ad6c <UART_SetConfig+0x210>
 800ad3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad40:	d817      	bhi.n	800ad72 <UART_SetConfig+0x216>
 800ad42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad46:	d00b      	beq.n	800ad60 <UART_SetConfig+0x204>
 800ad48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad4c:	d811      	bhi.n	800ad72 <UART_SetConfig+0x216>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <UART_SetConfig+0x1fe>
 800ad52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad56:	d006      	beq.n	800ad66 <UART_SetConfig+0x20a>
 800ad58:	e00b      	b.n	800ad72 <UART_SetConfig+0x216>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	77fb      	strb	r3, [r7, #31]
 800ad5e:	e0a1      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad60:	2302      	movs	r3, #2
 800ad62:	77fb      	strb	r3, [r7, #31]
 800ad64:	e09e      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad66:	2304      	movs	r3, #4
 800ad68:	77fb      	strb	r3, [r7, #31]
 800ad6a:	e09b      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad6c:	2308      	movs	r3, #8
 800ad6e:	77fb      	strb	r3, [r7, #31]
 800ad70:	e098      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad72:	2310      	movs	r3, #16
 800ad74:	77fb      	strb	r3, [r7, #31]
 800ad76:	e095      	b.n	800aea4 <UART_SetConfig+0x348>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a2f      	ldr	r2, [pc, #188]	@ (800ae3c <UART_SetConfig+0x2e0>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d125      	bne.n	800adce <UART_SetConfig+0x272>
 800ad82:	4b29      	ldr	r3, [pc, #164]	@ (800ae28 <UART_SetConfig+0x2cc>)
 800ad84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad90:	d017      	beq.n	800adc2 <UART_SetConfig+0x266>
 800ad92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad96:	d817      	bhi.n	800adc8 <UART_SetConfig+0x26c>
 800ad98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad9c:	d00b      	beq.n	800adb6 <UART_SetConfig+0x25a>
 800ad9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada2:	d811      	bhi.n	800adc8 <UART_SetConfig+0x26c>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <UART_SetConfig+0x254>
 800ada8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adac:	d006      	beq.n	800adbc <UART_SetConfig+0x260>
 800adae:	e00b      	b.n	800adc8 <UART_SetConfig+0x26c>
 800adb0:	2301      	movs	r3, #1
 800adb2:	77fb      	strb	r3, [r7, #31]
 800adb4:	e076      	b.n	800aea4 <UART_SetConfig+0x348>
 800adb6:	2302      	movs	r3, #2
 800adb8:	77fb      	strb	r3, [r7, #31]
 800adba:	e073      	b.n	800aea4 <UART_SetConfig+0x348>
 800adbc:	2304      	movs	r3, #4
 800adbe:	77fb      	strb	r3, [r7, #31]
 800adc0:	e070      	b.n	800aea4 <UART_SetConfig+0x348>
 800adc2:	2308      	movs	r3, #8
 800adc4:	77fb      	strb	r3, [r7, #31]
 800adc6:	e06d      	b.n	800aea4 <UART_SetConfig+0x348>
 800adc8:	2310      	movs	r3, #16
 800adca:	77fb      	strb	r3, [r7, #31]
 800adcc:	e06a      	b.n	800aea4 <UART_SetConfig+0x348>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a1b      	ldr	r2, [pc, #108]	@ (800ae40 <UART_SetConfig+0x2e4>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d138      	bne.n	800ae4a <UART_SetConfig+0x2ee>
 800add8:	4b13      	ldr	r3, [pc, #76]	@ (800ae28 <UART_SetConfig+0x2cc>)
 800adda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adde:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ade2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ade6:	d017      	beq.n	800ae18 <UART_SetConfig+0x2bc>
 800ade8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adec:	d82a      	bhi.n	800ae44 <UART_SetConfig+0x2e8>
 800adee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf2:	d00b      	beq.n	800ae0c <UART_SetConfig+0x2b0>
 800adf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf8:	d824      	bhi.n	800ae44 <UART_SetConfig+0x2e8>
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <UART_SetConfig+0x2aa>
 800adfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae02:	d006      	beq.n	800ae12 <UART_SetConfig+0x2b6>
 800ae04:	e01e      	b.n	800ae44 <UART_SetConfig+0x2e8>
 800ae06:	2300      	movs	r3, #0
 800ae08:	77fb      	strb	r3, [r7, #31]
 800ae0a:	e04b      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	77fb      	strb	r3, [r7, #31]
 800ae10:	e048      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae12:	2304      	movs	r3, #4
 800ae14:	77fb      	strb	r3, [r7, #31]
 800ae16:	e045      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae18:	2308      	movs	r3, #8
 800ae1a:	77fb      	strb	r3, [r7, #31]
 800ae1c:	e042      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae1e:	bf00      	nop
 800ae20:	efff69f3 	.word	0xefff69f3
 800ae24:	40011000 	.word	0x40011000
 800ae28:	40023800 	.word	0x40023800
 800ae2c:	40004400 	.word	0x40004400
 800ae30:	40004800 	.word	0x40004800
 800ae34:	40004c00 	.word	0x40004c00
 800ae38:	40005000 	.word	0x40005000
 800ae3c:	40011400 	.word	0x40011400
 800ae40:	40007800 	.word	0x40007800
 800ae44:	2310      	movs	r3, #16
 800ae46:	77fb      	strb	r3, [r7, #31]
 800ae48:	e02c      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a72      	ldr	r2, [pc, #456]	@ (800b018 <UART_SetConfig+0x4bc>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d125      	bne.n	800aea0 <UART_SetConfig+0x344>
 800ae54:	4b71      	ldr	r3, [pc, #452]	@ (800b01c <UART_SetConfig+0x4c0>)
 800ae56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ae5e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae62:	d017      	beq.n	800ae94 <UART_SetConfig+0x338>
 800ae64:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae68:	d817      	bhi.n	800ae9a <UART_SetConfig+0x33e>
 800ae6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae6e:	d00b      	beq.n	800ae88 <UART_SetConfig+0x32c>
 800ae70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae74:	d811      	bhi.n	800ae9a <UART_SetConfig+0x33e>
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <UART_SetConfig+0x326>
 800ae7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae7e:	d006      	beq.n	800ae8e <UART_SetConfig+0x332>
 800ae80:	e00b      	b.n	800ae9a <UART_SetConfig+0x33e>
 800ae82:	2300      	movs	r3, #0
 800ae84:	77fb      	strb	r3, [r7, #31]
 800ae86:	e00d      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	77fb      	strb	r3, [r7, #31]
 800ae8c:	e00a      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae8e:	2304      	movs	r3, #4
 800ae90:	77fb      	strb	r3, [r7, #31]
 800ae92:	e007      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae94:	2308      	movs	r3, #8
 800ae96:	77fb      	strb	r3, [r7, #31]
 800ae98:	e004      	b.n	800aea4 <UART_SetConfig+0x348>
 800ae9a:	2310      	movs	r3, #16
 800ae9c:	77fb      	strb	r3, [r7, #31]
 800ae9e:	e001      	b.n	800aea4 <UART_SetConfig+0x348>
 800aea0:	2310      	movs	r3, #16
 800aea2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeac:	d15b      	bne.n	800af66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aeae:	7ffb      	ldrb	r3, [r7, #31]
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d828      	bhi.n	800af06 <UART_SetConfig+0x3aa>
 800aeb4:	a201      	add	r2, pc, #4	@ (adr r2, 800aebc <UART_SetConfig+0x360>)
 800aeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeba:	bf00      	nop
 800aebc:	0800aee1 	.word	0x0800aee1
 800aec0:	0800aee9 	.word	0x0800aee9
 800aec4:	0800aef1 	.word	0x0800aef1
 800aec8:	0800af07 	.word	0x0800af07
 800aecc:	0800aef7 	.word	0x0800aef7
 800aed0:	0800af07 	.word	0x0800af07
 800aed4:	0800af07 	.word	0x0800af07
 800aed8:	0800af07 	.word	0x0800af07
 800aedc:	0800aeff 	.word	0x0800aeff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aee0:	f7fc ff7e 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 800aee4:	61b8      	str	r0, [r7, #24]
        break;
 800aee6:	e013      	b.n	800af10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee8:	f7fc ff8e 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 800aeec:	61b8      	str	r0, [r7, #24]
        break;
 800aeee:	e00f      	b.n	800af10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aef0:	4b4b      	ldr	r3, [pc, #300]	@ (800b020 <UART_SetConfig+0x4c4>)
 800aef2:	61bb      	str	r3, [r7, #24]
        break;
 800aef4:	e00c      	b.n	800af10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aef6:	f7fc fea1 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 800aefa:	61b8      	str	r0, [r7, #24]
        break;
 800aefc:	e008      	b.n	800af10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aefe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af02:	61bb      	str	r3, [r7, #24]
        break;
 800af04:	e004      	b.n	800af10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	77bb      	strb	r3, [r7, #30]
        break;
 800af0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d074      	beq.n	800b000 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	005a      	lsls	r2, r3, #1
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	085b      	lsrs	r3, r3, #1
 800af20:	441a      	add	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	fbb2 f3f3 	udiv	r3, r2, r3
 800af2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2b0f      	cmp	r3, #15
 800af30:	d916      	bls.n	800af60 <UART_SetConfig+0x404>
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af38:	d212      	bcs.n	800af60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f023 030f 	bic.w	r3, r3, #15
 800af42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	085b      	lsrs	r3, r3, #1
 800af48:	b29b      	uxth	r3, r3
 800af4a:	f003 0307 	and.w	r3, r3, #7
 800af4e:	b29a      	uxth	r2, r3
 800af50:	89fb      	ldrh	r3, [r7, #14]
 800af52:	4313      	orrs	r3, r2
 800af54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	89fa      	ldrh	r2, [r7, #14]
 800af5c:	60da      	str	r2, [r3, #12]
 800af5e:	e04f      	b.n	800b000 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	77bb      	strb	r3, [r7, #30]
 800af64:	e04c      	b.n	800b000 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af66:	7ffb      	ldrb	r3, [r7, #31]
 800af68:	2b08      	cmp	r3, #8
 800af6a:	d828      	bhi.n	800afbe <UART_SetConfig+0x462>
 800af6c:	a201      	add	r2, pc, #4	@ (adr r2, 800af74 <UART_SetConfig+0x418>)
 800af6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af72:	bf00      	nop
 800af74:	0800af99 	.word	0x0800af99
 800af78:	0800afa1 	.word	0x0800afa1
 800af7c:	0800afa9 	.word	0x0800afa9
 800af80:	0800afbf 	.word	0x0800afbf
 800af84:	0800afaf 	.word	0x0800afaf
 800af88:	0800afbf 	.word	0x0800afbf
 800af8c:	0800afbf 	.word	0x0800afbf
 800af90:	0800afbf 	.word	0x0800afbf
 800af94:	0800afb7 	.word	0x0800afb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af98:	f7fc ff22 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 800af9c:	61b8      	str	r0, [r7, #24]
        break;
 800af9e:	e013      	b.n	800afc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afa0:	f7fc ff32 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 800afa4:	61b8      	str	r0, [r7, #24]
        break;
 800afa6:	e00f      	b.n	800afc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afa8:	4b1d      	ldr	r3, [pc, #116]	@ (800b020 <UART_SetConfig+0x4c4>)
 800afaa:	61bb      	str	r3, [r7, #24]
        break;
 800afac:	e00c      	b.n	800afc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afae:	f7fc fe45 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 800afb2:	61b8      	str	r0, [r7, #24]
        break;
 800afb4:	e008      	b.n	800afc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afba:	61bb      	str	r3, [r7, #24]
        break;
 800afbc:	e004      	b.n	800afc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	77bb      	strb	r3, [r7, #30]
        break;
 800afc6:	bf00      	nop
    }

    if (pclk != 0U)
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d018      	beq.n	800b000 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	085a      	lsrs	r2, r3, #1
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	441a      	add	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	2b0f      	cmp	r3, #15
 800afe6:	d909      	bls.n	800affc <UART_SetConfig+0x4a0>
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afee:	d205      	bcs.n	800affc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60da      	str	r2, [r3, #12]
 800affa:	e001      	b.n	800b000 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b00c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3720      	adds	r7, #32
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	40007c00 	.word	0x40007c00
 800b01c:	40023800 	.word	0x40023800
 800b020:	00f42400 	.word	0x00f42400

0800b024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b030:	f003 0308 	and.w	r3, r3, #8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00a      	beq.n	800b04e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b074:	f003 0302 	and.w	r3, r3, #2
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b096:	f003 0304 	and.w	r3, r3, #4
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00a      	beq.n	800b0b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b8:	f003 0310 	and.w	r3, r3, #16
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00a      	beq.n	800b0d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0da:	f003 0320 	and.w	r3, r3, #32
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d01a      	beq.n	800b13a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b11e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b122:	d10a      	bne.n	800b13a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00a      	beq.n	800b15c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	605a      	str	r2, [r3, #4]
  }
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08c      	sub	sp, #48	@ 0x30
 800b16c:	af02      	add	r7, sp, #8
 800b16e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b178:	f7f6 ff4c 	bl	8002014 <HAL_GetTick>
 800b17c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0308 	and.w	r3, r3, #8
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d12e      	bne.n	800b1ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b18c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	2200      	movs	r2, #0
 800b196:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f83b 	bl	800b216 <UART_WaitOnFlagUntilTimeout>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d021      	beq.n	800b1ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	e853 3f00 	ldrex	r3, [r3]
 800b1b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1ba:	623b      	str	r3, [r7, #32]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	61fb      	str	r3, [r7, #28]
 800b1c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c8:	69b9      	ldr	r1, [r7, #24]
 800b1ca:	69fa      	ldr	r2, [r7, #28]
 800b1cc:	e841 2300 	strex	r3, r2, [r1]
 800b1d0:	617b      	str	r3, [r7, #20]
   return(result);
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e6      	bne.n	800b1a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e011      	b.n	800b20e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2220      	movs	r2, #32
 800b1ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2220      	movs	r2, #32
 800b1f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3728      	adds	r7, #40	@ 0x28
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b084      	sub	sp, #16
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	4613      	mov	r3, r2
 800b224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b226:	e04f      	b.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b22e:	d04b      	beq.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b230:	f7f6 fef0 	bl	8002014 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	69ba      	ldr	r2, [r7, #24]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d302      	bcc.n	800b246 <UART_WaitOnFlagUntilTimeout+0x30>
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e04e      	b.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d037      	beq.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b80      	cmp	r3, #128	@ 0x80
 800b25c:	d034      	beq.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	2b40      	cmp	r3, #64	@ 0x40
 800b262:	d031      	beq.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	f003 0308 	and.w	r3, r3, #8
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d110      	bne.n	800b294 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2208      	movs	r2, #8
 800b278:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 f8fe 	bl	800b47c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2208      	movs	r2, #8
 800b284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e029      	b.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b29e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2a2:	d111      	bne.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 f8e4 	bl	800b47c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e00f      	b.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69da      	ldr	r2, [r3, #28]
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	bf0c      	ite	eq
 800b2d8:	2301      	moveq	r3, #1
 800b2da:	2300      	movne	r3, #0
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	461a      	mov	r2, r3
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d0a0      	beq.n	800b228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b096      	sub	sp, #88	@ 0x58
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	88fa      	ldrh	r2, [r7, #6]
 800b308:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2222      	movs	r2, #34	@ 0x22
 800b318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b320:	2b00      	cmp	r3, #0
 800b322:	d028      	beq.n	800b376 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b328:	4a3e      	ldr	r2, [pc, #248]	@ (800b424 <UART_Start_Receive_DMA+0x134>)
 800b32a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b330:	4a3d      	ldr	r2, [pc, #244]	@ (800b428 <UART_Start_Receive_DMA+0x138>)
 800b332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b338:	4a3c      	ldr	r2, [pc, #240]	@ (800b42c <UART_Start_Receive_DMA+0x13c>)
 800b33a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b340:	2200      	movs	r2, #0
 800b342:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3324      	adds	r3, #36	@ 0x24
 800b34e:	4619      	mov	r1, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b354:	461a      	mov	r2, r3
 800b356:	88fb      	ldrh	r3, [r7, #6]
 800b358:	f7f7 fedc 	bl	8003114 <HAL_DMA_Start_IT>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d009      	beq.n	800b376 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2210      	movs	r2, #16
 800b366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e051      	b.n	800b41a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d018      	beq.n	800b3b0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b386:	e853 3f00 	ldrex	r3, [r3]
 800b38a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b392:	657b      	str	r3, [r7, #84]	@ 0x54
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	461a      	mov	r2, r3
 800b39a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b39c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b39e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b3a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3a4:	e841 2300 	strex	r3, r2, [r1]
 800b3a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b3aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1e6      	bne.n	800b37e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ba:	e853 3f00 	ldrex	r3, [r3]
 800b3be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	f043 0301 	orr.w	r3, r3, #1
 800b3c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b3d0:	637a      	str	r2, [r7, #52]	@ 0x34
 800b3d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b3d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3d8:	e841 2300 	strex	r3, r2, [r1]
 800b3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e5      	bne.n	800b3b0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	613b      	str	r3, [r7, #16]
   return(result);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b404:	623a      	str	r2, [r7, #32]
 800b406:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	69f9      	ldr	r1, [r7, #28]
 800b40a:	6a3a      	ldr	r2, [r7, #32]
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	61bb      	str	r3, [r7, #24]
   return(result);
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e5      	bne.n	800b3e4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3758      	adds	r7, #88	@ 0x58
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	0800b545 	.word	0x0800b545
 800b428:	0800b6a3 	.word	0x0800b6a3
 800b42c:	0800b715 	.word	0x0800b715

0800b430 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b430:	b480      	push	{r7}
 800b432:	b089      	sub	sp, #36	@ 0x24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	e853 3f00 	ldrex	r3, [r3]
 800b444:	60bb      	str	r3, [r7, #8]
   return(result);
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b44c:	61fb      	str	r3, [r7, #28]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	61bb      	str	r3, [r7, #24]
 800b458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	6979      	ldr	r1, [r7, #20]
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	613b      	str	r3, [r7, #16]
   return(result);
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e6      	bne.n	800b438 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b470:	bf00      	nop
 800b472:	3724      	adds	r7, #36	@ 0x24
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b095      	sub	sp, #84	@ 0x54
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b48c:	e853 3f00 	ldrex	r3, [r3]
 800b490:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4aa:	e841 2300 	strex	r3, r2, [r1]
 800b4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e6      	bne.n	800b484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	e853 3f00 	ldrex	r3, [r3]
 800b4c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	f023 0301 	bic.w	r3, r3, #1
 800b4cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3308      	adds	r3, #8
 800b4d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4de:	e841 2300 	strex	r3, r2, [r1]
 800b4e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e5      	bne.n	800b4b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d118      	bne.n	800b524 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	e853 3f00 	ldrex	r3, [r3]
 800b4fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f023 0310 	bic.w	r3, r3, #16
 800b506:	647b      	str	r3, [r7, #68]	@ 0x44
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	461a      	mov	r2, r3
 800b50e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b510:	61bb      	str	r3, [r7, #24]
 800b512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6979      	ldr	r1, [r7, #20]
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	613b      	str	r3, [r7, #16]
   return(result);
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e6      	bne.n	800b4f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2220      	movs	r2, #32
 800b528:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b538:	bf00      	nop
 800b53a:	3754      	adds	r7, #84	@ 0x54
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b09c      	sub	sp, #112	@ 0x70
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b550:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b55a:	d071      	beq.n	800b640 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b55c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b55e:	2200      	movs	r2, #0
 800b560:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b582:	657b      	str	r3, [r7, #84]	@ 0x54
 800b584:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b588:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e6      	bne.n	800b564 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3308      	adds	r3, #8
 800b59c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a0:	e853 3f00 	ldrex	r3, [r3]
 800b5a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a8:	f023 0301 	bic.w	r3, r3, #1
 800b5ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800b5ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b5b6:	643a      	str	r2, [r7, #64]	@ 0x40
 800b5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5be:	e841 2300 	strex	r3, r2, [r1]
 800b5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1e5      	bne.n	800b596 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	e853 3f00 	ldrex	r3, [r3]
 800b5d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b5ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e5      	bne.n	800b5ca <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b600:	2220      	movs	r2, #32
 800b602:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d118      	bne.n	800b640 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f023 0310 	bic.w	r3, r3, #16
 800b622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b62c:	61bb      	str	r3, [r7, #24]
 800b62e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6979      	ldr	r1, [r7, #20]
 800b632:	69ba      	ldr	r2, [r7, #24]
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	613b      	str	r3, [r7, #16]
   return(result);
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e6      	bne.n	800b60e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b642:	2200      	movs	r2, #0
 800b644:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d122      	bne.n	800b694 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800b64e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b650:	2200      	movs	r2, #0
 800b652:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b662:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b666:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d204      	bcs.n	800b678 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b66e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b670:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b674:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b67a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b680:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b684:	b29b      	uxth	r3, r3
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	b29b      	uxth	r3, r3
 800b68a:	4619      	mov	r1, r3
 800b68c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b68e:	f7ff fa59 	bl	800ab44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b692:	e002      	b.n	800b69a <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800b694:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b696:	f00b fba5 	bl	8016de4 <HAL_UART_RxCpltCallback>
}
 800b69a:	bf00      	nop
 800b69c:	3770      	adds	r7, #112	@ 0x70
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d123      	bne.n	800b706 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b6c4:	085b      	lsrs	r3, r3, #1
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b6dc:	897a      	ldrh	r2, [r7, #10]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d803      	bhi.n	800b6ea <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	897a      	ldrh	r2, [r7, #10]
 800b6e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f7ff fa20 	bl	800ab44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b704:	e002      	b.n	800b70c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7ff fa08 	bl	800ab1c <HAL_UART_RxHalfCpltCallback>
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b720:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b726:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b73a:	2b80      	cmp	r3, #128	@ 0x80
 800b73c:	d109      	bne.n	800b752 <UART_DMAError+0x3e>
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b21      	cmp	r3, #33	@ 0x21
 800b742:	d106      	bne.n	800b752 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	2200      	movs	r2, #0
 800b748:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b74c:	6978      	ldr	r0, [r7, #20]
 800b74e:	f7ff fe6f 	bl	800b430 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b75c:	2b40      	cmp	r3, #64	@ 0x40
 800b75e:	d109      	bne.n	800b774 <UART_DMAError+0x60>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b22      	cmp	r3, #34	@ 0x22
 800b764:	d106      	bne.n	800b774 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2200      	movs	r2, #0
 800b76a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b76e:	6978      	ldr	r0, [r7, #20]
 800b770:	f7ff fe84 	bl	800b47c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b77a:	f043 0210 	orr.w	r2, r3, #16
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b784:	6978      	ldr	r0, [r7, #20]
 800b786:	f7ff f9d3 	bl	800ab30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b78a:	bf00      	nop
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b79e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff f9c1 	bl	800ab30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ae:	bf00      	nop
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b08f      	sub	sp, #60	@ 0x3c
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7c2:	2b21      	cmp	r3, #33	@ 0x21
 800b7c4:	d14c      	bne.n	800b860 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d132      	bne.n	800b838 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7f8:	e841 2300 	strex	r3, r2, [r1]
 800b7fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e6      	bne.n	800b7d2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	e853 3f00 	ldrex	r3, [r3]
 800b810:	60bb      	str	r3, [r7, #8]
   return(result);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b818:	633b      	str	r3, [r7, #48]	@ 0x30
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b826:	6979      	ldr	r1, [r7, #20]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	e841 2300 	strex	r3, r2, [r1]
 800b82e:	613b      	str	r3, [r7, #16]
   return(result);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1e6      	bne.n	800b804 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b836:	e013      	b.n	800b860 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b83c:	781a      	ldrb	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b848:	1c5a      	adds	r2, r3, #1
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b860:	bf00      	nop
 800b862:	373c      	adds	r7, #60	@ 0x3c
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b091      	sub	sp, #68	@ 0x44
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b878:	2b21      	cmp	r3, #33	@ 0x21
 800b87a:	d151      	bne.n	800b920 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d132      	bne.n	800b8ee <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	623b      	str	r3, [r7, #32]
   return(result);
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b89c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e6      	bne.n	800b888 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	e853 3f00 	ldrex	r3, [r3]
 800b8c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d8:	61fb      	str	r3, [r7, #28]
 800b8da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	69b9      	ldr	r1, [r7, #24]
 800b8de:	69fa      	ldr	r2, [r7, #28]
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e6      	bne.n	800b8ba <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b8ec:	e018      	b.n	800b920 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b902:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b908:	1c9a      	adds	r2, r3, #2
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b914:	b29b      	uxth	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	b29a      	uxth	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b920:	bf00      	nop
 800b922:	3744      	adds	r7, #68	@ 0x44
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	e853 3f00 	ldrex	r3, [r3]
 800b940:	60bb      	str	r3, [r7, #8]
   return(result);
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b948:	61fb      	str	r3, [r7, #28]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	61bb      	str	r3, [r7, #24]
 800b954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b956:	6979      	ldr	r1, [r7, #20]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	e841 2300 	strex	r3, r2, [r1]
 800b95e:	613b      	str	r3, [r7, #16]
   return(result);
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e6      	bne.n	800b934 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2220      	movs	r2, #32
 800b96a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff f8c8 	bl	800ab08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b978:	bf00      	nop
 800b97a:	3720      	adds	r7, #32
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b986:	4b87      	ldr	r3, [pc, #540]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b988:	220a      	movs	r2, #10
 800b98a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800b98c:	4b85      	ldr	r3, [pc, #532]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b98e:	2200      	movs	r2, #0
 800b990:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b992:	4b84      	ldr	r3, [pc, #528]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b994:	2201      	movs	r2, #1
 800b996:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800b998:	4b82      	ldr	r3, [pc, #520]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b99a:	2264      	movs	r2, #100	@ 0x64
 800b99c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b99e:	4b82      	ldr	r3, [pc, #520]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800b9a0:	22ff      	movs	r2, #255	@ 0xff
 800b9a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b9a4:	4b80      	ldr	r3, [pc, #512]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800b9a6:	22ff      	movs	r2, #255	@ 0xff
 800b9a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b9aa:	4b7f      	ldr	r3, [pc, #508]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800b9ac:	22ff      	movs	r2, #255	@ 0xff
 800b9ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b9b0:	4b7d      	ldr	r3, [pc, #500]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800b9b6:	4b7d      	ldr	r3, [pc, #500]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800b9b8:	220a      	movs	r2, #10
 800b9ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b9bc:	4b7b      	ldr	r3, [pc, #492]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b9c2:	4b7a      	ldr	r3, [pc, #488]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800b9c8:	4b78      	ldr	r3, [pc, #480]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800b9ca:	2265      	movs	r2, #101	@ 0x65
 800b9cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b9ce:	f000 fd4a 	bl	800c466 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b9d2:	4b74      	ldr	r3, [pc, #464]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	061a      	lsls	r2, r3, #24
 800b9d8:	4b72      	ldr	r3, [pc, #456]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	041b      	lsls	r3, r3, #16
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	4b70      	ldr	r3, [pc, #448]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b9e2:	789b      	ldrb	r3, [r3, #2]
 800b9e4:	021b      	lsls	r3, r3, #8
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	4a6e      	ldr	r2, [pc, #440]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b9ea:	78d2      	ldrb	r2, [r2, #3]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	061a      	lsls	r2, r3, #24
 800b9f0:	4b6c      	ldr	r3, [pc, #432]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	0619      	lsls	r1, r3, #24
 800b9f6:	4b6b      	ldr	r3, [pc, #428]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800b9f8:	785b      	ldrb	r3, [r3, #1]
 800b9fa:	041b      	lsls	r3, r3, #16
 800b9fc:	4319      	orrs	r1, r3
 800b9fe:	4b69      	ldr	r3, [pc, #420]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba00:	789b      	ldrb	r3, [r3, #2]
 800ba02:	021b      	lsls	r3, r3, #8
 800ba04:	430b      	orrs	r3, r1
 800ba06:	4967      	ldr	r1, [pc, #412]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba08:	78c9      	ldrb	r1, [r1, #3]
 800ba0a:	430b      	orrs	r3, r1
 800ba0c:	021b      	lsls	r3, r3, #8
 800ba0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba12:	431a      	orrs	r2, r3
 800ba14:	4b63      	ldr	r3, [pc, #396]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	0619      	lsls	r1, r3, #24
 800ba1a:	4b62      	ldr	r3, [pc, #392]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba1c:	785b      	ldrb	r3, [r3, #1]
 800ba1e:	041b      	lsls	r3, r3, #16
 800ba20:	4319      	orrs	r1, r3
 800ba22:	4b60      	ldr	r3, [pc, #384]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba24:	789b      	ldrb	r3, [r3, #2]
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	430b      	orrs	r3, r1
 800ba2a:	495e      	ldr	r1, [pc, #376]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba2c:	78c9      	ldrb	r1, [r1, #3]
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	0a1b      	lsrs	r3, r3, #8
 800ba32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba36:	431a      	orrs	r2, r3
 800ba38:	4b5a      	ldr	r3, [pc, #360]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	0619      	lsls	r1, r3, #24
 800ba3e:	4b59      	ldr	r3, [pc, #356]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba40:	785b      	ldrb	r3, [r3, #1]
 800ba42:	041b      	lsls	r3, r3, #16
 800ba44:	4319      	orrs	r1, r3
 800ba46:	4b57      	ldr	r3, [pc, #348]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba48:	789b      	ldrb	r3, [r3, #2]
 800ba4a:	021b      	lsls	r3, r3, #8
 800ba4c:	430b      	orrs	r3, r1
 800ba4e:	4955      	ldr	r1, [pc, #340]	@ (800bba4 <MX_LWIP_Init+0x224>)
 800ba50:	78c9      	ldrb	r1, [r1, #3]
 800ba52:	430b      	orrs	r3, r1
 800ba54:	0e1b      	lsrs	r3, r3, #24
 800ba56:	4313      	orrs	r3, r2
 800ba58:	4a55      	ldr	r2, [pc, #340]	@ (800bbb0 <MX_LWIP_Init+0x230>)
 800ba5a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ba5c:	4b52      	ldr	r3, [pc, #328]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	061a      	lsls	r2, r3, #24
 800ba62:	4b51      	ldr	r3, [pc, #324]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	041b      	lsls	r3, r3, #16
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	4b4f      	ldr	r3, [pc, #316]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba6c:	789b      	ldrb	r3, [r3, #2]
 800ba6e:	021b      	lsls	r3, r3, #8
 800ba70:	4313      	orrs	r3, r2
 800ba72:	4a4d      	ldr	r2, [pc, #308]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba74:	78d2      	ldrb	r2, [r2, #3]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	061a      	lsls	r2, r3, #24
 800ba7a:	4b4b      	ldr	r3, [pc, #300]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	0619      	lsls	r1, r3, #24
 800ba80:	4b49      	ldr	r3, [pc, #292]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	041b      	lsls	r3, r3, #16
 800ba86:	4319      	orrs	r1, r3
 800ba88:	4b47      	ldr	r3, [pc, #284]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba8a:	789b      	ldrb	r3, [r3, #2]
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	430b      	orrs	r3, r1
 800ba90:	4945      	ldr	r1, [pc, #276]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800ba92:	78c9      	ldrb	r1, [r1, #3]
 800ba94:	430b      	orrs	r3, r1
 800ba96:	021b      	lsls	r3, r3, #8
 800ba98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	4b42      	ldr	r3, [pc, #264]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	0619      	lsls	r1, r3, #24
 800baa4:	4b40      	ldr	r3, [pc, #256]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	041b      	lsls	r3, r3, #16
 800baaa:	4319      	orrs	r1, r3
 800baac:	4b3e      	ldr	r3, [pc, #248]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800baae:	789b      	ldrb	r3, [r3, #2]
 800bab0:	021b      	lsls	r3, r3, #8
 800bab2:	430b      	orrs	r3, r1
 800bab4:	493c      	ldr	r1, [pc, #240]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800bab6:	78c9      	ldrb	r1, [r1, #3]
 800bab8:	430b      	orrs	r3, r1
 800baba:	0a1b      	lsrs	r3, r3, #8
 800babc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bac0:	431a      	orrs	r2, r3
 800bac2:	4b39      	ldr	r3, [pc, #228]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	0619      	lsls	r1, r3, #24
 800bac8:	4b37      	ldr	r3, [pc, #220]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800baca:	785b      	ldrb	r3, [r3, #1]
 800bacc:	041b      	lsls	r3, r3, #16
 800bace:	4319      	orrs	r1, r3
 800bad0:	4b35      	ldr	r3, [pc, #212]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800bad2:	789b      	ldrb	r3, [r3, #2]
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	430b      	orrs	r3, r1
 800bad8:	4933      	ldr	r1, [pc, #204]	@ (800bba8 <MX_LWIP_Init+0x228>)
 800bada:	78c9      	ldrb	r1, [r1, #3]
 800badc:	430b      	orrs	r3, r1
 800bade:	0e1b      	lsrs	r3, r3, #24
 800bae0:	4313      	orrs	r3, r2
 800bae2:	4a34      	ldr	r2, [pc, #208]	@ (800bbb4 <MX_LWIP_Init+0x234>)
 800bae4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bae6:	4b31      	ldr	r3, [pc, #196]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	061a      	lsls	r2, r3, #24
 800baec:	4b2f      	ldr	r3, [pc, #188]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	041b      	lsls	r3, r3, #16
 800baf2:	431a      	orrs	r2, r3
 800baf4:	4b2d      	ldr	r3, [pc, #180]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800baf6:	789b      	ldrb	r3, [r3, #2]
 800baf8:	021b      	lsls	r3, r3, #8
 800bafa:	4313      	orrs	r3, r2
 800bafc:	4a2b      	ldr	r2, [pc, #172]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bafe:	78d2      	ldrb	r2, [r2, #3]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	061a      	lsls	r2, r3, #24
 800bb04:	4b29      	ldr	r3, [pc, #164]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	0619      	lsls	r1, r3, #24
 800bb0a:	4b28      	ldr	r3, [pc, #160]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb0c:	785b      	ldrb	r3, [r3, #1]
 800bb0e:	041b      	lsls	r3, r3, #16
 800bb10:	4319      	orrs	r1, r3
 800bb12:	4b26      	ldr	r3, [pc, #152]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb14:	789b      	ldrb	r3, [r3, #2]
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	4924      	ldr	r1, [pc, #144]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb1c:	78c9      	ldrb	r1, [r1, #3]
 800bb1e:	430b      	orrs	r3, r1
 800bb20:	021b      	lsls	r3, r3, #8
 800bb22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bb26:	431a      	orrs	r2, r3
 800bb28:	4b20      	ldr	r3, [pc, #128]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	0619      	lsls	r1, r3, #24
 800bb2e:	4b1f      	ldr	r3, [pc, #124]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb30:	785b      	ldrb	r3, [r3, #1]
 800bb32:	041b      	lsls	r3, r3, #16
 800bb34:	4319      	orrs	r1, r3
 800bb36:	4b1d      	ldr	r3, [pc, #116]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb38:	789b      	ldrb	r3, [r3, #2]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	491b      	ldr	r1, [pc, #108]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb40:	78c9      	ldrb	r1, [r1, #3]
 800bb42:	430b      	orrs	r3, r1
 800bb44:	0a1b      	lsrs	r3, r3, #8
 800bb46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bb4a:	431a      	orrs	r2, r3
 800bb4c:	4b17      	ldr	r3, [pc, #92]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	0619      	lsls	r1, r3, #24
 800bb52:	4b16      	ldr	r3, [pc, #88]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb54:	785b      	ldrb	r3, [r3, #1]
 800bb56:	041b      	lsls	r3, r3, #16
 800bb58:	4319      	orrs	r1, r3
 800bb5a:	4b14      	ldr	r3, [pc, #80]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb5c:	789b      	ldrb	r3, [r3, #2]
 800bb5e:	021b      	lsls	r3, r3, #8
 800bb60:	430b      	orrs	r3, r1
 800bb62:	4912      	ldr	r1, [pc, #72]	@ (800bbac <MX_LWIP_Init+0x22c>)
 800bb64:	78c9      	ldrb	r1, [r1, #3]
 800bb66:	430b      	orrs	r3, r1
 800bb68:	0e1b      	lsrs	r3, r3, #24
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	4a12      	ldr	r2, [pc, #72]	@ (800bbb8 <MX_LWIP_Init+0x238>)
 800bb6e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bb70:	4b12      	ldr	r3, [pc, #72]	@ (800bbbc <MX_LWIP_Init+0x23c>)
 800bb72:	9302      	str	r3, [sp, #8]
 800bb74:	4b12      	ldr	r3, [pc, #72]	@ (800bbc0 <MX_LWIP_Init+0x240>)
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb8 <MX_LWIP_Init+0x238>)
 800bb7e:	4a0d      	ldr	r2, [pc, #52]	@ (800bbb4 <MX_LWIP_Init+0x234>)
 800bb80:	490b      	ldr	r1, [pc, #44]	@ (800bbb0 <MX_LWIP_Init+0x230>)
 800bb82:	4810      	ldr	r0, [pc, #64]	@ (800bbc4 <MX_LWIP_Init+0x244>)
 800bb84:	f001 f956 	bl	800ce34 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bb88:	480e      	ldr	r0, [pc, #56]	@ (800bbc4 <MX_LWIP_Init+0x244>)
 800bb8a:	f001 fb05 	bl	800d198 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bb8e:	480d      	ldr	r0, [pc, #52]	@ (800bbc4 <MX_LWIP_Init+0x244>)
 800bb90:	f001 fb12 	bl	800d1b8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bb94:	490c      	ldr	r1, [pc, #48]	@ (800bbc8 <MX_LWIP_Init+0x248>)
 800bb96:	480b      	ldr	r0, [pc, #44]	@ (800bbc4 <MX_LWIP_Init+0x244>)
 800bb98:	f001 fc10 	bl	800d3bc <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bb9c:	bf00      	nop
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20000abc 	.word	0x20000abc
 800bba8:	20000ac0 	.word	0x20000ac0
 800bbac:	20000ac4 	.word	0x20000ac4
 800bbb0:	20000ab0 	.word	0x20000ab0
 800bbb4:	20000ab4 	.word	0x20000ab4
 800bbb8:	20000ab8 	.word	0x20000ab8
 800bbbc:	08016271 	.word	0x08016271
 800bbc0:	0800bf41 	.word	0x0800bf41
 800bbc4:	20000a7c 	.word	0x20000a7c
 800bbc8:	0800bc1d 	.word	0x0800bc1d

0800bbcc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800bbd4:	f7f6 fa1e 	bl	8002014 <HAL_GetTick>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	4b08      	ldr	r3, [pc, #32]	@ (800bbfc <Ethernet_Link_Periodic_Handle+0x30>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	2b63      	cmp	r3, #99	@ 0x63
 800bbe2:	d907      	bls.n	800bbf4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800bbe4:	f7f6 fa16 	bl	8002014 <HAL_GetTick>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	4a04      	ldr	r2, [pc, #16]	@ (800bbfc <Ethernet_Link_Periodic_Handle+0x30>)
 800bbec:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fb0c 	bl	800c20c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800bbf4:	bf00      	nop
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20000a78 	.word	0x20000a78

0800bc00 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800bc04:	4804      	ldr	r0, [pc, #16]	@ (800bc18 <MX_LWIP_Process+0x18>)
 800bc06:	f000 f97b 	bl	800bf00 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800bc0a:	f007 fc55 	bl	80134b8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800bc0e:	4802      	ldr	r0, [pc, #8]	@ (800bc18 <MX_LWIP_Process+0x18>)
 800bc10:	f7ff ffdc 	bl	800bbcc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800bc14:	bf00      	nop
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20000a7c 	.word	0x20000a7c

0800bc1c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <SCB_InvalidateDCache_by_Addr>:
{
 800bc30:	b480      	push	{r7}
 800bc32:	b087      	sub	sp, #28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bc42:	2320      	movs	r3, #32
 800bc44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc46:	f3bf 8f4f 	dsb	sy
}
 800bc4a:	bf00      	nop
    while (op_size > 0) {
 800bc4c:	e00b      	b.n	800bc66 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800bc4e:	4a0d      	ldr	r2, [pc, #52]	@ (800bc84 <SCB_InvalidateDCache_by_Addr+0x54>)
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	dcf0      	bgt.n	800bc4e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800bc6c:	f3bf 8f4f 	dsb	sy
}
 800bc70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bc72:	f3bf 8f6f 	isb	sy
}
 800bc76:	bf00      	nop
}
 800bc78:	bf00      	nop
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	e000ed00 	.word	0xe000ed00

0800bc88 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bc94:	4b44      	ldr	r3, [pc, #272]	@ (800bda8 <low_level_init+0x120>)
 800bc96:	4a45      	ldr	r2, [pc, #276]	@ (800bdac <low_level_init+0x124>)
 800bc98:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bc9e:	2380      	movs	r3, #128	@ 0x80
 800bca0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bca2:	23e1      	movs	r3, #225	@ 0xe1
 800bca4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bca6:	2300      	movs	r3, #0
 800bca8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bcb2:	4a3d      	ldr	r2, [pc, #244]	@ (800bda8 <low_level_init+0x120>)
 800bcb4:	f107 0308 	add.w	r3, r7, #8
 800bcb8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bcba:	4b3b      	ldr	r3, [pc, #236]	@ (800bda8 <low_level_init+0x120>)
 800bcbc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bcc0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bcc2:	4b39      	ldr	r3, [pc, #228]	@ (800bda8 <low_level_init+0x120>)
 800bcc4:	4a3a      	ldr	r2, [pc, #232]	@ (800bdb0 <low_level_init+0x128>)
 800bcc6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bcc8:	4b37      	ldr	r3, [pc, #220]	@ (800bda8 <low_level_init+0x120>)
 800bcca:	4a3a      	ldr	r2, [pc, #232]	@ (800bdb4 <low_level_init+0x12c>)
 800bccc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bcce:	4b36      	ldr	r3, [pc, #216]	@ (800bda8 <low_level_init+0x120>)
 800bcd0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bcd4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bcd6:	4834      	ldr	r0, [pc, #208]	@ (800bda8 <low_level_init+0x120>)
 800bcd8:	f7f7 fd92 	bl	8003800 <HAL_ETH_Init>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bce0:	2238      	movs	r2, #56	@ 0x38
 800bce2:	2100      	movs	r1, #0
 800bce4:	4834      	ldr	r0, [pc, #208]	@ (800bdb8 <low_level_init+0x130>)
 800bce6:	f00b fa02 	bl	80170ee <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bcea:	4b33      	ldr	r3, [pc, #204]	@ (800bdb8 <low_level_init+0x130>)
 800bcec:	2221      	movs	r2, #33	@ 0x21
 800bcee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bcf0:	4b31      	ldr	r3, [pc, #196]	@ (800bdb8 <low_level_init+0x130>)
 800bcf2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bcf6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bcf8:	4b2f      	ldr	r3, [pc, #188]	@ (800bdb8 <low_level_init+0x130>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bcfe:	482f      	ldr	r0, [pc, #188]	@ (800bdbc <low_level_init+0x134>)
 800bd00:	f000 ff60 	bl	800cbc4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2206      	movs	r2, #6
 800bd08:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bd0c:	4b26      	ldr	r3, [pc, #152]	@ (800bda8 <low_level_init+0x120>)
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bd18:	4b23      	ldr	r3, [pc, #140]	@ (800bda8 <low_level_init+0x120>)
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	785a      	ldrb	r2, [r3, #1]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bd24:	4b20      	ldr	r3, [pc, #128]	@ (800bda8 <low_level_init+0x120>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	789a      	ldrb	r2, [r3, #2]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bd30:	4b1d      	ldr	r3, [pc, #116]	@ (800bda8 <low_level_init+0x120>)
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	78da      	ldrb	r2, [r3, #3]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bd3c:	4b1a      	ldr	r3, [pc, #104]	@ (800bda8 <low_level_init+0x120>)
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	791a      	ldrb	r2, [r3, #4]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bd48:	4b17      	ldr	r3, [pc, #92]	@ (800bda8 <low_level_init+0x120>)
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	795a      	ldrb	r2, [r3, #5]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bd5a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd62:	f043 030a 	orr.w	r3, r3, #10
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bd6e:	4914      	ldr	r1, [pc, #80]	@ (800bdc0 <low_level_init+0x138>)
 800bd70:	4814      	ldr	r0, [pc, #80]	@ (800bdc4 <low_level_init+0x13c>)
 800bd72:	f7f5 fff8 	bl	8001d66 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bd76:	4813      	ldr	r0, [pc, #76]	@ (800bdc4 <low_level_init+0x13c>)
 800bd78:	f7f6 f827 	bl	8001dca <LAN8742_Init>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d006      	beq.n	800bd90 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f001 faea 	bl	800d35c <netif_set_link_down>
    netif_set_down(netif);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f001 fa81 	bl	800d290 <netif_set_down>
 800bd8e:	e008      	b.n	800bda2 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d103      	bne.n	800bd9e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa38 	bl	800c20c <ethernet_link_check_state>
 800bd9c:	e001      	b.n	800bda2 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800bd9e:	f7f5 f8c1 	bl	8000f24 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	20005454 	.word	0x20005454
 800bdac:	40028000 	.word	0x40028000
 800bdb0:	20000128 	.word	0x20000128
 800bdb4:	20000088 	.word	0x20000088
 800bdb8:	20005504 	.word	0x20005504
 800bdbc:	0801a86c 	.word	0x0801a86c
 800bdc0:	2000000c 	.word	0x2000000c
 800bdc4:	2000553c 	.word	0x2000553c

0800bdc8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b092      	sub	sp, #72	@ 0x48
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bde0:	f107 030c 	add.w	r3, r7, #12
 800bde4:	2230      	movs	r2, #48	@ 0x30
 800bde6:	2100      	movs	r1, #0
 800bde8:	4618      	mov	r0, r3
 800bdea:	f00b f980 	bl	80170ee <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bdee:	f107 030c 	add.w	r3, r7, #12
 800bdf2:	2230      	movs	r2, #48	@ 0x30
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f00b f979 	bl	80170ee <memset>

  for(q = p; q != NULL; q = q->next)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	643b      	str	r3, [r7, #64]	@ 0x40
 800be00:	e045      	b.n	800be8e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800be02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be04:	2b03      	cmp	r3, #3
 800be06:	d902      	bls.n	800be0e <low_level_output+0x46>
      return ERR_IF;
 800be08:	f06f 030b 	mvn.w	r3, #11
 800be0c:	e055      	b.n	800beba <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800be0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be10:	6859      	ldr	r1, [r3, #4]
 800be12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be14:	4613      	mov	r3, r2
 800be16:	005b      	lsls	r3, r3, #1
 800be18:	4413      	add	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	3348      	adds	r3, #72	@ 0x48
 800be1e:	443b      	add	r3, r7
 800be20:	3b3c      	subs	r3, #60	@ 0x3c
 800be22:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800be24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be26:	895b      	ldrh	r3, [r3, #10]
 800be28:	4619      	mov	r1, r3
 800be2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be2c:	4613      	mov	r3, r2
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	3348      	adds	r3, #72	@ 0x48
 800be36:	443b      	add	r3, r7
 800be38:	3b38      	subs	r3, #56	@ 0x38
 800be3a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800be3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d011      	beq.n	800be66 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800be42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be44:	1e5a      	subs	r2, r3, #1
 800be46:	f107 000c 	add.w	r0, r7, #12
 800be4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be4c:	460b      	mov	r3, r1
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	440b      	add	r3, r1
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	18c1      	adds	r1, r0, r3
 800be56:	4613      	mov	r3, r2
 800be58:	005b      	lsls	r3, r3, #1
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	3348      	adds	r3, #72	@ 0x48
 800be60:	443b      	add	r3, r7
 800be62:	3b34      	subs	r3, #52	@ 0x34
 800be64:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800be66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d109      	bne.n	800be82 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800be6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be70:	4613      	mov	r3, r2
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	3348      	adds	r3, #72	@ 0x48
 800be7a:	443b      	add	r3, r7
 800be7c:	3b34      	subs	r3, #52	@ 0x34
 800be7e:	2200      	movs	r2, #0
 800be80:	601a      	str	r2, [r3, #0]
    }

    i++;
 800be82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be84:	3301      	adds	r3, #1
 800be86:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800be88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800be8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1b6      	bne.n	800be02 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	891b      	ldrh	r3, [r3, #8]
 800be98:	461a      	mov	r2, r3
 800be9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bec4 <low_level_output+0xfc>)
 800be9c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800be9e:	4a09      	ldr	r2, [pc, #36]	@ (800bec4 <low_level_output+0xfc>)
 800bea0:	f107 030c 	add.w	r3, r7, #12
 800bea4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bea6:	4a07      	ldr	r2, [pc, #28]	@ (800bec4 <low_level_output+0xfc>)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800beac:	2214      	movs	r2, #20
 800beae:	4905      	ldr	r1, [pc, #20]	@ (800bec4 <low_level_output+0xfc>)
 800beb0:	4805      	ldr	r0, [pc, #20]	@ (800bec8 <low_level_output+0x100>)
 800beb2:	f7f7 fe2f 	bl	8003b14 <HAL_ETH_Transmit>

  return errval;
 800beb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3748      	adds	r7, #72	@ 0x48
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20005504 	.word	0x20005504
 800bec8:	20005454 	.word	0x20005454

0800becc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bed8:	4b07      	ldr	r3, [pc, #28]	@ (800bef8 <low_level_input+0x2c>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bee0:	f107 030c 	add.w	r3, r7, #12
 800bee4:	4619      	mov	r1, r3
 800bee6:	4805      	ldr	r0, [pc, #20]	@ (800befc <low_level_input+0x30>)
 800bee8:	f7f7 fea8 	bl	8003c3c <HAL_ETH_ReadData>
  }

  return p;
 800beec:	68fb      	ldr	r3, [r7, #12]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20005450 	.word	0x20005450
 800befc:	20005454 	.word	0x20005454

0800bf00 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff ffdd 	bl	800becc <low_level_input>
 800bf12:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	4798      	blx	r3
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d002      	beq.n	800bf30 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f001 fdc6 	bl	800dabc <pbuf_free>
      }
    }
  } while(p!=NULL);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1ea      	bne.n	800bf0c <ethernetif_input+0xc>
}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d106      	bne.n	800bf5c <ethernetif_init+0x1c>
 800bf4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf88 <ethernetif_init+0x48>)
 800bf50:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800bf54:	490d      	ldr	r1, [pc, #52]	@ (800bf8c <ethernetif_init+0x4c>)
 800bf56:	480e      	ldr	r0, [pc, #56]	@ (800bf90 <ethernetif_init+0x50>)
 800bf58:	f00b f864 	bl	8017024 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2273      	movs	r2, #115	@ 0x73
 800bf60:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2274      	movs	r2, #116	@ 0x74
 800bf68:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a09      	ldr	r2, [pc, #36]	@ (800bf94 <ethernetif_init+0x54>)
 800bf70:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a08      	ldr	r2, [pc, #32]	@ (800bf98 <ethernetif_init+0x58>)
 800bf76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff fe85 	bl	800bc88 <low_level_init>

  return ERR_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	08017e50 	.word	0x08017e50
 800bf8c:	08017e6c 	.word	0x08017e6c
 800bf90:	08017e7c 	.word	0x08017e7c
 800bf94:	08014729 	.word	0x08014729
 800bf98:	0800bdc9 	.word	0x0800bdc9

0800bf9c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	4807      	ldr	r0, [pc, #28]	@ (800bfc8 <pbuf_free_custom+0x2c>)
 800bfac:	f000 feec 	bl	800cd88 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bfb0:	4b06      	ldr	r3, [pc, #24]	@ (800bfcc <pbuf_free_custom+0x30>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d102      	bne.n	800bfbe <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bfb8:	4b04      	ldr	r3, [pc, #16]	@ (800bfcc <pbuf_free_custom+0x30>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	701a      	strb	r2, [r3, #0]
  }
}
 800bfbe:	bf00      	nop
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	0801a86c 	.word	0x0801a86c
 800bfcc:	20005450 	.word	0x20005450

0800bfd0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bfd4:	f7f6 f81e 	bl	8002014 <HAL_GetTick>
 800bfd8:	4603      	mov	r3, r0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08e      	sub	sp, #56	@ 0x38
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]
 800bff0:	605a      	str	r2, [r3, #4]
 800bff2:	609a      	str	r2, [r3, #8]
 800bff4:	60da      	str	r2, [r3, #12]
 800bff6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a56      	ldr	r2, [pc, #344]	@ (800c158 <HAL_ETH_MspInit+0x178>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	f040 80a6 	bne.w	800c150 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c004:	4b55      	ldr	r3, [pc, #340]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c008:	4a54      	ldr	r2, [pc, #336]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c00a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c00e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c010:	4b52      	ldr	r3, [pc, #328]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c018:	623b      	str	r3, [r7, #32]
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	4b4f      	ldr	r3, [pc, #316]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c020:	4a4e      	ldr	r2, [pc, #312]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c022:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c026:	6313      	str	r3, [r2, #48]	@ 0x30
 800c028:	4b4c      	ldr	r3, [pc, #304]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c02c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c030:	61fb      	str	r3, [r7, #28]
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	4b49      	ldr	r3, [pc, #292]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c038:	4a48      	ldr	r2, [pc, #288]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c03a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c03e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c040:	4b46      	ldr	r3, [pc, #280]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c048:	61bb      	str	r3, [r7, #24]
 800c04a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c04c:	4b43      	ldr	r3, [pc, #268]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c050:	4a42      	ldr	r2, [pc, #264]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c052:	f043 0304 	orr.w	r3, r3, #4
 800c056:	6313      	str	r3, [r2, #48]	@ 0x30
 800c058:	4b40      	ldr	r3, [pc, #256]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c064:	4b3d      	ldr	r3, [pc, #244]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c068:	4a3c      	ldr	r2, [pc, #240]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c06a:	f043 0301 	orr.w	r3, r3, #1
 800c06e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c070:	4b3a      	ldr	r3, [pc, #232]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	613b      	str	r3, [r7, #16]
 800c07a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c07c:	4b37      	ldr	r3, [pc, #220]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c080:	4a36      	ldr	r2, [pc, #216]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c082:	f043 0302 	orr.w	r3, r3, #2
 800c086:	6313      	str	r3, [r2, #48]	@ 0x30
 800c088:	4b34      	ldr	r3, [pc, #208]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c08a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c08c:	f003 0302 	and.w	r3, r3, #2
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c094:	4b31      	ldr	r3, [pc, #196]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c098:	4a30      	ldr	r2, [pc, #192]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c09e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0a0:	4b2e      	ldr	r3, [pc, #184]	@ (800c15c <HAL_ETH_MspInit+0x17c>)
 800c0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c0ac:	2332      	movs	r3, #50	@ 0x32
 800c0ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c0bc:	230b      	movs	r3, #11
 800c0be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c0c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4826      	ldr	r0, [pc, #152]	@ (800c160 <HAL_ETH_MspInit+0x180>)
 800c0c8:	f7f8 fde8 	bl	8004c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c0cc:	2386      	movs	r3, #134	@ 0x86
 800c0ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c0dc:	230b      	movs	r3, #11
 800c0de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	481f      	ldr	r0, [pc, #124]	@ (800c164 <HAL_ETH_MspInit+0x184>)
 800c0e8:	f7f8 fdd8 	bl	8004c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c0ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c0fe:	230b      	movs	r3, #11
 800c100:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c106:	4619      	mov	r1, r3
 800c108:	4817      	ldr	r0, [pc, #92]	@ (800c168 <HAL_ETH_MspInit+0x188>)
 800c10a:	f7f8 fdc7 	bl	8004c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c10e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c114:	2302      	movs	r3, #2
 800c116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c11c:	2303      	movs	r3, #3
 800c11e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c120:	230b      	movs	r3, #11
 800c122:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c128:	4619      	mov	r1, r3
 800c12a:	4810      	ldr	r0, [pc, #64]	@ (800c16c <HAL_ETH_MspInit+0x18c>)
 800c12c:	f7f8 fdb6 	bl	8004c9c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800c130:	2200      	movs	r2, #0
 800c132:	2100      	movs	r1, #0
 800c134:	203d      	movs	r0, #61	@ 0x3d
 800c136:	f7f6 fcfe 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c13a:	203d      	movs	r0, #61	@ 0x3d
 800c13c:	f7f6 fd17 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800c140:	2200      	movs	r2, #0
 800c142:	2100      	movs	r1, #0
 800c144:	203e      	movs	r0, #62	@ 0x3e
 800c146:	f7f6 fcf6 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c14a:	203e      	movs	r0, #62	@ 0x3e
 800c14c:	f7f6 fd0f 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c150:	bf00      	nop
 800c152:	3738      	adds	r7, #56	@ 0x38
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	40028000 	.word	0x40028000
 800c15c:	40023800 	.word	0x40023800
 800c160:	40020800 	.word	0x40020800
 800c164:	40020000 	.word	0x40020000
 800c168:	40020400 	.word	0x40020400
 800c16c:	40021800 	.word	0x40021800

0800c170 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c174:	4802      	ldr	r0, [pc, #8]	@ (800c180 <ETH_PHY_IO_Init+0x10>)
 800c176:	f7f8 f92f 	bl	80043d8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20005454 	.word	0x20005454

0800c184 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c184:	b480      	push	{r7}
 800c186:	af00      	add	r7, sp, #0
  return 0;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	68f9      	ldr	r1, [r7, #12]
 800c1a6:	4807      	ldr	r0, [pc, #28]	@ (800c1c4 <ETH_PHY_IO_ReadReg+0x30>)
 800c1a8:	f7f7 ff70 	bl	800408c <HAL_ETH_ReadPHYRegister>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d002      	beq.n	800c1b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c1b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1b6:	e000      	b.n	800c1ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20005454 	.word	0x20005454

0800c1c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	68f9      	ldr	r1, [r7, #12]
 800c1da:	4807      	ldr	r0, [pc, #28]	@ (800c1f8 <ETH_PHY_IO_WriteReg+0x30>)
 800c1dc:	f7f7 ffa1 	bl	8004122 <HAL_ETH_WritePHYRegister>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1ea:	e000      	b.n	800c1ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20005454 	.word	0x20005454

0800c1fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c200:	f7f5 ff08 	bl	8002014 <HAL_GetTick>
 800c204:	4603      	mov	r3, r0
}
 800c206:	4618      	mov	r0, r3
 800c208:	bd80      	pop	{r7, pc}
	...

0800c20c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b0a0      	sub	sp, #128	@ 0x80
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c214:	f107 030c 	add.w	r3, r7, #12
 800c218:	2264      	movs	r2, #100	@ 0x64
 800c21a:	2100      	movs	r1, #0
 800c21c:	4618      	mov	r0, r3
 800c21e:	f00a ff66 	bl	80170ee <memset>
  int32_t PHYLinkState = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c226:	2300      	movs	r3, #0
 800c228:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c22a:	2300      	movs	r3, #0
 800c22c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c22e:	2300      	movs	r3, #0
 800c230:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c232:	483a      	ldr	r0, [pc, #232]	@ (800c31c <ethernet_link_check_state+0x110>)
 800c234:	f7f5 fe16 	bl	8001e64 <LAN8742_GetLinkState>
 800c238:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c240:	089b      	lsrs	r3, r3, #2
 800c242:	f003 0301 	and.w	r3, r3, #1
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00c      	beq.n	800c266 <ethernet_link_check_state+0x5a>
 800c24c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c24e:	2b01      	cmp	r3, #1
 800c250:	dc09      	bgt.n	800c266 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 800c252:	4833      	ldr	r0, [pc, #204]	@ (800c320 <ethernet_link_check_state+0x114>)
 800c254:	f7f7 fbde 	bl	8003a14 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f001 f819 	bl	800d290 <netif_set_down>
    netif_set_link_down(netif);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 f87c 	bl	800d35c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c264:	e055      	b.n	800c312 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c26c:	f003 0304 	and.w	r3, r3, #4
 800c270:	2b00      	cmp	r3, #0
 800c272:	d14e      	bne.n	800c312 <ethernet_link_check_state+0x106>
 800c274:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c276:	2b01      	cmp	r3, #1
 800c278:	dd4b      	ble.n	800c312 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c27a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c27c:	3b02      	subs	r3, #2
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d82a      	bhi.n	800c2d8 <ethernet_link_check_state+0xcc>
 800c282:	a201      	add	r2, pc, #4	@ (adr r2, 800c288 <ethernet_link_check_state+0x7c>)
 800c284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c288:	0800c299 	.word	0x0800c299
 800c28c:	0800c2ab 	.word	0x0800c2ab
 800c290:	0800c2bb 	.word	0x0800c2bb
 800c294:	0800c2cb 	.word	0x0800c2cb
      duplex = ETH_FULLDUPLEX_MODE;
 800c298:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c29c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c29e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2a8:	e017      	b.n	800c2da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c2ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2b8:	e00f      	b.n	800c2da <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c2ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2be:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2c8:	e007      	b.n	800c2da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2d6:	e000      	b.n	800c2da <ethernet_link_check_state+0xce>
      break;
 800c2d8:	bf00      	nop
    if(linkchanged)
 800c2da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d018      	beq.n	800c312 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c2e0:	f107 030c 	add.w	r3, r7, #12
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	480e      	ldr	r0, [pc, #56]	@ (800c320 <ethernet_link_check_state+0x114>)
 800c2e8:	f7f7 ff64 	bl	80041b4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c2ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2ee:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800c2f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2f2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c2f4:	f107 030c 	add.w	r3, r7, #12
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4809      	ldr	r0, [pc, #36]	@ (800c320 <ethernet_link_check_state+0x114>)
 800c2fc:	f7f8 f851 	bl	80043a2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c300:	4807      	ldr	r0, [pc, #28]	@ (800c320 <ethernet_link_check_state+0x114>)
 800c302:	f7f7 fb17 	bl	8003934 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 ff56 	bl	800d1b8 <netif_set_up>
      netif_set_link_up(netif);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fff1 	bl	800d2f4 <netif_set_link_up>
}
 800c312:	bf00      	nop
 800c314:	3780      	adds	r7, #128	@ 0x80
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	2000553c 	.word	0x2000553c
 800c320:	20005454 	.word	0x20005454

0800c324 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af02      	add	r7, sp, #8
 800c32a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c32c:	4812      	ldr	r0, [pc, #72]	@ (800c378 <HAL_ETH_RxAllocateCallback+0x54>)
 800c32e:	f000 fcbd 	bl	800ccac <memp_malloc_pool>
 800c332:	60f8      	str	r0, [r7, #12]
  if (p)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d014      	beq.n	800c364 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f103 0220 	add.w	r2, r3, #32
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4a0d      	ldr	r2, [pc, #52]	@ (800c37c <HAL_ETH_RxAllocateCallback+0x58>)
 800c348:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c352:	9201      	str	r2, [sp, #4]
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2241      	movs	r2, #65	@ 0x41
 800c35a:	2100      	movs	r1, #0
 800c35c:	2000      	movs	r0, #0
 800c35e:	f001 f9f3 	bl	800d748 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c362:	e005      	b.n	800c370 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c364:	4b06      	ldr	r3, [pc, #24]	@ (800c380 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c366:	2201      	movs	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]
}
 800c370:	bf00      	nop
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	0801a86c 	.word	0x0801a86c
 800c37c:	0800bf9d 	.word	0x0800bf9d
 800c380:	20005450 	.word	0x20005450

0800c384 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c39a:	2300      	movs	r3, #0
 800c39c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3b20      	subs	r3, #32
 800c3a2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	887a      	ldrh	r2, [r7, #2]
 800c3b4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d103      	bne.n	800c3c6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	e003      	b.n	800c3ce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	69fa      	ldr	r2, [r7, #28]
 800c3d2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	61fb      	str	r3, [r7, #28]
 800c3da:	e009      	b.n	800c3f0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	891a      	ldrh	r2, [r3, #8]
 800c3e0:	887b      	ldrh	r3, [r7, #2]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	61fb      	str	r3, [r7, #28]
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1f2      	bne.n	800c3dc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c3f6:	887b      	ldrh	r3, [r7, #2]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff fc18 	bl	800bc30 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c400:	bf00      	nop
 800c402:	3720      	adds	r7, #32
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	4603      	mov	r3, r0
 800c410:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c416:	021b      	lsls	r3, r3, #8
 800c418:	b21a      	sxth	r2, r3
 800c41a:	88fb      	ldrh	r3, [r7, #6]
 800c41c:	0a1b      	lsrs	r3, r3, #8
 800c41e:	b29b      	uxth	r3, r3
 800c420:	b21b      	sxth	r3, r3
 800c422:	4313      	orrs	r3, r2
 800c424:	b21b      	sxth	r3, r3
 800c426:	b29b      	uxth	r3, r3
}
 800c428:	4618      	mov	r0, r3
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	061a      	lsls	r2, r3, #24
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c448:	431a      	orrs	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	0a1b      	lsrs	r3, r3, #8
 800c44e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	0e1b      	lsrs	r3, r3, #24
 800c458:	4313      	orrs	r3, r2
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b082      	sub	sp, #8
 800c46a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c470:	f000 f8d4 	bl	800c61c <mem_init>
  memp_init();
 800c474:	f000 fbd6 	bl	800cc24 <memp_init>
  pbuf_init();
  netif_init();
 800c478:	f000 fcd4 	bl	800ce24 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c47c:	f007 f85e 	bl	801353c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c480:	f001 fdba 	bl	800dff8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c484:	f006 ffd0 	bl	8013428 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c49a:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <ptr_to_mem+0x20>)
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	88fb      	ldrh	r3, [r7, #6]
 800c4a0:	4413      	add	r3, r2
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	370c      	adds	r7, #12
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	20005574 	.word	0x20005574

0800c4b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c4bc:	4b05      	ldr	r3, [pc, #20]	@ (800c4d4 <mem_to_ptr+0x20>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	b29b      	uxth	r3, r3
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20005574 	.word	0x20005574

0800c4d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c4d8:	b590      	push	{r4, r7, lr}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c4e0:	4b45      	ldr	r3, [pc, #276]	@ (800c5f8 <plug_holes+0x120>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d206      	bcs.n	800c4f8 <plug_holes+0x20>
 800c4ea:	4b44      	ldr	r3, [pc, #272]	@ (800c5fc <plug_holes+0x124>)
 800c4ec:	f240 12df 	movw	r2, #479	@ 0x1df
 800c4f0:	4943      	ldr	r1, [pc, #268]	@ (800c600 <plug_holes+0x128>)
 800c4f2:	4844      	ldr	r0, [pc, #272]	@ (800c604 <plug_holes+0x12c>)
 800c4f4:	f00a fd96 	bl	8017024 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c4f8:	4b43      	ldr	r3, [pc, #268]	@ (800c608 <plug_holes+0x130>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d306      	bcc.n	800c510 <plug_holes+0x38>
 800c502:	4b3e      	ldr	r3, [pc, #248]	@ (800c5fc <plug_holes+0x124>)
 800c504:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c508:	4940      	ldr	r1, [pc, #256]	@ (800c60c <plug_holes+0x134>)
 800c50a:	483e      	ldr	r0, [pc, #248]	@ (800c604 <plug_holes+0x12c>)
 800c50c:	f00a fd8a 	bl	8017024 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	791b      	ldrb	r3, [r3, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d006      	beq.n	800c526 <plug_holes+0x4e>
 800c518:	4b38      	ldr	r3, [pc, #224]	@ (800c5fc <plug_holes+0x124>)
 800c51a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c51e:	493c      	ldr	r1, [pc, #240]	@ (800c610 <plug_holes+0x138>)
 800c520:	4838      	ldr	r0, [pc, #224]	@ (800c604 <plug_holes+0x12c>)
 800c522:	f00a fd7f 	bl	8017024 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c52e:	d906      	bls.n	800c53e <plug_holes+0x66>
 800c530:	4b32      	ldr	r3, [pc, #200]	@ (800c5fc <plug_holes+0x124>)
 800c532:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c536:	4937      	ldr	r1, [pc, #220]	@ (800c614 <plug_holes+0x13c>)
 800c538:	4832      	ldr	r0, [pc, #200]	@ (800c604 <plug_holes+0x12c>)
 800c53a:	f00a fd73 	bl	8017024 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	4618      	mov	r0, r3
 800c544:	f7ff ffa4 	bl	800c490 <ptr_to_mem>
 800c548:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d024      	beq.n	800c59c <plug_holes+0xc4>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	791b      	ldrb	r3, [r3, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d120      	bne.n	800c59c <plug_holes+0xc4>
 800c55a:	4b2b      	ldr	r3, [pc, #172]	@ (800c608 <plug_holes+0x130>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	429a      	cmp	r2, r3
 800c562:	d01b      	beq.n	800c59c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c564:	4b2c      	ldr	r3, [pc, #176]	@ (800c618 <plug_holes+0x140>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d102      	bne.n	800c574 <plug_holes+0x9c>
      lfree = mem;
 800c56e:	4a2a      	ldr	r2, [pc, #168]	@ (800c618 <plug_holes+0x140>)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	881a      	ldrh	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c584:	d00a      	beq.n	800c59c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff ff80 	bl	800c490 <ptr_to_mem>
 800c590:	4604      	mov	r4, r0
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff ff8e 	bl	800c4b4 <mem_to_ptr>
 800c598:	4603      	mov	r3, r0
 800c59a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	885b      	ldrh	r3, [r3, #2]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff ff75 	bl	800c490 <ptr_to_mem>
 800c5a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d01f      	beq.n	800c5f0 <plug_holes+0x118>
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	791b      	ldrb	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d11b      	bne.n	800c5f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c5b8:	4b17      	ldr	r3, [pc, #92]	@ (800c618 <plug_holes+0x140>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d102      	bne.n	800c5c8 <plug_holes+0xf0>
      lfree = pmem;
 800c5c2:	4a15      	ldr	r2, [pc, #84]	@ (800c618 <plug_holes+0x140>)
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	881a      	ldrh	r2, [r3, #0]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c5d8:	d00a      	beq.n	800c5f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff ff56 	bl	800c490 <ptr_to_mem>
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	68b8      	ldr	r0, [r7, #8]
 800c5e8:	f7ff ff64 	bl	800c4b4 <mem_to_ptr>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c5f0:	bf00      	nop
 800c5f2:	3714      	adds	r7, #20
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd90      	pop	{r4, r7, pc}
 800c5f8:	20005574 	.word	0x20005574
 800c5fc:	08017ea4 	.word	0x08017ea4
 800c600:	08017ed4 	.word	0x08017ed4
 800c604:	08017eec 	.word	0x08017eec
 800c608:	20005578 	.word	0x20005578
 800c60c:	08017f14 	.word	0x08017f14
 800c610:	08017f30 	.word	0x08017f30
 800c614:	08017f4c 	.word	0x08017f4c
 800c618:	2000557c 	.word	0x2000557c

0800c61c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c622:	4b16      	ldr	r3, [pc, #88]	@ (800c67c <mem_init+0x60>)
 800c624:	4a16      	ldr	r2, [pc, #88]	@ (800c680 <mem_init+0x64>)
 800c626:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c628:	4b14      	ldr	r3, [pc, #80]	@ (800c67c <mem_init+0x60>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c634:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c642:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800c646:	f7ff ff23 	bl	800c490 <ptr_to_mem>
 800c64a:	4603      	mov	r3, r0
 800c64c:	4a0d      	ldr	r2, [pc, #52]	@ (800c684 <mem_init+0x68>)
 800c64e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c650:	4b0c      	ldr	r3, [pc, #48]	@ (800c684 <mem_init+0x68>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2201      	movs	r2, #1
 800c656:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c658:	4b0a      	ldr	r3, [pc, #40]	@ (800c684 <mem_init+0x68>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c660:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c662:	4b08      	ldr	r3, [pc, #32]	@ (800c684 <mem_init+0x68>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c66a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c66c:	4b03      	ldr	r3, [pc, #12]	@ (800c67c <mem_init+0x60>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a05      	ldr	r2, [pc, #20]	@ (800c688 <mem_init+0x6c>)
 800c672:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c674:	bf00      	nop
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20005574 	.word	0x20005574
 800c680:	20048000 	.word	0x20048000
 800c684:	20005578 	.word	0x20005578
 800c688:	2000557c 	.word	0x2000557c

0800c68c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b086      	sub	sp, #24
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff ff0d 	bl	800c4b4 <mem_to_ptr>
 800c69a:	4603      	mov	r3, r0
 800c69c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff fef4 	bl	800c490 <ptr_to_mem>
 800c6a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	885b      	ldrh	r3, [r3, #2]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff feee 	bl	800c490 <ptr_to_mem>
 800c6b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c6be:	d818      	bhi.n	800c6f2 <mem_link_valid+0x66>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	885b      	ldrh	r3, [r3, #2]
 800c6c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c6c8:	d813      	bhi.n	800c6f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c6ce:	8afa      	ldrh	r2, [r7, #22]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d004      	beq.n	800c6de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	8afa      	ldrh	r2, [r7, #22]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d109      	bne.n	800c6f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c6de:	4b08      	ldr	r3, [pc, #32]	@ (800c700 <mem_link_valid+0x74>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d006      	beq.n	800c6f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	885b      	ldrh	r3, [r3, #2]
 800c6ec:	8afa      	ldrh	r2, [r7, #22]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d001      	beq.n	800c6f6 <mem_link_valid+0x6a>
    return 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e000      	b.n	800c6f8 <mem_link_valid+0x6c>
  }
  return 1;
 800c6f6:	2301      	movs	r3, #1
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	20005578 	.word	0x20005578

0800c704 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d04c      	beq.n	800c7ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f003 0303 	and.w	r3, r3, #3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d007      	beq.n	800c72c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c71c:	4b25      	ldr	r3, [pc, #148]	@ (800c7b4 <mem_free+0xb0>)
 800c71e:	f240 2273 	movw	r2, #627	@ 0x273
 800c722:	4925      	ldr	r1, [pc, #148]	@ (800c7b8 <mem_free+0xb4>)
 800c724:	4825      	ldr	r0, [pc, #148]	@ (800c7bc <mem_free+0xb8>)
 800c726:	f00a fc7d 	bl	8017024 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c72a:	e040      	b.n	800c7ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3b08      	subs	r3, #8
 800c730:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c732:	4b23      	ldr	r3, [pc, #140]	@ (800c7c0 <mem_free+0xbc>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d306      	bcc.n	800c74a <mem_free+0x46>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f103 020c 	add.w	r2, r3, #12
 800c742:	4b20      	ldr	r3, [pc, #128]	@ (800c7c4 <mem_free+0xc0>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	429a      	cmp	r2, r3
 800c748:	d907      	bls.n	800c75a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c74a:	4b1a      	ldr	r3, [pc, #104]	@ (800c7b4 <mem_free+0xb0>)
 800c74c:	f240 227f 	movw	r2, #639	@ 0x27f
 800c750:	491d      	ldr	r1, [pc, #116]	@ (800c7c8 <mem_free+0xc4>)
 800c752:	481a      	ldr	r0, [pc, #104]	@ (800c7bc <mem_free+0xb8>)
 800c754:	f00a fc66 	bl	8017024 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c758:	e029      	b.n	800c7ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	791b      	ldrb	r3, [r3, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d107      	bne.n	800c772 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c762:	4b14      	ldr	r3, [pc, #80]	@ (800c7b4 <mem_free+0xb0>)
 800c764:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c768:	4918      	ldr	r1, [pc, #96]	@ (800c7cc <mem_free+0xc8>)
 800c76a:	4814      	ldr	r0, [pc, #80]	@ (800c7bc <mem_free+0xb8>)
 800c76c:	f00a fc5a 	bl	8017024 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c770:	e01d      	b.n	800c7ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff ff8a 	bl	800c68c <mem_link_valid>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d107      	bne.n	800c78e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c77e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b4 <mem_free+0xb0>)
 800c780:	f240 2295 	movw	r2, #661	@ 0x295
 800c784:	4912      	ldr	r1, [pc, #72]	@ (800c7d0 <mem_free+0xcc>)
 800c786:	480d      	ldr	r0, [pc, #52]	@ (800c7bc <mem_free+0xb8>)
 800c788:	f00a fc4c 	bl	8017024 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c78c:	e00f      	b.n	800c7ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c794:	4b0f      	ldr	r3, [pc, #60]	@ (800c7d4 <mem_free+0xd0>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d202      	bcs.n	800c7a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c79e:	4a0d      	ldr	r2, [pc, #52]	@ (800c7d4 <mem_free+0xd0>)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fe97 	bl	800c4d8 <plug_holes>
 800c7aa:	e000      	b.n	800c7ae <mem_free+0xaa>
    return;
 800c7ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	08017ea4 	.word	0x08017ea4
 800c7b8:	08017f78 	.word	0x08017f78
 800c7bc:	08017eec 	.word	0x08017eec
 800c7c0:	20005574 	.word	0x20005574
 800c7c4:	20005578 	.word	0x20005578
 800c7c8:	08017f9c 	.word	0x08017f9c
 800c7cc:	08017fb8 	.word	0x08017fb8
 800c7d0:	08017fe0 	.word	0x08017fe0
 800c7d4:	2000557c 	.word	0x2000557c

0800c7d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b088      	sub	sp, #32
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c7e4:	887b      	ldrh	r3, [r7, #2]
 800c7e6:	3303      	adds	r3, #3
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f023 0303 	bic.w	r3, r3, #3
 800c7ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c7f0:	8bfb      	ldrh	r3, [r7, #30]
 800c7f2:	2b0b      	cmp	r3, #11
 800c7f4:	d801      	bhi.n	800c7fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c7fa:	8bfb      	ldrh	r3, [r7, #30]
 800c7fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c800:	d803      	bhi.n	800c80a <mem_trim+0x32>
 800c802:	8bfa      	ldrh	r2, [r7, #30]
 800c804:	887b      	ldrh	r3, [r7, #2]
 800c806:	429a      	cmp	r2, r3
 800c808:	d201      	bcs.n	800c80e <mem_trim+0x36>
    return NULL;
 800c80a:	2300      	movs	r3, #0
 800c80c:	e0cc      	b.n	800c9a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c80e:	4b68      	ldr	r3, [pc, #416]	@ (800c9b0 <mem_trim+0x1d8>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	429a      	cmp	r2, r3
 800c816:	d304      	bcc.n	800c822 <mem_trim+0x4a>
 800c818:	4b66      	ldr	r3, [pc, #408]	@ (800c9b4 <mem_trim+0x1dc>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d306      	bcc.n	800c830 <mem_trim+0x58>
 800c822:	4b65      	ldr	r3, [pc, #404]	@ (800c9b8 <mem_trim+0x1e0>)
 800c824:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c828:	4964      	ldr	r1, [pc, #400]	@ (800c9bc <mem_trim+0x1e4>)
 800c82a:	4865      	ldr	r0, [pc, #404]	@ (800c9c0 <mem_trim+0x1e8>)
 800c82c:	f00a fbfa 	bl	8017024 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c830:	4b5f      	ldr	r3, [pc, #380]	@ (800c9b0 <mem_trim+0x1d8>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	429a      	cmp	r2, r3
 800c838:	d304      	bcc.n	800c844 <mem_trim+0x6c>
 800c83a:	4b5e      	ldr	r3, [pc, #376]	@ (800c9b4 <mem_trim+0x1dc>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d301      	bcc.n	800c848 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	e0af      	b.n	800c9a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	3b08      	subs	r3, #8
 800c84c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c84e:	69b8      	ldr	r0, [r7, #24]
 800c850:	f7ff fe30 	bl	800c4b4 <mem_to_ptr>
 800c854:	4603      	mov	r3, r0
 800c856:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	881a      	ldrh	r2, [r3, #0]
 800c85c:	8afb      	ldrh	r3, [r7, #22]
 800c85e:	1ad3      	subs	r3, r2, r3
 800c860:	b29b      	uxth	r3, r3
 800c862:	3b08      	subs	r3, #8
 800c864:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c866:	8bfa      	ldrh	r2, [r7, #30]
 800c868:	8abb      	ldrh	r3, [r7, #20]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d906      	bls.n	800c87c <mem_trim+0xa4>
 800c86e:	4b52      	ldr	r3, [pc, #328]	@ (800c9b8 <mem_trim+0x1e0>)
 800c870:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c874:	4953      	ldr	r1, [pc, #332]	@ (800c9c4 <mem_trim+0x1ec>)
 800c876:	4852      	ldr	r0, [pc, #328]	@ (800c9c0 <mem_trim+0x1e8>)
 800c878:	f00a fbd4 	bl	8017024 <iprintf>
  if (newsize > size) {
 800c87c:	8bfa      	ldrh	r2, [r7, #30]
 800c87e:	8abb      	ldrh	r3, [r7, #20]
 800c880:	429a      	cmp	r2, r3
 800c882:	d901      	bls.n	800c888 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c884:	2300      	movs	r3, #0
 800c886:	e08f      	b.n	800c9a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c888:	8bfa      	ldrh	r2, [r7, #30]
 800c88a:	8abb      	ldrh	r3, [r7, #20]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d101      	bne.n	800c894 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	e089      	b.n	800c9a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff fdf9 	bl	800c490 <ptr_to_mem>
 800c89e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	791b      	ldrb	r3, [r3, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d13f      	bne.n	800c928 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c8b0:	d106      	bne.n	800c8c0 <mem_trim+0xe8>
 800c8b2:	4b41      	ldr	r3, [pc, #260]	@ (800c9b8 <mem_trim+0x1e0>)
 800c8b4:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c8b8:	4943      	ldr	r1, [pc, #268]	@ (800c9c8 <mem_trim+0x1f0>)
 800c8ba:	4841      	ldr	r0, [pc, #260]	@ (800c9c0 <mem_trim+0x1e8>)
 800c8bc:	f00a fbb2 	bl	8017024 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c8c6:	8afa      	ldrh	r2, [r7, #22]
 800c8c8:	8bfb      	ldrh	r3, [r7, #30]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c8d2:	4b3e      	ldr	r3, [pc, #248]	@ (800c9cc <mem_trim+0x1f4>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d106      	bne.n	800c8ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c8dc:	89fb      	ldrh	r3, [r7, #14]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7ff fdd6 	bl	800c490 <ptr_to_mem>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	4a39      	ldr	r2, [pc, #228]	@ (800c9cc <mem_trim+0x1f4>)
 800c8e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c8ea:	89fb      	ldrh	r3, [r7, #14]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff fdcf 	bl	800c490 <ptr_to_mem>
 800c8f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	89ba      	ldrh	r2, [r7, #12]
 800c8fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	8afa      	ldrh	r2, [r7, #22]
 800c904:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	89fa      	ldrh	r2, [r7, #14]
 800c90a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c914:	d047      	beq.n	800c9a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fdb8 	bl	800c490 <ptr_to_mem>
 800c920:	4602      	mov	r2, r0
 800c922:	89fb      	ldrh	r3, [r7, #14]
 800c924:	8053      	strh	r3, [r2, #2]
 800c926:	e03e      	b.n	800c9a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c928:	8bfb      	ldrh	r3, [r7, #30]
 800c92a:	f103 0214 	add.w	r2, r3, #20
 800c92e:	8abb      	ldrh	r3, [r7, #20]
 800c930:	429a      	cmp	r2, r3
 800c932:	d838      	bhi.n	800c9a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c934:	8afa      	ldrh	r2, [r7, #22]
 800c936:	8bfb      	ldrh	r3, [r7, #30]
 800c938:	4413      	add	r3, r2
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	3308      	adds	r3, #8
 800c93e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c948:	d106      	bne.n	800c958 <mem_trim+0x180>
 800c94a:	4b1b      	ldr	r3, [pc, #108]	@ (800c9b8 <mem_trim+0x1e0>)
 800c94c:	f240 3216 	movw	r2, #790	@ 0x316
 800c950:	491d      	ldr	r1, [pc, #116]	@ (800c9c8 <mem_trim+0x1f0>)
 800c952:	481b      	ldr	r0, [pc, #108]	@ (800c9c0 <mem_trim+0x1e8>)
 800c954:	f00a fb66 	bl	8017024 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c958:	89fb      	ldrh	r3, [r7, #14]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7ff fd98 	bl	800c490 <ptr_to_mem>
 800c960:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c962:	4b1a      	ldr	r3, [pc, #104]	@ (800c9cc <mem_trim+0x1f4>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d202      	bcs.n	800c972 <mem_trim+0x19a>
      lfree = mem2;
 800c96c:	4a17      	ldr	r2, [pc, #92]	@ (800c9cc <mem_trim+0x1f4>)
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2200      	movs	r2, #0
 800c976:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	881a      	ldrh	r2, [r3, #0]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	8afa      	ldrh	r2, [r7, #22]
 800c984:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	89fa      	ldrh	r2, [r7, #14]
 800c98a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c994:	d007      	beq.n	800c9a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff fd78 	bl	800c490 <ptr_to_mem>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	89fb      	ldrh	r3, [r7, #14]
 800c9a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c9a6:	687b      	ldr	r3, [r7, #4]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3720      	adds	r7, #32
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20005574 	.word	0x20005574
 800c9b4:	20005578 	.word	0x20005578
 800c9b8:	08017ea4 	.word	0x08017ea4
 800c9bc:	08018014 	.word	0x08018014
 800c9c0:	08017eec 	.word	0x08017eec
 800c9c4:	0801802c 	.word	0x0801802c
 800c9c8:	0801804c 	.word	0x0801804c
 800c9cc:	2000557c 	.word	0x2000557c

0800c9d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c9da:	88fb      	ldrh	r3, [r7, #6]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <mem_malloc+0x14>
    return NULL;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e0d9      	b.n	800cb98 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c9e4:	88fb      	ldrh	r3, [r7, #6]
 800c9e6:	3303      	adds	r3, #3
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	f023 0303 	bic.w	r3, r3, #3
 800c9ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c9f0:	8bbb      	ldrh	r3, [r7, #28]
 800c9f2:	2b0b      	cmp	r3, #11
 800c9f4:	d801      	bhi.n	800c9fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c9f6:	230c      	movs	r3, #12
 800c9f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c9fa:	8bbb      	ldrh	r3, [r7, #28]
 800c9fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ca00:	d803      	bhi.n	800ca0a <mem_malloc+0x3a>
 800ca02:	8bba      	ldrh	r2, [r7, #28]
 800ca04:	88fb      	ldrh	r3, [r7, #6]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d201      	bcs.n	800ca0e <mem_malloc+0x3e>
    return NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e0c4      	b.n	800cb98 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca0e:	4b64      	ldr	r3, [pc, #400]	@ (800cba0 <mem_malloc+0x1d0>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fd4e 	bl	800c4b4 <mem_to_ptr>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	83fb      	strh	r3, [r7, #30]
 800ca1c:	e0b4      	b.n	800cb88 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ca1e:	8bfb      	ldrh	r3, [r7, #30]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff fd35 	bl	800c490 <ptr_to_mem>
 800ca26:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	791b      	ldrb	r3, [r3, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f040 80a4 	bne.w	800cb7a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	8bfb      	ldrh	r3, [r7, #30]
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	f1a3 0208 	sub.w	r2, r3, #8
 800ca40:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ca42:	429a      	cmp	r2, r3
 800ca44:	f0c0 8099 	bcc.w	800cb7a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	8bfb      	ldrh	r3, [r7, #30]
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	f1a3 0208 	sub.w	r2, r3, #8
 800ca56:	8bbb      	ldrh	r3, [r7, #28]
 800ca58:	3314      	adds	r3, #20
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d333      	bcc.n	800cac6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ca5e:	8bfa      	ldrh	r2, [r7, #30]
 800ca60:	8bbb      	ldrh	r3, [r7, #28]
 800ca62:	4413      	add	r3, r2
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	3308      	adds	r3, #8
 800ca68:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ca6a:	8a7b      	ldrh	r3, [r7, #18]
 800ca6c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ca70:	d106      	bne.n	800ca80 <mem_malloc+0xb0>
 800ca72:	4b4c      	ldr	r3, [pc, #304]	@ (800cba4 <mem_malloc+0x1d4>)
 800ca74:	f240 3287 	movw	r2, #903	@ 0x387
 800ca78:	494b      	ldr	r1, [pc, #300]	@ (800cba8 <mem_malloc+0x1d8>)
 800ca7a:	484c      	ldr	r0, [pc, #304]	@ (800cbac <mem_malloc+0x1dc>)
 800ca7c:	f00a fad2 	bl	8017024 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ca80:	8a7b      	ldrh	r3, [r7, #18]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff fd04 	bl	800c490 <ptr_to_mem>
 800ca88:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	881a      	ldrh	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	8bfa      	ldrh	r2, [r7, #30]
 800ca9c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	8a7a      	ldrh	r2, [r7, #18]
 800caa2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2201      	movs	r2, #1
 800caa8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cab2:	d00b      	beq.n	800cacc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff fce9 	bl	800c490 <ptr_to_mem>
 800cabe:	4602      	mov	r2, r0
 800cac0:	8a7b      	ldrh	r3, [r7, #18]
 800cac2:	8053      	strh	r3, [r2, #2]
 800cac4:	e002      	b.n	800cacc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2201      	movs	r2, #1
 800caca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cacc:	4b34      	ldr	r3, [pc, #208]	@ (800cba0 <mem_malloc+0x1d0>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	697a      	ldr	r2, [r7, #20]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d127      	bne.n	800cb26 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800cad6:	4b32      	ldr	r3, [pc, #200]	@ (800cba0 <mem_malloc+0x1d0>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cadc:	e005      	b.n	800caea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff fcd4 	bl	800c490 <ptr_to_mem>
 800cae8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	791b      	ldrb	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d004      	beq.n	800cafc <mem_malloc+0x12c>
 800caf2:	4b2f      	ldr	r3, [pc, #188]	@ (800cbb0 <mem_malloc+0x1e0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d1f0      	bne.n	800cade <mem_malloc+0x10e>
          }
          lfree = cur;
 800cafc:	4a28      	ldr	r2, [pc, #160]	@ (800cba0 <mem_malloc+0x1d0>)
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cb02:	4b27      	ldr	r3, [pc, #156]	@ (800cba0 <mem_malloc+0x1d0>)
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	4b2a      	ldr	r3, [pc, #168]	@ (800cbb0 <mem_malloc+0x1e0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d00b      	beq.n	800cb26 <mem_malloc+0x156>
 800cb0e:	4b24      	ldr	r3, [pc, #144]	@ (800cba0 <mem_malloc+0x1d0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	791b      	ldrb	r3, [r3, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d006      	beq.n	800cb26 <mem_malloc+0x156>
 800cb18:	4b22      	ldr	r3, [pc, #136]	@ (800cba4 <mem_malloc+0x1d4>)
 800cb1a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800cb1e:	4925      	ldr	r1, [pc, #148]	@ (800cbb4 <mem_malloc+0x1e4>)
 800cb20:	4822      	ldr	r0, [pc, #136]	@ (800cbac <mem_malloc+0x1dc>)
 800cb22:	f00a fa7f 	bl	8017024 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cb26:	8bba      	ldrh	r2, [r7, #28]
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	4a20      	ldr	r2, [pc, #128]	@ (800cbb0 <mem_malloc+0x1e0>)
 800cb30:	6812      	ldr	r2, [r2, #0]
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d906      	bls.n	800cb44 <mem_malloc+0x174>
 800cb36:	4b1b      	ldr	r3, [pc, #108]	@ (800cba4 <mem_malloc+0x1d4>)
 800cb38:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800cb3c:	491e      	ldr	r1, [pc, #120]	@ (800cbb8 <mem_malloc+0x1e8>)
 800cb3e:	481b      	ldr	r0, [pc, #108]	@ (800cbac <mem_malloc+0x1dc>)
 800cb40:	f00a fa70 	bl	8017024 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	f003 0303 	and.w	r3, r3, #3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d006      	beq.n	800cb5c <mem_malloc+0x18c>
 800cb4e:	4b15      	ldr	r3, [pc, #84]	@ (800cba4 <mem_malloc+0x1d4>)
 800cb50:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800cb54:	4919      	ldr	r1, [pc, #100]	@ (800cbbc <mem_malloc+0x1ec>)
 800cb56:	4815      	ldr	r0, [pc, #84]	@ (800cbac <mem_malloc+0x1dc>)
 800cb58:	f00a fa64 	bl	8017024 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	f003 0303 	and.w	r3, r3, #3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d006      	beq.n	800cb74 <mem_malloc+0x1a4>
 800cb66:	4b0f      	ldr	r3, [pc, #60]	@ (800cba4 <mem_malloc+0x1d4>)
 800cb68:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800cb6c:	4914      	ldr	r1, [pc, #80]	@ (800cbc0 <mem_malloc+0x1f0>)
 800cb6e:	480f      	ldr	r0, [pc, #60]	@ (800cbac <mem_malloc+0x1dc>)
 800cb70:	f00a fa58 	bl	8017024 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	3308      	adds	r3, #8
 800cb78:	e00e      	b.n	800cb98 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cb7a:	8bfb      	ldrh	r3, [r7, #30]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7ff fc87 	bl	800c490 <ptr_to_mem>
 800cb82:	4603      	mov	r3, r0
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cb88:	8bfa      	ldrh	r2, [r7, #30]
 800cb8a:	8bbb      	ldrh	r3, [r7, #28]
 800cb8c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800cb90:	429a      	cmp	r2, r3
 800cb92:	f4ff af44 	bcc.w	800ca1e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3720      	adds	r7, #32
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	2000557c 	.word	0x2000557c
 800cba4:	08017ea4 	.word	0x08017ea4
 800cba8:	0801804c 	.word	0x0801804c
 800cbac:	08017eec 	.word	0x08017eec
 800cbb0:	20005578 	.word	0x20005578
 800cbb4:	08018060 	.word	0x08018060
 800cbb8:	0801807c 	.word	0x0801807c
 800cbbc:	080180ac 	.word	0x080180ac
 800cbc0:	080180dc 	.word	0x080180dc

0800cbc4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	3303      	adds	r3, #3
 800cbda:	f023 0303 	bic.w	r3, r3, #3
 800cbde:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e011      	b.n	800cc0a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	4413      	add	r3, r2
 800cc02:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3301      	adds	r3, #1
 800cc08:	60fb      	str	r3, [r7, #12]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	885b      	ldrh	r3, [r3, #2]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4293      	cmp	r3, r2
 800cc14:	dbe7      	blt.n	800cbe6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cc16:	bf00      	nop
 800cc18:	bf00      	nop
 800cc1a:	3714      	adds	r7, #20
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	80fb      	strh	r3, [r7, #6]
 800cc2e:	e009      	b.n	800cc44 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cc30:	88fb      	ldrh	r3, [r7, #6]
 800cc32:	4a08      	ldr	r2, [pc, #32]	@ (800cc54 <memp_init+0x30>)
 800cc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7ff ffc3 	bl	800cbc4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc3e:	88fb      	ldrh	r3, [r7, #6]
 800cc40:	3301      	adds	r3, #1
 800cc42:	80fb      	strh	r3, [r7, #6]
 800cc44:	88fb      	ldrh	r3, [r7, #6]
 800cc46:	2b08      	cmp	r3, #8
 800cc48:	d9f2      	bls.n	800cc30 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cc4a:	bf00      	nop
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	0801a8e4 	.word	0x0801a8e4

0800cc58 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d012      	beq.n	800cc94 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	6812      	ldr	r2, [r2, #0]
 800cc76:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f003 0303 	and.w	r3, r3, #3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d006      	beq.n	800cc90 <do_memp_malloc_pool+0x38>
 800cc82:	4b07      	ldr	r3, [pc, #28]	@ (800cca0 <do_memp_malloc_pool+0x48>)
 800cc84:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800cc88:	4906      	ldr	r1, [pc, #24]	@ (800cca4 <do_memp_malloc_pool+0x4c>)
 800cc8a:	4807      	ldr	r0, [pc, #28]	@ (800cca8 <do_memp_malloc_pool+0x50>)
 800cc8c:	f00a f9ca 	bl	8017024 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	e000      	b.n	800cc96 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	08018100 	.word	0x08018100
 800cca4:	08018130 	.word	0x08018130
 800cca8:	08018154 	.word	0x08018154

0800ccac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d106      	bne.n	800ccc8 <memp_malloc_pool+0x1c>
 800ccba:	4b0a      	ldr	r3, [pc, #40]	@ (800cce4 <memp_malloc_pool+0x38>)
 800ccbc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ccc0:	4909      	ldr	r1, [pc, #36]	@ (800cce8 <memp_malloc_pool+0x3c>)
 800ccc2:	480a      	ldr	r0, [pc, #40]	@ (800ccec <memp_malloc_pool+0x40>)
 800ccc4:	f00a f9ae 	bl	8017024 <iprintf>
  if (desc == NULL) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <memp_malloc_pool+0x26>
    return NULL;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e003      	b.n	800ccda <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff ffc0 	bl	800cc58 <do_memp_malloc_pool>
 800ccd8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	08018100 	.word	0x08018100
 800cce8:	0801817c 	.word	0x0801817c
 800ccec:	08018154 	.word	0x08018154

0800ccf0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ccfa:	79fb      	ldrb	r3, [r7, #7]
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	d908      	bls.n	800cd12 <memp_malloc+0x22>
 800cd00:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <memp_malloc+0x3c>)
 800cd02:	f240 1257 	movw	r2, #343	@ 0x157
 800cd06:	490a      	ldr	r1, [pc, #40]	@ (800cd30 <memp_malloc+0x40>)
 800cd08:	480a      	ldr	r0, [pc, #40]	@ (800cd34 <memp_malloc+0x44>)
 800cd0a:	f00a f98b 	bl	8017024 <iprintf>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e008      	b.n	800cd24 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	4a08      	ldr	r2, [pc, #32]	@ (800cd38 <memp_malloc+0x48>)
 800cd16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff ff9c 	bl	800cc58 <do_memp_malloc_pool>
 800cd20:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cd22:	68fb      	ldr	r3, [r7, #12]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	08018100 	.word	0x08018100
 800cd30:	08018190 	.word	0x08018190
 800cd34:	08018154 	.word	0x08018154
 800cd38:	0801a8e4 	.word	0x0801a8e4

0800cd3c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	f003 0303 	and.w	r3, r3, #3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d006      	beq.n	800cd5e <do_memp_free_pool+0x22>
 800cd50:	4b0a      	ldr	r3, [pc, #40]	@ (800cd7c <do_memp_free_pool+0x40>)
 800cd52:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800cd56:	490a      	ldr	r1, [pc, #40]	@ (800cd80 <do_memp_free_pool+0x44>)
 800cd58:	480a      	ldr	r0, [pc, #40]	@ (800cd84 <do_memp_free_pool+0x48>)
 800cd5a:	f00a f963 	bl	8017024 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800cd74:	bf00      	nop
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	08018100 	.word	0x08018100
 800cd80:	080181b0 	.word	0x080181b0
 800cd84:	08018154 	.word	0x08018154

0800cd88 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d106      	bne.n	800cda6 <memp_free_pool+0x1e>
 800cd98:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc4 <memp_free_pool+0x3c>)
 800cd9a:	f240 1295 	movw	r2, #405	@ 0x195
 800cd9e:	490a      	ldr	r1, [pc, #40]	@ (800cdc8 <memp_free_pool+0x40>)
 800cda0:	480a      	ldr	r0, [pc, #40]	@ (800cdcc <memp_free_pool+0x44>)
 800cda2:	f00a f93f 	bl	8017024 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d007      	beq.n	800cdbc <memp_free_pool+0x34>
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d004      	beq.n	800cdbc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff ffc1 	bl	800cd3c <do_memp_free_pool>
 800cdba:	e000      	b.n	800cdbe <memp_free_pool+0x36>
    return;
 800cdbc:	bf00      	nop
}
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	08018100 	.word	0x08018100
 800cdc8:	0801817c 	.word	0x0801817c
 800cdcc:	08018154 	.word	0x08018154

0800cdd0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	6039      	str	r1, [r7, #0]
 800cdda:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cddc:	79fb      	ldrb	r3, [r7, #7]
 800cdde:	2b08      	cmp	r3, #8
 800cde0:	d907      	bls.n	800cdf2 <memp_free+0x22>
 800cde2:	4b0c      	ldr	r3, [pc, #48]	@ (800ce14 <memp_free+0x44>)
 800cde4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800cde8:	490b      	ldr	r1, [pc, #44]	@ (800ce18 <memp_free+0x48>)
 800cdea:	480c      	ldr	r0, [pc, #48]	@ (800ce1c <memp_free+0x4c>)
 800cdec:	f00a f91a 	bl	8017024 <iprintf>
 800cdf0:	e00c      	b.n	800ce0c <memp_free+0x3c>

  if (mem == NULL) {
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d008      	beq.n	800ce0a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	4a09      	ldr	r2, [pc, #36]	@ (800ce20 <memp_free+0x50>)
 800cdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff ff9a 	bl	800cd3c <do_memp_free_pool>
 800ce08:	e000      	b.n	800ce0c <memp_free+0x3c>
    return;
 800ce0a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	08018100 	.word	0x08018100
 800ce18:	080181d0 	.word	0x080181d0
 800ce1c:	08018154 	.word	0x08018154
 800ce20:	0801a8e4 	.word	0x0801a8e4

0800ce24 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ce24:	b480      	push	{r7}
 800ce26:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ce28:	bf00      	nop
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
	...

0800ce34 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d108      	bne.n	800ce5a <netif_add+0x26>
 800ce48:	4b57      	ldr	r3, [pc, #348]	@ (800cfa8 <netif_add+0x174>)
 800ce4a:	f240 1227 	movw	r2, #295	@ 0x127
 800ce4e:	4957      	ldr	r1, [pc, #348]	@ (800cfac <netif_add+0x178>)
 800ce50:	4857      	ldr	r0, [pc, #348]	@ (800cfb0 <netif_add+0x17c>)
 800ce52:	f00a f8e7 	bl	8017024 <iprintf>
 800ce56:	2300      	movs	r3, #0
 800ce58:	e0a2      	b.n	800cfa0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d108      	bne.n	800ce72 <netif_add+0x3e>
 800ce60:	4b51      	ldr	r3, [pc, #324]	@ (800cfa8 <netif_add+0x174>)
 800ce62:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ce66:	4953      	ldr	r1, [pc, #332]	@ (800cfb4 <netif_add+0x180>)
 800ce68:	4851      	ldr	r0, [pc, #324]	@ (800cfb0 <netif_add+0x17c>)
 800ce6a:	f00a f8db 	bl	8017024 <iprintf>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e096      	b.n	800cfa0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d101      	bne.n	800ce7c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ce78:	4b4f      	ldr	r3, [pc, #316]	@ (800cfb8 <netif_add+0x184>)
 800ce7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d101      	bne.n	800ce86 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ce82:	4b4d      	ldr	r3, [pc, #308]	@ (800cfb8 <netif_add+0x184>)
 800ce84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ce8c:	4b4a      	ldr	r3, [pc, #296]	@ (800cfb8 <netif_add+0x184>)
 800ce8e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	4a45      	ldr	r2, [pc, #276]	@ (800cfbc <netif_add+0x188>)
 800cea6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6a3a      	ldr	r2, [r7, #32]
 800cec0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cec2:	4b3f      	ldr	r3, [pc, #252]	@ (800cfc0 <netif_add+0x18c>)
 800cec4:	781a      	ldrb	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ced0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	68b9      	ldr	r1, [r7, #8]
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f913 	bl	800d104 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	4798      	blx	r3
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <netif_add+0xba>
    return NULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	e058      	b.n	800cfa0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cef4:	2bff      	cmp	r3, #255	@ 0xff
 800cef6:	d103      	bne.n	800cf00 <netif_add+0xcc>
        netif->num = 0;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf04:	4b2f      	ldr	r3, [pc, #188]	@ (800cfc4 <netif_add+0x190>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	617b      	str	r3, [r7, #20]
 800cf0a:	e02b      	b.n	800cf64 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d106      	bne.n	800cf22 <netif_add+0xee>
 800cf14:	4b24      	ldr	r3, [pc, #144]	@ (800cfa8 <netif_add+0x174>)
 800cf16:	f240 128b 	movw	r2, #395	@ 0x18b
 800cf1a:	492b      	ldr	r1, [pc, #172]	@ (800cfc8 <netif_add+0x194>)
 800cf1c:	4824      	ldr	r0, [pc, #144]	@ (800cfb0 <netif_add+0x17c>)
 800cf1e:	f00a f881 	bl	8017024 <iprintf>
        num_netifs++;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	3301      	adds	r3, #1
 800cf26:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	2bff      	cmp	r3, #255	@ 0xff
 800cf2c:	dd06      	ble.n	800cf3c <netif_add+0x108>
 800cf2e:	4b1e      	ldr	r3, [pc, #120]	@ (800cfa8 <netif_add+0x174>)
 800cf30:	f240 128d 	movw	r2, #397	@ 0x18d
 800cf34:	4925      	ldr	r1, [pc, #148]	@ (800cfcc <netif_add+0x198>)
 800cf36:	481e      	ldr	r0, [pc, #120]	@ (800cfb0 <netif_add+0x17c>)
 800cf38:	f00a f874 	bl	8017024 <iprintf>
        if (netif2->num == netif->num) {
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d108      	bne.n	800cf5e <netif_add+0x12a>
          netif->num++;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf52:	3301      	adds	r3, #1
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800cf5c:	e005      	b.n	800cf6a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	617b      	str	r3, [r7, #20]
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d1d0      	bne.n	800cf0c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1be      	bne.n	800ceee <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf76:	2bfe      	cmp	r3, #254	@ 0xfe
 800cf78:	d103      	bne.n	800cf82 <netif_add+0x14e>
    netif_num = 0;
 800cf7a:	4b11      	ldr	r3, [pc, #68]	@ (800cfc0 <netif_add+0x18c>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	701a      	strb	r2, [r3, #0]
 800cf80:	e006      	b.n	800cf90 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf88:	3301      	adds	r3, #1
 800cf8a:	b2da      	uxtb	r2, r3
 800cf8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc0 <netif_add+0x18c>)
 800cf8e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cf90:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc4 <netif_add+0x190>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cf98:	4a0a      	ldr	r2, [pc, #40]	@ (800cfc4 <netif_add+0x190>)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	080181ec 	.word	0x080181ec
 800cfac:	08018280 	.word	0x08018280
 800cfb0:	0801823c 	.word	0x0801823c
 800cfb4:	0801829c 	.word	0x0801829c
 800cfb8:	0801a948 	.word	0x0801a948
 800cfbc:	0800d3df 	.word	0x0800d3df
 800cfc0:	20008474 	.word	0x20008474
 800cfc4:	2000846c 	.word	0x2000846c
 800cfc8:	080182c0 	.word	0x080182c0
 800cfcc:	080182d4 	.word	0x080182d4

0800cfd0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f002 fb55 	bl	800f68c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f006 ff23 	bl	8013e30 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cfea:	bf00      	nop
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d106      	bne.n	800d014 <netif_do_set_ipaddr+0x20>
 800d006:	4b1d      	ldr	r3, [pc, #116]	@ (800d07c <netif_do_set_ipaddr+0x88>)
 800d008:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d00c:	491c      	ldr	r1, [pc, #112]	@ (800d080 <netif_do_set_ipaddr+0x8c>)
 800d00e:	481d      	ldr	r0, [pc, #116]	@ (800d084 <netif_do_set_ipaddr+0x90>)
 800d010:	f00a f808 	bl	8017024 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d106      	bne.n	800d028 <netif_do_set_ipaddr+0x34>
 800d01a:	4b18      	ldr	r3, [pc, #96]	@ (800d07c <netif_do_set_ipaddr+0x88>)
 800d01c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d020:	4917      	ldr	r1, [pc, #92]	@ (800d080 <netif_do_set_ipaddr+0x8c>)
 800d022:	4818      	ldr	r0, [pc, #96]	@ (800d084 <netif_do_set_ipaddr+0x90>)
 800d024:	f009 fffe 	bl	8017024 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3304      	adds	r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	429a      	cmp	r2, r3
 800d034:	d01c      	beq.n	800d070 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	3304      	adds	r3, #4
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d046:	f107 0314 	add.w	r3, r7, #20
 800d04a:	4619      	mov	r1, r3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff ffbf 	bl	800cfd0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <netif_do_set_ipaddr+0x6a>
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	e000      	b.n	800d060 <netif_do_set_ipaddr+0x6c>
 800d05e:	2300      	movs	r3, #0
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d064:	2101      	movs	r1, #1
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f000 f8d2 	bl	800d210 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d06c:	2301      	movs	r3, #1
 800d06e:	e000      	b.n	800d072 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3718      	adds	r7, #24
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	080181ec 	.word	0x080181ec
 800d080:	08018304 	.word	0x08018304
 800d084:	0801823c 	.word	0x0801823c

0800d088 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	3308      	adds	r3, #8
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d00a      	beq.n	800d0b8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d002      	beq.n	800d0ae <netif_do_set_netmask+0x26>
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	e000      	b.n	800d0b0 <netif_do_set_netmask+0x28>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e000      	b.n	800d0ba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b085      	sub	sp, #20
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
 800d0ce:	60b9      	str	r1, [r7, #8]
 800d0d0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	330c      	adds	r3, #12
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d00a      	beq.n	800d0f6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <netif_do_set_gw+0x26>
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	e000      	b.n	800d0ee <netif_do_set_gw+0x28>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e000      	b.n	800d0f8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
 800d110:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d112:	2300      	movs	r3, #0
 800d114:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d116:	2300      	movs	r3, #0
 800d118:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d120:	4b1c      	ldr	r3, [pc, #112]	@ (800d194 <netif_set_addr+0x90>)
 800d122:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d12a:	4b1a      	ldr	r3, [pc, #104]	@ (800d194 <netif_set_addr+0x90>)
 800d12c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d134:	4b17      	ldr	r3, [pc, #92]	@ (800d194 <netif_set_addr+0x90>)
 800d136:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <netif_set_addr+0x42>
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <netif_set_addr+0x46>
 800d146:	2301      	movs	r3, #1
 800d148:	e000      	b.n	800d14c <netif_set_addr+0x48>
 800d14a:	2300      	movs	r3, #0
 800d14c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d006      	beq.n	800d162 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d154:	f107 0310 	add.w	r3, r7, #16
 800d158:	461a      	mov	r2, r3
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff ff49 	bl	800cff4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d162:	69fa      	ldr	r2, [r7, #28]
 800d164:	6879      	ldr	r1, [r7, #4]
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7ff ff8e 	bl	800d088 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d16c:	69ba      	ldr	r2, [r7, #24]
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7ff ffa8 	bl	800d0c6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d106      	bne.n	800d18a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d17c:	f107 0310 	add.w	r3, r7, #16
 800d180:	461a      	mov	r2, r3
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7ff ff35 	bl	800cff4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d18a:	bf00      	nop
 800d18c:	3720      	adds	r7, #32
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	0801a948 	.word	0x0801a948

0800d198 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d1a0:	4a04      	ldr	r2, [pc, #16]	@ (800d1b4 <netif_set_default+0x1c>)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d1a6:	bf00      	nop
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	20008470 	.word	0x20008470

0800d1b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d107      	bne.n	800d1d6 <netif_set_up+0x1e>
 800d1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d204 <netif_set_up+0x4c>)
 800d1c8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d1cc:	490e      	ldr	r1, [pc, #56]	@ (800d208 <netif_set_up+0x50>)
 800d1ce:	480f      	ldr	r0, [pc, #60]	@ (800d20c <netif_set_up+0x54>)
 800d1d0:	f009 ff28 	bl	8017024 <iprintf>
 800d1d4:	e013      	b.n	800d1fe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d1dc:	f003 0301 	and.w	r3, r3, #1
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10c      	bne.n	800d1fe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d1ea:	f043 0301 	orr.w	r3, r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d1f6:	2103      	movs	r1, #3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f809 	bl	800d210 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	080181ec 	.word	0x080181ec
 800d208:	08018374 	.word	0x08018374
 800d20c:	0801823c 	.word	0x0801823c

0800d210 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d106      	bne.n	800d230 <netif_issue_reports+0x20>
 800d222:	4b18      	ldr	r3, [pc, #96]	@ (800d284 <netif_issue_reports+0x74>)
 800d224:	f240 326d 	movw	r2, #877	@ 0x36d
 800d228:	4917      	ldr	r1, [pc, #92]	@ (800d288 <netif_issue_reports+0x78>)
 800d22a:	4818      	ldr	r0, [pc, #96]	@ (800d28c <netif_issue_reports+0x7c>)
 800d22c:	f009 fefa 	bl	8017024 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d236:	f003 0304 	and.w	r3, r3, #4
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d01e      	beq.n	800d27c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d244:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d017      	beq.n	800d27c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d24c:	78fb      	ldrb	r3, [r7, #3]
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b00      	cmp	r3, #0
 800d254:	d013      	beq.n	800d27e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	3304      	adds	r3, #4
 800d25a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00e      	beq.n	800d27e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d266:	f003 0308 	and.w	r3, r3, #8
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d007      	beq.n	800d27e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	3304      	adds	r3, #4
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f007 fd45 	bl	8014d04 <etharp_request>
 800d27a:	e000      	b.n	800d27e <netif_issue_reports+0x6e>
    return;
 800d27c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	080181ec 	.word	0x080181ec
 800d288:	08018390 	.word	0x08018390
 800d28c:	0801823c 	.word	0x0801823c

0800d290 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d107      	bne.n	800d2ae <netif_set_down+0x1e>
 800d29e:	4b12      	ldr	r3, [pc, #72]	@ (800d2e8 <netif_set_down+0x58>)
 800d2a0:	f240 329b 	movw	r2, #923	@ 0x39b
 800d2a4:	4911      	ldr	r1, [pc, #68]	@ (800d2ec <netif_set_down+0x5c>)
 800d2a6:	4812      	ldr	r0, [pc, #72]	@ (800d2f0 <netif_set_down+0x60>)
 800d2a8:	f009 febc 	bl	8017024 <iprintf>
 800d2ac:	e019      	b.n	800d2e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d012      	beq.n	800d2e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d2c2:	f023 0301 	bic.w	r3, r3, #1
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d2d4:	f003 0308 	and.w	r3, r3, #8
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f007 f8cf 	bl	8014480 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	080181ec 	.word	0x080181ec
 800d2ec:	080183b4 	.word	0x080183b4
 800d2f0:	0801823c 	.word	0x0801823c

0800d2f4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d107      	bne.n	800d312 <netif_set_link_up+0x1e>
 800d302:	4b13      	ldr	r3, [pc, #76]	@ (800d350 <netif_set_link_up+0x5c>)
 800d304:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d308:	4912      	ldr	r1, [pc, #72]	@ (800d354 <netif_set_link_up+0x60>)
 800d30a:	4813      	ldr	r0, [pc, #76]	@ (800d358 <netif_set_link_up+0x64>)
 800d30c:	f009 fe8a 	bl	8017024 <iprintf>
 800d310:	e01b      	b.n	800d34a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d318:	f003 0304 	and.w	r3, r3, #4
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d114      	bne.n	800d34a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d326:	f043 0304 	orr.w	r3, r3, #4
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d332:	2103      	movs	r1, #3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff ff6b 	bl	800d210 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	69db      	ldr	r3, [r3, #28]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d003      	beq.n	800d34a <netif_set_link_up+0x56>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	080181ec 	.word	0x080181ec
 800d354:	080183d4 	.word	0x080183d4
 800d358:	0801823c 	.word	0x0801823c

0800d35c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d107      	bne.n	800d37a <netif_set_link_down+0x1e>
 800d36a:	4b11      	ldr	r3, [pc, #68]	@ (800d3b0 <netif_set_link_down+0x54>)
 800d36c:	f240 4206 	movw	r2, #1030	@ 0x406
 800d370:	4910      	ldr	r1, [pc, #64]	@ (800d3b4 <netif_set_link_down+0x58>)
 800d372:	4811      	ldr	r0, [pc, #68]	@ (800d3b8 <netif_set_link_down+0x5c>)
 800d374:	f009 fe56 	bl	8017024 <iprintf>
 800d378:	e017      	b.n	800d3aa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b00      	cmp	r3, #0
 800d386:	d010      	beq.n	800d3aa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d38e:	f023 0304 	bic.w	r3, r3, #4
 800d392:	b2da      	uxtb	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	69db      	ldr	r3, [r3, #28]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <netif_set_link_down+0x4e>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	080181ec 	.word	0x080181ec
 800d3b4:	080183f8 	.word	0x080183f8
 800d3b8:	0801823c 	.word	0x0801823c

0800d3bc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	61da      	str	r2, [r3, #28]
  }
}
 800d3d2:	bf00      	nop
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr

0800d3de <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d3de:	b480      	push	{r7}
 800d3e0:	b085      	sub	sp, #20
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	60f8      	str	r0, [r7, #12]
 800d3e6:	60b9      	str	r1, [r7, #8]
 800d3e8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d3ea:	f06f 030b 	mvn.w	r3, #11
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
	...

0800d3fc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	4603      	mov	r3, r0
 800d404:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d013      	beq.n	800d434 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d40c:	4b0d      	ldr	r3, [pc, #52]	@ (800d444 <netif_get_by_index+0x48>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	60fb      	str	r3, [r7, #12]
 800d412:	e00c      	b.n	800d42e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	79fa      	ldrb	r2, [r7, #7]
 800d420:	429a      	cmp	r2, r3
 800d422:	d101      	bne.n	800d428 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	e006      	b.n	800d436 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1ef      	bne.n	800d414 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	2000846c 	.word	0x2000846c

0800d448 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d44e:	4b0c      	ldr	r3, [pc, #48]	@ (800d480 <pbuf_free_ooseq+0x38>)
 800d450:	2200      	movs	r2, #0
 800d452:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d454:	4b0b      	ldr	r3, [pc, #44]	@ (800d484 <pbuf_free_ooseq+0x3c>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	607b      	str	r3, [r7, #4]
 800d45a:	e00a      	b.n	800d472 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f002 f94f 	bl	800f708 <tcp_free_ooseq>
      return;
 800d46a:	e005      	b.n	800d478 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1f1      	bne.n	800d45c <pbuf_free_ooseq+0x14>
    }
  }
}
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	20008475 	.word	0x20008475
 800d484:	20008484 	.word	0x20008484

0800d488 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d488:	b480      	push	{r7}
 800d48a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d48c:	4b03      	ldr	r3, [pc, #12]	@ (800d49c <pbuf_pool_is_empty+0x14>)
 800d48e:	2201      	movs	r2, #1
 800d490:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d492:	bf00      	nop
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	20008475 	.word	0x20008475

0800d4a0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	4611      	mov	r1, r2
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	80fb      	strh	r3, [r7, #6]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	88fa      	ldrh	r2, [r7, #6]
 800d4c6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	88ba      	ldrh	r2, [r7, #4]
 800d4cc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d4ce:	8b3b      	ldrh	r3, [r7, #24]
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	7f3a      	ldrb	r2, [r7, #28]
 800d4da:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	73da      	strb	r2, [r3, #15]
}
 800d4e8:	bf00      	nop
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b08c      	sub	sp, #48	@ 0x30
 800d4f8:	af02      	add	r7, sp, #8
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	71fb      	strb	r3, [r7, #7]
 800d4fe:	460b      	mov	r3, r1
 800d500:	80bb      	strh	r3, [r7, #4]
 800d502:	4613      	mov	r3, r2
 800d504:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d506:	79fb      	ldrb	r3, [r7, #7]
 800d508:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d50a:	887b      	ldrh	r3, [r7, #2]
 800d50c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d510:	d07f      	beq.n	800d612 <pbuf_alloc+0x11e>
 800d512:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d516:	f300 80c8 	bgt.w	800d6aa <pbuf_alloc+0x1b6>
 800d51a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d51e:	d010      	beq.n	800d542 <pbuf_alloc+0x4e>
 800d520:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d524:	f300 80c1 	bgt.w	800d6aa <pbuf_alloc+0x1b6>
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d002      	beq.n	800d532 <pbuf_alloc+0x3e>
 800d52c:	2b41      	cmp	r3, #65	@ 0x41
 800d52e:	f040 80bc 	bne.w	800d6aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d532:	887a      	ldrh	r2, [r7, #2]
 800d534:	88bb      	ldrh	r3, [r7, #4]
 800d536:	4619      	mov	r1, r3
 800d538:	2000      	movs	r0, #0
 800d53a:	f000 f8d1 	bl	800d6e0 <pbuf_alloc_reference>
 800d53e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d540:	e0bd      	b.n	800d6be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d542:	2300      	movs	r3, #0
 800d544:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d546:	2300      	movs	r3, #0
 800d548:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d54a:	88bb      	ldrh	r3, [r7, #4]
 800d54c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d54e:	2008      	movs	r0, #8
 800d550:	f7ff fbce 	bl	800ccf0 <memp_malloc>
 800d554:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d109      	bne.n	800d570 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d55c:	f7ff ff94 	bl	800d488 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d562:	2b00      	cmp	r3, #0
 800d564:	d002      	beq.n	800d56c <pbuf_alloc+0x78>
            pbuf_free(p);
 800d566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d568:	f000 faa8 	bl	800dabc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d56c:	2300      	movs	r3, #0
 800d56e:	e0a7      	b.n	800d6c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d570:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d572:	3303      	adds	r3, #3
 800d574:	b29b      	uxth	r3, r3
 800d576:	f023 0303 	bic.w	r3, r3, #3
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d580:	b29b      	uxth	r3, r3
 800d582:	8b7a      	ldrh	r2, [r7, #26]
 800d584:	4293      	cmp	r3, r2
 800d586:	bf28      	it	cs
 800d588:	4613      	movcs	r3, r2
 800d58a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d58c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d58e:	3310      	adds	r3, #16
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4413      	add	r3, r2
 800d594:	3303      	adds	r3, #3
 800d596:	f023 0303 	bic.w	r3, r3, #3
 800d59a:	4618      	mov	r0, r3
 800d59c:	89f9      	ldrh	r1, [r7, #14]
 800d59e:	8b7a      	ldrh	r2, [r7, #26]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	9301      	str	r3, [sp, #4]
 800d5a4:	887b      	ldrh	r3, [r7, #2]
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	4601      	mov	r1, r0
 800d5ac:	6938      	ldr	r0, [r7, #16]
 800d5ae:	f7ff ff77 	bl	800d4a0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	f003 0303 	and.w	r3, r3, #3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d006      	beq.n	800d5cc <pbuf_alloc+0xd8>
 800d5be:	4b42      	ldr	r3, [pc, #264]	@ (800d6c8 <pbuf_alloc+0x1d4>)
 800d5c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d5c4:	4941      	ldr	r1, [pc, #260]	@ (800d6cc <pbuf_alloc+0x1d8>)
 800d5c6:	4842      	ldr	r0, [pc, #264]	@ (800d6d0 <pbuf_alloc+0x1dc>)
 800d5c8:	f009 fd2c 	bl	8017024 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d5cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d5ce:	3303      	adds	r3, #3
 800d5d0:	f023 0303 	bic.w	r3, r3, #3
 800d5d4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d5d8:	d106      	bne.n	800d5e8 <pbuf_alloc+0xf4>
 800d5da:	4b3b      	ldr	r3, [pc, #236]	@ (800d6c8 <pbuf_alloc+0x1d4>)
 800d5dc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d5e0:	493c      	ldr	r1, [pc, #240]	@ (800d6d4 <pbuf_alloc+0x1e0>)
 800d5e2:	483b      	ldr	r0, [pc, #236]	@ (800d6d0 <pbuf_alloc+0x1dc>)
 800d5e4:	f009 fd1e 	bl	8017024 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d102      	bne.n	800d5f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f2:	e002      	b.n	800d5fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	693a      	ldr	r2, [r7, #16]
 800d5f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d5fe:	8b7a      	ldrh	r2, [r7, #26]
 800d600:	89fb      	ldrh	r3, [r7, #14]
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d60a:	8b7b      	ldrh	r3, [r7, #26]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d19e      	bne.n	800d54e <pbuf_alloc+0x5a>
      break;
 800d610:	e055      	b.n	800d6be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d612:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d614:	3303      	adds	r3, #3
 800d616:	b29b      	uxth	r3, r3
 800d618:	f023 0303 	bic.w	r3, r3, #3
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	88bb      	ldrh	r3, [r7, #4]
 800d620:	3303      	adds	r3, #3
 800d622:	b29b      	uxth	r3, r3
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	b29b      	uxth	r3, r3
 800d62a:	4413      	add	r3, r2
 800d62c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d62e:	8b3b      	ldrh	r3, [r7, #24]
 800d630:	3310      	adds	r3, #16
 800d632:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d634:	8b3a      	ldrh	r2, [r7, #24]
 800d636:	88bb      	ldrh	r3, [r7, #4]
 800d638:	3303      	adds	r3, #3
 800d63a:	f023 0303 	bic.w	r3, r3, #3
 800d63e:	429a      	cmp	r2, r3
 800d640:	d306      	bcc.n	800d650 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d642:	8afa      	ldrh	r2, [r7, #22]
 800d644:	88bb      	ldrh	r3, [r7, #4]
 800d646:	3303      	adds	r3, #3
 800d648:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d201      	bcs.n	800d654 <pbuf_alloc+0x160>
        return NULL;
 800d650:	2300      	movs	r3, #0
 800d652:	e035      	b.n	800d6c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d654:	8afb      	ldrh	r3, [r7, #22]
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff f9ba 	bl	800c9d0 <mem_malloc>
 800d65c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <pbuf_alloc+0x174>
        return NULL;
 800d664:	2300      	movs	r3, #0
 800d666:	e02b      	b.n	800d6c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d668:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d66a:	3310      	adds	r3, #16
 800d66c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d66e:	4413      	add	r3, r2
 800d670:	3303      	adds	r3, #3
 800d672:	f023 0303 	bic.w	r3, r3, #3
 800d676:	4618      	mov	r0, r3
 800d678:	88b9      	ldrh	r1, [r7, #4]
 800d67a:	88ba      	ldrh	r2, [r7, #4]
 800d67c:	2300      	movs	r3, #0
 800d67e:	9301      	str	r3, [sp, #4]
 800d680:	887b      	ldrh	r3, [r7, #2]
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	460b      	mov	r3, r1
 800d686:	4601      	mov	r1, r0
 800d688:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d68a:	f7ff ff09 	bl	800d4a0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f003 0303 	and.w	r3, r3, #3
 800d696:	2b00      	cmp	r3, #0
 800d698:	d010      	beq.n	800d6bc <pbuf_alloc+0x1c8>
 800d69a:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c8 <pbuf_alloc+0x1d4>)
 800d69c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d6a0:	490d      	ldr	r1, [pc, #52]	@ (800d6d8 <pbuf_alloc+0x1e4>)
 800d6a2:	480b      	ldr	r0, [pc, #44]	@ (800d6d0 <pbuf_alloc+0x1dc>)
 800d6a4:	f009 fcbe 	bl	8017024 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d6a8:	e008      	b.n	800d6bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d6aa:	4b07      	ldr	r3, [pc, #28]	@ (800d6c8 <pbuf_alloc+0x1d4>)
 800d6ac:	f240 1227 	movw	r2, #295	@ 0x127
 800d6b0:	490a      	ldr	r1, [pc, #40]	@ (800d6dc <pbuf_alloc+0x1e8>)
 800d6b2:	4807      	ldr	r0, [pc, #28]	@ (800d6d0 <pbuf_alloc+0x1dc>)
 800d6b4:	f009 fcb6 	bl	8017024 <iprintf>
      return NULL;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e001      	b.n	800d6c0 <pbuf_alloc+0x1cc>
      break;
 800d6bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3728      	adds	r7, #40	@ 0x28
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	0801841c 	.word	0x0801841c
 800d6cc:	0801844c 	.word	0x0801844c
 800d6d0:	0801847c 	.word	0x0801847c
 800d6d4:	080184a4 	.word	0x080184a4
 800d6d8:	080184d8 	.word	0x080184d8
 800d6dc:	08018504 	.word	0x08018504

0800d6e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	807b      	strh	r3, [r7, #2]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d6f0:	883b      	ldrh	r3, [r7, #0]
 800d6f2:	2b41      	cmp	r3, #65	@ 0x41
 800d6f4:	d009      	beq.n	800d70a <pbuf_alloc_reference+0x2a>
 800d6f6:	883b      	ldrh	r3, [r7, #0]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d006      	beq.n	800d70a <pbuf_alloc_reference+0x2a>
 800d6fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d73c <pbuf_alloc_reference+0x5c>)
 800d6fe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d702:	490f      	ldr	r1, [pc, #60]	@ (800d740 <pbuf_alloc_reference+0x60>)
 800d704:	480f      	ldr	r0, [pc, #60]	@ (800d744 <pbuf_alloc_reference+0x64>)
 800d706:	f009 fc8d 	bl	8017024 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d70a:	2007      	movs	r0, #7
 800d70c:	f7ff faf0 	bl	800ccf0 <memp_malloc>
 800d710:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d718:	2300      	movs	r3, #0
 800d71a:	e00b      	b.n	800d734 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d71c:	8879      	ldrh	r1, [r7, #2]
 800d71e:	887a      	ldrh	r2, [r7, #2]
 800d720:	2300      	movs	r3, #0
 800d722:	9301      	str	r3, [sp, #4]
 800d724:	883b      	ldrh	r3, [r7, #0]
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	460b      	mov	r3, r1
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f7ff feb7 	bl	800d4a0 <pbuf_init_alloced_pbuf>
  return p;
 800d732:	68fb      	ldr	r3, [r7, #12]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	0801841c 	.word	0x0801841c
 800d740:	08018520 	.word	0x08018520
 800d744:	0801847c 	.word	0x0801847c

0800d748 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af02      	add	r7, sp, #8
 800d74e:	607b      	str	r3, [r7, #4]
 800d750:	4603      	mov	r3, r0
 800d752:	73fb      	strb	r3, [r7, #15]
 800d754:	460b      	mov	r3, r1
 800d756:	81bb      	strh	r3, [r7, #12]
 800d758:	4613      	mov	r3, r2
 800d75a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d75c:	7bfb      	ldrb	r3, [r7, #15]
 800d75e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d760:	8a7b      	ldrh	r3, [r7, #18]
 800d762:	3303      	adds	r3, #3
 800d764:	f023 0203 	bic.w	r2, r3, #3
 800d768:	89bb      	ldrh	r3, [r7, #12]
 800d76a:	441a      	add	r2, r3
 800d76c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d76e:	429a      	cmp	r2, r3
 800d770:	d901      	bls.n	800d776 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d772:	2300      	movs	r3, #0
 800d774:	e018      	b.n	800d7a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d007      	beq.n	800d78c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d77c:	8a7b      	ldrh	r3, [r7, #18]
 800d77e:	3303      	adds	r3, #3
 800d780:	f023 0303 	bic.w	r3, r3, #3
 800d784:	6a3a      	ldr	r2, [r7, #32]
 800d786:	4413      	add	r3, r2
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	e001      	b.n	800d790 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d78c:	2300      	movs	r3, #0
 800d78e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	89b9      	ldrh	r1, [r7, #12]
 800d794:	89ba      	ldrh	r2, [r7, #12]
 800d796:	2302      	movs	r3, #2
 800d798:	9301      	str	r3, [sp, #4]
 800d79a:	897b      	ldrh	r3, [r7, #10]
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	6979      	ldr	r1, [r7, #20]
 800d7a2:	f7ff fe7d 	bl	800d4a0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d7a6:	687b      	ldr	r3, [r7, #4]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d106      	bne.n	800d7d0 <pbuf_realloc+0x20>
 800d7c2:	4b3a      	ldr	r3, [pc, #232]	@ (800d8ac <pbuf_realloc+0xfc>)
 800d7c4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d7c8:	4939      	ldr	r1, [pc, #228]	@ (800d8b0 <pbuf_realloc+0x100>)
 800d7ca:	483a      	ldr	r0, [pc, #232]	@ (800d8b4 <pbuf_realloc+0x104>)
 800d7cc:	f009 fc2a 	bl	8017024 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	891b      	ldrh	r3, [r3, #8]
 800d7d4:	887a      	ldrh	r2, [r7, #2]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d263      	bcs.n	800d8a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	891a      	ldrh	r2, [r3, #8]
 800d7de:	887b      	ldrh	r3, [r7, #2]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d7e4:	887b      	ldrh	r3, [r7, #2]
 800d7e6:	817b      	strh	r3, [r7, #10]
  q = p;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d7ec:	e018      	b.n	800d820 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	895b      	ldrh	r3, [r3, #10]
 800d7f2:	897a      	ldrh	r2, [r7, #10]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	891a      	ldrh	r2, [r3, #8]
 800d7fc:	893b      	ldrh	r3, [r7, #8]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	b29a      	uxth	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <pbuf_realloc+0x70>
 800d812:	4b26      	ldr	r3, [pc, #152]	@ (800d8ac <pbuf_realloc+0xfc>)
 800d814:	f240 12af 	movw	r2, #431	@ 0x1af
 800d818:	4927      	ldr	r1, [pc, #156]	@ (800d8b8 <pbuf_realloc+0x108>)
 800d81a:	4826      	ldr	r0, [pc, #152]	@ (800d8b4 <pbuf_realloc+0x104>)
 800d81c:	f009 fc02 	bl	8017024 <iprintf>
  while (rem_len > q->len) {
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	895b      	ldrh	r3, [r3, #10]
 800d824:	897a      	ldrh	r2, [r7, #10]
 800d826:	429a      	cmp	r2, r3
 800d828:	d8e1      	bhi.n	800d7ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	7b1b      	ldrb	r3, [r3, #12]
 800d82e:	f003 030f 	and.w	r3, r3, #15
 800d832:	2b00      	cmp	r3, #0
 800d834:	d121      	bne.n	800d87a <pbuf_realloc+0xca>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	895b      	ldrh	r3, [r3, #10]
 800d83a:	897a      	ldrh	r2, [r7, #10]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d01c      	beq.n	800d87a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	7b5b      	ldrb	r3, [r3, #13]
 800d844:	f003 0302 	and.w	r3, r3, #2
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d116      	bne.n	800d87a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	b29a      	uxth	r2, r3
 800d856:	897b      	ldrh	r3, [r7, #10]
 800d858:	4413      	add	r3, r2
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	4619      	mov	r1, r3
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f7fe ffba 	bl	800c7d8 <mem_trim>
 800d864:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d106      	bne.n	800d87a <pbuf_realloc+0xca>
 800d86c:	4b0f      	ldr	r3, [pc, #60]	@ (800d8ac <pbuf_realloc+0xfc>)
 800d86e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d872:	4912      	ldr	r1, [pc, #72]	@ (800d8bc <pbuf_realloc+0x10c>)
 800d874:	480f      	ldr	r0, [pc, #60]	@ (800d8b4 <pbuf_realloc+0x104>)
 800d876:	f009 fbd5 	bl	8017024 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	897a      	ldrh	r2, [r7, #10]
 800d87e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	895a      	ldrh	r2, [r3, #10]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d004      	beq.n	800d89a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4618      	mov	r0, r3
 800d896:	f000 f911 	bl	800dabc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	e000      	b.n	800d8a4 <pbuf_realloc+0xf4>
    return;
 800d8a2:	bf00      	nop

}
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	0801841c 	.word	0x0801841c
 800d8b0:	08018534 	.word	0x08018534
 800d8b4:	0801847c 	.word	0x0801847c
 800d8b8:	0801854c 	.word	0x0801854c
 800d8bc:	08018564 	.word	0x08018564

0800d8c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d106      	bne.n	800d8e2 <pbuf_add_header_impl+0x22>
 800d8d4:	4b2b      	ldr	r3, [pc, #172]	@ (800d984 <pbuf_add_header_impl+0xc4>)
 800d8d6:	f240 12df 	movw	r2, #479	@ 0x1df
 800d8da:	492b      	ldr	r1, [pc, #172]	@ (800d988 <pbuf_add_header_impl+0xc8>)
 800d8dc:	482b      	ldr	r0, [pc, #172]	@ (800d98c <pbuf_add_header_impl+0xcc>)
 800d8de:	f009 fba1 	bl	8017024 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d003      	beq.n	800d8f0 <pbuf_add_header_impl+0x30>
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8ee:	d301      	bcc.n	800d8f4 <pbuf_add_header_impl+0x34>
    return 1;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e043      	b.n	800d97c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d101      	bne.n	800d8fe <pbuf_add_header_impl+0x3e>
    return 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e03e      	b.n	800d97c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	891a      	ldrh	r2, [r3, #8]
 800d906:	8a7b      	ldrh	r3, [r7, #18]
 800d908:	4413      	add	r3, r2
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	8a7a      	ldrh	r2, [r7, #18]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d901      	bls.n	800d916 <pbuf_add_header_impl+0x56>
    return 1;
 800d912:	2301      	movs	r3, #1
 800d914:	e032      	b.n	800d97c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	7b1b      	ldrb	r3, [r3, #12]
 800d91a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d91c:	8a3b      	ldrh	r3, [r7, #16]
 800d91e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00c      	beq.n	800d940 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	685a      	ldr	r2, [r3, #4]
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	425b      	negs	r3, r3
 800d92e:	4413      	add	r3, r2
 800d930:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3310      	adds	r3, #16
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d20d      	bcs.n	800d958 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d93c:	2301      	movs	r3, #1
 800d93e:	e01d      	b.n	800d97c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d940:	79fb      	ldrb	r3, [r7, #7]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d006      	beq.n	800d954 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	685a      	ldr	r2, [r3, #4]
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	425b      	negs	r3, r3
 800d94e:	4413      	add	r3, r2
 800d950:	617b      	str	r3, [r7, #20]
 800d952:	e001      	b.n	800d958 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d954:	2301      	movs	r3, #1
 800d956:	e011      	b.n	800d97c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	895a      	ldrh	r2, [r3, #10]
 800d962:	8a7b      	ldrh	r3, [r7, #18]
 800d964:	4413      	add	r3, r2
 800d966:	b29a      	uxth	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	891a      	ldrh	r2, [r3, #8]
 800d970:	8a7b      	ldrh	r3, [r7, #18]
 800d972:	4413      	add	r3, r2
 800d974:	b29a      	uxth	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	811a      	strh	r2, [r3, #8]


  return 0;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0801841c 	.word	0x0801841c
 800d988:	08018580 	.word	0x08018580
 800d98c:	0801847c 	.word	0x0801847c

0800d990 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d99a:	2200      	movs	r2, #0
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff ff8e 	bl	800d8c0 <pbuf_add_header_impl>
 800d9a4:	4603      	mov	r3, r0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
	...

0800d9b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <pbuf_remove_header+0x1e>
 800d9c0:	4b20      	ldr	r3, [pc, #128]	@ (800da44 <pbuf_remove_header+0x94>)
 800d9c2:	f240 224b 	movw	r2, #587	@ 0x24b
 800d9c6:	4920      	ldr	r1, [pc, #128]	@ (800da48 <pbuf_remove_header+0x98>)
 800d9c8:	4820      	ldr	r0, [pc, #128]	@ (800da4c <pbuf_remove_header+0x9c>)
 800d9ca:	f009 fb2b 	bl	8017024 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <pbuf_remove_header+0x2c>
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9da:	d301      	bcc.n	800d9e0 <pbuf_remove_header+0x30>
    return 1;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e02c      	b.n	800da3a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d101      	bne.n	800d9ea <pbuf_remove_header+0x3a>
    return 0;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e027      	b.n	800da3a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	895b      	ldrh	r3, [r3, #10]
 800d9f2:	89fa      	ldrh	r2, [r7, #14]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d908      	bls.n	800da0a <pbuf_remove_header+0x5a>
 800d9f8:	4b12      	ldr	r3, [pc, #72]	@ (800da44 <pbuf_remove_header+0x94>)
 800d9fa:	f240 2255 	movw	r2, #597	@ 0x255
 800d9fe:	4914      	ldr	r1, [pc, #80]	@ (800da50 <pbuf_remove_header+0xa0>)
 800da00:	4812      	ldr	r0, [pc, #72]	@ (800da4c <pbuf_remove_header+0x9c>)
 800da02:	f009 fb0f 	bl	8017024 <iprintf>
 800da06:	2301      	movs	r3, #1
 800da08:	e017      	b.n	800da3a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	441a      	add	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	895a      	ldrh	r2, [r3, #10]
 800da20:	89fb      	ldrh	r3, [r7, #14]
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	b29a      	uxth	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	891a      	ldrh	r2, [r3, #8]
 800da2e:	89fb      	ldrh	r3, [r7, #14]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	b29a      	uxth	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	0801841c 	.word	0x0801841c
 800da48:	08018580 	.word	0x08018580
 800da4c:	0801847c 	.word	0x0801847c
 800da50:	0801858c 	.word	0x0801858c

0800da54 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	460b      	mov	r3, r1
 800da5e:	807b      	strh	r3, [r7, #2]
 800da60:	4613      	mov	r3, r2
 800da62:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800da64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	da08      	bge.n	800da7e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800da6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da70:	425b      	negs	r3, r3
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7ff ff9b 	bl	800d9b0 <pbuf_remove_header>
 800da7a:	4603      	mov	r3, r0
 800da7c:	e007      	b.n	800da8e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800da7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da82:	787a      	ldrb	r2, [r7, #1]
 800da84:	4619      	mov	r1, r3
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff ff1a 	bl	800d8c0 <pbuf_add_header_impl>
 800da8c:	4603      	mov	r3, r0
  }
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b082      	sub	sp, #8
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800daa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800daa6:	2201      	movs	r2, #1
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff ffd2 	bl	800da54 <pbuf_header_impl>
 800dab0:	4603      	mov	r3, r0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
	...

0800dabc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d106      	bne.n	800dade <pbuf_free+0x22>
 800dad0:	4b38      	ldr	r3, [pc, #224]	@ (800dbb4 <pbuf_free+0xf8>)
 800dad2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800dad6:	4938      	ldr	r1, [pc, #224]	@ (800dbb8 <pbuf_free+0xfc>)
 800dad8:	4838      	ldr	r0, [pc, #224]	@ (800dbbc <pbuf_free+0x100>)
 800dada:	f009 faa3 	bl	8017024 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	e063      	b.n	800dbaa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dae6:	e05c      	b.n	800dba2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7b9b      	ldrb	r3, [r3, #14]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d106      	bne.n	800dafe <pbuf_free+0x42>
 800daf0:	4b30      	ldr	r3, [pc, #192]	@ (800dbb4 <pbuf_free+0xf8>)
 800daf2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800daf6:	4932      	ldr	r1, [pc, #200]	@ (800dbc0 <pbuf_free+0x104>)
 800daf8:	4830      	ldr	r0, [pc, #192]	@ (800dbbc <pbuf_free+0x100>)
 800dafa:	f009 fa93 	bl	8017024 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	7b9b      	ldrb	r3, [r3, #14]
 800db02:	3b01      	subs	r3, #1
 800db04:	b2da      	uxtb	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	739a      	strb	r2, [r3, #14]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	7b9b      	ldrb	r3, [r3, #14]
 800db0e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800db10:	7dbb      	ldrb	r3, [r7, #22]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d143      	bne.n	800db9e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	7b1b      	ldrb	r3, [r3, #12]
 800db20:	f003 030f 	and.w	r3, r3, #15
 800db24:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	7b5b      	ldrb	r3, [r3, #13]
 800db2a:	f003 0302 	and.w	r3, r3, #2
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d011      	beq.n	800db56 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d106      	bne.n	800db4c <pbuf_free+0x90>
 800db3e:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb4 <pbuf_free+0xf8>)
 800db40:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800db44:	491f      	ldr	r1, [pc, #124]	@ (800dbc4 <pbuf_free+0x108>)
 800db46:	481d      	ldr	r0, [pc, #116]	@ (800dbbc <pbuf_free+0x100>)
 800db48:	f009 fa6c 	bl	8017024 <iprintf>
        pc->custom_free_function(p);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	4798      	blx	r3
 800db54:	e01d      	b.n	800db92 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800db56:	7bfb      	ldrb	r3, [r7, #15]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d104      	bne.n	800db66 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800db5c:	6879      	ldr	r1, [r7, #4]
 800db5e:	2008      	movs	r0, #8
 800db60:	f7ff f936 	bl	800cdd0 <memp_free>
 800db64:	e015      	b.n	800db92 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d104      	bne.n	800db76 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	2007      	movs	r0, #7
 800db70:	f7ff f92e 	bl	800cdd0 <memp_free>
 800db74:	e00d      	b.n	800db92 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800db76:	7bfb      	ldrb	r3, [r7, #15]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d103      	bne.n	800db84 <pbuf_free+0xc8>
          mem_free(p);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7fe fdc1 	bl	800c704 <mem_free>
 800db82:	e006      	b.n	800db92 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800db84:	4b0b      	ldr	r3, [pc, #44]	@ (800dbb4 <pbuf_free+0xf8>)
 800db86:	f240 320f 	movw	r2, #783	@ 0x30f
 800db8a:	490f      	ldr	r1, [pc, #60]	@ (800dbc8 <pbuf_free+0x10c>)
 800db8c:	480b      	ldr	r0, [pc, #44]	@ (800dbbc <pbuf_free+0x100>)
 800db8e:	f009 fa49 	bl	8017024 <iprintf>
        }
      }
      count++;
 800db92:	7dfb      	ldrb	r3, [r7, #23]
 800db94:	3301      	adds	r3, #1
 800db96:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	607b      	str	r3, [r7, #4]
 800db9c:	e001      	b.n	800dba2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800db9e:	2300      	movs	r3, #0
 800dba0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d19f      	bne.n	800dae8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	0801841c 	.word	0x0801841c
 800dbb8:	08018580 	.word	0x08018580
 800dbbc:	0801847c 	.word	0x0801847c
 800dbc0:	080185ac 	.word	0x080185ac
 800dbc4:	080185c4 	.word	0x080185c4
 800dbc8:	080185e8 	.word	0x080185e8

0800dbcc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dbd8:	e005      	b.n	800dbe6 <pbuf_clen+0x1a>
    ++len;
 800dbda:	89fb      	ldrh	r3, [r7, #14]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f6      	bne.n	800dbda <pbuf_clen+0xe>
  }
  return len;
 800dbec:	89fb      	ldrh	r3, [r7, #14]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
	...

0800dbfc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d010      	beq.n	800dc2c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	7b9b      	ldrb	r3, [r3, #14]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	7b9b      	ldrb	r3, [r3, #14]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <pbuf_ref+0x30>
 800dc1e:	4b05      	ldr	r3, [pc, #20]	@ (800dc34 <pbuf_ref+0x38>)
 800dc20:	f240 3242 	movw	r2, #834	@ 0x342
 800dc24:	4904      	ldr	r1, [pc, #16]	@ (800dc38 <pbuf_ref+0x3c>)
 800dc26:	4805      	ldr	r0, [pc, #20]	@ (800dc3c <pbuf_ref+0x40>)
 800dc28:	f009 f9fc 	bl	8017024 <iprintf>
  }
}
 800dc2c:	bf00      	nop
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	0801841c 	.word	0x0801841c
 800dc38:	080185fc 	.word	0x080185fc
 800dc3c:	0801847c 	.word	0x0801847c

0800dc40 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <pbuf_cat+0x16>
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d107      	bne.n	800dc66 <pbuf_cat+0x26>
 800dc56:	4b20      	ldr	r3, [pc, #128]	@ (800dcd8 <pbuf_cat+0x98>)
 800dc58:	f240 3259 	movw	r2, #857	@ 0x359
 800dc5c:	491f      	ldr	r1, [pc, #124]	@ (800dcdc <pbuf_cat+0x9c>)
 800dc5e:	4820      	ldr	r0, [pc, #128]	@ (800dce0 <pbuf_cat+0xa0>)
 800dc60:	f009 f9e0 	bl	8017024 <iprintf>
 800dc64:	e034      	b.n	800dcd0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	60fb      	str	r3, [r7, #12]
 800dc6a:	e00a      	b.n	800dc82 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	891a      	ldrh	r2, [r3, #8]
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	891b      	ldrh	r3, [r3, #8]
 800dc74:	4413      	add	r3, r2
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1f0      	bne.n	800dc6c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	891a      	ldrh	r2, [r3, #8]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	895b      	ldrh	r3, [r3, #10]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d006      	beq.n	800dca4 <pbuf_cat+0x64>
 800dc96:	4b10      	ldr	r3, [pc, #64]	@ (800dcd8 <pbuf_cat+0x98>)
 800dc98:	f240 3262 	movw	r2, #866	@ 0x362
 800dc9c:	4911      	ldr	r1, [pc, #68]	@ (800dce4 <pbuf_cat+0xa4>)
 800dc9e:	4810      	ldr	r0, [pc, #64]	@ (800dce0 <pbuf_cat+0xa0>)
 800dca0:	f009 f9c0 	bl	8017024 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d006      	beq.n	800dcba <pbuf_cat+0x7a>
 800dcac:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd8 <pbuf_cat+0x98>)
 800dcae:	f240 3263 	movw	r2, #867	@ 0x363
 800dcb2:	490d      	ldr	r1, [pc, #52]	@ (800dce8 <pbuf_cat+0xa8>)
 800dcb4:	480a      	ldr	r0, [pc, #40]	@ (800dce0 <pbuf_cat+0xa0>)
 800dcb6:	f009 f9b5 	bl	8017024 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	891a      	ldrh	r2, [r3, #8]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	891b      	ldrh	r3, [r3, #8]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	0801841c 	.word	0x0801841c
 800dcdc:	08018610 	.word	0x08018610
 800dce0:	0801847c 	.word	0x0801847c
 800dce4:	08018648 	.word	0x08018648
 800dce8:	08018678 	.word	0x08018678

0800dcec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7ff ffa1 	bl	800dc40 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dcfe:	6838      	ldr	r0, [r7, #0]
 800dd00:	f7ff ff7c 	bl	800dbfc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d008      	beq.n	800dd36 <pbuf_copy+0x2a>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d005      	beq.n	800dd36 <pbuf_copy+0x2a>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	891a      	ldrh	r2, [r3, #8]
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	891b      	ldrh	r3, [r3, #8]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d209      	bcs.n	800dd4a <pbuf_copy+0x3e>
 800dd36:	4b57      	ldr	r3, [pc, #348]	@ (800de94 <pbuf_copy+0x188>)
 800dd38:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800dd3c:	4956      	ldr	r1, [pc, #344]	@ (800de98 <pbuf_copy+0x18c>)
 800dd3e:	4857      	ldr	r0, [pc, #348]	@ (800de9c <pbuf_copy+0x190>)
 800dd40:	f009 f970 	bl	8017024 <iprintf>
 800dd44:	f06f 030f 	mvn.w	r3, #15
 800dd48:	e09f      	b.n	800de8a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	895b      	ldrh	r3, [r3, #10]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	1ad2      	subs	r2, r2, r3
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	895b      	ldrh	r3, [r3, #10]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	1acb      	subs	r3, r1, r3
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d306      	bcc.n	800dd70 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	895b      	ldrh	r3, [r3, #10]
 800dd66:	461a      	mov	r2, r3
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	60fb      	str	r3, [r7, #12]
 800dd6e:	e005      	b.n	800dd7c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	895b      	ldrh	r3, [r3, #10]
 800dd74:	461a      	mov	r2, r3
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	18d0      	adds	r0, r2, r3
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	f009 fa23 	bl	80171da <memcpy>
    offset_to += len;
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	4413      	add	r3, r2
 800dd9a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	4413      	add	r3, r2
 800dda2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	895b      	ldrh	r3, [r3, #10]
 800dda8:	461a      	mov	r2, r3
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d906      	bls.n	800ddbe <pbuf_copy+0xb2>
 800ddb0:	4b38      	ldr	r3, [pc, #224]	@ (800de94 <pbuf_copy+0x188>)
 800ddb2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ddb6:	493a      	ldr	r1, [pc, #232]	@ (800dea0 <pbuf_copy+0x194>)
 800ddb8:	4838      	ldr	r0, [pc, #224]	@ (800de9c <pbuf_copy+0x190>)
 800ddba:	f009 f933 	bl	8017024 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	895b      	ldrh	r3, [r3, #10]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d906      	bls.n	800ddd8 <pbuf_copy+0xcc>
 800ddca:	4b32      	ldr	r3, [pc, #200]	@ (800de94 <pbuf_copy+0x188>)
 800ddcc:	f240 32da 	movw	r2, #986	@ 0x3da
 800ddd0:	4934      	ldr	r1, [pc, #208]	@ (800dea4 <pbuf_copy+0x198>)
 800ddd2:	4832      	ldr	r0, [pc, #200]	@ (800de9c <pbuf_copy+0x190>)
 800ddd4:	f009 f926 	bl	8017024 <iprintf>
    if (offset_from >= p_from->len) {
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	895b      	ldrh	r3, [r3, #10]
 800dddc:	461a      	mov	r2, r3
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d304      	bcc.n	800ddee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	895b      	ldrh	r3, [r3, #10]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d114      	bne.n	800de24 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10c      	bne.n	800de24 <pbuf_copy+0x118>
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d009      	beq.n	800de24 <pbuf_copy+0x118>
 800de10:	4b20      	ldr	r3, [pc, #128]	@ (800de94 <pbuf_copy+0x188>)
 800de12:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800de16:	4924      	ldr	r1, [pc, #144]	@ (800dea8 <pbuf_copy+0x19c>)
 800de18:	4820      	ldr	r0, [pc, #128]	@ (800de9c <pbuf_copy+0x190>)
 800de1a:	f009 f903 	bl	8017024 <iprintf>
 800de1e:	f06f 030f 	mvn.w	r3, #15
 800de22:	e032      	b.n	800de8a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d013      	beq.n	800de52 <pbuf_copy+0x146>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	895a      	ldrh	r2, [r3, #10]
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	891b      	ldrh	r3, [r3, #8]
 800de32:	429a      	cmp	r2, r3
 800de34:	d10d      	bne.n	800de52 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d009      	beq.n	800de52 <pbuf_copy+0x146>
 800de3e:	4b15      	ldr	r3, [pc, #84]	@ (800de94 <pbuf_copy+0x188>)
 800de40:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800de44:	4919      	ldr	r1, [pc, #100]	@ (800deac <pbuf_copy+0x1a0>)
 800de46:	4815      	ldr	r0, [pc, #84]	@ (800de9c <pbuf_copy+0x190>)
 800de48:	f009 f8ec 	bl	8017024 <iprintf>
 800de4c:	f06f 0305 	mvn.w	r3, #5
 800de50:	e01b      	b.n	800de8a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d013      	beq.n	800de80 <pbuf_copy+0x174>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	895a      	ldrh	r2, [r3, #10]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	891b      	ldrh	r3, [r3, #8]
 800de60:	429a      	cmp	r2, r3
 800de62:	d10d      	bne.n	800de80 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d009      	beq.n	800de80 <pbuf_copy+0x174>
 800de6c:	4b09      	ldr	r3, [pc, #36]	@ (800de94 <pbuf_copy+0x188>)
 800de6e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800de72:	490e      	ldr	r1, [pc, #56]	@ (800deac <pbuf_copy+0x1a0>)
 800de74:	4809      	ldr	r0, [pc, #36]	@ (800de9c <pbuf_copy+0x190>)
 800de76:	f009 f8d5 	bl	8017024 <iprintf>
 800de7a:	f06f 0305 	mvn.w	r3, #5
 800de7e:	e004      	b.n	800de8a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	f47f af61 	bne.w	800dd4a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	0801841c 	.word	0x0801841c
 800de98:	080186c4 	.word	0x080186c4
 800de9c:	0801847c 	.word	0x0801847c
 800dea0:	080186f4 	.word	0x080186f4
 800dea4:	0801870c 	.word	0x0801870c
 800dea8:	08018728 	.word	0x08018728
 800deac:	08018738 	.word	0x08018738

0800deb0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b088      	sub	sp, #32
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	4611      	mov	r1, r2
 800debc:	461a      	mov	r2, r3
 800debe:	460b      	mov	r3, r1
 800dec0:	80fb      	strh	r3, [r7, #6]
 800dec2:	4613      	mov	r3, r2
 800dec4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dec6:	2300      	movs	r3, #0
 800dec8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800deca:	2300      	movs	r3, #0
 800decc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d108      	bne.n	800dee6 <pbuf_copy_partial+0x36>
 800ded4:	4b2b      	ldr	r3, [pc, #172]	@ (800df84 <pbuf_copy_partial+0xd4>)
 800ded6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800deda:	492b      	ldr	r1, [pc, #172]	@ (800df88 <pbuf_copy_partial+0xd8>)
 800dedc:	482b      	ldr	r0, [pc, #172]	@ (800df8c <pbuf_copy_partial+0xdc>)
 800dede:	f009 f8a1 	bl	8017024 <iprintf>
 800dee2:	2300      	movs	r3, #0
 800dee4:	e04a      	b.n	800df7c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d108      	bne.n	800defe <pbuf_copy_partial+0x4e>
 800deec:	4b25      	ldr	r3, [pc, #148]	@ (800df84 <pbuf_copy_partial+0xd4>)
 800deee:	f240 420b 	movw	r2, #1035	@ 0x40b
 800def2:	4927      	ldr	r1, [pc, #156]	@ (800df90 <pbuf_copy_partial+0xe0>)
 800def4:	4825      	ldr	r0, [pc, #148]	@ (800df8c <pbuf_copy_partial+0xdc>)
 800def6:	f009 f895 	bl	8017024 <iprintf>
 800defa:	2300      	movs	r3, #0
 800defc:	e03e      	b.n	800df7c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	61fb      	str	r3, [r7, #28]
 800df02:	e034      	b.n	800df6e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800df04:	88bb      	ldrh	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00a      	beq.n	800df20 <pbuf_copy_partial+0x70>
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	895b      	ldrh	r3, [r3, #10]
 800df0e:	88ba      	ldrh	r2, [r7, #4]
 800df10:	429a      	cmp	r2, r3
 800df12:	d305      	bcc.n	800df20 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	895b      	ldrh	r3, [r3, #10]
 800df18:	88ba      	ldrh	r2, [r7, #4]
 800df1a:	1ad3      	subs	r3, r2, r3
 800df1c:	80bb      	strh	r3, [r7, #4]
 800df1e:	e023      	b.n	800df68 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	895a      	ldrh	r2, [r3, #10]
 800df24:	88bb      	ldrh	r3, [r7, #4]
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800df2a:	8b3a      	ldrh	r2, [r7, #24]
 800df2c:	88fb      	ldrh	r3, [r7, #6]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d901      	bls.n	800df36 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800df32:	88fb      	ldrh	r3, [r7, #6]
 800df34:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800df36:	8b7b      	ldrh	r3, [r7, #26]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	18d0      	adds	r0, r2, r3
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	88bb      	ldrh	r3, [r7, #4]
 800df42:	4413      	add	r3, r2
 800df44:	8b3a      	ldrh	r2, [r7, #24]
 800df46:	4619      	mov	r1, r3
 800df48:	f009 f947 	bl	80171da <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800df4c:	8afa      	ldrh	r2, [r7, #22]
 800df4e:	8b3b      	ldrh	r3, [r7, #24]
 800df50:	4413      	add	r3, r2
 800df52:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800df54:	8b7a      	ldrh	r2, [r7, #26]
 800df56:	8b3b      	ldrh	r3, [r7, #24]
 800df58:	4413      	add	r3, r2
 800df5a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800df5c:	88fa      	ldrh	r2, [r7, #6]
 800df5e:	8b3b      	ldrh	r3, [r7, #24]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	61fb      	str	r3, [r7, #28]
 800df6e:	88fb      	ldrh	r3, [r7, #6]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <pbuf_copy_partial+0xca>
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1c4      	bne.n	800df04 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800df7a:	8afb      	ldrh	r3, [r7, #22]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3720      	adds	r7, #32
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	0801841c 	.word	0x0801841c
 800df88:	08018764 	.word	0x08018764
 800df8c:	0801847c 	.word	0x0801847c
 800df90:	08018784 	.word	0x08018784

0800df94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	4603      	mov	r3, r0
 800df9c:	603a      	str	r2, [r7, #0]
 800df9e:	71fb      	strb	r3, [r7, #7]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	8919      	ldrh	r1, [r3, #8]
 800dfa8:	88ba      	ldrh	r2, [r7, #4]
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7ff faa1 	bl	800d4f4 <pbuf_alloc>
 800dfb2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d101      	bne.n	800dfbe <pbuf_clone+0x2a>
    return NULL;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	e011      	b.n	800dfe2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dfbe:	6839      	ldr	r1, [r7, #0]
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f7ff fea3 	bl	800dd0c <pbuf_copy>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dfca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <pbuf_clone+0x4c>
 800dfd2:	4b06      	ldr	r3, [pc, #24]	@ (800dfec <pbuf_clone+0x58>)
 800dfd4:	f240 5224 	movw	r2, #1316	@ 0x524
 800dfd8:	4905      	ldr	r1, [pc, #20]	@ (800dff0 <pbuf_clone+0x5c>)
 800dfda:	4806      	ldr	r0, [pc, #24]	@ (800dff4 <pbuf_clone+0x60>)
 800dfdc:	f009 f822 	bl	8017024 <iprintf>
  return q;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	0801841c 	.word	0x0801841c
 800dff0:	08018890 	.word	0x08018890
 800dff4:	0801847c 	.word	0x0801847c

0800dff8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dffc:	f008 ff12 	bl	8016e24 <rand>
 800e000:	4603      	mov	r3, r0
 800e002:	b29b      	uxth	r3, r3
 800e004:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e008:	b29b      	uxth	r3, r3
 800e00a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e00e:	b29a      	uxth	r2, r3
 800e010:	4b01      	ldr	r3, [pc, #4]	@ (800e018 <tcp_init+0x20>)
 800e012:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e014:	bf00      	nop
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20000020 	.word	0x20000020

0800e01c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	7d1b      	ldrb	r3, [r3, #20]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d105      	bne.n	800e038 <tcp_free+0x1c>
 800e02c:	4b06      	ldr	r3, [pc, #24]	@ (800e048 <tcp_free+0x2c>)
 800e02e:	22d4      	movs	r2, #212	@ 0xd4
 800e030:	4906      	ldr	r1, [pc, #24]	@ (800e04c <tcp_free+0x30>)
 800e032:	4807      	ldr	r0, [pc, #28]	@ (800e050 <tcp_free+0x34>)
 800e034:	f008 fff6 	bl	8017024 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	2001      	movs	r0, #1
 800e03c:	f7fe fec8 	bl	800cdd0 <memp_free>
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	0801891c 	.word	0x0801891c
 800e04c:	0801894c 	.word	0x0801894c
 800e050:	08018960 	.word	0x08018960

0800e054 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7d1b      	ldrb	r3, [r3, #20]
 800e060:	2b01      	cmp	r3, #1
 800e062:	d105      	bne.n	800e070 <tcp_free_listen+0x1c>
 800e064:	4b06      	ldr	r3, [pc, #24]	@ (800e080 <tcp_free_listen+0x2c>)
 800e066:	22df      	movs	r2, #223	@ 0xdf
 800e068:	4906      	ldr	r1, [pc, #24]	@ (800e084 <tcp_free_listen+0x30>)
 800e06a:	4807      	ldr	r0, [pc, #28]	@ (800e088 <tcp_free_listen+0x34>)
 800e06c:	f008 ffda 	bl	8017024 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e070:	6879      	ldr	r1, [r7, #4]
 800e072:	2002      	movs	r0, #2
 800e074:	f7fe feac 	bl	800cdd0 <memp_free>
}
 800e078:	bf00      	nop
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	0801891c 	.word	0x0801891c
 800e084:	08018988 	.word	0x08018988
 800e088:	08018960 	.word	0x08018960

0800e08c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e090:	f000 fea4 	bl	800eddc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e094:	4b07      	ldr	r3, [pc, #28]	@ (800e0b4 <tcp_tmr+0x28>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	3301      	adds	r3, #1
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	4b05      	ldr	r3, [pc, #20]	@ (800e0b4 <tcp_tmr+0x28>)
 800e09e:	701a      	strb	r2, [r3, #0]
 800e0a0:	4b04      	ldr	r3, [pc, #16]	@ (800e0b4 <tcp_tmr+0x28>)
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e0ac:	f000 fb54 	bl	800e758 <tcp_slowtmr>
  }
}
 800e0b0:	bf00      	nop
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	2000848d 	.word	0x2000848d

0800e0b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d105      	bne.n	800e0d4 <tcp_remove_listener+0x1c>
 800e0c8:	4b0d      	ldr	r3, [pc, #52]	@ (800e100 <tcp_remove_listener+0x48>)
 800e0ca:	22ff      	movs	r2, #255	@ 0xff
 800e0cc:	490d      	ldr	r1, [pc, #52]	@ (800e104 <tcp_remove_listener+0x4c>)
 800e0ce:	480e      	ldr	r0, [pc, #56]	@ (800e108 <tcp_remove_listener+0x50>)
 800e0d0:	f008 ffa8 	bl	8017024 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	60fb      	str	r3, [r7, #12]
 800e0d8:	e00a      	b.n	800e0f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0de:	683a      	ldr	r2, [r7, #0]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d102      	bne.n	800e0ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1f1      	bne.n	800e0da <tcp_remove_listener+0x22>
    }
  }
}
 800e0f6:	bf00      	nop
 800e0f8:	bf00      	nop
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	0801891c 	.word	0x0801891c
 800e104:	080189a4 	.word	0x080189a4
 800e108:	08018960 	.word	0x08018960

0800e10c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <tcp_listen_closed+0x1c>
 800e11a:	4b14      	ldr	r3, [pc, #80]	@ (800e16c <tcp_listen_closed+0x60>)
 800e11c:	f240 1211 	movw	r2, #273	@ 0x111
 800e120:	4913      	ldr	r1, [pc, #76]	@ (800e170 <tcp_listen_closed+0x64>)
 800e122:	4814      	ldr	r0, [pc, #80]	@ (800e174 <tcp_listen_closed+0x68>)
 800e124:	f008 ff7e 	bl	8017024 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	7d1b      	ldrb	r3, [r3, #20]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d006      	beq.n	800e13e <tcp_listen_closed+0x32>
 800e130:	4b0e      	ldr	r3, [pc, #56]	@ (800e16c <tcp_listen_closed+0x60>)
 800e132:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e136:	4910      	ldr	r1, [pc, #64]	@ (800e178 <tcp_listen_closed+0x6c>)
 800e138:	480e      	ldr	r0, [pc, #56]	@ (800e174 <tcp_listen_closed+0x68>)
 800e13a:	f008 ff73 	bl	8017024 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e13e:	2301      	movs	r3, #1
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	e00b      	b.n	800e15c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e144:	4a0d      	ldr	r2, [pc, #52]	@ (800e17c <tcp_listen_closed+0x70>)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	6879      	ldr	r1, [r7, #4]
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff ffb1 	bl	800e0b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	3301      	adds	r3, #1
 800e15a:	60fb      	str	r3, [r7, #12]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d9f0      	bls.n	800e144 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e162:	bf00      	nop
 800e164:	bf00      	nop
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	0801891c 	.word	0x0801891c
 800e170:	080189cc 	.word	0x080189cc
 800e174:	08018960 	.word	0x08018960
 800e178:	080189d8 	.word	0x080189d8
 800e17c:	0801a920 	.word	0x0801a920

0800e180 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e180:	b5b0      	push	{r4, r5, r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af04      	add	r7, sp, #16
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d106      	bne.n	800e1a0 <tcp_close_shutdown+0x20>
 800e192:	4b63      	ldr	r3, [pc, #396]	@ (800e320 <tcp_close_shutdown+0x1a0>)
 800e194:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e198:	4962      	ldr	r1, [pc, #392]	@ (800e324 <tcp_close_shutdown+0x1a4>)
 800e19a:	4863      	ldr	r0, [pc, #396]	@ (800e328 <tcp_close_shutdown+0x1a8>)
 800e19c:	f008 ff42 	bl	8017024 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e1a0:	78fb      	ldrb	r3, [r7, #3]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d066      	beq.n	800e274 <tcp_close_shutdown+0xf4>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	7d1b      	ldrb	r3, [r3, #20]
 800e1aa:	2b04      	cmp	r3, #4
 800e1ac:	d003      	beq.n	800e1b6 <tcp_close_shutdown+0x36>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	7d1b      	ldrb	r3, [r3, #20]
 800e1b2:	2b07      	cmp	r3, #7
 800e1b4:	d15e      	bne.n	800e274 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d104      	bne.n	800e1c8 <tcp_close_shutdown+0x48>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1c2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e1c6:	d055      	beq.n	800e274 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	8b5b      	ldrh	r3, [r3, #26]
 800e1cc:	f003 0310 	and.w	r3, r3, #16
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d106      	bne.n	800e1e2 <tcp_close_shutdown+0x62>
 800e1d4:	4b52      	ldr	r3, [pc, #328]	@ (800e320 <tcp_close_shutdown+0x1a0>)
 800e1d6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e1da:	4954      	ldr	r1, [pc, #336]	@ (800e32c <tcp_close_shutdown+0x1ac>)
 800e1dc:	4852      	ldr	r0, [pc, #328]	@ (800e328 <tcp_close_shutdown+0x1a8>)
 800e1de:	f008 ff21 	bl	8017024 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e1ea:	687d      	ldr	r5, [r7, #4]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	8ad2      	ldrh	r2, [r2, #22]
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	8b09      	ldrh	r1, [r1, #24]
 800e1f8:	9102      	str	r1, [sp, #8]
 800e1fa:	9201      	str	r2, [sp, #4]
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	462b      	mov	r3, r5
 800e200:	4622      	mov	r2, r4
 800e202:	4601      	mov	r1, r0
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f004 fe8d 	bl	8012f24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f001 f8c8 	bl	800f3a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e210:	4b47      	ldr	r3, [pc, #284]	@ (800e330 <tcp_close_shutdown+0x1b0>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	429a      	cmp	r2, r3
 800e218:	d105      	bne.n	800e226 <tcp_close_shutdown+0xa6>
 800e21a:	4b45      	ldr	r3, [pc, #276]	@ (800e330 <tcp_close_shutdown+0x1b0>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	4a43      	ldr	r2, [pc, #268]	@ (800e330 <tcp_close_shutdown+0x1b0>)
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	e013      	b.n	800e24e <tcp_close_shutdown+0xce>
 800e226:	4b42      	ldr	r3, [pc, #264]	@ (800e330 <tcp_close_shutdown+0x1b0>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	60fb      	str	r3, [r7, #12]
 800e22c:	e00c      	b.n	800e248 <tcp_close_shutdown+0xc8>
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	429a      	cmp	r2, r3
 800e236:	d104      	bne.n	800e242 <tcp_close_shutdown+0xc2>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68da      	ldr	r2, [r3, #12]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	60da      	str	r2, [r3, #12]
 800e240:	e005      	b.n	800e24e <tcp_close_shutdown+0xce>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1ef      	bne.n	800e22e <tcp_close_shutdown+0xae>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	60da      	str	r2, [r3, #12]
 800e254:	4b37      	ldr	r3, [pc, #220]	@ (800e334 <tcp_close_shutdown+0x1b4>)
 800e256:	2201      	movs	r2, #1
 800e258:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e25a:	4b37      	ldr	r3, [pc, #220]	@ (800e338 <tcp_close_shutdown+0x1b8>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	429a      	cmp	r2, r3
 800e262:	d102      	bne.n	800e26a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e264:	f003 fd5c 	bl	8011d20 <tcp_trigger_input_pcb_close>
 800e268:	e002      	b.n	800e270 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7ff fed6 	bl	800e01c <tcp_free>
      }
      return ERR_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	e050      	b.n	800e316 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	7d1b      	ldrb	r3, [r3, #20]
 800e278:	2b02      	cmp	r3, #2
 800e27a:	d03b      	beq.n	800e2f4 <tcp_close_shutdown+0x174>
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	dc44      	bgt.n	800e30a <tcp_close_shutdown+0x18a>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <tcp_close_shutdown+0x10a>
 800e284:	2b01      	cmp	r3, #1
 800e286:	d02a      	beq.n	800e2de <tcp_close_shutdown+0x15e>
 800e288:	e03f      	b.n	800e30a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	8adb      	ldrh	r3, [r3, #22]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d021      	beq.n	800e2d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e292:	4b2a      	ldr	r3, [pc, #168]	@ (800e33c <tcp_close_shutdown+0x1bc>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d105      	bne.n	800e2a8 <tcp_close_shutdown+0x128>
 800e29c:	4b27      	ldr	r3, [pc, #156]	@ (800e33c <tcp_close_shutdown+0x1bc>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	4a26      	ldr	r2, [pc, #152]	@ (800e33c <tcp_close_shutdown+0x1bc>)
 800e2a4:	6013      	str	r3, [r2, #0]
 800e2a6:	e013      	b.n	800e2d0 <tcp_close_shutdown+0x150>
 800e2a8:	4b24      	ldr	r3, [pc, #144]	@ (800e33c <tcp_close_shutdown+0x1bc>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	60bb      	str	r3, [r7, #8]
 800e2ae:	e00c      	b.n	800e2ca <tcp_close_shutdown+0x14a>
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d104      	bne.n	800e2c4 <tcp_close_shutdown+0x144>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	68da      	ldr	r2, [r3, #12]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	60da      	str	r2, [r3, #12]
 800e2c2:	e005      	b.n	800e2d0 <tcp_close_shutdown+0x150>
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	60bb      	str	r3, [r7, #8]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1ef      	bne.n	800e2b0 <tcp_close_shutdown+0x130>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff fea0 	bl	800e01c <tcp_free>
      break;
 800e2dc:	e01a      	b.n	800e314 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff ff14 	bl	800e10c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e2e4:	6879      	ldr	r1, [r7, #4]
 800e2e6:	4816      	ldr	r0, [pc, #88]	@ (800e340 <tcp_close_shutdown+0x1c0>)
 800e2e8:	f001 f8aa 	bl	800f440 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff feb1 	bl	800e054 <tcp_free_listen>
      break;
 800e2f2:	e00f      	b.n	800e314 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e2f4:	6879      	ldr	r1, [r7, #4]
 800e2f6:	480e      	ldr	r0, [pc, #56]	@ (800e330 <tcp_close_shutdown+0x1b0>)
 800e2f8:	f001 f8a2 	bl	800f440 <tcp_pcb_remove>
 800e2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e334 <tcp_close_shutdown+0x1b4>)
 800e2fe:	2201      	movs	r2, #1
 800e300:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff fe8a 	bl	800e01c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e308:	e004      	b.n	800e314 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f81a 	bl	800e344 <tcp_close_shutdown_fin>
 800e310:	4603      	mov	r3, r0
 800e312:	e000      	b.n	800e316 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bdb0      	pop	{r4, r5, r7, pc}
 800e31e:	bf00      	nop
 800e320:	0801891c 	.word	0x0801891c
 800e324:	080189f0 	.word	0x080189f0
 800e328:	08018960 	.word	0x08018960
 800e32c:	08018a10 	.word	0x08018a10
 800e330:	20008484 	.word	0x20008484
 800e334:	2000848c 	.word	0x2000848c
 800e338:	200084c4 	.word	0x200084c4
 800e33c:	2000847c 	.word	0x2000847c
 800e340:	20008480 	.word	0x20008480

0800e344 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <tcp_close_shutdown_fin+0x1c>
 800e352:	4b2e      	ldr	r3, [pc, #184]	@ (800e40c <tcp_close_shutdown_fin+0xc8>)
 800e354:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e358:	492d      	ldr	r1, [pc, #180]	@ (800e410 <tcp_close_shutdown_fin+0xcc>)
 800e35a:	482e      	ldr	r0, [pc, #184]	@ (800e414 <tcp_close_shutdown_fin+0xd0>)
 800e35c:	f008 fe62 	bl	8017024 <iprintf>

  switch (pcb->state) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	7d1b      	ldrb	r3, [r3, #20]
 800e364:	2b07      	cmp	r3, #7
 800e366:	d020      	beq.n	800e3aa <tcp_close_shutdown_fin+0x66>
 800e368:	2b07      	cmp	r3, #7
 800e36a:	dc2b      	bgt.n	800e3c4 <tcp_close_shutdown_fin+0x80>
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d002      	beq.n	800e376 <tcp_close_shutdown_fin+0x32>
 800e370:	2b04      	cmp	r3, #4
 800e372:	d00d      	beq.n	800e390 <tcp_close_shutdown_fin+0x4c>
 800e374:	e026      	b.n	800e3c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f003 fee2 	bl	8012140 <tcp_send_fin>
 800e37c:	4603      	mov	r3, r0
 800e37e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d11f      	bne.n	800e3c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2205      	movs	r2, #5
 800e38c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e38e:	e01b      	b.n	800e3c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f003 fed5 	bl	8012140 <tcp_send_fin>
 800e396:	4603      	mov	r3, r0
 800e398:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d114      	bne.n	800e3cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2205      	movs	r2, #5
 800e3a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e3a8:	e010      	b.n	800e3cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f003 fec8 	bl	8012140 <tcp_send_fin>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e3b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d109      	bne.n	800e3d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2209      	movs	r2, #9
 800e3c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e3c2:	e005      	b.n	800e3d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	e01c      	b.n	800e402 <tcp_close_shutdown_fin+0xbe>
      break;
 800e3c8:	bf00      	nop
 800e3ca:	e002      	b.n	800e3d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e3cc:	bf00      	nop
 800e3ce:	e000      	b.n	800e3d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e3d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d103      	bne.n	800e3e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f003 ffee 	bl	80123bc <tcp_output>
 800e3e0:	e00d      	b.n	800e3fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3ea:	d108      	bne.n	800e3fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	8b5b      	ldrh	r3, [r3, #26]
 800e3f0:	f043 0308 	orr.w	r3, r3, #8
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	e001      	b.n	800e402 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	0801891c 	.word	0x0801891c
 800e410:	080189cc 	.word	0x080189cc
 800e414:	08018960 	.word	0x08018960

0800e418 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d109      	bne.n	800e43a <tcp_close+0x22>
 800e426:	4b0f      	ldr	r3, [pc, #60]	@ (800e464 <tcp_close+0x4c>)
 800e428:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e42c:	490e      	ldr	r1, [pc, #56]	@ (800e468 <tcp_close+0x50>)
 800e42e:	480f      	ldr	r0, [pc, #60]	@ (800e46c <tcp_close+0x54>)
 800e430:	f008 fdf8 	bl	8017024 <iprintf>
 800e434:	f06f 030f 	mvn.w	r3, #15
 800e438:	e00f      	b.n	800e45a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	7d1b      	ldrb	r3, [r3, #20]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d006      	beq.n	800e450 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8b5b      	ldrh	r3, [r3, #26]
 800e446:	f043 0310 	orr.w	r3, r3, #16
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e450:	2101      	movs	r1, #1
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff fe94 	bl	800e180 <tcp_close_shutdown>
 800e458:	4603      	mov	r3, r0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	0801891c 	.word	0x0801891c
 800e468:	08018a2c 	.word	0x08018a2c
 800e46c:	08018960 	.word	0x08018960

0800e470 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08e      	sub	sp, #56	@ 0x38
 800e474:	af04      	add	r7, sp, #16
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d107      	bne.n	800e490 <tcp_abandon+0x20>
 800e480:	4b52      	ldr	r3, [pc, #328]	@ (800e5cc <tcp_abandon+0x15c>)
 800e482:	f240 223d 	movw	r2, #573	@ 0x23d
 800e486:	4952      	ldr	r1, [pc, #328]	@ (800e5d0 <tcp_abandon+0x160>)
 800e488:	4852      	ldr	r0, [pc, #328]	@ (800e5d4 <tcp_abandon+0x164>)
 800e48a:	f008 fdcb 	bl	8017024 <iprintf>
 800e48e:	e099      	b.n	800e5c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	7d1b      	ldrb	r3, [r3, #20]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d106      	bne.n	800e4a6 <tcp_abandon+0x36>
 800e498:	4b4c      	ldr	r3, [pc, #304]	@ (800e5cc <tcp_abandon+0x15c>)
 800e49a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e49e:	494e      	ldr	r1, [pc, #312]	@ (800e5d8 <tcp_abandon+0x168>)
 800e4a0:	484c      	ldr	r0, [pc, #304]	@ (800e5d4 <tcp_abandon+0x164>)
 800e4a2:	f008 fdbf 	bl	8017024 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	7d1b      	ldrb	r3, [r3, #20]
 800e4aa:	2b0a      	cmp	r3, #10
 800e4ac:	d107      	bne.n	800e4be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	484a      	ldr	r0, [pc, #296]	@ (800e5dc <tcp_abandon+0x16c>)
 800e4b2:	f000 ffc5 	bl	800f440 <tcp_pcb_remove>
    tcp_free(pcb);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7ff fdb0 	bl	800e01c <tcp_free>
 800e4bc:	e082      	b.n	800e5c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	691b      	ldr	r3, [r3, #16]
 800e4de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	7d1b      	ldrb	r3, [r3, #20]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d126      	bne.n	800e536 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8adb      	ldrh	r3, [r3, #22]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d02e      	beq.n	800e54e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4f0:	4b3b      	ldr	r3, [pc, #236]	@ (800e5e0 <tcp_abandon+0x170>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d105      	bne.n	800e506 <tcp_abandon+0x96>
 800e4fa:	4b39      	ldr	r3, [pc, #228]	@ (800e5e0 <tcp_abandon+0x170>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	4a37      	ldr	r2, [pc, #220]	@ (800e5e0 <tcp_abandon+0x170>)
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	e013      	b.n	800e52e <tcp_abandon+0xbe>
 800e506:	4b36      	ldr	r3, [pc, #216]	@ (800e5e0 <tcp_abandon+0x170>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	61fb      	str	r3, [r7, #28]
 800e50c:	e00c      	b.n	800e528 <tcp_abandon+0xb8>
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	429a      	cmp	r2, r3
 800e516:	d104      	bne.n	800e522 <tcp_abandon+0xb2>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	68da      	ldr	r2, [r3, #12]
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	60da      	str	r2, [r3, #12]
 800e520:	e005      	b.n	800e52e <tcp_abandon+0xbe>
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	61fb      	str	r3, [r7, #28]
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d1ef      	bne.n	800e50e <tcp_abandon+0x9e>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	60da      	str	r2, [r3, #12]
 800e534:	e00b      	b.n	800e54e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	8adb      	ldrh	r3, [r3, #22]
 800e53e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e540:	6879      	ldr	r1, [r7, #4]
 800e542:	4828      	ldr	r0, [pc, #160]	@ (800e5e4 <tcp_abandon+0x174>)
 800e544:	f000 ff7c 	bl	800f440 <tcp_pcb_remove>
 800e548:	4b27      	ldr	r3, [pc, #156]	@ (800e5e8 <tcp_abandon+0x178>)
 800e54a:	2201      	movs	r2, #1
 800e54c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e552:	2b00      	cmp	r3, #0
 800e554:	d004      	beq.n	800e560 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 fd1e 	bl	800ef9c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d004      	beq.n	800e572 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e56c:	4618      	mov	r0, r3
 800e56e:	f000 fd15 	bl	800ef9c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e576:	2b00      	cmp	r3, #0
 800e578:	d004      	beq.n	800e584 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 fd0c 	bl	800ef9c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00e      	beq.n	800e5a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3304      	adds	r3, #4
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	8b12      	ldrh	r2, [r2, #24]
 800e594:	9202      	str	r2, [sp, #8]
 800e596:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e598:	9201      	str	r2, [sp, #4]
 800e59a:	9300      	str	r3, [sp, #0]
 800e59c:	460b      	mov	r3, r1
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	69b9      	ldr	r1, [r7, #24]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f004 fcbe 	bl	8012f24 <tcp_rst>
    }
    last_state = pcb->state;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	7d1b      	ldrb	r3, [r3, #20]
 800e5ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff fd34 	bl	800e01c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d004      	beq.n	800e5c4 <tcp_abandon+0x154>
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f06f 010c 	mvn.w	r1, #12
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	4798      	blx	r3
  }
}
 800e5c4:	3728      	adds	r7, #40	@ 0x28
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	0801891c 	.word	0x0801891c
 800e5d0:	08018a60 	.word	0x08018a60
 800e5d4:	08018960 	.word	0x08018960
 800e5d8:	08018a7c 	.word	0x08018a7c
 800e5dc:	20008488 	.word	0x20008488
 800e5e0:	2000847c 	.word	0x2000847c
 800e5e4:	20008484 	.word	0x20008484
 800e5e8:	2000848c 	.word	0x2000848c

0800e5ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff ff3a 	bl	800e470 <tcp_abandon>
}
 800e5fc:	bf00      	nop
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d106      	bne.n	800e620 <tcp_update_rcv_ann_wnd+0x1c>
 800e612:	4b25      	ldr	r3, [pc, #148]	@ (800e6a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e614:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e618:	4924      	ldr	r1, [pc, #144]	@ (800e6ac <tcp_update_rcv_ann_wnd+0xa8>)
 800e61a:	4825      	ldr	r0, [pc, #148]	@ (800e6b0 <tcp_update_rcv_ann_wnd+0xac>)
 800e61c:	f008 fd02 	bl	8017024 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e628:	4413      	add	r3, r2
 800e62a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e634:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e638:	bf28      	it	cs
 800e63a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e63e:	b292      	uxth	r2, r2
 800e640:	4413      	add	r3, r2
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	db08      	blt.n	800e65c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	e020      	b.n	800e69e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	dd03      	ble.n	800e672 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e670:	e014      	b.n	800e69c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e684:	d306      	bcc.n	800e694 <tcp_update_rcv_ann_wnd+0x90>
 800e686:	4b08      	ldr	r3, [pc, #32]	@ (800e6a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e688:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e68c:	4909      	ldr	r1, [pc, #36]	@ (800e6b4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e68e:	4808      	ldr	r0, [pc, #32]	@ (800e6b0 <tcp_update_rcv_ann_wnd+0xac>)
 800e690:	f008 fcc8 	bl	8017024 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	b29a      	uxth	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e69c:	2300      	movs	r3, #0
  }
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0801891c 	.word	0x0801891c
 800e6ac:	08018b78 	.word	0x08018b78
 800e6b0:	08018960 	.word	0x08018960
 800e6b4:	08018b9c 	.word	0x08018b9c

0800e6b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d107      	bne.n	800e6da <tcp_recved+0x22>
 800e6ca:	4b1f      	ldr	r3, [pc, #124]	@ (800e748 <tcp_recved+0x90>)
 800e6cc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e6d0:	491e      	ldr	r1, [pc, #120]	@ (800e74c <tcp_recved+0x94>)
 800e6d2:	481f      	ldr	r0, [pc, #124]	@ (800e750 <tcp_recved+0x98>)
 800e6d4:	f008 fca6 	bl	8017024 <iprintf>
 800e6d8:	e032      	b.n	800e740 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	7d1b      	ldrb	r3, [r3, #20]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d106      	bne.n	800e6f0 <tcp_recved+0x38>
 800e6e2:	4b19      	ldr	r3, [pc, #100]	@ (800e748 <tcp_recved+0x90>)
 800e6e4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e6e8:	491a      	ldr	r1, [pc, #104]	@ (800e754 <tcp_recved+0x9c>)
 800e6ea:	4819      	ldr	r0, [pc, #100]	@ (800e750 <tcp_recved+0x98>)
 800e6ec:	f008 fc9a 	bl	8017024 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e6f4:	887b      	ldrh	r3, [r7, #2]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e6fa:	89fb      	ldrh	r3, [r7, #14]
 800e6fc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e700:	d804      	bhi.n	800e70c <tcp_recved+0x54>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e706:	89fa      	ldrh	r2, [r7, #14]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d204      	bcs.n	800e716 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e712:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e714:	e002      	b.n	800e71c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	89fa      	ldrh	r2, [r7, #14]
 800e71a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7ff ff71 	bl	800e604 <tcp_update_rcv_ann_wnd>
 800e722:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e72a:	d309      	bcc.n	800e740 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	8b5b      	ldrh	r3, [r3, #26]
 800e730:	f043 0302 	orr.w	r3, r3, #2
 800e734:	b29a      	uxth	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f003 fe3e 	bl	80123bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	0801891c 	.word	0x0801891c
 800e74c:	08018bb8 	.word	0x08018bb8
 800e750:	08018960 	.word	0x08018960
 800e754:	08018bd0 	.word	0x08018bd0

0800e758 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e758:	b5b0      	push	{r4, r5, r7, lr}
 800e75a:	b090      	sub	sp, #64	@ 0x40
 800e75c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e764:	4b95      	ldr	r3, [pc, #596]	@ (800e9bc <tcp_slowtmr+0x264>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3301      	adds	r3, #1
 800e76a:	4a94      	ldr	r2, [pc, #592]	@ (800e9bc <tcp_slowtmr+0x264>)
 800e76c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e76e:	4b94      	ldr	r3, [pc, #592]	@ (800e9c0 <tcp_slowtmr+0x268>)
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	3301      	adds	r3, #1
 800e774:	b2da      	uxtb	r2, r3
 800e776:	4b92      	ldr	r3, [pc, #584]	@ (800e9c0 <tcp_slowtmr+0x268>)
 800e778:	701a      	strb	r2, [r3, #0]
 800e77a:	e000      	b.n	800e77e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e77c:	bf00      	nop
  prev = NULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e782:	4b90      	ldr	r3, [pc, #576]	@ (800e9c4 <tcp_slowtmr+0x26c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e788:	e29d      	b.n	800ecc6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e78c:	7d1b      	ldrb	r3, [r3, #20]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d106      	bne.n	800e7a0 <tcp_slowtmr+0x48>
 800e792:	4b8d      	ldr	r3, [pc, #564]	@ (800e9c8 <tcp_slowtmr+0x270>)
 800e794:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e798:	498c      	ldr	r1, [pc, #560]	@ (800e9cc <tcp_slowtmr+0x274>)
 800e79a:	488d      	ldr	r0, [pc, #564]	@ (800e9d0 <tcp_slowtmr+0x278>)
 800e79c:	f008 fc42 	bl	8017024 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a2:	7d1b      	ldrb	r3, [r3, #20]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d106      	bne.n	800e7b6 <tcp_slowtmr+0x5e>
 800e7a8:	4b87      	ldr	r3, [pc, #540]	@ (800e9c8 <tcp_slowtmr+0x270>)
 800e7aa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e7ae:	4989      	ldr	r1, [pc, #548]	@ (800e9d4 <tcp_slowtmr+0x27c>)
 800e7b0:	4887      	ldr	r0, [pc, #540]	@ (800e9d0 <tcp_slowtmr+0x278>)
 800e7b2:	f008 fc37 	bl	8017024 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ba:	2b0a      	cmp	r3, #10
 800e7bc:	d106      	bne.n	800e7cc <tcp_slowtmr+0x74>
 800e7be:	4b82      	ldr	r3, [pc, #520]	@ (800e9c8 <tcp_slowtmr+0x270>)
 800e7c0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e7c4:	4984      	ldr	r1, [pc, #528]	@ (800e9d8 <tcp_slowtmr+0x280>)
 800e7c6:	4882      	ldr	r0, [pc, #520]	@ (800e9d0 <tcp_slowtmr+0x278>)
 800e7c8:	f008 fc2c 	bl	8017024 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ce:	7f9a      	ldrb	r2, [r3, #30]
 800e7d0:	4b7b      	ldr	r3, [pc, #492]	@ (800e9c0 <tcp_slowtmr+0x268>)
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d105      	bne.n	800e7e4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7da:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e7e2:	e270      	b.n	800ecc6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800e7e4:	4b76      	ldr	r3, [pc, #472]	@ (800e9c0 <tcp_slowtmr+0x268>)
 800e7e6:	781a      	ldrb	r2, [r3, #0]
 800e7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ea:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fa:	7d1b      	ldrb	r3, [r3, #20]
 800e7fc:	2b02      	cmp	r3, #2
 800e7fe:	d10a      	bne.n	800e816 <tcp_slowtmr+0xbe>
 800e800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e802:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e806:	2b05      	cmp	r3, #5
 800e808:	d905      	bls.n	800e816 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e80a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e80e:	3301      	adds	r3, #1
 800e810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e814:	e11e      	b.n	800ea54 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e81c:	2b0b      	cmp	r3, #11
 800e81e:	d905      	bls.n	800e82c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e824:	3301      	adds	r3, #1
 800e826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e82a:	e113      	b.n	800ea54 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e832:	2b00      	cmp	r3, #0
 800e834:	d075      	beq.n	800e922 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d006      	beq.n	800e84c <tcp_slowtmr+0xf4>
 800e83e:	4b62      	ldr	r3, [pc, #392]	@ (800e9c8 <tcp_slowtmr+0x270>)
 800e840:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e844:	4965      	ldr	r1, [pc, #404]	@ (800e9dc <tcp_slowtmr+0x284>)
 800e846:	4862      	ldr	r0, [pc, #392]	@ (800e9d0 <tcp_slowtmr+0x278>)
 800e848:	f008 fbec 	bl	8017024 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e850:	2b00      	cmp	r3, #0
 800e852:	d106      	bne.n	800e862 <tcp_slowtmr+0x10a>
 800e854:	4b5c      	ldr	r3, [pc, #368]	@ (800e9c8 <tcp_slowtmr+0x270>)
 800e856:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e85a:	4961      	ldr	r1, [pc, #388]	@ (800e9e0 <tcp_slowtmr+0x288>)
 800e85c:	485c      	ldr	r0, [pc, #368]	@ (800e9d0 <tcp_slowtmr+0x278>)
 800e85e:	f008 fbe1 	bl	8017024 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e864:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e868:	2b0b      	cmp	r3, #11
 800e86a:	d905      	bls.n	800e878 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e86c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e870:	3301      	adds	r3, #1
 800e872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e876:	e0ed      	b.n	800ea54 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e87e:	3b01      	subs	r3, #1
 800e880:	4a58      	ldr	r2, [pc, #352]	@ (800e9e4 <tcp_slowtmr+0x28c>)
 800e882:	5cd3      	ldrb	r3, [r2, r3]
 800e884:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e888:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e88c:	7c7a      	ldrb	r2, [r7, #17]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d907      	bls.n	800e8a2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e894:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e898:	3301      	adds	r3, #1
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e8a8:	7c7a      	ldrb	r2, [r7, #17]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	f200 80d2 	bhi.w	800ea54 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d108      	bne.n	800e8d0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e8be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e8c0:	f004 fc24 	bl	801310c <tcp_zero_window_probe>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d014      	beq.n	800e8f4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	623b      	str	r3, [r7, #32]
 800e8ce:	e011      	b.n	800e8f4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e8da:	f003 fae9 	bl	8011eb0 <tcp_split_unsent_seg>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d107      	bne.n	800e8f4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e8e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e8e6:	f003 fd69 	bl	80123bc <tcp_output>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d101      	bne.n	800e8f4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 80ac 	beq.w	800ea54 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e906:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e90a:	2b06      	cmp	r3, #6
 800e90c:	f200 80a2 	bhi.w	800ea54 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e912:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e916:	3301      	adds	r3, #1
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e920:	e098      	b.n	800ea54 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e924:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e928:	2b00      	cmp	r3, #0
 800e92a:	db0f      	blt.n	800e94c <tcp_slowtmr+0x1f4>
 800e92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e932:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e936:	4293      	cmp	r3, r2
 800e938:	d008      	beq.n	800e94c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e940:	b29b      	uxth	r3, r3
 800e942:	3301      	adds	r3, #1
 800e944:	b29b      	uxth	r3, r3
 800e946:	b21a      	sxth	r2, r3
 800e948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e94a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e94e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e954:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e958:	429a      	cmp	r2, r3
 800e95a:	db7b      	blt.n	800ea54 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e95c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e95e:	f004 f821 	bl	80129a4 <tcp_rexmit_rto_prepare>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d007      	beq.n	800e978 <tcp_slowtmr+0x220>
 800e968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e96a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d171      	bne.n	800ea54 <tcp_slowtmr+0x2fc>
 800e970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e974:	2b00      	cmp	r3, #0
 800e976:	d06d      	beq.n	800ea54 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d03a      	beq.n	800e9f6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e986:	2b0c      	cmp	r3, #12
 800e988:	bf28      	it	cs
 800e98a:	230c      	movcs	r3, #12
 800e98c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e990:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e994:	10db      	asrs	r3, r3, #3
 800e996:	b21b      	sxth	r3, r3
 800e998:	461a      	mov	r2, r3
 800e99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e99c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e9a0:	4413      	add	r3, r2
 800e9a2:	7efa      	ldrb	r2, [r7, #27]
 800e9a4:	4910      	ldr	r1, [pc, #64]	@ (800e9e8 <tcp_slowtmr+0x290>)
 800e9a6:	5c8a      	ldrb	r2, [r1, r2]
 800e9a8:	4093      	lsls	r3, r2
 800e9aa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	dc1a      	bgt.n	800e9ec <tcp_slowtmr+0x294>
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	b21a      	sxth	r2, r3
 800e9ba:	e019      	b.n	800e9f0 <tcp_slowtmr+0x298>
 800e9bc:	20008478 	.word	0x20008478
 800e9c0:	2000848e 	.word	0x2000848e
 800e9c4:	20008484 	.word	0x20008484
 800e9c8:	0801891c 	.word	0x0801891c
 800e9cc:	08018c60 	.word	0x08018c60
 800e9d0:	08018960 	.word	0x08018960
 800e9d4:	08018c8c 	.word	0x08018c8c
 800e9d8:	08018cb8 	.word	0x08018cb8
 800e9dc:	08018ce8 	.word	0x08018ce8
 800e9e0:	08018d1c 	.word	0x08018d1c
 800e9e4:	0801a918 	.word	0x0801a918
 800e9e8:	0801a908 	.word	0x0801a908
 800e9ec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ea02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	bf28      	it	cs
 800ea0c:	4613      	movcs	r3, r2
 800ea0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ea10:	8a7b      	ldrh	r3, [r7, #18]
 800ea12:	085b      	lsrs	r3, r3, #1
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ea1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ea22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ea26:	005b      	lsls	r3, r3, #1
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d206      	bcs.n	800ea3c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ea2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ea32:	005b      	lsls	r3, r3, #1
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ea3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea3e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ea40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ea46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ea4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea50:	f004 f818 	bl	8012a84 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ea54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea56:	7d1b      	ldrb	r3, [r3, #20]
 800ea58:	2b06      	cmp	r3, #6
 800ea5a:	d111      	bne.n	800ea80 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ea5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5e:	8b5b      	ldrh	r3, [r3, #26]
 800ea60:	f003 0310 	and.w	r3, r3, #16
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00b      	beq.n	800ea80 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea68:	4b9c      	ldr	r3, [pc, #624]	@ (800ecdc <tcp_slowtmr+0x584>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6e:	6a1b      	ldr	r3, [r3, #32]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	2b28      	cmp	r3, #40	@ 0x28
 800ea74:	d904      	bls.n	800ea80 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ea76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea82:	7a5b      	ldrb	r3, [r3, #9]
 800ea84:	f003 0308 	and.w	r3, r3, #8
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d04a      	beq.n	800eb22 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ea8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea90:	2b04      	cmp	r3, #4
 800ea92:	d003      	beq.n	800ea9c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ea94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ea98:	2b07      	cmp	r3, #7
 800ea9a:	d142      	bne.n	800eb22 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea9c:	4b8f      	ldr	r3, [pc, #572]	@ (800ecdc <tcp_slowtmr+0x584>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa2:	6a1b      	ldr	r3, [r3, #32]
 800eaa4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800eaa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800eaac:	4b8c      	ldr	r3, [pc, #560]	@ (800ece0 <tcp_slowtmr+0x588>)
 800eaae:	440b      	add	r3, r1
 800eab0:	498c      	ldr	r1, [pc, #560]	@ (800ece4 <tcp_slowtmr+0x58c>)
 800eab2:	fba1 1303 	umull	r1, r3, r1, r3
 800eab6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d90a      	bls.n	800ead2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800eabc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eac0:	3301      	adds	r3, #1
 800eac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800eac6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eaca:	3301      	adds	r3, #1
 800eacc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ead0:	e027      	b.n	800eb22 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ead2:	4b82      	ldr	r3, [pc, #520]	@ (800ecdc <tcp_slowtmr+0x584>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eade:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800eae8:	4618      	mov	r0, r3
 800eaea:	4b7f      	ldr	r3, [pc, #508]	@ (800ece8 <tcp_slowtmr+0x590>)
 800eaec:	fb00 f303 	mul.w	r3, r0, r3
 800eaf0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eaf2:	497c      	ldr	r1, [pc, #496]	@ (800ece4 <tcp_slowtmr+0x58c>)
 800eaf4:	fba1 1303 	umull	r1, r3, r1, r3
 800eaf8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d911      	bls.n	800eb22 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800eafe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb00:	f004 fac4 	bl	801308c <tcp_keepalive>
 800eb04:	4603      	mov	r3, r0
 800eb06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800eb0a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d107      	bne.n	800eb22 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800eb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb14:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800eb18:	3301      	adds	r3, #1
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800eb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d011      	beq.n	800eb4e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800eb2a:	4b6c      	ldr	r3, [pc, #432]	@ (800ecdc <tcp_slowtmr+0x584>)
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb30:	6a1b      	ldr	r3, [r3, #32]
 800eb32:	1ad2      	subs	r2, r2, r3
 800eb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb36:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	005b      	lsls	r3, r3, #1
 800eb40:	440b      	add	r3, r1
 800eb42:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d302      	bcc.n	800eb4e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800eb48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb4a:	f000 fddd 	bl	800f708 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800eb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb50:	7d1b      	ldrb	r3, [r3, #20]
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d10b      	bne.n	800eb6e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb56:	4b61      	ldr	r3, [pc, #388]	@ (800ecdc <tcp_slowtmr+0x584>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5c:	6a1b      	ldr	r3, [r3, #32]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	2b28      	cmp	r3, #40	@ 0x28
 800eb62:	d904      	bls.n	800eb6e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800eb64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb68:	3301      	adds	r3, #1
 800eb6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800eb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb70:	7d1b      	ldrb	r3, [r3, #20]
 800eb72:	2b09      	cmp	r3, #9
 800eb74:	d10b      	bne.n	800eb8e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb76:	4b59      	ldr	r3, [pc, #356]	@ (800ecdc <tcp_slowtmr+0x584>)
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	2bf0      	cmp	r3, #240	@ 0xf0
 800eb82:	d904      	bls.n	800eb8e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800eb84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb88:	3301      	adds	r3, #1
 800eb8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800eb8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d060      	beq.n	800ec58 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800eb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb9c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800eb9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eba0:	f000 fbfe 	bl	800f3a0 <tcp_pcb_purge>
      if (prev != NULL) {
 800eba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d010      	beq.n	800ebcc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ebaa:	4b50      	ldr	r3, [pc, #320]	@ (800ecec <tcp_slowtmr+0x594>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d106      	bne.n	800ebc2 <tcp_slowtmr+0x46a>
 800ebb4:	4b4e      	ldr	r3, [pc, #312]	@ (800ecf0 <tcp_slowtmr+0x598>)
 800ebb6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ebba:	494e      	ldr	r1, [pc, #312]	@ (800ecf4 <tcp_slowtmr+0x59c>)
 800ebbc:	484e      	ldr	r0, [pc, #312]	@ (800ecf8 <tcp_slowtmr+0x5a0>)
 800ebbe:	f008 fa31 	bl	8017024 <iprintf>
        prev->next = pcb->next;
 800ebc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc8:	60da      	str	r2, [r3, #12]
 800ebca:	e00f      	b.n	800ebec <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ebcc:	4b47      	ldr	r3, [pc, #284]	@ (800ecec <tcp_slowtmr+0x594>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d006      	beq.n	800ebe4 <tcp_slowtmr+0x48c>
 800ebd6:	4b46      	ldr	r3, [pc, #280]	@ (800ecf0 <tcp_slowtmr+0x598>)
 800ebd8:	f240 5271 	movw	r2, #1393	@ 0x571
 800ebdc:	4947      	ldr	r1, [pc, #284]	@ (800ecfc <tcp_slowtmr+0x5a4>)
 800ebde:	4846      	ldr	r0, [pc, #280]	@ (800ecf8 <tcp_slowtmr+0x5a0>)
 800ebe0:	f008 fa20 	bl	8017024 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ebe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	4a40      	ldr	r2, [pc, #256]	@ (800ecec <tcp_slowtmr+0x594>)
 800ebea:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ebec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d013      	beq.n	800ec1c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ebf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebfa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ebfc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ebfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec00:	3304      	adds	r3, #4
 800ec02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec04:	8ad2      	ldrh	r2, [r2, #22]
 800ec06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec08:	8b09      	ldrh	r1, [r1, #24]
 800ec0a:	9102      	str	r1, [sp, #8]
 800ec0c:	9201      	str	r2, [sp, #4]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	462b      	mov	r3, r5
 800ec12:	4622      	mov	r2, r4
 800ec14:	4601      	mov	r1, r0
 800ec16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec18:	f004 f984 	bl	8012f24 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ec1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ec22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec24:	7d1b      	ldrb	r3, [r3, #20]
 800ec26:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ec28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec2a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ec2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ec32:	6838      	ldr	r0, [r7, #0]
 800ec34:	f7ff f9f2 	bl	800e01c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ec38:	4b31      	ldr	r3, [pc, #196]	@ (800ed00 <tcp_slowtmr+0x5a8>)
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d004      	beq.n	800ec4e <tcp_slowtmr+0x4f6>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f06f 010c 	mvn.w	r1, #12
 800ec4a:	68b8      	ldr	r0, [r7, #8]
 800ec4c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ec4e:	4b2c      	ldr	r3, [pc, #176]	@ (800ed00 <tcp_slowtmr+0x5a8>)
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d037      	beq.n	800ecc6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ec56:	e592      	b.n	800e77e <tcp_slowtmr+0x26>
      prev = pcb;
 800ec58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ec5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ec62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec64:	7f1b      	ldrb	r3, [r3, #28]
 800ec66:	3301      	adds	r3, #1
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec6c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ec6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec70:	7f1a      	ldrb	r2, [r3, #28]
 800ec72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec74:	7f5b      	ldrb	r3, [r3, #29]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d325      	bcc.n	800ecc6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ec7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ec80:	4b1f      	ldr	r3, [pc, #124]	@ (800ed00 <tcp_slowtmr+0x5a8>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ec86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00b      	beq.n	800eca8 <tcp_slowtmr+0x550>
 800ec90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec98:	6912      	ldr	r2, [r2, #16]
 800ec9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec9c:	4610      	mov	r0, r2
 800ec9e:	4798      	blx	r3
 800eca0:	4603      	mov	r3, r0
 800eca2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800eca6:	e002      	b.n	800ecae <tcp_slowtmr+0x556>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800ecae:	4b14      	ldr	r3, [pc, #80]	@ (800ed00 <tcp_slowtmr+0x5a8>)
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f47f ad62 	bne.w	800e77c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ecb8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d102      	bne.n	800ecc6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ecc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecc2:	f003 fb7b 	bl	80123bc <tcp_output>
  while (pcb != NULL) {
 800ecc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f47f ad5e 	bne.w	800e78a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ecd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ed04 <tcp_slowtmr+0x5ac>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ecd8:	e069      	b.n	800edae <tcp_slowtmr+0x656>
 800ecda:	bf00      	nop
 800ecdc:	20008478 	.word	0x20008478
 800ece0:	000a4cb8 	.word	0x000a4cb8
 800ece4:	10624dd3 	.word	0x10624dd3
 800ece8:	000124f8 	.word	0x000124f8
 800ecec:	20008484 	.word	0x20008484
 800ecf0:	0801891c 	.word	0x0801891c
 800ecf4:	08018d54 	.word	0x08018d54
 800ecf8:	08018960 	.word	0x08018960
 800ecfc:	08018d80 	.word	0x08018d80
 800ed00:	2000848c 	.word	0x2000848c
 800ed04:	20008488 	.word	0x20008488
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ed08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed0a:	7d1b      	ldrb	r3, [r3, #20]
 800ed0c:	2b0a      	cmp	r3, #10
 800ed0e:	d006      	beq.n	800ed1e <tcp_slowtmr+0x5c6>
 800ed10:	4b2b      	ldr	r3, [pc, #172]	@ (800edc0 <tcp_slowtmr+0x668>)
 800ed12:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ed16:	492b      	ldr	r1, [pc, #172]	@ (800edc4 <tcp_slowtmr+0x66c>)
 800ed18:	482b      	ldr	r0, [pc, #172]	@ (800edc8 <tcp_slowtmr+0x670>)
 800ed1a:	f008 f983 	bl	8017024 <iprintf>
    pcb_remove = 0;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ed24:	4b29      	ldr	r3, [pc, #164]	@ (800edcc <tcp_slowtmr+0x674>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	2bf0      	cmp	r3, #240	@ 0xf0
 800ed30:	d904      	bls.n	800ed3c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ed32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed36:	3301      	adds	r3, #1
 800ed38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ed3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d02f      	beq.n	800eda4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ed44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed46:	f000 fb2b 	bl	800f3a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ed4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d010      	beq.n	800ed72 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ed50:	4b1f      	ldr	r3, [pc, #124]	@ (800edd0 <tcp_slowtmr+0x678>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d106      	bne.n	800ed68 <tcp_slowtmr+0x610>
 800ed5a:	4b19      	ldr	r3, [pc, #100]	@ (800edc0 <tcp_slowtmr+0x668>)
 800ed5c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ed60:	491c      	ldr	r1, [pc, #112]	@ (800edd4 <tcp_slowtmr+0x67c>)
 800ed62:	4819      	ldr	r0, [pc, #100]	@ (800edc8 <tcp_slowtmr+0x670>)
 800ed64:	f008 f95e 	bl	8017024 <iprintf>
        prev->next = pcb->next;
 800ed68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6a:	68da      	ldr	r2, [r3, #12]
 800ed6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6e:	60da      	str	r2, [r3, #12]
 800ed70:	e00f      	b.n	800ed92 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ed72:	4b17      	ldr	r3, [pc, #92]	@ (800edd0 <tcp_slowtmr+0x678>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d006      	beq.n	800ed8a <tcp_slowtmr+0x632>
 800ed7c:	4b10      	ldr	r3, [pc, #64]	@ (800edc0 <tcp_slowtmr+0x668>)
 800ed7e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ed82:	4915      	ldr	r1, [pc, #84]	@ (800edd8 <tcp_slowtmr+0x680>)
 800ed84:	4810      	ldr	r0, [pc, #64]	@ (800edc8 <tcp_slowtmr+0x670>)
 800ed86:	f008 f94d 	bl	8017024 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	4a10      	ldr	r2, [pc, #64]	@ (800edd0 <tcp_slowtmr+0x678>)
 800ed90:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ed92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed94:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ed96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ed9c:	69f8      	ldr	r0, [r7, #28]
 800ed9e:	f7ff f93d 	bl	800e01c <tcp_free>
 800eda2:	e004      	b.n	800edae <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800eda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800edae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1a9      	bne.n	800ed08 <tcp_slowtmr+0x5b0>
    }
  }
}
 800edb4:	bf00      	nop
 800edb6:	bf00      	nop
 800edb8:	3730      	adds	r7, #48	@ 0x30
 800edba:	46bd      	mov	sp, r7
 800edbc:	bdb0      	pop	{r4, r5, r7, pc}
 800edbe:	bf00      	nop
 800edc0:	0801891c 	.word	0x0801891c
 800edc4:	08018dac 	.word	0x08018dac
 800edc8:	08018960 	.word	0x08018960
 800edcc:	20008478 	.word	0x20008478
 800edd0:	20008488 	.word	0x20008488
 800edd4:	08018ddc 	.word	0x08018ddc
 800edd8:	08018e04 	.word	0x08018e04

0800eddc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ede2:	4b2d      	ldr	r3, [pc, #180]	@ (800ee98 <tcp_fasttmr+0xbc>)
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	3301      	adds	r3, #1
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	4b2b      	ldr	r3, [pc, #172]	@ (800ee98 <tcp_fasttmr+0xbc>)
 800edec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800edee:	4b2b      	ldr	r3, [pc, #172]	@ (800ee9c <tcp_fasttmr+0xc0>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800edf4:	e048      	b.n	800ee88 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	7f9a      	ldrb	r2, [r3, #30]
 800edfa:	4b27      	ldr	r3, [pc, #156]	@ (800ee98 <tcp_fasttmr+0xbc>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d03f      	beq.n	800ee82 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ee02:	4b25      	ldr	r3, [pc, #148]	@ (800ee98 <tcp_fasttmr+0xbc>)
 800ee04:	781a      	ldrb	r2, [r3, #0]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	8b5b      	ldrh	r3, [r3, #26]
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d010      	beq.n	800ee38 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	8b5b      	ldrh	r3, [r3, #26]
 800ee1a:	f043 0302 	orr.w	r3, r3, #2
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f003 fac9 	bl	80123bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	8b5b      	ldrh	r3, [r3, #26]
 800ee2e:	f023 0303 	bic.w	r3, r3, #3
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	8b5b      	ldrh	r3, [r3, #26]
 800ee3c:	f003 0308 	and.w	r3, r3, #8
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d009      	beq.n	800ee58 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	8b5b      	ldrh	r3, [r3, #26]
 800ee48:	f023 0308 	bic.w	r3, r3, #8
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7ff fa76 	bl	800e344 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00a      	beq.n	800ee7c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ee66:	4b0e      	ldr	r3, [pc, #56]	@ (800eea0 <tcp_fasttmr+0xc4>)
 800ee68:	2200      	movs	r2, #0
 800ee6a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 f819 	bl	800eea4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ee72:	4b0b      	ldr	r3, [pc, #44]	@ (800eea0 <tcp_fasttmr+0xc4>)
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d000      	beq.n	800ee7c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ee7a:	e7b8      	b.n	800edee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	607b      	str	r3, [r7, #4]
 800ee80:	e002      	b.n	800ee88 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d1b3      	bne.n	800edf6 <tcp_fasttmr+0x1a>
    }
  }
}
 800ee8e:	bf00      	nop
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	2000848e 	.word	0x2000848e
 800ee9c:	20008484 	.word	0x20008484
 800eea0:	2000848c 	.word	0x2000848c

0800eea4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eea4:	b590      	push	{r4, r7, lr}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d109      	bne.n	800eec6 <tcp_process_refused_data+0x22>
 800eeb2:	4b37      	ldr	r3, [pc, #220]	@ (800ef90 <tcp_process_refused_data+0xec>)
 800eeb4:	f240 6209 	movw	r2, #1545	@ 0x609
 800eeb8:	4936      	ldr	r1, [pc, #216]	@ (800ef94 <tcp_process_refused_data+0xf0>)
 800eeba:	4837      	ldr	r0, [pc, #220]	@ (800ef98 <tcp_process_refused_data+0xf4>)
 800eebc:	f008 f8b2 	bl	8017024 <iprintf>
 800eec0:	f06f 030f 	mvn.w	r3, #15
 800eec4:	e060      	b.n	800ef88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eeca:	7b5b      	ldrb	r3, [r3, #13]
 800eecc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eed2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00b      	beq.n	800eefc <tcp_process_refused_data+0x58>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6918      	ldr	r0, [r3, #16]
 800eeee:	2300      	movs	r3, #0
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	6879      	ldr	r1, [r7, #4]
 800eef4:	47a0      	blx	r4
 800eef6:	4603      	mov	r3, r0
 800eef8:	73fb      	strb	r3, [r7, #15]
 800eefa:	e007      	b.n	800ef0c <tcp_process_refused_data+0x68>
 800eefc:	2300      	movs	r3, #0
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	6879      	ldr	r1, [r7, #4]
 800ef02:	2000      	movs	r0, #0
 800ef04:	f000 f8a4 	bl	800f050 <tcp_recv_null>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ef0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d12a      	bne.n	800ef6a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ef14:	7bbb      	ldrb	r3, [r7, #14]
 800ef16:	f003 0320 	and.w	r3, r3, #32
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d033      	beq.n	800ef86 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef22:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ef26:	d005      	beq.n	800ef34 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00b      	beq.n	800ef56 <tcp_process_refused_data+0xb2>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6918      	ldr	r0, [r3, #16]
 800ef48:	2300      	movs	r3, #0
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	6879      	ldr	r1, [r7, #4]
 800ef4e:	47a0      	blx	r4
 800ef50:	4603      	mov	r3, r0
 800ef52:	73fb      	strb	r3, [r7, #15]
 800ef54:	e001      	b.n	800ef5a <tcp_process_refused_data+0xb6>
 800ef56:	2300      	movs	r3, #0
 800ef58:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ef5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef5e:	f113 0f0d 	cmn.w	r3, #13
 800ef62:	d110      	bne.n	800ef86 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ef64:	f06f 030c 	mvn.w	r3, #12
 800ef68:	e00e      	b.n	800ef88 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ef6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef6e:	f113 0f0d 	cmn.w	r3, #13
 800ef72:	d102      	bne.n	800ef7a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ef74:	f06f 030c 	mvn.w	r3, #12
 800ef78:	e006      	b.n	800ef88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ef80:	f06f 0304 	mvn.w	r3, #4
 800ef84:	e000      	b.n	800ef88 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3714      	adds	r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd90      	pop	{r4, r7, pc}
 800ef90:	0801891c 	.word	0x0801891c
 800ef94:	08018e2c 	.word	0x08018e2c
 800ef98:	08018960 	.word	0x08018960

0800ef9c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800efa4:	e007      	b.n	800efb6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 f80a 	bl	800efc6 <tcp_seg_free>
    seg = next;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1f4      	bne.n	800efa6 <tcp_segs_free+0xa>
  }
}
 800efbc:	bf00      	nop
 800efbe:	bf00      	nop
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b082      	sub	sp, #8
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00c      	beq.n	800efee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d004      	beq.n	800efe6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7fe fd6b 	bl	800dabc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800efe6:	6879      	ldr	r1, [r7, #4]
 800efe8:	2003      	movs	r0, #3
 800efea:	f7fd fef1 	bl	800cdd0 <memp_free>
  }
}
 800efee:	bf00      	nop
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
	...

0800eff8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d106      	bne.n	800f014 <tcp_seg_copy+0x1c>
 800f006:	4b0f      	ldr	r3, [pc, #60]	@ (800f044 <tcp_seg_copy+0x4c>)
 800f008:	f240 6282 	movw	r2, #1666	@ 0x682
 800f00c:	490e      	ldr	r1, [pc, #56]	@ (800f048 <tcp_seg_copy+0x50>)
 800f00e:	480f      	ldr	r0, [pc, #60]	@ (800f04c <tcp_seg_copy+0x54>)
 800f010:	f008 f808 	bl	8017024 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f014:	2003      	movs	r0, #3
 800f016:	f7fd fe6b 	bl	800ccf0 <memp_malloc>
 800f01a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d101      	bne.n	800f026 <tcp_seg_copy+0x2e>
    return NULL;
 800f022:	2300      	movs	r3, #0
 800f024:	e00a      	b.n	800f03c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f026:	2210      	movs	r2, #16
 800f028:	6879      	ldr	r1, [r7, #4]
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f008 f8d5 	bl	80171da <memcpy>
  pbuf_ref(cseg->p);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	4618      	mov	r0, r3
 800f036:	f7fe fde1 	bl	800dbfc <pbuf_ref>
  return cseg;
 800f03a:	68fb      	ldr	r3, [r7, #12]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	0801891c 	.word	0x0801891c
 800f048:	08018e70 	.word	0x08018e70
 800f04c:	08018960 	.word	0x08018960

0800f050 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d109      	bne.n	800f078 <tcp_recv_null+0x28>
 800f064:	4b12      	ldr	r3, [pc, #72]	@ (800f0b0 <tcp_recv_null+0x60>)
 800f066:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f06a:	4912      	ldr	r1, [pc, #72]	@ (800f0b4 <tcp_recv_null+0x64>)
 800f06c:	4812      	ldr	r0, [pc, #72]	@ (800f0b8 <tcp_recv_null+0x68>)
 800f06e:	f007 ffd9 	bl	8017024 <iprintf>
 800f072:	f06f 030f 	mvn.w	r3, #15
 800f076:	e016      	b.n	800f0a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d009      	beq.n	800f092 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	891b      	ldrh	r3, [r3, #8]
 800f082:	4619      	mov	r1, r3
 800f084:	68b8      	ldr	r0, [r7, #8]
 800f086:	f7ff fb17 	bl	800e6b8 <tcp_recved>
    pbuf_free(p);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7fe fd16 	bl	800dabc <pbuf_free>
 800f090:	e008      	b.n	800f0a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d104      	bne.n	800f0a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f09a:	68b8      	ldr	r0, [r7, #8]
 800f09c:	f7ff f9bc 	bl	800e418 <tcp_close>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	e000      	b.n	800f0a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0801891c 	.word	0x0801891c
 800f0b4:	08018e8c 	.word	0x08018e8c
 800f0b8:	08018960 	.word	0x08018960

0800f0bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b086      	sub	sp, #24
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f0c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	db01      	blt.n	800f0d2 <tcp_kill_prio+0x16>
 800f0ce:	79fb      	ldrb	r3, [r7, #7]
 800f0d0:	e000      	b.n	800f0d4 <tcp_kill_prio+0x18>
 800f0d2:	237f      	movs	r3, #127	@ 0x7f
 800f0d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f0d6:	7afb      	ldrb	r3, [r7, #11]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d034      	beq.n	800f146 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f0dc:	7afb      	ldrb	r3, [r7, #11]
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ea:	4b19      	ldr	r3, [pc, #100]	@ (800f150 <tcp_kill_prio+0x94>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	617b      	str	r3, [r7, #20]
 800f0f0:	e01f      	b.n	800f132 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	7d5b      	ldrb	r3, [r3, #21]
 800f0f6:	7afa      	ldrb	r2, [r7, #11]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d80c      	bhi.n	800f116 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f100:	7afa      	ldrb	r2, [r7, #11]
 800f102:	429a      	cmp	r2, r3
 800f104:	d112      	bne.n	800f12c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f106:	4b13      	ldr	r3, [pc, #76]	@ (800f154 <tcp_kill_prio+0x98>)
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	6a1b      	ldr	r3, [r3, #32]
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	429a      	cmp	r2, r3
 800f114:	d80a      	bhi.n	800f12c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f116:	4b0f      	ldr	r3, [pc, #60]	@ (800f154 <tcp_kill_prio+0x98>)
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	7d5b      	ldrb	r3, [r3, #21]
 800f12a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	617b      	str	r3, [r7, #20]
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1dc      	bne.n	800f0f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d004      	beq.n	800f148 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f13e:	6938      	ldr	r0, [r7, #16]
 800f140:	f7ff fa54 	bl	800e5ec <tcp_abort>
 800f144:	e000      	b.n	800f148 <tcp_kill_prio+0x8c>
    return;
 800f146:	bf00      	nop
  }
}
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	20008484 	.word	0x20008484
 800f154:	20008478 	.word	0x20008478

0800f158 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b086      	sub	sp, #24
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	4603      	mov	r3, r0
 800f160:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f162:	79fb      	ldrb	r3, [r7, #7]
 800f164:	2b08      	cmp	r3, #8
 800f166:	d009      	beq.n	800f17c <tcp_kill_state+0x24>
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	2b09      	cmp	r3, #9
 800f16c:	d006      	beq.n	800f17c <tcp_kill_state+0x24>
 800f16e:	4b1a      	ldr	r3, [pc, #104]	@ (800f1d8 <tcp_kill_state+0x80>)
 800f170:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f174:	4919      	ldr	r1, [pc, #100]	@ (800f1dc <tcp_kill_state+0x84>)
 800f176:	481a      	ldr	r0, [pc, #104]	@ (800f1e0 <tcp_kill_state+0x88>)
 800f178:	f007 ff54 	bl	8017024 <iprintf>

  inactivity = 0;
 800f17c:	2300      	movs	r3, #0
 800f17e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f180:	2300      	movs	r3, #0
 800f182:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f184:	4b17      	ldr	r3, [pc, #92]	@ (800f1e4 <tcp_kill_state+0x8c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	617b      	str	r3, [r7, #20]
 800f18a:	e017      	b.n	800f1bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	7d1b      	ldrb	r3, [r3, #20]
 800f190:	79fa      	ldrb	r2, [r7, #7]
 800f192:	429a      	cmp	r2, r3
 800f194:	d10f      	bne.n	800f1b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f196:	4b14      	ldr	r3, [pc, #80]	@ (800f1e8 <tcp_kill_state+0x90>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	6a1b      	ldr	r3, [r3, #32]
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	68fa      	ldr	r2, [r7, #12]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d807      	bhi.n	800f1b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f1a6:	4b10      	ldr	r3, [pc, #64]	@ (800f1e8 <tcp_kill_state+0x90>)
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	6a1b      	ldr	r3, [r3, #32]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	617b      	str	r3, [r7, #20]
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d1e4      	bne.n	800f18c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d003      	beq.n	800f1d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	6938      	ldr	r0, [r7, #16]
 800f1cc:	f7ff f950 	bl	800e470 <tcp_abandon>
  }
}
 800f1d0:	bf00      	nop
 800f1d2:	3718      	adds	r7, #24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	0801891c 	.word	0x0801891c
 800f1dc:	08018ea8 	.word	0x08018ea8
 800f1e0:	08018960 	.word	0x08018960
 800f1e4:	20008484 	.word	0x20008484
 800f1e8:	20008478 	.word	0x20008478

0800f1ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1fa:	4b12      	ldr	r3, [pc, #72]	@ (800f244 <tcp_kill_timewait+0x58>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	e012      	b.n	800f228 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f202:	4b11      	ldr	r3, [pc, #68]	@ (800f248 <tcp_kill_timewait+0x5c>)
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d807      	bhi.n	800f222 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f212:	4b0d      	ldr	r3, [pc, #52]	@ (800f248 <tcp_kill_timewait+0x5c>)
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1e9      	bne.n	800f202 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f234:	68b8      	ldr	r0, [r7, #8]
 800f236:	f7ff f9d9 	bl	800e5ec <tcp_abort>
  }
}
 800f23a:	bf00      	nop
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20008488 	.word	0x20008488
 800f248:	20008478 	.word	0x20008478

0800f24c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f252:	4b10      	ldr	r3, [pc, #64]	@ (800f294 <tcp_handle_closepend+0x48>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f258:	e014      	b.n	800f284 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	8b5b      	ldrh	r3, [r3, #26]
 800f264:	f003 0308 	and.w	r3, r3, #8
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d009      	beq.n	800f280 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	8b5b      	ldrh	r3, [r3, #26]
 800f270:	f023 0308 	bic.w	r3, r3, #8
 800f274:	b29a      	uxth	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7ff f862 	bl	800e344 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1e7      	bne.n	800f25a <tcp_handle_closepend+0xe>
  }
}
 800f28a:	bf00      	nop
 800f28c:	bf00      	nop
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	20008484 	.word	0x20008484

0800f298 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2a2:	2001      	movs	r0, #1
 800f2a4:	f7fd fd24 	bl	800ccf0 <memp_malloc>
 800f2a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d126      	bne.n	800f2fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f2b0:	f7ff ffcc 	bl	800f24c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f2b4:	f7ff ff9a 	bl	800f1ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2b8:	2001      	movs	r0, #1
 800f2ba:	f7fd fd19 	bl	800ccf0 <memp_malloc>
 800f2be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d11b      	bne.n	800f2fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f2c6:	2009      	movs	r0, #9
 800f2c8:	f7ff ff46 	bl	800f158 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2cc:	2001      	movs	r0, #1
 800f2ce:	f7fd fd0f 	bl	800ccf0 <memp_malloc>
 800f2d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d111      	bne.n	800f2fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f2da:	2008      	movs	r0, #8
 800f2dc:	f7ff ff3c 	bl	800f158 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2e0:	2001      	movs	r0, #1
 800f2e2:	f7fd fd05 	bl	800ccf0 <memp_malloc>
 800f2e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d107      	bne.n	800f2fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fee3 	bl	800f0bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2f6:	2001      	movs	r0, #1
 800f2f8:	f7fd fcfa 	bl	800ccf0 <memp_malloc>
 800f2fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d03f      	beq.n	800f384 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f304:	229c      	movs	r2, #156	@ 0x9c
 800f306:	2100      	movs	r1, #0
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f007 fef0 	bl	80170ee <memset>
    pcb->prio = prio;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	79fa      	ldrb	r2, [r7, #7]
 800f312:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f31a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f324:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	22ff      	movs	r2, #255	@ 0xff
 800f332:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f33a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2206      	movs	r2, #6
 800f340:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2206      	movs	r2, #6
 800f348:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f350:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2201      	movs	r2, #1
 800f356:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f35a:	4b0d      	ldr	r3, [pc, #52]	@ (800f390 <tcp_alloc+0xf8>)
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f362:	4b0c      	ldr	r3, [pc, #48]	@ (800f394 <tcp_alloc+0xfc>)
 800f364:	781a      	ldrb	r2, [r3, #0]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f370:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	4a08      	ldr	r2, [pc, #32]	@ (800f398 <tcp_alloc+0x100>)
 800f378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	4a07      	ldr	r2, [pc, #28]	@ (800f39c <tcp_alloc+0x104>)
 800f380:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f384:	68fb      	ldr	r3, [r7, #12]
}
 800f386:	4618      	mov	r0, r3
 800f388:	3710      	adds	r7, #16
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	20008478 	.word	0x20008478
 800f394:	2000848e 	.word	0x2000848e
 800f398:	0800f051 	.word	0x0800f051
 800f39c:	006ddd00 	.word	0x006ddd00

0800f3a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d107      	bne.n	800f3be <tcp_pcb_purge+0x1e>
 800f3ae:	4b21      	ldr	r3, [pc, #132]	@ (800f434 <tcp_pcb_purge+0x94>)
 800f3b0:	f640 0251 	movw	r2, #2129	@ 0x851
 800f3b4:	4920      	ldr	r1, [pc, #128]	@ (800f438 <tcp_pcb_purge+0x98>)
 800f3b6:	4821      	ldr	r0, [pc, #132]	@ (800f43c <tcp_pcb_purge+0x9c>)
 800f3b8:	f007 fe34 	bl	8017024 <iprintf>
 800f3bc:	e037      	b.n	800f42e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	7d1b      	ldrb	r3, [r3, #20]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d033      	beq.n	800f42e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f3ca:	2b0a      	cmp	r3, #10
 800f3cc:	d02f      	beq.n	800f42e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d02b      	beq.n	800f42e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d007      	beq.n	800f3ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fe fb6a 	bl	800dabc <pbuf_free>
      pcb->refused_data = NULL;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d002      	beq.n	800f3fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f986 	bl	800f708 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f402:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff fdc7 	bl	800ef9c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f412:	4618      	mov	r0, r3
 800f414:	f7ff fdc2 	bl	800ef9c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	0801891c 	.word	0x0801891c
 800f438:	08018f68 	.word	0x08018f68
 800f43c:	08018960 	.word	0x08018960

0800f440 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d106      	bne.n	800f45e <tcp_pcb_remove+0x1e>
 800f450:	4b3e      	ldr	r3, [pc, #248]	@ (800f54c <tcp_pcb_remove+0x10c>)
 800f452:	f640 0283 	movw	r2, #2179	@ 0x883
 800f456:	493e      	ldr	r1, [pc, #248]	@ (800f550 <tcp_pcb_remove+0x110>)
 800f458:	483e      	ldr	r0, [pc, #248]	@ (800f554 <tcp_pcb_remove+0x114>)
 800f45a:	f007 fde3 	bl	8017024 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d106      	bne.n	800f472 <tcp_pcb_remove+0x32>
 800f464:	4b39      	ldr	r3, [pc, #228]	@ (800f54c <tcp_pcb_remove+0x10c>)
 800f466:	f640 0284 	movw	r2, #2180	@ 0x884
 800f46a:	493b      	ldr	r1, [pc, #236]	@ (800f558 <tcp_pcb_remove+0x118>)
 800f46c:	4839      	ldr	r0, [pc, #228]	@ (800f554 <tcp_pcb_remove+0x114>)
 800f46e:	f007 fdd9 	bl	8017024 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	683a      	ldr	r2, [r7, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d105      	bne.n	800f488 <tcp_pcb_remove+0x48>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	68da      	ldr	r2, [r3, #12]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	e013      	b.n	800f4b0 <tcp_pcb_remove+0x70>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	60fb      	str	r3, [r7, #12]
 800f48e:	e00c      	b.n	800f4aa <tcp_pcb_remove+0x6a>
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	683a      	ldr	r2, [r7, #0]
 800f496:	429a      	cmp	r2, r3
 800f498:	d104      	bne.n	800f4a4 <tcp_pcb_remove+0x64>
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	68da      	ldr	r2, [r3, #12]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	60da      	str	r2, [r3, #12]
 800f4a2:	e005      	b.n	800f4b0 <tcp_pcb_remove+0x70>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	60fb      	str	r3, [r7, #12]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d1ef      	bne.n	800f490 <tcp_pcb_remove+0x50>
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f4b6:	6838      	ldr	r0, [r7, #0]
 800f4b8:	f7ff ff72 	bl	800f3a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	7d1b      	ldrb	r3, [r3, #20]
 800f4c0:	2b0a      	cmp	r3, #10
 800f4c2:	d013      	beq.n	800f4ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d00f      	beq.n	800f4ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	8b5b      	ldrh	r3, [r3, #26]
 800f4d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d009      	beq.n	800f4ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	8b5b      	ldrh	r3, [r3, #26]
 800f4dc:	f043 0302 	orr.w	r3, r3, #2
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4e6:	6838      	ldr	r0, [r7, #0]
 800f4e8:	f002 ff68 	bl	80123bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	7d1b      	ldrb	r3, [r3, #20]
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d020      	beq.n	800f536 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d006      	beq.n	800f50a <tcp_pcb_remove+0xca>
 800f4fc:	4b13      	ldr	r3, [pc, #76]	@ (800f54c <tcp_pcb_remove+0x10c>)
 800f4fe:	f640 0293 	movw	r2, #2195	@ 0x893
 800f502:	4916      	ldr	r1, [pc, #88]	@ (800f55c <tcp_pcb_remove+0x11c>)
 800f504:	4813      	ldr	r0, [pc, #76]	@ (800f554 <tcp_pcb_remove+0x114>)
 800f506:	f007 fd8d 	bl	8017024 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d006      	beq.n	800f520 <tcp_pcb_remove+0xe0>
 800f512:	4b0e      	ldr	r3, [pc, #56]	@ (800f54c <tcp_pcb_remove+0x10c>)
 800f514:	f640 0294 	movw	r2, #2196	@ 0x894
 800f518:	4911      	ldr	r1, [pc, #68]	@ (800f560 <tcp_pcb_remove+0x120>)
 800f51a:	480e      	ldr	r0, [pc, #56]	@ (800f554 <tcp_pcb_remove+0x114>)
 800f51c:	f007 fd82 	bl	8017024 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f524:	2b00      	cmp	r3, #0
 800f526:	d006      	beq.n	800f536 <tcp_pcb_remove+0xf6>
 800f528:	4b08      	ldr	r3, [pc, #32]	@ (800f54c <tcp_pcb_remove+0x10c>)
 800f52a:	f640 0296 	movw	r2, #2198	@ 0x896
 800f52e:	490d      	ldr	r1, [pc, #52]	@ (800f564 <tcp_pcb_remove+0x124>)
 800f530:	4808      	ldr	r0, [pc, #32]	@ (800f554 <tcp_pcb_remove+0x114>)
 800f532:	f007 fd77 	bl	8017024 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	2200      	movs	r2, #0
 800f53a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	2200      	movs	r2, #0
 800f540:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f542:	bf00      	nop
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	0801891c 	.word	0x0801891c
 800f550:	08018f84 	.word	0x08018f84
 800f554:	08018960 	.word	0x08018960
 800f558:	08018fa0 	.word	0x08018fa0
 800f55c:	08018fc0 	.word	0x08018fc0
 800f560:	08018fd8 	.word	0x08018fd8
 800f564:	08018ff4 	.word	0x08018ff4

0800f568 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d106      	bne.n	800f584 <tcp_next_iss+0x1c>
 800f576:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a0 <tcp_next_iss+0x38>)
 800f578:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f57c:	4909      	ldr	r1, [pc, #36]	@ (800f5a4 <tcp_next_iss+0x3c>)
 800f57e:	480a      	ldr	r0, [pc, #40]	@ (800f5a8 <tcp_next_iss+0x40>)
 800f580:	f007 fd50 	bl	8017024 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f584:	4b09      	ldr	r3, [pc, #36]	@ (800f5ac <tcp_next_iss+0x44>)
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	4b09      	ldr	r3, [pc, #36]	@ (800f5b0 <tcp_next_iss+0x48>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4413      	add	r3, r2
 800f58e:	4a07      	ldr	r2, [pc, #28]	@ (800f5ac <tcp_next_iss+0x44>)
 800f590:	6013      	str	r3, [r2, #0]
  return iss;
 800f592:	4b06      	ldr	r3, [pc, #24]	@ (800f5ac <tcp_next_iss+0x44>)
 800f594:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f596:	4618      	mov	r0, r3
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	0801891c 	.word	0x0801891c
 800f5a4:	0801900c 	.word	0x0801900c
 800f5a8:	08018960 	.word	0x08018960
 800f5ac:	20000024 	.word	0x20000024
 800f5b0:	20008478 	.word	0x20008478

0800f5b4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
 800f5c0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d106      	bne.n	800f5d6 <tcp_eff_send_mss_netif+0x22>
 800f5c8:	4b14      	ldr	r3, [pc, #80]	@ (800f61c <tcp_eff_send_mss_netif+0x68>)
 800f5ca:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f5ce:	4914      	ldr	r1, [pc, #80]	@ (800f620 <tcp_eff_send_mss_netif+0x6c>)
 800f5d0:	4814      	ldr	r0, [pc, #80]	@ (800f624 <tcp_eff_send_mss_netif+0x70>)
 800f5d2:	f007 fd27 	bl	8017024 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f5dc:	89fb      	ldrh	r3, [r7, #14]
 800f5de:	e019      	b.n	800f614 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f5e4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f5e6:	8afb      	ldrh	r3, [r7, #22]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d012      	beq.n	800f612 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f5ec:	2328      	movs	r3, #40	@ 0x28
 800f5ee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f5f0:	8afa      	ldrh	r2, [r7, #22]
 800f5f2:	8abb      	ldrh	r3, [r7, #20]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d904      	bls.n	800f602 <tcp_eff_send_mss_netif+0x4e>
 800f5f8:	8afa      	ldrh	r2, [r7, #22]
 800f5fa:	8abb      	ldrh	r3, [r7, #20]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	e000      	b.n	800f604 <tcp_eff_send_mss_netif+0x50>
 800f602:	2300      	movs	r3, #0
 800f604:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f606:	8a7a      	ldrh	r2, [r7, #18]
 800f608:	89fb      	ldrh	r3, [r7, #14]
 800f60a:	4293      	cmp	r3, r2
 800f60c:	bf28      	it	cs
 800f60e:	4613      	movcs	r3, r2
 800f610:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f612:	89fb      	ldrh	r3, [r7, #14]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	0801891c 	.word	0x0801891c
 800f620:	08019028 	.word	0x08019028
 800f624:	08018960 	.word	0x08018960

0800f628 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d119      	bne.n	800f670 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f63c:	4b10      	ldr	r3, [pc, #64]	@ (800f680 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f63e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f642:	4910      	ldr	r1, [pc, #64]	@ (800f684 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f644:	4810      	ldr	r0, [pc, #64]	@ (800f688 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f646:	f007 fced 	bl	8017024 <iprintf>

  while (pcb != NULL) {
 800f64a:	e011      	b.n	800f670 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	429a      	cmp	r2, r3
 800f656:	d108      	bne.n	800f66a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f7fe ffc4 	bl	800e5ec <tcp_abort>
      pcb = next;
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	60fb      	str	r3, [r7, #12]
 800f668:	e002      	b.n	800f670 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1ea      	bne.n	800f64c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f676:	bf00      	nop
 800f678:	bf00      	nop
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	0801891c 	.word	0x0801891c
 800f684:	08019050 	.word	0x08019050
 800f688:	08018960 	.word	0x08018960

0800f68c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d02a      	beq.n	800f6f2 <tcp_netif_ip_addr_changed+0x66>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d026      	beq.n	800f6f2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f6a4:	4b15      	ldr	r3, [pc, #84]	@ (800f6fc <tcp_netif_ip_addr_changed+0x70>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff ffbc 	bl	800f628 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f6b0:	4b13      	ldr	r3, [pc, #76]	@ (800f700 <tcp_netif_ip_addr_changed+0x74>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7ff ffb6 	bl	800f628 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d017      	beq.n	800f6f2 <tcp_netif_ip_addr_changed+0x66>
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d013      	beq.n	800f6f2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800f704 <tcp_netif_ip_addr_changed+0x78>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	60fb      	str	r3, [r7, #12]
 800f6d0:	e00c      	b.n	800f6ec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d103      	bne.n	800f6e6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1ef      	bne.n	800f6d2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f6f2:	bf00      	nop
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	20008484 	.word	0x20008484
 800f700:	2000847c 	.word	0x2000847c
 800f704:	20008480 	.word	0x20008480

0800f708 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f714:	2b00      	cmp	r3, #0
 800f716:	d007      	beq.n	800f728 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7ff fc3d 	bl	800ef9c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f728:	bf00      	nop
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f730:	b590      	push	{r4, r7, lr}
 800f732:	b08d      	sub	sp, #52	@ 0x34
 800f734:	af04      	add	r7, sp, #16
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d105      	bne.n	800f74c <tcp_input+0x1c>
 800f740:	4b9b      	ldr	r3, [pc, #620]	@ (800f9b0 <tcp_input+0x280>)
 800f742:	2283      	movs	r2, #131	@ 0x83
 800f744:	499b      	ldr	r1, [pc, #620]	@ (800f9b4 <tcp_input+0x284>)
 800f746:	489c      	ldr	r0, [pc, #624]	@ (800f9b8 <tcp_input+0x288>)
 800f748:	f007 fc6c 	bl	8017024 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	4a9a      	ldr	r2, [pc, #616]	@ (800f9bc <tcp_input+0x28c>)
 800f752:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	895b      	ldrh	r3, [r3, #10]
 800f758:	2b13      	cmp	r3, #19
 800f75a:	f240 83d1 	bls.w	800ff00 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f75e:	4b98      	ldr	r3, [pc, #608]	@ (800f9c0 <tcp_input+0x290>)
 800f760:	695b      	ldr	r3, [r3, #20]
 800f762:	4a97      	ldr	r2, [pc, #604]	@ (800f9c0 <tcp_input+0x290>)
 800f764:	6812      	ldr	r2, [r2, #0]
 800f766:	4611      	mov	r1, r2
 800f768:	4618      	mov	r0, r3
 800f76a:	f005 ff01 	bl	8015570 <ip4_addr_isbroadcast_u32>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	f040 83c7 	bne.w	800ff04 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f776:	4b92      	ldr	r3, [pc, #584]	@ (800f9c0 <tcp_input+0x290>)
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f77e:	2be0      	cmp	r3, #224	@ 0xe0
 800f780:	f000 83c0 	beq.w	800ff04 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f784:	4b8d      	ldr	r3, [pc, #564]	@ (800f9bc <tcp_input+0x28c>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	899b      	ldrh	r3, [r3, #12]
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fc fe3b 	bl	800c408 <lwip_htons>
 800f792:	4603      	mov	r3, r0
 800f794:	0b1b      	lsrs	r3, r3, #12
 800f796:	b29b      	uxth	r3, r3
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f79e:	7cbb      	ldrb	r3, [r7, #18]
 800f7a0:	2b13      	cmp	r3, #19
 800f7a2:	f240 83b1 	bls.w	800ff08 <tcp_input+0x7d8>
 800f7a6:	7cbb      	ldrb	r3, [r7, #18]
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	891b      	ldrh	r3, [r3, #8]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	f200 83aa 	bhi.w	800ff08 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f7b4:	7cbb      	ldrb	r3, [r7, #18]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	3b14      	subs	r3, #20
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	4b81      	ldr	r3, [pc, #516]	@ (800f9c4 <tcp_input+0x294>)
 800f7be:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f7c0:	4b81      	ldr	r3, [pc, #516]	@ (800f9c8 <tcp_input+0x298>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	895a      	ldrh	r2, [r3, #10]
 800f7ca:	7cbb      	ldrb	r3, [r7, #18]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d309      	bcc.n	800f7e6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f7d2:	4b7c      	ldr	r3, [pc, #496]	@ (800f9c4 <tcp_input+0x294>)
 800f7d4:	881a      	ldrh	r2, [r3, #0]
 800f7d6:	4b7d      	ldr	r3, [pc, #500]	@ (800f9cc <tcp_input+0x29c>)
 800f7d8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f7da:	7cbb      	ldrb	r3, [r7, #18]
 800f7dc:	4619      	mov	r1, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f7fe f8e6 	bl	800d9b0 <pbuf_remove_header>
 800f7e4:	e04e      	b.n	800f884 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d105      	bne.n	800f7fa <tcp_input+0xca>
 800f7ee:	4b70      	ldr	r3, [pc, #448]	@ (800f9b0 <tcp_input+0x280>)
 800f7f0:	22c2      	movs	r2, #194	@ 0xc2
 800f7f2:	4977      	ldr	r1, [pc, #476]	@ (800f9d0 <tcp_input+0x2a0>)
 800f7f4:	4870      	ldr	r0, [pc, #448]	@ (800f9b8 <tcp_input+0x288>)
 800f7f6:	f007 fc15 	bl	8017024 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f7fa:	2114      	movs	r1, #20
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7fe f8d7 	bl	800d9b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	895a      	ldrh	r2, [r3, #10]
 800f806:	4b71      	ldr	r3, [pc, #452]	@ (800f9cc <tcp_input+0x29c>)
 800f808:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f80a:	4b6e      	ldr	r3, [pc, #440]	@ (800f9c4 <tcp_input+0x294>)
 800f80c:	881a      	ldrh	r2, [r3, #0]
 800f80e:	4b6f      	ldr	r3, [pc, #444]	@ (800f9cc <tcp_input+0x29c>)
 800f810:	881b      	ldrh	r3, [r3, #0]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f816:	4b6d      	ldr	r3, [pc, #436]	@ (800f9cc <tcp_input+0x29c>)
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	4619      	mov	r1, r3
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7fe f8c7 	bl	800d9b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	895b      	ldrh	r3, [r3, #10]
 800f828:	8a3a      	ldrh	r2, [r7, #16]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	f200 836e 	bhi.w	800ff0c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	4a64      	ldr	r2, [pc, #400]	@ (800f9c8 <tcp_input+0x298>)
 800f838:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	8a3a      	ldrh	r2, [r7, #16]
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f7fe f8b4 	bl	800d9b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	891a      	ldrh	r2, [r3, #8]
 800f84c:	8a3b      	ldrh	r3, [r7, #16]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	b29a      	uxth	r2, r3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	895b      	ldrh	r3, [r3, #10]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d005      	beq.n	800f86a <tcp_input+0x13a>
 800f85e:	4b54      	ldr	r3, [pc, #336]	@ (800f9b0 <tcp_input+0x280>)
 800f860:	22df      	movs	r2, #223	@ 0xdf
 800f862:	495c      	ldr	r1, [pc, #368]	@ (800f9d4 <tcp_input+0x2a4>)
 800f864:	4854      	ldr	r0, [pc, #336]	@ (800f9b8 <tcp_input+0x288>)
 800f866:	f007 fbdd 	bl	8017024 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	891a      	ldrh	r2, [r3, #8]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	891b      	ldrh	r3, [r3, #8]
 800f874:	429a      	cmp	r2, r3
 800f876:	d005      	beq.n	800f884 <tcp_input+0x154>
 800f878:	4b4d      	ldr	r3, [pc, #308]	@ (800f9b0 <tcp_input+0x280>)
 800f87a:	22e0      	movs	r2, #224	@ 0xe0
 800f87c:	4956      	ldr	r1, [pc, #344]	@ (800f9d8 <tcp_input+0x2a8>)
 800f87e:	484e      	ldr	r0, [pc, #312]	@ (800f9b8 <tcp_input+0x288>)
 800f880:	f007 fbd0 	bl	8017024 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f884:	4b4d      	ldr	r3, [pc, #308]	@ (800f9bc <tcp_input+0x28c>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	881b      	ldrh	r3, [r3, #0]
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	4a4b      	ldr	r2, [pc, #300]	@ (800f9bc <tcp_input+0x28c>)
 800f88e:	6814      	ldr	r4, [r2, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	f7fc fdb9 	bl	800c408 <lwip_htons>
 800f896:	4603      	mov	r3, r0
 800f898:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f89a:	4b48      	ldr	r3, [pc, #288]	@ (800f9bc <tcp_input+0x28c>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	885b      	ldrh	r3, [r3, #2]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4a46      	ldr	r2, [pc, #280]	@ (800f9bc <tcp_input+0x28c>)
 800f8a4:	6814      	ldr	r4, [r2, #0]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fc fdae 	bl	800c408 <lwip_htons>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f8b0:	4b42      	ldr	r3, [pc, #264]	@ (800f9bc <tcp_input+0x28c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	4a41      	ldr	r2, [pc, #260]	@ (800f9bc <tcp_input+0x28c>)
 800f8b8:	6814      	ldr	r4, [r2, #0]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fc fdba 	bl	800c434 <lwip_htonl>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	6063      	str	r3, [r4, #4]
 800f8c4:	6863      	ldr	r3, [r4, #4]
 800f8c6:	4a45      	ldr	r2, [pc, #276]	@ (800f9dc <tcp_input+0x2ac>)
 800f8c8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f8ca:	4b3c      	ldr	r3, [pc, #240]	@ (800f9bc <tcp_input+0x28c>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	4a3a      	ldr	r2, [pc, #232]	@ (800f9bc <tcp_input+0x28c>)
 800f8d2:	6814      	ldr	r4, [r2, #0]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fc fdad 	bl	800c434 <lwip_htonl>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	60a3      	str	r3, [r4, #8]
 800f8de:	68a3      	ldr	r3, [r4, #8]
 800f8e0:	4a3f      	ldr	r2, [pc, #252]	@ (800f9e0 <tcp_input+0x2b0>)
 800f8e2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f8e4:	4b35      	ldr	r3, [pc, #212]	@ (800f9bc <tcp_input+0x28c>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	89db      	ldrh	r3, [r3, #14]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	4a33      	ldr	r2, [pc, #204]	@ (800f9bc <tcp_input+0x28c>)
 800f8ee:	6814      	ldr	r4, [r2, #0]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fc fd89 	bl	800c408 <lwip_htons>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f8fa:	4b30      	ldr	r3, [pc, #192]	@ (800f9bc <tcp_input+0x28c>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	899b      	ldrh	r3, [r3, #12]
 800f900:	b29b      	uxth	r3, r3
 800f902:	4618      	mov	r0, r3
 800f904:	f7fc fd80 	bl	800c408 <lwip_htons>
 800f908:	4603      	mov	r3, r0
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f910:	b2da      	uxtb	r2, r3
 800f912:	4b34      	ldr	r3, [pc, #208]	@ (800f9e4 <tcp_input+0x2b4>)
 800f914:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	891a      	ldrh	r2, [r3, #8]
 800f91a:	4b33      	ldr	r3, [pc, #204]	@ (800f9e8 <tcp_input+0x2b8>)
 800f91c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f91e:	4b31      	ldr	r3, [pc, #196]	@ (800f9e4 <tcp_input+0x2b4>)
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	f003 0303 	and.w	r3, r3, #3
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00c      	beq.n	800f944 <tcp_input+0x214>
    tcplen++;
 800f92a:	4b2f      	ldr	r3, [pc, #188]	@ (800f9e8 <tcp_input+0x2b8>)
 800f92c:	881b      	ldrh	r3, [r3, #0]
 800f92e:	3301      	adds	r3, #1
 800f930:	b29a      	uxth	r2, r3
 800f932:	4b2d      	ldr	r3, [pc, #180]	@ (800f9e8 <tcp_input+0x2b8>)
 800f934:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	891a      	ldrh	r2, [r3, #8]
 800f93a:	4b2b      	ldr	r3, [pc, #172]	@ (800f9e8 <tcp_input+0x2b8>)
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	429a      	cmp	r2, r3
 800f940:	f200 82e6 	bhi.w	800ff10 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f944:	2300      	movs	r3, #0
 800f946:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f948:	4b28      	ldr	r3, [pc, #160]	@ (800f9ec <tcp_input+0x2bc>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	61fb      	str	r3, [r7, #28]
 800f94e:	e09d      	b.n	800fa8c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	7d1b      	ldrb	r3, [r3, #20]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d105      	bne.n	800f964 <tcp_input+0x234>
 800f958:	4b15      	ldr	r3, [pc, #84]	@ (800f9b0 <tcp_input+0x280>)
 800f95a:	22fb      	movs	r2, #251	@ 0xfb
 800f95c:	4924      	ldr	r1, [pc, #144]	@ (800f9f0 <tcp_input+0x2c0>)
 800f95e:	4816      	ldr	r0, [pc, #88]	@ (800f9b8 <tcp_input+0x288>)
 800f960:	f007 fb60 	bl	8017024 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	7d1b      	ldrb	r3, [r3, #20]
 800f968:	2b0a      	cmp	r3, #10
 800f96a:	d105      	bne.n	800f978 <tcp_input+0x248>
 800f96c:	4b10      	ldr	r3, [pc, #64]	@ (800f9b0 <tcp_input+0x280>)
 800f96e:	22fc      	movs	r2, #252	@ 0xfc
 800f970:	4920      	ldr	r1, [pc, #128]	@ (800f9f4 <tcp_input+0x2c4>)
 800f972:	4811      	ldr	r0, [pc, #68]	@ (800f9b8 <tcp_input+0x288>)
 800f974:	f007 fb56 	bl	8017024 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	7d1b      	ldrb	r3, [r3, #20]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d105      	bne.n	800f98c <tcp_input+0x25c>
 800f980:	4b0b      	ldr	r3, [pc, #44]	@ (800f9b0 <tcp_input+0x280>)
 800f982:	22fd      	movs	r2, #253	@ 0xfd
 800f984:	491c      	ldr	r1, [pc, #112]	@ (800f9f8 <tcp_input+0x2c8>)
 800f986:	480c      	ldr	r0, [pc, #48]	@ (800f9b8 <tcp_input+0x288>)
 800f988:	f007 fb4c 	bl	8017024 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	7a1b      	ldrb	r3, [r3, #8]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d033      	beq.n	800f9fc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	7a1a      	ldrb	r2, [r3, #8]
 800f998:	4b09      	ldr	r3, [pc, #36]	@ (800f9c0 <tcp_input+0x290>)
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d029      	beq.n	800f9fc <tcp_input+0x2cc>
      prev = pcb;
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	61bb      	str	r3, [r7, #24]
      continue;
 800f9ac:	e06b      	b.n	800fa86 <tcp_input+0x356>
 800f9ae:	bf00      	nop
 800f9b0:	08019084 	.word	0x08019084
 800f9b4:	080190b8 	.word	0x080190b8
 800f9b8:	080190d0 	.word	0x080190d0
 800f9bc:	200084a0 	.word	0x200084a0
 800f9c0:	2000555c 	.word	0x2000555c
 800f9c4:	200084a4 	.word	0x200084a4
 800f9c8:	200084a8 	.word	0x200084a8
 800f9cc:	200084a6 	.word	0x200084a6
 800f9d0:	080190f8 	.word	0x080190f8
 800f9d4:	08019108 	.word	0x08019108
 800f9d8:	08019114 	.word	0x08019114
 800f9dc:	200084b0 	.word	0x200084b0
 800f9e0:	200084b4 	.word	0x200084b4
 800f9e4:	200084bc 	.word	0x200084bc
 800f9e8:	200084ba 	.word	0x200084ba
 800f9ec:	20008484 	.word	0x20008484
 800f9f0:	08019134 	.word	0x08019134
 800f9f4:	0801915c 	.word	0x0801915c
 800f9f8:	08019188 	.word	0x08019188
    }

    if (pcb->remote_port == tcphdr->src &&
 800f9fc:	69fb      	ldr	r3, [r7, #28]
 800f9fe:	8b1a      	ldrh	r2, [r3, #24]
 800fa00:	4b72      	ldr	r3, [pc, #456]	@ (800fbcc <tcp_input+0x49c>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	881b      	ldrh	r3, [r3, #0]
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d13a      	bne.n	800fa82 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	8ada      	ldrh	r2, [r3, #22]
 800fa10:	4b6e      	ldr	r3, [pc, #440]	@ (800fbcc <tcp_input+0x49c>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	885b      	ldrh	r3, [r3, #2]
 800fa16:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d132      	bne.n	800fa82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	685a      	ldr	r2, [r3, #4]
 800fa20:	4b6b      	ldr	r3, [pc, #428]	@ (800fbd0 <tcp_input+0x4a0>)
 800fa22:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d12c      	bne.n	800fa82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	4b68      	ldr	r3, [pc, #416]	@ (800fbd0 <tcp_input+0x4a0>)
 800fa2e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d126      	bne.n	800fa82 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d106      	bne.n	800fa4c <tcp_input+0x31c>
 800fa3e:	4b65      	ldr	r3, [pc, #404]	@ (800fbd4 <tcp_input+0x4a4>)
 800fa40:	f240 120d 	movw	r2, #269	@ 0x10d
 800fa44:	4964      	ldr	r1, [pc, #400]	@ (800fbd8 <tcp_input+0x4a8>)
 800fa46:	4865      	ldr	r0, [pc, #404]	@ (800fbdc <tcp_input+0x4ac>)
 800fa48:	f007 faec 	bl	8017024 <iprintf>
      if (prev != NULL) {
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00a      	beq.n	800fa68 <tcp_input+0x338>
        prev->next = pcb->next;
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	68da      	ldr	r2, [r3, #12]
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fa5a:	4b61      	ldr	r3, [pc, #388]	@ (800fbe0 <tcp_input+0x4b0>)
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fa62:	4a5f      	ldr	r2, [pc, #380]	@ (800fbe0 <tcp_input+0x4b0>)
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	69fa      	ldr	r2, [r7, #28]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d111      	bne.n	800fa96 <tcp_input+0x366>
 800fa72:	4b58      	ldr	r3, [pc, #352]	@ (800fbd4 <tcp_input+0x4a4>)
 800fa74:	f240 1215 	movw	r2, #277	@ 0x115
 800fa78:	495a      	ldr	r1, [pc, #360]	@ (800fbe4 <tcp_input+0x4b4>)
 800fa7a:	4858      	ldr	r0, [pc, #352]	@ (800fbdc <tcp_input+0x4ac>)
 800fa7c:	f007 fad2 	bl	8017024 <iprintf>
      break;
 800fa80:	e009      	b.n	800fa96 <tcp_input+0x366>
    }
    prev = pcb;
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	61fb      	str	r3, [r7, #28]
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f47f af5e 	bne.w	800f950 <tcp_input+0x220>
 800fa94:	e000      	b.n	800fa98 <tcp_input+0x368>
      break;
 800fa96:	bf00      	nop
  }

  if (pcb == NULL) {
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f040 80aa 	bne.w	800fbf4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800faa0:	4b51      	ldr	r3, [pc, #324]	@ (800fbe8 <tcp_input+0x4b8>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	61fb      	str	r3, [r7, #28]
 800faa6:	e03f      	b.n	800fb28 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	7d1b      	ldrb	r3, [r3, #20]
 800faac:	2b0a      	cmp	r3, #10
 800faae:	d006      	beq.n	800fabe <tcp_input+0x38e>
 800fab0:	4b48      	ldr	r3, [pc, #288]	@ (800fbd4 <tcp_input+0x4a4>)
 800fab2:	f240 121f 	movw	r2, #287	@ 0x11f
 800fab6:	494d      	ldr	r1, [pc, #308]	@ (800fbec <tcp_input+0x4bc>)
 800fab8:	4848      	ldr	r0, [pc, #288]	@ (800fbdc <tcp_input+0x4ac>)
 800faba:	f007 fab3 	bl	8017024 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	7a1b      	ldrb	r3, [r3, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d009      	beq.n	800fada <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	7a1a      	ldrb	r2, [r3, #8]
 800faca:	4b41      	ldr	r3, [pc, #260]	@ (800fbd0 <tcp_input+0x4a0>)
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fad2:	3301      	adds	r3, #1
 800fad4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d122      	bne.n	800fb20 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	8b1a      	ldrh	r2, [r3, #24]
 800fade:	4b3b      	ldr	r3, [pc, #236]	@ (800fbcc <tcp_input+0x49c>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d11b      	bne.n	800fb22 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	8ada      	ldrh	r2, [r3, #22]
 800faee:	4b37      	ldr	r3, [pc, #220]	@ (800fbcc <tcp_input+0x49c>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	885b      	ldrh	r3, [r3, #2]
 800faf4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d113      	bne.n	800fb22 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	685a      	ldr	r2, [r3, #4]
 800fafe:	4b34      	ldr	r3, [pc, #208]	@ (800fbd0 <tcp_input+0x4a0>)
 800fb00:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d10d      	bne.n	800fb22 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	4b31      	ldr	r3, [pc, #196]	@ (800fbd0 <tcp_input+0x4a0>)
 800fb0c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d107      	bne.n	800fb22 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fb12:	69f8      	ldr	r0, [r7, #28]
 800fb14:	f000 fb56 	bl	80101c4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7fd ffcf 	bl	800dabc <pbuf_free>
        return;
 800fb1e:	e1fd      	b.n	800ff1c <tcp_input+0x7ec>
        continue;
 800fb20:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	61fb      	str	r3, [r7, #28]
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1bc      	bne.n	800faa8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb32:	4b2f      	ldr	r3, [pc, #188]	@ (800fbf0 <tcp_input+0x4c0>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e02a      	b.n	800fb90 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	7a1b      	ldrb	r3, [r3, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00c      	beq.n	800fb5c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	7a1a      	ldrb	r2, [r3, #8]
 800fb46:	4b22      	ldr	r3, [pc, #136]	@ (800fbd0 <tcp_input+0x4a0>)
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fb4e:	3301      	adds	r3, #1
 800fb50:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d002      	beq.n	800fb5c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	61bb      	str	r3, [r7, #24]
        continue;
 800fb5a:	e016      	b.n	800fb8a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	8ada      	ldrh	r2, [r3, #22]
 800fb60:	4b1a      	ldr	r3, [pc, #104]	@ (800fbcc <tcp_input+0x49c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	885b      	ldrh	r3, [r3, #2]
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d10c      	bne.n	800fb86 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	4b17      	ldr	r3, [pc, #92]	@ (800fbd0 <tcp_input+0x4a0>)
 800fb72:	695b      	ldr	r3, [r3, #20]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d00f      	beq.n	800fb98 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00d      	beq.n	800fb9a <tcp_input+0x46a>
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d009      	beq.n	800fb9a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	617b      	str	r3, [r7, #20]
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1d1      	bne.n	800fb3a <tcp_input+0x40a>
 800fb96:	e000      	b.n	800fb9a <tcp_input+0x46a>
            break;
 800fb98:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d029      	beq.n	800fbf4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00a      	beq.n	800fbbc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	68da      	ldr	r2, [r3, #12]
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fbae:	4b10      	ldr	r3, [pc, #64]	@ (800fbf0 <tcp_input+0x4c0>)
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fbb6:	4a0e      	ldr	r2, [pc, #56]	@ (800fbf0 <tcp_input+0x4c0>)
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fbbc:	6978      	ldr	r0, [r7, #20]
 800fbbe:	f000 fa03 	bl	800ffc8 <tcp_listen_input>
      }
      pbuf_free(p);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f7fd ff7a 	bl	800dabc <pbuf_free>
      return;
 800fbc8:	e1a8      	b.n	800ff1c <tcp_input+0x7ec>
 800fbca:	bf00      	nop
 800fbcc:	200084a0 	.word	0x200084a0
 800fbd0:	2000555c 	.word	0x2000555c
 800fbd4:	08019084 	.word	0x08019084
 800fbd8:	080191b0 	.word	0x080191b0
 800fbdc:	080190d0 	.word	0x080190d0
 800fbe0:	20008484 	.word	0x20008484
 800fbe4:	080191dc 	.word	0x080191dc
 800fbe8:	20008488 	.word	0x20008488
 800fbec:	08019208 	.word	0x08019208
 800fbf0:	20008480 	.word	0x20008480
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f000 8158 	beq.w	800feac <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fbfc:	4b95      	ldr	r3, [pc, #596]	@ (800fe54 <tcp_input+0x724>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	891a      	ldrh	r2, [r3, #8]
 800fc06:	4b93      	ldr	r3, [pc, #588]	@ (800fe54 <tcp_input+0x724>)
 800fc08:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fc0a:	4a92      	ldr	r2, [pc, #584]	@ (800fe54 <tcp_input+0x724>)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fc10:	4b91      	ldr	r3, [pc, #580]	@ (800fe58 <tcp_input+0x728>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a8f      	ldr	r2, [pc, #572]	@ (800fe54 <tcp_input+0x724>)
 800fc16:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fc18:	4b90      	ldr	r3, [pc, #576]	@ (800fe5c <tcp_input+0x72c>)
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fc1e:	4b90      	ldr	r3, [pc, #576]	@ (800fe60 <tcp_input+0x730>)
 800fc20:	2200      	movs	r2, #0
 800fc22:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fc24:	4b8f      	ldr	r3, [pc, #572]	@ (800fe64 <tcp_input+0x734>)
 800fc26:	2200      	movs	r2, #0
 800fc28:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fc2a:	4b8f      	ldr	r3, [pc, #572]	@ (800fe68 <tcp_input+0x738>)
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	f003 0308 	and.w	r3, r3, #8
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d006      	beq.n	800fc44 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	7b5b      	ldrb	r3, [r3, #13]
 800fc3a:	f043 0301 	orr.w	r3, r3, #1
 800fc3e:	b2da      	uxtb	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d017      	beq.n	800fc7c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc4c:	69f8      	ldr	r0, [r7, #28]
 800fc4e:	f7ff f929 	bl	800eea4 <tcp_process_refused_data>
 800fc52:	4603      	mov	r3, r0
 800fc54:	f113 0f0d 	cmn.w	r3, #13
 800fc58:	d007      	beq.n	800fc6a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00c      	beq.n	800fc7c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc62:	4b82      	ldr	r3, [pc, #520]	@ (800fe6c <tcp_input+0x73c>)
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d008      	beq.n	800fc7c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f040 80e3 	bne.w	800fe3a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fc74:	69f8      	ldr	r0, [r7, #28]
 800fc76:	f003 f9a7 	bl	8012fc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fc7a:	e0de      	b.n	800fe3a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fc7c:	4a7c      	ldr	r2, [pc, #496]	@ (800fe70 <tcp_input+0x740>)
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fc82:	69f8      	ldr	r0, [r7, #28]
 800fc84:	f000 fb18 	bl	80102b8 <tcp_process>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fc8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc90:	f113 0f0d 	cmn.w	r3, #13
 800fc94:	f000 80d3 	beq.w	800fe3e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fc98:	4b71      	ldr	r3, [pc, #452]	@ (800fe60 <tcp_input+0x730>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	f003 0308 	and.w	r3, r3, #8
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d015      	beq.n	800fcd0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d008      	beq.n	800fcc0 <tcp_input+0x590>
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcb4:	69fa      	ldr	r2, [r7, #28]
 800fcb6:	6912      	ldr	r2, [r2, #16]
 800fcb8:	f06f 010d 	mvn.w	r1, #13
 800fcbc:	4610      	mov	r0, r2
 800fcbe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fcc0:	69f9      	ldr	r1, [r7, #28]
 800fcc2:	486c      	ldr	r0, [pc, #432]	@ (800fe74 <tcp_input+0x744>)
 800fcc4:	f7ff fbbc 	bl	800f440 <tcp_pcb_remove>
        tcp_free(pcb);
 800fcc8:	69f8      	ldr	r0, [r7, #28]
 800fcca:	f7fe f9a7 	bl	800e01c <tcp_free>
 800fcce:	e0da      	b.n	800fe86 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fcd4:	4b63      	ldr	r3, [pc, #396]	@ (800fe64 <tcp_input+0x734>)
 800fcd6:	881b      	ldrh	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d01d      	beq.n	800fd18 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fcdc:	4b61      	ldr	r3, [pc, #388]	@ (800fe64 <tcp_input+0x734>)
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00a      	beq.n	800fd02 <tcp_input+0x5d2>
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcf2:	69fa      	ldr	r2, [r7, #28]
 800fcf4:	6910      	ldr	r0, [r2, #16]
 800fcf6:	89fa      	ldrh	r2, [r7, #14]
 800fcf8:	69f9      	ldr	r1, [r7, #28]
 800fcfa:	4798      	blx	r3
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	74fb      	strb	r3, [r7, #19]
 800fd00:	e001      	b.n	800fd06 <tcp_input+0x5d6>
 800fd02:	2300      	movs	r3, #0
 800fd04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fd06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd0a:	f113 0f0d 	cmn.w	r3, #13
 800fd0e:	f000 8098 	beq.w	800fe42 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fd12:	4b54      	ldr	r3, [pc, #336]	@ (800fe64 <tcp_input+0x734>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fd18:	69f8      	ldr	r0, [r7, #28]
 800fd1a:	f000 f915 	bl	800ff48 <tcp_input_delayed_close>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f040 8090 	bne.w	800fe46 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fd26:	4b4d      	ldr	r3, [pc, #308]	@ (800fe5c <tcp_input+0x72c>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d041      	beq.n	800fdb2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d006      	beq.n	800fd44 <tcp_input+0x614>
 800fd36:	4b50      	ldr	r3, [pc, #320]	@ (800fe78 <tcp_input+0x748>)
 800fd38:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fd3c:	494f      	ldr	r1, [pc, #316]	@ (800fe7c <tcp_input+0x74c>)
 800fd3e:	4850      	ldr	r0, [pc, #320]	@ (800fe80 <tcp_input+0x750>)
 800fd40:	f007 f970 	bl	8017024 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	8b5b      	ldrh	r3, [r3, #26]
 800fd48:	f003 0310 	and.w	r3, r3, #16
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d008      	beq.n	800fd62 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fd50:	4b42      	ldr	r3, [pc, #264]	@ (800fe5c <tcp_input+0x72c>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fd feb1 	bl	800dabc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fd5a:	69f8      	ldr	r0, [r7, #28]
 800fd5c:	f7fe fc46 	bl	800e5ec <tcp_abort>
            goto aborted;
 800fd60:	e091      	b.n	800fe86 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00c      	beq.n	800fd86 <tcp_input+0x656>
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	6918      	ldr	r0, [r3, #16]
 800fd76:	4b39      	ldr	r3, [pc, #228]	@ (800fe5c <tcp_input+0x72c>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	69f9      	ldr	r1, [r7, #28]
 800fd7e:	47a0      	blx	r4
 800fd80:	4603      	mov	r3, r0
 800fd82:	74fb      	strb	r3, [r7, #19]
 800fd84:	e008      	b.n	800fd98 <tcp_input+0x668>
 800fd86:	4b35      	ldr	r3, [pc, #212]	@ (800fe5c <tcp_input+0x72c>)
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	69f9      	ldr	r1, [r7, #28]
 800fd8e:	2000      	movs	r0, #0
 800fd90:	f7ff f95e 	bl	800f050 <tcp_recv_null>
 800fd94:	4603      	mov	r3, r0
 800fd96:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fd98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd9c:	f113 0f0d 	cmn.w	r3, #13
 800fda0:	d053      	beq.n	800fe4a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fda2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fdaa:	4b2c      	ldr	r3, [pc, #176]	@ (800fe5c <tcp_input+0x72c>)
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fdb2:	4b2b      	ldr	r3, [pc, #172]	@ (800fe60 <tcp_input+0x730>)
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	f003 0320 	and.w	r3, r3, #32
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d030      	beq.n	800fe20 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d009      	beq.n	800fdda <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdca:	7b5a      	ldrb	r2, [r3, #13]
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdd0:	f042 0220 	orr.w	r2, r2, #32
 800fdd4:	b2d2      	uxtb	r2, r2
 800fdd6:	735a      	strb	r2, [r3, #13]
 800fdd8:	e022      	b.n	800fe20 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdde:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fde2:	d005      	beq.n	800fdf0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fde8:	3301      	adds	r3, #1
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00b      	beq.n	800fe12 <tcp_input+0x6e2>
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	6918      	ldr	r0, [r3, #16]
 800fe04:	2300      	movs	r3, #0
 800fe06:	2200      	movs	r2, #0
 800fe08:	69f9      	ldr	r1, [r7, #28]
 800fe0a:	47a0      	blx	r4
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	74fb      	strb	r3, [r7, #19]
 800fe10:	e001      	b.n	800fe16 <tcp_input+0x6e6>
 800fe12:	2300      	movs	r3, #0
 800fe14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fe16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe1a:	f113 0f0d 	cmn.w	r3, #13
 800fe1e:	d016      	beq.n	800fe4e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fe20:	4b13      	ldr	r3, [pc, #76]	@ (800fe70 <tcp_input+0x740>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fe26:	69f8      	ldr	r0, [r7, #28]
 800fe28:	f000 f88e 	bl	800ff48 <tcp_input_delayed_close>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d128      	bne.n	800fe84 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fe32:	69f8      	ldr	r0, [r7, #28]
 800fe34:	f002 fac2 	bl	80123bc <tcp_output>
 800fe38:	e025      	b.n	800fe86 <tcp_input+0x756>
        goto aborted;
 800fe3a:	bf00      	nop
 800fe3c:	e023      	b.n	800fe86 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fe3e:	bf00      	nop
 800fe40:	e021      	b.n	800fe86 <tcp_input+0x756>
              goto aborted;
 800fe42:	bf00      	nop
 800fe44:	e01f      	b.n	800fe86 <tcp_input+0x756>
          goto aborted;
 800fe46:	bf00      	nop
 800fe48:	e01d      	b.n	800fe86 <tcp_input+0x756>
            goto aborted;
 800fe4a:	bf00      	nop
 800fe4c:	e01b      	b.n	800fe86 <tcp_input+0x756>
              goto aborted;
 800fe4e:	bf00      	nop
 800fe50:	e019      	b.n	800fe86 <tcp_input+0x756>
 800fe52:	bf00      	nop
 800fe54:	20008490 	.word	0x20008490
 800fe58:	200084a0 	.word	0x200084a0
 800fe5c:	200084c0 	.word	0x200084c0
 800fe60:	200084bd 	.word	0x200084bd
 800fe64:	200084b8 	.word	0x200084b8
 800fe68:	200084bc 	.word	0x200084bc
 800fe6c:	200084ba 	.word	0x200084ba
 800fe70:	200084c4 	.word	0x200084c4
 800fe74:	20008484 	.word	0x20008484
 800fe78:	08019084 	.word	0x08019084
 800fe7c:	08019238 	.word	0x08019238
 800fe80:	080190d0 	.word	0x080190d0
          goto aborted;
 800fe84:	bf00      	nop
    tcp_input_pcb = NULL;
 800fe86:	4b27      	ldr	r3, [pc, #156]	@ (800ff24 <tcp_input+0x7f4>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fe8c:	4b26      	ldr	r3, [pc, #152]	@ (800ff28 <tcp_input+0x7f8>)
 800fe8e:	2200      	movs	r2, #0
 800fe90:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fe92:	4b26      	ldr	r3, [pc, #152]	@ (800ff2c <tcp_input+0x7fc>)
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d03f      	beq.n	800ff1a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fe9a:	4b24      	ldr	r3, [pc, #144]	@ (800ff2c <tcp_input+0x7fc>)
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fd fe0c 	bl	800dabc <pbuf_free>
      inseg.p = NULL;
 800fea4:	4b21      	ldr	r3, [pc, #132]	@ (800ff2c <tcp_input+0x7fc>)
 800fea6:	2200      	movs	r2, #0
 800fea8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800feaa:	e036      	b.n	800ff1a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800feac:	4b20      	ldr	r3, [pc, #128]	@ (800ff30 <tcp_input+0x800>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	899b      	ldrh	r3, [r3, #12]
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7fc faa7 	bl	800c408 <lwip_htons>
 800feba:	4603      	mov	r3, r0
 800febc:	b2db      	uxtb	r3, r3
 800febe:	f003 0304 	and.w	r3, r3, #4
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d118      	bne.n	800fef8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fec6:	4b1b      	ldr	r3, [pc, #108]	@ (800ff34 <tcp_input+0x804>)
 800fec8:	6819      	ldr	r1, [r3, #0]
 800feca:	4b1b      	ldr	r3, [pc, #108]	@ (800ff38 <tcp_input+0x808>)
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	461a      	mov	r2, r3
 800fed0:	4b1a      	ldr	r3, [pc, #104]	@ (800ff3c <tcp_input+0x80c>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fed6:	4b16      	ldr	r3, [pc, #88]	@ (800ff30 <tcp_input+0x800>)
 800fed8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feda:	885b      	ldrh	r3, [r3, #2]
 800fedc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fede:	4a14      	ldr	r2, [pc, #80]	@ (800ff30 <tcp_input+0x800>)
 800fee0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee2:	8812      	ldrh	r2, [r2, #0]
 800fee4:	b292      	uxth	r2, r2
 800fee6:	9202      	str	r2, [sp, #8]
 800fee8:	9301      	str	r3, [sp, #4]
 800feea:	4b15      	ldr	r3, [pc, #84]	@ (800ff40 <tcp_input+0x810>)
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	4b15      	ldr	r3, [pc, #84]	@ (800ff44 <tcp_input+0x814>)
 800fef0:	4602      	mov	r2, r0
 800fef2:	2000      	movs	r0, #0
 800fef4:	f003 f816 	bl	8012f24 <tcp_rst>
    pbuf_free(p);
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7fd fddf 	bl	800dabc <pbuf_free>
  return;
 800fefe:	e00c      	b.n	800ff1a <tcp_input+0x7ea>
    goto dropped;
 800ff00:	bf00      	nop
 800ff02:	e006      	b.n	800ff12 <tcp_input+0x7e2>
    goto dropped;
 800ff04:	bf00      	nop
 800ff06:	e004      	b.n	800ff12 <tcp_input+0x7e2>
    goto dropped;
 800ff08:	bf00      	nop
 800ff0a:	e002      	b.n	800ff12 <tcp_input+0x7e2>
      goto dropped;
 800ff0c:	bf00      	nop
 800ff0e:	e000      	b.n	800ff12 <tcp_input+0x7e2>
      goto dropped;
 800ff10:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7fd fdd2 	bl	800dabc <pbuf_free>
 800ff18:	e000      	b.n	800ff1c <tcp_input+0x7ec>
  return;
 800ff1a:	bf00      	nop
}
 800ff1c:	3724      	adds	r7, #36	@ 0x24
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd90      	pop	{r4, r7, pc}
 800ff22:	bf00      	nop
 800ff24:	200084c4 	.word	0x200084c4
 800ff28:	200084c0 	.word	0x200084c0
 800ff2c:	20008490 	.word	0x20008490
 800ff30:	200084a0 	.word	0x200084a0
 800ff34:	200084b4 	.word	0x200084b4
 800ff38:	200084ba 	.word	0x200084ba
 800ff3c:	200084b0 	.word	0x200084b0
 800ff40:	2000556c 	.word	0x2000556c
 800ff44:	20005570 	.word	0x20005570

0800ff48 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <tcp_input_delayed_close+0x1c>
 800ff56:	4b17      	ldr	r3, [pc, #92]	@ (800ffb4 <tcp_input_delayed_close+0x6c>)
 800ff58:	f240 225a 	movw	r2, #602	@ 0x25a
 800ff5c:	4916      	ldr	r1, [pc, #88]	@ (800ffb8 <tcp_input_delayed_close+0x70>)
 800ff5e:	4817      	ldr	r0, [pc, #92]	@ (800ffbc <tcp_input_delayed_close+0x74>)
 800ff60:	f007 f860 	bl	8017024 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ff64:	4b16      	ldr	r3, [pc, #88]	@ (800ffc0 <tcp_input_delayed_close+0x78>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	f003 0310 	and.w	r3, r3, #16
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d01c      	beq.n	800ffaa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	8b5b      	ldrh	r3, [r3, #26]
 800ff74:	f003 0310 	and.w	r3, r3, #16
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10d      	bne.n	800ff98 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d008      	beq.n	800ff98 <tcp_input_delayed_close+0x50>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	6912      	ldr	r2, [r2, #16]
 800ff90:	f06f 010e 	mvn.w	r1, #14
 800ff94:	4610      	mov	r0, r2
 800ff96:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff98:	6879      	ldr	r1, [r7, #4]
 800ff9a:	480a      	ldr	r0, [pc, #40]	@ (800ffc4 <tcp_input_delayed_close+0x7c>)
 800ff9c:	f7ff fa50 	bl	800f440 <tcp_pcb_remove>
    tcp_free(pcb);
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7fe f83b 	bl	800e01c <tcp_free>
    return 1;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	e000      	b.n	800ffac <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ffaa:	2300      	movs	r3, #0
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	08019084 	.word	0x08019084
 800ffb8:	08019254 	.word	0x08019254
 800ffbc:	080190d0 	.word	0x080190d0
 800ffc0:	200084bd 	.word	0x200084bd
 800ffc4:	20008484 	.word	0x20008484

0800ffc8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ffc8:	b590      	push	{r4, r7, lr}
 800ffca:	b08b      	sub	sp, #44	@ 0x2c
 800ffcc:	af04      	add	r7, sp, #16
 800ffce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ffd0:	4b6f      	ldr	r3, [pc, #444]	@ (8010190 <tcp_listen_input+0x1c8>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	f003 0304 	and.w	r3, r3, #4
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f040 80d2 	bne.w	8010182 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d106      	bne.n	800fff2 <tcp_listen_input+0x2a>
 800ffe4:	4b6b      	ldr	r3, [pc, #428]	@ (8010194 <tcp_listen_input+0x1cc>)
 800ffe6:	f240 2281 	movw	r2, #641	@ 0x281
 800ffea:	496b      	ldr	r1, [pc, #428]	@ (8010198 <tcp_listen_input+0x1d0>)
 800ffec:	486b      	ldr	r0, [pc, #428]	@ (801019c <tcp_listen_input+0x1d4>)
 800ffee:	f007 f819 	bl	8017024 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fff2:	4b67      	ldr	r3, [pc, #412]	@ (8010190 <tcp_listen_input+0x1c8>)
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	f003 0310 	and.w	r3, r3, #16
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d019      	beq.n	8010032 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fffe:	4b68      	ldr	r3, [pc, #416]	@ (80101a0 <tcp_listen_input+0x1d8>)
 8010000:	6819      	ldr	r1, [r3, #0]
 8010002:	4b68      	ldr	r3, [pc, #416]	@ (80101a4 <tcp_listen_input+0x1dc>)
 8010004:	881b      	ldrh	r3, [r3, #0]
 8010006:	461a      	mov	r2, r3
 8010008:	4b67      	ldr	r3, [pc, #412]	@ (80101a8 <tcp_listen_input+0x1e0>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801000e:	4b67      	ldr	r3, [pc, #412]	@ (80101ac <tcp_listen_input+0x1e4>)
 8010010:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010012:	885b      	ldrh	r3, [r3, #2]
 8010014:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010016:	4a65      	ldr	r2, [pc, #404]	@ (80101ac <tcp_listen_input+0x1e4>)
 8010018:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001a:	8812      	ldrh	r2, [r2, #0]
 801001c:	b292      	uxth	r2, r2
 801001e:	9202      	str	r2, [sp, #8]
 8010020:	9301      	str	r3, [sp, #4]
 8010022:	4b63      	ldr	r3, [pc, #396]	@ (80101b0 <tcp_listen_input+0x1e8>)
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	4b63      	ldr	r3, [pc, #396]	@ (80101b4 <tcp_listen_input+0x1ec>)
 8010028:	4602      	mov	r2, r0
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f002 ff7a 	bl	8012f24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010030:	e0a9      	b.n	8010186 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010032:	4b57      	ldr	r3, [pc, #348]	@ (8010190 <tcp_listen_input+0x1c8>)
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	f003 0302 	and.w	r3, r3, #2
 801003a:	2b00      	cmp	r3, #0
 801003c:	f000 80a3 	beq.w	8010186 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7d5b      	ldrb	r3, [r3, #21]
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff f927 	bl	800f298 <tcp_alloc>
 801004a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d111      	bne.n	8010076 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	699b      	ldr	r3, [r3, #24]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00a      	beq.n	8010070 <tcp_listen_input+0xa8>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	699b      	ldr	r3, [r3, #24]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	6910      	ldr	r0, [r2, #16]
 8010062:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010066:	2100      	movs	r1, #0
 8010068:	4798      	blx	r3
 801006a:	4603      	mov	r3, r0
 801006c:	73bb      	strb	r3, [r7, #14]
      return;
 801006e:	e08b      	b.n	8010188 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010070:	23f0      	movs	r3, #240	@ 0xf0
 8010072:	73bb      	strb	r3, [r7, #14]
      return;
 8010074:	e088      	b.n	8010188 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010076:	4b50      	ldr	r3, [pc, #320]	@ (80101b8 <tcp_listen_input+0x1f0>)
 8010078:	695a      	ldr	r2, [r3, #20]
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801007e:	4b4e      	ldr	r3, [pc, #312]	@ (80101b8 <tcp_listen_input+0x1f0>)
 8010080:	691a      	ldr	r2, [r3, #16]
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8ada      	ldrh	r2, [r3, #22]
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801008e:	4b47      	ldr	r3, [pc, #284]	@ (80101ac <tcp_listen_input+0x1e4>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	b29a      	uxth	r2, r3
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	2203      	movs	r2, #3
 801009e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80100a0:	4b41      	ldr	r3, [pc, #260]	@ (80101a8 <tcp_listen_input+0x1e0>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	1c5a      	adds	r2, r3, #1
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80100b2:	6978      	ldr	r0, [r7, #20]
 80100b4:	f7ff fa58 	bl	800f568 <tcp_next_iss>
 80100b8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	693a      	ldr	r2, [r7, #16]
 80100be:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	693a      	ldr	r2, [r7, #16]
 80100ca:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80100d2:	4b35      	ldr	r3, [pc, #212]	@ (80101a8 <tcp_listen_input+0x1e0>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	1e5a      	subs	r2, r3, #1
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	691a      	ldr	r2, [r3, #16]
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	7a5b      	ldrb	r3, [r3, #9]
 80100ee:	f003 030c 	and.w	r3, r3, #12
 80100f2:	b2da      	uxtb	r2, r3
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	7a1a      	ldrb	r2, [r3, #8]
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010100:	4b2e      	ldr	r3, [pc, #184]	@ (80101bc <tcp_listen_input+0x1f4>)
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	60da      	str	r2, [r3, #12]
 8010108:	4a2c      	ldr	r2, [pc, #176]	@ (80101bc <tcp_listen_input+0x1f4>)
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	f003 f8cb 	bl	80132a8 <tcp_timer_needed>
 8010112:	4b2b      	ldr	r3, [pc, #172]	@ (80101c0 <tcp_listen_input+0x1f8>)
 8010114:	2201      	movs	r2, #1
 8010116:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010118:	6978      	ldr	r0, [r7, #20]
 801011a:	f001 fd8b 	bl	8011c34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801011e:	4b23      	ldr	r3, [pc, #140]	@ (80101ac <tcp_listen_input+0x1e4>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	89db      	ldrh	r3, [r3, #14]
 8010124:	b29a      	uxth	r2, r3
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	3304      	adds	r3, #4
 8010140:	4618      	mov	r0, r3
 8010142:	f004 ff7f 	bl	8015044 <ip4_route>
 8010146:	4601      	mov	r1, r0
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	3304      	adds	r3, #4
 801014c:	461a      	mov	r2, r3
 801014e:	4620      	mov	r0, r4
 8010150:	f7ff fa30 	bl	800f5b4 <tcp_eff_send_mss_netif>
 8010154:	4603      	mov	r3, r0
 8010156:	461a      	mov	r2, r3
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801015c:	2112      	movs	r1, #18
 801015e:	6978      	ldr	r0, [r7, #20]
 8010160:	f002 f83e 	bl	80121e0 <tcp_enqueue_flags>
 8010164:	4603      	mov	r3, r0
 8010166:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d004      	beq.n	801017a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010170:	2100      	movs	r1, #0
 8010172:	6978      	ldr	r0, [r7, #20]
 8010174:	f7fe f97c 	bl	800e470 <tcp_abandon>
      return;
 8010178:	e006      	b.n	8010188 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801017a:	6978      	ldr	r0, [r7, #20]
 801017c:	f002 f91e 	bl	80123bc <tcp_output>
  return;
 8010180:	e001      	b.n	8010186 <tcp_listen_input+0x1be>
    return;
 8010182:	bf00      	nop
 8010184:	e000      	b.n	8010188 <tcp_listen_input+0x1c0>
  return;
 8010186:	bf00      	nop
}
 8010188:	371c      	adds	r7, #28
 801018a:	46bd      	mov	sp, r7
 801018c:	bd90      	pop	{r4, r7, pc}
 801018e:	bf00      	nop
 8010190:	200084bc 	.word	0x200084bc
 8010194:	08019084 	.word	0x08019084
 8010198:	0801927c 	.word	0x0801927c
 801019c:	080190d0 	.word	0x080190d0
 80101a0:	200084b4 	.word	0x200084b4
 80101a4:	200084ba 	.word	0x200084ba
 80101a8:	200084b0 	.word	0x200084b0
 80101ac:	200084a0 	.word	0x200084a0
 80101b0:	2000556c 	.word	0x2000556c
 80101b4:	20005570 	.word	0x20005570
 80101b8:	2000555c 	.word	0x2000555c
 80101bc:	20008484 	.word	0x20008484
 80101c0:	2000848c 	.word	0x2000848c

080101c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af04      	add	r7, sp, #16
 80101ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80101cc:	4b2f      	ldr	r3, [pc, #188]	@ (801028c <tcp_timewait_input+0xc8>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	f003 0304 	and.w	r3, r3, #4
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d153      	bne.n	8010280 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d106      	bne.n	80101ec <tcp_timewait_input+0x28>
 80101de:	4b2c      	ldr	r3, [pc, #176]	@ (8010290 <tcp_timewait_input+0xcc>)
 80101e0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80101e4:	492b      	ldr	r1, [pc, #172]	@ (8010294 <tcp_timewait_input+0xd0>)
 80101e6:	482c      	ldr	r0, [pc, #176]	@ (8010298 <tcp_timewait_input+0xd4>)
 80101e8:	f006 ff1c 	bl	8017024 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80101ec:	4b27      	ldr	r3, [pc, #156]	@ (801028c <tcp_timewait_input+0xc8>)
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	f003 0302 	and.w	r3, r3, #2
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d02a      	beq.n	801024e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80101f8:	4b28      	ldr	r3, [pc, #160]	@ (801029c <tcp_timewait_input+0xd8>)
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010200:	1ad3      	subs	r3, r2, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	db2d      	blt.n	8010262 <tcp_timewait_input+0x9e>
 8010206:	4b25      	ldr	r3, [pc, #148]	@ (801029c <tcp_timewait_input+0xd8>)
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801020e:	6879      	ldr	r1, [r7, #4]
 8010210:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010212:	440b      	add	r3, r1
 8010214:	1ad3      	subs	r3, r2, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	dc23      	bgt.n	8010262 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801021a:	4b21      	ldr	r3, [pc, #132]	@ (80102a0 <tcp_timewait_input+0xdc>)
 801021c:	6819      	ldr	r1, [r3, #0]
 801021e:	4b21      	ldr	r3, [pc, #132]	@ (80102a4 <tcp_timewait_input+0xe0>)
 8010220:	881b      	ldrh	r3, [r3, #0]
 8010222:	461a      	mov	r2, r3
 8010224:	4b1d      	ldr	r3, [pc, #116]	@ (801029c <tcp_timewait_input+0xd8>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801022a:	4b1f      	ldr	r3, [pc, #124]	@ (80102a8 <tcp_timewait_input+0xe4>)
 801022c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801022e:	885b      	ldrh	r3, [r3, #2]
 8010230:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010232:	4a1d      	ldr	r2, [pc, #116]	@ (80102a8 <tcp_timewait_input+0xe4>)
 8010234:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010236:	8812      	ldrh	r2, [r2, #0]
 8010238:	b292      	uxth	r2, r2
 801023a:	9202      	str	r2, [sp, #8]
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	4b1b      	ldr	r3, [pc, #108]	@ (80102ac <tcp_timewait_input+0xe8>)
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	4b1b      	ldr	r3, [pc, #108]	@ (80102b0 <tcp_timewait_input+0xec>)
 8010244:	4602      	mov	r2, r0
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f002 fe6c 	bl	8012f24 <tcp_rst>
      return;
 801024c:	e01b      	b.n	8010286 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801024e:	4b0f      	ldr	r3, [pc, #60]	@ (801028c <tcp_timewait_input+0xc8>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	f003 0301 	and.w	r3, r3, #1
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801025a:	4b16      	ldr	r3, [pc, #88]	@ (80102b4 <tcp_timewait_input+0xf0>)
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010262:	4b10      	ldr	r3, [pc, #64]	@ (80102a4 <tcp_timewait_input+0xe0>)
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00c      	beq.n	8010284 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	8b5b      	ldrh	r3, [r3, #26]
 801026e:	f043 0302 	orr.w	r3, r3, #2
 8010272:	b29a      	uxth	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f002 f89f 	bl	80123bc <tcp_output>
  }
  return;
 801027e:	e001      	b.n	8010284 <tcp_timewait_input+0xc0>
    return;
 8010280:	bf00      	nop
 8010282:	e000      	b.n	8010286 <tcp_timewait_input+0xc2>
  return;
 8010284:	bf00      	nop
}
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	200084bc 	.word	0x200084bc
 8010290:	08019084 	.word	0x08019084
 8010294:	0801929c 	.word	0x0801929c
 8010298:	080190d0 	.word	0x080190d0
 801029c:	200084b0 	.word	0x200084b0
 80102a0:	200084b4 	.word	0x200084b4
 80102a4:	200084ba 	.word	0x200084ba
 80102a8:	200084a0 	.word	0x200084a0
 80102ac:	2000556c 	.word	0x2000556c
 80102b0:	20005570 	.word	0x20005570
 80102b4:	20008478 	.word	0x20008478

080102b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80102b8:	b590      	push	{r4, r7, lr}
 80102ba:	b08d      	sub	sp, #52	@ 0x34
 80102bc:	af04      	add	r7, sp, #16
 80102be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80102c4:	2300      	movs	r3, #0
 80102c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <tcp_process+0x24>
 80102ce:	4b9d      	ldr	r3, [pc, #628]	@ (8010544 <tcp_process+0x28c>)
 80102d0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80102d4:	499c      	ldr	r1, [pc, #624]	@ (8010548 <tcp_process+0x290>)
 80102d6:	489d      	ldr	r0, [pc, #628]	@ (801054c <tcp_process+0x294>)
 80102d8:	f006 fea4 	bl	8017024 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80102dc:	4b9c      	ldr	r3, [pc, #624]	@ (8010550 <tcp_process+0x298>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	f003 0304 	and.w	r3, r3, #4
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d04e      	beq.n	8010386 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	7d1b      	ldrb	r3, [r3, #20]
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d108      	bne.n	8010302 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102f4:	4b97      	ldr	r3, [pc, #604]	@ (8010554 <tcp_process+0x29c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d123      	bne.n	8010344 <tcp_process+0x8c>
        acceptable = 1;
 80102fc:	2301      	movs	r3, #1
 80102fe:	76fb      	strb	r3, [r7, #27]
 8010300:	e020      	b.n	8010344 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010306:	4b94      	ldr	r3, [pc, #592]	@ (8010558 <tcp_process+0x2a0>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	429a      	cmp	r2, r3
 801030c:	d102      	bne.n	8010314 <tcp_process+0x5c>
        acceptable = 1;
 801030e:	2301      	movs	r3, #1
 8010310:	76fb      	strb	r3, [r7, #27]
 8010312:	e017      	b.n	8010344 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010314:	4b90      	ldr	r3, [pc, #576]	@ (8010558 <tcp_process+0x2a0>)
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	2b00      	cmp	r3, #0
 8010320:	db10      	blt.n	8010344 <tcp_process+0x8c>
 8010322:	4b8d      	ldr	r3, [pc, #564]	@ (8010558 <tcp_process+0x2a0>)
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801032a:	6879      	ldr	r1, [r7, #4]
 801032c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801032e:	440b      	add	r3, r1
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	2b00      	cmp	r3, #0
 8010334:	dc06      	bgt.n	8010344 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	8b5b      	ldrh	r3, [r3, #26]
 801033a:	f043 0302 	orr.w	r3, r3, #2
 801033e:	b29a      	uxth	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010344:	7efb      	ldrb	r3, [r7, #27]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d01b      	beq.n	8010382 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	7d1b      	ldrb	r3, [r3, #20]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d106      	bne.n	8010360 <tcp_process+0xa8>
 8010352:	4b7c      	ldr	r3, [pc, #496]	@ (8010544 <tcp_process+0x28c>)
 8010354:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010358:	4980      	ldr	r1, [pc, #512]	@ (801055c <tcp_process+0x2a4>)
 801035a:	487c      	ldr	r0, [pc, #496]	@ (801054c <tcp_process+0x294>)
 801035c:	f006 fe62 	bl	8017024 <iprintf>
      recv_flags |= TF_RESET;
 8010360:	4b7f      	ldr	r3, [pc, #508]	@ (8010560 <tcp_process+0x2a8>)
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	f043 0308 	orr.w	r3, r3, #8
 8010368:	b2da      	uxtb	r2, r3
 801036a:	4b7d      	ldr	r3, [pc, #500]	@ (8010560 <tcp_process+0x2a8>)
 801036c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	8b5b      	ldrh	r3, [r3, #26]
 8010372:	f023 0301 	bic.w	r3, r3, #1
 8010376:	b29a      	uxth	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801037c:	f06f 030d 	mvn.w	r3, #13
 8010380:	e37a      	b.n	8010a78 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010382:	2300      	movs	r3, #0
 8010384:	e378      	b.n	8010a78 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010386:	4b72      	ldr	r3, [pc, #456]	@ (8010550 <tcp_process+0x298>)
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	f003 0302 	and.w	r3, r3, #2
 801038e:	2b00      	cmp	r3, #0
 8010390:	d010      	beq.n	80103b4 <tcp_process+0xfc>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	7d1b      	ldrb	r3, [r3, #20]
 8010396:	2b02      	cmp	r3, #2
 8010398:	d00c      	beq.n	80103b4 <tcp_process+0xfc>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	7d1b      	ldrb	r3, [r3, #20]
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d008      	beq.n	80103b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	8b5b      	ldrh	r3, [r3, #26]
 80103a6:	f043 0302 	orr.w	r3, r3, #2
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	e361      	b.n	8010a78 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	8b5b      	ldrh	r3, [r3, #26]
 80103b8:	f003 0310 	and.w	r3, r3, #16
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d103      	bne.n	80103c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80103c0:	4b68      	ldr	r3, [pc, #416]	@ (8010564 <tcp_process+0x2ac>)
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f001 fc2b 	bl	8011c34 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	7d1b      	ldrb	r3, [r3, #20]
 80103e2:	3b02      	subs	r3, #2
 80103e4:	2b07      	cmp	r3, #7
 80103e6:	f200 8337 	bhi.w	8010a58 <tcp_process+0x7a0>
 80103ea:	a201      	add	r2, pc, #4	@ (adr r2, 80103f0 <tcp_process+0x138>)
 80103ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f0:	08010411 	.word	0x08010411
 80103f4:	08010641 	.word	0x08010641
 80103f8:	080107b9 	.word	0x080107b9
 80103fc:	080107e3 	.word	0x080107e3
 8010400:	08010907 	.word	0x08010907
 8010404:	080107b9 	.word	0x080107b9
 8010408:	08010993 	.word	0x08010993
 801040c:	08010a23 	.word	0x08010a23
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010410:	4b4f      	ldr	r3, [pc, #316]	@ (8010550 <tcp_process+0x298>)
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	f003 0310 	and.w	r3, r3, #16
 8010418:	2b00      	cmp	r3, #0
 801041a:	f000 80e4 	beq.w	80105e6 <tcp_process+0x32e>
 801041e:	4b4c      	ldr	r3, [pc, #304]	@ (8010550 <tcp_process+0x298>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	f003 0302 	and.w	r3, r3, #2
 8010426:	2b00      	cmp	r3, #0
 8010428:	f000 80dd 	beq.w	80105e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010430:	1c5a      	adds	r2, r3, #1
 8010432:	4b48      	ldr	r3, [pc, #288]	@ (8010554 <tcp_process+0x29c>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	429a      	cmp	r2, r3
 8010438:	f040 80d5 	bne.w	80105e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801043c:	4b46      	ldr	r3, [pc, #280]	@ (8010558 <tcp_process+0x2a0>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	1c5a      	adds	r2, r3, #1
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801044e:	4b41      	ldr	r3, [pc, #260]	@ (8010554 <tcp_process+0x29c>)
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010456:	4b44      	ldr	r3, [pc, #272]	@ (8010568 <tcp_process+0x2b0>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	89db      	ldrh	r3, [r3, #14]
 801045c:	b29a      	uxth	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010470:	4b39      	ldr	r3, [pc, #228]	@ (8010558 <tcp_process+0x2a0>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	1e5a      	subs	r2, r3, #1
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2204      	movs	r2, #4
 801047e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	3304      	adds	r3, #4
 8010488:	4618      	mov	r0, r3
 801048a:	f004 fddb 	bl	8015044 <ip4_route>
 801048e:	4601      	mov	r1, r0
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3304      	adds	r3, #4
 8010494:	461a      	mov	r2, r3
 8010496:	4620      	mov	r0, r4
 8010498:	f7ff f88c 	bl	800f5b4 <tcp_eff_send_mss_netif>
 801049c:	4603      	mov	r3, r0
 801049e:	461a      	mov	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104a8:	009a      	lsls	r2, r3, #2
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104ae:	005b      	lsls	r3, r3, #1
 80104b0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80104b4:	428b      	cmp	r3, r1
 80104b6:	bf38      	it	cc
 80104b8:	460b      	movcc	r3, r1
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d204      	bcs.n	80104c8 <tcp_process+0x210>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	e00d      	b.n	80104e4 <tcp_process+0x22c>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104cc:	005b      	lsls	r3, r3, #1
 80104ce:	f241 121c 	movw	r2, #4380	@ 0x111c
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d904      	bls.n	80104e0 <tcp_process+0x228>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104da:	005b      	lsls	r3, r3, #1
 80104dc:	b29b      	uxth	r3, r3
 80104de:	e001      	b.n	80104e4 <tcp_process+0x22c>
 80104e0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d106      	bne.n	8010502 <tcp_process+0x24a>
 80104f4:	4b13      	ldr	r3, [pc, #76]	@ (8010544 <tcp_process+0x28c>)
 80104f6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80104fa:	491c      	ldr	r1, [pc, #112]	@ (801056c <tcp_process+0x2b4>)
 80104fc:	4813      	ldr	r0, [pc, #76]	@ (801054c <tcp_process+0x294>)
 80104fe:	f006 fd91 	bl	8017024 <iprintf>
        --pcb->snd_queuelen;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010508:	3b01      	subs	r3, #1
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010516:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d12a      	bne.n	8010574 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010522:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <tcp_process+0x280>
 801052a:	4b06      	ldr	r3, [pc, #24]	@ (8010544 <tcp_process+0x28c>)
 801052c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010530:	490f      	ldr	r1, [pc, #60]	@ (8010570 <tcp_process+0x2b8>)
 8010532:	4806      	ldr	r0, [pc, #24]	@ (801054c <tcp_process+0x294>)
 8010534:	f006 fd76 	bl	8017024 <iprintf>
          pcb->unsent = rseg->next;
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010540:	e01c      	b.n	801057c <tcp_process+0x2c4>
 8010542:	bf00      	nop
 8010544:	08019084 	.word	0x08019084
 8010548:	080192bc 	.word	0x080192bc
 801054c:	080190d0 	.word	0x080190d0
 8010550:	200084bc 	.word	0x200084bc
 8010554:	200084b4 	.word	0x200084b4
 8010558:	200084b0 	.word	0x200084b0
 801055c:	080192d8 	.word	0x080192d8
 8010560:	200084bd 	.word	0x200084bd
 8010564:	20008478 	.word	0x20008478
 8010568:	200084a0 	.word	0x200084a0
 801056c:	080192f8 	.word	0x080192f8
 8010570:	08019310 	.word	0x08019310
        } else {
          pcb->unacked = rseg->next;
 8010574:	69fb      	ldr	r3, [r7, #28]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801057c:	69f8      	ldr	r0, [r7, #28]
 801057e:	f7fe fd22 	bl	800efc6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010586:	2b00      	cmp	r3, #0
 8010588:	d104      	bne.n	8010594 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010590:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010592:	e006      	b.n	80105a2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00a      	beq.n	80105c2 <tcp_process+0x30a>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	6910      	ldr	r0, [r2, #16]
 80105b6:	2200      	movs	r2, #0
 80105b8:	6879      	ldr	r1, [r7, #4]
 80105ba:	4798      	blx	r3
 80105bc:	4603      	mov	r3, r0
 80105be:	76bb      	strb	r3, [r7, #26]
 80105c0:	e001      	b.n	80105c6 <tcp_process+0x30e>
 80105c2:	2300      	movs	r3, #0
 80105c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80105c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80105ca:	f113 0f0d 	cmn.w	r3, #13
 80105ce:	d102      	bne.n	80105d6 <tcp_process+0x31e>
          return ERR_ABRT;
 80105d0:	f06f 030c 	mvn.w	r3, #12
 80105d4:	e250      	b.n	8010a78 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8b5b      	ldrh	r3, [r3, #26]
 80105da:	f043 0302 	orr.w	r3, r3, #2
 80105de:	b29a      	uxth	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80105e4:	e23a      	b.n	8010a5c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80105e6:	4b98      	ldr	r3, [pc, #608]	@ (8010848 <tcp_process+0x590>)
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	f003 0310 	and.w	r3, r3, #16
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 8234 	beq.w	8010a5c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105f4:	4b95      	ldr	r3, [pc, #596]	@ (801084c <tcp_process+0x594>)
 80105f6:	6819      	ldr	r1, [r3, #0]
 80105f8:	4b95      	ldr	r3, [pc, #596]	@ (8010850 <tcp_process+0x598>)
 80105fa:	881b      	ldrh	r3, [r3, #0]
 80105fc:	461a      	mov	r2, r3
 80105fe:	4b95      	ldr	r3, [pc, #596]	@ (8010854 <tcp_process+0x59c>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010604:	4b94      	ldr	r3, [pc, #592]	@ (8010858 <tcp_process+0x5a0>)
 8010606:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010608:	885b      	ldrh	r3, [r3, #2]
 801060a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801060c:	4a92      	ldr	r2, [pc, #584]	@ (8010858 <tcp_process+0x5a0>)
 801060e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010610:	8812      	ldrh	r2, [r2, #0]
 8010612:	b292      	uxth	r2, r2
 8010614:	9202      	str	r2, [sp, #8]
 8010616:	9301      	str	r3, [sp, #4]
 8010618:	4b90      	ldr	r3, [pc, #576]	@ (801085c <tcp_process+0x5a4>)
 801061a:	9300      	str	r3, [sp, #0]
 801061c:	4b90      	ldr	r3, [pc, #576]	@ (8010860 <tcp_process+0x5a8>)
 801061e:	4602      	mov	r2, r0
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f002 fc7f 	bl	8012f24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801062c:	2b05      	cmp	r3, #5
 801062e:	f200 8215 	bhi.w	8010a5c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f002 fa4b 	bl	8012ad4 <tcp_rexmit_rto>
      break;
 801063e:	e20d      	b.n	8010a5c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010640:	4b81      	ldr	r3, [pc, #516]	@ (8010848 <tcp_process+0x590>)
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	f003 0310 	and.w	r3, r3, #16
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 80a1 	beq.w	8010790 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801064e:	4b7f      	ldr	r3, [pc, #508]	@ (801084c <tcp_process+0x594>)
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010656:	1ad3      	subs	r3, r2, r3
 8010658:	3b01      	subs	r3, #1
 801065a:	2b00      	cmp	r3, #0
 801065c:	db7e      	blt.n	801075c <tcp_process+0x4a4>
 801065e:	4b7b      	ldr	r3, [pc, #492]	@ (801084c <tcp_process+0x594>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	2b00      	cmp	r3, #0
 801066a:	dc77      	bgt.n	801075c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2204      	movs	r2, #4
 8010670:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010676:	2b00      	cmp	r3, #0
 8010678:	d102      	bne.n	8010680 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801067a:	23fa      	movs	r3, #250	@ 0xfa
 801067c:	76bb      	strb	r3, [r7, #26]
 801067e:	e01d      	b.n	80106bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d106      	bne.n	8010698 <tcp_process+0x3e0>
 801068a:	4b76      	ldr	r3, [pc, #472]	@ (8010864 <tcp_process+0x5ac>)
 801068c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010690:	4975      	ldr	r1, [pc, #468]	@ (8010868 <tcp_process+0x5b0>)
 8010692:	4876      	ldr	r0, [pc, #472]	@ (801086c <tcp_process+0x5b4>)
 8010694:	f006 fcc6 	bl	8017024 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00a      	beq.n	80106b8 <tcp_process+0x400>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106a6:	699b      	ldr	r3, [r3, #24]
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	6910      	ldr	r0, [r2, #16]
 80106ac:	2200      	movs	r2, #0
 80106ae:	6879      	ldr	r1, [r7, #4]
 80106b0:	4798      	blx	r3
 80106b2:	4603      	mov	r3, r0
 80106b4:	76bb      	strb	r3, [r7, #26]
 80106b6:	e001      	b.n	80106bc <tcp_process+0x404>
 80106b8:	23f0      	movs	r3, #240	@ 0xf0
 80106ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80106bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d00a      	beq.n	80106da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80106c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106c8:	f113 0f0d 	cmn.w	r3, #13
 80106cc:	d002      	beq.n	80106d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7fd ff8c 	bl	800e5ec <tcp_abort>
            }
            return ERR_ABRT;
 80106d4:	f06f 030c 	mvn.w	r3, #12
 80106d8:	e1ce      	b.n	8010a78 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 fae0 	bl	8010ca0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80106e0:	4b63      	ldr	r3, [pc, #396]	@ (8010870 <tcp_process+0x5b8>)
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d005      	beq.n	80106f4 <tcp_process+0x43c>
            recv_acked--;
 80106e8:	4b61      	ldr	r3, [pc, #388]	@ (8010870 <tcp_process+0x5b8>)
 80106ea:	881b      	ldrh	r3, [r3, #0]
 80106ec:	3b01      	subs	r3, #1
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	4b5f      	ldr	r3, [pc, #380]	@ (8010870 <tcp_process+0x5b8>)
 80106f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106f8:	009a      	lsls	r2, r3, #2
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106fe:	005b      	lsls	r3, r3, #1
 8010700:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010704:	428b      	cmp	r3, r1
 8010706:	bf38      	it	cc
 8010708:	460b      	movcc	r3, r1
 801070a:	429a      	cmp	r2, r3
 801070c:	d204      	bcs.n	8010718 <tcp_process+0x460>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	b29b      	uxth	r3, r3
 8010716:	e00d      	b.n	8010734 <tcp_process+0x47c>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801071c:	005b      	lsls	r3, r3, #1
 801071e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010722:	4293      	cmp	r3, r2
 8010724:	d904      	bls.n	8010730 <tcp_process+0x478>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801072a:	005b      	lsls	r3, r3, #1
 801072c:	b29b      	uxth	r3, r3
 801072e:	e001      	b.n	8010734 <tcp_process+0x47c>
 8010730:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801073a:	4b4e      	ldr	r3, [pc, #312]	@ (8010874 <tcp_process+0x5bc>)
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	f003 0320 	and.w	r3, r3, #32
 8010742:	2b00      	cmp	r3, #0
 8010744:	d037      	beq.n	80107b6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	8b5b      	ldrh	r3, [r3, #26]
 801074a:	f043 0302 	orr.w	r3, r3, #2
 801074e:	b29a      	uxth	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2207      	movs	r2, #7
 8010758:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801075a:	e02c      	b.n	80107b6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801075c:	4b3b      	ldr	r3, [pc, #236]	@ (801084c <tcp_process+0x594>)
 801075e:	6819      	ldr	r1, [r3, #0]
 8010760:	4b3b      	ldr	r3, [pc, #236]	@ (8010850 <tcp_process+0x598>)
 8010762:	881b      	ldrh	r3, [r3, #0]
 8010764:	461a      	mov	r2, r3
 8010766:	4b3b      	ldr	r3, [pc, #236]	@ (8010854 <tcp_process+0x59c>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801076c:	4b3a      	ldr	r3, [pc, #232]	@ (8010858 <tcp_process+0x5a0>)
 801076e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010770:	885b      	ldrh	r3, [r3, #2]
 8010772:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010774:	4a38      	ldr	r2, [pc, #224]	@ (8010858 <tcp_process+0x5a0>)
 8010776:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010778:	8812      	ldrh	r2, [r2, #0]
 801077a:	b292      	uxth	r2, r2
 801077c:	9202      	str	r2, [sp, #8]
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	4b36      	ldr	r3, [pc, #216]	@ (801085c <tcp_process+0x5a4>)
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	4b36      	ldr	r3, [pc, #216]	@ (8010860 <tcp_process+0x5a8>)
 8010786:	4602      	mov	r2, r0
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f002 fbcb 	bl	8012f24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801078e:	e167      	b.n	8010a60 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010790:	4b2d      	ldr	r3, [pc, #180]	@ (8010848 <tcp_process+0x590>)
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	f003 0302 	and.w	r3, r3, #2
 8010798:	2b00      	cmp	r3, #0
 801079a:	f000 8161 	beq.w	8010a60 <tcp_process+0x7a8>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107a2:	1e5a      	subs	r2, r3, #1
 80107a4:	4b2b      	ldr	r3, [pc, #172]	@ (8010854 <tcp_process+0x59c>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	f040 8159 	bne.w	8010a60 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f002 f9b2 	bl	8012b18 <tcp_rexmit>
      break;
 80107b4:	e154      	b.n	8010a60 <tcp_process+0x7a8>
 80107b6:	e153      	b.n	8010a60 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 fa71 	bl	8010ca0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80107be:	4b2d      	ldr	r3, [pc, #180]	@ (8010874 <tcp_process+0x5bc>)
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	f003 0320 	and.w	r3, r3, #32
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f000 814c 	beq.w	8010a64 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	8b5b      	ldrh	r3, [r3, #26]
 80107d0:	f043 0302 	orr.w	r3, r3, #2
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2207      	movs	r2, #7
 80107de:	751a      	strb	r2, [r3, #20]
      }
      break;
 80107e0:	e140      	b.n	8010a64 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fa5c 	bl	8010ca0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107e8:	4b22      	ldr	r3, [pc, #136]	@ (8010874 <tcp_process+0x5bc>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 0320 	and.w	r3, r3, #32
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d071      	beq.n	80108d8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107f4:	4b14      	ldr	r3, [pc, #80]	@ (8010848 <tcp_process+0x590>)
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	f003 0310 	and.w	r3, r3, #16
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d060      	beq.n	80108c2 <tcp_process+0x60a>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010804:	4b11      	ldr	r3, [pc, #68]	@ (801084c <tcp_process+0x594>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	429a      	cmp	r2, r3
 801080a:	d15a      	bne.n	80108c2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010810:	2b00      	cmp	r3, #0
 8010812:	d156      	bne.n	80108c2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	8b5b      	ldrh	r3, [r3, #26]
 8010818:	f043 0302 	orr.w	r3, r3, #2
 801081c:	b29a      	uxth	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7fe fdbc 	bl	800f3a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010828:	4b13      	ldr	r3, [pc, #76]	@ (8010878 <tcp_process+0x5c0>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	429a      	cmp	r2, r3
 8010830:	d105      	bne.n	801083e <tcp_process+0x586>
 8010832:	4b11      	ldr	r3, [pc, #68]	@ (8010878 <tcp_process+0x5c0>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	4a0f      	ldr	r2, [pc, #60]	@ (8010878 <tcp_process+0x5c0>)
 801083a:	6013      	str	r3, [r2, #0]
 801083c:	e02e      	b.n	801089c <tcp_process+0x5e4>
 801083e:	4b0e      	ldr	r3, [pc, #56]	@ (8010878 <tcp_process+0x5c0>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	617b      	str	r3, [r7, #20]
 8010844:	e027      	b.n	8010896 <tcp_process+0x5de>
 8010846:	bf00      	nop
 8010848:	200084bc 	.word	0x200084bc
 801084c:	200084b4 	.word	0x200084b4
 8010850:	200084ba 	.word	0x200084ba
 8010854:	200084b0 	.word	0x200084b0
 8010858:	200084a0 	.word	0x200084a0
 801085c:	2000556c 	.word	0x2000556c
 8010860:	20005570 	.word	0x20005570
 8010864:	08019084 	.word	0x08019084
 8010868:	08019324 	.word	0x08019324
 801086c:	080190d0 	.word	0x080190d0
 8010870:	200084b8 	.word	0x200084b8
 8010874:	200084bd 	.word	0x200084bd
 8010878:	20008484 	.word	0x20008484
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	429a      	cmp	r2, r3
 8010884:	d104      	bne.n	8010890 <tcp_process+0x5d8>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68da      	ldr	r2, [r3, #12]
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	60da      	str	r2, [r3, #12]
 801088e:	e005      	b.n	801089c <tcp_process+0x5e4>
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	617b      	str	r3, [r7, #20]
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d1ef      	bne.n	801087c <tcp_process+0x5c4>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	60da      	str	r2, [r3, #12]
 80108a2:	4b77      	ldr	r3, [pc, #476]	@ (8010a80 <tcp_process+0x7c8>)
 80108a4:	2201      	movs	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	220a      	movs	r2, #10
 80108ac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80108ae:	4b75      	ldr	r3, [pc, #468]	@ (8010a84 <tcp_process+0x7cc>)
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	60da      	str	r2, [r3, #12]
 80108b6:	4a73      	ldr	r2, [pc, #460]	@ (8010a84 <tcp_process+0x7cc>)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6013      	str	r3, [r2, #0]
 80108bc:	f002 fcf4 	bl	80132a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80108c0:	e0d2      	b.n	8010a68 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	8b5b      	ldrh	r3, [r3, #26]
 80108c6:	f043 0302 	orr.w	r3, r3, #2
 80108ca:	b29a      	uxth	r2, r3
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2208      	movs	r2, #8
 80108d4:	751a      	strb	r2, [r3, #20]
      break;
 80108d6:	e0c7      	b.n	8010a68 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108d8:	4b6b      	ldr	r3, [pc, #428]	@ (8010a88 <tcp_process+0x7d0>)
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	f003 0310 	and.w	r3, r3, #16
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f000 80c1 	beq.w	8010a68 <tcp_process+0x7b0>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80108ea:	4b68      	ldr	r3, [pc, #416]	@ (8010a8c <tcp_process+0x7d4>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	f040 80ba 	bne.w	8010a68 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	f040 80b5 	bne.w	8010a68 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2206      	movs	r2, #6
 8010902:	751a      	strb	r2, [r3, #20]
      break;
 8010904:	e0b0      	b.n	8010a68 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f9ca 	bl	8010ca0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801090c:	4b60      	ldr	r3, [pc, #384]	@ (8010a90 <tcp_process+0x7d8>)
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	f003 0320 	and.w	r3, r3, #32
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 80a9 	beq.w	8010a6c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	8b5b      	ldrh	r3, [r3, #26]
 801091e:	f043 0302 	orr.w	r3, r3, #2
 8010922:	b29a      	uxth	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f7fe fd39 	bl	800f3a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801092e:	4b59      	ldr	r3, [pc, #356]	@ (8010a94 <tcp_process+0x7dc>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	429a      	cmp	r2, r3
 8010936:	d105      	bne.n	8010944 <tcp_process+0x68c>
 8010938:	4b56      	ldr	r3, [pc, #344]	@ (8010a94 <tcp_process+0x7dc>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	4a55      	ldr	r2, [pc, #340]	@ (8010a94 <tcp_process+0x7dc>)
 8010940:	6013      	str	r3, [r2, #0]
 8010942:	e013      	b.n	801096c <tcp_process+0x6b4>
 8010944:	4b53      	ldr	r3, [pc, #332]	@ (8010a94 <tcp_process+0x7dc>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	613b      	str	r3, [r7, #16]
 801094a:	e00c      	b.n	8010966 <tcp_process+0x6ae>
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	687a      	ldr	r2, [r7, #4]
 8010952:	429a      	cmp	r2, r3
 8010954:	d104      	bne.n	8010960 <tcp_process+0x6a8>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	68da      	ldr	r2, [r3, #12]
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	60da      	str	r2, [r3, #12]
 801095e:	e005      	b.n	801096c <tcp_process+0x6b4>
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	68db      	ldr	r3, [r3, #12]
 8010964:	613b      	str	r3, [r7, #16]
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1ef      	bne.n	801094c <tcp_process+0x694>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	60da      	str	r2, [r3, #12]
 8010972:	4b43      	ldr	r3, [pc, #268]	@ (8010a80 <tcp_process+0x7c8>)
 8010974:	2201      	movs	r2, #1
 8010976:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	220a      	movs	r2, #10
 801097c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801097e:	4b41      	ldr	r3, [pc, #260]	@ (8010a84 <tcp_process+0x7cc>)
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	60da      	str	r2, [r3, #12]
 8010986:	4a3f      	ldr	r2, [pc, #252]	@ (8010a84 <tcp_process+0x7cc>)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6013      	str	r3, [r2, #0]
 801098c:	f002 fc8c 	bl	80132a8 <tcp_timer_needed>
      }
      break;
 8010990:	e06c      	b.n	8010a6c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 f984 	bl	8010ca0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010998:	4b3b      	ldr	r3, [pc, #236]	@ (8010a88 <tcp_process+0x7d0>)
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	f003 0310 	and.w	r3, r3, #16
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d065      	beq.n	8010a70 <tcp_process+0x7b8>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80109a8:	4b38      	ldr	r3, [pc, #224]	@ (8010a8c <tcp_process+0x7d4>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d15f      	bne.n	8010a70 <tcp_process+0x7b8>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d15b      	bne.n	8010a70 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7fe fcf1 	bl	800f3a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80109be:	4b35      	ldr	r3, [pc, #212]	@ (8010a94 <tcp_process+0x7dc>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d105      	bne.n	80109d4 <tcp_process+0x71c>
 80109c8:	4b32      	ldr	r3, [pc, #200]	@ (8010a94 <tcp_process+0x7dc>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	4a31      	ldr	r2, [pc, #196]	@ (8010a94 <tcp_process+0x7dc>)
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	e013      	b.n	80109fc <tcp_process+0x744>
 80109d4:	4b2f      	ldr	r3, [pc, #188]	@ (8010a94 <tcp_process+0x7dc>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	60fb      	str	r3, [r7, #12]
 80109da:	e00c      	b.n	80109f6 <tcp_process+0x73e>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d104      	bne.n	80109f0 <tcp_process+0x738>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	68da      	ldr	r2, [r3, #12]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	60da      	str	r2, [r3, #12]
 80109ee:	e005      	b.n	80109fc <tcp_process+0x744>
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	60fb      	str	r3, [r7, #12]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1ef      	bne.n	80109dc <tcp_process+0x724>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	60da      	str	r2, [r3, #12]
 8010a02:	4b1f      	ldr	r3, [pc, #124]	@ (8010a80 <tcp_process+0x7c8>)
 8010a04:	2201      	movs	r2, #1
 8010a06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	220a      	movs	r2, #10
 8010a0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8010a84 <tcp_process+0x7cc>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	60da      	str	r2, [r3, #12]
 8010a16:	4a1b      	ldr	r2, [pc, #108]	@ (8010a84 <tcp_process+0x7cc>)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6013      	str	r3, [r2, #0]
 8010a1c:	f002 fc44 	bl	80132a8 <tcp_timer_needed>
      }
      break;
 8010a20:	e026      	b.n	8010a70 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 f93c 	bl	8010ca0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010a28:	4b17      	ldr	r3, [pc, #92]	@ (8010a88 <tcp_process+0x7d0>)
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	f003 0310 	and.w	r3, r3, #16
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d01f      	beq.n	8010a74 <tcp_process+0x7bc>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a38:	4b14      	ldr	r3, [pc, #80]	@ (8010a8c <tcp_process+0x7d4>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d119      	bne.n	8010a74 <tcp_process+0x7bc>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d115      	bne.n	8010a74 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010a48:	4b11      	ldr	r3, [pc, #68]	@ (8010a90 <tcp_process+0x7d8>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f043 0310 	orr.w	r3, r3, #16
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	4b0f      	ldr	r3, [pc, #60]	@ (8010a90 <tcp_process+0x7d8>)
 8010a54:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010a56:	e00d      	b.n	8010a74 <tcp_process+0x7bc>
    default:
      break;
 8010a58:	bf00      	nop
 8010a5a:	e00c      	b.n	8010a76 <tcp_process+0x7be>
      break;
 8010a5c:	bf00      	nop
 8010a5e:	e00a      	b.n	8010a76 <tcp_process+0x7be>
      break;
 8010a60:	bf00      	nop
 8010a62:	e008      	b.n	8010a76 <tcp_process+0x7be>
      break;
 8010a64:	bf00      	nop
 8010a66:	e006      	b.n	8010a76 <tcp_process+0x7be>
      break;
 8010a68:	bf00      	nop
 8010a6a:	e004      	b.n	8010a76 <tcp_process+0x7be>
      break;
 8010a6c:	bf00      	nop
 8010a6e:	e002      	b.n	8010a76 <tcp_process+0x7be>
      break;
 8010a70:	bf00      	nop
 8010a72:	e000      	b.n	8010a76 <tcp_process+0x7be>
      break;
 8010a74:	bf00      	nop
  }
  return ERR_OK;
 8010a76:	2300      	movs	r3, #0
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3724      	adds	r7, #36	@ 0x24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd90      	pop	{r4, r7, pc}
 8010a80:	2000848c 	.word	0x2000848c
 8010a84:	20008488 	.word	0x20008488
 8010a88:	200084bc 	.word	0x200084bc
 8010a8c:	200084b4 	.word	0x200084b4
 8010a90:	200084bd 	.word	0x200084bd
 8010a94:	20008484 	.word	0x20008484

08010a98 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010a98:	b590      	push	{r4, r7, lr}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d106      	bne.n	8010ab6 <tcp_oos_insert_segment+0x1e>
 8010aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8010b98 <tcp_oos_insert_segment+0x100>)
 8010aaa:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010aae:	493b      	ldr	r1, [pc, #236]	@ (8010b9c <tcp_oos_insert_segment+0x104>)
 8010ab0:	483b      	ldr	r0, [pc, #236]	@ (8010ba0 <tcp_oos_insert_segment+0x108>)
 8010ab2:	f006 fab7 	bl	8017024 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	899b      	ldrh	r3, [r3, #12]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fb fca2 	bl	800c408 <lwip_htons>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	f003 0301 	and.w	r3, r3, #1
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d028      	beq.n	8010b22 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010ad0:	6838      	ldr	r0, [r7, #0]
 8010ad2:	f7fe fa63 	bl	800ef9c <tcp_segs_free>
    next = NULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	603b      	str	r3, [r7, #0]
 8010ada:	e056      	b.n	8010b8a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	899b      	ldrh	r3, [r3, #12]
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7fb fc8f 	bl	800c408 <lwip_htons>
 8010aea:	4603      	mov	r3, r0
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d00d      	beq.n	8010b12 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	899b      	ldrh	r3, [r3, #12]
 8010afc:	b29c      	uxth	r4, r3
 8010afe:	2001      	movs	r0, #1
 8010b00:	f7fb fc82 	bl	800c408 <lwip_htons>
 8010b04:	4603      	mov	r3, r0
 8010b06:	461a      	mov	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	4322      	orrs	r2, r4
 8010b0e:	b292      	uxth	r2, r2
 8010b10:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f7fe fa52 	bl	800efc6 <tcp_seg_free>
    while (next &&
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00e      	beq.n	8010b46 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	891b      	ldrh	r3, [r3, #8]
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8010ba4 <tcp_oos_insert_segment+0x10c>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	441a      	add	r2, r3
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	6839      	ldr	r1, [r7, #0]
 8010b3c:	8909      	ldrh	r1, [r1, #8]
 8010b3e:	440b      	add	r3, r1
 8010b40:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	daca      	bge.n	8010adc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d01e      	beq.n	8010b8a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	891b      	ldrh	r3, [r3, #8]
 8010b50:	461a      	mov	r2, r3
 8010b52:	4b14      	ldr	r3, [pc, #80]	@ (8010ba4 <tcp_oos_insert_segment+0x10c>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	441a      	add	r2, r3
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	dd12      	ble.n	8010b8a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8010ba4 <tcp_oos_insert_segment+0x10c>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	685a      	ldr	r2, [r3, #4]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	891b      	ldrh	r3, [r3, #8]
 8010b82:	4619      	mov	r1, r3
 8010b84:	4610      	mov	r0, r2
 8010b86:	f7fc fe13 	bl	800d7b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	683a      	ldr	r2, [r7, #0]
 8010b8e:	601a      	str	r2, [r3, #0]
}
 8010b90:	bf00      	nop
 8010b92:	3714      	adds	r7, #20
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd90      	pop	{r4, r7, pc}
 8010b98:	08019084 	.word	0x08019084
 8010b9c:	08019344 	.word	0x08019344
 8010ba0:	080190d0 	.word	0x080190d0
 8010ba4:	200084b0 	.word	0x200084b0

08010ba8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010ba8:	b5b0      	push	{r4, r5, r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
 8010bb4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010bb6:	e03e      	b.n	8010c36 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fd f800 	bl	800dbcc <pbuf_clen>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010bd6:	8a7a      	ldrh	r2, [r7, #18]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d906      	bls.n	8010bea <tcp_free_acked_segments+0x42>
 8010bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8010c88 <tcp_free_acked_segments+0xe0>)
 8010bde:	f240 4257 	movw	r2, #1111	@ 0x457
 8010be2:	492a      	ldr	r1, [pc, #168]	@ (8010c8c <tcp_free_acked_segments+0xe4>)
 8010be4:	482a      	ldr	r0, [pc, #168]	@ (8010c90 <tcp_free_acked_segments+0xe8>)
 8010be6:	f006 fa1d 	bl	8017024 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010bf0:	8a7b      	ldrh	r3, [r7, #18]
 8010bf2:	1ad3      	subs	r3, r2, r3
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	891a      	ldrh	r2, [r3, #8]
 8010c00:	4b24      	ldr	r3, [pc, #144]	@ (8010c94 <tcp_free_acked_segments+0xec>)
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	4413      	add	r3, r2
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	4b22      	ldr	r3, [pc, #136]	@ (8010c94 <tcp_free_acked_segments+0xec>)
 8010c0a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010c0c:	6978      	ldr	r0, [r7, #20]
 8010c0e:	f7fe f9da 	bl	800efc6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00c      	beq.n	8010c36 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d109      	bne.n	8010c36 <tcp_free_acked_segments+0x8e>
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d106      	bne.n	8010c36 <tcp_free_acked_segments+0x8e>
 8010c28:	4b17      	ldr	r3, [pc, #92]	@ (8010c88 <tcp_free_acked_segments+0xe0>)
 8010c2a:	f240 4261 	movw	r2, #1121	@ 0x461
 8010c2e:	491a      	ldr	r1, [pc, #104]	@ (8010c98 <tcp_free_acked_segments+0xf0>)
 8010c30:	4817      	ldr	r0, [pc, #92]	@ (8010c90 <tcp_free_acked_segments+0xe8>)
 8010c32:	f006 f9f7 	bl	8017024 <iprintf>
  while (seg_list != NULL &&
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d020      	beq.n	8010c7e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fb fbf6 	bl	800c434 <lwip_htonl>
 8010c48:	4604      	mov	r4, r0
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	891b      	ldrh	r3, [r3, #8]
 8010c4e:	461d      	mov	r5, r3
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	899b      	ldrh	r3, [r3, #12]
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7fb fbd5 	bl	800c408 <lwip_htons>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	f003 0303 	and.w	r3, r3, #3
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d001      	beq.n	8010c6e <tcp_free_acked_segments+0xc6>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e000      	b.n	8010c70 <tcp_free_acked_segments+0xc8>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	442b      	add	r3, r5
 8010c72:	18e2      	adds	r2, r4, r3
 8010c74:	4b09      	ldr	r3, [pc, #36]	@ (8010c9c <tcp_free_acked_segments+0xf4>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	dd9c      	ble.n	8010bb8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010c7e:	68bb      	ldr	r3, [r7, #8]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3718      	adds	r7, #24
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bdb0      	pop	{r4, r5, r7, pc}
 8010c88:	08019084 	.word	0x08019084
 8010c8c:	0801936c 	.word	0x0801936c
 8010c90:	080190d0 	.word	0x080190d0
 8010c94:	200084b8 	.word	0x200084b8
 8010c98:	08019394 	.word	0x08019394
 8010c9c:	200084b4 	.word	0x200084b4

08010ca0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010ca0:	b5b0      	push	{r4, r5, r7, lr}
 8010ca2:	b094      	sub	sp, #80	@ 0x50
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d106      	bne.n	8010cc0 <tcp_receive+0x20>
 8010cb2:	4b91      	ldr	r3, [pc, #580]	@ (8010ef8 <tcp_receive+0x258>)
 8010cb4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010cb8:	4990      	ldr	r1, [pc, #576]	@ (8010efc <tcp_receive+0x25c>)
 8010cba:	4891      	ldr	r0, [pc, #580]	@ (8010f00 <tcp_receive+0x260>)
 8010cbc:	f006 f9b2 	bl	8017024 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	7d1b      	ldrb	r3, [r3, #20]
 8010cc4:	2b03      	cmp	r3, #3
 8010cc6:	d806      	bhi.n	8010cd6 <tcp_receive+0x36>
 8010cc8:	4b8b      	ldr	r3, [pc, #556]	@ (8010ef8 <tcp_receive+0x258>)
 8010cca:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010cce:	498d      	ldr	r1, [pc, #564]	@ (8010f04 <tcp_receive+0x264>)
 8010cd0:	488b      	ldr	r0, [pc, #556]	@ (8010f00 <tcp_receive+0x260>)
 8010cd2:	f006 f9a7 	bl	8017024 <iprintf>

  if (flags & TCP_ACK) {
 8010cd6:	4b8c      	ldr	r3, [pc, #560]	@ (8010f08 <tcp_receive+0x268>)
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	f003 0310 	and.w	r3, r3, #16
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f000 8264 	beq.w	80111ac <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010cea:	461a      	mov	r2, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010cf0:	4413      	add	r3, r2
 8010cf2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010cf8:	4b84      	ldr	r3, [pc, #528]	@ (8010f0c <tcp_receive+0x26c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	1ad3      	subs	r3, r2, r3
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	db1b      	blt.n	8010d3a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010d06:	4b81      	ldr	r3, [pc, #516]	@ (8010f0c <tcp_receive+0x26c>)
 8010d08:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d106      	bne.n	8010d1c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010d12:	4b7f      	ldr	r3, [pc, #508]	@ (8010f10 <tcp_receive+0x270>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	db0e      	blt.n	8010d3a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010d20:	4b7b      	ldr	r3, [pc, #492]	@ (8010f10 <tcp_receive+0x270>)
 8010d22:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d125      	bne.n	8010d74 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010d28:	4b7a      	ldr	r3, [pc, #488]	@ (8010f14 <tcp_receive+0x274>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	89db      	ldrh	r3, [r3, #14]
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d91c      	bls.n	8010d74 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d3a:	4b76      	ldr	r3, [pc, #472]	@ (8010f14 <tcp_receive+0x274>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	89db      	ldrh	r3, [r3, #14]
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d205      	bcs.n	8010d64 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010d64:	4b69      	ldr	r3, [pc, #420]	@ (8010f0c <tcp_receive+0x26c>)
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010d6c:	4b68      	ldr	r3, [pc, #416]	@ (8010f10 <tcp_receive+0x270>)
 8010d6e:	681a      	ldr	r2, [r3, #0]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010d74:	4b66      	ldr	r3, [pc, #408]	@ (8010f10 <tcp_receive+0x270>)
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	dc58      	bgt.n	8010e34 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010d82:	4b65      	ldr	r3, [pc, #404]	@ (8010f18 <tcp_receive+0x278>)
 8010d84:	881b      	ldrh	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d14b      	bne.n	8010e22 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010d94:	4413      	add	r3, r2
 8010d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d142      	bne.n	8010e22 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	db3d      	blt.n	8010e22 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010daa:	4b59      	ldr	r3, [pc, #356]	@ (8010f10 <tcp_receive+0x270>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d137      	bne.n	8010e22 <tcp_receive+0x182>
              found_dupack = 1;
 8010db2:	2301      	movs	r3, #1
 8010db4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010dbc:	2bff      	cmp	r3, #255	@ 0xff
 8010dbe:	d007      	beq.n	8010dd0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	b2da      	uxtb	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010dd6:	2b03      	cmp	r3, #3
 8010dd8:	d91b      	bls.n	8010e12 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010de4:	4413      	add	r3, r2
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d30a      	bcc.n	8010e08 <tcp_receive+0x168>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010dfc:	4413      	add	r3, r2
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010e06:	e004      	b.n	8010e12 <tcp_receive+0x172>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010e18:	2b02      	cmp	r3, #2
 8010e1a:	d902      	bls.n	8010e22 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f001 fee7 	bl	8012bf0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f040 8161 	bne.w	80110ec <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010e32:	e15b      	b.n	80110ec <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e34:	4b36      	ldr	r3, [pc, #216]	@ (8010f10 <tcp_receive+0x270>)
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e3c:	1ad3      	subs	r3, r2, r3
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f2c0 814e 	blt.w	80110e2 <tcp_receive+0x442>
 8010e46:	4b32      	ldr	r3, [pc, #200]	@ (8010f10 <tcp_receive+0x270>)
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e4e:	1ad3      	subs	r3, r2, r3
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f300 8146 	bgt.w	80110e2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	8b5b      	ldrh	r3, [r3, #26]
 8010e5a:	f003 0304 	and.w	r3, r3, #4
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d010      	beq.n	8010e84 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	8b5b      	ldrh	r3, [r3, #26]
 8010e66:	f023 0304 	bic.w	r3, r3, #4
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010e92:	10db      	asrs	r3, r3, #3
 8010e94:	b21b      	sxth	r3, r3
 8010e96:	b29a      	uxth	r2, r3
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	4413      	add	r3, r2
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	b21a      	sxth	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010eac:	4b18      	ldr	r3, [pc, #96]	@ (8010f10 <tcp_receive+0x270>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	b29a      	uxth	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	1ad3      	subs	r3, r2, r3
 8010eba:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010ec4:	4b12      	ldr	r3, [pc, #72]	@ (8010f10 <tcp_receive+0x270>)
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	7d1b      	ldrb	r3, [r3, #20]
 8010ed0:	2b03      	cmp	r3, #3
 8010ed2:	f240 8097 	bls.w	8011004 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d245      	bcs.n	8010f72 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	8b5b      	ldrh	r3, [r3, #26]
 8010eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d014      	beq.n	8010f1c <tcp_receive+0x27c>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e013      	b.n	8010f1e <tcp_receive+0x27e>
 8010ef6:	bf00      	nop
 8010ef8:	08019084 	.word	0x08019084
 8010efc:	080193b4 	.word	0x080193b4
 8010f00:	080190d0 	.word	0x080190d0
 8010f04:	080193d0 	.word	0x080193d0
 8010f08:	200084bc 	.word	0x200084bc
 8010f0c:	200084b0 	.word	0x200084b0
 8010f10:	200084b4 	.word	0x200084b4
 8010f14:	200084a0 	.word	0x200084a0
 8010f18:	200084ba 	.word	0x200084ba
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010f22:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f2c:	fb12 f303 	smulbb	r3, r2, r3
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010f34:	4293      	cmp	r3, r2
 8010f36:	bf28      	it	cs
 8010f38:	4613      	movcs	r3, r2
 8010f3a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010f42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010f44:	4413      	add	r3, r2
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d309      	bcc.n	8010f66 <tcp_receive+0x2c6>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010f58:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010f5a:	4413      	add	r3, r2
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010f64:	e04e      	b.n	8011004 <tcp_receive+0x364>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010f70:	e048      	b.n	8011004 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010f78:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010f7a:	4413      	add	r3, r2
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d309      	bcc.n	8010f9c <tcp_receive+0x2fc>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010f8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010f90:	4413      	add	r3, r2
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010f9a:	e004      	b.n	8010fa6 <tcp_receive+0x306>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010fa2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d326      	bcc.n	8011004 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010fc2:	1ad3      	subs	r3, r2, r3
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010fd6:	4413      	add	r3, r2
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d30a      	bcc.n	8010ffa <tcp_receive+0x35a>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010fee:	4413      	add	r3, r2
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010ff8:	e004      	b.n	8011004 <tcp_receive+0x364>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011000:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801100c:	4a98      	ldr	r2, [pc, #608]	@ (8011270 <tcp_receive+0x5d0>)
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7ff fdca 	bl	8010ba8 <tcp_free_acked_segments>
 8011014:	4602      	mov	r2, r0
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011022:	4a94      	ldr	r2, [pc, #592]	@ (8011274 <tcp_receive+0x5d4>)
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7ff fdbf 	bl	8010ba8 <tcp_free_acked_segments>
 801102a:	4602      	mov	r2, r0
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011034:	2b00      	cmp	r3, #0
 8011036:	d104      	bne.n	8011042 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801103e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011040:	e002      	b.n	8011048 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011052:	2b00      	cmp	r3, #0
 8011054:	d103      	bne.n	801105e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2200      	movs	r2, #0
 801105a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011064:	4b84      	ldr	r3, [pc, #528]	@ (8011278 <tcp_receive+0x5d8>)
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	4413      	add	r3, r2
 801106a:	b29a      	uxth	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	8b5b      	ldrh	r3, [r3, #26]
 8011076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801107a:	2b00      	cmp	r3, #0
 801107c:	d035      	beq.n	80110ea <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011082:	2b00      	cmp	r3, #0
 8011084:	d118      	bne.n	80110b8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00c      	beq.n	80110a8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	4618      	mov	r0, r3
 801109c:	f7fb f9ca 	bl	800c434 <lwip_htonl>
 80110a0:	4603      	mov	r3, r0
 80110a2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	dc20      	bgt.n	80110ea <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	8b5b      	ldrh	r3, [r3, #26]
 80110ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110b6:	e018      	b.n	80110ea <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fb f9b5 	bl	800c434 <lwip_htonl>
 80110ca:	4603      	mov	r3, r0
 80110cc:	1ae3      	subs	r3, r4, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	dc0b      	bgt.n	80110ea <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	8b5b      	ldrh	r3, [r3, #26]
 80110d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80110da:	b29a      	uxth	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110e0:	e003      	b.n	80110ea <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f001 ff70 	bl	8012fc8 <tcp_send_empty_ack>
 80110e8:	e000      	b.n	80110ec <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110ea:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d05b      	beq.n	80111ac <tcp_receive+0x50c>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110f8:	4b60      	ldr	r3, [pc, #384]	@ (801127c <tcp_receive+0x5dc>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	1ad3      	subs	r3, r2, r3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	da54      	bge.n	80111ac <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011102:	4b5f      	ldr	r3, [pc, #380]	@ (8011280 <tcp_receive+0x5e0>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	b29a      	uxth	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801110c:	b29b      	uxth	r3, r3
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	b29b      	uxth	r3, r3
 8011112:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011116:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011120:	10db      	asrs	r3, r3, #3
 8011122:	b21b      	sxth	r3, r3
 8011124:	b29b      	uxth	r3, r3
 8011126:	1ad3      	subs	r3, r2, r3
 8011128:	b29b      	uxth	r3, r3
 801112a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011134:	b29a      	uxth	r2, r3
 8011136:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801113a:	4413      	add	r3, r2
 801113c:	b29b      	uxth	r3, r3
 801113e:	b21a      	sxth	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011144:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011148:	2b00      	cmp	r3, #0
 801114a:	da05      	bge.n	8011158 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801114c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011150:	425b      	negs	r3, r3
 8011152:	b29b      	uxth	r3, r3
 8011154:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011158:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011162:	109b      	asrs	r3, r3, #2
 8011164:	b21b      	sxth	r3, r3
 8011166:	b29b      	uxth	r3, r3
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	b29b      	uxth	r3, r3
 801116c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011176:	b29a      	uxth	r2, r3
 8011178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801117c:	4413      	add	r3, r2
 801117e:	b29b      	uxth	r3, r3
 8011180:	b21a      	sxth	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801118c:	10db      	asrs	r3, r3, #3
 801118e:	b21b      	sxth	r3, r3
 8011190:	b29a      	uxth	r2, r3
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011198:	b29b      	uxth	r3, r3
 801119a:	4413      	add	r3, r2
 801119c:	b29b      	uxth	r3, r3
 801119e:	b21a      	sxth	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80111ac:	4b35      	ldr	r3, [pc, #212]	@ (8011284 <tcp_receive+0x5e4>)
 80111ae:	881b      	ldrh	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	f000 84df 	beq.w	8011b74 <tcp_receive+0xed4>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	7d1b      	ldrb	r3, [r3, #20]
 80111ba:	2b06      	cmp	r3, #6
 80111bc:	f200 84da 	bhi.w	8011b74 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111c4:	4b30      	ldr	r3, [pc, #192]	@ (8011288 <tcp_receive+0x5e8>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	1ad3      	subs	r3, r2, r3
 80111ca:	3b01      	subs	r3, #1
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f2c0 808f 	blt.w	80112f0 <tcp_receive+0x650>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111d6:	4b2b      	ldr	r3, [pc, #172]	@ (8011284 <tcp_receive+0x5e4>)
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	4619      	mov	r1, r3
 80111dc:	4b2a      	ldr	r3, [pc, #168]	@ (8011288 <tcp_receive+0x5e8>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	440b      	add	r3, r1
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	3301      	adds	r3, #1
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f300 8082 	bgt.w	80112f0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80111ec:	4b27      	ldr	r3, [pc, #156]	@ (801128c <tcp_receive+0x5ec>)
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111f6:	4b24      	ldr	r3, [pc, #144]	@ (8011288 <tcp_receive+0x5e8>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	1ad3      	subs	r3, r2, r3
 80111fc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80111fe:	4b23      	ldr	r3, [pc, #140]	@ (801128c <tcp_receive+0x5ec>)
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <tcp_receive+0x574>
 8011206:	4b22      	ldr	r3, [pc, #136]	@ (8011290 <tcp_receive+0x5f0>)
 8011208:	f240 5294 	movw	r2, #1428	@ 0x594
 801120c:	4921      	ldr	r1, [pc, #132]	@ (8011294 <tcp_receive+0x5f4>)
 801120e:	4822      	ldr	r0, [pc, #136]	@ (8011298 <tcp_receive+0x5f8>)
 8011210:	f005 ff08 	bl	8017024 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011216:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801121a:	4293      	cmp	r3, r2
 801121c:	d906      	bls.n	801122c <tcp_receive+0x58c>
 801121e:	4b1c      	ldr	r3, [pc, #112]	@ (8011290 <tcp_receive+0x5f0>)
 8011220:	f240 5295 	movw	r2, #1429	@ 0x595
 8011224:	491d      	ldr	r1, [pc, #116]	@ (801129c <tcp_receive+0x5fc>)
 8011226:	481c      	ldr	r0, [pc, #112]	@ (8011298 <tcp_receive+0x5f8>)
 8011228:	f005 fefc 	bl	8017024 <iprintf>
      off = (u16_t)off32;
 801122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801122e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011232:	4b16      	ldr	r3, [pc, #88]	@ (801128c <tcp_receive+0x5ec>)
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	891b      	ldrh	r3, [r3, #8]
 8011238:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801123c:	429a      	cmp	r2, r3
 801123e:	d906      	bls.n	801124e <tcp_receive+0x5ae>
 8011240:	4b13      	ldr	r3, [pc, #76]	@ (8011290 <tcp_receive+0x5f0>)
 8011242:	f240 5297 	movw	r2, #1431	@ 0x597
 8011246:	4916      	ldr	r1, [pc, #88]	@ (80112a0 <tcp_receive+0x600>)
 8011248:	4813      	ldr	r0, [pc, #76]	@ (8011298 <tcp_receive+0x5f8>)
 801124a:	f005 feeb 	bl	8017024 <iprintf>
      inseg.len -= off;
 801124e:	4b0f      	ldr	r3, [pc, #60]	@ (801128c <tcp_receive+0x5ec>)
 8011250:	891a      	ldrh	r2, [r3, #8]
 8011252:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011256:	1ad3      	subs	r3, r2, r3
 8011258:	b29a      	uxth	r2, r3
 801125a:	4b0c      	ldr	r3, [pc, #48]	@ (801128c <tcp_receive+0x5ec>)
 801125c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801125e:	4b0b      	ldr	r3, [pc, #44]	@ (801128c <tcp_receive+0x5ec>)
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	891a      	ldrh	r2, [r3, #8]
 8011264:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801126c:	e02a      	b.n	80112c4 <tcp_receive+0x624>
 801126e:	bf00      	nop
 8011270:	080193ec 	.word	0x080193ec
 8011274:	080193f4 	.word	0x080193f4
 8011278:	200084b8 	.word	0x200084b8
 801127c:	200084b4 	.word	0x200084b4
 8011280:	20008478 	.word	0x20008478
 8011284:	200084ba 	.word	0x200084ba
 8011288:	200084b0 	.word	0x200084b0
 801128c:	20008490 	.word	0x20008490
 8011290:	08019084 	.word	0x08019084
 8011294:	080193fc 	.word	0x080193fc
 8011298:	080190d0 	.word	0x080190d0
 801129c:	0801940c 	.word	0x0801940c
 80112a0:	0801941c 	.word	0x0801941c
        off -= p->len;
 80112a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112a6:	895b      	ldrh	r3, [r3, #10]
 80112a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80112b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112b4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80112b6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80112b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112ba:	2200      	movs	r2, #0
 80112bc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80112be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80112c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112c6:	895b      	ldrh	r3, [r3, #10]
 80112c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d8e9      	bhi.n	80112a4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80112d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80112d4:	4619      	mov	r1, r3
 80112d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80112d8:	f7fc fb6a 	bl	800d9b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112e0:	4a90      	ldr	r2, [pc, #576]	@ (8011524 <tcp_receive+0x884>)
 80112e2:	6013      	str	r3, [r2, #0]
 80112e4:	4b90      	ldr	r3, [pc, #576]	@ (8011528 <tcp_receive+0x888>)
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	4a8e      	ldr	r2, [pc, #568]	@ (8011524 <tcp_receive+0x884>)
 80112ea:	6812      	ldr	r2, [r2, #0]
 80112ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80112ee:	e00d      	b.n	801130c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80112f0:	4b8c      	ldr	r3, [pc, #560]	@ (8011524 <tcp_receive+0x884>)
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	da06      	bge.n	801130c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	8b5b      	ldrh	r3, [r3, #26]
 8011302:	f043 0302 	orr.w	r3, r3, #2
 8011306:	b29a      	uxth	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801130c:	4b85      	ldr	r3, [pc, #532]	@ (8011524 <tcp_receive+0x884>)
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	f2c0 8427 	blt.w	8011b6a <tcp_receive+0xeca>
 801131c:	4b81      	ldr	r3, [pc, #516]	@ (8011524 <tcp_receive+0x884>)
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011324:	6879      	ldr	r1, [r7, #4]
 8011326:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011328:	440b      	add	r3, r1
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	3301      	adds	r3, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	f300 841b 	bgt.w	8011b6a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011338:	4b7a      	ldr	r3, [pc, #488]	@ (8011524 <tcp_receive+0x884>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	429a      	cmp	r2, r3
 801133e:	f040 8298 	bne.w	8011872 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011342:	4b79      	ldr	r3, [pc, #484]	@ (8011528 <tcp_receive+0x888>)
 8011344:	891c      	ldrh	r4, [r3, #8]
 8011346:	4b78      	ldr	r3, [pc, #480]	@ (8011528 <tcp_receive+0x888>)
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	899b      	ldrh	r3, [r3, #12]
 801134c:	b29b      	uxth	r3, r3
 801134e:	4618      	mov	r0, r3
 8011350:	f7fb f85a 	bl	800c408 <lwip_htons>
 8011354:	4603      	mov	r3, r0
 8011356:	b2db      	uxtb	r3, r3
 8011358:	f003 0303 	and.w	r3, r3, #3
 801135c:	2b00      	cmp	r3, #0
 801135e:	d001      	beq.n	8011364 <tcp_receive+0x6c4>
 8011360:	2301      	movs	r3, #1
 8011362:	e000      	b.n	8011366 <tcp_receive+0x6c6>
 8011364:	2300      	movs	r3, #0
 8011366:	4423      	add	r3, r4
 8011368:	b29a      	uxth	r2, r3
 801136a:	4b70      	ldr	r3, [pc, #448]	@ (801152c <tcp_receive+0x88c>)
 801136c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011372:	4b6e      	ldr	r3, [pc, #440]	@ (801152c <tcp_receive+0x88c>)
 8011374:	881b      	ldrh	r3, [r3, #0]
 8011376:	429a      	cmp	r2, r3
 8011378:	d274      	bcs.n	8011464 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801137a:	4b6b      	ldr	r3, [pc, #428]	@ (8011528 <tcp_receive+0x888>)
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	899b      	ldrh	r3, [r3, #12]
 8011380:	b29b      	uxth	r3, r3
 8011382:	4618      	mov	r0, r3
 8011384:	f7fb f840 	bl	800c408 <lwip_htons>
 8011388:	4603      	mov	r3, r0
 801138a:	b2db      	uxtb	r3, r3
 801138c:	f003 0301 	and.w	r3, r3, #1
 8011390:	2b00      	cmp	r3, #0
 8011392:	d01e      	beq.n	80113d2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011394:	4b64      	ldr	r3, [pc, #400]	@ (8011528 <tcp_receive+0x888>)
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	899b      	ldrh	r3, [r3, #12]
 801139a:	b29b      	uxth	r3, r3
 801139c:	b21b      	sxth	r3, r3
 801139e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80113a2:	b21c      	sxth	r4, r3
 80113a4:	4b60      	ldr	r3, [pc, #384]	@ (8011528 <tcp_receive+0x888>)
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	899b      	ldrh	r3, [r3, #12]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fb f82b 	bl	800c408 <lwip_htons>
 80113b2:	4603      	mov	r3, r0
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	4618      	mov	r0, r3
 80113be:	f7fb f823 	bl	800c408 <lwip_htons>
 80113c2:	4603      	mov	r3, r0
 80113c4:	b21b      	sxth	r3, r3
 80113c6:	4323      	orrs	r3, r4
 80113c8:	b21a      	sxth	r2, r3
 80113ca:	4b57      	ldr	r3, [pc, #348]	@ (8011528 <tcp_receive+0x888>)
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	b292      	uxth	r2, r2
 80113d0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80113d6:	4b54      	ldr	r3, [pc, #336]	@ (8011528 <tcp_receive+0x888>)
 80113d8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113da:	4b53      	ldr	r3, [pc, #332]	@ (8011528 <tcp_receive+0x888>)
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	899b      	ldrh	r3, [r3, #12]
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fb f810 	bl	800c408 <lwip_htons>
 80113e8:	4603      	mov	r3, r0
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	f003 0302 	and.w	r3, r3, #2
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d005      	beq.n	8011400 <tcp_receive+0x760>
            inseg.len -= 1;
 80113f4:	4b4c      	ldr	r3, [pc, #304]	@ (8011528 <tcp_receive+0x888>)
 80113f6:	891b      	ldrh	r3, [r3, #8]
 80113f8:	3b01      	subs	r3, #1
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	4b4a      	ldr	r3, [pc, #296]	@ (8011528 <tcp_receive+0x888>)
 80113fe:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011400:	4b49      	ldr	r3, [pc, #292]	@ (8011528 <tcp_receive+0x888>)
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	4a48      	ldr	r2, [pc, #288]	@ (8011528 <tcp_receive+0x888>)
 8011406:	8912      	ldrh	r2, [r2, #8]
 8011408:	4611      	mov	r1, r2
 801140a:	4618      	mov	r0, r3
 801140c:	f7fc f9d0 	bl	800d7b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011410:	4b45      	ldr	r3, [pc, #276]	@ (8011528 <tcp_receive+0x888>)
 8011412:	891c      	ldrh	r4, [r3, #8]
 8011414:	4b44      	ldr	r3, [pc, #272]	@ (8011528 <tcp_receive+0x888>)
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	899b      	ldrh	r3, [r3, #12]
 801141a:	b29b      	uxth	r3, r3
 801141c:	4618      	mov	r0, r3
 801141e:	f7fa fff3 	bl	800c408 <lwip_htons>
 8011422:	4603      	mov	r3, r0
 8011424:	b2db      	uxtb	r3, r3
 8011426:	f003 0303 	and.w	r3, r3, #3
 801142a:	2b00      	cmp	r3, #0
 801142c:	d001      	beq.n	8011432 <tcp_receive+0x792>
 801142e:	2301      	movs	r3, #1
 8011430:	e000      	b.n	8011434 <tcp_receive+0x794>
 8011432:	2300      	movs	r3, #0
 8011434:	4423      	add	r3, r4
 8011436:	b29a      	uxth	r2, r3
 8011438:	4b3c      	ldr	r3, [pc, #240]	@ (801152c <tcp_receive+0x88c>)
 801143a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801143c:	4b3b      	ldr	r3, [pc, #236]	@ (801152c <tcp_receive+0x88c>)
 801143e:	881b      	ldrh	r3, [r3, #0]
 8011440:	461a      	mov	r2, r3
 8011442:	4b38      	ldr	r3, [pc, #224]	@ (8011524 <tcp_receive+0x884>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	441a      	add	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801144c:	6879      	ldr	r1, [r7, #4]
 801144e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011450:	440b      	add	r3, r1
 8011452:	429a      	cmp	r2, r3
 8011454:	d006      	beq.n	8011464 <tcp_receive+0x7c4>
 8011456:	4b36      	ldr	r3, [pc, #216]	@ (8011530 <tcp_receive+0x890>)
 8011458:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801145c:	4935      	ldr	r1, [pc, #212]	@ (8011534 <tcp_receive+0x894>)
 801145e:	4836      	ldr	r0, [pc, #216]	@ (8011538 <tcp_receive+0x898>)
 8011460:	f005 fde0 	bl	8017024 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011468:	2b00      	cmp	r3, #0
 801146a:	f000 80e6 	beq.w	801163a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801146e:	4b2e      	ldr	r3, [pc, #184]	@ (8011528 <tcp_receive+0x888>)
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	899b      	ldrh	r3, [r3, #12]
 8011474:	b29b      	uxth	r3, r3
 8011476:	4618      	mov	r0, r3
 8011478:	f7fa ffc6 	bl	800c408 <lwip_htons>
 801147c:	4603      	mov	r3, r0
 801147e:	b2db      	uxtb	r3, r3
 8011480:	f003 0301 	and.w	r3, r3, #1
 8011484:	2b00      	cmp	r3, #0
 8011486:	d010      	beq.n	80114aa <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011488:	e00a      	b.n	80114a0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801148e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801149a:	68f8      	ldr	r0, [r7, #12]
 801149c:	f7fd fd93 	bl	800efc6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d1f0      	bne.n	801148a <tcp_receive+0x7ea>
 80114a8:	e0c7      	b.n	801163a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80114b0:	e051      	b.n	8011556 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	899b      	ldrh	r3, [r3, #12]
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fa ffa4 	bl	800c408 <lwip_htons>
 80114c0:	4603      	mov	r3, r0
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	f003 0301 	and.w	r3, r3, #1
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d03c      	beq.n	8011546 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80114cc:	4b16      	ldr	r3, [pc, #88]	@ (8011528 <tcp_receive+0x888>)
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	899b      	ldrh	r3, [r3, #12]
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7fa ff97 	bl	800c408 <lwip_htons>
 80114da:	4603      	mov	r3, r0
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d12f      	bne.n	8011546 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80114e6:	4b10      	ldr	r3, [pc, #64]	@ (8011528 <tcp_receive+0x888>)
 80114e8:	68db      	ldr	r3, [r3, #12]
 80114ea:	899b      	ldrh	r3, [r3, #12]
 80114ec:	b29c      	uxth	r4, r3
 80114ee:	2001      	movs	r0, #1
 80114f0:	f7fa ff8a 	bl	800c408 <lwip_htons>
 80114f4:	4603      	mov	r3, r0
 80114f6:	461a      	mov	r2, r3
 80114f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011528 <tcp_receive+0x888>)
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	4322      	orrs	r2, r4
 80114fe:	b292      	uxth	r2, r2
 8011500:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011502:	4b09      	ldr	r3, [pc, #36]	@ (8011528 <tcp_receive+0x888>)
 8011504:	891c      	ldrh	r4, [r3, #8]
 8011506:	4b08      	ldr	r3, [pc, #32]	@ (8011528 <tcp_receive+0x888>)
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	899b      	ldrh	r3, [r3, #12]
 801150c:	b29b      	uxth	r3, r3
 801150e:	4618      	mov	r0, r3
 8011510:	f7fa ff7a 	bl	800c408 <lwip_htons>
 8011514:	4603      	mov	r3, r0
 8011516:	b2db      	uxtb	r3, r3
 8011518:	f003 0303 	and.w	r3, r3, #3
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00d      	beq.n	801153c <tcp_receive+0x89c>
 8011520:	2301      	movs	r3, #1
 8011522:	e00c      	b.n	801153e <tcp_receive+0x89e>
 8011524:	200084b0 	.word	0x200084b0
 8011528:	20008490 	.word	0x20008490
 801152c:	200084ba 	.word	0x200084ba
 8011530:	08019084 	.word	0x08019084
 8011534:	0801942c 	.word	0x0801942c
 8011538:	080190d0 	.word	0x080190d0
 801153c:	2300      	movs	r3, #0
 801153e:	4423      	add	r3, r4
 8011540:	b29a      	uxth	r2, r3
 8011542:	4b98      	ldr	r3, [pc, #608]	@ (80117a4 <tcp_receive+0xb04>)
 8011544:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011548:	613b      	str	r3, [r7, #16]
              next = next->next;
 801154a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011550:	6938      	ldr	r0, [r7, #16]
 8011552:	f7fd fd38 	bl	800efc6 <tcp_seg_free>
            while (next &&
 8011556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00e      	beq.n	801157a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801155c:	4b91      	ldr	r3, [pc, #580]	@ (80117a4 <tcp_receive+0xb04>)
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	461a      	mov	r2, r3
 8011562:	4b91      	ldr	r3, [pc, #580]	@ (80117a8 <tcp_receive+0xb08>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	441a      	add	r2, r3
 8011568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011570:	8909      	ldrh	r1, [r1, #8]
 8011572:	440b      	add	r3, r1
 8011574:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011576:	2b00      	cmp	r3, #0
 8011578:	da9b      	bge.n	80114b2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801157a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801157c:	2b00      	cmp	r3, #0
 801157e:	d059      	beq.n	8011634 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011580:	4b88      	ldr	r3, [pc, #544]	@ (80117a4 <tcp_receive+0xb04>)
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	461a      	mov	r2, r3
 8011586:	4b88      	ldr	r3, [pc, #544]	@ (80117a8 <tcp_receive+0xb08>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	441a      	add	r2, r3
 801158c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011594:	2b00      	cmp	r3, #0
 8011596:	dd4d      	ble.n	8011634 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	b29a      	uxth	r2, r3
 80115a0:	4b81      	ldr	r3, [pc, #516]	@ (80117a8 <tcp_receive+0xb08>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	1ad3      	subs	r3, r2, r3
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	4b80      	ldr	r3, [pc, #512]	@ (80117ac <tcp_receive+0xb0c>)
 80115ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80115ae:	4b7f      	ldr	r3, [pc, #508]	@ (80117ac <tcp_receive+0xb0c>)
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	899b      	ldrh	r3, [r3, #12]
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fa ff26 	bl	800c408 <lwip_htons>
 80115bc:	4603      	mov	r3, r0
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	f003 0302 	and.w	r3, r3, #2
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d005      	beq.n	80115d4 <tcp_receive+0x934>
                inseg.len -= 1;
 80115c8:	4b78      	ldr	r3, [pc, #480]	@ (80117ac <tcp_receive+0xb0c>)
 80115ca:	891b      	ldrh	r3, [r3, #8]
 80115cc:	3b01      	subs	r3, #1
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	4b76      	ldr	r3, [pc, #472]	@ (80117ac <tcp_receive+0xb0c>)
 80115d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80115d4:	4b75      	ldr	r3, [pc, #468]	@ (80117ac <tcp_receive+0xb0c>)
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	4a74      	ldr	r2, [pc, #464]	@ (80117ac <tcp_receive+0xb0c>)
 80115da:	8912      	ldrh	r2, [r2, #8]
 80115dc:	4611      	mov	r1, r2
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fc f8e6 	bl	800d7b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80115e4:	4b71      	ldr	r3, [pc, #452]	@ (80117ac <tcp_receive+0xb0c>)
 80115e6:	891c      	ldrh	r4, [r3, #8]
 80115e8:	4b70      	ldr	r3, [pc, #448]	@ (80117ac <tcp_receive+0xb0c>)
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	899b      	ldrh	r3, [r3, #12]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7fa ff09 	bl	800c408 <lwip_htons>
 80115f6:	4603      	mov	r3, r0
 80115f8:	b2db      	uxtb	r3, r3
 80115fa:	f003 0303 	and.w	r3, r3, #3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <tcp_receive+0x966>
 8011602:	2301      	movs	r3, #1
 8011604:	e000      	b.n	8011608 <tcp_receive+0x968>
 8011606:	2300      	movs	r3, #0
 8011608:	4423      	add	r3, r4
 801160a:	b29a      	uxth	r2, r3
 801160c:	4b65      	ldr	r3, [pc, #404]	@ (80117a4 <tcp_receive+0xb04>)
 801160e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011610:	4b64      	ldr	r3, [pc, #400]	@ (80117a4 <tcp_receive+0xb04>)
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	461a      	mov	r2, r3
 8011616:	4b64      	ldr	r3, [pc, #400]	@ (80117a8 <tcp_receive+0xb08>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	441a      	add	r2, r3
 801161c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	429a      	cmp	r2, r3
 8011624:	d006      	beq.n	8011634 <tcp_receive+0x994>
 8011626:	4b62      	ldr	r3, [pc, #392]	@ (80117b0 <tcp_receive+0xb10>)
 8011628:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801162c:	4961      	ldr	r1, [pc, #388]	@ (80117b4 <tcp_receive+0xb14>)
 801162e:	4862      	ldr	r0, [pc, #392]	@ (80117b8 <tcp_receive+0xb18>)
 8011630:	f005 fcf8 	bl	8017024 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011638:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801163a:	4b5a      	ldr	r3, [pc, #360]	@ (80117a4 <tcp_receive+0xb04>)
 801163c:	881b      	ldrh	r3, [r3, #0]
 801163e:	461a      	mov	r2, r3
 8011640:	4b59      	ldr	r3, [pc, #356]	@ (80117a8 <tcp_receive+0xb08>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	441a      	add	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801164e:	4b55      	ldr	r3, [pc, #340]	@ (80117a4 <tcp_receive+0xb04>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	429a      	cmp	r2, r3
 8011654:	d206      	bcs.n	8011664 <tcp_receive+0x9c4>
 8011656:	4b56      	ldr	r3, [pc, #344]	@ (80117b0 <tcp_receive+0xb10>)
 8011658:	f240 6207 	movw	r2, #1543	@ 0x607
 801165c:	4957      	ldr	r1, [pc, #348]	@ (80117bc <tcp_receive+0xb1c>)
 801165e:	4856      	ldr	r0, [pc, #344]	@ (80117b8 <tcp_receive+0xb18>)
 8011660:	f005 fce0 	bl	8017024 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011668:	4b4e      	ldr	r3, [pc, #312]	@ (80117a4 <tcp_receive+0xb04>)
 801166a:	881b      	ldrh	r3, [r3, #0]
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	b29a      	uxth	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f7fc ffc5 	bl	800e604 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801167a:	4b4c      	ldr	r3, [pc, #304]	@ (80117ac <tcp_receive+0xb0c>)
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	891b      	ldrh	r3, [r3, #8]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d006      	beq.n	8011692 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011684:	4b49      	ldr	r3, [pc, #292]	@ (80117ac <tcp_receive+0xb0c>)
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	4a4d      	ldr	r2, [pc, #308]	@ (80117c0 <tcp_receive+0xb20>)
 801168a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801168c:	4b47      	ldr	r3, [pc, #284]	@ (80117ac <tcp_receive+0xb0c>)
 801168e:	2200      	movs	r2, #0
 8011690:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011692:	4b46      	ldr	r3, [pc, #280]	@ (80117ac <tcp_receive+0xb0c>)
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	899b      	ldrh	r3, [r3, #12]
 8011698:	b29b      	uxth	r3, r3
 801169a:	4618      	mov	r0, r3
 801169c:	f7fa feb4 	bl	800c408 <lwip_htons>
 80116a0:	4603      	mov	r3, r0
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	f003 0301 	and.w	r3, r3, #1
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f000 80b8 	beq.w	801181e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80116ae:	4b45      	ldr	r3, [pc, #276]	@ (80117c4 <tcp_receive+0xb24>)
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	f043 0320 	orr.w	r3, r3, #32
 80116b6:	b2da      	uxtb	r2, r3
 80116b8:	4b42      	ldr	r3, [pc, #264]	@ (80117c4 <tcp_receive+0xb24>)
 80116ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80116bc:	e0af      	b.n	801181e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	4a36      	ldr	r2, [pc, #216]	@ (80117a8 <tcp_receive+0xb08>)
 80116ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	891b      	ldrh	r3, [r3, #8]
 80116d4:	461c      	mov	r4, r3
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	899b      	ldrh	r3, [r3, #12]
 80116dc:	b29b      	uxth	r3, r3
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fa fe92 	bl	800c408 <lwip_htons>
 80116e4:	4603      	mov	r3, r0
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	f003 0303 	and.w	r3, r3, #3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d001      	beq.n	80116f4 <tcp_receive+0xa54>
 80116f0:	2301      	movs	r3, #1
 80116f2:	e000      	b.n	80116f6 <tcp_receive+0xa56>
 80116f4:	2300      	movs	r3, #0
 80116f6:	191a      	adds	r2, r3, r4
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116fc:	441a      	add	r2, r3
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011706:	461c      	mov	r4, r3
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	891b      	ldrh	r3, [r3, #8]
 801170c:	461d      	mov	r5, r3
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	899b      	ldrh	r3, [r3, #12]
 8011714:	b29b      	uxth	r3, r3
 8011716:	4618      	mov	r0, r3
 8011718:	f7fa fe76 	bl	800c408 <lwip_htons>
 801171c:	4603      	mov	r3, r0
 801171e:	b2db      	uxtb	r3, r3
 8011720:	f003 0303 	and.w	r3, r3, #3
 8011724:	2b00      	cmp	r3, #0
 8011726:	d001      	beq.n	801172c <tcp_receive+0xa8c>
 8011728:	2301      	movs	r3, #1
 801172a:	e000      	b.n	801172e <tcp_receive+0xa8e>
 801172c:	2300      	movs	r3, #0
 801172e:	442b      	add	r3, r5
 8011730:	429c      	cmp	r4, r3
 8011732:	d206      	bcs.n	8011742 <tcp_receive+0xaa2>
 8011734:	4b1e      	ldr	r3, [pc, #120]	@ (80117b0 <tcp_receive+0xb10>)
 8011736:	f240 622b 	movw	r2, #1579	@ 0x62b
 801173a:	4923      	ldr	r1, [pc, #140]	@ (80117c8 <tcp_receive+0xb28>)
 801173c:	481e      	ldr	r0, [pc, #120]	@ (80117b8 <tcp_receive+0xb18>)
 801173e:	f005 fc71 	bl	8017024 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	891b      	ldrh	r3, [r3, #8]
 8011746:	461c      	mov	r4, r3
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	899b      	ldrh	r3, [r3, #12]
 801174e:	b29b      	uxth	r3, r3
 8011750:	4618      	mov	r0, r3
 8011752:	f7fa fe59 	bl	800c408 <lwip_htons>
 8011756:	4603      	mov	r3, r0
 8011758:	b2db      	uxtb	r3, r3
 801175a:	f003 0303 	and.w	r3, r3, #3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d001      	beq.n	8011766 <tcp_receive+0xac6>
 8011762:	2301      	movs	r3, #1
 8011764:	e000      	b.n	8011768 <tcp_receive+0xac8>
 8011766:	2300      	movs	r3, #0
 8011768:	1919      	adds	r1, r3, r4
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801176e:	b28b      	uxth	r3, r1
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	b29a      	uxth	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7fc ff43 	bl	800e604 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	891b      	ldrh	r3, [r3, #8]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d028      	beq.n	80117da <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011788:	4b0d      	ldr	r3, [pc, #52]	@ (80117c0 <tcp_receive+0xb20>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d01d      	beq.n	80117cc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011790:	4b0b      	ldr	r3, [pc, #44]	@ (80117c0 <tcp_receive+0xb20>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	4619      	mov	r1, r3
 801179a:	4610      	mov	r0, r2
 801179c:	f7fc fa50 	bl	800dc40 <pbuf_cat>
 80117a0:	e018      	b.n	80117d4 <tcp_receive+0xb34>
 80117a2:	bf00      	nop
 80117a4:	200084ba 	.word	0x200084ba
 80117a8:	200084b0 	.word	0x200084b0
 80117ac:	20008490 	.word	0x20008490
 80117b0:	08019084 	.word	0x08019084
 80117b4:	08019464 	.word	0x08019464
 80117b8:	080190d0 	.word	0x080190d0
 80117bc:	080194a0 	.word	0x080194a0
 80117c0:	200084c0 	.word	0x200084c0
 80117c4:	200084bd 	.word	0x200084bd
 80117c8:	080194c0 	.word	0x080194c0
            } else {
              recv_data = cseg->p;
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	4a70      	ldr	r2, [pc, #448]	@ (8011994 <tcp_receive+0xcf4>)
 80117d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2200      	movs	r2, #0
 80117d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	899b      	ldrh	r3, [r3, #12]
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fa fe10 	bl	800c408 <lwip_htons>
 80117e8:	4603      	mov	r3, r0
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	f003 0301 	and.w	r3, r3, #1
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d00d      	beq.n	8011810 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80117f4:	4b68      	ldr	r3, [pc, #416]	@ (8011998 <tcp_receive+0xcf8>)
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	f043 0320 	orr.w	r3, r3, #32
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	4b66      	ldr	r3, [pc, #408]	@ (8011998 <tcp_receive+0xcf8>)
 8011800:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	7d1b      	ldrb	r3, [r3, #20]
 8011806:	2b04      	cmp	r3, #4
 8011808:	d102      	bne.n	8011810 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2207      	movs	r2, #7
 801180e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011818:	68b8      	ldr	r0, [r7, #8]
 801181a:	f7fd fbd4 	bl	800efc6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011822:	2b00      	cmp	r3, #0
 8011824:	d008      	beq.n	8011838 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	685a      	ldr	r2, [r3, #4]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011832:	429a      	cmp	r2, r3
 8011834:	f43f af43 	beq.w	80116be <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	8b5b      	ldrh	r3, [r3, #26]
 801183c:	f003 0301 	and.w	r3, r3, #1
 8011840:	2b00      	cmp	r3, #0
 8011842:	d00e      	beq.n	8011862 <tcp_receive+0xbc2>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	8b5b      	ldrh	r3, [r3, #26]
 8011848:	f023 0301 	bic.w	r3, r3, #1
 801184c:	b29a      	uxth	r2, r3
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	835a      	strh	r2, [r3, #26]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	8b5b      	ldrh	r3, [r3, #26]
 8011856:	f043 0302 	orr.w	r3, r3, #2
 801185a:	b29a      	uxth	r2, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011860:	e187      	b.n	8011b72 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	8b5b      	ldrh	r3, [r3, #26]
 8011866:	f043 0301 	orr.w	r3, r3, #1
 801186a:	b29a      	uxth	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011870:	e17f      	b.n	8011b72 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011876:	2b00      	cmp	r3, #0
 8011878:	d106      	bne.n	8011888 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801187a:	4848      	ldr	r0, [pc, #288]	@ (801199c <tcp_receive+0xcfc>)
 801187c:	f7fd fbbc 	bl	800eff8 <tcp_seg_copy>
 8011880:	4602      	mov	r2, r0
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	675a      	str	r2, [r3, #116]	@ 0x74
 8011886:	e16c      	b.n	8011b62 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011888:	2300      	movs	r3, #0
 801188a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011890:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011892:	e156      	b.n	8011b42 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	685a      	ldr	r2, [r3, #4]
 801189a:	4b41      	ldr	r3, [pc, #260]	@ (80119a0 <tcp_receive+0xd00>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d11d      	bne.n	80118de <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80118a2:	4b3e      	ldr	r3, [pc, #248]	@ (801199c <tcp_receive+0xcfc>)
 80118a4:	891a      	ldrh	r2, [r3, #8]
 80118a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a8:	891b      	ldrh	r3, [r3, #8]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	f240 814e 	bls.w	8011b4c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118b0:	483a      	ldr	r0, [pc, #232]	@ (801199c <tcp_receive+0xcfc>)
 80118b2:	f7fd fba1 	bl	800eff8 <tcp_seg_copy>
 80118b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	f000 8148 	beq.w	8011b50 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80118c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d003      	beq.n	80118ce <tcp_receive+0xc2e>
                    prev->next = cseg;
 80118c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118c8:	697a      	ldr	r2, [r7, #20]
 80118ca:	601a      	str	r2, [r3, #0]
 80118cc:	e002      	b.n	80118d4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	697a      	ldr	r2, [r7, #20]
 80118d2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80118d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118d6:	6978      	ldr	r0, [r7, #20]
 80118d8:	f7ff f8de 	bl	8010a98 <tcp_oos_insert_segment>
                }
                break;
 80118dc:	e138      	b.n	8011b50 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80118de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d117      	bne.n	8011914 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80118e4:	4b2e      	ldr	r3, [pc, #184]	@ (80119a0 <tcp_receive+0xd00>)
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	da57      	bge.n	80119a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118f4:	4829      	ldr	r0, [pc, #164]	@ (801199c <tcp_receive+0xcfc>)
 80118f6:	f7fd fb7f 	bl	800eff8 <tcp_seg_copy>
 80118fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	f000 8128 	beq.w	8011b54 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	69ba      	ldr	r2, [r7, #24]
 8011908:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801190a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801190c:	69b8      	ldr	r0, [r7, #24]
 801190e:	f7ff f8c3 	bl	8010a98 <tcp_oos_insert_segment>
                  }
                  break;
 8011912:	e11f      	b.n	8011b54 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011914:	4b22      	ldr	r3, [pc, #136]	@ (80119a0 <tcp_receive+0xd00>)
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	3b01      	subs	r3, #1
 8011922:	2b00      	cmp	r3, #0
 8011924:	db3e      	blt.n	80119a4 <tcp_receive+0xd04>
 8011926:	4b1e      	ldr	r3, [pc, #120]	@ (80119a0 <tcp_receive+0xd00>)
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192c:	68db      	ldr	r3, [r3, #12]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	1ad3      	subs	r3, r2, r3
 8011932:	3301      	adds	r3, #1
 8011934:	2b00      	cmp	r3, #0
 8011936:	dc35      	bgt.n	80119a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011938:	4818      	ldr	r0, [pc, #96]	@ (801199c <tcp_receive+0xcfc>)
 801193a:	f7fd fb5d 	bl	800eff8 <tcp_seg_copy>
 801193e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	2b00      	cmp	r3, #0
 8011944:	f000 8108 	beq.w	8011b58 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011950:	8912      	ldrh	r2, [r2, #8]
 8011952:	441a      	add	r2, r3
 8011954:	4b12      	ldr	r3, [pc, #72]	@ (80119a0 <tcp_receive+0xd00>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	1ad3      	subs	r3, r2, r3
 801195a:	2b00      	cmp	r3, #0
 801195c:	dd12      	ble.n	8011984 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801195e:	4b10      	ldr	r3, [pc, #64]	@ (80119a0 <tcp_receive+0xd00>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	b29a      	uxth	r2, r3
 8011964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	b29b      	uxth	r3, r3
 801196c:	1ad3      	subs	r3, r2, r3
 801196e:	b29a      	uxth	r2, r3
 8011970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011972:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011976:	685a      	ldr	r2, [r3, #4]
 8011978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801197a:	891b      	ldrh	r3, [r3, #8]
 801197c:	4619      	mov	r1, r3
 801197e:	4610      	mov	r0, r2
 8011980:	f7fb ff16 	bl	800d7b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011986:	69fa      	ldr	r2, [r7, #28]
 8011988:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801198a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801198c:	69f8      	ldr	r0, [r7, #28]
 801198e:	f7ff f883 	bl	8010a98 <tcp_oos_insert_segment>
                  }
                  break;
 8011992:	e0e1      	b.n	8011b58 <tcp_receive+0xeb8>
 8011994:	200084c0 	.word	0x200084c0
 8011998:	200084bd 	.word	0x200084bd
 801199c:	20008490 	.word	0x20008490
 80119a0:	200084b0 	.word	0x200084b0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80119a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80119a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f040 80c5 	bne.w	8011b3c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80119b2:	4b7f      	ldr	r3, [pc, #508]	@ (8011bb0 <tcp_receive+0xf10>)
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80119be:	2b00      	cmp	r3, #0
 80119c0:	f340 80bc 	ble.w	8011b3c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80119c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	899b      	ldrh	r3, [r3, #12]
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fa fd1b 	bl	800c408 <lwip_htons>
 80119d2:	4603      	mov	r3, r0
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	2b00      	cmp	r3, #0
 80119dc:	f040 80be 	bne.w	8011b5c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80119e0:	4874      	ldr	r0, [pc, #464]	@ (8011bb4 <tcp_receive+0xf14>)
 80119e2:	f7fd fb09 	bl	800eff8 <tcp_seg_copy>
 80119e6:	4602      	mov	r2, r0
 80119e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80119ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f000 80b5 	beq.w	8011b60 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80119f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119fe:	8912      	ldrh	r2, [r2, #8]
 8011a00:	441a      	add	r2, r3
 8011a02:	4b6b      	ldr	r3, [pc, #428]	@ (8011bb0 <tcp_receive+0xf10>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	dd12      	ble.n	8011a32 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011a0c:	4b68      	ldr	r3, [pc, #416]	@ (8011bb0 <tcp_receive+0xf10>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	b29a      	uxth	r2, r3
 8011a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a24:	685a      	ldr	r2, [r3, #4]
 8011a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a28:	891b      	ldrh	r3, [r3, #8]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4610      	mov	r0, r2
 8011a2e:	f7fb febf 	bl	800d7b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011a32:	4b61      	ldr	r3, [pc, #388]	@ (8011bb8 <tcp_receive+0xf18>)
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	461a      	mov	r2, r3
 8011a38:	4b5d      	ldr	r3, [pc, #372]	@ (8011bb0 <tcp_receive+0xf10>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	441a      	add	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a42:	6879      	ldr	r1, [r7, #4]
 8011a44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011a46:	440b      	add	r3, r1
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f340 8088 	ble.w	8011b60 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	899b      	ldrh	r3, [r3, #12]
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7fa fcd4 	bl	800c408 <lwip_htons>
 8011a60:	4603      	mov	r3, r0
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	f003 0301 	and.w	r3, r3, #1
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d021      	beq.n	8011ab0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	899b      	ldrh	r3, [r3, #12]
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	b21b      	sxth	r3, r3
 8011a78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011a7c:	b21c      	sxth	r4, r3
 8011a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	899b      	ldrh	r3, [r3, #12]
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7fa fcbd 	bl	800c408 <lwip_htons>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fa fcb5 	bl	800c408 <lwip_htons>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	b21b      	sxth	r3, r3
 8011aa2:	4323      	orrs	r3, r4
 8011aa4:	b21a      	sxth	r2, r3
 8011aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	68db      	ldr	r3, [r3, #12]
 8011aac:	b292      	uxth	r2, r2
 8011aae:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011aba:	4413      	add	r3, r2
 8011abc:	b299      	uxth	r1, r3
 8011abe:	4b3c      	ldr	r3, [pc, #240]	@ (8011bb0 <tcp_receive+0xf10>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	1a8a      	subs	r2, r1, r2
 8011aca:	b292      	uxth	r2, r2
 8011acc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	685a      	ldr	r2, [r3, #4]
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	891b      	ldrh	r3, [r3, #8]
 8011ada:	4619      	mov	r1, r3
 8011adc:	4610      	mov	r0, r2
 8011ade:	f7fb fe67 	bl	800d7b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	891c      	ldrh	r4, [r3, #8]
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	68db      	ldr	r3, [r3, #12]
 8011aee:	899b      	ldrh	r3, [r3, #12]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fa fc88 	bl	800c408 <lwip_htons>
 8011af8:	4603      	mov	r3, r0
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	f003 0303 	and.w	r3, r3, #3
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <tcp_receive+0xe68>
 8011b04:	2301      	movs	r3, #1
 8011b06:	e000      	b.n	8011b0a <tcp_receive+0xe6a>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	4423      	add	r3, r4
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8011bb8 <tcp_receive+0xf18>)
 8011b10:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011b12:	4b29      	ldr	r3, [pc, #164]	@ (8011bb8 <tcp_receive+0xf18>)
 8011b14:	881b      	ldrh	r3, [r3, #0]
 8011b16:	461a      	mov	r2, r3
 8011b18:	4b25      	ldr	r3, [pc, #148]	@ (8011bb0 <tcp_receive+0xf10>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	441a      	add	r2, r3
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b22:	6879      	ldr	r1, [r7, #4]
 8011b24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011b26:	440b      	add	r3, r1
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d019      	beq.n	8011b60 <tcp_receive+0xec0>
 8011b2c:	4b23      	ldr	r3, [pc, #140]	@ (8011bbc <tcp_receive+0xf1c>)
 8011b2e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011b32:	4923      	ldr	r1, [pc, #140]	@ (8011bc0 <tcp_receive+0xf20>)
 8011b34:	4823      	ldr	r0, [pc, #140]	@ (8011bc4 <tcp_receive+0xf24>)
 8011b36:	f005 fa75 	bl	8017024 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011b3a:	e011      	b.n	8011b60 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f47f aea5 	bne.w	8011894 <tcp_receive+0xbf4>
 8011b4a:	e00a      	b.n	8011b62 <tcp_receive+0xec2>
                break;
 8011b4c:	bf00      	nop
 8011b4e:	e008      	b.n	8011b62 <tcp_receive+0xec2>
                break;
 8011b50:	bf00      	nop
 8011b52:	e006      	b.n	8011b62 <tcp_receive+0xec2>
                  break;
 8011b54:	bf00      	nop
 8011b56:	e004      	b.n	8011b62 <tcp_receive+0xec2>
                  break;
 8011b58:	bf00      	nop
 8011b5a:	e002      	b.n	8011b62 <tcp_receive+0xec2>
                  break;
 8011b5c:	bf00      	nop
 8011b5e:	e000      	b.n	8011b62 <tcp_receive+0xec2>
                break;
 8011b60:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f001 fa30 	bl	8012fc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011b68:	e003      	b.n	8011b72 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f001 fa2c 	bl	8012fc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b70:	e01a      	b.n	8011ba8 <tcp_receive+0xf08>
 8011b72:	e019      	b.n	8011ba8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011b74:	4b0e      	ldr	r3, [pc, #56]	@ (8011bb0 <tcp_receive+0xf10>)
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	db0a      	blt.n	8011b98 <tcp_receive+0xef8>
 8011b82:	4b0b      	ldr	r3, [pc, #44]	@ (8011bb0 <tcp_receive+0xf10>)
 8011b84:	681a      	ldr	r2, [r3, #0]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b8a:	6879      	ldr	r1, [r7, #4]
 8011b8c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011b8e:	440b      	add	r3, r1
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	3301      	adds	r3, #1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	dd07      	ble.n	8011ba8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	8b5b      	ldrh	r3, [r3, #26]
 8011b9c:	f043 0302 	orr.w	r3, r3, #2
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011ba6:	e7ff      	b.n	8011ba8 <tcp_receive+0xf08>
 8011ba8:	bf00      	nop
 8011baa:	3750      	adds	r7, #80	@ 0x50
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bdb0      	pop	{r4, r5, r7, pc}
 8011bb0:	200084b0 	.word	0x200084b0
 8011bb4:	20008490 	.word	0x20008490
 8011bb8:	200084ba 	.word	0x200084ba
 8011bbc:	08019084 	.word	0x08019084
 8011bc0:	0801942c 	.word	0x0801942c
 8011bc4:	080190d0 	.word	0x080190d0

08011bc8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011bce:	4b15      	ldr	r3, [pc, #84]	@ (8011c24 <tcp_get_next_optbyte+0x5c>)
 8011bd0:	881b      	ldrh	r3, [r3, #0]
 8011bd2:	1c5a      	adds	r2, r3, #1
 8011bd4:	b291      	uxth	r1, r2
 8011bd6:	4a13      	ldr	r2, [pc, #76]	@ (8011c24 <tcp_get_next_optbyte+0x5c>)
 8011bd8:	8011      	strh	r1, [r2, #0]
 8011bda:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011bdc:	4b12      	ldr	r3, [pc, #72]	@ (8011c28 <tcp_get_next_optbyte+0x60>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d004      	beq.n	8011bee <tcp_get_next_optbyte+0x26>
 8011be4:	4b11      	ldr	r3, [pc, #68]	@ (8011c2c <tcp_get_next_optbyte+0x64>)
 8011be6:	881b      	ldrh	r3, [r3, #0]
 8011be8:	88fa      	ldrh	r2, [r7, #6]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d208      	bcs.n	8011c00 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011bee:	4b10      	ldr	r3, [pc, #64]	@ (8011c30 <tcp_get_next_optbyte+0x68>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	3314      	adds	r3, #20
 8011bf4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011bf6:	88fb      	ldrh	r3, [r7, #6]
 8011bf8:	683a      	ldr	r2, [r7, #0]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	e00b      	b.n	8011c18 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011c00:	88fb      	ldrh	r3, [r7, #6]
 8011c02:	b2da      	uxtb	r2, r3
 8011c04:	4b09      	ldr	r3, [pc, #36]	@ (8011c2c <tcp_get_next_optbyte+0x64>)
 8011c06:	881b      	ldrh	r3, [r3, #0]
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011c0e:	4b06      	ldr	r3, [pc, #24]	@ (8011c28 <tcp_get_next_optbyte+0x60>)
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	797b      	ldrb	r3, [r7, #5]
 8011c14:	4413      	add	r3, r2
 8011c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr
 8011c24:	200084ac 	.word	0x200084ac
 8011c28:	200084a8 	.word	0x200084a8
 8011c2c:	200084a6 	.word	0x200084a6
 8011c30:	200084a0 	.word	0x200084a0

08011c34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <tcp_parseopt+0x1c>
 8011c42:	4b32      	ldr	r3, [pc, #200]	@ (8011d0c <tcp_parseopt+0xd8>)
 8011c44:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011c48:	4931      	ldr	r1, [pc, #196]	@ (8011d10 <tcp_parseopt+0xdc>)
 8011c4a:	4832      	ldr	r0, [pc, #200]	@ (8011d14 <tcp_parseopt+0xe0>)
 8011c4c:	f005 f9ea 	bl	8017024 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011c50:	4b31      	ldr	r3, [pc, #196]	@ (8011d18 <tcp_parseopt+0xe4>)
 8011c52:	881b      	ldrh	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d056      	beq.n	8011d06 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011c58:	4b30      	ldr	r3, [pc, #192]	@ (8011d1c <tcp_parseopt+0xe8>)
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	801a      	strh	r2, [r3, #0]
 8011c5e:	e046      	b.n	8011cee <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011c60:	f7ff ffb2 	bl	8011bc8 <tcp_get_next_optbyte>
 8011c64:	4603      	mov	r3, r0
 8011c66:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
 8011c6a:	2b02      	cmp	r3, #2
 8011c6c:	d006      	beq.n	8011c7c <tcp_parseopt+0x48>
 8011c6e:	2b02      	cmp	r3, #2
 8011c70:	dc2a      	bgt.n	8011cc8 <tcp_parseopt+0x94>
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d042      	beq.n	8011cfc <tcp_parseopt+0xc8>
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d038      	beq.n	8011cec <tcp_parseopt+0xb8>
 8011c7a:	e025      	b.n	8011cc8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011c7c:	f7ff ffa4 	bl	8011bc8 <tcp_get_next_optbyte>
 8011c80:	4603      	mov	r3, r0
 8011c82:	2b04      	cmp	r3, #4
 8011c84:	d13c      	bne.n	8011d00 <tcp_parseopt+0xcc>
 8011c86:	4b25      	ldr	r3, [pc, #148]	@ (8011d1c <tcp_parseopt+0xe8>)
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	4a22      	ldr	r2, [pc, #136]	@ (8011d18 <tcp_parseopt+0xe4>)
 8011c8e:	8812      	ldrh	r2, [r2, #0]
 8011c90:	4293      	cmp	r3, r2
 8011c92:	da35      	bge.n	8011d00 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011c94:	f7ff ff98 	bl	8011bc8 <tcp_get_next_optbyte>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	021b      	lsls	r3, r3, #8
 8011c9c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011c9e:	f7ff ff93 	bl	8011bc8 <tcp_get_next_optbyte>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	89bb      	ldrh	r3, [r7, #12]
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011cac:	89bb      	ldrh	r3, [r7, #12]
 8011cae:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011cb2:	d804      	bhi.n	8011cbe <tcp_parseopt+0x8a>
 8011cb4:	89bb      	ldrh	r3, [r7, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d001      	beq.n	8011cbe <tcp_parseopt+0x8a>
 8011cba:	89ba      	ldrh	r2, [r7, #12]
 8011cbc:	e001      	b.n	8011cc2 <tcp_parseopt+0x8e>
 8011cbe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011cc6:	e012      	b.n	8011cee <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011cc8:	f7ff ff7e 	bl	8011bc8 <tcp_get_next_optbyte>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011cd0:	7afb      	ldrb	r3, [r7, #11]
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d916      	bls.n	8011d04 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011cd6:	7afb      	ldrb	r3, [r7, #11]
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	4b10      	ldr	r3, [pc, #64]	@ (8011d1c <tcp_parseopt+0xe8>)
 8011cdc:	881b      	ldrh	r3, [r3, #0]
 8011cde:	4413      	add	r3, r2
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	3b02      	subs	r3, #2
 8011ce4:	b29a      	uxth	r2, r3
 8011ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8011d1c <tcp_parseopt+0xe8>)
 8011ce8:	801a      	strh	r2, [r3, #0]
 8011cea:	e000      	b.n	8011cee <tcp_parseopt+0xba>
          break;
 8011cec:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011cee:	4b0b      	ldr	r3, [pc, #44]	@ (8011d1c <tcp_parseopt+0xe8>)
 8011cf0:	881a      	ldrh	r2, [r3, #0]
 8011cf2:	4b09      	ldr	r3, [pc, #36]	@ (8011d18 <tcp_parseopt+0xe4>)
 8011cf4:	881b      	ldrh	r3, [r3, #0]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d3b2      	bcc.n	8011c60 <tcp_parseopt+0x2c>
 8011cfa:	e004      	b.n	8011d06 <tcp_parseopt+0xd2>
          return;
 8011cfc:	bf00      	nop
 8011cfe:	e002      	b.n	8011d06 <tcp_parseopt+0xd2>
            return;
 8011d00:	bf00      	nop
 8011d02:	e000      	b.n	8011d06 <tcp_parseopt+0xd2>
            return;
 8011d04:	bf00      	nop
      }
    }
  }
}
 8011d06:	3710      	adds	r7, #16
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	08019084 	.word	0x08019084
 8011d10:	080194e8 	.word	0x080194e8
 8011d14:	080190d0 	.word	0x080190d0
 8011d18:	200084a4 	.word	0x200084a4
 8011d1c:	200084ac 	.word	0x200084ac

08011d20 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011d20:	b480      	push	{r7}
 8011d22:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011d24:	4b05      	ldr	r3, [pc, #20]	@ (8011d3c <tcp_trigger_input_pcb_close+0x1c>)
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	f043 0310 	orr.w	r3, r3, #16
 8011d2c:	b2da      	uxtb	r2, r3
 8011d2e:	4b03      	ldr	r3, [pc, #12]	@ (8011d3c <tcp_trigger_input_pcb_close+0x1c>)
 8011d30:	701a      	strb	r2, [r3, #0]
}
 8011d32:	bf00      	nop
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr
 8011d3c:	200084bd 	.word	0x200084bd

08011d40 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00a      	beq.n	8011d68 <tcp_route+0x28>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	7a1b      	ldrb	r3, [r3, #8]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d006      	beq.n	8011d68 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	7a1b      	ldrb	r3, [r3, #8]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fb fb4c 	bl	800d3fc <netif_get_by_index>
 8011d64:	4603      	mov	r3, r0
 8011d66:	e003      	b.n	8011d70 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f003 f96b 	bl	8015044 <ip4_route>
 8011d6e:	4603      	mov	r3, r0
  }
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3710      	adds	r7, #16
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011d78:	b590      	push	{r4, r7, lr}
 8011d7a:	b087      	sub	sp, #28
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	603b      	str	r3, [r7, #0]
 8011d84:	4613      	mov	r3, r2
 8011d86:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d105      	bne.n	8011d9a <tcp_create_segment+0x22>
 8011d8e:	4b43      	ldr	r3, [pc, #268]	@ (8011e9c <tcp_create_segment+0x124>)
 8011d90:	22a3      	movs	r2, #163	@ 0xa3
 8011d92:	4943      	ldr	r1, [pc, #268]	@ (8011ea0 <tcp_create_segment+0x128>)
 8011d94:	4843      	ldr	r0, [pc, #268]	@ (8011ea4 <tcp_create_segment+0x12c>)
 8011d96:	f005 f945 	bl	8017024 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d105      	bne.n	8011dac <tcp_create_segment+0x34>
 8011da0:	4b3e      	ldr	r3, [pc, #248]	@ (8011e9c <tcp_create_segment+0x124>)
 8011da2:	22a4      	movs	r2, #164	@ 0xa4
 8011da4:	4940      	ldr	r1, [pc, #256]	@ (8011ea8 <tcp_create_segment+0x130>)
 8011da6:	483f      	ldr	r0, [pc, #252]	@ (8011ea4 <tcp_create_segment+0x12c>)
 8011da8:	f005 f93c 	bl	8017024 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011dac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011db0:	009b      	lsls	r3, r3, #2
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	f003 0304 	and.w	r3, r3, #4
 8011db8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011dba:	2003      	movs	r0, #3
 8011dbc:	f7fa ff98 	bl	800ccf0 <memp_malloc>
 8011dc0:	6138      	str	r0, [r7, #16]
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d104      	bne.n	8011dd2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011dc8:	68b8      	ldr	r0, [r7, #8]
 8011dca:	f7fb fe77 	bl	800dabc <pbuf_free>
    return NULL;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	e060      	b.n	8011e94 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011dd8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	68ba      	ldr	r2, [r7, #8]
 8011de4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	891a      	ldrh	r2, [r3, #8]
 8011dea:	7dfb      	ldrb	r3, [r7, #23]
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d205      	bcs.n	8011dfe <tcp_create_segment+0x86>
 8011df2:	4b2a      	ldr	r3, [pc, #168]	@ (8011e9c <tcp_create_segment+0x124>)
 8011df4:	22b0      	movs	r2, #176	@ 0xb0
 8011df6:	492d      	ldr	r1, [pc, #180]	@ (8011eac <tcp_create_segment+0x134>)
 8011df8:	482a      	ldr	r0, [pc, #168]	@ (8011ea4 <tcp_create_segment+0x12c>)
 8011dfa:	f005 f913 	bl	8017024 <iprintf>
  seg->len = p->tot_len - optlen;
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	891a      	ldrh	r2, [r3, #8]
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	1ad3      	subs	r3, r2, r3
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011e0e:	2114      	movs	r1, #20
 8011e10:	68b8      	ldr	r0, [r7, #8]
 8011e12:	f7fb fdbd 	bl	800d990 <pbuf_add_header>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d004      	beq.n	8011e26 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011e1c:	6938      	ldr	r0, [r7, #16]
 8011e1e:	f7fd f8d2 	bl	800efc6 <tcp_seg_free>
    return NULL;
 8011e22:	2300      	movs	r3, #0
 8011e24:	e036      	b.n	8011e94 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	685a      	ldr	r2, [r3, #4]
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	8ada      	ldrh	r2, [r3, #22]
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	68dc      	ldr	r4, [r3, #12]
 8011e38:	4610      	mov	r0, r2
 8011e3a:	f7fa fae5 	bl	800c408 <lwip_htons>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	8b1a      	ldrh	r2, [r3, #24]
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	68dc      	ldr	r4, [r3, #12]
 8011e4a:	4610      	mov	r0, r2
 8011e4c:	f7fa fadc 	bl	800c408 <lwip_htons>
 8011e50:	4603      	mov	r3, r0
 8011e52:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	68dc      	ldr	r4, [r3, #12]
 8011e58:	6838      	ldr	r0, [r7, #0]
 8011e5a:	f7fa faeb 	bl	800c434 <lwip_htonl>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011e62:	7dfb      	ldrb	r3, [r7, #23]
 8011e64:	089b      	lsrs	r3, r3, #2
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	3305      	adds	r3, #5
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	031b      	lsls	r3, r3, #12
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	79fb      	ldrb	r3, [r7, #7]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	4313      	orrs	r3, r2
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	68dc      	ldr	r4, [r3, #12]
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	f7fa fac3 	bl	800c408 <lwip_htons>
 8011e82:	4603      	mov	r3, r0
 8011e84:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	749a      	strb	r2, [r3, #18]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	74da      	strb	r2, [r3, #19]
  return seg;
 8011e92:	693b      	ldr	r3, [r7, #16]
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	371c      	adds	r7, #28
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd90      	pop	{r4, r7, pc}
 8011e9c:	08019504 	.word	0x08019504
 8011ea0:	08019538 	.word	0x08019538
 8011ea4:	08019558 	.word	0x08019558
 8011ea8:	08019580 	.word	0x08019580
 8011eac:	080195a4 	.word	0x080195a4

08011eb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011eb0:	b590      	push	{r4, r7, lr}
 8011eb2:	b08b      	sub	sp, #44	@ 0x2c
 8011eb4:	af02      	add	r7, sp, #8
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	61fb      	str	r3, [r7, #28]
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d106      	bne.n	8011edc <tcp_split_unsent_seg+0x2c>
 8011ece:	4b95      	ldr	r3, [pc, #596]	@ (8012124 <tcp_split_unsent_seg+0x274>)
 8011ed0:	f240 324b 	movw	r2, #843	@ 0x34b
 8011ed4:	4994      	ldr	r1, [pc, #592]	@ (8012128 <tcp_split_unsent_seg+0x278>)
 8011ed6:	4895      	ldr	r0, [pc, #596]	@ (801212c <tcp_split_unsent_seg+0x27c>)
 8011ed8:	f005 f8a4 	bl	8017024 <iprintf>

  useg = pcb->unsent;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ee0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d102      	bne.n	8011eee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011ee8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011eec:	e116      	b.n	801211c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011eee:	887b      	ldrh	r3, [r7, #2]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d109      	bne.n	8011f08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011ef4:	4b8b      	ldr	r3, [pc, #556]	@ (8012124 <tcp_split_unsent_seg+0x274>)
 8011ef6:	f240 3253 	movw	r2, #851	@ 0x353
 8011efa:	498d      	ldr	r1, [pc, #564]	@ (8012130 <tcp_split_unsent_seg+0x280>)
 8011efc:	488b      	ldr	r0, [pc, #556]	@ (801212c <tcp_split_unsent_seg+0x27c>)
 8011efe:	f005 f891 	bl	8017024 <iprintf>
    return ERR_VAL;
 8011f02:	f06f 0305 	mvn.w	r3, #5
 8011f06:	e109      	b.n	801211c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	891b      	ldrh	r3, [r3, #8]
 8011f0c:	887a      	ldrh	r2, [r7, #2]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d301      	bcc.n	8011f16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011f12:	2300      	movs	r3, #0
 8011f14:	e102      	b.n	801211c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f1a:	887a      	ldrh	r2, [r7, #2]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d906      	bls.n	8011f2e <tcp_split_unsent_seg+0x7e>
 8011f20:	4b80      	ldr	r3, [pc, #512]	@ (8012124 <tcp_split_unsent_seg+0x274>)
 8011f22:	f240 325b 	movw	r2, #859	@ 0x35b
 8011f26:	4983      	ldr	r1, [pc, #524]	@ (8012134 <tcp_split_unsent_seg+0x284>)
 8011f28:	4880      	ldr	r0, [pc, #512]	@ (801212c <tcp_split_unsent_seg+0x27c>)
 8011f2a:	f005 f87b 	bl	8017024 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	891b      	ldrh	r3, [r3, #8]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d106      	bne.n	8011f44 <tcp_split_unsent_seg+0x94>
 8011f36:	4b7b      	ldr	r3, [pc, #492]	@ (8012124 <tcp_split_unsent_seg+0x274>)
 8011f38:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011f3c:	497e      	ldr	r1, [pc, #504]	@ (8012138 <tcp_split_unsent_seg+0x288>)
 8011f3e:	487b      	ldr	r0, [pc, #492]	@ (801212c <tcp_split_unsent_seg+0x27c>)
 8011f40:	f005 f870 	bl	8017024 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	7a9b      	ldrb	r3, [r3, #10]
 8011f48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011f4a:	7bfb      	ldrb	r3, [r7, #15]
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	f003 0304 	and.w	r3, r3, #4
 8011f54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	891a      	ldrh	r2, [r3, #8]
 8011f5a:	887b      	ldrh	r3, [r7, #2]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011f60:	7bbb      	ldrb	r3, [r7, #14]
 8011f62:	b29a      	uxth	r2, r3
 8011f64:	89bb      	ldrh	r3, [r7, #12]
 8011f66:	4413      	add	r3, r2
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011f6e:	4619      	mov	r1, r3
 8011f70:	2036      	movs	r0, #54	@ 0x36
 8011f72:	f7fb fabf 	bl	800d4f4 <pbuf_alloc>
 8011f76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f000 80b7 	beq.w	80120ee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	891a      	ldrh	r2, [r3, #8]
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	891b      	ldrh	r3, [r3, #8]
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	b29a      	uxth	r2, r3
 8011f8e:	887b      	ldrh	r3, [r7, #2]
 8011f90:	4413      	add	r3, r2
 8011f92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	6858      	ldr	r0, [r3, #4]
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	685a      	ldr	r2, [r3, #4]
 8011f9c:	7bbb      	ldrb	r3, [r7, #14]
 8011f9e:	18d1      	adds	r1, r2, r3
 8011fa0:	897b      	ldrh	r3, [r7, #10]
 8011fa2:	89ba      	ldrh	r2, [r7, #12]
 8011fa4:	f7fb ff84 	bl	800deb0 <pbuf_copy_partial>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	461a      	mov	r2, r3
 8011fac:	89bb      	ldrh	r3, [r7, #12]
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	f040 809f 	bne.w	80120f2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	899b      	ldrh	r3, [r3, #12]
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fa fa23 	bl	800c408 <lwip_htons>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011fca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011fcc:	2300      	movs	r3, #0
 8011fce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011fd0:	7efb      	ldrb	r3, [r7, #27]
 8011fd2:	f003 0308 	and.w	r3, r3, #8
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d007      	beq.n	8011fea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011fda:	7efb      	ldrb	r3, [r7, #27]
 8011fdc:	f023 0308 	bic.w	r3, r3, #8
 8011fe0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011fe2:	7ebb      	ldrb	r3, [r7, #26]
 8011fe4:	f043 0308 	orr.w	r3, r3, #8
 8011fe8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011fea:	7efb      	ldrb	r3, [r7, #27]
 8011fec:	f003 0301 	and.w	r3, r3, #1
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d007      	beq.n	8012004 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011ff4:	7efb      	ldrb	r3, [r7, #27]
 8011ff6:	f023 0301 	bic.w	r3, r3, #1
 8011ffa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011ffc:	7ebb      	ldrb	r3, [r7, #26]
 8011ffe:	f043 0301 	orr.w	r3, r3, #1
 8012002:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	4618      	mov	r0, r3
 801200c:	f7fa fa12 	bl	800c434 <lwip_htonl>
 8012010:	4602      	mov	r2, r0
 8012012:	887b      	ldrh	r3, [r7, #2]
 8012014:	18d1      	adds	r1, r2, r3
 8012016:	7eba      	ldrb	r2, [r7, #26]
 8012018:	7bfb      	ldrb	r3, [r7, #15]
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	460b      	mov	r3, r1
 801201e:	6939      	ldr	r1, [r7, #16]
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f7ff fea9 	bl	8011d78 <tcp_create_segment>
 8012026:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d063      	beq.n	80120f6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	4618      	mov	r0, r3
 8012034:	f7fb fdca 	bl	800dbcc <pbuf_clen>
 8012038:	4603      	mov	r3, r0
 801203a:	461a      	mov	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012042:	1a9b      	subs	r3, r3, r2
 8012044:	b29a      	uxth	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	6858      	ldr	r0, [r3, #4]
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	891a      	ldrh	r2, [r3, #8]
 8012056:	89bb      	ldrh	r3, [r7, #12]
 8012058:	1ad3      	subs	r3, r2, r3
 801205a:	b29b      	uxth	r3, r3
 801205c:	4619      	mov	r1, r3
 801205e:	f7fb fba7 	bl	800d7b0 <pbuf_realloc>
  useg->len -= remainder;
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	891a      	ldrh	r2, [r3, #8]
 8012066:	89bb      	ldrh	r3, [r7, #12]
 8012068:	1ad3      	subs	r3, r2, r3
 801206a:	b29a      	uxth	r2, r3
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	899b      	ldrh	r3, [r3, #12]
 8012076:	b29c      	uxth	r4, r3
 8012078:	7efb      	ldrb	r3, [r7, #27]
 801207a:	b29b      	uxth	r3, r3
 801207c:	4618      	mov	r0, r3
 801207e:	f7fa f9c3 	bl	800c408 <lwip_htons>
 8012082:	4603      	mov	r3, r0
 8012084:	461a      	mov	r2, r3
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	4322      	orrs	r2, r4
 801208c:	b292      	uxth	r2, r2
 801208e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	4618      	mov	r0, r3
 8012096:	f7fb fd99 	bl	800dbcc <pbuf_clen>
 801209a:	4603      	mov	r3, r0
 801209c:	461a      	mov	r2, r3
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80120a4:	4413      	add	r3, r2
 80120a6:	b29a      	uxth	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fb fd8a 	bl	800dbcc <pbuf_clen>
 80120b8:	4603      	mov	r3, r0
 80120ba:	461a      	mov	r2, r3
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80120c2:	4413      	add	r3, r2
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	69fa      	ldr	r2, [r7, #28]
 80120d8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d103      	bne.n	80120ea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	e016      	b.n	801211c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80120ee:	bf00      	nop
 80120f0:	e002      	b.n	80120f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120f2:	bf00      	nop
 80120f4:	e000      	b.n	80120f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120f6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d006      	beq.n	801210c <tcp_split_unsent_seg+0x25c>
 80120fe:	4b09      	ldr	r3, [pc, #36]	@ (8012124 <tcp_split_unsent_seg+0x274>)
 8012100:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012104:	490d      	ldr	r1, [pc, #52]	@ (801213c <tcp_split_unsent_seg+0x28c>)
 8012106:	4809      	ldr	r0, [pc, #36]	@ (801212c <tcp_split_unsent_seg+0x27c>)
 8012108:	f004 ff8c 	bl	8017024 <iprintf>
  if (p != NULL) {
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d002      	beq.n	8012118 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012112:	6938      	ldr	r0, [r7, #16]
 8012114:	f7fb fcd2 	bl	800dabc <pbuf_free>
  }

  return ERR_MEM;
 8012118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801211c:	4618      	mov	r0, r3
 801211e:	3724      	adds	r7, #36	@ 0x24
 8012120:	46bd      	mov	sp, r7
 8012122:	bd90      	pop	{r4, r7, pc}
 8012124:	08019504 	.word	0x08019504
 8012128:	08019898 	.word	0x08019898
 801212c:	08019558 	.word	0x08019558
 8012130:	080198bc 	.word	0x080198bc
 8012134:	080198e0 	.word	0x080198e0
 8012138:	080198f0 	.word	0x080198f0
 801213c:	08019900 	.word	0x08019900

08012140 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012140:	b590      	push	{r4, r7, lr}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d106      	bne.n	801215c <tcp_send_fin+0x1c>
 801214e:	4b21      	ldr	r3, [pc, #132]	@ (80121d4 <tcp_send_fin+0x94>)
 8012150:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012154:	4920      	ldr	r1, [pc, #128]	@ (80121d8 <tcp_send_fin+0x98>)
 8012156:	4821      	ldr	r0, [pc, #132]	@ (80121dc <tcp_send_fin+0x9c>)
 8012158:	f004 ff64 	bl	8017024 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012160:	2b00      	cmp	r3, #0
 8012162:	d02e      	beq.n	80121c2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012168:	60fb      	str	r3, [r7, #12]
 801216a:	e002      	b.n	8012172 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d1f8      	bne.n	801216c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	899b      	ldrh	r3, [r3, #12]
 8012180:	b29b      	uxth	r3, r3
 8012182:	4618      	mov	r0, r3
 8012184:	f7fa f940 	bl	800c408 <lwip_htons>
 8012188:	4603      	mov	r3, r0
 801218a:	b2db      	uxtb	r3, r3
 801218c:	f003 0307 	and.w	r3, r3, #7
 8012190:	2b00      	cmp	r3, #0
 8012192:	d116      	bne.n	80121c2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	899b      	ldrh	r3, [r3, #12]
 801219a:	b29c      	uxth	r4, r3
 801219c:	2001      	movs	r0, #1
 801219e:	f7fa f933 	bl	800c408 <lwip_htons>
 80121a2:	4603      	mov	r3, r0
 80121a4:	461a      	mov	r2, r3
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	4322      	orrs	r2, r4
 80121ac:	b292      	uxth	r2, r2
 80121ae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	8b5b      	ldrh	r3, [r3, #26]
 80121b4:	f043 0320 	orr.w	r3, r3, #32
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80121be:	2300      	movs	r3, #0
 80121c0:	e004      	b.n	80121cc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80121c2:	2101      	movs	r1, #1
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f000 f80b 	bl	80121e0 <tcp_enqueue_flags>
 80121ca:	4603      	mov	r3, r0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3714      	adds	r7, #20
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd90      	pop	{r4, r7, pc}
 80121d4:	08019504 	.word	0x08019504
 80121d8:	0801990c 	.word	0x0801990c
 80121dc:	08019558 	.word	0x08019558

080121e0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b08a      	sub	sp, #40	@ 0x28
 80121e4:	af02      	add	r7, sp, #8
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	460b      	mov	r3, r1
 80121ea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80121ec:	2300      	movs	r3, #0
 80121ee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80121f0:	2300      	movs	r3, #0
 80121f2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80121f4:	78fb      	ldrb	r3, [r7, #3]
 80121f6:	f003 0303 	and.w	r3, r3, #3
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d106      	bne.n	801220c <tcp_enqueue_flags+0x2c>
 80121fe:	4b67      	ldr	r3, [pc, #412]	@ (801239c <tcp_enqueue_flags+0x1bc>)
 8012200:	f240 4211 	movw	r2, #1041	@ 0x411
 8012204:	4966      	ldr	r1, [pc, #408]	@ (80123a0 <tcp_enqueue_flags+0x1c0>)
 8012206:	4867      	ldr	r0, [pc, #412]	@ (80123a4 <tcp_enqueue_flags+0x1c4>)
 8012208:	f004 ff0c 	bl	8017024 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d106      	bne.n	8012220 <tcp_enqueue_flags+0x40>
 8012212:	4b62      	ldr	r3, [pc, #392]	@ (801239c <tcp_enqueue_flags+0x1bc>)
 8012214:	f240 4213 	movw	r2, #1043	@ 0x413
 8012218:	4963      	ldr	r1, [pc, #396]	@ (80123a8 <tcp_enqueue_flags+0x1c8>)
 801221a:	4862      	ldr	r0, [pc, #392]	@ (80123a4 <tcp_enqueue_flags+0x1c4>)
 801221c:	f004 ff02 	bl	8017024 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012220:	78fb      	ldrb	r3, [r7, #3]
 8012222:	f003 0302 	and.w	r3, r3, #2
 8012226:	2b00      	cmp	r3, #0
 8012228:	d001      	beq.n	801222e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801222a:	2301      	movs	r3, #1
 801222c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801222e:	7ffb      	ldrb	r3, [r7, #31]
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	b2db      	uxtb	r3, r3
 8012234:	f003 0304 	and.w	r3, r3, #4
 8012238:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801223a:	7dfb      	ldrb	r3, [r7, #23]
 801223c:	b29b      	uxth	r3, r3
 801223e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012242:	4619      	mov	r1, r3
 8012244:	2036      	movs	r0, #54	@ 0x36
 8012246:	f7fb f955 	bl	800d4f4 <pbuf_alloc>
 801224a:	6138      	str	r0, [r7, #16]
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d109      	bne.n	8012266 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	8b5b      	ldrh	r3, [r3, #26]
 8012256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801225a:	b29a      	uxth	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012264:	e095      	b.n	8012392 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	895a      	ldrh	r2, [r3, #10]
 801226a:	7dfb      	ldrb	r3, [r7, #23]
 801226c:	b29b      	uxth	r3, r3
 801226e:	429a      	cmp	r2, r3
 8012270:	d206      	bcs.n	8012280 <tcp_enqueue_flags+0xa0>
 8012272:	4b4a      	ldr	r3, [pc, #296]	@ (801239c <tcp_enqueue_flags+0x1bc>)
 8012274:	f240 4239 	movw	r2, #1081	@ 0x439
 8012278:	494c      	ldr	r1, [pc, #304]	@ (80123ac <tcp_enqueue_flags+0x1cc>)
 801227a:	484a      	ldr	r0, [pc, #296]	@ (80123a4 <tcp_enqueue_flags+0x1c4>)
 801227c:	f004 fed2 	bl	8017024 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012284:	78fa      	ldrb	r2, [r7, #3]
 8012286:	7ffb      	ldrb	r3, [r7, #31]
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	460b      	mov	r3, r1
 801228c:	6939      	ldr	r1, [r7, #16]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f7ff fd72 	bl	8011d78 <tcp_create_segment>
 8012294:	60f8      	str	r0, [r7, #12]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d109      	bne.n	80122b0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	8b5b      	ldrh	r3, [r3, #26]
 80122a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80122ae:	e070      	b.n	8012392 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	f003 0303 	and.w	r3, r3, #3
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d006      	beq.n	80122ca <tcp_enqueue_flags+0xea>
 80122bc:	4b37      	ldr	r3, [pc, #220]	@ (801239c <tcp_enqueue_flags+0x1bc>)
 80122be:	f240 4242 	movw	r2, #1090	@ 0x442
 80122c2:	493b      	ldr	r1, [pc, #236]	@ (80123b0 <tcp_enqueue_flags+0x1d0>)
 80122c4:	4837      	ldr	r0, [pc, #220]	@ (80123a4 <tcp_enqueue_flags+0x1c4>)
 80122c6:	f004 fead 	bl	8017024 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	891b      	ldrh	r3, [r3, #8]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d006      	beq.n	80122e0 <tcp_enqueue_flags+0x100>
 80122d2:	4b32      	ldr	r3, [pc, #200]	@ (801239c <tcp_enqueue_flags+0x1bc>)
 80122d4:	f240 4243 	movw	r2, #1091	@ 0x443
 80122d8:	4936      	ldr	r1, [pc, #216]	@ (80123b4 <tcp_enqueue_flags+0x1d4>)
 80122da:	4832      	ldr	r0, [pc, #200]	@ (80123a4 <tcp_enqueue_flags+0x1c4>)
 80122dc:	f004 fea2 	bl	8017024 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d103      	bne.n	80122f0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68fa      	ldr	r2, [r7, #12]
 80122ec:	66da      	str	r2, [r3, #108]	@ 0x6c
 80122ee:	e00d      	b.n	801230c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122f4:	61bb      	str	r3, [r7, #24]
 80122f6:	e002      	b.n	80122fe <tcp_enqueue_flags+0x11e>
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	61bb      	str	r3, [r7, #24]
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d1f8      	bne.n	80122f8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	68fa      	ldr	r2, [r7, #12]
 801230a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012314:	78fb      	ldrb	r3, [r7, #3]
 8012316:	f003 0302 	and.w	r3, r3, #2
 801231a:	2b00      	cmp	r3, #0
 801231c:	d104      	bne.n	8012328 <tcp_enqueue_flags+0x148>
 801231e:	78fb      	ldrb	r3, [r7, #3]
 8012320:	f003 0301 	and.w	r3, r3, #1
 8012324:	2b00      	cmp	r3, #0
 8012326:	d004      	beq.n	8012332 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801232c:	1c5a      	adds	r2, r3, #1
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012332:	78fb      	ldrb	r3, [r7, #3]
 8012334:	f003 0301 	and.w	r3, r3, #1
 8012338:	2b00      	cmp	r3, #0
 801233a:	d006      	beq.n	801234a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	8b5b      	ldrh	r3, [r3, #26]
 8012340:	f043 0320 	orr.w	r3, r3, #32
 8012344:	b29a      	uxth	r2, r3
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	4618      	mov	r0, r3
 8012350:	f7fb fc3c 	bl	800dbcc <pbuf_clen>
 8012354:	4603      	mov	r3, r0
 8012356:	461a      	mov	r2, r3
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801235e:	4413      	add	r3, r2
 8012360:	b29a      	uxth	r2, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00e      	beq.n	8012390 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012376:	2b00      	cmp	r3, #0
 8012378:	d10a      	bne.n	8012390 <tcp_enqueue_flags+0x1b0>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801237e:	2b00      	cmp	r3, #0
 8012380:	d106      	bne.n	8012390 <tcp_enqueue_flags+0x1b0>
 8012382:	4b06      	ldr	r3, [pc, #24]	@ (801239c <tcp_enqueue_flags+0x1bc>)
 8012384:	f240 4265 	movw	r2, #1125	@ 0x465
 8012388:	490b      	ldr	r1, [pc, #44]	@ (80123b8 <tcp_enqueue_flags+0x1d8>)
 801238a:	4806      	ldr	r0, [pc, #24]	@ (80123a4 <tcp_enqueue_flags+0x1c4>)
 801238c:	f004 fe4a 	bl	8017024 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012390:	2300      	movs	r3, #0
}
 8012392:	4618      	mov	r0, r3
 8012394:	3720      	adds	r7, #32
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	08019504 	.word	0x08019504
 80123a0:	08019928 	.word	0x08019928
 80123a4:	08019558 	.word	0x08019558
 80123a8:	08019980 	.word	0x08019980
 80123ac:	080199a0 	.word	0x080199a0
 80123b0:	080199dc 	.word	0x080199dc
 80123b4:	080199f4 	.word	0x080199f4
 80123b8:	08019a20 	.word	0x08019a20

080123bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80123bc:	b5b0      	push	{r4, r5, r7, lr}
 80123be:	b08a      	sub	sp, #40	@ 0x28
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <tcp_output+0x1c>
 80123ca:	4b8a      	ldr	r3, [pc, #552]	@ (80125f4 <tcp_output+0x238>)
 80123cc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80123d0:	4989      	ldr	r1, [pc, #548]	@ (80125f8 <tcp_output+0x23c>)
 80123d2:	488a      	ldr	r0, [pc, #552]	@ (80125fc <tcp_output+0x240>)
 80123d4:	f004 fe26 	bl	8017024 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	7d1b      	ldrb	r3, [r3, #20]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d106      	bne.n	80123ee <tcp_output+0x32>
 80123e0:	4b84      	ldr	r3, [pc, #528]	@ (80125f4 <tcp_output+0x238>)
 80123e2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80123e6:	4986      	ldr	r1, [pc, #536]	@ (8012600 <tcp_output+0x244>)
 80123e8:	4884      	ldr	r0, [pc, #528]	@ (80125fc <tcp_output+0x240>)
 80123ea:	f004 fe1b 	bl	8017024 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80123ee:	4b85      	ldr	r3, [pc, #532]	@ (8012604 <tcp_output+0x248>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d101      	bne.n	80123fc <tcp_output+0x40>
    return ERR_OK;
 80123f8:	2300      	movs	r3, #0
 80123fa:	e1ce      	b.n	801279a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012408:	4293      	cmp	r3, r2
 801240a:	bf28      	it	cs
 801240c:	4613      	movcs	r3, r2
 801240e:	b29b      	uxth	r3, r3
 8012410:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012416:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801241a:	2b00      	cmp	r3, #0
 801241c:	d10b      	bne.n	8012436 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8b5b      	ldrh	r3, [r3, #26]
 8012422:	f003 0302 	and.w	r3, r3, #2
 8012426:	2b00      	cmp	r3, #0
 8012428:	f000 81aa 	beq.w	8012780 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 fdcb 	bl	8012fc8 <tcp_send_empty_ack>
 8012432:	4603      	mov	r3, r0
 8012434:	e1b1      	b.n	801279a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012436:	6879      	ldr	r1, [r7, #4]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	3304      	adds	r3, #4
 801243c:	461a      	mov	r2, r3
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff fc7e 	bl	8011d40 <tcp_route>
 8012444:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d102      	bne.n	8012452 <tcp_output+0x96>
    return ERR_RTE;
 801244c:	f06f 0303 	mvn.w	r3, #3
 8012450:	e1a3      	b.n	801279a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d003      	beq.n	8012460 <tcp_output+0xa4>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d111      	bne.n	8012484 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d002      	beq.n	801246c <tcp_output+0xb0>
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	3304      	adds	r3, #4
 801246a:	e000      	b.n	801246e <tcp_output+0xb2>
 801246c:	2300      	movs	r3, #0
 801246e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d102      	bne.n	801247c <tcp_output+0xc0>
      return ERR_RTE;
 8012476:	f06f 0303 	mvn.w	r3, #3
 801247a:	e18e      	b.n	801279a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	681a      	ldr	r2, [r3, #0]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012486:	68db      	ldr	r3, [r3, #12]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	4618      	mov	r0, r3
 801248c:	f7f9 ffd2 	bl	800c434 <lwip_htonl>
 8012490:	4602      	mov	r2, r0
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012496:	1ad3      	subs	r3, r2, r3
 8012498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801249a:	8912      	ldrh	r2, [r2, #8]
 801249c:	4413      	add	r3, r2
 801249e:	69ba      	ldr	r2, [r7, #24]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d227      	bcs.n	80124f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80124aa:	461a      	mov	r2, r3
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d114      	bne.n	80124dc <tcp_output+0x120>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d110      	bne.n	80124dc <tcp_output+0x120>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d10b      	bne.n	80124dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2201      	movs	r2, #1
 80124d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	8b5b      	ldrh	r3, [r3, #26]
 80124e0:	f003 0302 	and.w	r3, r3, #2
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	f000 814d 	beq.w	8012784 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f000 fd6c 	bl	8012fc8 <tcp_send_empty_ack>
 80124f0:	4603      	mov	r3, r0
 80124f2:	e152      	b.n	801279a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2200      	movs	r2, #0
 80124f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012500:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012502:	6a3b      	ldr	r3, [r7, #32]
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 811c 	beq.w	8012742 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801250a:	e002      	b.n	8012512 <tcp_output+0x156>
 801250c:	6a3b      	ldr	r3, [r7, #32]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	623b      	str	r3, [r7, #32]
 8012512:	6a3b      	ldr	r3, [r7, #32]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d1f8      	bne.n	801250c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801251a:	e112      	b.n	8012742 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	899b      	ldrh	r3, [r3, #12]
 8012522:	b29b      	uxth	r3, r3
 8012524:	4618      	mov	r0, r3
 8012526:	f7f9 ff6f 	bl	800c408 <lwip_htons>
 801252a:	4603      	mov	r3, r0
 801252c:	b2db      	uxtb	r3, r3
 801252e:	f003 0304 	and.w	r3, r3, #4
 8012532:	2b00      	cmp	r3, #0
 8012534:	d006      	beq.n	8012544 <tcp_output+0x188>
 8012536:	4b2f      	ldr	r3, [pc, #188]	@ (80125f4 <tcp_output+0x238>)
 8012538:	f240 5236 	movw	r2, #1334	@ 0x536
 801253c:	4932      	ldr	r1, [pc, #200]	@ (8012608 <tcp_output+0x24c>)
 801253e:	482f      	ldr	r0, [pc, #188]	@ (80125fc <tcp_output+0x240>)
 8012540:	f004 fd70 	bl	8017024 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012548:	2b00      	cmp	r3, #0
 801254a:	d01f      	beq.n	801258c <tcp_output+0x1d0>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	8b5b      	ldrh	r3, [r3, #26]
 8012550:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012554:	2b00      	cmp	r3, #0
 8012556:	d119      	bne.n	801258c <tcp_output+0x1d0>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801255c:	2b00      	cmp	r3, #0
 801255e:	d00b      	beq.n	8012578 <tcp_output+0x1bc>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d110      	bne.n	801258c <tcp_output+0x1d0>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801256e:	891a      	ldrh	r2, [r3, #8]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012574:	429a      	cmp	r2, r3
 8012576:	d209      	bcs.n	801258c <tcp_output+0x1d0>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801257e:	2b00      	cmp	r3, #0
 8012580:	d004      	beq.n	801258c <tcp_output+0x1d0>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012588:	2b08      	cmp	r3, #8
 801258a:	d901      	bls.n	8012590 <tcp_output+0x1d4>
 801258c:	2301      	movs	r3, #1
 801258e:	e000      	b.n	8012592 <tcp_output+0x1d6>
 8012590:	2300      	movs	r3, #0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d106      	bne.n	80125a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	8b5b      	ldrh	r3, [r3, #26]
 801259a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801259e:	2b00      	cmp	r3, #0
 80125a0:	f000 80e4 	beq.w	801276c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	7d1b      	ldrb	r3, [r3, #20]
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d00d      	beq.n	80125c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80125ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	899b      	ldrh	r3, [r3, #12]
 80125b2:	b29c      	uxth	r4, r3
 80125b4:	2010      	movs	r0, #16
 80125b6:	f7f9 ff27 	bl	800c408 <lwip_htons>
 80125ba:	4603      	mov	r3, r0
 80125bc:	461a      	mov	r2, r3
 80125be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	4322      	orrs	r2, r4
 80125c4:	b292      	uxth	r2, r2
 80125c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80125c8:	697a      	ldr	r2, [r7, #20]
 80125ca:	6879      	ldr	r1, [r7, #4]
 80125cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80125ce:	f000 f909 	bl	80127e4 <tcp_output_segment>
 80125d2:	4603      	mov	r3, r0
 80125d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80125d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d016      	beq.n	801260c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	8b5b      	ldrh	r3, [r3, #26]
 80125e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	835a      	strh	r2, [r3, #26]
      return err;
 80125ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125f0:	e0d3      	b.n	801279a <tcp_output+0x3de>
 80125f2:	bf00      	nop
 80125f4:	08019504 	.word	0x08019504
 80125f8:	08019a48 	.word	0x08019a48
 80125fc:	08019558 	.word	0x08019558
 8012600:	08019a60 	.word	0x08019a60
 8012604:	200084c4 	.word	0x200084c4
 8012608:	08019a88 	.word	0x08019a88
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801260e:	681a      	ldr	r2, [r3, #0]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	7d1b      	ldrb	r3, [r3, #20]
 8012618:	2b02      	cmp	r3, #2
 801261a:	d006      	beq.n	801262a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	8b5b      	ldrh	r3, [r3, #26]
 8012620:	f023 0303 	bic.w	r3, r3, #3
 8012624:	b29a      	uxth	r2, r3
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801262c:	68db      	ldr	r3, [r3, #12]
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f7f9 feff 	bl	800c434 <lwip_htonl>
 8012636:	4604      	mov	r4, r0
 8012638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263a:	891b      	ldrh	r3, [r3, #8]
 801263c:	461d      	mov	r5, r3
 801263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	899b      	ldrh	r3, [r3, #12]
 8012644:	b29b      	uxth	r3, r3
 8012646:	4618      	mov	r0, r3
 8012648:	f7f9 fede 	bl	800c408 <lwip_htons>
 801264c:	4603      	mov	r3, r0
 801264e:	b2db      	uxtb	r3, r3
 8012650:	f003 0303 	and.w	r3, r3, #3
 8012654:	2b00      	cmp	r3, #0
 8012656:	d001      	beq.n	801265c <tcp_output+0x2a0>
 8012658:	2301      	movs	r3, #1
 801265a:	e000      	b.n	801265e <tcp_output+0x2a2>
 801265c:	2300      	movs	r3, #0
 801265e:	442b      	add	r3, r5
 8012660:	4423      	add	r3, r4
 8012662:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	2b00      	cmp	r3, #0
 801266e:	da02      	bge.n	8012676 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	68ba      	ldr	r2, [r7, #8]
 8012674:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012678:	891b      	ldrh	r3, [r3, #8]
 801267a:	461c      	mov	r4, r3
 801267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	899b      	ldrh	r3, [r3, #12]
 8012682:	b29b      	uxth	r3, r3
 8012684:	4618      	mov	r0, r3
 8012686:	f7f9 febf 	bl	800c408 <lwip_htons>
 801268a:	4603      	mov	r3, r0
 801268c:	b2db      	uxtb	r3, r3
 801268e:	f003 0303 	and.w	r3, r3, #3
 8012692:	2b00      	cmp	r3, #0
 8012694:	d001      	beq.n	801269a <tcp_output+0x2de>
 8012696:	2301      	movs	r3, #1
 8012698:	e000      	b.n	801269c <tcp_output+0x2e0>
 801269a:	2300      	movs	r3, #0
 801269c:	4423      	add	r3, r4
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d049      	beq.n	8012736 <tcp_output+0x37a>
      seg->next = NULL;
 80126a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a4:	2200      	movs	r2, #0
 80126a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d105      	bne.n	80126bc <tcp_output+0x300>
        pcb->unacked = seg;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126b4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80126b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b8:	623b      	str	r3, [r7, #32]
 80126ba:	e03f      	b.n	801273c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80126bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7f9 feb6 	bl	800c434 <lwip_htonl>
 80126c8:	4604      	mov	r4, r0
 80126ca:	6a3b      	ldr	r3, [r7, #32]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7f9 feaf 	bl	800c434 <lwip_htonl>
 80126d6:	4603      	mov	r3, r0
 80126d8:	1ae3      	subs	r3, r4, r3
 80126da:	2b00      	cmp	r3, #0
 80126dc:	da24      	bge.n	8012728 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	3370      	adds	r3, #112	@ 0x70
 80126e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80126e4:	e002      	b.n	80126ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d011      	beq.n	8012718 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	685b      	ldr	r3, [r3, #4]
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7f9 fe99 	bl	800c434 <lwip_htonl>
 8012702:	4604      	mov	r4, r0
 8012704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	4618      	mov	r0, r3
 801270c:	f7f9 fe92 	bl	800c434 <lwip_htonl>
 8012710:	4603      	mov	r3, r0
 8012712:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012714:	2b00      	cmp	r3, #0
 8012716:	dbe6      	blt.n	80126e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	681a      	ldr	r2, [r3, #0]
 801271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801271e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	e009      	b.n	801273c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012728:	6a3b      	ldr	r3, [r7, #32]
 801272a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801272c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801272e:	6a3b      	ldr	r3, [r7, #32]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	623b      	str	r3, [r7, #32]
 8012734:	e002      	b.n	801273c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012736:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012738:	f7fc fc45 	bl	800efc6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012740:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012744:	2b00      	cmp	r3, #0
 8012746:	d012      	beq.n	801276e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	4618      	mov	r0, r3
 8012750:	f7f9 fe70 	bl	800c434 <lwip_htonl>
 8012754:	4602      	mov	r2, r0
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801275e:	8912      	ldrh	r2, [r2, #8]
 8012760:	4413      	add	r3, r2
  while (seg != NULL &&
 8012762:	69ba      	ldr	r2, [r7, #24]
 8012764:	429a      	cmp	r2, r3
 8012766:	f4bf aed9 	bcs.w	801251c <tcp_output+0x160>
 801276a:	e000      	b.n	801276e <tcp_output+0x3b2>
      break;
 801276c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012772:	2b00      	cmp	r3, #0
 8012774:	d108      	bne.n	8012788 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2200      	movs	r2, #0
 801277a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801277e:	e004      	b.n	801278a <tcp_output+0x3ce>
    goto output_done;
 8012780:	bf00      	nop
 8012782:	e002      	b.n	801278a <tcp_output+0x3ce>
    goto output_done;
 8012784:	bf00      	nop
 8012786:	e000      	b.n	801278a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012788:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	8b5b      	ldrh	r3, [r3, #26]
 801278e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012792:	b29a      	uxth	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012798:	2300      	movs	r3, #0
}
 801279a:	4618      	mov	r0, r3
 801279c:	3728      	adds	r7, #40	@ 0x28
 801279e:	46bd      	mov	sp, r7
 80127a0:	bdb0      	pop	{r4, r5, r7, pc}
 80127a2:	bf00      	nop

080127a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <tcp_output_segment_busy+0x1c>
 80127b2:	4b09      	ldr	r3, [pc, #36]	@ (80127d8 <tcp_output_segment_busy+0x34>)
 80127b4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80127b8:	4908      	ldr	r1, [pc, #32]	@ (80127dc <tcp_output_segment_busy+0x38>)
 80127ba:	4809      	ldr	r0, [pc, #36]	@ (80127e0 <tcp_output_segment_busy+0x3c>)
 80127bc:	f004 fc32 	bl	8017024 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	7b9b      	ldrb	r3, [r3, #14]
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	d001      	beq.n	80127ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80127ca:	2301      	movs	r3, #1
 80127cc:	e000      	b.n	80127d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80127ce:	2300      	movs	r3, #0
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	08019504 	.word	0x08019504
 80127dc:	08019aa0 	.word	0x08019aa0
 80127e0:	08019558 	.word	0x08019558

080127e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80127e4:	b5b0      	push	{r4, r5, r7, lr}
 80127e6:	b08c      	sub	sp, #48	@ 0x30
 80127e8:	af04      	add	r7, sp, #16
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d106      	bne.n	8012804 <tcp_output_segment+0x20>
 80127f6:	4b64      	ldr	r3, [pc, #400]	@ (8012988 <tcp_output_segment+0x1a4>)
 80127f8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80127fc:	4963      	ldr	r1, [pc, #396]	@ (801298c <tcp_output_segment+0x1a8>)
 80127fe:	4864      	ldr	r0, [pc, #400]	@ (8012990 <tcp_output_segment+0x1ac>)
 8012800:	f004 fc10 	bl	8017024 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d106      	bne.n	8012818 <tcp_output_segment+0x34>
 801280a:	4b5f      	ldr	r3, [pc, #380]	@ (8012988 <tcp_output_segment+0x1a4>)
 801280c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012810:	4960      	ldr	r1, [pc, #384]	@ (8012994 <tcp_output_segment+0x1b0>)
 8012812:	485f      	ldr	r0, [pc, #380]	@ (8012990 <tcp_output_segment+0x1ac>)
 8012814:	f004 fc06 	bl	8017024 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d106      	bne.n	801282c <tcp_output_segment+0x48>
 801281e:	4b5a      	ldr	r3, [pc, #360]	@ (8012988 <tcp_output_segment+0x1a4>)
 8012820:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012824:	495c      	ldr	r1, [pc, #368]	@ (8012998 <tcp_output_segment+0x1b4>)
 8012826:	485a      	ldr	r0, [pc, #360]	@ (8012990 <tcp_output_segment+0x1ac>)
 8012828:	f004 fbfc 	bl	8017024 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f7ff ffb9 	bl	80127a4 <tcp_output_segment_busy>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d001      	beq.n	801283c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012838:	2300      	movs	r3, #0
 801283a:	e0a1      	b.n	8012980 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	68dc      	ldr	r4, [r3, #12]
 8012844:	4610      	mov	r0, r2
 8012846:	f7f9 fdf5 	bl	800c434 <lwip_htonl>
 801284a:	4603      	mov	r3, r0
 801284c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	68dc      	ldr	r4, [r3, #12]
 8012856:	4610      	mov	r0, r2
 8012858:	f7f9 fdd6 	bl	800c408 <lwip_htons>
 801285c:	4603      	mov	r3, r0
 801285e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012864:	68ba      	ldr	r2, [r7, #8]
 8012866:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012868:	441a      	add	r2, r3
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	68db      	ldr	r3, [r3, #12]
 8012872:	3314      	adds	r3, #20
 8012874:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	7a9b      	ldrb	r3, [r3, #10]
 801287a:	f003 0301 	and.w	r3, r3, #1
 801287e:	2b00      	cmp	r3, #0
 8012880:	d015      	beq.n	80128ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	3304      	adds	r3, #4
 8012886:	461a      	mov	r2, r3
 8012888:	6879      	ldr	r1, [r7, #4]
 801288a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801288e:	f7fc fe91 	bl	800f5b4 <tcp_eff_send_mss_netif>
 8012892:	4603      	mov	r3, r0
 8012894:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012896:	8b7b      	ldrh	r3, [r7, #26]
 8012898:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801289c:	4618      	mov	r0, r3
 801289e:	f7f9 fdc9 	bl	800c434 <lwip_htonl>
 80128a2:	4602      	mov	r2, r0
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	3304      	adds	r3, #4
 80128ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	da02      	bge.n	80128be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	2200      	movs	r2, #0
 80128bc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80128be:	68bb      	ldr	r3, [r7, #8]
 80128c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d10c      	bne.n	80128e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80128c6:	4b35      	ldr	r3, [pc, #212]	@ (801299c <tcp_output_segment+0x1b8>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7f9 fdad 	bl	800c434 <lwip_htonl>
 80128da:	4602      	mov	r2, r0
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	68da      	ldr	r2, [r3, #12]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	1ad3      	subs	r3, r2, r3
 80128ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	8959      	ldrh	r1, [r3, #10]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	8b3a      	ldrh	r2, [r7, #24]
 80128fa:	1a8a      	subs	r2, r1, r2
 80128fc:	b292      	uxth	r2, r2
 80128fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	8919      	ldrh	r1, [r3, #8]
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	8b3a      	ldrh	r2, [r7, #24]
 801290c:	1a8a      	subs	r2, r1, r2
 801290e:	b292      	uxth	r2, r2
 8012910:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	68fa      	ldr	r2, [r7, #12]
 8012918:	68d2      	ldr	r2, [r2, #12]
 801291a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	2200      	movs	r2, #0
 8012922:	741a      	strb	r2, [r3, #16]
 8012924:	2200      	movs	r2, #0
 8012926:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	68da      	ldr	r2, [r3, #12]
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	7a9b      	ldrb	r3, [r3, #10]
 8012930:	f003 0301 	and.w	r3, r3, #1
 8012934:	2b00      	cmp	r3, #0
 8012936:	d001      	beq.n	801293c <tcp_output_segment+0x158>
 8012938:	2318      	movs	r3, #24
 801293a:	e000      	b.n	801293e <tcp_output_segment+0x15a>
 801293c:	2314      	movs	r3, #20
 801293e:	4413      	add	r3, r2
 8012940:	69fa      	ldr	r2, [r7, #28]
 8012942:	429a      	cmp	r2, r3
 8012944:	d006      	beq.n	8012954 <tcp_output_segment+0x170>
 8012946:	4b10      	ldr	r3, [pc, #64]	@ (8012988 <tcp_output_segment+0x1a4>)
 8012948:	f240 621c 	movw	r2, #1564	@ 0x61c
 801294c:	4914      	ldr	r1, [pc, #80]	@ (80129a0 <tcp_output_segment+0x1bc>)
 801294e:	4810      	ldr	r0, [pc, #64]	@ (8012990 <tcp_output_segment+0x1ac>)
 8012950:	f004 fb68 	bl	8017024 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6858      	ldr	r0, [r3, #4]
 8012958:	68b9      	ldr	r1, [r7, #8]
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	1d1c      	adds	r4, r3, #4
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	7add      	ldrb	r5, [r3, #11]
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	7a9b      	ldrb	r3, [r3, #10]
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	9202      	str	r2, [sp, #8]
 801296a:	2206      	movs	r2, #6
 801296c:	9201      	str	r2, [sp, #4]
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	462b      	mov	r3, r5
 8012972:	4622      	mov	r2, r4
 8012974:	f002 fd24 	bl	80153c0 <ip4_output_if>
 8012978:	4603      	mov	r3, r0
 801297a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801297c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012980:	4618      	mov	r0, r3
 8012982:	3720      	adds	r7, #32
 8012984:	46bd      	mov	sp, r7
 8012986:	bdb0      	pop	{r4, r5, r7, pc}
 8012988:	08019504 	.word	0x08019504
 801298c:	08019ac8 	.word	0x08019ac8
 8012990:	08019558 	.word	0x08019558
 8012994:	08019ae8 	.word	0x08019ae8
 8012998:	08019b08 	.word	0x08019b08
 801299c:	20008478 	.word	0x20008478
 80129a0:	08019b2c 	.word	0x08019b2c

080129a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80129a4:	b5b0      	push	{r4, r5, r7, lr}
 80129a6:	b084      	sub	sp, #16
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d106      	bne.n	80129c0 <tcp_rexmit_rto_prepare+0x1c>
 80129b2:	4b31      	ldr	r3, [pc, #196]	@ (8012a78 <tcp_rexmit_rto_prepare+0xd4>)
 80129b4:	f240 6263 	movw	r2, #1635	@ 0x663
 80129b8:	4930      	ldr	r1, [pc, #192]	@ (8012a7c <tcp_rexmit_rto_prepare+0xd8>)
 80129ba:	4831      	ldr	r0, [pc, #196]	@ (8012a80 <tcp_rexmit_rto_prepare+0xdc>)
 80129bc:	f004 fb32 	bl	8017024 <iprintf>

  if (pcb->unacked == NULL) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d102      	bne.n	80129ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80129c8:	f06f 0305 	mvn.w	r3, #5
 80129cc:	e050      	b.n	8012a70 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129d2:	60fb      	str	r3, [r7, #12]
 80129d4:	e00b      	b.n	80129ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80129d6:	68f8      	ldr	r0, [r7, #12]
 80129d8:	f7ff fee4 	bl	80127a4 <tcp_output_segment_busy>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d002      	beq.n	80129e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80129e2:	f06f 0305 	mvn.w	r3, #5
 80129e6:	e043      	b.n	8012a70 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	60fb      	str	r3, [r7, #12]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d1ef      	bne.n	80129d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80129f6:	68f8      	ldr	r0, [r7, #12]
 80129f8:	f7ff fed4 	bl	80127a4 <tcp_output_segment_busy>
 80129fc:	4603      	mov	r3, r0
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d002      	beq.n	8012a08 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012a02:	f06f 0305 	mvn.w	r3, #5
 8012a06:	e033      	b.n	8012a70 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	8b5b      	ldrh	r3, [r3, #26]
 8012a22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7f9 fcfe 	bl	800c434 <lwip_htonl>
 8012a38:	4604      	mov	r4, r0
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	891b      	ldrh	r3, [r3, #8]
 8012a3e:	461d      	mov	r5, r3
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	899b      	ldrh	r3, [r3, #12]
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7f9 fcdd 	bl	800c408 <lwip_htons>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	f003 0303 	and.w	r3, r3, #3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d001      	beq.n	8012a5e <tcp_rexmit_rto_prepare+0xba>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e000      	b.n	8012a60 <tcp_rexmit_rto_prepare+0xbc>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	442b      	add	r3, r5
 8012a62:	18e2      	adds	r2, r4, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012a6e:	2300      	movs	r3, #0
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bdb0      	pop	{r4, r5, r7, pc}
 8012a78:	08019504 	.word	0x08019504
 8012a7c:	08019b40 	.word	0x08019b40
 8012a80:	08019558 	.word	0x08019558

08012a84 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b082      	sub	sp, #8
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d106      	bne.n	8012aa0 <tcp_rexmit_rto_commit+0x1c>
 8012a92:	4b0d      	ldr	r3, [pc, #52]	@ (8012ac8 <tcp_rexmit_rto_commit+0x44>)
 8012a94:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012a98:	490c      	ldr	r1, [pc, #48]	@ (8012acc <tcp_rexmit_rto_commit+0x48>)
 8012a9a:	480d      	ldr	r0, [pc, #52]	@ (8012ad0 <tcp_rexmit_rto_commit+0x4c>)
 8012a9c:	f004 fac2 	bl	8017024 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012aa6:	2bff      	cmp	r3, #255	@ 0xff
 8012aa8:	d007      	beq.n	8012aba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	b2da      	uxtb	r2, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7ff fc7e 	bl	80123bc <tcp_output>
}
 8012ac0:	bf00      	nop
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	08019504 	.word	0x08019504
 8012acc:	08019b64 	.word	0x08019b64
 8012ad0:	08019558 	.word	0x08019558

08012ad4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <tcp_rexmit_rto+0x1c>
 8012ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8012b0c <tcp_rexmit_rto+0x38>)
 8012ae4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012ae8:	4909      	ldr	r1, [pc, #36]	@ (8012b10 <tcp_rexmit_rto+0x3c>)
 8012aea:	480a      	ldr	r0, [pc, #40]	@ (8012b14 <tcp_rexmit_rto+0x40>)
 8012aec:	f004 fa9a 	bl	8017024 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7ff ff57 	bl	80129a4 <tcp_rexmit_rto_prepare>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d102      	bne.n	8012b02 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7ff ffc1 	bl	8012a84 <tcp_rexmit_rto_commit>
  }
}
 8012b02:	bf00      	nop
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	08019504 	.word	0x08019504
 8012b10:	08019b88 	.word	0x08019b88
 8012b14:	08019558 	.word	0x08019558

08012b18 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012b18:	b590      	push	{r4, r7, lr}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d106      	bne.n	8012b34 <tcp_rexmit+0x1c>
 8012b26:	4b2f      	ldr	r3, [pc, #188]	@ (8012be4 <tcp_rexmit+0xcc>)
 8012b28:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012b2c:	492e      	ldr	r1, [pc, #184]	@ (8012be8 <tcp_rexmit+0xd0>)
 8012b2e:	482f      	ldr	r0, [pc, #188]	@ (8012bec <tcp_rexmit+0xd4>)
 8012b30:	f004 fa78 	bl	8017024 <iprintf>

  if (pcb->unacked == NULL) {
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d102      	bne.n	8012b42 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012b3c:	f06f 0305 	mvn.w	r3, #5
 8012b40:	e04c      	b.n	8012bdc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b46:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012b48:	68b8      	ldr	r0, [r7, #8]
 8012b4a:	f7ff fe2b 	bl	80127a4 <tcp_output_segment_busy>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d002      	beq.n	8012b5a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012b54:	f06f 0305 	mvn.w	r3, #5
 8012b58:	e040      	b.n	8012bdc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	336c      	adds	r3, #108	@ 0x6c
 8012b66:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b68:	e002      	b.n	8012b70 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d011      	beq.n	8012b9c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7f9 fc57 	bl	800c434 <lwip_htonl>
 8012b86:	4604      	mov	r4, r0
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7f9 fc50 	bl	800c434 <lwip_htonl>
 8012b94:	4603      	mov	r3, r0
 8012b96:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	dbe6      	blt.n	8012b6a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d103      	bne.n	8012bba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012bc0:	2bff      	cmp	r3, #255	@ 0xff
 8012bc2:	d007      	beq.n	8012bd4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012bca:	3301      	adds	r3, #1
 8012bcc:	b2da      	uxtb	r2, r3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3714      	adds	r7, #20
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd90      	pop	{r4, r7, pc}
 8012be4:	08019504 	.word	0x08019504
 8012be8:	08019ba4 	.word	0x08019ba4
 8012bec:	08019558 	.word	0x08019558

08012bf0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d106      	bne.n	8012c0c <tcp_rexmit_fast+0x1c>
 8012bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8012ca8 <tcp_rexmit_fast+0xb8>)
 8012c00:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012c04:	4929      	ldr	r1, [pc, #164]	@ (8012cac <tcp_rexmit_fast+0xbc>)
 8012c06:	482a      	ldr	r0, [pc, #168]	@ (8012cb0 <tcp_rexmit_fast+0xc0>)
 8012c08:	f004 fa0c 	bl	8017024 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d045      	beq.n	8012ca0 <tcp_rexmit_fast+0xb0>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	8b5b      	ldrh	r3, [r3, #26]
 8012c18:	f003 0304 	and.w	r3, r3, #4
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d13f      	bne.n	8012ca0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7ff ff79 	bl	8012b18 <tcp_rexmit>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d139      	bne.n	8012ca0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	bf28      	it	cs
 8012c3c:	4613      	movcs	r3, r2
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	da00      	bge.n	8012c46 <tcp_rexmit_fast+0x56>
 8012c44:	3301      	adds	r3, #1
 8012c46:	105b      	asrs	r3, r3, #1
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012c56:	461a      	mov	r2, r3
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c5c:	005b      	lsls	r3, r3, #1
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d206      	bcs.n	8012c70 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c66:	005b      	lsls	r3, r3, #1
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	0049      	lsls	r1, r1, #1
 8012c7e:	440b      	add	r3, r1
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	4413      	add	r3, r2
 8012c84:	b29a      	uxth	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	8b5b      	ldrh	r3, [r3, #26]
 8012c90:	f043 0304 	orr.w	r3, r3, #4
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012ca0:	bf00      	nop
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	08019504 	.word	0x08019504
 8012cac:	08019bbc 	.word	0x08019bbc
 8012cb0:	08019558 	.word	0x08019558

08012cb4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b086      	sub	sp, #24
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	607b      	str	r3, [r7, #4]
 8012cbe:	460b      	mov	r3, r1
 8012cc0:	817b      	strh	r3, [r7, #10]
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012cc6:	897a      	ldrh	r2, [r7, #10]
 8012cc8:	893b      	ldrh	r3, [r7, #8]
 8012cca:	4413      	add	r3, r2
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	3314      	adds	r3, #20
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	2022      	movs	r0, #34	@ 0x22
 8012cda:	f7fa fc0b 	bl	800d4f4 <pbuf_alloc>
 8012cde:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d04d      	beq.n	8012d82 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012ce6:	897b      	ldrh	r3, [r7, #10]
 8012ce8:	3313      	adds	r3, #19
 8012cea:	697a      	ldr	r2, [r7, #20]
 8012cec:	8952      	ldrh	r2, [r2, #10]
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	db06      	blt.n	8012d00 <tcp_output_alloc_header_common+0x4c>
 8012cf2:	4b26      	ldr	r3, [pc, #152]	@ (8012d8c <tcp_output_alloc_header_common+0xd8>)
 8012cf4:	f240 7223 	movw	r2, #1827	@ 0x723
 8012cf8:	4925      	ldr	r1, [pc, #148]	@ (8012d90 <tcp_output_alloc_header_common+0xdc>)
 8012cfa:	4826      	ldr	r0, [pc, #152]	@ (8012d94 <tcp_output_alloc_header_common+0xe0>)
 8012cfc:	f004 f992 	bl	8017024 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012d06:	8c3b      	ldrh	r3, [r7, #32]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7f9 fb7d 	bl	800c408 <lwip_htons>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	461a      	mov	r2, r3
 8012d12:	693b      	ldr	r3, [r7, #16]
 8012d14:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7f9 fb75 	bl	800c408 <lwip_htons>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	461a      	mov	r2, r3
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012d2c:	68f8      	ldr	r0, [r7, #12]
 8012d2e:	f7f9 fb81 	bl	800c434 <lwip_htonl>
 8012d32:	4602      	mov	r2, r0
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012d38:	897b      	ldrh	r3, [r7, #10]
 8012d3a:	089b      	lsrs	r3, r3, #2
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	3305      	adds	r3, #5
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	031b      	lsls	r3, r3, #12
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	4313      	orrs	r3, r2
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7f9 fb59 	bl	800c408 <lwip_htons>
 8012d56:	4603      	mov	r3, r0
 8012d58:	461a      	mov	r2, r3
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012d5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7f9 fb51 	bl	800c408 <lwip_htons>
 8012d66:	4603      	mov	r3, r0
 8012d68:	461a      	mov	r2, r3
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	2200      	movs	r2, #0
 8012d72:	741a      	strb	r2, [r3, #16]
 8012d74:	2200      	movs	r2, #0
 8012d76:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	749a      	strb	r2, [r3, #18]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012d82:	697b      	ldr	r3, [r7, #20]
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3718      	adds	r7, #24
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	08019504 	.word	0x08019504
 8012d90:	08019bdc 	.word	0x08019bdc
 8012d94:	08019558 	.word	0x08019558

08012d98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012d98:	b5b0      	push	{r4, r5, r7, lr}
 8012d9a:	b08a      	sub	sp, #40	@ 0x28
 8012d9c:	af04      	add	r7, sp, #16
 8012d9e:	60f8      	str	r0, [r7, #12]
 8012da0:	607b      	str	r3, [r7, #4]
 8012da2:	460b      	mov	r3, r1
 8012da4:	817b      	strh	r3, [r7, #10]
 8012da6:	4613      	mov	r3, r2
 8012da8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d106      	bne.n	8012dbe <tcp_output_alloc_header+0x26>
 8012db0:	4b15      	ldr	r3, [pc, #84]	@ (8012e08 <tcp_output_alloc_header+0x70>)
 8012db2:	f240 7242 	movw	r2, #1858	@ 0x742
 8012db6:	4915      	ldr	r1, [pc, #84]	@ (8012e0c <tcp_output_alloc_header+0x74>)
 8012db8:	4815      	ldr	r0, [pc, #84]	@ (8012e10 <tcp_output_alloc_header+0x78>)
 8012dba:	f004 f933 	bl	8017024 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	8adb      	ldrh	r3, [r3, #22]
 8012dc6:	68fa      	ldr	r2, [r7, #12]
 8012dc8:	8b12      	ldrh	r2, [r2, #24]
 8012dca:	68f9      	ldr	r1, [r7, #12]
 8012dcc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012dce:	893d      	ldrh	r5, [r7, #8]
 8012dd0:	897c      	ldrh	r4, [r7, #10]
 8012dd2:	9103      	str	r1, [sp, #12]
 8012dd4:	2110      	movs	r1, #16
 8012dd6:	9102      	str	r1, [sp, #8]
 8012dd8:	9201      	str	r2, [sp, #4]
 8012dda:	9300      	str	r3, [sp, #0]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	462a      	mov	r2, r5
 8012de0:	4621      	mov	r1, r4
 8012de2:	f7ff ff67 	bl	8012cb4 <tcp_output_alloc_header_common>
 8012de6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d006      	beq.n	8012dfc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012df2:	68fa      	ldr	r2, [r7, #12]
 8012df4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012df6:	441a      	add	r2, r3
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012dfc:	697b      	ldr	r3, [r7, #20]
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3718      	adds	r7, #24
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bdb0      	pop	{r4, r5, r7, pc}
 8012e06:	bf00      	nop
 8012e08:	08019504 	.word	0x08019504
 8012e0c:	08019c0c 	.word	0x08019c0c
 8012e10:	08019558 	.word	0x08019558

08012e14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b088      	sub	sp, #32
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	60b9      	str	r1, [r7, #8]
 8012e1e:	4611      	mov	r1, r2
 8012e20:	461a      	mov	r2, r3
 8012e22:	460b      	mov	r3, r1
 8012e24:	71fb      	strb	r3, [r7, #7]
 8012e26:	4613      	mov	r3, r2
 8012e28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d106      	bne.n	8012e42 <tcp_output_fill_options+0x2e>
 8012e34:	4b12      	ldr	r3, [pc, #72]	@ (8012e80 <tcp_output_fill_options+0x6c>)
 8012e36:	f240 7256 	movw	r2, #1878	@ 0x756
 8012e3a:	4912      	ldr	r1, [pc, #72]	@ (8012e84 <tcp_output_fill_options+0x70>)
 8012e3c:	4812      	ldr	r0, [pc, #72]	@ (8012e88 <tcp_output_fill_options+0x74>)
 8012e3e:	f004 f8f1 	bl	8017024 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	3314      	adds	r3, #20
 8012e4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012e4e:	8bfb      	ldrh	r3, [r7, #30]
 8012e50:	009b      	lsls	r3, r3, #2
 8012e52:	461a      	mov	r2, r3
 8012e54:	79fb      	ldrb	r3, [r7, #7]
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	f003 0304 	and.w	r3, r3, #4
 8012e5c:	4413      	add	r3, r2
 8012e5e:	3314      	adds	r3, #20
 8012e60:	69ba      	ldr	r2, [r7, #24]
 8012e62:	4413      	add	r3, r2
 8012e64:	697a      	ldr	r2, [r7, #20]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d006      	beq.n	8012e78 <tcp_output_fill_options+0x64>
 8012e6a:	4b05      	ldr	r3, [pc, #20]	@ (8012e80 <tcp_output_fill_options+0x6c>)
 8012e6c:	f240 7275 	movw	r2, #1909	@ 0x775
 8012e70:	4906      	ldr	r1, [pc, #24]	@ (8012e8c <tcp_output_fill_options+0x78>)
 8012e72:	4805      	ldr	r0, [pc, #20]	@ (8012e88 <tcp_output_fill_options+0x74>)
 8012e74:	f004 f8d6 	bl	8017024 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012e78:	bf00      	nop
 8012e7a:	3720      	adds	r7, #32
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	08019504 	.word	0x08019504
 8012e84:	08019c34 	.word	0x08019c34
 8012e88:	08019558 	.word	0x08019558
 8012e8c:	08019b2c 	.word	0x08019b2c

08012e90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b08a      	sub	sp, #40	@ 0x28
 8012e94:	af04      	add	r7, sp, #16
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d106      	bne.n	8012eb2 <tcp_output_control_segment+0x22>
 8012ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8012f18 <tcp_output_control_segment+0x88>)
 8012ea6:	f240 7287 	movw	r2, #1927	@ 0x787
 8012eaa:	491c      	ldr	r1, [pc, #112]	@ (8012f1c <tcp_output_control_segment+0x8c>)
 8012eac:	481c      	ldr	r0, [pc, #112]	@ (8012f20 <tcp_output_control_segment+0x90>)
 8012eae:	f004 f8b9 	bl	8017024 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012eb2:	683a      	ldr	r2, [r7, #0]
 8012eb4:	6879      	ldr	r1, [r7, #4]
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f7fe ff42 	bl	8011d40 <tcp_route>
 8012ebc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d102      	bne.n	8012eca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012ec4:	23fc      	movs	r3, #252	@ 0xfc
 8012ec6:	75fb      	strb	r3, [r7, #23]
 8012ec8:	e01c      	b.n	8012f04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d006      	beq.n	8012ede <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	7adb      	ldrb	r3, [r3, #11]
 8012ed4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	7a9b      	ldrb	r3, [r3, #10]
 8012eda:	757b      	strb	r3, [r7, #21]
 8012edc:	e003      	b.n	8012ee6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012ede:	23ff      	movs	r3, #255	@ 0xff
 8012ee0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012ee6:	7dba      	ldrb	r2, [r7, #22]
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	9302      	str	r3, [sp, #8]
 8012eec:	2306      	movs	r3, #6
 8012eee:	9301      	str	r3, [sp, #4]
 8012ef0:	7d7b      	ldrb	r3, [r7, #21]
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	683a      	ldr	r2, [r7, #0]
 8012ef8:	6879      	ldr	r1, [r7, #4]
 8012efa:	68b8      	ldr	r0, [r7, #8]
 8012efc:	f002 fa60 	bl	80153c0 <ip4_output_if>
 8012f00:	4603      	mov	r3, r0
 8012f02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012f04:	68b8      	ldr	r0, [r7, #8]
 8012f06:	f7fa fdd9 	bl	800dabc <pbuf_free>
  return err;
 8012f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3718      	adds	r7, #24
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	08019504 	.word	0x08019504
 8012f1c:	08019c5c 	.word	0x08019c5c
 8012f20:	08019558 	.word	0x08019558

08012f24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012f24:	b590      	push	{r4, r7, lr}
 8012f26:	b08b      	sub	sp, #44	@ 0x2c
 8012f28:	af04      	add	r7, sp, #16
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
 8012f30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d106      	bne.n	8012f46 <tcp_rst+0x22>
 8012f38:	4b1f      	ldr	r3, [pc, #124]	@ (8012fb8 <tcp_rst+0x94>)
 8012f3a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012f3e:	491f      	ldr	r1, [pc, #124]	@ (8012fbc <tcp_rst+0x98>)
 8012f40:	481f      	ldr	r0, [pc, #124]	@ (8012fc0 <tcp_rst+0x9c>)
 8012f42:	f004 f86f 	bl	8017024 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d106      	bne.n	8012f5a <tcp_rst+0x36>
 8012f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8012fb8 <tcp_rst+0x94>)
 8012f4e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012f52:	491c      	ldr	r1, [pc, #112]	@ (8012fc4 <tcp_rst+0xa0>)
 8012f54:	481a      	ldr	r0, [pc, #104]	@ (8012fc0 <tcp_rst+0x9c>)
 8012f56:	f004 f865 	bl	8017024 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012f5e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012f62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012f64:	7dfb      	ldrb	r3, [r7, #23]
 8012f66:	b29c      	uxth	r4, r3
 8012f68:	68b8      	ldr	r0, [r7, #8]
 8012f6a:	f7f9 fa63 	bl	800c434 <lwip_htonl>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	8abb      	ldrh	r3, [r7, #20]
 8012f72:	9303      	str	r3, [sp, #12]
 8012f74:	2314      	movs	r3, #20
 8012f76:	9302      	str	r3, [sp, #8]
 8012f78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012f7a:	9301      	str	r3, [sp, #4]
 8012f7c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012f7e:	9300      	str	r3, [sp, #0]
 8012f80:	4613      	mov	r3, r2
 8012f82:	2200      	movs	r2, #0
 8012f84:	4621      	mov	r1, r4
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f7ff fe94 	bl	8012cb4 <tcp_output_alloc_header_common>
 8012f8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d00c      	beq.n	8012fae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f94:	7dfb      	ldrb	r3, [r7, #23]
 8012f96:	2200      	movs	r2, #0
 8012f98:	6939      	ldr	r1, [r7, #16]
 8012f9a:	68f8      	ldr	r0, [r7, #12]
 8012f9c:	f7ff ff3a 	bl	8012e14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fa2:	683a      	ldr	r2, [r7, #0]
 8012fa4:	6939      	ldr	r1, [r7, #16]
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	f7ff ff72 	bl	8012e90 <tcp_output_control_segment>
 8012fac:	e000      	b.n	8012fb0 <tcp_rst+0x8c>
    return;
 8012fae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012fb0:	371c      	adds	r7, #28
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd90      	pop	{r4, r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	08019504 	.word	0x08019504
 8012fbc:	08019c88 	.word	0x08019c88
 8012fc0:	08019558 	.word	0x08019558
 8012fc4:	08019ca4 	.word	0x08019ca4

08012fc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012fc8:	b590      	push	{r4, r7, lr}
 8012fca:	b087      	sub	sp, #28
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d106      	bne.n	8012fec <tcp_send_empty_ack+0x24>
 8012fde:	4b28      	ldr	r3, [pc, #160]	@ (8013080 <tcp_send_empty_ack+0xb8>)
 8012fe0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012fe4:	4927      	ldr	r1, [pc, #156]	@ (8013084 <tcp_send_empty_ack+0xbc>)
 8012fe6:	4828      	ldr	r0, [pc, #160]	@ (8013088 <tcp_send_empty_ack+0xc0>)
 8012fe8:	f004 f81c 	bl	8017024 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012fec:	7dfb      	ldrb	r3, [r7, #23]
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	b2db      	uxtb	r3, r3
 8012ff2:	f003 0304 	and.w	r3, r3, #4
 8012ff6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012ff8:	7d7b      	ldrb	r3, [r7, #21]
 8012ffa:	b29c      	uxth	r4, r3
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013000:	4618      	mov	r0, r3
 8013002:	f7f9 fa17 	bl	800c434 <lwip_htonl>
 8013006:	4603      	mov	r3, r0
 8013008:	2200      	movs	r2, #0
 801300a:	4621      	mov	r1, r4
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7ff fec3 	bl	8012d98 <tcp_output_alloc_header>
 8013012:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d109      	bne.n	801302e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	8b5b      	ldrh	r3, [r3, #26]
 801301e:	f043 0303 	orr.w	r3, r3, #3
 8013022:	b29a      	uxth	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013028:	f06f 0301 	mvn.w	r3, #1
 801302c:	e023      	b.n	8013076 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801302e:	7dbb      	ldrb	r3, [r7, #22]
 8013030:	7dfa      	ldrb	r2, [r7, #23]
 8013032:	6939      	ldr	r1, [r7, #16]
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f7ff feed 	bl	8012e14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	3304      	adds	r3, #4
 8013040:	6939      	ldr	r1, [r7, #16]
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f7ff ff24 	bl	8012e90 <tcp_output_control_segment>
 8013048:	4603      	mov	r3, r0
 801304a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801304c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d007      	beq.n	8013064 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	8b5b      	ldrh	r3, [r3, #26]
 8013058:	f043 0303 	orr.w	r3, r3, #3
 801305c:	b29a      	uxth	r2, r3
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	835a      	strh	r2, [r3, #26]
 8013062:	e006      	b.n	8013072 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	8b5b      	ldrh	r3, [r3, #26]
 8013068:	f023 0303 	bic.w	r3, r3, #3
 801306c:	b29a      	uxth	r2, r3
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013072:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013076:	4618      	mov	r0, r3
 8013078:	371c      	adds	r7, #28
 801307a:	46bd      	mov	sp, r7
 801307c:	bd90      	pop	{r4, r7, pc}
 801307e:	bf00      	nop
 8013080:	08019504 	.word	0x08019504
 8013084:	08019cc0 	.word	0x08019cc0
 8013088:	08019558 	.word	0x08019558

0801308c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801308c:	b590      	push	{r4, r7, lr}
 801308e:	b087      	sub	sp, #28
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013094:	2300      	movs	r3, #0
 8013096:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d106      	bne.n	80130ac <tcp_keepalive+0x20>
 801309e:	4b18      	ldr	r3, [pc, #96]	@ (8013100 <tcp_keepalive+0x74>)
 80130a0:	f640 0224 	movw	r2, #2084	@ 0x824
 80130a4:	4917      	ldr	r1, [pc, #92]	@ (8013104 <tcp_keepalive+0x78>)
 80130a6:	4818      	ldr	r0, [pc, #96]	@ (8013108 <tcp_keepalive+0x7c>)
 80130a8:	f003 ffbc 	bl	8017024 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80130ac:	7dfb      	ldrb	r3, [r7, #23]
 80130ae:	b29c      	uxth	r4, r3
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130b4:	3b01      	subs	r3, #1
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7f9 f9bc 	bl	800c434 <lwip_htonl>
 80130bc:	4603      	mov	r3, r0
 80130be:	2200      	movs	r2, #0
 80130c0:	4621      	mov	r1, r4
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f7ff fe68 	bl	8012d98 <tcp_output_alloc_header>
 80130c8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d102      	bne.n	80130d6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80130d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130d4:	e010      	b.n	80130f8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80130d6:	7dfb      	ldrb	r3, [r7, #23]
 80130d8:	2200      	movs	r2, #0
 80130da:	6939      	ldr	r1, [r7, #16]
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f7ff fe99 	bl	8012e14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3304      	adds	r3, #4
 80130e8:	6939      	ldr	r1, [r7, #16]
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7ff fed0 	bl	8012e90 <tcp_output_control_segment>
 80130f0:	4603      	mov	r3, r0
 80130f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80130f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	371c      	adds	r7, #28
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd90      	pop	{r4, r7, pc}
 8013100:	08019504 	.word	0x08019504
 8013104:	08019ce0 	.word	0x08019ce0
 8013108:	08019558 	.word	0x08019558

0801310c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801310c:	b590      	push	{r4, r7, lr}
 801310e:	b08b      	sub	sp, #44	@ 0x2c
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013114:	2300      	movs	r3, #0
 8013116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d106      	bne.n	801312e <tcp_zero_window_probe+0x22>
 8013120:	4b4c      	ldr	r3, [pc, #304]	@ (8013254 <tcp_zero_window_probe+0x148>)
 8013122:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013126:	494c      	ldr	r1, [pc, #304]	@ (8013258 <tcp_zero_window_probe+0x14c>)
 8013128:	484c      	ldr	r0, [pc, #304]	@ (801325c <tcp_zero_window_probe+0x150>)
 801312a:	f003 ff7b 	bl	8017024 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013132:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013134:	6a3b      	ldr	r3, [r7, #32]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d101      	bne.n	801313e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801313a:	2300      	movs	r3, #0
 801313c:	e086      	b.n	801324c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013144:	2bff      	cmp	r3, #255	@ 0xff
 8013146:	d007      	beq.n	8013158 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801314e:	3301      	adds	r3, #1
 8013150:	b2da      	uxtb	r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013158:	6a3b      	ldr	r3, [r7, #32]
 801315a:	68db      	ldr	r3, [r3, #12]
 801315c:	899b      	ldrh	r3, [r3, #12]
 801315e:	b29b      	uxth	r3, r3
 8013160:	4618      	mov	r0, r3
 8013162:	f7f9 f951 	bl	800c408 <lwip_htons>
 8013166:	4603      	mov	r3, r0
 8013168:	b2db      	uxtb	r3, r3
 801316a:	f003 0301 	and.w	r3, r3, #1
 801316e:	2b00      	cmp	r3, #0
 8013170:	d005      	beq.n	801317e <tcp_zero_window_probe+0x72>
 8013172:	6a3b      	ldr	r3, [r7, #32]
 8013174:	891b      	ldrh	r3, [r3, #8]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d101      	bne.n	801317e <tcp_zero_window_probe+0x72>
 801317a:	2301      	movs	r3, #1
 801317c:	e000      	b.n	8013180 <tcp_zero_window_probe+0x74>
 801317e:	2300      	movs	r3, #0
 8013180:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013182:	7ffb      	ldrb	r3, [r7, #31]
 8013184:	2b00      	cmp	r3, #0
 8013186:	bf0c      	ite	eq
 8013188:	2301      	moveq	r3, #1
 801318a:	2300      	movne	r3, #0
 801318c:	b2db      	uxtb	r3, r3
 801318e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013194:	b299      	uxth	r1, r3
 8013196:	6a3b      	ldr	r3, [r7, #32]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	8bba      	ldrh	r2, [r7, #28]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7ff fdfa 	bl	8012d98 <tcp_output_alloc_header>
 80131a4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d102      	bne.n	80131b2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80131ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80131b0:	e04c      	b.n	801324c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80131b8:	7ffb      	ldrb	r3, [r7, #31]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d011      	beq.n	80131e2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	899b      	ldrh	r3, [r3, #12]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	b21b      	sxth	r3, r3
 80131c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80131ca:	b21c      	sxth	r4, r3
 80131cc:	2011      	movs	r0, #17
 80131ce:	f7f9 f91b 	bl	800c408 <lwip_htons>
 80131d2:	4603      	mov	r3, r0
 80131d4:	b21b      	sxth	r3, r3
 80131d6:	4323      	orrs	r3, r4
 80131d8:	b21b      	sxth	r3, r3
 80131da:	b29a      	uxth	r2, r3
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	819a      	strh	r2, [r3, #12]
 80131e0:	e010      	b.n	8013204 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	3314      	adds	r3, #20
 80131e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80131ea:	6a3b      	ldr	r3, [r7, #32]
 80131ec:	6858      	ldr	r0, [r3, #4]
 80131ee:	6a3b      	ldr	r3, [r7, #32]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	891a      	ldrh	r2, [r3, #8]
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	891b      	ldrh	r3, [r3, #8]
 80131f8:	1ad3      	subs	r3, r2, r3
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	2201      	movs	r2, #1
 80131fe:	6939      	ldr	r1, [r7, #16]
 8013200:	f7fa fe56 	bl	800deb0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013204:	6a3b      	ldr	r3, [r7, #32]
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	4618      	mov	r0, r3
 801320c:	f7f9 f912 	bl	800c434 <lwip_htonl>
 8013210:	4603      	mov	r3, r0
 8013212:	3301      	adds	r3, #1
 8013214:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	1ad3      	subs	r3, r2, r3
 801321e:	2b00      	cmp	r3, #0
 8013220:	da02      	bge.n	8013228 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	68fa      	ldr	r2, [r7, #12]
 8013226:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801322c:	2200      	movs	r2, #0
 801322e:	69b9      	ldr	r1, [r7, #24]
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f7ff fdef 	bl	8012e14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	3304      	adds	r3, #4
 801323c:	69b9      	ldr	r1, [r7, #24]
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7ff fe26 	bl	8012e90 <tcp_output_control_segment>
 8013244:	4603      	mov	r3, r0
 8013246:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013248:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801324c:	4618      	mov	r0, r3
 801324e:	372c      	adds	r7, #44	@ 0x2c
 8013250:	46bd      	mov	sp, r7
 8013252:	bd90      	pop	{r4, r7, pc}
 8013254:	08019504 	.word	0x08019504
 8013258:	08019cfc 	.word	0x08019cfc
 801325c:	08019558 	.word	0x08019558

08013260 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013268:	f7fa ff10 	bl	800e08c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801326c:	4b0a      	ldr	r3, [pc, #40]	@ (8013298 <tcpip_tcp_timer+0x38>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d103      	bne.n	801327c <tcpip_tcp_timer+0x1c>
 8013274:	4b09      	ldr	r3, [pc, #36]	@ (801329c <tcpip_tcp_timer+0x3c>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d005      	beq.n	8013288 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801327c:	2200      	movs	r2, #0
 801327e:	4908      	ldr	r1, [pc, #32]	@ (80132a0 <tcpip_tcp_timer+0x40>)
 8013280:	20fa      	movs	r0, #250	@ 0xfa
 8013282:	f000 f8f3 	bl	801346c <sys_timeout>
 8013286:	e003      	b.n	8013290 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013288:	4b06      	ldr	r3, [pc, #24]	@ (80132a4 <tcpip_tcp_timer+0x44>)
 801328a:	2200      	movs	r2, #0
 801328c:	601a      	str	r2, [r3, #0]
  }
}
 801328e:	bf00      	nop
 8013290:	bf00      	nop
 8013292:	3708      	adds	r7, #8
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	20008484 	.word	0x20008484
 801329c:	20008488 	.word	0x20008488
 80132a0:	08013261 	.word	0x08013261
 80132a4:	200084d0 	.word	0x200084d0

080132a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80132ac:	4b0a      	ldr	r3, [pc, #40]	@ (80132d8 <tcp_timer_needed+0x30>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d10f      	bne.n	80132d4 <tcp_timer_needed+0x2c>
 80132b4:	4b09      	ldr	r3, [pc, #36]	@ (80132dc <tcp_timer_needed+0x34>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d103      	bne.n	80132c4 <tcp_timer_needed+0x1c>
 80132bc:	4b08      	ldr	r3, [pc, #32]	@ (80132e0 <tcp_timer_needed+0x38>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d007      	beq.n	80132d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80132c4:	4b04      	ldr	r3, [pc, #16]	@ (80132d8 <tcp_timer_needed+0x30>)
 80132c6:	2201      	movs	r2, #1
 80132c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80132ca:	2200      	movs	r2, #0
 80132cc:	4905      	ldr	r1, [pc, #20]	@ (80132e4 <tcp_timer_needed+0x3c>)
 80132ce:	20fa      	movs	r0, #250	@ 0xfa
 80132d0:	f000 f8cc 	bl	801346c <sys_timeout>
  }
}
 80132d4:	bf00      	nop
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	200084d0 	.word	0x200084d0
 80132dc:	20008484 	.word	0x20008484
 80132e0:	20008488 	.word	0x20008488
 80132e4:	08013261 	.word	0x08013261

080132e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b086      	sub	sp, #24
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80132f4:	2006      	movs	r0, #6
 80132f6:	f7f9 fcfb 	bl	800ccf0 <memp_malloc>
 80132fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d109      	bne.n	8013316 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d151      	bne.n	80133ac <sys_timeout_abs+0xc4>
 8013308:	4b2a      	ldr	r3, [pc, #168]	@ (80133b4 <sys_timeout_abs+0xcc>)
 801330a:	22be      	movs	r2, #190	@ 0xbe
 801330c:	492a      	ldr	r1, [pc, #168]	@ (80133b8 <sys_timeout_abs+0xd0>)
 801330e:	482b      	ldr	r0, [pc, #172]	@ (80133bc <sys_timeout_abs+0xd4>)
 8013310:	f003 fe88 	bl	8017024 <iprintf>
    return;
 8013314:	e04a      	b.n	80133ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	2200      	movs	r2, #0
 801331a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	68ba      	ldr	r2, [r7, #8]
 8013320:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	68fa      	ldr	r2, [r7, #12]
 801332c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801332e:	4b24      	ldr	r3, [pc, #144]	@ (80133c0 <sys_timeout_abs+0xd8>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d103      	bne.n	801333e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013336:	4a22      	ldr	r2, [pc, #136]	@ (80133c0 <sys_timeout_abs+0xd8>)
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	6013      	str	r3, [r2, #0]
    return;
 801333c:	e037      	b.n	80133ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	685a      	ldr	r2, [r3, #4]
 8013342:	4b1f      	ldr	r3, [pc, #124]	@ (80133c0 <sys_timeout_abs+0xd8>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	0fdb      	lsrs	r3, r3, #31
 801334c:	f003 0301 	and.w	r3, r3, #1
 8013350:	b2db      	uxtb	r3, r3
 8013352:	2b00      	cmp	r3, #0
 8013354:	d007      	beq.n	8013366 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013356:	4b1a      	ldr	r3, [pc, #104]	@ (80133c0 <sys_timeout_abs+0xd8>)
 8013358:	681a      	ldr	r2, [r3, #0]
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801335e:	4a18      	ldr	r2, [pc, #96]	@ (80133c0 <sys_timeout_abs+0xd8>)
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	6013      	str	r3, [r2, #0]
 8013364:	e023      	b.n	80133ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013366:	4b16      	ldr	r3, [pc, #88]	@ (80133c0 <sys_timeout_abs+0xd8>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	617b      	str	r3, [r7, #20]
 801336c:	e01a      	b.n	80133a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00b      	beq.n	801338e <sys_timeout_abs+0xa6>
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	685a      	ldr	r2, [r3, #4]
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	1ad3      	subs	r3, r2, r3
 8013382:	0fdb      	lsrs	r3, r3, #31
 8013384:	f003 0301 	and.w	r3, r3, #1
 8013388:	b2db      	uxtb	r3, r3
 801338a:	2b00      	cmp	r3, #0
 801338c:	d007      	beq.n	801339e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	681a      	ldr	r2, [r3, #0]
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	693a      	ldr	r2, [r7, #16]
 801339a:	601a      	str	r2, [r3, #0]
        break;
 801339c:	e007      	b.n	80133ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	617b      	str	r3, [r7, #20]
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d1e1      	bne.n	801336e <sys_timeout_abs+0x86>
 80133aa:	e000      	b.n	80133ae <sys_timeout_abs+0xc6>
    return;
 80133ac:	bf00      	nop
      }
    }
  }
}
 80133ae:	3718      	adds	r7, #24
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	08019d20 	.word	0x08019d20
 80133b8:	08019d54 	.word	0x08019d54
 80133bc:	08019d94 	.word	0x08019d94
 80133c0:	200084c8 	.word	0x200084c8

080133c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	4798      	blx	r3

  now = sys_now();
 80133d6:	f7f8 fdfb 	bl	800bfd0 <sys_now>
 80133da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	4b0f      	ldr	r3, [pc, #60]	@ (8013420 <lwip_cyclic_timer+0x5c>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	4413      	add	r3, r2
 80133e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80133e8:	68fa      	ldr	r2, [r7, #12]
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	1ad3      	subs	r3, r2, r3
 80133ee:	0fdb      	lsrs	r3, r3, #31
 80133f0:	f003 0301 	and.w	r3, r3, #1
 80133f4:	b2db      	uxtb	r3, r3
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d009      	beq.n	801340e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	681a      	ldr	r2, [r3, #0]
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	4413      	add	r3, r2
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	4907      	ldr	r1, [pc, #28]	@ (8013424 <lwip_cyclic_timer+0x60>)
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff ff6e 	bl	80132e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801340c:	e004      	b.n	8013418 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	4904      	ldr	r1, [pc, #16]	@ (8013424 <lwip_cyclic_timer+0x60>)
 8013412:	68f8      	ldr	r0, [r7, #12]
 8013414:	f7ff ff68 	bl	80132e8 <sys_timeout_abs>
}
 8013418:	bf00      	nop
 801341a:	3718      	adds	r7, #24
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	200084cc 	.word	0x200084cc
 8013424:	080133c5 	.word	0x080133c5

08013428 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801342e:	2301      	movs	r3, #1
 8013430:	607b      	str	r3, [r7, #4]
 8013432:	e00e      	b.n	8013452 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013434:	4a0b      	ldr	r2, [pc, #44]	@ (8013464 <sys_timeouts_init+0x3c>)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	00db      	lsls	r3, r3, #3
 8013440:	4a08      	ldr	r2, [pc, #32]	@ (8013464 <sys_timeouts_init+0x3c>)
 8013442:	4413      	add	r3, r2
 8013444:	461a      	mov	r2, r3
 8013446:	4908      	ldr	r1, [pc, #32]	@ (8013468 <sys_timeouts_init+0x40>)
 8013448:	f000 f810 	bl	801346c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	3301      	adds	r3, #1
 8013450:	607b      	str	r3, [r7, #4]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b02      	cmp	r3, #2
 8013456:	d9ed      	bls.n	8013434 <sys_timeouts_init+0xc>
  }
}
 8013458:	bf00      	nop
 801345a:	bf00      	nop
 801345c:	3708      	adds	r7, #8
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	0801a930 	.word	0x0801a930
 8013468:	080133c5 	.word	0x080133c5

0801346c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b086      	sub	sp, #24
 8013470:	af00      	add	r7, sp, #0
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801347e:	d306      	bcc.n	801348e <sys_timeout+0x22>
 8013480:	4b0a      	ldr	r3, [pc, #40]	@ (80134ac <sys_timeout+0x40>)
 8013482:	f240 1229 	movw	r2, #297	@ 0x129
 8013486:	490a      	ldr	r1, [pc, #40]	@ (80134b0 <sys_timeout+0x44>)
 8013488:	480a      	ldr	r0, [pc, #40]	@ (80134b4 <sys_timeout+0x48>)
 801348a:	f003 fdcb 	bl	8017024 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801348e:	f7f8 fd9f 	bl	800bfd0 <sys_now>
 8013492:	4602      	mov	r2, r0
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	4413      	add	r3, r2
 8013498:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	68b9      	ldr	r1, [r7, #8]
 801349e:	6978      	ldr	r0, [r7, #20]
 80134a0:	f7ff ff22 	bl	80132e8 <sys_timeout_abs>
#endif
}
 80134a4:	bf00      	nop
 80134a6:	3718      	adds	r7, #24
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	08019d20 	.word	0x08019d20
 80134b0:	08019dbc 	.word	0x08019dbc
 80134b4:	08019d94 	.word	0x08019d94

080134b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80134be:	f7f8 fd87 	bl	800bfd0 <sys_now>
 80134c2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80134c4:	4b1a      	ldr	r3, [pc, #104]	@ (8013530 <sys_check_timeouts+0x78>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d001      	beq.n	80134d2 <sys_check_timeouts+0x1a>
 80134ce:	f7f9 ffbb 	bl	800d448 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80134d2:	4b18      	ldr	r3, [pc, #96]	@ (8013534 <sys_check_timeouts+0x7c>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d022      	beq.n	8013524 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	68fa      	ldr	r2, [r7, #12]
 80134e4:	1ad3      	subs	r3, r2, r3
 80134e6:	0fdb      	lsrs	r3, r3, #31
 80134e8:	f003 0301 	and.w	r3, r3, #1
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d11a      	bne.n	8013528 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4a0f      	ldr	r2, [pc, #60]	@ (8013534 <sys_check_timeouts+0x7c>)
 80134f8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	689b      	ldr	r3, [r3, #8]
 80134fe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	68db      	ldr	r3, [r3, #12]
 8013504:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	4a0b      	ldr	r2, [pc, #44]	@ (8013538 <sys_check_timeouts+0x80>)
 801350c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801350e:	68b9      	ldr	r1, [r7, #8]
 8013510:	2006      	movs	r0, #6
 8013512:	f7f9 fc5d 	bl	800cdd0 <memp_free>
    if (handler != NULL) {
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d0d3      	beq.n	80134c4 <sys_check_timeouts+0xc>
      handler(arg);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6838      	ldr	r0, [r7, #0]
 8013520:	4798      	blx	r3
  do {
 8013522:	e7cf      	b.n	80134c4 <sys_check_timeouts+0xc>
      return;
 8013524:	bf00      	nop
 8013526:	e000      	b.n	801352a <sys_check_timeouts+0x72>
      return;
 8013528:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801352a:	3710      	adds	r7, #16
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	20008475 	.word	0x20008475
 8013534:	200084c8 	.word	0x200084c8
 8013538:	200084cc 	.word	0x200084cc

0801353c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013540:	f003 fc70 	bl	8016e24 <rand>
 8013544:	4603      	mov	r3, r0
 8013546:	b29b      	uxth	r3, r3
 8013548:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801354c:	b29b      	uxth	r3, r3
 801354e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013552:	b29a      	uxth	r2, r3
 8013554:	4b01      	ldr	r3, [pc, #4]	@ (801355c <udp_init+0x20>)
 8013556:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013558:	bf00      	nop
 801355a:	bd80      	pop	{r7, pc}
 801355c:	20000028 	.word	0x20000028

08013560 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013566:	2300      	movs	r3, #0
 8013568:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801356a:	4b17      	ldr	r3, [pc, #92]	@ (80135c8 <udp_new_port+0x68>)
 801356c:	881b      	ldrh	r3, [r3, #0]
 801356e:	1c5a      	adds	r2, r3, #1
 8013570:	b291      	uxth	r1, r2
 8013572:	4a15      	ldr	r2, [pc, #84]	@ (80135c8 <udp_new_port+0x68>)
 8013574:	8011      	strh	r1, [r2, #0]
 8013576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801357a:	4293      	cmp	r3, r2
 801357c:	d103      	bne.n	8013586 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801357e:	4b12      	ldr	r3, [pc, #72]	@ (80135c8 <udp_new_port+0x68>)
 8013580:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013584:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013586:	4b11      	ldr	r3, [pc, #68]	@ (80135cc <udp_new_port+0x6c>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	603b      	str	r3, [r7, #0]
 801358c:	e011      	b.n	80135b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	8a5a      	ldrh	r2, [r3, #18]
 8013592:	4b0d      	ldr	r3, [pc, #52]	@ (80135c8 <udp_new_port+0x68>)
 8013594:	881b      	ldrh	r3, [r3, #0]
 8013596:	429a      	cmp	r2, r3
 8013598:	d108      	bne.n	80135ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801359a:	88fb      	ldrh	r3, [r7, #6]
 801359c:	3301      	adds	r3, #1
 801359e:	80fb      	strh	r3, [r7, #6]
 80135a0:	88fb      	ldrh	r3, [r7, #6]
 80135a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80135a6:	d3e0      	bcc.n	801356a <udp_new_port+0xa>
        return 0;
 80135a8:	2300      	movs	r3, #0
 80135aa:	e007      	b.n	80135bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	603b      	str	r3, [r7, #0]
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d1ea      	bne.n	801358e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80135b8:	4b03      	ldr	r3, [pc, #12]	@ (80135c8 <udp_new_port+0x68>)
 80135ba:	881b      	ldrh	r3, [r3, #0]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	370c      	adds	r7, #12
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr
 80135c8:	20000028 	.word	0x20000028
 80135cc:	200084d4 	.word	0x200084d4

080135d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b084      	sub	sp, #16
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	4613      	mov	r3, r2
 80135dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d105      	bne.n	80135f0 <udp_input_local_match+0x20>
 80135e4:	4b27      	ldr	r3, [pc, #156]	@ (8013684 <udp_input_local_match+0xb4>)
 80135e6:	2287      	movs	r2, #135	@ 0x87
 80135e8:	4927      	ldr	r1, [pc, #156]	@ (8013688 <udp_input_local_match+0xb8>)
 80135ea:	4828      	ldr	r0, [pc, #160]	@ (801368c <udp_input_local_match+0xbc>)
 80135ec:	f003 fd1a 	bl	8017024 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d105      	bne.n	8013602 <udp_input_local_match+0x32>
 80135f6:	4b23      	ldr	r3, [pc, #140]	@ (8013684 <udp_input_local_match+0xb4>)
 80135f8:	2288      	movs	r2, #136	@ 0x88
 80135fa:	4925      	ldr	r1, [pc, #148]	@ (8013690 <udp_input_local_match+0xc0>)
 80135fc:	4823      	ldr	r0, [pc, #140]	@ (801368c <udp_input_local_match+0xbc>)
 80135fe:	f003 fd11 	bl	8017024 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	7a1b      	ldrb	r3, [r3, #8]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d00b      	beq.n	8013622 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	7a1a      	ldrb	r2, [r3, #8]
 801360e:	4b21      	ldr	r3, [pc, #132]	@ (8013694 <udp_input_local_match+0xc4>)
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013616:	3301      	adds	r3, #1
 8013618:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801361a:	429a      	cmp	r2, r3
 801361c:	d001      	beq.n	8013622 <udp_input_local_match+0x52>
    return 0;
 801361e:	2300      	movs	r3, #0
 8013620:	e02b      	b.n	801367a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013622:	79fb      	ldrb	r3, [r7, #7]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d018      	beq.n	801365a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d013      	beq.n	8013656 <udp_input_local_match+0x86>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d00f      	beq.n	8013656 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013636:	4b17      	ldr	r3, [pc, #92]	@ (8013694 <udp_input_local_match+0xc4>)
 8013638:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801363a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801363e:	d00a      	beq.n	8013656 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	4b13      	ldr	r3, [pc, #76]	@ (8013694 <udp_input_local_match+0xc4>)
 8013646:	695b      	ldr	r3, [r3, #20]
 8013648:	405a      	eors	r2, r3
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	3308      	adds	r3, #8
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013652:	2b00      	cmp	r3, #0
 8013654:	d110      	bne.n	8013678 <udp_input_local_match+0xa8>
          return 1;
 8013656:	2301      	movs	r3, #1
 8013658:	e00f      	b.n	801367a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d009      	beq.n	8013674 <udp_input_local_match+0xa4>
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d005      	beq.n	8013674 <udp_input_local_match+0xa4>
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	4b09      	ldr	r3, [pc, #36]	@ (8013694 <udp_input_local_match+0xc4>)
 801366e:	695b      	ldr	r3, [r3, #20]
 8013670:	429a      	cmp	r2, r3
 8013672:	d101      	bne.n	8013678 <udp_input_local_match+0xa8>
        return 1;
 8013674:	2301      	movs	r3, #1
 8013676:	e000      	b.n	801367a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013678:	2300      	movs	r3, #0
}
 801367a:	4618      	mov	r0, r3
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	08019e08 	.word	0x08019e08
 8013688:	08019e38 	.word	0x08019e38
 801368c:	08019e5c 	.word	0x08019e5c
 8013690:	08019e84 	.word	0x08019e84
 8013694:	2000555c 	.word	0x2000555c

08013698 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013698:	b590      	push	{r4, r7, lr}
 801369a:	b08d      	sub	sp, #52	@ 0x34
 801369c:	af02      	add	r7, sp, #8
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80136a2:	2300      	movs	r3, #0
 80136a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d105      	bne.n	80136b8 <udp_input+0x20>
 80136ac:	4b7c      	ldr	r3, [pc, #496]	@ (80138a0 <udp_input+0x208>)
 80136ae:	22cf      	movs	r2, #207	@ 0xcf
 80136b0:	497c      	ldr	r1, [pc, #496]	@ (80138a4 <udp_input+0x20c>)
 80136b2:	487d      	ldr	r0, [pc, #500]	@ (80138a8 <udp_input+0x210>)
 80136b4:	f003 fcb6 	bl	8017024 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d105      	bne.n	80136ca <udp_input+0x32>
 80136be:	4b78      	ldr	r3, [pc, #480]	@ (80138a0 <udp_input+0x208>)
 80136c0:	22d0      	movs	r2, #208	@ 0xd0
 80136c2:	497a      	ldr	r1, [pc, #488]	@ (80138ac <udp_input+0x214>)
 80136c4:	4878      	ldr	r0, [pc, #480]	@ (80138a8 <udp_input+0x210>)
 80136c6:	f003 fcad 	bl	8017024 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	895b      	ldrh	r3, [r3, #10]
 80136ce:	2b07      	cmp	r3, #7
 80136d0:	d803      	bhi.n	80136da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f7fa f9f2 	bl	800dabc <pbuf_free>
    goto end;
 80136d8:	e0de      	b.n	8013898 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80136e0:	4b73      	ldr	r3, [pc, #460]	@ (80138b0 <udp_input+0x218>)
 80136e2:	695b      	ldr	r3, [r3, #20]
 80136e4:	4a72      	ldr	r2, [pc, #456]	@ (80138b0 <udp_input+0x218>)
 80136e6:	6812      	ldr	r2, [r2, #0]
 80136e8:	4611      	mov	r1, r2
 80136ea:	4618      	mov	r0, r3
 80136ec:	f001 ff40 	bl	8015570 <ip4_addr_isbroadcast_u32>
 80136f0:	4603      	mov	r3, r0
 80136f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	881b      	ldrh	r3, [r3, #0]
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7f8 fe84 	bl	800c408 <lwip_htons>
 8013700:	4603      	mov	r3, r0
 8013702:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	885b      	ldrh	r3, [r3, #2]
 8013708:	b29b      	uxth	r3, r3
 801370a:	4618      	mov	r0, r3
 801370c:	f7f8 fe7c 	bl	800c408 <lwip_htons>
 8013710:	4603      	mov	r3, r0
 8013712:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013714:	2300      	movs	r3, #0
 8013716:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013718:	2300      	movs	r3, #0
 801371a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801371c:	2300      	movs	r3, #0
 801371e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013720:	4b64      	ldr	r3, [pc, #400]	@ (80138b4 <udp_input+0x21c>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	627b      	str	r3, [r7, #36]	@ 0x24
 8013726:	e054      	b.n	80137d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801372a:	8a5b      	ldrh	r3, [r3, #18]
 801372c:	89fa      	ldrh	r2, [r7, #14]
 801372e:	429a      	cmp	r2, r3
 8013730:	d14a      	bne.n	80137c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013732:	7cfb      	ldrb	r3, [r7, #19]
 8013734:	461a      	mov	r2, r3
 8013736:	6839      	ldr	r1, [r7, #0]
 8013738:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801373a:	f7ff ff49 	bl	80135d0 <udp_input_local_match>
 801373e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013740:	2b00      	cmp	r3, #0
 8013742:	d041      	beq.n	80137c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013746:	7c1b      	ldrb	r3, [r3, #16]
 8013748:	f003 0304 	and.w	r3, r3, #4
 801374c:	2b00      	cmp	r3, #0
 801374e:	d11d      	bne.n	801378c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d102      	bne.n	801375c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013758:	61fb      	str	r3, [r7, #28]
 801375a:	e017      	b.n	801378c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801375c:	7cfb      	ldrb	r3, [r7, #19]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d014      	beq.n	801378c <udp_input+0xf4>
 8013762:	4b53      	ldr	r3, [pc, #332]	@ (80138b0 <udp_input+0x218>)
 8013764:	695b      	ldr	r3, [r3, #20]
 8013766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801376a:	d10f      	bne.n	801378c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	3304      	adds	r3, #4
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	429a      	cmp	r2, r3
 8013778:	d008      	beq.n	801378c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	3304      	adds	r3, #4
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	429a      	cmp	r2, r3
 8013786:	d101      	bne.n	801378c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801378a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801378e:	8a9b      	ldrh	r3, [r3, #20]
 8013790:	8a3a      	ldrh	r2, [r7, #16]
 8013792:	429a      	cmp	r2, r3
 8013794:	d118      	bne.n	80137c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013798:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801379a:	2b00      	cmp	r3, #0
 801379c:	d005      	beq.n	80137aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a0:	685a      	ldr	r2, [r3, #4]
 80137a2:	4b43      	ldr	r3, [pc, #268]	@ (80138b0 <udp_input+0x218>)
 80137a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80137a6:	429a      	cmp	r2, r3
 80137a8:	d10e      	bne.n	80137c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80137aa:	6a3b      	ldr	r3, [r7, #32]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d014      	beq.n	80137da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80137b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b2:	68da      	ldr	r2, [r3, #12]
 80137b4:	6a3b      	ldr	r3, [r7, #32]
 80137b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80137b8:	4b3e      	ldr	r3, [pc, #248]	@ (80138b4 <udp_input+0x21c>)
 80137ba:	681a      	ldr	r2, [r3, #0]
 80137bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80137c0:	4a3c      	ldr	r2, [pc, #240]	@ (80138b4 <udp_input+0x21c>)
 80137c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80137c6:	e008      	b.n	80137da <udp_input+0x142>
      }
    }

    prev = pcb;
 80137c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80137d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1a7      	bne.n	8013728 <udp_input+0x90>
 80137d8:	e000      	b.n	80137dc <udp_input+0x144>
        break;
 80137da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80137dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d101      	bne.n	80137e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80137e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d002      	beq.n	80137f2 <udp_input+0x15a>
    for_us = 1;
 80137ec:	2301      	movs	r3, #1
 80137ee:	76fb      	strb	r3, [r7, #27]
 80137f0:	e00a      	b.n	8013808 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	3304      	adds	r3, #4
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	4b2d      	ldr	r3, [pc, #180]	@ (80138b0 <udp_input+0x218>)
 80137fa:	695b      	ldr	r3, [r3, #20]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	bf0c      	ite	eq
 8013800:	2301      	moveq	r3, #1
 8013802:	2300      	movne	r3, #0
 8013804:	b2db      	uxtb	r3, r3
 8013806:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013808:	7efb      	ldrb	r3, [r7, #27]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d041      	beq.n	8013892 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801380e:	2108      	movs	r1, #8
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7fa f8cd 	bl	800d9b0 <pbuf_remove_header>
 8013816:	4603      	mov	r3, r0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00a      	beq.n	8013832 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801381c:	4b20      	ldr	r3, [pc, #128]	@ (80138a0 <udp_input+0x208>)
 801381e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013822:	4925      	ldr	r1, [pc, #148]	@ (80138b8 <udp_input+0x220>)
 8013824:	4820      	ldr	r0, [pc, #128]	@ (80138a8 <udp_input+0x210>)
 8013826:	f003 fbfd 	bl	8017024 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f7fa f946 	bl	800dabc <pbuf_free>
      goto end;
 8013830:	e032      	b.n	8013898 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013834:	2b00      	cmp	r3, #0
 8013836:	d012      	beq.n	801385e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801383a:	699b      	ldr	r3, [r3, #24]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d00a      	beq.n	8013856 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013842:	699c      	ldr	r4, [r3, #24]
 8013844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013846:	69d8      	ldr	r0, [r3, #28]
 8013848:	8a3b      	ldrh	r3, [r7, #16]
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	4b1b      	ldr	r3, [pc, #108]	@ (80138bc <udp_input+0x224>)
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013852:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013854:	e021      	b.n	801389a <udp_input+0x202>
        pbuf_free(p);
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f7fa f930 	bl	800dabc <pbuf_free>
        goto end;
 801385c:	e01c      	b.n	8013898 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801385e:	7cfb      	ldrb	r3, [r7, #19]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d112      	bne.n	801388a <udp_input+0x1f2>
 8013864:	4b12      	ldr	r3, [pc, #72]	@ (80138b0 <udp_input+0x218>)
 8013866:	695b      	ldr	r3, [r3, #20]
 8013868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801386c:	2be0      	cmp	r3, #224	@ 0xe0
 801386e:	d00c      	beq.n	801388a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013870:	4b0f      	ldr	r3, [pc, #60]	@ (80138b0 <udp_input+0x218>)
 8013872:	899b      	ldrh	r3, [r3, #12]
 8013874:	3308      	adds	r3, #8
 8013876:	b29b      	uxth	r3, r3
 8013878:	b21b      	sxth	r3, r3
 801387a:	4619      	mov	r1, r3
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f7fa f90a 	bl	800da96 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013882:	2103      	movs	r1, #3
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f001 fb53 	bl	8014f30 <icmp_dest_unreach>
      pbuf_free(p);
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f7fa f916 	bl	800dabc <pbuf_free>
  return;
 8013890:	e003      	b.n	801389a <udp_input+0x202>
    pbuf_free(p);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7fa f912 	bl	800dabc <pbuf_free>
  return;
 8013898:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801389a:	372c      	adds	r7, #44	@ 0x2c
 801389c:	46bd      	mov	sp, r7
 801389e:	bd90      	pop	{r4, r7, pc}
 80138a0:	08019e08 	.word	0x08019e08
 80138a4:	08019eac 	.word	0x08019eac
 80138a8:	08019e5c 	.word	0x08019e5c
 80138ac:	08019ec4 	.word	0x08019ec4
 80138b0:	2000555c 	.word	0x2000555c
 80138b4:	200084d4 	.word	0x200084d4
 80138b8:	08019ee0 	.word	0x08019ee0
 80138bc:	2000556c 	.word	0x2000556c

080138c0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b088      	sub	sp, #32
 80138c4:	af02      	add	r7, sp, #8
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d109      	bne.n	80138e8 <udp_sendto+0x28>
 80138d4:	4b23      	ldr	r3, [pc, #140]	@ (8013964 <udp_sendto+0xa4>)
 80138d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80138da:	4923      	ldr	r1, [pc, #140]	@ (8013968 <udp_sendto+0xa8>)
 80138dc:	4823      	ldr	r0, [pc, #140]	@ (801396c <udp_sendto+0xac>)
 80138de:	f003 fba1 	bl	8017024 <iprintf>
 80138e2:	f06f 030f 	mvn.w	r3, #15
 80138e6:	e038      	b.n	801395a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d109      	bne.n	8013902 <udp_sendto+0x42>
 80138ee:	4b1d      	ldr	r3, [pc, #116]	@ (8013964 <udp_sendto+0xa4>)
 80138f0:	f240 2219 	movw	r2, #537	@ 0x219
 80138f4:	491e      	ldr	r1, [pc, #120]	@ (8013970 <udp_sendto+0xb0>)
 80138f6:	481d      	ldr	r0, [pc, #116]	@ (801396c <udp_sendto+0xac>)
 80138f8:	f003 fb94 	bl	8017024 <iprintf>
 80138fc:	f06f 030f 	mvn.w	r3, #15
 8013900:	e02b      	b.n	801395a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d109      	bne.n	801391c <udp_sendto+0x5c>
 8013908:	4b16      	ldr	r3, [pc, #88]	@ (8013964 <udp_sendto+0xa4>)
 801390a:	f240 221a 	movw	r2, #538	@ 0x21a
 801390e:	4919      	ldr	r1, [pc, #100]	@ (8013974 <udp_sendto+0xb4>)
 8013910:	4816      	ldr	r0, [pc, #88]	@ (801396c <udp_sendto+0xac>)
 8013912:	f003 fb87 	bl	8017024 <iprintf>
 8013916:	f06f 030f 	mvn.w	r3, #15
 801391a:	e01e      	b.n	801395a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	7a1b      	ldrb	r3, [r3, #8]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d006      	beq.n	8013932 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	7a1b      	ldrb	r3, [r3, #8]
 8013928:	4618      	mov	r0, r3
 801392a:	f7f9 fd67 	bl	800d3fc <netif_get_by_index>
 801392e:	6178      	str	r0, [r7, #20]
 8013930:	e003      	b.n	801393a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f001 fb86 	bl	8015044 <ip4_route>
 8013938:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d102      	bne.n	8013946 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013940:	f06f 0303 	mvn.w	r3, #3
 8013944:	e009      	b.n	801395a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013946:	887a      	ldrh	r2, [r7, #2]
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	4613      	mov	r3, r2
 801394e:	687a      	ldr	r2, [r7, #4]
 8013950:	68b9      	ldr	r1, [r7, #8]
 8013952:	68f8      	ldr	r0, [r7, #12]
 8013954:	f000 f810 	bl	8013978 <udp_sendto_if>
 8013958:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801395a:	4618      	mov	r0, r3
 801395c:	3718      	adds	r7, #24
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	08019e08 	.word	0x08019e08
 8013968:	08019f2c 	.word	0x08019f2c
 801396c:	08019e5c 	.word	0x08019e5c
 8013970:	08019f44 	.word	0x08019f44
 8013974:	08019f60 	.word	0x08019f60

08013978 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b088      	sub	sp, #32
 801397c:	af02      	add	r7, sp, #8
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	60b9      	str	r1, [r7, #8]
 8013982:	607a      	str	r2, [r7, #4]
 8013984:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d109      	bne.n	80139a0 <udp_sendto_if+0x28>
 801398c:	4b2e      	ldr	r3, [pc, #184]	@ (8013a48 <udp_sendto_if+0xd0>)
 801398e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013992:	492e      	ldr	r1, [pc, #184]	@ (8013a4c <udp_sendto_if+0xd4>)
 8013994:	482e      	ldr	r0, [pc, #184]	@ (8013a50 <udp_sendto_if+0xd8>)
 8013996:	f003 fb45 	bl	8017024 <iprintf>
 801399a:	f06f 030f 	mvn.w	r3, #15
 801399e:	e04f      	b.n	8013a40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d109      	bne.n	80139ba <udp_sendto_if+0x42>
 80139a6:	4b28      	ldr	r3, [pc, #160]	@ (8013a48 <udp_sendto_if+0xd0>)
 80139a8:	f240 2281 	movw	r2, #641	@ 0x281
 80139ac:	4929      	ldr	r1, [pc, #164]	@ (8013a54 <udp_sendto_if+0xdc>)
 80139ae:	4828      	ldr	r0, [pc, #160]	@ (8013a50 <udp_sendto_if+0xd8>)
 80139b0:	f003 fb38 	bl	8017024 <iprintf>
 80139b4:	f06f 030f 	mvn.w	r3, #15
 80139b8:	e042      	b.n	8013a40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d109      	bne.n	80139d4 <udp_sendto_if+0x5c>
 80139c0:	4b21      	ldr	r3, [pc, #132]	@ (8013a48 <udp_sendto_if+0xd0>)
 80139c2:	f240 2282 	movw	r2, #642	@ 0x282
 80139c6:	4924      	ldr	r1, [pc, #144]	@ (8013a58 <udp_sendto_if+0xe0>)
 80139c8:	4821      	ldr	r0, [pc, #132]	@ (8013a50 <udp_sendto_if+0xd8>)
 80139ca:	f003 fb2b 	bl	8017024 <iprintf>
 80139ce:	f06f 030f 	mvn.w	r3, #15
 80139d2:	e035      	b.n	8013a40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80139d4:	6a3b      	ldr	r3, [r7, #32]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d109      	bne.n	80139ee <udp_sendto_if+0x76>
 80139da:	4b1b      	ldr	r3, [pc, #108]	@ (8013a48 <udp_sendto_if+0xd0>)
 80139dc:	f240 2283 	movw	r2, #643	@ 0x283
 80139e0:	491e      	ldr	r1, [pc, #120]	@ (8013a5c <udp_sendto_if+0xe4>)
 80139e2:	481b      	ldr	r0, [pc, #108]	@ (8013a50 <udp_sendto_if+0xd8>)
 80139e4:	f003 fb1e 	bl	8017024 <iprintf>
 80139e8:	f06f 030f 	mvn.w	r3, #15
 80139ec:	e028      	b.n	8013a40 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d009      	beq.n	8013a08 <udp_sendto_if+0x90>
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d005      	beq.n	8013a08 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a04:	2be0      	cmp	r3, #224	@ 0xe0
 8013a06:	d103      	bne.n	8013a10 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013a08:	6a3b      	ldr	r3, [r7, #32]
 8013a0a:	3304      	adds	r3, #4
 8013a0c:	617b      	str	r3, [r7, #20]
 8013a0e:	e00b      	b.n	8013a28 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	6a3b      	ldr	r3, [r7, #32]
 8013a16:	3304      	adds	r3, #4
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d002      	beq.n	8013a24 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013a1e:	f06f 0303 	mvn.w	r3, #3
 8013a22:	e00d      	b.n	8013a40 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013a28:	887a      	ldrh	r2, [r7, #2]
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	9301      	str	r3, [sp, #4]
 8013a2e:	6a3b      	ldr	r3, [r7, #32]
 8013a30:	9300      	str	r3, [sp, #0]
 8013a32:	4613      	mov	r3, r2
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	68b9      	ldr	r1, [r7, #8]
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 f811 	bl	8013a60 <udp_sendto_if_src>
 8013a3e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3718      	adds	r7, #24
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	08019e08 	.word	0x08019e08
 8013a4c:	08019f7c 	.word	0x08019f7c
 8013a50:	08019e5c 	.word	0x08019e5c
 8013a54:	08019f98 	.word	0x08019f98
 8013a58:	08019fb4 	.word	0x08019fb4
 8013a5c:	08019fd4 	.word	0x08019fd4

08013a60 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b08c      	sub	sp, #48	@ 0x30
 8013a64:	af04      	add	r7, sp, #16
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
 8013a6c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d109      	bne.n	8013a88 <udp_sendto_if_src+0x28>
 8013a74:	4b65      	ldr	r3, [pc, #404]	@ (8013c0c <udp_sendto_if_src+0x1ac>)
 8013a76:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013a7a:	4965      	ldr	r1, [pc, #404]	@ (8013c10 <udp_sendto_if_src+0x1b0>)
 8013a7c:	4865      	ldr	r0, [pc, #404]	@ (8013c14 <udp_sendto_if_src+0x1b4>)
 8013a7e:	f003 fad1 	bl	8017024 <iprintf>
 8013a82:	f06f 030f 	mvn.w	r3, #15
 8013a86:	e0bc      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d109      	bne.n	8013aa2 <udp_sendto_if_src+0x42>
 8013a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8013c0c <udp_sendto_if_src+0x1ac>)
 8013a90:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013a94:	4960      	ldr	r1, [pc, #384]	@ (8013c18 <udp_sendto_if_src+0x1b8>)
 8013a96:	485f      	ldr	r0, [pc, #380]	@ (8013c14 <udp_sendto_if_src+0x1b4>)
 8013a98:	f003 fac4 	bl	8017024 <iprintf>
 8013a9c:	f06f 030f 	mvn.w	r3, #15
 8013aa0:	e0af      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d109      	bne.n	8013abc <udp_sendto_if_src+0x5c>
 8013aa8:	4b58      	ldr	r3, [pc, #352]	@ (8013c0c <udp_sendto_if_src+0x1ac>)
 8013aaa:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013aae:	495b      	ldr	r1, [pc, #364]	@ (8013c1c <udp_sendto_if_src+0x1bc>)
 8013ab0:	4858      	ldr	r0, [pc, #352]	@ (8013c14 <udp_sendto_if_src+0x1b4>)
 8013ab2:	f003 fab7 	bl	8017024 <iprintf>
 8013ab6:	f06f 030f 	mvn.w	r3, #15
 8013aba:	e0a2      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d109      	bne.n	8013ad6 <udp_sendto_if_src+0x76>
 8013ac2:	4b52      	ldr	r3, [pc, #328]	@ (8013c0c <udp_sendto_if_src+0x1ac>)
 8013ac4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8013ac8:	4955      	ldr	r1, [pc, #340]	@ (8013c20 <udp_sendto_if_src+0x1c0>)
 8013aca:	4852      	ldr	r0, [pc, #328]	@ (8013c14 <udp_sendto_if_src+0x1b4>)
 8013acc:	f003 faaa 	bl	8017024 <iprintf>
 8013ad0:	f06f 030f 	mvn.w	r3, #15
 8013ad4:	e095      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d109      	bne.n	8013af0 <udp_sendto_if_src+0x90>
 8013adc:	4b4b      	ldr	r3, [pc, #300]	@ (8013c0c <udp_sendto_if_src+0x1ac>)
 8013ade:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8013ae2:	4950      	ldr	r1, [pc, #320]	@ (8013c24 <udp_sendto_if_src+0x1c4>)
 8013ae4:	484b      	ldr	r0, [pc, #300]	@ (8013c14 <udp_sendto_if_src+0x1b4>)
 8013ae6:	f003 fa9d 	bl	8017024 <iprintf>
 8013aea:	f06f 030f 	mvn.w	r3, #15
 8013aee:	e088      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	8a5b      	ldrh	r3, [r3, #18]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d10f      	bne.n	8013b18 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013af8:	68f9      	ldr	r1, [r7, #12]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	8a5b      	ldrh	r3, [r3, #18]
 8013afe:	461a      	mov	r2, r3
 8013b00:	68f8      	ldr	r0, [r7, #12]
 8013b02:	f000 f893 	bl	8013c2c <udp_bind>
 8013b06:	4603      	mov	r3, r0
 8013b08:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013b0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d002      	beq.n	8013b18 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013b12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013b16:	e074      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	891b      	ldrh	r3, [r3, #8]
 8013b1c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d902      	bls.n	8013b2a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013b24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013b28:	e06b      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013b2a:	2108      	movs	r1, #8
 8013b2c:	68b8      	ldr	r0, [r7, #8]
 8013b2e:	f7f9 ff2f 	bl	800d990 <pbuf_add_header>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d015      	beq.n	8013b64 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013b38:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b3c:	2108      	movs	r1, #8
 8013b3e:	2022      	movs	r0, #34	@ 0x22
 8013b40:	f7f9 fcd8 	bl	800d4f4 <pbuf_alloc>
 8013b44:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d102      	bne.n	8013b52 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013b50:	e057      	b.n	8013c02 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	891b      	ldrh	r3, [r3, #8]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d006      	beq.n	8013b68 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013b5a:	68b9      	ldr	r1, [r7, #8]
 8013b5c:	69f8      	ldr	r0, [r7, #28]
 8013b5e:	f7fa f8c5 	bl	800dcec <pbuf_chain>
 8013b62:	e001      	b.n	8013b68 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	895b      	ldrh	r3, [r3, #10]
 8013b6c:	2b07      	cmp	r3, #7
 8013b6e:	d806      	bhi.n	8013b7e <udp_sendto_if_src+0x11e>
 8013b70:	4b26      	ldr	r3, [pc, #152]	@ (8013c0c <udp_sendto_if_src+0x1ac>)
 8013b72:	f240 320d 	movw	r2, #781	@ 0x30d
 8013b76:	492c      	ldr	r1, [pc, #176]	@ (8013c28 <udp_sendto_if_src+0x1c8>)
 8013b78:	4826      	ldr	r0, [pc, #152]	@ (8013c14 <udp_sendto_if_src+0x1b4>)
 8013b7a:	f003 fa53 	bl	8017024 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	8a5b      	ldrh	r3, [r3, #18]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7f8 fc3d 	bl	800c408 <lwip_htons>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	461a      	mov	r2, r3
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013b96:	887b      	ldrh	r3, [r7, #2]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7f8 fc35 	bl	800c408 <lwip_htons>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	719a      	strb	r2, [r3, #6]
 8013bac:	2200      	movs	r2, #0
 8013bae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	891b      	ldrh	r3, [r3, #8]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7f8 fc27 	bl	800c408 <lwip_htons>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013bc2:	2311      	movs	r3, #17
 8013bc4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	7adb      	ldrb	r3, [r3, #11]
 8013bca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	7a9b      	ldrb	r3, [r3, #10]
 8013bd0:	7cb9      	ldrb	r1, [r7, #18]
 8013bd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013bd4:	9202      	str	r2, [sp, #8]
 8013bd6:	7cfa      	ldrb	r2, [r7, #19]
 8013bd8:	9201      	str	r2, [sp, #4]
 8013bda:	9300      	str	r3, [sp, #0]
 8013bdc:	460b      	mov	r3, r1
 8013bde:	687a      	ldr	r2, [r7, #4]
 8013be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013be2:	69f8      	ldr	r0, [r7, #28]
 8013be4:	f001 fc16 	bl	8015414 <ip4_output_if_src>
 8013be8:	4603      	mov	r3, r0
 8013bea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013bec:	69fa      	ldr	r2, [r7, #28]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d004      	beq.n	8013bfe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013bf4:	69f8      	ldr	r0, [r7, #28]
 8013bf6:	f7f9 ff61 	bl	800dabc <pbuf_free>
    q = NULL;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013bfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3720      	adds	r7, #32
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	08019e08 	.word	0x08019e08
 8013c10:	08019ff4 	.word	0x08019ff4
 8013c14:	08019e5c 	.word	0x08019e5c
 8013c18:	0801a014 	.word	0x0801a014
 8013c1c:	0801a034 	.word	0x0801a034
 8013c20:	0801a058 	.word	0x0801a058
 8013c24:	0801a07c 	.word	0x0801a07c
 8013c28:	0801a0a0 	.word	0x0801a0a0

08013c2c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b086      	sub	sp, #24
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	4613      	mov	r3, r2
 8013c38:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d101      	bne.n	8013c44 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013c40:	4b39      	ldr	r3, [pc, #228]	@ (8013d28 <udp_bind+0xfc>)
 8013c42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d109      	bne.n	8013c5e <udp_bind+0x32>
 8013c4a:	4b38      	ldr	r3, [pc, #224]	@ (8013d2c <udp_bind+0x100>)
 8013c4c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013c50:	4937      	ldr	r1, [pc, #220]	@ (8013d30 <udp_bind+0x104>)
 8013c52:	4838      	ldr	r0, [pc, #224]	@ (8013d34 <udp_bind+0x108>)
 8013c54:	f003 f9e6 	bl	8017024 <iprintf>
 8013c58:	f06f 030f 	mvn.w	r3, #15
 8013c5c:	e060      	b.n	8013d20 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c62:	4b35      	ldr	r3, [pc, #212]	@ (8013d38 <udp_bind+0x10c>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	617b      	str	r3, [r7, #20]
 8013c68:	e009      	b.n	8013c7e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d102      	bne.n	8013c78 <udp_bind+0x4c>
      rebind = 1;
 8013c72:	2301      	movs	r3, #1
 8013c74:	74fb      	strb	r3, [r7, #19]
      break;
 8013c76:	e005      	b.n	8013c84 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	68db      	ldr	r3, [r3, #12]
 8013c7c:	617b      	str	r3, [r7, #20]
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d1f2      	bne.n	8013c6a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013c84:	88fb      	ldrh	r3, [r7, #6]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d109      	bne.n	8013c9e <udp_bind+0x72>
    port = udp_new_port();
 8013c8a:	f7ff fc69 	bl	8013560 <udp_new_port>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013c92:	88fb      	ldrh	r3, [r7, #6]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d12c      	bne.n	8013cf2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013c98:	f06f 0307 	mvn.w	r3, #7
 8013c9c:	e040      	b.n	8013d20 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c9e:	4b26      	ldr	r3, [pc, #152]	@ (8013d38 <udp_bind+0x10c>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	617b      	str	r3, [r7, #20]
 8013ca4:	e022      	b.n	8013cec <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013ca6:	68fa      	ldr	r2, [r7, #12]
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d01b      	beq.n	8013ce6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	8a5b      	ldrh	r3, [r3, #18]
 8013cb2:	88fa      	ldrh	r2, [r7, #6]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d116      	bne.n	8013ce6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d00d      	beq.n	8013ce0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00a      	beq.n	8013ce0 <udp_bind+0xb4>
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d006      	beq.n	8013ce0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013cd2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d003      	beq.n	8013ce0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d102      	bne.n	8013ce6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013ce0:	f06f 0307 	mvn.w	r3, #7
 8013ce4:	e01c      	b.n	8013d20 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	68db      	ldr	r3, [r3, #12]
 8013cea:	617b      	str	r3, [r7, #20]
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1d9      	bne.n	8013ca6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d002      	beq.n	8013cfe <udp_bind+0xd2>
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	e000      	b.n	8013d00 <udp_bind+0xd4>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	88fa      	ldrh	r2, [r7, #6]
 8013d08:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013d0a:	7cfb      	ldrb	r3, [r7, #19]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d106      	bne.n	8013d1e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013d10:	4b09      	ldr	r3, [pc, #36]	@ (8013d38 <udp_bind+0x10c>)
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013d18:	4a07      	ldr	r2, [pc, #28]	@ (8013d38 <udp_bind+0x10c>)
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013d1e:	2300      	movs	r3, #0
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3718      	adds	r7, #24
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	0801a948 	.word	0x0801a948
 8013d2c:	08019e08 	.word	0x08019e08
 8013d30:	0801a0d0 	.word	0x0801a0d0
 8013d34:	08019e5c 	.word	0x08019e5c
 8013d38:	200084d4 	.word	0x200084d4

08013d3c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b084      	sub	sp, #16
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	60f8      	str	r0, [r7, #12]
 8013d44:	60b9      	str	r1, [r7, #8]
 8013d46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d107      	bne.n	8013d5e <udp_recv+0x22>
 8013d4e:	4b08      	ldr	r3, [pc, #32]	@ (8013d70 <udp_recv+0x34>)
 8013d50:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013d54:	4907      	ldr	r1, [pc, #28]	@ (8013d74 <udp_recv+0x38>)
 8013d56:	4808      	ldr	r0, [pc, #32]	@ (8013d78 <udp_recv+0x3c>)
 8013d58:	f003 f964 	bl	8017024 <iprintf>
 8013d5c:	e005      	b.n	8013d6a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	68ba      	ldr	r2, [r7, #8]
 8013d62:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	61da      	str	r2, [r3, #28]
}
 8013d6a:	3710      	adds	r7, #16
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	08019e08 	.word	0x08019e08
 8013d74:	0801a13c 	.word	0x0801a13c
 8013d78:	08019e5c 	.word	0x08019e5c

08013d7c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d107      	bne.n	8013d9a <udp_remove+0x1e>
 8013d8a:	4b19      	ldr	r3, [pc, #100]	@ (8013df0 <udp_remove+0x74>)
 8013d8c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013d90:	4918      	ldr	r1, [pc, #96]	@ (8013df4 <udp_remove+0x78>)
 8013d92:	4819      	ldr	r0, [pc, #100]	@ (8013df8 <udp_remove+0x7c>)
 8013d94:	f003 f946 	bl	8017024 <iprintf>
 8013d98:	e026      	b.n	8013de8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013d9a:	4b18      	ldr	r3, [pc, #96]	@ (8013dfc <udp_remove+0x80>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d105      	bne.n	8013db0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013da4:	4b15      	ldr	r3, [pc, #84]	@ (8013dfc <udp_remove+0x80>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	4a14      	ldr	r2, [pc, #80]	@ (8013dfc <udp_remove+0x80>)
 8013dac:	6013      	str	r3, [r2, #0]
 8013dae:	e017      	b.n	8013de0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013db0:	4b12      	ldr	r3, [pc, #72]	@ (8013dfc <udp_remove+0x80>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	60fb      	str	r3, [r7, #12]
 8013db6:	e010      	b.n	8013dda <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d009      	beq.n	8013dd4 <udp_remove+0x58>
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d104      	bne.n	8013dd4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	68da      	ldr	r2, [r3, #12]
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	60da      	str	r2, [r3, #12]
        break;
 8013dd2:	e005      	b.n	8013de0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	68db      	ldr	r3, [r3, #12]
 8013dd8:	60fb      	str	r3, [r7, #12]
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d1eb      	bne.n	8013db8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013de0:	6879      	ldr	r1, [r7, #4]
 8013de2:	2000      	movs	r0, #0
 8013de4:	f7f8 fff4 	bl	800cdd0 <memp_free>
}
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	08019e08 	.word	0x08019e08
 8013df4:	0801a154 	.word	0x0801a154
 8013df8:	08019e5c 	.word	0x08019e5c
 8013dfc:	200084d4 	.word	0x200084d4

08013e00 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013e06:	2000      	movs	r0, #0
 8013e08:	f7f8 ff72 	bl	800ccf0 <memp_malloc>
 8013e0c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d007      	beq.n	8013e24 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013e14:	2220      	movs	r2, #32
 8013e16:	2100      	movs	r1, #0
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f003 f968 	bl	80170ee <memset>
    pcb->ttl = UDP_TTL;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	22ff      	movs	r2, #255	@ 0xff
 8013e22:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013e24:	687b      	ldr	r3, [r7, #4]
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3708      	adds	r7, #8
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
	...

08013e30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b085      	sub	sp, #20
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d01e      	beq.n	8013e7e <udp_netif_ip_addr_changed+0x4e>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d01a      	beq.n	8013e7e <udp_netif_ip_addr_changed+0x4e>
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d017      	beq.n	8013e7e <udp_netif_ip_addr_changed+0x4e>
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d013      	beq.n	8013e7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013e56:	4b0d      	ldr	r3, [pc, #52]	@ (8013e8c <udp_netif_ip_addr_changed+0x5c>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	60fb      	str	r3, [r7, #12]
 8013e5c:	e00c      	b.n	8013e78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d103      	bne.n	8013e72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	681a      	ldr	r2, [r3, #0]
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	68db      	ldr	r3, [r3, #12]
 8013e76:	60fb      	str	r3, [r7, #12]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d1ef      	bne.n	8013e5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013e7e:	bf00      	nop
 8013e80:	3714      	adds	r7, #20
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	200084d4 	.word	0x200084d4

08013e90 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013e98:	4915      	ldr	r1, [pc, #84]	@ (8013ef0 <etharp_free_entry+0x60>)
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	4413      	add	r3, r2
 8013ea2:	00db      	lsls	r3, r3, #3
 8013ea4:	440b      	add	r3, r1
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d013      	beq.n	8013ed4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013eac:	4910      	ldr	r1, [pc, #64]	@ (8013ef0 <etharp_free_entry+0x60>)
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	4413      	add	r3, r2
 8013eb6:	00db      	lsls	r3, r3, #3
 8013eb8:	440b      	add	r3, r1
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7f9 fdfd 	bl	800dabc <pbuf_free>
    arp_table[i].q = NULL;
 8013ec2:	490b      	ldr	r1, [pc, #44]	@ (8013ef0 <etharp_free_entry+0x60>)
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	4413      	add	r3, r2
 8013ecc:	00db      	lsls	r3, r3, #3
 8013ece:	440b      	add	r3, r1
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013ed4:	4906      	ldr	r1, [pc, #24]	@ (8013ef0 <etharp_free_entry+0x60>)
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	4613      	mov	r3, r2
 8013eda:	005b      	lsls	r3, r3, #1
 8013edc:	4413      	add	r3, r2
 8013ede:	00db      	lsls	r3, r3, #3
 8013ee0:	440b      	add	r3, r1
 8013ee2:	3314      	adds	r3, #20
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013ee8:	bf00      	nop
 8013eea:	3708      	adds	r7, #8
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}
 8013ef0:	200084d8 	.word	0x200084d8

08013ef4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013efa:	2300      	movs	r3, #0
 8013efc:	607b      	str	r3, [r7, #4]
 8013efe:	e096      	b.n	801402e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013f00:	494f      	ldr	r1, [pc, #316]	@ (8014040 <etharp_tmr+0x14c>)
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	4613      	mov	r3, r2
 8013f06:	005b      	lsls	r3, r3, #1
 8013f08:	4413      	add	r3, r2
 8013f0a:	00db      	lsls	r3, r3, #3
 8013f0c:	440b      	add	r3, r1
 8013f0e:	3314      	adds	r3, #20
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013f14:	78fb      	ldrb	r3, [r7, #3]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	f000 8086 	beq.w	8014028 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013f1c:	4948      	ldr	r1, [pc, #288]	@ (8014040 <etharp_tmr+0x14c>)
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	4613      	mov	r3, r2
 8013f22:	005b      	lsls	r3, r3, #1
 8013f24:	4413      	add	r3, r2
 8013f26:	00db      	lsls	r3, r3, #3
 8013f28:	440b      	add	r3, r1
 8013f2a:	3312      	adds	r3, #18
 8013f2c:	881b      	ldrh	r3, [r3, #0]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	b298      	uxth	r0, r3
 8013f32:	4943      	ldr	r1, [pc, #268]	@ (8014040 <etharp_tmr+0x14c>)
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	4613      	mov	r3, r2
 8013f38:	005b      	lsls	r3, r3, #1
 8013f3a:	4413      	add	r3, r2
 8013f3c:	00db      	lsls	r3, r3, #3
 8013f3e:	440b      	add	r3, r1
 8013f40:	3312      	adds	r3, #18
 8013f42:	4602      	mov	r2, r0
 8013f44:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f46:	493e      	ldr	r1, [pc, #248]	@ (8014040 <etharp_tmr+0x14c>)
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	005b      	lsls	r3, r3, #1
 8013f4e:	4413      	add	r3, r2
 8013f50:	00db      	lsls	r3, r3, #3
 8013f52:	440b      	add	r3, r1
 8013f54:	3312      	adds	r3, #18
 8013f56:	881b      	ldrh	r3, [r3, #0]
 8013f58:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013f5c:	d215      	bcs.n	8013f8a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f5e:	4938      	ldr	r1, [pc, #224]	@ (8014040 <etharp_tmr+0x14c>)
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	4613      	mov	r3, r2
 8013f64:	005b      	lsls	r3, r3, #1
 8013f66:	4413      	add	r3, r2
 8013f68:	00db      	lsls	r3, r3, #3
 8013f6a:	440b      	add	r3, r1
 8013f6c:	3314      	adds	r3, #20
 8013f6e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d10e      	bne.n	8013f92 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013f74:	4932      	ldr	r1, [pc, #200]	@ (8014040 <etharp_tmr+0x14c>)
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	4613      	mov	r3, r2
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	4413      	add	r3, r2
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	440b      	add	r3, r1
 8013f82:	3312      	adds	r3, #18
 8013f84:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f86:	2b04      	cmp	r3, #4
 8013f88:	d903      	bls.n	8013f92 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f7ff ff80 	bl	8013e90 <etharp_free_entry>
 8013f90:	e04a      	b.n	8014028 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013f92:	492b      	ldr	r1, [pc, #172]	@ (8014040 <etharp_tmr+0x14c>)
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	4613      	mov	r3, r2
 8013f98:	005b      	lsls	r3, r3, #1
 8013f9a:	4413      	add	r3, r2
 8013f9c:	00db      	lsls	r3, r3, #3
 8013f9e:	440b      	add	r3, r1
 8013fa0:	3314      	adds	r3, #20
 8013fa2:	781b      	ldrb	r3, [r3, #0]
 8013fa4:	2b03      	cmp	r3, #3
 8013fa6:	d10a      	bne.n	8013fbe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013fa8:	4925      	ldr	r1, [pc, #148]	@ (8014040 <etharp_tmr+0x14c>)
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	4613      	mov	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	440b      	add	r3, r1
 8013fb6:	3314      	adds	r3, #20
 8013fb8:	2204      	movs	r2, #4
 8013fba:	701a      	strb	r2, [r3, #0]
 8013fbc:	e034      	b.n	8014028 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013fbe:	4920      	ldr	r1, [pc, #128]	@ (8014040 <etharp_tmr+0x14c>)
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	005b      	lsls	r3, r3, #1
 8013fc6:	4413      	add	r3, r2
 8013fc8:	00db      	lsls	r3, r3, #3
 8013fca:	440b      	add	r3, r1
 8013fcc:	3314      	adds	r3, #20
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	2b04      	cmp	r3, #4
 8013fd2:	d10a      	bne.n	8013fea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013fd4:	491a      	ldr	r1, [pc, #104]	@ (8014040 <etharp_tmr+0x14c>)
 8013fd6:	687a      	ldr	r2, [r7, #4]
 8013fd8:	4613      	mov	r3, r2
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	4413      	add	r3, r2
 8013fde:	00db      	lsls	r3, r3, #3
 8013fe0:	440b      	add	r3, r1
 8013fe2:	3314      	adds	r3, #20
 8013fe4:	2202      	movs	r2, #2
 8013fe6:	701a      	strb	r2, [r3, #0]
 8013fe8:	e01e      	b.n	8014028 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013fea:	4915      	ldr	r1, [pc, #84]	@ (8014040 <etharp_tmr+0x14c>)
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	005b      	lsls	r3, r3, #1
 8013ff2:	4413      	add	r3, r2
 8013ff4:	00db      	lsls	r3, r3, #3
 8013ff6:	440b      	add	r3, r1
 8013ff8:	3314      	adds	r3, #20
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	2b01      	cmp	r3, #1
 8013ffe:	d113      	bne.n	8014028 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014000:	490f      	ldr	r1, [pc, #60]	@ (8014040 <etharp_tmr+0x14c>)
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	4613      	mov	r3, r2
 8014006:	005b      	lsls	r3, r3, #1
 8014008:	4413      	add	r3, r2
 801400a:	00db      	lsls	r3, r3, #3
 801400c:	440b      	add	r3, r1
 801400e:	3308      	adds	r3, #8
 8014010:	6818      	ldr	r0, [r3, #0]
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	4613      	mov	r3, r2
 8014016:	005b      	lsls	r3, r3, #1
 8014018:	4413      	add	r3, r2
 801401a:	00db      	lsls	r3, r3, #3
 801401c:	4a08      	ldr	r2, [pc, #32]	@ (8014040 <etharp_tmr+0x14c>)
 801401e:	4413      	add	r3, r2
 8014020:	3304      	adds	r3, #4
 8014022:	4619      	mov	r1, r3
 8014024:	f000 fe6e 	bl	8014d04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	3301      	adds	r3, #1
 801402c:	607b      	str	r3, [r7, #4]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b09      	cmp	r3, #9
 8014032:	f77f af65 	ble.w	8013f00 <etharp_tmr+0xc>
      }
    }
  }
}
 8014036:	bf00      	nop
 8014038:	bf00      	nop
 801403a:	3708      	adds	r7, #8
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	200084d8 	.word	0x200084d8

08014044 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b08a      	sub	sp, #40	@ 0x28
 8014048:	af00      	add	r7, sp, #0
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	460b      	mov	r3, r1
 801404e:	607a      	str	r2, [r7, #4]
 8014050:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014052:	230a      	movs	r3, #10
 8014054:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014056:	230a      	movs	r3, #10
 8014058:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801405a:	230a      	movs	r3, #10
 801405c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801405e:	2300      	movs	r3, #0
 8014060:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014062:	230a      	movs	r3, #10
 8014064:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014066:	2300      	movs	r3, #0
 8014068:	83bb      	strh	r3, [r7, #28]
 801406a:	2300      	movs	r3, #0
 801406c:	837b      	strh	r3, [r7, #26]
 801406e:	2300      	movs	r3, #0
 8014070:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014072:	2300      	movs	r3, #0
 8014074:	843b      	strh	r3, [r7, #32]
 8014076:	e0ae      	b.n	80141d6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014078:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801407c:	49a6      	ldr	r1, [pc, #664]	@ (8014318 <etharp_find_entry+0x2d4>)
 801407e:	4613      	mov	r3, r2
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	4413      	add	r3, r2
 8014084:	00db      	lsls	r3, r3, #3
 8014086:	440b      	add	r3, r1
 8014088:	3314      	adds	r3, #20
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801408e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014092:	2b0a      	cmp	r3, #10
 8014094:	d105      	bne.n	80140a2 <etharp_find_entry+0x5e>
 8014096:	7dfb      	ldrb	r3, [r7, #23]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d102      	bne.n	80140a2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801409c:	8c3b      	ldrh	r3, [r7, #32]
 801409e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80140a0:	e095      	b.n	80141ce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80140a2:	7dfb      	ldrb	r3, [r7, #23]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	f000 8092 	beq.w	80141ce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80140aa:	7dfb      	ldrb	r3, [r7, #23]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d009      	beq.n	80140c4 <etharp_find_entry+0x80>
 80140b0:	7dfb      	ldrb	r3, [r7, #23]
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	d806      	bhi.n	80140c4 <etharp_find_entry+0x80>
 80140b6:	4b99      	ldr	r3, [pc, #612]	@ (801431c <etharp_find_entry+0x2d8>)
 80140b8:	f240 1223 	movw	r2, #291	@ 0x123
 80140bc:	4998      	ldr	r1, [pc, #608]	@ (8014320 <etharp_find_entry+0x2dc>)
 80140be:	4899      	ldr	r0, [pc, #612]	@ (8014324 <etharp_find_entry+0x2e0>)
 80140c0:	f002 ffb0 	bl	8017024 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d020      	beq.n	801410c <etharp_find_entry+0xc8>
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	6819      	ldr	r1, [r3, #0]
 80140ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140d2:	4891      	ldr	r0, [pc, #580]	@ (8014318 <etharp_find_entry+0x2d4>)
 80140d4:	4613      	mov	r3, r2
 80140d6:	005b      	lsls	r3, r3, #1
 80140d8:	4413      	add	r3, r2
 80140da:	00db      	lsls	r3, r3, #3
 80140dc:	4403      	add	r3, r0
 80140de:	3304      	adds	r3, #4
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	4299      	cmp	r1, r3
 80140e4:	d112      	bne.n	801410c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d00c      	beq.n	8014106 <etharp_find_entry+0xc2>
 80140ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140f0:	4989      	ldr	r1, [pc, #548]	@ (8014318 <etharp_find_entry+0x2d4>)
 80140f2:	4613      	mov	r3, r2
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	4413      	add	r3, r2
 80140f8:	00db      	lsls	r3, r3, #3
 80140fa:	440b      	add	r3, r1
 80140fc:	3308      	adds	r3, #8
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	429a      	cmp	r2, r3
 8014104:	d102      	bne.n	801410c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801410a:	e100      	b.n	801430e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801410c:	7dfb      	ldrb	r3, [r7, #23]
 801410e:	2b01      	cmp	r3, #1
 8014110:	d140      	bne.n	8014194 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014116:	4980      	ldr	r1, [pc, #512]	@ (8014318 <etharp_find_entry+0x2d4>)
 8014118:	4613      	mov	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	440b      	add	r3, r1
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d01a      	beq.n	801415e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801412c:	497a      	ldr	r1, [pc, #488]	@ (8014318 <etharp_find_entry+0x2d4>)
 801412e:	4613      	mov	r3, r2
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	4413      	add	r3, r2
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	440b      	add	r3, r1
 8014138:	3312      	adds	r3, #18
 801413a:	881b      	ldrh	r3, [r3, #0]
 801413c:	8bba      	ldrh	r2, [r7, #28]
 801413e:	429a      	cmp	r2, r3
 8014140:	d845      	bhi.n	80141ce <etharp_find_entry+0x18a>
            old_queue = i;
 8014142:	8c3b      	ldrh	r3, [r7, #32]
 8014144:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801414a:	4973      	ldr	r1, [pc, #460]	@ (8014318 <etharp_find_entry+0x2d4>)
 801414c:	4613      	mov	r3, r2
 801414e:	005b      	lsls	r3, r3, #1
 8014150:	4413      	add	r3, r2
 8014152:	00db      	lsls	r3, r3, #3
 8014154:	440b      	add	r3, r1
 8014156:	3312      	adds	r3, #18
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	83bb      	strh	r3, [r7, #28]
 801415c:	e037      	b.n	80141ce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801415e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014162:	496d      	ldr	r1, [pc, #436]	@ (8014318 <etharp_find_entry+0x2d4>)
 8014164:	4613      	mov	r3, r2
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	4413      	add	r3, r2
 801416a:	00db      	lsls	r3, r3, #3
 801416c:	440b      	add	r3, r1
 801416e:	3312      	adds	r3, #18
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	8b7a      	ldrh	r2, [r7, #26]
 8014174:	429a      	cmp	r2, r3
 8014176:	d82a      	bhi.n	80141ce <etharp_find_entry+0x18a>
            old_pending = i;
 8014178:	8c3b      	ldrh	r3, [r7, #32]
 801417a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801417c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014180:	4965      	ldr	r1, [pc, #404]	@ (8014318 <etharp_find_entry+0x2d4>)
 8014182:	4613      	mov	r3, r2
 8014184:	005b      	lsls	r3, r3, #1
 8014186:	4413      	add	r3, r2
 8014188:	00db      	lsls	r3, r3, #3
 801418a:	440b      	add	r3, r1
 801418c:	3312      	adds	r3, #18
 801418e:	881b      	ldrh	r3, [r3, #0]
 8014190:	837b      	strh	r3, [r7, #26]
 8014192:	e01c      	b.n	80141ce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014194:	7dfb      	ldrb	r3, [r7, #23]
 8014196:	2b01      	cmp	r3, #1
 8014198:	d919      	bls.n	80141ce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801419a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801419e:	495e      	ldr	r1, [pc, #376]	@ (8014318 <etharp_find_entry+0x2d4>)
 80141a0:	4613      	mov	r3, r2
 80141a2:	005b      	lsls	r3, r3, #1
 80141a4:	4413      	add	r3, r2
 80141a6:	00db      	lsls	r3, r3, #3
 80141a8:	440b      	add	r3, r1
 80141aa:	3312      	adds	r3, #18
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	8b3a      	ldrh	r2, [r7, #24]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d80c      	bhi.n	80141ce <etharp_find_entry+0x18a>
            old_stable = i;
 80141b4:	8c3b      	ldrh	r3, [r7, #32]
 80141b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80141b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141bc:	4956      	ldr	r1, [pc, #344]	@ (8014318 <etharp_find_entry+0x2d4>)
 80141be:	4613      	mov	r3, r2
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	4413      	add	r3, r2
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	440b      	add	r3, r1
 80141c8:	3312      	adds	r3, #18
 80141ca:	881b      	ldrh	r3, [r3, #0]
 80141cc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141ce:	8c3b      	ldrh	r3, [r7, #32]
 80141d0:	3301      	adds	r3, #1
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	843b      	strh	r3, [r7, #32]
 80141d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141da:	2b09      	cmp	r3, #9
 80141dc:	f77f af4c 	ble.w	8014078 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80141e0:	7afb      	ldrb	r3, [r7, #11]
 80141e2:	f003 0302 	and.w	r3, r3, #2
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d108      	bne.n	80141fc <etharp_find_entry+0x1b8>
 80141ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80141ee:	2b0a      	cmp	r3, #10
 80141f0:	d107      	bne.n	8014202 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80141f2:	7afb      	ldrb	r3, [r7, #11]
 80141f4:	f003 0301 	and.w	r3, r3, #1
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d102      	bne.n	8014202 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80141fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014200:	e085      	b.n	801430e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014202:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014206:	2b09      	cmp	r3, #9
 8014208:	dc02      	bgt.n	8014210 <etharp_find_entry+0x1cc>
    i = empty;
 801420a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801420c:	843b      	strh	r3, [r7, #32]
 801420e:	e039      	b.n	8014284 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014210:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014214:	2b09      	cmp	r3, #9
 8014216:	dc14      	bgt.n	8014242 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014218:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801421a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801421c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014220:	493d      	ldr	r1, [pc, #244]	@ (8014318 <etharp_find_entry+0x2d4>)
 8014222:	4613      	mov	r3, r2
 8014224:	005b      	lsls	r3, r3, #1
 8014226:	4413      	add	r3, r2
 8014228:	00db      	lsls	r3, r3, #3
 801422a:	440b      	add	r3, r1
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d018      	beq.n	8014264 <etharp_find_entry+0x220>
 8014232:	4b3a      	ldr	r3, [pc, #232]	@ (801431c <etharp_find_entry+0x2d8>)
 8014234:	f240 126d 	movw	r2, #365	@ 0x16d
 8014238:	493b      	ldr	r1, [pc, #236]	@ (8014328 <etharp_find_entry+0x2e4>)
 801423a:	483a      	ldr	r0, [pc, #232]	@ (8014324 <etharp_find_entry+0x2e0>)
 801423c:	f002 fef2 	bl	8017024 <iprintf>
 8014240:	e010      	b.n	8014264 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014242:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014246:	2b09      	cmp	r3, #9
 8014248:	dc02      	bgt.n	8014250 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801424a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801424c:	843b      	strh	r3, [r7, #32]
 801424e:	e009      	b.n	8014264 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014250:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014254:	2b09      	cmp	r3, #9
 8014256:	dc02      	bgt.n	801425e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014258:	8bfb      	ldrh	r3, [r7, #30]
 801425a:	843b      	strh	r3, [r7, #32]
 801425c:	e002      	b.n	8014264 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801425e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014262:	e054      	b.n	801430e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014264:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014268:	2b09      	cmp	r3, #9
 801426a:	dd06      	ble.n	801427a <etharp_find_entry+0x236>
 801426c:	4b2b      	ldr	r3, [pc, #172]	@ (801431c <etharp_find_entry+0x2d8>)
 801426e:	f240 127f 	movw	r2, #383	@ 0x17f
 8014272:	492e      	ldr	r1, [pc, #184]	@ (801432c <etharp_find_entry+0x2e8>)
 8014274:	482b      	ldr	r0, [pc, #172]	@ (8014324 <etharp_find_entry+0x2e0>)
 8014276:	f002 fed5 	bl	8017024 <iprintf>
    etharp_free_entry(i);
 801427a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801427e:	4618      	mov	r0, r3
 8014280:	f7ff fe06 	bl	8013e90 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014284:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014288:	2b09      	cmp	r3, #9
 801428a:	dd06      	ble.n	801429a <etharp_find_entry+0x256>
 801428c:	4b23      	ldr	r3, [pc, #140]	@ (801431c <etharp_find_entry+0x2d8>)
 801428e:	f240 1283 	movw	r2, #387	@ 0x183
 8014292:	4926      	ldr	r1, [pc, #152]	@ (801432c <etharp_find_entry+0x2e8>)
 8014294:	4823      	ldr	r0, [pc, #140]	@ (8014324 <etharp_find_entry+0x2e0>)
 8014296:	f002 fec5 	bl	8017024 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801429a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801429e:	491e      	ldr	r1, [pc, #120]	@ (8014318 <etharp_find_entry+0x2d4>)
 80142a0:	4613      	mov	r3, r2
 80142a2:	005b      	lsls	r3, r3, #1
 80142a4:	4413      	add	r3, r2
 80142a6:	00db      	lsls	r3, r3, #3
 80142a8:	440b      	add	r3, r1
 80142aa:	3314      	adds	r3, #20
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d006      	beq.n	80142c0 <etharp_find_entry+0x27c>
 80142b2:	4b1a      	ldr	r3, [pc, #104]	@ (801431c <etharp_find_entry+0x2d8>)
 80142b4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80142b8:	491d      	ldr	r1, [pc, #116]	@ (8014330 <etharp_find_entry+0x2ec>)
 80142ba:	481a      	ldr	r0, [pc, #104]	@ (8014324 <etharp_find_entry+0x2e0>)
 80142bc:	f002 feb2 	bl	8017024 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d00b      	beq.n	80142de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80142c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	6819      	ldr	r1, [r3, #0]
 80142ce:	4812      	ldr	r0, [pc, #72]	@ (8014318 <etharp_find_entry+0x2d4>)
 80142d0:	4613      	mov	r3, r2
 80142d2:	005b      	lsls	r3, r3, #1
 80142d4:	4413      	add	r3, r2
 80142d6:	00db      	lsls	r3, r3, #3
 80142d8:	4403      	add	r3, r0
 80142da:	3304      	adds	r3, #4
 80142dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80142de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142e2:	490d      	ldr	r1, [pc, #52]	@ (8014318 <etharp_find_entry+0x2d4>)
 80142e4:	4613      	mov	r3, r2
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	4413      	add	r3, r2
 80142ea:	00db      	lsls	r3, r3, #3
 80142ec:	440b      	add	r3, r1
 80142ee:	3312      	adds	r3, #18
 80142f0:	2200      	movs	r2, #0
 80142f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80142f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142f8:	4907      	ldr	r1, [pc, #28]	@ (8014318 <etharp_find_entry+0x2d4>)
 80142fa:	4613      	mov	r3, r2
 80142fc:	005b      	lsls	r3, r3, #1
 80142fe:	4413      	add	r3, r2
 8014300:	00db      	lsls	r3, r3, #3
 8014302:	440b      	add	r3, r1
 8014304:	3308      	adds	r3, #8
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801430a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801430e:	4618      	mov	r0, r3
 8014310:	3728      	adds	r7, #40	@ 0x28
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	200084d8 	.word	0x200084d8
 801431c:	0801a16c 	.word	0x0801a16c
 8014320:	0801a1a4 	.word	0x0801a1a4
 8014324:	0801a1e4 	.word	0x0801a1e4
 8014328:	0801a20c 	.word	0x0801a20c
 801432c:	0801a224 	.word	0x0801a224
 8014330:	0801a238 	.word	0x0801a238

08014334 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b088      	sub	sp, #32
 8014338:	af02      	add	r7, sp, #8
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	607a      	str	r2, [r7, #4]
 8014340:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014348:	2b06      	cmp	r3, #6
 801434a:	d006      	beq.n	801435a <etharp_update_arp_entry+0x26>
 801434c:	4b48      	ldr	r3, [pc, #288]	@ (8014470 <etharp_update_arp_entry+0x13c>)
 801434e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014352:	4948      	ldr	r1, [pc, #288]	@ (8014474 <etharp_update_arp_entry+0x140>)
 8014354:	4848      	ldr	r0, [pc, #288]	@ (8014478 <etharp_update_arp_entry+0x144>)
 8014356:	f002 fe65 	bl	8017024 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d012      	beq.n	8014386 <etharp_update_arp_entry+0x52>
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d00e      	beq.n	8014386 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	68f9      	ldr	r1, [r7, #12]
 801436e:	4618      	mov	r0, r3
 8014370:	f001 f8fe 	bl	8015570 <ip4_addr_isbroadcast_u32>
 8014374:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014376:	2b00      	cmp	r3, #0
 8014378:	d105      	bne.n	8014386 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014382:	2be0      	cmp	r3, #224	@ 0xe0
 8014384:	d102      	bne.n	801438c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014386:	f06f 030f 	mvn.w	r3, #15
 801438a:	e06c      	b.n	8014466 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801438c:	78fb      	ldrb	r3, [r7, #3]
 801438e:	68fa      	ldr	r2, [r7, #12]
 8014390:	4619      	mov	r1, r3
 8014392:	68b8      	ldr	r0, [r7, #8]
 8014394:	f7ff fe56 	bl	8014044 <etharp_find_entry>
 8014398:	4603      	mov	r3, r0
 801439a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801439c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	da02      	bge.n	80143aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80143a4:	8afb      	ldrh	r3, [r7, #22]
 80143a6:	b25b      	sxtb	r3, r3
 80143a8:	e05d      	b.n	8014466 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80143aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ae:	4933      	ldr	r1, [pc, #204]	@ (801447c <etharp_update_arp_entry+0x148>)
 80143b0:	4613      	mov	r3, r2
 80143b2:	005b      	lsls	r3, r3, #1
 80143b4:	4413      	add	r3, r2
 80143b6:	00db      	lsls	r3, r3, #3
 80143b8:	440b      	add	r3, r1
 80143ba:	3314      	adds	r3, #20
 80143bc:	2202      	movs	r2, #2
 80143be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80143c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143c4:	492d      	ldr	r1, [pc, #180]	@ (801447c <etharp_update_arp_entry+0x148>)
 80143c6:	4613      	mov	r3, r2
 80143c8:	005b      	lsls	r3, r3, #1
 80143ca:	4413      	add	r3, r2
 80143cc:	00db      	lsls	r3, r3, #3
 80143ce:	440b      	add	r3, r1
 80143d0:	3308      	adds	r3, #8
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80143d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143da:	4613      	mov	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	00db      	lsls	r3, r3, #3
 80143e2:	3308      	adds	r3, #8
 80143e4:	4a25      	ldr	r2, [pc, #148]	@ (801447c <etharp_update_arp_entry+0x148>)
 80143e6:	4413      	add	r3, r2
 80143e8:	3304      	adds	r3, #4
 80143ea:	2206      	movs	r2, #6
 80143ec:	6879      	ldr	r1, [r7, #4]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f002 fef3 	bl	80171da <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80143f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143f8:	4920      	ldr	r1, [pc, #128]	@ (801447c <etharp_update_arp_entry+0x148>)
 80143fa:	4613      	mov	r3, r2
 80143fc:	005b      	lsls	r3, r3, #1
 80143fe:	4413      	add	r3, r2
 8014400:	00db      	lsls	r3, r3, #3
 8014402:	440b      	add	r3, r1
 8014404:	3312      	adds	r3, #18
 8014406:	2200      	movs	r2, #0
 8014408:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801440a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801440e:	491b      	ldr	r1, [pc, #108]	@ (801447c <etharp_update_arp_entry+0x148>)
 8014410:	4613      	mov	r3, r2
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	4413      	add	r3, r2
 8014416:	00db      	lsls	r3, r3, #3
 8014418:	440b      	add	r3, r1
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d021      	beq.n	8014464 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014420:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014424:	4915      	ldr	r1, [pc, #84]	@ (801447c <etharp_update_arp_entry+0x148>)
 8014426:	4613      	mov	r3, r2
 8014428:	005b      	lsls	r3, r3, #1
 801442a:	4413      	add	r3, r2
 801442c:	00db      	lsls	r3, r3, #3
 801442e:	440b      	add	r3, r1
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014434:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014438:	4910      	ldr	r1, [pc, #64]	@ (801447c <etharp_update_arp_entry+0x148>)
 801443a:	4613      	mov	r3, r2
 801443c:	005b      	lsls	r3, r3, #1
 801443e:	4413      	add	r3, r2
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	440b      	add	r3, r1
 8014444:	2200      	movs	r2, #0
 8014446:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801444e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014452:	9300      	str	r3, [sp, #0]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6939      	ldr	r1, [r7, #16]
 8014458:	68f8      	ldr	r0, [r7, #12]
 801445a:	f001 ff97 	bl	801638c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801445e:	6938      	ldr	r0, [r7, #16]
 8014460:	f7f9 fb2c 	bl	800dabc <pbuf_free>
  }
  return ERR_OK;
 8014464:	2300      	movs	r3, #0
}
 8014466:	4618      	mov	r0, r3
 8014468:	3718      	adds	r7, #24
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	0801a16c 	.word	0x0801a16c
 8014474:	0801a264 	.word	0x0801a264
 8014478:	0801a1e4 	.word	0x0801a1e4
 801447c:	200084d8 	.word	0x200084d8

08014480 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b084      	sub	sp, #16
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014488:	2300      	movs	r3, #0
 801448a:	60fb      	str	r3, [r7, #12]
 801448c:	e01e      	b.n	80144cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801448e:	4913      	ldr	r1, [pc, #76]	@ (80144dc <etharp_cleanup_netif+0x5c>)
 8014490:	68fa      	ldr	r2, [r7, #12]
 8014492:	4613      	mov	r3, r2
 8014494:	005b      	lsls	r3, r3, #1
 8014496:	4413      	add	r3, r2
 8014498:	00db      	lsls	r3, r3, #3
 801449a:	440b      	add	r3, r1
 801449c:	3314      	adds	r3, #20
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80144a2:	7afb      	ldrb	r3, [r7, #11]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d00e      	beq.n	80144c6 <etharp_cleanup_netif+0x46>
 80144a8:	490c      	ldr	r1, [pc, #48]	@ (80144dc <etharp_cleanup_netif+0x5c>)
 80144aa:	68fa      	ldr	r2, [r7, #12]
 80144ac:	4613      	mov	r3, r2
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	4413      	add	r3, r2
 80144b2:	00db      	lsls	r3, r3, #3
 80144b4:	440b      	add	r3, r1
 80144b6:	3308      	adds	r3, #8
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d102      	bne.n	80144c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80144c0:	68f8      	ldr	r0, [r7, #12]
 80144c2:	f7ff fce5 	bl	8013e90 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	3301      	adds	r3, #1
 80144ca:	60fb      	str	r3, [r7, #12]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	2b09      	cmp	r3, #9
 80144d0:	dddd      	ble.n	801448e <etharp_cleanup_netif+0xe>
    }
  }
}
 80144d2:	bf00      	nop
 80144d4:	bf00      	nop
 80144d6:	3710      	adds	r7, #16
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}
 80144dc:	200084d8 	.word	0x200084d8

080144e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80144e0:	b5b0      	push	{r4, r5, r7, lr}
 80144e2:	b08a      	sub	sp, #40	@ 0x28
 80144e4:	af04      	add	r7, sp, #16
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d107      	bne.n	8014500 <etharp_input+0x20>
 80144f0:	4b3d      	ldr	r3, [pc, #244]	@ (80145e8 <etharp_input+0x108>)
 80144f2:	f240 228a 	movw	r2, #650	@ 0x28a
 80144f6:	493d      	ldr	r1, [pc, #244]	@ (80145ec <etharp_input+0x10c>)
 80144f8:	483d      	ldr	r0, [pc, #244]	@ (80145f0 <etharp_input+0x110>)
 80144fa:	f002 fd93 	bl	8017024 <iprintf>
 80144fe:	e06f      	b.n	80145e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	b29b      	uxth	r3, r3
 801450c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014510:	d10c      	bne.n	801452c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014516:	2b06      	cmp	r3, #6
 8014518:	d108      	bne.n	801452c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801451e:	2b04      	cmp	r3, #4
 8014520:	d104      	bne.n	801452c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	885b      	ldrh	r3, [r3, #2]
 8014526:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014528:	2b08      	cmp	r3, #8
 801452a:	d003      	beq.n	8014534 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f7f9 fac5 	bl	800dabc <pbuf_free>
    return;
 8014532:	e055      	b.n	80145e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	330e      	adds	r3, #14
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	3318      	adds	r3, #24
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	3304      	adds	r3, #4
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d102      	bne.n	8014554 <etharp_input+0x74>
    for_us = 0;
 801454e:	2300      	movs	r3, #0
 8014550:	75fb      	strb	r3, [r7, #23]
 8014552:	e009      	b.n	8014568 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014554:	68ba      	ldr	r2, [r7, #8]
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	3304      	adds	r3, #4
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	429a      	cmp	r2, r3
 801455e:	bf0c      	ite	eq
 8014560:	2301      	moveq	r3, #1
 8014562:	2300      	movne	r3, #0
 8014564:	b2db      	uxtb	r3, r3
 8014566:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	f103 0208 	add.w	r2, r3, #8
 801456e:	7dfb      	ldrb	r3, [r7, #23]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d001      	beq.n	8014578 <etharp_input+0x98>
 8014574:	2301      	movs	r3, #1
 8014576:	e000      	b.n	801457a <etharp_input+0x9a>
 8014578:	2302      	movs	r3, #2
 801457a:	f107 010c 	add.w	r1, r7, #12
 801457e:	6838      	ldr	r0, [r7, #0]
 8014580:	f7ff fed8 	bl	8014334 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	88db      	ldrh	r3, [r3, #6]
 8014588:	b29b      	uxth	r3, r3
 801458a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801458e:	d003      	beq.n	8014598 <etharp_input+0xb8>
 8014590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014594:	d01e      	beq.n	80145d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014596:	e020      	b.n	80145da <etharp_input+0xfa>
      if (for_us) {
 8014598:	7dfb      	ldrb	r3, [r7, #23]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d01c      	beq.n	80145d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80145b4:	693a      	ldr	r2, [r7, #16]
 80145b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80145b8:	2102      	movs	r1, #2
 80145ba:	9103      	str	r1, [sp, #12]
 80145bc:	f107 010c 	add.w	r1, r7, #12
 80145c0:	9102      	str	r1, [sp, #8]
 80145c2:	9201      	str	r2, [sp, #4]
 80145c4:	9300      	str	r3, [sp, #0]
 80145c6:	462b      	mov	r3, r5
 80145c8:	4622      	mov	r2, r4
 80145ca:	4601      	mov	r1, r0
 80145cc:	6838      	ldr	r0, [r7, #0]
 80145ce:	f000 faeb 	bl	8014ba8 <etharp_raw>
      break;
 80145d2:	e001      	b.n	80145d8 <etharp_input+0xf8>
      break;
 80145d4:	bf00      	nop
 80145d6:	e000      	b.n	80145da <etharp_input+0xfa>
      break;
 80145d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f7f9 fa6e 	bl	800dabc <pbuf_free>
}
 80145e0:	3718      	adds	r7, #24
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bdb0      	pop	{r4, r5, r7, pc}
 80145e6:	bf00      	nop
 80145e8:	0801a16c 	.word	0x0801a16c
 80145ec:	0801a2bc 	.word	0x0801a2bc
 80145f0:	0801a1e4 	.word	0x0801a1e4

080145f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b086      	sub	sp, #24
 80145f8:	af02      	add	r7, sp, #8
 80145fa:	60f8      	str	r0, [r7, #12]
 80145fc:	60b9      	str	r1, [r7, #8]
 80145fe:	4613      	mov	r3, r2
 8014600:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014602:	79fa      	ldrb	r2, [r7, #7]
 8014604:	4944      	ldr	r1, [pc, #272]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 8014606:	4613      	mov	r3, r2
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	4413      	add	r3, r2
 801460c:	00db      	lsls	r3, r3, #3
 801460e:	440b      	add	r3, r1
 8014610:	3314      	adds	r3, #20
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	2b01      	cmp	r3, #1
 8014616:	d806      	bhi.n	8014626 <etharp_output_to_arp_index+0x32>
 8014618:	4b40      	ldr	r3, [pc, #256]	@ (801471c <etharp_output_to_arp_index+0x128>)
 801461a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801461e:	4940      	ldr	r1, [pc, #256]	@ (8014720 <etharp_output_to_arp_index+0x12c>)
 8014620:	4840      	ldr	r0, [pc, #256]	@ (8014724 <etharp_output_to_arp_index+0x130>)
 8014622:	f002 fcff 	bl	8017024 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014626:	79fa      	ldrb	r2, [r7, #7]
 8014628:	493b      	ldr	r1, [pc, #236]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 801462a:	4613      	mov	r3, r2
 801462c:	005b      	lsls	r3, r3, #1
 801462e:	4413      	add	r3, r2
 8014630:	00db      	lsls	r3, r3, #3
 8014632:	440b      	add	r3, r1
 8014634:	3314      	adds	r3, #20
 8014636:	781b      	ldrb	r3, [r3, #0]
 8014638:	2b02      	cmp	r3, #2
 801463a:	d153      	bne.n	80146e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801463c:	79fa      	ldrb	r2, [r7, #7]
 801463e:	4936      	ldr	r1, [pc, #216]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 8014640:	4613      	mov	r3, r2
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	4413      	add	r3, r2
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	440b      	add	r3, r1
 801464a:	3312      	adds	r3, #18
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014652:	d919      	bls.n	8014688 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014654:	79fa      	ldrb	r2, [r7, #7]
 8014656:	4613      	mov	r3, r2
 8014658:	005b      	lsls	r3, r3, #1
 801465a:	4413      	add	r3, r2
 801465c:	00db      	lsls	r3, r3, #3
 801465e:	4a2e      	ldr	r2, [pc, #184]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 8014660:	4413      	add	r3, r2
 8014662:	3304      	adds	r3, #4
 8014664:	4619      	mov	r1, r3
 8014666:	68f8      	ldr	r0, [r7, #12]
 8014668:	f000 fb4c 	bl	8014d04 <etharp_request>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d138      	bne.n	80146e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014672:	79fa      	ldrb	r2, [r7, #7]
 8014674:	4928      	ldr	r1, [pc, #160]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 8014676:	4613      	mov	r3, r2
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	4413      	add	r3, r2
 801467c:	00db      	lsls	r3, r3, #3
 801467e:	440b      	add	r3, r1
 8014680:	3314      	adds	r3, #20
 8014682:	2203      	movs	r2, #3
 8014684:	701a      	strb	r2, [r3, #0]
 8014686:	e02d      	b.n	80146e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014688:	79fa      	ldrb	r2, [r7, #7]
 801468a:	4923      	ldr	r1, [pc, #140]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 801468c:	4613      	mov	r3, r2
 801468e:	005b      	lsls	r3, r3, #1
 8014690:	4413      	add	r3, r2
 8014692:	00db      	lsls	r3, r3, #3
 8014694:	440b      	add	r3, r1
 8014696:	3312      	adds	r3, #18
 8014698:	881b      	ldrh	r3, [r3, #0]
 801469a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801469e:	d321      	bcc.n	80146e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80146a0:	79fa      	ldrb	r2, [r7, #7]
 80146a2:	4613      	mov	r3, r2
 80146a4:	005b      	lsls	r3, r3, #1
 80146a6:	4413      	add	r3, r2
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	4a1b      	ldr	r2, [pc, #108]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 80146ac:	4413      	add	r3, r2
 80146ae:	1d19      	adds	r1, r3, #4
 80146b0:	79fa      	ldrb	r2, [r7, #7]
 80146b2:	4613      	mov	r3, r2
 80146b4:	005b      	lsls	r3, r3, #1
 80146b6:	4413      	add	r3, r2
 80146b8:	00db      	lsls	r3, r3, #3
 80146ba:	3308      	adds	r3, #8
 80146bc:	4a16      	ldr	r2, [pc, #88]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 80146be:	4413      	add	r3, r2
 80146c0:	3304      	adds	r3, #4
 80146c2:	461a      	mov	r2, r3
 80146c4:	68f8      	ldr	r0, [r7, #12]
 80146c6:	f000 fafb 	bl	8014cc0 <etharp_request_dst>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d109      	bne.n	80146e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80146d0:	79fa      	ldrb	r2, [r7, #7]
 80146d2:	4911      	ldr	r1, [pc, #68]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 80146d4:	4613      	mov	r3, r2
 80146d6:	005b      	lsls	r3, r3, #1
 80146d8:	4413      	add	r3, r2
 80146da:	00db      	lsls	r3, r3, #3
 80146dc:	440b      	add	r3, r1
 80146de:	3314      	adds	r3, #20
 80146e0:	2203      	movs	r2, #3
 80146e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80146ea:	79fa      	ldrb	r2, [r7, #7]
 80146ec:	4613      	mov	r3, r2
 80146ee:	005b      	lsls	r3, r3, #1
 80146f0:	4413      	add	r3, r2
 80146f2:	00db      	lsls	r3, r3, #3
 80146f4:	3308      	adds	r3, #8
 80146f6:	4a08      	ldr	r2, [pc, #32]	@ (8014718 <etharp_output_to_arp_index+0x124>)
 80146f8:	4413      	add	r3, r2
 80146fa:	3304      	adds	r3, #4
 80146fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014700:	9200      	str	r2, [sp, #0]
 8014702:	460a      	mov	r2, r1
 8014704:	68b9      	ldr	r1, [r7, #8]
 8014706:	68f8      	ldr	r0, [r7, #12]
 8014708:	f001 fe40 	bl	801638c <ethernet_output>
 801470c:	4603      	mov	r3, r0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	200084d8 	.word	0x200084d8
 801471c:	0801a16c 	.word	0x0801a16c
 8014720:	0801a2dc 	.word	0x0801a2dc
 8014724:	0801a1e4 	.word	0x0801a1e4

08014728 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b08a      	sub	sp, #40	@ 0x28
 801472c:	af02      	add	r7, sp, #8
 801472e:	60f8      	str	r0, [r7, #12]
 8014730:	60b9      	str	r1, [r7, #8]
 8014732:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d106      	bne.n	801474c <etharp_output+0x24>
 801473e:	4b73      	ldr	r3, [pc, #460]	@ (801490c <etharp_output+0x1e4>)
 8014740:	f240 321e 	movw	r2, #798	@ 0x31e
 8014744:	4972      	ldr	r1, [pc, #456]	@ (8014910 <etharp_output+0x1e8>)
 8014746:	4873      	ldr	r0, [pc, #460]	@ (8014914 <etharp_output+0x1ec>)
 8014748:	f002 fc6c 	bl	8017024 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d106      	bne.n	8014760 <etharp_output+0x38>
 8014752:	4b6e      	ldr	r3, [pc, #440]	@ (801490c <etharp_output+0x1e4>)
 8014754:	f240 321f 	movw	r2, #799	@ 0x31f
 8014758:	496f      	ldr	r1, [pc, #444]	@ (8014918 <etharp_output+0x1f0>)
 801475a:	486e      	ldr	r0, [pc, #440]	@ (8014914 <etharp_output+0x1ec>)
 801475c:	f002 fc62 	bl	8017024 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d106      	bne.n	8014774 <etharp_output+0x4c>
 8014766:	4b69      	ldr	r3, [pc, #420]	@ (801490c <etharp_output+0x1e4>)
 8014768:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801476c:	496b      	ldr	r1, [pc, #428]	@ (801491c <etharp_output+0x1f4>)
 801476e:	4869      	ldr	r0, [pc, #420]	@ (8014914 <etharp_output+0x1ec>)
 8014770:	f002 fc58 	bl	8017024 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	68f9      	ldr	r1, [r7, #12]
 801477a:	4618      	mov	r0, r3
 801477c:	f000 fef8 	bl	8015570 <ip4_addr_isbroadcast_u32>
 8014780:	4603      	mov	r3, r0
 8014782:	2b00      	cmp	r3, #0
 8014784:	d002      	beq.n	801478c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014786:	4b66      	ldr	r3, [pc, #408]	@ (8014920 <etharp_output+0x1f8>)
 8014788:	61fb      	str	r3, [r7, #28]
 801478a:	e0af      	b.n	80148ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014794:	2be0      	cmp	r3, #224	@ 0xe0
 8014796:	d118      	bne.n	80147ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014798:	2301      	movs	r3, #1
 801479a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801479c:	2300      	movs	r3, #0
 801479e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80147a0:	235e      	movs	r3, #94	@ 0x5e
 80147a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	3301      	adds	r3, #1
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	3302      	adds	r3, #2
 80147b6:	781b      	ldrb	r3, [r3, #0]
 80147b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	3303      	adds	r3, #3
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80147c2:	f107 0310 	add.w	r3, r7, #16
 80147c6:	61fb      	str	r3, [r7, #28]
 80147c8:	e090      	b.n	80148ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	3304      	adds	r3, #4
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	405a      	eors	r2, r3
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	3308      	adds	r3, #8
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	4013      	ands	r3, r2
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d012      	beq.n	8014808 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147e8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80147ec:	4293      	cmp	r3, r2
 80147ee:	d00b      	beq.n	8014808 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	330c      	adds	r3, #12
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d003      	beq.n	8014802 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	330c      	adds	r3, #12
 80147fe:	61bb      	str	r3, [r7, #24]
 8014800:	e002      	b.n	8014808 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014802:	f06f 0303 	mvn.w	r3, #3
 8014806:	e07d      	b.n	8014904 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014808:	4b46      	ldr	r3, [pc, #280]	@ (8014924 <etharp_output+0x1fc>)
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	4619      	mov	r1, r3
 801480e:	4a46      	ldr	r2, [pc, #280]	@ (8014928 <etharp_output+0x200>)
 8014810:	460b      	mov	r3, r1
 8014812:	005b      	lsls	r3, r3, #1
 8014814:	440b      	add	r3, r1
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	4413      	add	r3, r2
 801481a:	3314      	adds	r3, #20
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	2b01      	cmp	r3, #1
 8014820:	d925      	bls.n	801486e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014822:	4b40      	ldr	r3, [pc, #256]	@ (8014924 <etharp_output+0x1fc>)
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	4619      	mov	r1, r3
 8014828:	4a3f      	ldr	r2, [pc, #252]	@ (8014928 <etharp_output+0x200>)
 801482a:	460b      	mov	r3, r1
 801482c:	005b      	lsls	r3, r3, #1
 801482e:	440b      	add	r3, r1
 8014830:	00db      	lsls	r3, r3, #3
 8014832:	4413      	add	r3, r2
 8014834:	3308      	adds	r3, #8
 8014836:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014838:	68fa      	ldr	r2, [r7, #12]
 801483a:	429a      	cmp	r2, r3
 801483c:	d117      	bne.n	801486e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801483e:	69bb      	ldr	r3, [r7, #24]
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	4b38      	ldr	r3, [pc, #224]	@ (8014924 <etharp_output+0x1fc>)
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	4618      	mov	r0, r3
 8014848:	4937      	ldr	r1, [pc, #220]	@ (8014928 <etharp_output+0x200>)
 801484a:	4603      	mov	r3, r0
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4403      	add	r3, r0
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	440b      	add	r3, r1
 8014854:	3304      	adds	r3, #4
 8014856:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014858:	429a      	cmp	r2, r3
 801485a:	d108      	bne.n	801486e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801485c:	4b31      	ldr	r3, [pc, #196]	@ (8014924 <etharp_output+0x1fc>)
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	461a      	mov	r2, r3
 8014862:	68b9      	ldr	r1, [r7, #8]
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f7ff fec5 	bl	80145f4 <etharp_output_to_arp_index>
 801486a:	4603      	mov	r3, r0
 801486c:	e04a      	b.n	8014904 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801486e:	2300      	movs	r3, #0
 8014870:	75fb      	strb	r3, [r7, #23]
 8014872:	e031      	b.n	80148d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014874:	7dfa      	ldrb	r2, [r7, #23]
 8014876:	492c      	ldr	r1, [pc, #176]	@ (8014928 <etharp_output+0x200>)
 8014878:	4613      	mov	r3, r2
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	4413      	add	r3, r2
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	440b      	add	r3, r1
 8014882:	3314      	adds	r3, #20
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	2b01      	cmp	r3, #1
 8014888:	d923      	bls.n	80148d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801488a:	7dfa      	ldrb	r2, [r7, #23]
 801488c:	4926      	ldr	r1, [pc, #152]	@ (8014928 <etharp_output+0x200>)
 801488e:	4613      	mov	r3, r2
 8014890:	005b      	lsls	r3, r3, #1
 8014892:	4413      	add	r3, r2
 8014894:	00db      	lsls	r3, r3, #3
 8014896:	440b      	add	r3, r1
 8014898:	3308      	adds	r3, #8
 801489a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801489c:	68fa      	ldr	r2, [r7, #12]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d117      	bne.n	80148d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80148a2:	69bb      	ldr	r3, [r7, #24]
 80148a4:	6819      	ldr	r1, [r3, #0]
 80148a6:	7dfa      	ldrb	r2, [r7, #23]
 80148a8:	481f      	ldr	r0, [pc, #124]	@ (8014928 <etharp_output+0x200>)
 80148aa:	4613      	mov	r3, r2
 80148ac:	005b      	lsls	r3, r3, #1
 80148ae:	4413      	add	r3, r2
 80148b0:	00db      	lsls	r3, r3, #3
 80148b2:	4403      	add	r3, r0
 80148b4:	3304      	adds	r3, #4
 80148b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80148b8:	4299      	cmp	r1, r3
 80148ba:	d10a      	bne.n	80148d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80148bc:	4a19      	ldr	r2, [pc, #100]	@ (8014924 <etharp_output+0x1fc>)
 80148be:	7dfb      	ldrb	r3, [r7, #23]
 80148c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80148c2:	7dfb      	ldrb	r3, [r7, #23]
 80148c4:	461a      	mov	r2, r3
 80148c6:	68b9      	ldr	r1, [r7, #8]
 80148c8:	68f8      	ldr	r0, [r7, #12]
 80148ca:	f7ff fe93 	bl	80145f4 <etharp_output_to_arp_index>
 80148ce:	4603      	mov	r3, r0
 80148d0:	e018      	b.n	8014904 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80148d2:	7dfb      	ldrb	r3, [r7, #23]
 80148d4:	3301      	adds	r3, #1
 80148d6:	75fb      	strb	r3, [r7, #23]
 80148d8:	7dfb      	ldrb	r3, [r7, #23]
 80148da:	2b09      	cmp	r3, #9
 80148dc:	d9ca      	bls.n	8014874 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	69b9      	ldr	r1, [r7, #24]
 80148e2:	68f8      	ldr	r0, [r7, #12]
 80148e4:	f000 f822 	bl	801492c <etharp_query>
 80148e8:	4603      	mov	r3, r0
 80148ea:	e00b      	b.n	8014904 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80148f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	68b9      	ldr	r1, [r7, #8]
 80148fc:	68f8      	ldr	r0, [r7, #12]
 80148fe:	f001 fd45 	bl	801638c <ethernet_output>
 8014902:	4603      	mov	r3, r0
}
 8014904:	4618      	mov	r0, r3
 8014906:	3720      	adds	r7, #32
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}
 801490c:	0801a16c 	.word	0x0801a16c
 8014910:	0801a2bc 	.word	0x0801a2bc
 8014914:	0801a1e4 	.word	0x0801a1e4
 8014918:	0801a30c 	.word	0x0801a30c
 801491c:	0801a2ac 	.word	0x0801a2ac
 8014920:	0801a94c 	.word	0x0801a94c
 8014924:	200085c8 	.word	0x200085c8
 8014928:	200084d8 	.word	0x200084d8

0801492c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b08c      	sub	sp, #48	@ 0x30
 8014930:	af02      	add	r7, sp, #8
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	3326      	adds	r3, #38	@ 0x26
 801493c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801493e:	23ff      	movs	r3, #255	@ 0xff
 8014940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014944:	2300      	movs	r3, #0
 8014946:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	68f9      	ldr	r1, [r7, #12]
 801494e:	4618      	mov	r0, r3
 8014950:	f000 fe0e 	bl	8015570 <ip4_addr_isbroadcast_u32>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10c      	bne.n	8014974 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014962:	2be0      	cmp	r3, #224	@ 0xe0
 8014964:	d006      	beq.n	8014974 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d003      	beq.n	8014974 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d102      	bne.n	801497a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014974:	f06f 030f 	mvn.w	r3, #15
 8014978:	e101      	b.n	8014b7e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801497a:	68fa      	ldr	r2, [r7, #12]
 801497c:	2101      	movs	r1, #1
 801497e:	68b8      	ldr	r0, [r7, #8]
 8014980:	f7ff fb60 	bl	8014044 <etharp_find_entry>
 8014984:	4603      	mov	r3, r0
 8014986:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801498c:	2b00      	cmp	r3, #0
 801498e:	da02      	bge.n	8014996 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014990:	8a7b      	ldrh	r3, [r7, #18]
 8014992:	b25b      	sxtb	r3, r3
 8014994:	e0f3      	b.n	8014b7e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014996:	8a7b      	ldrh	r3, [r7, #18]
 8014998:	2b7e      	cmp	r3, #126	@ 0x7e
 801499a:	d906      	bls.n	80149aa <etharp_query+0x7e>
 801499c:	4b7a      	ldr	r3, [pc, #488]	@ (8014b88 <etharp_query+0x25c>)
 801499e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80149a2:	497a      	ldr	r1, [pc, #488]	@ (8014b8c <etharp_query+0x260>)
 80149a4:	487a      	ldr	r0, [pc, #488]	@ (8014b90 <etharp_query+0x264>)
 80149a6:	f002 fb3d 	bl	8017024 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80149aa:	8a7b      	ldrh	r3, [r7, #18]
 80149ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80149ae:	7c7a      	ldrb	r2, [r7, #17]
 80149b0:	4978      	ldr	r1, [pc, #480]	@ (8014b94 <etharp_query+0x268>)
 80149b2:	4613      	mov	r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4413      	add	r3, r2
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	440b      	add	r3, r1
 80149bc:	3314      	adds	r3, #20
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d115      	bne.n	80149f0 <etharp_query+0xc4>
    is_new_entry = 1;
 80149c4:	2301      	movs	r3, #1
 80149c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80149c8:	7c7a      	ldrb	r2, [r7, #17]
 80149ca:	4972      	ldr	r1, [pc, #456]	@ (8014b94 <etharp_query+0x268>)
 80149cc:	4613      	mov	r3, r2
 80149ce:	005b      	lsls	r3, r3, #1
 80149d0:	4413      	add	r3, r2
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	440b      	add	r3, r1
 80149d6:	3314      	adds	r3, #20
 80149d8:	2201      	movs	r2, #1
 80149da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80149dc:	7c7a      	ldrb	r2, [r7, #17]
 80149de:	496d      	ldr	r1, [pc, #436]	@ (8014b94 <etharp_query+0x268>)
 80149e0:	4613      	mov	r3, r2
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	4413      	add	r3, r2
 80149e6:	00db      	lsls	r3, r3, #3
 80149e8:	440b      	add	r3, r1
 80149ea:	3308      	adds	r3, #8
 80149ec:	68fa      	ldr	r2, [r7, #12]
 80149ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80149f0:	7c7a      	ldrb	r2, [r7, #17]
 80149f2:	4968      	ldr	r1, [pc, #416]	@ (8014b94 <etharp_query+0x268>)
 80149f4:	4613      	mov	r3, r2
 80149f6:	005b      	lsls	r3, r3, #1
 80149f8:	4413      	add	r3, r2
 80149fa:	00db      	lsls	r3, r3, #3
 80149fc:	440b      	add	r3, r1
 80149fe:	3314      	adds	r3, #20
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	d011      	beq.n	8014a2a <etharp_query+0xfe>
 8014a06:	7c7a      	ldrb	r2, [r7, #17]
 8014a08:	4962      	ldr	r1, [pc, #392]	@ (8014b94 <etharp_query+0x268>)
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	4413      	add	r3, r2
 8014a10:	00db      	lsls	r3, r3, #3
 8014a12:	440b      	add	r3, r1
 8014a14:	3314      	adds	r3, #20
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	2b01      	cmp	r3, #1
 8014a1a:	d806      	bhi.n	8014a2a <etharp_query+0xfe>
 8014a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8014b88 <etharp_query+0x25c>)
 8014a1e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014a22:	495d      	ldr	r1, [pc, #372]	@ (8014b98 <etharp_query+0x26c>)
 8014a24:	485a      	ldr	r0, [pc, #360]	@ (8014b90 <etharp_query+0x264>)
 8014a26:	f002 fafd 	bl	8017024 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014a2a:	6a3b      	ldr	r3, [r7, #32]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d102      	bne.n	8014a36 <etharp_query+0x10a>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d10c      	bne.n	8014a50 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014a36:	68b9      	ldr	r1, [r7, #8]
 8014a38:	68f8      	ldr	r0, [r7, #12]
 8014a3a:	f000 f963 	bl	8014d04 <etharp_request>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d102      	bne.n	8014a50 <etharp_query+0x124>
      return result;
 8014a4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014a4e:	e096      	b.n	8014b7e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d106      	bne.n	8014a64 <etharp_query+0x138>
 8014a56:	4b4c      	ldr	r3, [pc, #304]	@ (8014b88 <etharp_query+0x25c>)
 8014a58:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014a5c:	494f      	ldr	r1, [pc, #316]	@ (8014b9c <etharp_query+0x270>)
 8014a5e:	484c      	ldr	r0, [pc, #304]	@ (8014b90 <etharp_query+0x264>)
 8014a60:	f002 fae0 	bl	8017024 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a64:	7c7a      	ldrb	r2, [r7, #17]
 8014a66:	494b      	ldr	r1, [pc, #300]	@ (8014b94 <etharp_query+0x268>)
 8014a68:	4613      	mov	r3, r2
 8014a6a:	005b      	lsls	r3, r3, #1
 8014a6c:	4413      	add	r3, r2
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	440b      	add	r3, r1
 8014a72:	3314      	adds	r3, #20
 8014a74:	781b      	ldrb	r3, [r3, #0]
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	d917      	bls.n	8014aaa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014a7a:	4a49      	ldr	r2, [pc, #292]	@ (8014ba0 <etharp_query+0x274>)
 8014a7c:	7c7b      	ldrb	r3, [r7, #17]
 8014a7e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014a80:	7c7a      	ldrb	r2, [r7, #17]
 8014a82:	4613      	mov	r3, r2
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	00db      	lsls	r3, r3, #3
 8014a8a:	3308      	adds	r3, #8
 8014a8c:	4a41      	ldr	r2, [pc, #260]	@ (8014b94 <etharp_query+0x268>)
 8014a8e:	4413      	add	r3, r2
 8014a90:	3304      	adds	r3, #4
 8014a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014a96:	9200      	str	r2, [sp, #0]
 8014a98:	697a      	ldr	r2, [r7, #20]
 8014a9a:	6879      	ldr	r1, [r7, #4]
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f001 fc75 	bl	801638c <ethernet_output>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014aa8:	e067      	b.n	8014b7a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014aaa:	7c7a      	ldrb	r2, [r7, #17]
 8014aac:	4939      	ldr	r1, [pc, #228]	@ (8014b94 <etharp_query+0x268>)
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	440b      	add	r3, r1
 8014ab8:	3314      	adds	r3, #20
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	2b01      	cmp	r3, #1
 8014abe:	d15c      	bne.n	8014b7a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ac8:	e01c      	b.n	8014b04 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	895a      	ldrh	r2, [r3, #10]
 8014ace:	69fb      	ldr	r3, [r7, #28]
 8014ad0:	891b      	ldrh	r3, [r3, #8]
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d10a      	bne.n	8014aec <etharp_query+0x1c0>
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d006      	beq.n	8014aec <etharp_query+0x1c0>
 8014ade:	4b2a      	ldr	r3, [pc, #168]	@ (8014b88 <etharp_query+0x25c>)
 8014ae0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014ae4:	492f      	ldr	r1, [pc, #188]	@ (8014ba4 <etharp_query+0x278>)
 8014ae6:	482a      	ldr	r0, [pc, #168]	@ (8014b90 <etharp_query+0x264>)
 8014ae8:	f002 fa9c 	bl	8017024 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	7b1b      	ldrb	r3, [r3, #12]
 8014af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <etharp_query+0x1d2>
        copy_needed = 1;
 8014af8:	2301      	movs	r3, #1
 8014afa:	61bb      	str	r3, [r7, #24]
        break;
 8014afc:	e005      	b.n	8014b0a <etharp_query+0x1de>
      }
      p = p->next;
 8014afe:	69fb      	ldr	r3, [r7, #28]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b04:	69fb      	ldr	r3, [r7, #28]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d1df      	bne.n	8014aca <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014b0a:	69bb      	ldr	r3, [r7, #24]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d007      	beq.n	8014b20 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014b16:	200e      	movs	r0, #14
 8014b18:	f7f9 fa3c 	bl	800df94 <pbuf_clone>
 8014b1c:	61f8      	str	r0, [r7, #28]
 8014b1e:	e004      	b.n	8014b2a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014b24:	69f8      	ldr	r0, [r7, #28]
 8014b26:	f7f9 f869 	bl	800dbfc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d021      	beq.n	8014b74 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014b30:	7c7a      	ldrb	r2, [r7, #17]
 8014b32:	4918      	ldr	r1, [pc, #96]	@ (8014b94 <etharp_query+0x268>)
 8014b34:	4613      	mov	r3, r2
 8014b36:	005b      	lsls	r3, r3, #1
 8014b38:	4413      	add	r3, r2
 8014b3a:	00db      	lsls	r3, r3, #3
 8014b3c:	440b      	add	r3, r1
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d00a      	beq.n	8014b5a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014b44:	7c7a      	ldrb	r2, [r7, #17]
 8014b46:	4913      	ldr	r1, [pc, #76]	@ (8014b94 <etharp_query+0x268>)
 8014b48:	4613      	mov	r3, r2
 8014b4a:	005b      	lsls	r3, r3, #1
 8014b4c:	4413      	add	r3, r2
 8014b4e:	00db      	lsls	r3, r3, #3
 8014b50:	440b      	add	r3, r1
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7f8 ffb1 	bl	800dabc <pbuf_free>
      }
      arp_table[i].q = p;
 8014b5a:	7c7a      	ldrb	r2, [r7, #17]
 8014b5c:	490d      	ldr	r1, [pc, #52]	@ (8014b94 <etharp_query+0x268>)
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	440b      	add	r3, r1
 8014b68:	69fa      	ldr	r2, [r7, #28]
 8014b6a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b72:	e002      	b.n	8014b7a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014b74:	23ff      	movs	r3, #255	@ 0xff
 8014b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014b7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3728      	adds	r7, #40	@ 0x28
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
 8014b86:	bf00      	nop
 8014b88:	0801a16c 	.word	0x0801a16c
 8014b8c:	0801a318 	.word	0x0801a318
 8014b90:	0801a1e4 	.word	0x0801a1e4
 8014b94:	200084d8 	.word	0x200084d8
 8014b98:	0801a328 	.word	0x0801a328
 8014b9c:	0801a30c 	.word	0x0801a30c
 8014ba0:	200085c8 	.word	0x200085c8
 8014ba4:	0801a350 	.word	0x0801a350

08014ba8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b08a      	sub	sp, #40	@ 0x28
 8014bac:	af02      	add	r7, sp, #8
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	607a      	str	r2, [r7, #4]
 8014bb4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d106      	bne.n	8014bce <etharp_raw+0x26>
 8014bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8014cac <etharp_raw+0x104>)
 8014bc2:	f240 4257 	movw	r2, #1111	@ 0x457
 8014bc6:	493a      	ldr	r1, [pc, #232]	@ (8014cb0 <etharp_raw+0x108>)
 8014bc8:	483a      	ldr	r0, [pc, #232]	@ (8014cb4 <etharp_raw+0x10c>)
 8014bca:	f002 fa2b 	bl	8017024 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014bce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014bd2:	211c      	movs	r1, #28
 8014bd4:	200e      	movs	r0, #14
 8014bd6:	f7f8 fc8d 	bl	800d4f4 <pbuf_alloc>
 8014bda:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d102      	bne.n	8014be8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014be6:	e05d      	b.n	8014ca4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014be8:	69bb      	ldr	r3, [r7, #24]
 8014bea:	895b      	ldrh	r3, [r3, #10]
 8014bec:	2b1b      	cmp	r3, #27
 8014bee:	d806      	bhi.n	8014bfe <etharp_raw+0x56>
 8014bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8014cac <etharp_raw+0x104>)
 8014bf2:	f240 4262 	movw	r2, #1122	@ 0x462
 8014bf6:	4930      	ldr	r1, [pc, #192]	@ (8014cb8 <etharp_raw+0x110>)
 8014bf8:	482e      	ldr	r0, [pc, #184]	@ (8014cb4 <etharp_raw+0x10c>)
 8014bfa:	f002 fa13 	bl	8017024 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014bfe:	69bb      	ldr	r3, [r7, #24]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014c04:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7f7 fbfe 	bl	800c408 <lwip_htons>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	461a      	mov	r2, r3
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014c1a:	2b06      	cmp	r3, #6
 8014c1c:	d006      	beq.n	8014c2c <etharp_raw+0x84>
 8014c1e:	4b23      	ldr	r3, [pc, #140]	@ (8014cac <etharp_raw+0x104>)
 8014c20:	f240 4269 	movw	r2, #1129	@ 0x469
 8014c24:	4925      	ldr	r1, [pc, #148]	@ (8014cbc <etharp_raw+0x114>)
 8014c26:	4823      	ldr	r0, [pc, #140]	@ (8014cb4 <etharp_raw+0x10c>)
 8014c28:	f002 f9fc 	bl	8017024 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	3308      	adds	r3, #8
 8014c30:	2206      	movs	r2, #6
 8014c32:	6839      	ldr	r1, [r7, #0]
 8014c34:	4618      	mov	r0, r3
 8014c36:	f002 fad0 	bl	80171da <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	3312      	adds	r3, #18
 8014c3e:	2206      	movs	r2, #6
 8014c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c42:	4618      	mov	r0, r3
 8014c44:	f002 fac9 	bl	80171da <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	330e      	adds	r3, #14
 8014c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c4e:	6812      	ldr	r2, [r2, #0]
 8014c50:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	3318      	adds	r3, #24
 8014c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c58:	6812      	ldr	r2, [r2, #0]
 8014c5a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	701a      	strb	r2, [r3, #0]
 8014c62:	2200      	movs	r2, #0
 8014c64:	f042 0201 	orr.w	r2, r2, #1
 8014c68:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	f042 0208 	orr.w	r2, r2, #8
 8014c72:	709a      	strb	r2, [r3, #2]
 8014c74:	2200      	movs	r2, #0
 8014c76:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	2206      	movs	r2, #6
 8014c7c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	2204      	movs	r2, #4
 8014c82:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014c84:	f640 0306 	movw	r3, #2054	@ 0x806
 8014c88:	9300      	str	r3, [sp, #0]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	69b9      	ldr	r1, [r7, #24]
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f001 fb7b 	bl	801638c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014c96:	69b8      	ldr	r0, [r7, #24]
 8014c98:	f7f8 ff10 	bl	800dabc <pbuf_free>
  p = NULL;
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014ca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3720      	adds	r7, #32
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	0801a16c 	.word	0x0801a16c
 8014cb0:	0801a2bc 	.word	0x0801a2bc
 8014cb4:	0801a1e4 	.word	0x0801a1e4
 8014cb8:	0801a36c 	.word	0x0801a36c
 8014cbc:	0801a3a0 	.word	0x0801a3a0

08014cc0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b088      	sub	sp, #32
 8014cc4:	af04      	add	r7, sp, #16
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014cdc:	2201      	movs	r2, #1
 8014cde:	9203      	str	r2, [sp, #12]
 8014ce0:	68ba      	ldr	r2, [r7, #8]
 8014ce2:	9202      	str	r2, [sp, #8]
 8014ce4:	4a06      	ldr	r2, [pc, #24]	@ (8014d00 <etharp_request_dst+0x40>)
 8014ce6:	9201      	str	r2, [sp, #4]
 8014ce8:	9300      	str	r3, [sp, #0]
 8014cea:	4603      	mov	r3, r0
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	68f8      	ldr	r0, [r7, #12]
 8014cf0:	f7ff ff5a 	bl	8014ba8 <etharp_raw>
 8014cf4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3710      	adds	r7, #16
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	0801a954 	.word	0x0801a954

08014d04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014d0e:	4a05      	ldr	r2, [pc, #20]	@ (8014d24 <etharp_request+0x20>)
 8014d10:	6839      	ldr	r1, [r7, #0]
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f7ff ffd4 	bl	8014cc0 <etharp_request_dst>
 8014d18:	4603      	mov	r3, r0
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3708      	adds	r7, #8
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop
 8014d24:	0801a94c 	.word	0x0801a94c

08014d28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b08e      	sub	sp, #56	@ 0x38
 8014d2c:	af04      	add	r7, sp, #16
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014d32:	4b79      	ldr	r3, [pc, #484]	@ (8014f18 <icmp_input+0x1f0>)
 8014d34:	689b      	ldr	r3, [r3, #8]
 8014d36:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	f003 030f 	and.w	r3, r3, #15
 8014d40:	b2db      	uxtb	r3, r3
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	b2db      	uxtb	r3, r3
 8014d46:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014d48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d4a:	2b13      	cmp	r3, #19
 8014d4c:	f240 80cd 	bls.w	8014eea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	895b      	ldrh	r3, [r3, #10]
 8014d54:	2b03      	cmp	r3, #3
 8014d56:	f240 80ca 	bls.w	8014eee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014d64:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f000 80b7 	beq.w	8014edc <icmp_input+0x1b4>
 8014d6e:	2b08      	cmp	r3, #8
 8014d70:	f040 80b7 	bne.w	8014ee2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014d74:	4b69      	ldr	r3, [pc, #420]	@ (8014f1c <icmp_input+0x1f4>)
 8014d76:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014d78:	4b67      	ldr	r3, [pc, #412]	@ (8014f18 <icmp_input+0x1f0>)
 8014d7a:	695b      	ldr	r3, [r3, #20]
 8014d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014d80:	2be0      	cmp	r3, #224	@ 0xe0
 8014d82:	f000 80bb 	beq.w	8014efc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014d86:	4b64      	ldr	r3, [pc, #400]	@ (8014f18 <icmp_input+0x1f0>)
 8014d88:	695b      	ldr	r3, [r3, #20]
 8014d8a:	4a63      	ldr	r2, [pc, #396]	@ (8014f18 <icmp_input+0x1f0>)
 8014d8c:	6812      	ldr	r2, [r2, #0]
 8014d8e:	4611      	mov	r1, r2
 8014d90:	4618      	mov	r0, r3
 8014d92:	f000 fbed 	bl	8015570 <ip4_addr_isbroadcast_u32>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	f040 80b1 	bne.w	8014f00 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	891b      	ldrh	r3, [r3, #8]
 8014da2:	2b07      	cmp	r3, #7
 8014da4:	f240 80a5 	bls.w	8014ef2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014da8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014daa:	330e      	adds	r3, #14
 8014dac:	4619      	mov	r1, r3
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f7f8 fdee 	bl	800d990 <pbuf_add_header>
 8014db4:	4603      	mov	r3, r0
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d04b      	beq.n	8014e52 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	891a      	ldrh	r2, [r3, #8]
 8014dbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dc0:	4413      	add	r3, r2
 8014dc2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	891b      	ldrh	r3, [r3, #8]
 8014dc8:	8b7a      	ldrh	r2, [r7, #26]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	f0c0 809a 	bcc.w	8014f04 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014dd0:	8b7b      	ldrh	r3, [r7, #26]
 8014dd2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	200e      	movs	r0, #14
 8014dda:	f7f8 fb8b 	bl	800d4f4 <pbuf_alloc>
 8014dde:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	f000 8090 	beq.w	8014f08 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	895b      	ldrh	r3, [r3, #10]
 8014dec:	461a      	mov	r2, r3
 8014dee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014df0:	3308      	adds	r3, #8
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d203      	bcs.n	8014dfe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014df6:	6978      	ldr	r0, [r7, #20]
 8014df8:	f7f8 fe60 	bl	800dabc <pbuf_free>
          goto icmperr;
 8014dfc:	e085      	b.n	8014f0a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014e04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e06:	4618      	mov	r0, r3
 8014e08:	f002 f9e7 	bl	80171da <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014e0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e0e:	4619      	mov	r1, r3
 8014e10:	6978      	ldr	r0, [r7, #20]
 8014e12:	f7f8 fdcd 	bl	800d9b0 <pbuf_remove_header>
 8014e16:	4603      	mov	r3, r0
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d009      	beq.n	8014e30 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014e1c:	4b40      	ldr	r3, [pc, #256]	@ (8014f20 <icmp_input+0x1f8>)
 8014e1e:	22b6      	movs	r2, #182	@ 0xb6
 8014e20:	4940      	ldr	r1, [pc, #256]	@ (8014f24 <icmp_input+0x1fc>)
 8014e22:	4841      	ldr	r0, [pc, #260]	@ (8014f28 <icmp_input+0x200>)
 8014e24:	f002 f8fe 	bl	8017024 <iprintf>
          pbuf_free(r);
 8014e28:	6978      	ldr	r0, [r7, #20]
 8014e2a:	f7f8 fe47 	bl	800dabc <pbuf_free>
          goto icmperr;
 8014e2e:	e06c      	b.n	8014f0a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014e30:	6879      	ldr	r1, [r7, #4]
 8014e32:	6978      	ldr	r0, [r7, #20]
 8014e34:	f7f8 ff6a 	bl	800dd0c <pbuf_copy>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d003      	beq.n	8014e46 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014e3e:	6978      	ldr	r0, [r7, #20]
 8014e40:	f7f8 fe3c 	bl	800dabc <pbuf_free>
          goto icmperr;
 8014e44:	e061      	b.n	8014f0a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f7f8 fe38 	bl	800dabc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	607b      	str	r3, [r7, #4]
 8014e50:	e00f      	b.n	8014e72 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e54:	330e      	adds	r3, #14
 8014e56:	4619      	mov	r1, r3
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f7f8 fda9 	bl	800d9b0 <pbuf_remove_header>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d006      	beq.n	8014e72 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014e64:	4b2e      	ldr	r3, [pc, #184]	@ (8014f20 <icmp_input+0x1f8>)
 8014e66:	22c7      	movs	r2, #199	@ 0xc7
 8014e68:	4930      	ldr	r1, [pc, #192]	@ (8014f2c <icmp_input+0x204>)
 8014e6a:	482f      	ldr	r0, [pc, #188]	@ (8014f28 <icmp_input+0x200>)
 8014e6c:	f002 f8da 	bl	8017024 <iprintf>
          goto icmperr;
 8014e70:	e04b      	b.n	8014f0a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	685b      	ldr	r3, [r3, #4]
 8014e76:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7f8 fd87 	bl	800d990 <pbuf_add_header>
 8014e82:	4603      	mov	r3, r0
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d12b      	bne.n	8014ee0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	685b      	ldr	r3, [r3, #4]
 8014e8c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014e96:	4b20      	ldr	r3, [pc, #128]	@ (8014f18 <icmp_input+0x1f0>)
 8014e98:	691a      	ldr	r2, [r3, #16]
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014e9e:	693b      	ldr	r3, [r7, #16]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	709a      	strb	r2, [r3, #2]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	22ff      	movs	r2, #255	@ 0xff
 8014eb2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	729a      	strb	r2, [r3, #10]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	9302      	str	r3, [sp, #8]
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	9301      	str	r3, [sp, #4]
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	9300      	str	r3, [sp, #0]
 8014eca:	23ff      	movs	r3, #255	@ 0xff
 8014ecc:	2200      	movs	r2, #0
 8014ece:	69f9      	ldr	r1, [r7, #28]
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f000 fa75 	bl	80153c0 <ip4_output_if>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014eda:	e001      	b.n	8014ee0 <icmp_input+0x1b8>
      break;
 8014edc:	bf00      	nop
 8014ede:	e000      	b.n	8014ee2 <icmp_input+0x1ba>
      break;
 8014ee0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7f8 fdea 	bl	800dabc <pbuf_free>
  return;
 8014ee8:	e013      	b.n	8014f12 <icmp_input+0x1ea>
    goto lenerr;
 8014eea:	bf00      	nop
 8014eec:	e002      	b.n	8014ef4 <icmp_input+0x1cc>
    goto lenerr;
 8014eee:	bf00      	nop
 8014ef0:	e000      	b.n	8014ef4 <icmp_input+0x1cc>
        goto lenerr;
 8014ef2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f7f8 fde1 	bl	800dabc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014efa:	e00a      	b.n	8014f12 <icmp_input+0x1ea>
        goto icmperr;
 8014efc:	bf00      	nop
 8014efe:	e004      	b.n	8014f0a <icmp_input+0x1e2>
        goto icmperr;
 8014f00:	bf00      	nop
 8014f02:	e002      	b.n	8014f0a <icmp_input+0x1e2>
          goto icmperr;
 8014f04:	bf00      	nop
 8014f06:	e000      	b.n	8014f0a <icmp_input+0x1e2>
          goto icmperr;
 8014f08:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f7f8 fdd6 	bl	800dabc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014f10:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014f12:	3728      	adds	r7, #40	@ 0x28
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	2000555c 	.word	0x2000555c
 8014f1c:	20005570 	.word	0x20005570
 8014f20:	0801a3e4 	.word	0x0801a3e4
 8014f24:	0801a41c 	.word	0x0801a41c
 8014f28:	0801a454 	.word	0x0801a454
 8014f2c:	0801a47c 	.word	0x0801a47c

08014f30 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	460b      	mov	r3, r1
 8014f3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014f3c:	78fb      	ldrb	r3, [r7, #3]
 8014f3e:	461a      	mov	r2, r3
 8014f40:	2103      	movs	r1, #3
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f000 f814 	bl	8014f70 <icmp_send_response>
}
 8014f48:	bf00      	nop
 8014f4a:	3708      	adds	r7, #8
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b082      	sub	sp, #8
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	460b      	mov	r3, r1
 8014f5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014f5c:	78fb      	ldrb	r3, [r7, #3]
 8014f5e:	461a      	mov	r2, r3
 8014f60:	210b      	movs	r1, #11
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f000 f804 	bl	8014f70 <icmp_send_response>
}
 8014f68:	bf00      	nop
 8014f6a:	3708      	adds	r7, #8
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}

08014f70 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08c      	sub	sp, #48	@ 0x30
 8014f74:	af04      	add	r7, sp, #16
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	460b      	mov	r3, r1
 8014f7a:	70fb      	strb	r3, [r7, #3]
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014f80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f84:	2124      	movs	r1, #36	@ 0x24
 8014f86:	2022      	movs	r0, #34	@ 0x22
 8014f88:	f7f8 fab4 	bl	800d4f4 <pbuf_alloc>
 8014f8c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d04c      	beq.n	801502e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	895b      	ldrh	r3, [r3, #10]
 8014f98:	2b23      	cmp	r3, #35	@ 0x23
 8014f9a:	d806      	bhi.n	8014faa <icmp_send_response+0x3a>
 8014f9c:	4b26      	ldr	r3, [pc, #152]	@ (8015038 <icmp_send_response+0xc8>)
 8014f9e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014fa2:	4926      	ldr	r1, [pc, #152]	@ (801503c <icmp_send_response+0xcc>)
 8014fa4:	4826      	ldr	r0, [pc, #152]	@ (8015040 <icmp_send_response+0xd0>)
 8014fa6:	f002 f83d 	bl	8017024 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	685b      	ldr	r3, [r3, #4]
 8014fb4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	78fa      	ldrb	r2, [r7, #3]
 8014fba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	78ba      	ldrb	r2, [r7, #2]
 8014fc0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	711a      	strb	r2, [r3, #4]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014fcc:	697b      	ldr	r3, [r7, #20]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	719a      	strb	r2, [r3, #6]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014fd6:	69fb      	ldr	r3, [r7, #28]
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	f103 0008 	add.w	r0, r3, #8
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	221c      	movs	r2, #28
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	f002 f8f8 	bl	80171da <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	68db      	ldr	r3, [r3, #12]
 8014fee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014ff0:	f107 030c 	add.w	r3, r7, #12
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f000 f825 	bl	8015044 <ip4_route>
 8014ffa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d011      	beq.n	8015026 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	2200      	movs	r2, #0
 8015006:	709a      	strb	r2, [r3, #2]
 8015008:	2200      	movs	r2, #0
 801500a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801500c:	f107 020c 	add.w	r2, r7, #12
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	9302      	str	r3, [sp, #8]
 8015014:	2301      	movs	r3, #1
 8015016:	9301      	str	r3, [sp, #4]
 8015018:	2300      	movs	r3, #0
 801501a:	9300      	str	r3, [sp, #0]
 801501c:	23ff      	movs	r3, #255	@ 0xff
 801501e:	2100      	movs	r1, #0
 8015020:	69f8      	ldr	r0, [r7, #28]
 8015022:	f000 f9cd 	bl	80153c0 <ip4_output_if>
  }
  pbuf_free(q);
 8015026:	69f8      	ldr	r0, [r7, #28]
 8015028:	f7f8 fd48 	bl	800dabc <pbuf_free>
 801502c:	e000      	b.n	8015030 <icmp_send_response+0xc0>
    return;
 801502e:	bf00      	nop
}
 8015030:	3720      	adds	r7, #32
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	0801a3e4 	.word	0x0801a3e4
 801503c:	0801a4b0 	.word	0x0801a4b0
 8015040:	0801a454 	.word	0x0801a454

08015044 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015044:	b480      	push	{r7}
 8015046:	b085      	sub	sp, #20
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801504c:	4b33      	ldr	r3, [pc, #204]	@ (801511c <ip4_route+0xd8>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	60fb      	str	r3, [r7, #12]
 8015052:	e036      	b.n	80150c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801505a:	f003 0301 	and.w	r3, r3, #1
 801505e:	b2db      	uxtb	r3, r3
 8015060:	2b00      	cmp	r3, #0
 8015062:	d02b      	beq.n	80150bc <ip4_route+0x78>
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801506a:	089b      	lsrs	r3, r3, #2
 801506c:	f003 0301 	and.w	r3, r3, #1
 8015070:	b2db      	uxtb	r3, r3
 8015072:	2b00      	cmp	r3, #0
 8015074:	d022      	beq.n	80150bc <ip4_route+0x78>
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	3304      	adds	r3, #4
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d01d      	beq.n	80150bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	3304      	adds	r3, #4
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	405a      	eors	r2, r3
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	3308      	adds	r3, #8
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	4013      	ands	r3, r2
 8015094:	2b00      	cmp	r3, #0
 8015096:	d101      	bne.n	801509c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	e038      	b.n	801510e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150a2:	f003 0302 	and.w	r3, r3, #2
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d108      	bne.n	80150bc <ip4_route+0x78>
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	681a      	ldr	r2, [r3, #0]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	330c      	adds	r3, #12
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d101      	bne.n	80150bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	e028      	b.n	801510e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	60fb      	str	r3, [r7, #12]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1c5      	bne.n	8015054 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80150c8:	4b15      	ldr	r3, [pc, #84]	@ (8015120 <ip4_route+0xdc>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d01a      	beq.n	8015106 <ip4_route+0xc2>
 80150d0:	4b13      	ldr	r3, [pc, #76]	@ (8015120 <ip4_route+0xdc>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150d8:	f003 0301 	and.w	r3, r3, #1
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d012      	beq.n	8015106 <ip4_route+0xc2>
 80150e0:	4b0f      	ldr	r3, [pc, #60]	@ (8015120 <ip4_route+0xdc>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150e8:	f003 0304 	and.w	r3, r3, #4
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d00a      	beq.n	8015106 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015120 <ip4_route+0xdc>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	3304      	adds	r3, #4
 80150f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d004      	beq.n	8015106 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	b2db      	uxtb	r3, r3
 8015102:	2b7f      	cmp	r3, #127	@ 0x7f
 8015104:	d101      	bne.n	801510a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015106:	2300      	movs	r3, #0
 8015108:	e001      	b.n	801510e <ip4_route+0xca>
  }

  return netif_default;
 801510a:	4b05      	ldr	r3, [pc, #20]	@ (8015120 <ip4_route+0xdc>)
 801510c:	681b      	ldr	r3, [r3, #0]
}
 801510e:	4618      	mov	r0, r3
 8015110:	3714      	adds	r7, #20
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr
 801511a:	bf00      	nop
 801511c:	2000846c 	.word	0x2000846c
 8015120:	20008470 	.word	0x20008470

08015124 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015132:	f003 0301 	and.w	r3, r3, #1
 8015136:	b2db      	uxtb	r3, r3
 8015138:	2b00      	cmp	r3, #0
 801513a:	d016      	beq.n	801516a <ip4_input_accept+0x46>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	3304      	adds	r3, #4
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d011      	beq.n	801516a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015146:	4b0b      	ldr	r3, [pc, #44]	@ (8015174 <ip4_input_accept+0x50>)
 8015148:	695a      	ldr	r2, [r3, #20]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	3304      	adds	r3, #4
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	429a      	cmp	r2, r3
 8015152:	d008      	beq.n	8015166 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015154:	4b07      	ldr	r3, [pc, #28]	@ (8015174 <ip4_input_accept+0x50>)
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	6879      	ldr	r1, [r7, #4]
 801515a:	4618      	mov	r0, r3
 801515c:	f000 fa08 	bl	8015570 <ip4_addr_isbroadcast_u32>
 8015160:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015162:	2b00      	cmp	r3, #0
 8015164:	d001      	beq.n	801516a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015166:	2301      	movs	r3, #1
 8015168:	e000      	b.n	801516c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801516a:	2300      	movs	r3, #0
}
 801516c:	4618      	mov	r0, r3
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	2000555c 	.word	0x2000555c

08015178 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b086      	sub	sp, #24
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	781b      	ldrb	r3, [r3, #0]
 801518c:	091b      	lsrs	r3, r3, #4
 801518e:	b2db      	uxtb	r3, r3
 8015190:	2b04      	cmp	r3, #4
 8015192:	d004      	beq.n	801519e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f7f8 fc91 	bl	800dabc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801519a:	2300      	movs	r3, #0
 801519c:	e107      	b.n	80153ae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	781b      	ldrb	r3, [r3, #0]
 80151a2:	f003 030f 	and.w	r3, r3, #15
 80151a6:	b2db      	uxtb	r3, r3
 80151a8:	009b      	lsls	r3, r3, #2
 80151aa:	b2db      	uxtb	r3, r3
 80151ac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	885b      	ldrh	r3, [r3, #2]
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7f7 f927 	bl	800c408 <lwip_htons>
 80151ba:	4603      	mov	r3, r0
 80151bc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	891b      	ldrh	r3, [r3, #8]
 80151c2:	89ba      	ldrh	r2, [r7, #12]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d204      	bcs.n	80151d2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80151c8:	89bb      	ldrh	r3, [r7, #12]
 80151ca:	4619      	mov	r1, r3
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7f8 faef 	bl	800d7b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	895b      	ldrh	r3, [r3, #10]
 80151d6:	89fa      	ldrh	r2, [r7, #14]
 80151d8:	429a      	cmp	r2, r3
 80151da:	d807      	bhi.n	80151ec <ip4_input+0x74>
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	891b      	ldrh	r3, [r3, #8]
 80151e0:	89ba      	ldrh	r2, [r7, #12]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d802      	bhi.n	80151ec <ip4_input+0x74>
 80151e6:	89fb      	ldrh	r3, [r7, #14]
 80151e8:	2b13      	cmp	r3, #19
 80151ea:	d804      	bhi.n	80151f6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f7f8 fc65 	bl	800dabc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80151f2:	2300      	movs	r3, #0
 80151f4:	e0db      	b.n	80153ae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	691b      	ldr	r3, [r3, #16]
 80151fa:	4a6f      	ldr	r2, [pc, #444]	@ (80153b8 <ip4_input+0x240>)
 80151fc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	68db      	ldr	r3, [r3, #12]
 8015202:	4a6d      	ldr	r2, [pc, #436]	@ (80153b8 <ip4_input+0x240>)
 8015204:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015206:	4b6c      	ldr	r3, [pc, #432]	@ (80153b8 <ip4_input+0x240>)
 8015208:	695b      	ldr	r3, [r3, #20]
 801520a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801520e:	2be0      	cmp	r3, #224	@ 0xe0
 8015210:	d112      	bne.n	8015238 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015218:	f003 0301 	and.w	r3, r3, #1
 801521c:	b2db      	uxtb	r3, r3
 801521e:	2b00      	cmp	r3, #0
 8015220:	d007      	beq.n	8015232 <ip4_input+0xba>
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	3304      	adds	r3, #4
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d002      	beq.n	8015232 <ip4_input+0xba>
      netif = inp;
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	613b      	str	r3, [r7, #16]
 8015230:	e02a      	b.n	8015288 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015232:	2300      	movs	r3, #0
 8015234:	613b      	str	r3, [r7, #16]
 8015236:	e027      	b.n	8015288 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015238:	6838      	ldr	r0, [r7, #0]
 801523a:	f7ff ff73 	bl	8015124 <ip4_input_accept>
 801523e:	4603      	mov	r3, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d002      	beq.n	801524a <ip4_input+0xd2>
      netif = inp;
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	613b      	str	r3, [r7, #16]
 8015248:	e01e      	b.n	8015288 <ip4_input+0x110>
    } else {
      netif = NULL;
 801524a:	2300      	movs	r3, #0
 801524c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801524e:	4b5a      	ldr	r3, [pc, #360]	@ (80153b8 <ip4_input+0x240>)
 8015250:	695b      	ldr	r3, [r3, #20]
 8015252:	b2db      	uxtb	r3, r3
 8015254:	2b7f      	cmp	r3, #127	@ 0x7f
 8015256:	d017      	beq.n	8015288 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015258:	4b58      	ldr	r3, [pc, #352]	@ (80153bc <ip4_input+0x244>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	613b      	str	r3, [r7, #16]
 801525e:	e00e      	b.n	801527e <ip4_input+0x106>
          if (netif == inp) {
 8015260:	693a      	ldr	r2, [r7, #16]
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	429a      	cmp	r2, r3
 8015266:	d006      	beq.n	8015276 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015268:	6938      	ldr	r0, [r7, #16]
 801526a:	f7ff ff5b 	bl	8015124 <ip4_input_accept>
 801526e:	4603      	mov	r3, r0
 8015270:	2b00      	cmp	r3, #0
 8015272:	d108      	bne.n	8015286 <ip4_input+0x10e>
 8015274:	e000      	b.n	8015278 <ip4_input+0x100>
            continue;
 8015276:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	613b      	str	r3, [r7, #16]
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d1ed      	bne.n	8015260 <ip4_input+0xe8>
 8015284:	e000      	b.n	8015288 <ip4_input+0x110>
            break;
 8015286:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015288:	4b4b      	ldr	r3, [pc, #300]	@ (80153b8 <ip4_input+0x240>)
 801528a:	691b      	ldr	r3, [r3, #16]
 801528c:	6839      	ldr	r1, [r7, #0]
 801528e:	4618      	mov	r0, r3
 8015290:	f000 f96e 	bl	8015570 <ip4_addr_isbroadcast_u32>
 8015294:	4603      	mov	r3, r0
 8015296:	2b00      	cmp	r3, #0
 8015298:	d105      	bne.n	80152a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801529a:	4b47      	ldr	r3, [pc, #284]	@ (80153b8 <ip4_input+0x240>)
 801529c:	691b      	ldr	r3, [r3, #16]
 801529e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80152a2:	2be0      	cmp	r3, #224	@ 0xe0
 80152a4:	d104      	bne.n	80152b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f7f8 fc08 	bl	800dabc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80152ac:	2300      	movs	r3, #0
 80152ae:	e07e      	b.n	80153ae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d104      	bne.n	80152c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	f7f8 fc00 	bl	800dabc <pbuf_free>
    return ERR_OK;
 80152bc:	2300      	movs	r3, #0
 80152be:	e076      	b.n	80153ae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	88db      	ldrh	r3, [r3, #6]
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	461a      	mov	r2, r3
 80152c8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80152cc:	4013      	ands	r3, r2
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d00b      	beq.n	80152ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f000 fc92 	bl	8015bfc <ip4_reass>
 80152d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d101      	bne.n	80152e4 <ip4_input+0x16c>
      return ERR_OK;
 80152e0:	2300      	movs	r3, #0
 80152e2:	e064      	b.n	80153ae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	685b      	ldr	r3, [r3, #4]
 80152e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80152ea:	4a33      	ldr	r2, [pc, #204]	@ (80153b8 <ip4_input+0x240>)
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80152f0:	4a31      	ldr	r2, [pc, #196]	@ (80153b8 <ip4_input+0x240>)
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80152f6:	4a30      	ldr	r2, [pc, #192]	@ (80153b8 <ip4_input+0x240>)
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	f003 030f 	and.w	r3, r3, #15
 8015304:	b2db      	uxtb	r3, r3
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	b2db      	uxtb	r3, r3
 801530a:	461a      	mov	r2, r3
 801530c:	4b2a      	ldr	r3, [pc, #168]	@ (80153b8 <ip4_input+0x240>)
 801530e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015310:	89fb      	ldrh	r3, [r7, #14]
 8015312:	4619      	mov	r1, r3
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f7f8 fb4b 	bl	800d9b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	7a5b      	ldrb	r3, [r3, #9]
 801531e:	2b11      	cmp	r3, #17
 8015320:	d006      	beq.n	8015330 <ip4_input+0x1b8>
 8015322:	2b11      	cmp	r3, #17
 8015324:	dc13      	bgt.n	801534e <ip4_input+0x1d6>
 8015326:	2b01      	cmp	r3, #1
 8015328:	d00c      	beq.n	8015344 <ip4_input+0x1cc>
 801532a:	2b06      	cmp	r3, #6
 801532c:	d005      	beq.n	801533a <ip4_input+0x1c2>
 801532e:	e00e      	b.n	801534e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015330:	6839      	ldr	r1, [r7, #0]
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f7fe f9b0 	bl	8013698 <udp_input>
        break;
 8015338:	e026      	b.n	8015388 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801533a:	6839      	ldr	r1, [r7, #0]
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f7fa f9f7 	bl	800f730 <tcp_input>
        break;
 8015342:	e021      	b.n	8015388 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015344:	6839      	ldr	r1, [r7, #0]
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7ff fcee 	bl	8014d28 <icmp_input>
        break;
 801534c:	e01c      	b.n	8015388 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801534e:	4b1a      	ldr	r3, [pc, #104]	@ (80153b8 <ip4_input+0x240>)
 8015350:	695b      	ldr	r3, [r3, #20]
 8015352:	6939      	ldr	r1, [r7, #16]
 8015354:	4618      	mov	r0, r3
 8015356:	f000 f90b 	bl	8015570 <ip4_addr_isbroadcast_u32>
 801535a:	4603      	mov	r3, r0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d10f      	bne.n	8015380 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015360:	4b15      	ldr	r3, [pc, #84]	@ (80153b8 <ip4_input+0x240>)
 8015362:	695b      	ldr	r3, [r3, #20]
 8015364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015368:	2be0      	cmp	r3, #224	@ 0xe0
 801536a:	d009      	beq.n	8015380 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801536c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015370:	4619      	mov	r1, r3
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7f8 fb8f 	bl	800da96 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015378:	2102      	movs	r1, #2
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f7ff fdd8 	bl	8014f30 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f7f8 fb9b 	bl	800dabc <pbuf_free>
        break;
 8015386:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015388:	4b0b      	ldr	r3, [pc, #44]	@ (80153b8 <ip4_input+0x240>)
 801538a:	2200      	movs	r2, #0
 801538c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801538e:	4b0a      	ldr	r3, [pc, #40]	@ (80153b8 <ip4_input+0x240>)
 8015390:	2200      	movs	r2, #0
 8015392:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015394:	4b08      	ldr	r3, [pc, #32]	@ (80153b8 <ip4_input+0x240>)
 8015396:	2200      	movs	r2, #0
 8015398:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801539a:	4b07      	ldr	r3, [pc, #28]	@ (80153b8 <ip4_input+0x240>)
 801539c:	2200      	movs	r2, #0
 801539e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80153a0:	4b05      	ldr	r3, [pc, #20]	@ (80153b8 <ip4_input+0x240>)
 80153a2:	2200      	movs	r2, #0
 80153a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80153a6:	4b04      	ldr	r3, [pc, #16]	@ (80153b8 <ip4_input+0x240>)
 80153a8:	2200      	movs	r2, #0
 80153aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80153ac:	2300      	movs	r3, #0
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3718      	adds	r7, #24
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	2000555c 	.word	0x2000555c
 80153bc:	2000846c 	.word	0x2000846c

080153c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b08a      	sub	sp, #40	@ 0x28
 80153c4:	af04      	add	r7, sp, #16
 80153c6:	60f8      	str	r0, [r7, #12]
 80153c8:	60b9      	str	r1, [r7, #8]
 80153ca:	607a      	str	r2, [r7, #4]
 80153cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d009      	beq.n	80153ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d003      	beq.n	80153e6 <ip4_output_if+0x26>
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d102      	bne.n	80153ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80153e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153e8:	3304      	adds	r3, #4
 80153ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80153ec:	78fa      	ldrb	r2, [r7, #3]
 80153ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153f0:	9302      	str	r3, [sp, #8]
 80153f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80153f6:	9301      	str	r3, [sp, #4]
 80153f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	4613      	mov	r3, r2
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	6979      	ldr	r1, [r7, #20]
 8015404:	68f8      	ldr	r0, [r7, #12]
 8015406:	f000 f805 	bl	8015414 <ip4_output_if_src>
 801540a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801540c:	4618      	mov	r0, r3
 801540e:	3718      	adds	r7, #24
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b088      	sub	sp, #32
 8015418:	af00      	add	r7, sp, #0
 801541a:	60f8      	str	r0, [r7, #12]
 801541c:	60b9      	str	r1, [r7, #8]
 801541e:	607a      	str	r2, [r7, #4]
 8015420:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	7b9b      	ldrb	r3, [r3, #14]
 8015426:	2b01      	cmp	r3, #1
 8015428:	d006      	beq.n	8015438 <ip4_output_if_src+0x24>
 801542a:	4b4b      	ldr	r3, [pc, #300]	@ (8015558 <ip4_output_if_src+0x144>)
 801542c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015430:	494a      	ldr	r1, [pc, #296]	@ (801555c <ip4_output_if_src+0x148>)
 8015432:	484b      	ldr	r0, [pc, #300]	@ (8015560 <ip4_output_if_src+0x14c>)
 8015434:	f001 fdf6 	bl	8017024 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d060      	beq.n	8015500 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801543e:	2314      	movs	r3, #20
 8015440:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015442:	2114      	movs	r1, #20
 8015444:	68f8      	ldr	r0, [r7, #12]
 8015446:	f7f8 faa3 	bl	800d990 <pbuf_add_header>
 801544a:	4603      	mov	r3, r0
 801544c:	2b00      	cmp	r3, #0
 801544e:	d002      	beq.n	8015456 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015450:	f06f 0301 	mvn.w	r3, #1
 8015454:	e07c      	b.n	8015550 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	895b      	ldrh	r3, [r3, #10]
 8015460:	2b13      	cmp	r3, #19
 8015462:	d806      	bhi.n	8015472 <ip4_output_if_src+0x5e>
 8015464:	4b3c      	ldr	r3, [pc, #240]	@ (8015558 <ip4_output_if_src+0x144>)
 8015466:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801546a:	493e      	ldr	r1, [pc, #248]	@ (8015564 <ip4_output_if_src+0x150>)
 801546c:	483c      	ldr	r0, [pc, #240]	@ (8015560 <ip4_output_if_src+0x14c>)
 801546e:	f001 fdd9 	bl	8017024 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	78fa      	ldrb	r2, [r7, #3]
 8015476:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801547e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	69fb      	ldr	r3, [r7, #28]
 8015486:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015488:	8b7b      	ldrh	r3, [r7, #26]
 801548a:	089b      	lsrs	r3, r3, #2
 801548c:	b29b      	uxth	r3, r3
 801548e:	b2db      	uxtb	r3, r3
 8015490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015494:	b2da      	uxtb	r2, r3
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80154a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	891b      	ldrh	r3, [r3, #8]
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7f6 ffae 	bl	800c408 <lwip_htons>
 80154ac:	4603      	mov	r3, r0
 80154ae:	461a      	mov	r2, r3
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80154b4:	69fb      	ldr	r3, [r7, #28]
 80154b6:	2200      	movs	r2, #0
 80154b8:	719a      	strb	r2, [r3, #6]
 80154ba:	2200      	movs	r2, #0
 80154bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80154be:	4b2a      	ldr	r3, [pc, #168]	@ (8015568 <ip4_output_if_src+0x154>)
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7f6 ffa0 	bl	800c408 <lwip_htons>
 80154c8:	4603      	mov	r3, r0
 80154ca:	461a      	mov	r2, r3
 80154cc:	69fb      	ldr	r3, [r7, #28]
 80154ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80154d0:	4b25      	ldr	r3, [pc, #148]	@ (8015568 <ip4_output_if_src+0x154>)
 80154d2:	881b      	ldrh	r3, [r3, #0]
 80154d4:	3301      	adds	r3, #1
 80154d6:	b29a      	uxth	r2, r3
 80154d8:	4b23      	ldr	r3, [pc, #140]	@ (8015568 <ip4_output_if_src+0x154>)
 80154da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d104      	bne.n	80154ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80154e2:	4b22      	ldr	r3, [pc, #136]	@ (801556c <ip4_output_if_src+0x158>)
 80154e4:	681a      	ldr	r2, [r3, #0]
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	60da      	str	r2, [r3, #12]
 80154ea:	e003      	b.n	80154f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	681a      	ldr	r2, [r3, #0]
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	2200      	movs	r2, #0
 80154f8:	729a      	strb	r2, [r3, #10]
 80154fa:	2200      	movs	r2, #0
 80154fc:	72da      	strb	r2, [r3, #11]
 80154fe:	e00f      	b.n	8015520 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	895b      	ldrh	r3, [r3, #10]
 8015504:	2b13      	cmp	r3, #19
 8015506:	d802      	bhi.n	801550e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015508:	f06f 0301 	mvn.w	r3, #1
 801550c:	e020      	b.n	8015550 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	691b      	ldr	r3, [r3, #16]
 8015518:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801551a:	f107 0314 	add.w	r3, r7, #20
 801551e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015522:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015524:	2b00      	cmp	r3, #0
 8015526:	d00c      	beq.n	8015542 <ip4_output_if_src+0x12e>
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	891a      	ldrh	r2, [r3, #8]
 801552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015530:	429a      	cmp	r2, r3
 8015532:	d906      	bls.n	8015542 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015534:	687a      	ldr	r2, [r7, #4]
 8015536:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f000 fd53 	bl	8015fe4 <ip4_frag>
 801553e:	4603      	mov	r3, r0
 8015540:	e006      	b.n	8015550 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015544:	695b      	ldr	r3, [r3, #20]
 8015546:	687a      	ldr	r2, [r7, #4]
 8015548:	68f9      	ldr	r1, [r7, #12]
 801554a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801554c:	4798      	blx	r3
 801554e:	4603      	mov	r3, r0
}
 8015550:	4618      	mov	r0, r3
 8015552:	3720      	adds	r7, #32
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}
 8015558:	0801a4dc 	.word	0x0801a4dc
 801555c:	0801a510 	.word	0x0801a510
 8015560:	0801a51c 	.word	0x0801a51c
 8015564:	0801a544 	.word	0x0801a544
 8015568:	200085ca 	.word	0x200085ca
 801556c:	0801a948 	.word	0x0801a948

08015570 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015570:	b480      	push	{r7}
 8015572:	b085      	sub	sp, #20
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015584:	d002      	beq.n	801558c <ip4_addr_isbroadcast_u32+0x1c>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d101      	bne.n	8015590 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801558c:	2301      	movs	r3, #1
 801558e:	e02a      	b.n	80155e6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015596:	f003 0302 	and.w	r3, r3, #2
 801559a:	2b00      	cmp	r3, #0
 801559c:	d101      	bne.n	80155a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801559e:	2300      	movs	r3, #0
 80155a0:	e021      	b.n	80155e6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	3304      	adds	r3, #4
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d101      	bne.n	80155b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80155ae:	2300      	movs	r3, #0
 80155b0:	e019      	b.n	80155e6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	3304      	adds	r3, #4
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	405a      	eors	r2, r3
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	3308      	adds	r3, #8
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	4013      	ands	r3, r2
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d10d      	bne.n	80155e4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	3308      	adds	r3, #8
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	43da      	mvns	r2, r3
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	3308      	adds	r3, #8
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80155dc:	429a      	cmp	r2, r3
 80155de:	d101      	bne.n	80155e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80155e0:	2301      	movs	r3, #1
 80155e2:	e000      	b.n	80155e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80155e4:	2300      	movs	r3, #0
  }
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3714      	adds	r7, #20
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr
	...

080155f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80155fa:	2300      	movs	r3, #0
 80155fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80155fe:	4b12      	ldr	r3, [pc, #72]	@ (8015648 <ip_reass_tmr+0x54>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015604:	e018      	b.n	8015638 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	7fdb      	ldrb	r3, [r3, #31]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d00b      	beq.n	8015626 <ip_reass_tmr+0x32>
      r->timer--;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	7fdb      	ldrb	r3, [r3, #31]
 8015612:	3b01      	subs	r3, #1
 8015614:	b2da      	uxtb	r2, r3
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	60fb      	str	r3, [r7, #12]
 8015624:	e008      	b.n	8015638 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015630:	68b9      	ldr	r1, [r7, #8]
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	f000 f80a 	bl	801564c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d1e3      	bne.n	8015606 <ip_reass_tmr+0x12>
    }
  }
}
 801563e:	bf00      	nop
 8015640:	bf00      	nop
 8015642:	3710      	adds	r7, #16
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	200085cc 	.word	0x200085cc

0801564c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b088      	sub	sp, #32
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015656:	2300      	movs	r3, #0
 8015658:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801565a:	683a      	ldr	r2, [r7, #0]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	429a      	cmp	r2, r3
 8015660:	d105      	bne.n	801566e <ip_reass_free_complete_datagram+0x22>
 8015662:	4b45      	ldr	r3, [pc, #276]	@ (8015778 <ip_reass_free_complete_datagram+0x12c>)
 8015664:	22ab      	movs	r2, #171	@ 0xab
 8015666:	4945      	ldr	r1, [pc, #276]	@ (801577c <ip_reass_free_complete_datagram+0x130>)
 8015668:	4845      	ldr	r0, [pc, #276]	@ (8015780 <ip_reass_free_complete_datagram+0x134>)
 801566a:	f001 fcdb 	bl	8017024 <iprintf>
  if (prev != NULL) {
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d00a      	beq.n	801568a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	687a      	ldr	r2, [r7, #4]
 801567a:	429a      	cmp	r2, r3
 801567c:	d005      	beq.n	801568a <ip_reass_free_complete_datagram+0x3e>
 801567e:	4b3e      	ldr	r3, [pc, #248]	@ (8015778 <ip_reass_free_complete_datagram+0x12c>)
 8015680:	22ad      	movs	r2, #173	@ 0xad
 8015682:	4940      	ldr	r1, [pc, #256]	@ (8015784 <ip_reass_free_complete_datagram+0x138>)
 8015684:	483e      	ldr	r0, [pc, #248]	@ (8015780 <ip_reass_free_complete_datagram+0x134>)
 8015686:	f001 fccd 	bl	8017024 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015692:	697b      	ldr	r3, [r7, #20]
 8015694:	889b      	ldrh	r3, [r3, #4]
 8015696:	b29b      	uxth	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	d12a      	bne.n	80156f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	685b      	ldr	r3, [r3, #4]
 80156a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80156aa:	69bb      	ldr	r3, [r7, #24]
 80156ac:	6858      	ldr	r0, [r3, #4]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	3308      	adds	r3, #8
 80156b2:	2214      	movs	r2, #20
 80156b4:	4619      	mov	r1, r3
 80156b6:	f001 fd90 	bl	80171da <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80156ba:	2101      	movs	r1, #1
 80156bc:	69b8      	ldr	r0, [r7, #24]
 80156be:	f7ff fc47 	bl	8014f50 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80156c2:	69b8      	ldr	r0, [r7, #24]
 80156c4:	f7f8 fa82 	bl	800dbcc <pbuf_clen>
 80156c8:	4603      	mov	r3, r0
 80156ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80156cc:	8bfa      	ldrh	r2, [r7, #30]
 80156ce:	8a7b      	ldrh	r3, [r7, #18]
 80156d0:	4413      	add	r3, r2
 80156d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156d6:	db05      	blt.n	80156e4 <ip_reass_free_complete_datagram+0x98>
 80156d8:	4b27      	ldr	r3, [pc, #156]	@ (8015778 <ip_reass_free_complete_datagram+0x12c>)
 80156da:	22bc      	movs	r2, #188	@ 0xbc
 80156dc:	492a      	ldr	r1, [pc, #168]	@ (8015788 <ip_reass_free_complete_datagram+0x13c>)
 80156de:	4828      	ldr	r0, [pc, #160]	@ (8015780 <ip_reass_free_complete_datagram+0x134>)
 80156e0:	f001 fca0 	bl	8017024 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80156e4:	8bfa      	ldrh	r2, [r7, #30]
 80156e6:	8a7b      	ldrh	r3, [r7, #18]
 80156e8:	4413      	add	r3, r2
 80156ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80156ec:	69b8      	ldr	r0, [r7, #24]
 80156ee:	f7f8 f9e5 	bl	800dabc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80156f8:	e01f      	b.n	801573a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015700:	69bb      	ldr	r3, [r7, #24]
 8015702:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801570a:	68f8      	ldr	r0, [r7, #12]
 801570c:	f7f8 fa5e 	bl	800dbcc <pbuf_clen>
 8015710:	4603      	mov	r3, r0
 8015712:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015714:	8bfa      	ldrh	r2, [r7, #30]
 8015716:	8a7b      	ldrh	r3, [r7, #18]
 8015718:	4413      	add	r3, r2
 801571a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801571e:	db05      	blt.n	801572c <ip_reass_free_complete_datagram+0xe0>
 8015720:	4b15      	ldr	r3, [pc, #84]	@ (8015778 <ip_reass_free_complete_datagram+0x12c>)
 8015722:	22cc      	movs	r2, #204	@ 0xcc
 8015724:	4918      	ldr	r1, [pc, #96]	@ (8015788 <ip_reass_free_complete_datagram+0x13c>)
 8015726:	4816      	ldr	r0, [pc, #88]	@ (8015780 <ip_reass_free_complete_datagram+0x134>)
 8015728:	f001 fc7c 	bl	8017024 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801572c:	8bfa      	ldrh	r2, [r7, #30]
 801572e:	8a7b      	ldrh	r3, [r7, #18]
 8015730:	4413      	add	r3, r2
 8015732:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015734:	68f8      	ldr	r0, [r7, #12]
 8015736:	f7f8 f9c1 	bl	800dabc <pbuf_free>
  while (p != NULL) {
 801573a:	69bb      	ldr	r3, [r7, #24]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d1dc      	bne.n	80156fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015740:	6839      	ldr	r1, [r7, #0]
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f000 f8c2 	bl	80158cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015748:	4b10      	ldr	r3, [pc, #64]	@ (801578c <ip_reass_free_complete_datagram+0x140>)
 801574a:	881b      	ldrh	r3, [r3, #0]
 801574c:	8bfa      	ldrh	r2, [r7, #30]
 801574e:	429a      	cmp	r2, r3
 8015750:	d905      	bls.n	801575e <ip_reass_free_complete_datagram+0x112>
 8015752:	4b09      	ldr	r3, [pc, #36]	@ (8015778 <ip_reass_free_complete_datagram+0x12c>)
 8015754:	22d2      	movs	r2, #210	@ 0xd2
 8015756:	490e      	ldr	r1, [pc, #56]	@ (8015790 <ip_reass_free_complete_datagram+0x144>)
 8015758:	4809      	ldr	r0, [pc, #36]	@ (8015780 <ip_reass_free_complete_datagram+0x134>)
 801575a:	f001 fc63 	bl	8017024 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801575e:	4b0b      	ldr	r3, [pc, #44]	@ (801578c <ip_reass_free_complete_datagram+0x140>)
 8015760:	881a      	ldrh	r2, [r3, #0]
 8015762:	8bfb      	ldrh	r3, [r7, #30]
 8015764:	1ad3      	subs	r3, r2, r3
 8015766:	b29a      	uxth	r2, r3
 8015768:	4b08      	ldr	r3, [pc, #32]	@ (801578c <ip_reass_free_complete_datagram+0x140>)
 801576a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801576c:	8bfb      	ldrh	r3, [r7, #30]
}
 801576e:	4618      	mov	r0, r3
 8015770:	3720      	adds	r7, #32
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}
 8015776:	bf00      	nop
 8015778:	0801a574 	.word	0x0801a574
 801577c:	0801a5b0 	.word	0x0801a5b0
 8015780:	0801a5bc 	.word	0x0801a5bc
 8015784:	0801a5e4 	.word	0x0801a5e4
 8015788:	0801a5f8 	.word	0x0801a5f8
 801578c:	200085d0 	.word	0x200085d0
 8015790:	0801a618 	.word	0x0801a618

08015794 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b08a      	sub	sp, #40	@ 0x28
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801579e:	2300      	movs	r3, #0
 80157a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80157a2:	2300      	movs	r3, #0
 80157a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80157a6:	2300      	movs	r3, #0
 80157a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80157aa:	2300      	movs	r3, #0
 80157ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80157ae:	2300      	movs	r3, #0
 80157b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80157b2:	4b28      	ldr	r3, [pc, #160]	@ (8015854 <ip_reass_remove_oldest_datagram+0xc0>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80157b8:	e030      	b.n	801581c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80157ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157bc:	695a      	ldr	r2, [r3, #20]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	68db      	ldr	r3, [r3, #12]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d10c      	bne.n	80157e0 <ip_reass_remove_oldest_datagram+0x4c>
 80157c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c8:	699a      	ldr	r2, [r3, #24]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	691b      	ldr	r3, [r3, #16]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d106      	bne.n	80157e0 <ip_reass_remove_oldest_datagram+0x4c>
 80157d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d4:	899a      	ldrh	r2, [r3, #12]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	889b      	ldrh	r3, [r3, #4]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	429a      	cmp	r2, r3
 80157de:	d014      	beq.n	801580a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	3301      	adds	r3, #1
 80157e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80157e6:	6a3b      	ldr	r3, [r7, #32]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d104      	bne.n	80157f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80157ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80157f0:	69fb      	ldr	r3, [r7, #28]
 80157f2:	61bb      	str	r3, [r7, #24]
 80157f4:	e009      	b.n	801580a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80157f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157f8:	7fda      	ldrb	r2, [r3, #31]
 80157fa:	6a3b      	ldr	r3, [r7, #32]
 80157fc:	7fdb      	ldrb	r3, [r3, #31]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d803      	bhi.n	801580a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015804:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d001      	beq.n	8015816 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015814:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801581e:	2b00      	cmp	r3, #0
 8015820:	d1cb      	bne.n	80157ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015822:	6a3b      	ldr	r3, [r7, #32]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d008      	beq.n	801583a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015828:	69b9      	ldr	r1, [r7, #24]
 801582a:	6a38      	ldr	r0, [r7, #32]
 801582c:	f7ff ff0e 	bl	801564c <ip_reass_free_complete_datagram>
 8015830:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015832:	697a      	ldr	r2, [r7, #20]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	4413      	add	r3, r2
 8015838:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801583a:	697a      	ldr	r2, [r7, #20]
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	429a      	cmp	r2, r3
 8015840:	da02      	bge.n	8015848 <ip_reass_remove_oldest_datagram+0xb4>
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	2b01      	cmp	r3, #1
 8015846:	dcac      	bgt.n	80157a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015848:	697b      	ldr	r3, [r7, #20]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3728      	adds	r7, #40	@ 0x28
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
 8015852:	bf00      	nop
 8015854:	200085cc 	.word	0x200085cc

08015858 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015862:	2004      	movs	r0, #4
 8015864:	f7f7 fa44 	bl	800ccf0 <memp_malloc>
 8015868:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d110      	bne.n	8015892 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015870:	6839      	ldr	r1, [r7, #0]
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f7ff ff8e 	bl	8015794 <ip_reass_remove_oldest_datagram>
 8015878:	4602      	mov	r2, r0
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	4293      	cmp	r3, r2
 801587e:	dc03      	bgt.n	8015888 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015880:	2004      	movs	r0, #4
 8015882:	f7f7 fa35 	bl	800ccf0 <memp_malloc>
 8015886:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d101      	bne.n	8015892 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801588e:	2300      	movs	r3, #0
 8015890:	e016      	b.n	80158c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015892:	2220      	movs	r2, #32
 8015894:	2100      	movs	r1, #0
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	f001 fc29 	bl	80170ee <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	220f      	movs	r2, #15
 80158a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80158a2:	4b09      	ldr	r3, [pc, #36]	@ (80158c8 <ip_reass_enqueue_new_datagram+0x70>)
 80158a4:	681a      	ldr	r2, [r3, #0]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80158aa:	4a07      	ldr	r2, [pc, #28]	@ (80158c8 <ip_reass_enqueue_new_datagram+0x70>)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	3308      	adds	r3, #8
 80158b4:	2214      	movs	r2, #20
 80158b6:	6879      	ldr	r1, [r7, #4]
 80158b8:	4618      	mov	r0, r3
 80158ba:	f001 fc8e 	bl	80171da <memcpy>
  return ipr;
 80158be:	68fb      	ldr	r3, [r7, #12]
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3710      	adds	r7, #16
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}
 80158c8:	200085cc 	.word	0x200085cc

080158cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80158d6:	4b10      	ldr	r3, [pc, #64]	@ (8015918 <ip_reass_dequeue_datagram+0x4c>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	429a      	cmp	r2, r3
 80158de:	d104      	bne.n	80158ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4a0c      	ldr	r2, [pc, #48]	@ (8015918 <ip_reass_dequeue_datagram+0x4c>)
 80158e6:	6013      	str	r3, [r2, #0]
 80158e8:	e00d      	b.n	8015906 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d106      	bne.n	80158fe <ip_reass_dequeue_datagram+0x32>
 80158f0:	4b0a      	ldr	r3, [pc, #40]	@ (801591c <ip_reass_dequeue_datagram+0x50>)
 80158f2:	f240 1245 	movw	r2, #325	@ 0x145
 80158f6:	490a      	ldr	r1, [pc, #40]	@ (8015920 <ip_reass_dequeue_datagram+0x54>)
 80158f8:	480a      	ldr	r0, [pc, #40]	@ (8015924 <ip_reass_dequeue_datagram+0x58>)
 80158fa:	f001 fb93 	bl	8017024 <iprintf>
    prev->next = ipr->next;
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015906:	6879      	ldr	r1, [r7, #4]
 8015908:	2004      	movs	r0, #4
 801590a:	f7f7 fa61 	bl	800cdd0 <memp_free>
}
 801590e:	bf00      	nop
 8015910:	3708      	adds	r7, #8
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
 8015916:	bf00      	nop
 8015918:	200085cc 	.word	0x200085cc
 801591c:	0801a574 	.word	0x0801a574
 8015920:	0801a63c 	.word	0x0801a63c
 8015924:	0801a5bc 	.word	0x0801a5bc

08015928 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b08c      	sub	sp, #48	@ 0x30
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015934:	2300      	movs	r3, #0
 8015936:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015938:	2301      	movs	r3, #1
 801593a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015942:	69fb      	ldr	r3, [r7, #28]
 8015944:	885b      	ldrh	r3, [r3, #2]
 8015946:	b29b      	uxth	r3, r3
 8015948:	4618      	mov	r0, r3
 801594a:	f7f6 fd5d 	bl	800c408 <lwip_htons>
 801594e:	4603      	mov	r3, r0
 8015950:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015952:	69fb      	ldr	r3, [r7, #28]
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	f003 030f 	and.w	r3, r3, #15
 801595a:	b2db      	uxtb	r3, r3
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015960:	7e7b      	ldrb	r3, [r7, #25]
 8015962:	b29b      	uxth	r3, r3
 8015964:	8b7a      	ldrh	r2, [r7, #26]
 8015966:	429a      	cmp	r2, r3
 8015968:	d202      	bcs.n	8015970 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801596a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801596e:	e135      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015970:	7e7b      	ldrb	r3, [r7, #25]
 8015972:	b29b      	uxth	r3, r3
 8015974:	8b7a      	ldrh	r2, [r7, #26]
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	88db      	ldrh	r3, [r3, #6]
 801597e:	b29b      	uxth	r3, r3
 8015980:	4618      	mov	r0, r3
 8015982:	f7f6 fd41 	bl	800c408 <lwip_htons>
 8015986:	4603      	mov	r3, r0
 8015988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801598c:	b29b      	uxth	r3, r3
 801598e:	00db      	lsls	r3, r3, #3
 8015990:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801599a:	2200      	movs	r2, #0
 801599c:	701a      	strb	r2, [r3, #0]
 801599e:	2200      	movs	r2, #0
 80159a0:	705a      	strb	r2, [r3, #1]
 80159a2:	2200      	movs	r2, #0
 80159a4:	709a      	strb	r2, [r3, #2]
 80159a6:	2200      	movs	r2, #0
 80159a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80159aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ac:	8afa      	ldrh	r2, [r7, #22]
 80159ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80159b0:	8afa      	ldrh	r2, [r7, #22]
 80159b2:	8b7b      	ldrh	r3, [r7, #26]
 80159b4:	4413      	add	r3, r2
 80159b6:	b29a      	uxth	r2, r3
 80159b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80159bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159be:	88db      	ldrh	r3, [r3, #6]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	8afa      	ldrh	r2, [r7, #22]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d902      	bls.n	80159ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80159cc:	e106      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80159d4:	e068      	b.n	8015aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80159d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80159dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159de:	889b      	ldrh	r3, [r3, #4]
 80159e0:	b29a      	uxth	r2, r3
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	889b      	ldrh	r3, [r3, #4]
 80159e6:	b29b      	uxth	r3, r3
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d235      	bcs.n	8015a58 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80159ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80159f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d020      	beq.n	8015a3a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80159f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159fa:	889b      	ldrh	r3, [r3, #4]
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a00:	88db      	ldrh	r3, [r3, #6]
 8015a02:	b29b      	uxth	r3, r3
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d307      	bcc.n	8015a18 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a0a:	88db      	ldrh	r3, [r3, #6]
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	889b      	ldrh	r3, [r3, #4]
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	429a      	cmp	r2, r3
 8015a16:	d902      	bls.n	8015a1e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015a1c:	e0de      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a20:	68ba      	ldr	r2, [r7, #8]
 8015a22:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a26:	88db      	ldrh	r3, [r3, #6]
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a2c:	889b      	ldrh	r3, [r3, #4]
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d03d      	beq.n	8015ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015a34:	2300      	movs	r3, #0
 8015a36:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015a38:	e03a      	b.n	8015ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a3c:	88db      	ldrh	r3, [r3, #6]
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	889b      	ldrh	r3, [r3, #4]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d902      	bls.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015a4e:	e0c5      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	68ba      	ldr	r2, [r7, #8]
 8015a54:	605a      	str	r2, [r3, #4]
      break;
 8015a56:	e02b      	b.n	8015ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a5a:	889b      	ldrh	r3, [r3, #4]
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	889b      	ldrh	r3, [r3, #4]
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d102      	bne.n	8015a6e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015a6c:	e0b6      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a70:	889b      	ldrh	r3, [r3, #4]
 8015a72:	b29a      	uxth	r2, r3
 8015a74:	693b      	ldr	r3, [r7, #16]
 8015a76:	88db      	ldrh	r3, [r3, #6]
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d202      	bcs.n	8015a84 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015a82:	e0ab      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d009      	beq.n	8015a9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a8c:	88db      	ldrh	r3, [r3, #6]
 8015a8e:	b29a      	uxth	r2, r3
 8015a90:	693b      	ldr	r3, [r7, #16]
 8015a92:	889b      	ldrh	r3, [r3, #4]
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d001      	beq.n	8015a9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d193      	bne.n	80159d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015aae:	e000      	b.n	8015ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015ab0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d12d      	bne.n	8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d01c      	beq.n	8015af8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ac0:	88db      	ldrh	r3, [r3, #6]
 8015ac2:	b29a      	uxth	r2, r3
 8015ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac6:	889b      	ldrh	r3, [r3, #4]
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	429a      	cmp	r2, r3
 8015acc:	d906      	bls.n	8015adc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015ace:	4b45      	ldr	r3, [pc, #276]	@ (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ad0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015ad4:	4944      	ldr	r1, [pc, #272]	@ (8015be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015ad6:	4845      	ldr	r0, [pc, #276]	@ (8015bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ad8:	f001 faa4 	bl	8017024 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ade:	68ba      	ldr	r2, [r7, #8]
 8015ae0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ae4:	88db      	ldrh	r3, [r3, #6]
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aea:	889b      	ldrh	r3, [r3, #4]
 8015aec:	b29b      	uxth	r3, r3
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d010      	beq.n	8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	623b      	str	r3, [r7, #32]
 8015af6:	e00d      	b.n	8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d006      	beq.n	8015b0e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015b00:	4b38      	ldr	r3, [pc, #224]	@ (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b02:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015b06:	493a      	ldr	r1, [pc, #232]	@ (8015bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015b08:	4838      	ldr	r0, [pc, #224]	@ (8015bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b0a:	f001 fa8b 	bl	8017024 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	68ba      	ldr	r2, [r7, #8]
 8015b12:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d105      	bne.n	8015b26 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	7f9b      	ldrb	r3, [r3, #30]
 8015b1e:	f003 0301 	and.w	r3, r3, #1
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d059      	beq.n	8015bda <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015b26:	6a3b      	ldr	r3, [r7, #32]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d04f      	beq.n	8015bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d006      	beq.n	8015b42 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	889b      	ldrh	r3, [r3, #4]
 8015b3c:	b29b      	uxth	r3, r3
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d002      	beq.n	8015b48 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	623b      	str	r3, [r7, #32]
 8015b46:	e041      	b.n	8015bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015b52:	e012      	b.n	8015b7a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b5c:	88db      	ldrh	r3, [r3, #6]
 8015b5e:	b29a      	uxth	r2, r3
 8015b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b62:	889b      	ldrh	r3, [r3, #4]
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d002      	beq.n	8015b70 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	623b      	str	r3, [r7, #32]
            break;
 8015b6e:	e007      	b.n	8015b80 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b72:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d1e9      	bne.n	8015b54 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015b80:	6a3b      	ldr	r3, [r7, #32]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d022      	beq.n	8015bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d106      	bne.n	8015b9c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015b8e:	4b15      	ldr	r3, [pc, #84]	@ (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b90:	f240 12df 	movw	r2, #479	@ 0x1df
 8015b94:	4917      	ldr	r1, [pc, #92]	@ (8015bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015b96:	4815      	ldr	r0, [pc, #84]	@ (8015bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b98:	f001 fa44 	bl	8017024 <iprintf>
          LWIP_ASSERT("sanity check",
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	685b      	ldr	r3, [r3, #4]
 8015ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d106      	bne.n	8015bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015baa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015bae:	4911      	ldr	r1, [pc, #68]	@ (8015bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015bb0:	480e      	ldr	r0, [pc, #56]	@ (8015bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bb2:	f001 fa37 	bl	8017024 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d006      	beq.n	8015bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015bbe:	4b09      	ldr	r3, [pc, #36]	@ (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015bc0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015bc4:	490c      	ldr	r1, [pc, #48]	@ (8015bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015bc6:	4809      	ldr	r0, [pc, #36]	@ (8015bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bc8:	f001 fa2c 	bl	8017024 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015bcc:	6a3b      	ldr	r3, [r7, #32]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	bf14      	ite	ne
 8015bd2:	2301      	movne	r3, #1
 8015bd4:	2300      	moveq	r3, #0
 8015bd6:	b2db      	uxtb	r3, r3
 8015bd8:	e000      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015bda:	2300      	movs	r3, #0
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3730      	adds	r7, #48	@ 0x30
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	0801a574 	.word	0x0801a574
 8015be8:	0801a658 	.word	0x0801a658
 8015bec:	0801a5bc 	.word	0x0801a5bc
 8015bf0:	0801a678 	.word	0x0801a678
 8015bf4:	0801a6b0 	.word	0x0801a6b0
 8015bf8:	0801a6c0 	.word	0x0801a6c0

08015bfc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b08e      	sub	sp, #56	@ 0x38
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	685b      	ldr	r3, [r3, #4]
 8015c08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	f003 030f 	and.w	r3, r3, #15
 8015c12:	b2db      	uxtb	r3, r3
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	2b14      	cmp	r3, #20
 8015c1a:	f040 8171 	bne.w	8015f00 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c20:	88db      	ldrh	r3, [r3, #6]
 8015c22:	b29b      	uxth	r3, r3
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7f6 fbef 	bl	800c408 <lwip_htons>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	00db      	lsls	r3, r3, #3
 8015c34:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c38:	885b      	ldrh	r3, [r3, #2]
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7f6 fbe3 	bl	800c408 <lwip_htons>
 8015c42:	4603      	mov	r3, r0
 8015c44:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	f003 030f 	and.w	r3, r3, #15
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	009b      	lsls	r3, r3, #2
 8015c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015c56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015c5a:	b29b      	uxth	r3, r3
 8015c5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	f0c0 8150 	bcc.w	8015f04 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015c64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015c68:	b29b      	uxth	r3, r3
 8015c6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015c6c:	1ad3      	subs	r3, r2, r3
 8015c6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7f7 ffab 	bl	800dbcc <pbuf_clen>
 8015c76:	4603      	mov	r3, r0
 8015c78:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015c7a:	4b8c      	ldr	r3, [pc, #560]	@ (8015eac <ip4_reass+0x2b0>)
 8015c7c:	881b      	ldrh	r3, [r3, #0]
 8015c7e:	461a      	mov	r2, r3
 8015c80:	8c3b      	ldrh	r3, [r7, #32]
 8015c82:	4413      	add	r3, r2
 8015c84:	2b0a      	cmp	r3, #10
 8015c86:	dd10      	ble.n	8015caa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015c88:	8c3b      	ldrh	r3, [r7, #32]
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c8e:	f7ff fd81 	bl	8015794 <ip_reass_remove_oldest_datagram>
 8015c92:	4603      	mov	r3, r0
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 8137 	beq.w	8015f08 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015c9a:	4b84      	ldr	r3, [pc, #528]	@ (8015eac <ip4_reass+0x2b0>)
 8015c9c:	881b      	ldrh	r3, [r3, #0]
 8015c9e:	461a      	mov	r2, r3
 8015ca0:	8c3b      	ldrh	r3, [r7, #32]
 8015ca2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ca4:	2b0a      	cmp	r3, #10
 8015ca6:	f300 812f 	bgt.w	8015f08 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015caa:	4b81      	ldr	r3, [pc, #516]	@ (8015eb0 <ip4_reass+0x2b4>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8015cb0:	e015      	b.n	8015cde <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cb4:	695a      	ldr	r2, [r3, #20]
 8015cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cb8:	68db      	ldr	r3, [r3, #12]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d10c      	bne.n	8015cd8 <ip4_reass+0xdc>
 8015cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cc0:	699a      	ldr	r2, [r3, #24]
 8015cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc4:	691b      	ldr	r3, [r3, #16]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d106      	bne.n	8015cd8 <ip4_reass+0xdc>
 8015cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ccc:	899a      	ldrh	r2, [r3, #12]
 8015cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cd0:	889b      	ldrh	r3, [r3, #4]
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d006      	beq.n	8015ce6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8015cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d1e6      	bne.n	8015cb2 <ip4_reass+0xb6>
 8015ce4:	e000      	b.n	8015ce8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015ce6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d109      	bne.n	8015d02 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015cee:	8c3b      	ldrh	r3, [r7, #32]
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015cf4:	f7ff fdb0 	bl	8015858 <ip_reass_enqueue_new_datagram>
 8015cf8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d11c      	bne.n	8015d3a <ip4_reass+0x13e>
      goto nullreturn;
 8015d00:	e105      	b.n	8015f0e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d04:	88db      	ldrh	r3, [r3, #6]
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7f6 fb7d 	bl	800c408 <lwip_htons>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d110      	bne.n	8015d3a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d1a:	89db      	ldrh	r3, [r3, #14]
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7f6 fb73 	bl	800c408 <lwip_htons>
 8015d22:	4603      	mov	r3, r0
 8015d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d006      	beq.n	8015d3a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d2e:	3308      	adds	r3, #8
 8015d30:	2214      	movs	r2, #20
 8015d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015d34:	4618      	mov	r0, r3
 8015d36:	f001 fa50 	bl	80171da <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d3c:	88db      	ldrh	r3, [r3, #6]
 8015d3e:	b29b      	uxth	r3, r3
 8015d40:	f003 0320 	and.w	r3, r3, #32
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	bf0c      	ite	eq
 8015d48:	2301      	moveq	r3, #1
 8015d4a:	2300      	movne	r3, #0
 8015d4c:	b2db      	uxtb	r3, r3
 8015d4e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015d50:	69fb      	ldr	r3, [r7, #28]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d00e      	beq.n	8015d74 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015d56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015d58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d5a:	4413      	add	r3, r2
 8015d5c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015d5e:	8b7a      	ldrh	r2, [r7, #26]
 8015d60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015d62:	429a      	cmp	r2, r3
 8015d64:	f0c0 80a0 	bcc.w	8015ea8 <ip4_reass+0x2ac>
 8015d68:	8b7b      	ldrh	r3, [r7, #26]
 8015d6a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	f200 809a 	bhi.w	8015ea8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015d74:	69fa      	ldr	r2, [r7, #28]
 8015d76:	6879      	ldr	r1, [r7, #4]
 8015d78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015d7a:	f7ff fdd5 	bl	8015928 <ip_reass_chain_frag_into_datagram_and_validate>
 8015d7e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015d86:	f000 809b 	beq.w	8015ec0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015d8a:	4b48      	ldr	r3, [pc, #288]	@ (8015eac <ip4_reass+0x2b0>)
 8015d8c:	881a      	ldrh	r2, [r3, #0]
 8015d8e:	8c3b      	ldrh	r3, [r7, #32]
 8015d90:	4413      	add	r3, r2
 8015d92:	b29a      	uxth	r2, r3
 8015d94:	4b45      	ldr	r3, [pc, #276]	@ (8015eac <ip4_reass+0x2b0>)
 8015d96:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015d98:	69fb      	ldr	r3, [r7, #28]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d00d      	beq.n	8015dba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015d9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015da2:	4413      	add	r3, r2
 8015da4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015da8:	8a7a      	ldrh	r2, [r7, #18]
 8015daa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dae:	7f9b      	ldrb	r3, [r3, #30]
 8015db0:	f043 0301 	orr.w	r3, r3, #1
 8015db4:	b2da      	uxtb	r2, r3
 8015db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015db8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	2b01      	cmp	r3, #1
 8015dbe:	d171      	bne.n	8015ea4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dc2:	8b9b      	ldrh	r3, [r3, #28]
 8015dc4:	3314      	adds	r3, #20
 8015dc6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	685b      	ldr	r3, [r3, #4]
 8015dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ddc:	3308      	adds	r3, #8
 8015dde:	2214      	movs	r2, #20
 8015de0:	4619      	mov	r1, r3
 8015de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015de4:	f001 f9f9 	bl	80171da <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015de8:	8a3b      	ldrh	r3, [r7, #16]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7f6 fb0c 	bl	800c408 <lwip_htons>
 8015df0:	4603      	mov	r3, r0
 8015df2:	461a      	mov	r2, r3
 8015df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015df6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	719a      	strb	r2, [r3, #6]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e04:	2200      	movs	r2, #0
 8015e06:	729a      	strb	r2, [r3, #10]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015e12:	e00d      	b.n	8015e30 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015e1a:	2114      	movs	r1, #20
 8015e1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015e1e:	f7f7 fdc7 	bl	800d9b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015e22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f7f7 ff0b 	bl	800dc40 <pbuf_cat>
      r = iprh->next_pbuf;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d1ee      	bne.n	8015e14 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015e36:	4b1e      	ldr	r3, [pc, #120]	@ (8015eb0 <ip4_reass+0x2b4>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d102      	bne.n	8015e46 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015e40:	2300      	movs	r3, #0
 8015e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e44:	e010      	b.n	8015e68 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015e46:	4b1a      	ldr	r3, [pc, #104]	@ (8015eb0 <ip4_reass+0x2b4>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e4c:	e007      	b.n	8015e5e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d006      	beq.n	8015e66 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d1f4      	bne.n	8015e4e <ip4_reass+0x252>
 8015e64:	e000      	b.n	8015e68 <ip4_reass+0x26c>
          break;
 8015e66:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e6c:	f7ff fd2e 	bl	80158cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f7f7 feab 	bl	800dbcc <pbuf_clen>
 8015e76:	4603      	mov	r3, r0
 8015e78:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8015eac <ip4_reass+0x2b0>)
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	8c3a      	ldrh	r2, [r7, #32]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d906      	bls.n	8015e92 <ip4_reass+0x296>
 8015e84:	4b0b      	ldr	r3, [pc, #44]	@ (8015eb4 <ip4_reass+0x2b8>)
 8015e86:	f240 229b 	movw	r2, #667	@ 0x29b
 8015e8a:	490b      	ldr	r1, [pc, #44]	@ (8015eb8 <ip4_reass+0x2bc>)
 8015e8c:	480b      	ldr	r0, [pc, #44]	@ (8015ebc <ip4_reass+0x2c0>)
 8015e8e:	f001 f8c9 	bl	8017024 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015e92:	4b06      	ldr	r3, [pc, #24]	@ (8015eac <ip4_reass+0x2b0>)
 8015e94:	881a      	ldrh	r2, [r3, #0]
 8015e96:	8c3b      	ldrh	r3, [r7, #32]
 8015e98:	1ad3      	subs	r3, r2, r3
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	4b03      	ldr	r3, [pc, #12]	@ (8015eac <ip4_reass+0x2b0>)
 8015e9e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	e038      	b.n	8015f16 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	e036      	b.n	8015f16 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015ea8:	bf00      	nop
 8015eaa:	e00a      	b.n	8015ec2 <ip4_reass+0x2c6>
 8015eac:	200085d0 	.word	0x200085d0
 8015eb0:	200085cc 	.word	0x200085cc
 8015eb4:	0801a574 	.word	0x0801a574
 8015eb8:	0801a6e4 	.word	0x0801a6e4
 8015ebc:	0801a5bc 	.word	0x0801a5bc
    goto nullreturn_ipr;
 8015ec0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d106      	bne.n	8015ed6 <ip4_reass+0x2da>
 8015ec8:	4b15      	ldr	r3, [pc, #84]	@ (8015f20 <ip4_reass+0x324>)
 8015eca:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015ece:	4915      	ldr	r1, [pc, #84]	@ (8015f24 <ip4_reass+0x328>)
 8015ed0:	4815      	ldr	r0, [pc, #84]	@ (8015f28 <ip4_reass+0x32c>)
 8015ed2:	f001 f8a7 	bl	8017024 <iprintf>
  if (ipr->p == NULL) {
 8015ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d116      	bne.n	8015f0c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015ede:	4b13      	ldr	r3, [pc, #76]	@ (8015f2c <ip4_reass+0x330>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d006      	beq.n	8015ef6 <ip4_reass+0x2fa>
 8015ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8015f20 <ip4_reass+0x324>)
 8015eea:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015eee:	4910      	ldr	r1, [pc, #64]	@ (8015f30 <ip4_reass+0x334>)
 8015ef0:	480d      	ldr	r0, [pc, #52]	@ (8015f28 <ip4_reass+0x32c>)
 8015ef2:	f001 f897 	bl	8017024 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015ef6:	2100      	movs	r1, #0
 8015ef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015efa:	f7ff fce7 	bl	80158cc <ip_reass_dequeue_datagram>
 8015efe:	e006      	b.n	8015f0e <ip4_reass+0x312>
    goto nullreturn;
 8015f00:	bf00      	nop
 8015f02:	e004      	b.n	8015f0e <ip4_reass+0x312>
    goto nullreturn;
 8015f04:	bf00      	nop
 8015f06:	e002      	b.n	8015f0e <ip4_reass+0x312>
      goto nullreturn;
 8015f08:	bf00      	nop
 8015f0a:	e000      	b.n	8015f0e <ip4_reass+0x312>
  }

nullreturn:
 8015f0c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f7f7 fdd4 	bl	800dabc <pbuf_free>
  return NULL;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3738      	adds	r7, #56	@ 0x38
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	0801a574 	.word	0x0801a574
 8015f24:	0801a700 	.word	0x0801a700
 8015f28:	0801a5bc 	.word	0x0801a5bc
 8015f2c:	200085cc 	.word	0x200085cc
 8015f30:	0801a70c 	.word	0x0801a70c

08015f34 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015f38:	2005      	movs	r0, #5
 8015f3a:	f7f6 fed9 	bl	800ccf0 <memp_malloc>
 8015f3e:	4603      	mov	r3, r0
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	bd80      	pop	{r7, pc}

08015f44 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d106      	bne.n	8015f60 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015f52:	4b07      	ldr	r3, [pc, #28]	@ (8015f70 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015f54:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015f58:	4906      	ldr	r1, [pc, #24]	@ (8015f74 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015f5a:	4807      	ldr	r0, [pc, #28]	@ (8015f78 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015f5c:	f001 f862 	bl	8017024 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015f60:	6879      	ldr	r1, [r7, #4]
 8015f62:	2005      	movs	r0, #5
 8015f64:	f7f6 ff34 	bl	800cdd0 <memp_free>
}
 8015f68:	bf00      	nop
 8015f6a:	3708      	adds	r7, #8
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	0801a574 	.word	0x0801a574
 8015f74:	0801a72c 	.word	0x0801a72c
 8015f78:	0801a5bc 	.word	0x0801a5bc

08015f7c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b084      	sub	sp, #16
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d106      	bne.n	8015f9c <ipfrag_free_pbuf_custom+0x20>
 8015f8e:	4b11      	ldr	r3, [pc, #68]	@ (8015fd4 <ipfrag_free_pbuf_custom+0x58>)
 8015f90:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015f94:	4910      	ldr	r1, [pc, #64]	@ (8015fd8 <ipfrag_free_pbuf_custom+0x5c>)
 8015f96:	4811      	ldr	r0, [pc, #68]	@ (8015fdc <ipfrag_free_pbuf_custom+0x60>)
 8015f98:	f001 f844 	bl	8017024 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015f9c:	68fa      	ldr	r2, [r7, #12]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d006      	beq.n	8015fb2 <ipfrag_free_pbuf_custom+0x36>
 8015fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8015fd4 <ipfrag_free_pbuf_custom+0x58>)
 8015fa6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015faa:	490d      	ldr	r1, [pc, #52]	@ (8015fe0 <ipfrag_free_pbuf_custom+0x64>)
 8015fac:	480b      	ldr	r0, [pc, #44]	@ (8015fdc <ipfrag_free_pbuf_custom+0x60>)
 8015fae:	f001 f839 	bl	8017024 <iprintf>
  if (pcr->original != NULL) {
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	695b      	ldr	r3, [r3, #20]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d004      	beq.n	8015fc4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	695b      	ldr	r3, [r3, #20]
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7f7 fd7c 	bl	800dabc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015fc4:	68f8      	ldr	r0, [r7, #12]
 8015fc6:	f7ff ffbd 	bl	8015f44 <ip_frag_free_pbuf_custom_ref>
}
 8015fca:	bf00      	nop
 8015fcc:	3710      	adds	r7, #16
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}
 8015fd2:	bf00      	nop
 8015fd4:	0801a574 	.word	0x0801a574
 8015fd8:	0801a738 	.word	0x0801a738
 8015fdc:	0801a5bc 	.word	0x0801a5bc
 8015fe0:	0801a744 	.word	0x0801a744

08015fe4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b094      	sub	sp, #80	@ 0x50
 8015fe8:	af02      	add	r7, sp, #8
 8015fea:	60f8      	str	r0, [r7, #12]
 8015fec:	60b9      	str	r1, [r7, #8]
 8015fee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015ff6:	68bb      	ldr	r3, [r7, #8]
 8015ff8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ffa:	3b14      	subs	r3, #20
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	da00      	bge.n	8016002 <ip4_frag+0x1e>
 8016000:	3307      	adds	r3, #7
 8016002:	10db      	asrs	r3, r3, #3
 8016004:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016006:	2314      	movs	r3, #20
 8016008:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	685b      	ldr	r3, [r3, #4]
 801600e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016012:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016016:	781b      	ldrb	r3, [r3, #0]
 8016018:	f003 030f 	and.w	r3, r3, #15
 801601c:	b2db      	uxtb	r3, r3
 801601e:	009b      	lsls	r3, r3, #2
 8016020:	b2db      	uxtb	r3, r3
 8016022:	2b14      	cmp	r3, #20
 8016024:	d002      	beq.n	801602c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016026:	f06f 0305 	mvn.w	r3, #5
 801602a:	e110      	b.n	801624e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	895b      	ldrh	r3, [r3, #10]
 8016030:	2b13      	cmp	r3, #19
 8016032:	d809      	bhi.n	8016048 <ip4_frag+0x64>
 8016034:	4b88      	ldr	r3, [pc, #544]	@ (8016258 <ip4_frag+0x274>)
 8016036:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801603a:	4988      	ldr	r1, [pc, #544]	@ (801625c <ip4_frag+0x278>)
 801603c:	4888      	ldr	r0, [pc, #544]	@ (8016260 <ip4_frag+0x27c>)
 801603e:	f000 fff1 	bl	8017024 <iprintf>
 8016042:	f06f 0305 	mvn.w	r3, #5
 8016046:	e102      	b.n	801624e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801604a:	88db      	ldrh	r3, [r3, #6]
 801604c:	b29b      	uxth	r3, r3
 801604e:	4618      	mov	r0, r3
 8016050:	f7f6 f9da 	bl	800c408 <lwip_htons>
 8016054:	4603      	mov	r3, r0
 8016056:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016058:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801605a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801605e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016062:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016068:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	891b      	ldrh	r3, [r3, #8]
 801606e:	3b14      	subs	r3, #20
 8016070:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016074:	e0e1      	b.n	801623a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016076:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016078:	00db      	lsls	r3, r3, #3
 801607a:	b29b      	uxth	r3, r3
 801607c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016080:	4293      	cmp	r3, r2
 8016082:	bf28      	it	cs
 8016084:	4613      	movcs	r3, r2
 8016086:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016088:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801608c:	2114      	movs	r1, #20
 801608e:	200e      	movs	r0, #14
 8016090:	f7f7 fa30 	bl	800d4f4 <pbuf_alloc>
 8016094:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016098:	2b00      	cmp	r3, #0
 801609a:	f000 80d5 	beq.w	8016248 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a0:	895b      	ldrh	r3, [r3, #10]
 80160a2:	2b13      	cmp	r3, #19
 80160a4:	d806      	bhi.n	80160b4 <ip4_frag+0xd0>
 80160a6:	4b6c      	ldr	r3, [pc, #432]	@ (8016258 <ip4_frag+0x274>)
 80160a8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80160ac:	496d      	ldr	r1, [pc, #436]	@ (8016264 <ip4_frag+0x280>)
 80160ae:	486c      	ldr	r0, [pc, #432]	@ (8016260 <ip4_frag+0x27c>)
 80160b0:	f000 ffb8 	bl	8017024 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80160b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	2214      	movs	r2, #20
 80160ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80160bc:	4618      	mov	r0, r3
 80160be:	f001 f88c 	bl	80171da <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80160c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80160c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80160ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80160ce:	e064      	b.n	801619a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	895a      	ldrh	r2, [r3, #10]
 80160d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80160d6:	1ad3      	subs	r3, r2, r3
 80160d8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	895b      	ldrh	r3, [r3, #10]
 80160de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d906      	bls.n	80160f2 <ip4_frag+0x10e>
 80160e4:	4b5c      	ldr	r3, [pc, #368]	@ (8016258 <ip4_frag+0x274>)
 80160e6:	f240 322d 	movw	r2, #813	@ 0x32d
 80160ea:	495f      	ldr	r1, [pc, #380]	@ (8016268 <ip4_frag+0x284>)
 80160ec:	485c      	ldr	r0, [pc, #368]	@ (8016260 <ip4_frag+0x27c>)
 80160ee:	f000 ff99 	bl	8017024 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80160f2:	8bfa      	ldrh	r2, [r7, #30]
 80160f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160f8:	4293      	cmp	r3, r2
 80160fa:	bf28      	it	cs
 80160fc:	4613      	movcs	r3, r2
 80160fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016102:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016106:	2b00      	cmp	r3, #0
 8016108:	d105      	bne.n	8016116 <ip4_frag+0x132>
        poff = 0;
 801610a:	2300      	movs	r3, #0
 801610c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	60fb      	str	r3, [r7, #12]
        continue;
 8016114:	e041      	b.n	801619a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016116:	f7ff ff0d 	bl	8015f34 <ip_frag_alloc_pbuf_custom_ref>
 801611a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801611c:	69bb      	ldr	r3, [r7, #24]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d103      	bne.n	801612a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016124:	f7f7 fcca 	bl	800dabc <pbuf_free>
        goto memerr;
 8016128:	e08f      	b.n	801624a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801612a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016130:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016132:	4413      	add	r3, r2
 8016134:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016138:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801613c:	9201      	str	r2, [sp, #4]
 801613e:	9300      	str	r3, [sp, #0]
 8016140:	4603      	mov	r3, r0
 8016142:	2241      	movs	r2, #65	@ 0x41
 8016144:	2000      	movs	r0, #0
 8016146:	f7f7 faff 	bl	800d748 <pbuf_alloced_custom>
 801614a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801614c:	697b      	ldr	r3, [r7, #20]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d106      	bne.n	8016160 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016152:	69b8      	ldr	r0, [r7, #24]
 8016154:	f7ff fef6 	bl	8015f44 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801615a:	f7f7 fcaf 	bl	800dabc <pbuf_free>
        goto memerr;
 801615e:	e074      	b.n	801624a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016160:	68f8      	ldr	r0, [r7, #12]
 8016162:	f7f7 fd4b 	bl	800dbfc <pbuf_ref>
      pcr->original = p;
 8016166:	69bb      	ldr	r3, [r7, #24]
 8016168:	68fa      	ldr	r2, [r7, #12]
 801616a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801616c:	69bb      	ldr	r3, [r7, #24]
 801616e:	4a3f      	ldr	r2, [pc, #252]	@ (801626c <ip4_frag+0x288>)
 8016170:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016172:	6979      	ldr	r1, [r7, #20]
 8016174:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016176:	f7f7 fd63 	bl	800dc40 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801617a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801617e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016182:	1ad3      	subs	r3, r2, r3
 8016184:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016188:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801618c:	2b00      	cmp	r3, #0
 801618e:	d004      	beq.n	801619a <ip4_frag+0x1b6>
        poff = 0;
 8016190:	2300      	movs	r3, #0
 8016192:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801619a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d196      	bne.n	80160d0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80161a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80161a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80161a8:	4413      	add	r3, r2
 80161aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80161b0:	f1a3 0213 	sub.w	r2, r3, #19
 80161b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80161b8:	429a      	cmp	r2, r3
 80161ba:	bfcc      	ite	gt
 80161bc:	2301      	movgt	r3, #1
 80161be:	2300      	movle	r3, #0
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80161c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80161c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80161ce:	6a3b      	ldr	r3, [r7, #32]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d002      	beq.n	80161da <ip4_frag+0x1f6>
 80161d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d003      	beq.n	80161e2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80161da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80161dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80161e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80161e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f6 f90f 	bl	800c408 <lwip_htons>
 80161ea:	4603      	mov	r3, r0
 80161ec:	461a      	mov	r2, r3
 80161ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161f0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80161f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80161f4:	3314      	adds	r3, #20
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7f6 f905 	bl	800c408 <lwip_htons>
 80161fe:	4603      	mov	r3, r0
 8016200:	461a      	mov	r2, r3
 8016202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016204:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016208:	2200      	movs	r2, #0
 801620a:	729a      	strb	r2, [r3, #10]
 801620c:	2200      	movs	r2, #0
 801620e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	695b      	ldr	r3, [r3, #20]
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016218:	68b8      	ldr	r0, [r7, #8]
 801621a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801621c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801621e:	f7f7 fc4d 	bl	800dabc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016222:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016226:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016228:	1ad3      	subs	r3, r2, r3
 801622a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801622e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016232:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016234:	4413      	add	r3, r2
 8016236:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801623a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801623e:	2b00      	cmp	r3, #0
 8016240:	f47f af19 	bne.w	8016076 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016244:	2300      	movs	r3, #0
 8016246:	e002      	b.n	801624e <ip4_frag+0x26a>
      goto memerr;
 8016248:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801624a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801624e:	4618      	mov	r0, r3
 8016250:	3748      	adds	r7, #72	@ 0x48
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	0801a574 	.word	0x0801a574
 801625c:	0801a750 	.word	0x0801a750
 8016260:	0801a5bc 	.word	0x0801a5bc
 8016264:	0801a76c 	.word	0x0801a76c
 8016268:	0801a78c 	.word	0x0801a78c
 801626c:	08015f7d 	.word	0x08015f7d

08016270 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b086      	sub	sp, #24
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801627a:	230e      	movs	r3, #14
 801627c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	895b      	ldrh	r3, [r3, #10]
 8016282:	2b0e      	cmp	r3, #14
 8016284:	d96e      	bls.n	8016364 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	7bdb      	ldrb	r3, [r3, #15]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d106      	bne.n	801629c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016294:	3301      	adds	r3, #1
 8016296:	b2da      	uxtb	r2, r3
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	7b1a      	ldrb	r2, [r3, #12]
 80162a6:	7b5b      	ldrb	r3, [r3, #13]
 80162a8:	021b      	lsls	r3, r3, #8
 80162aa:	4313      	orrs	r3, r2
 80162ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80162ae:	693b      	ldr	r3, [r7, #16]
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	f003 0301 	and.w	r3, r3, #1
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d023      	beq.n	8016302 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d10f      	bne.n	80162e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	785b      	ldrb	r3, [r3, #1]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d11b      	bne.n	8016302 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80162ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80162d0:	d117      	bne.n	8016302 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	7b5b      	ldrb	r3, [r3, #13]
 80162d6:	f043 0310 	orr.w	r3, r3, #16
 80162da:	b2da      	uxtb	r2, r3
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	735a      	strb	r2, [r3, #13]
 80162e0:	e00f      	b.n	8016302 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	2206      	movs	r2, #6
 80162e6:	4928      	ldr	r1, [pc, #160]	@ (8016388 <ethernet_input+0x118>)
 80162e8:	4618      	mov	r0, r3
 80162ea:	f000 fef0 	bl	80170ce <memcmp>
 80162ee:	4603      	mov	r3, r0
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d106      	bne.n	8016302 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	7b5b      	ldrb	r3, [r3, #13]
 80162f8:	f043 0308 	orr.w	r3, r3, #8
 80162fc:	b2da      	uxtb	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016302:	89fb      	ldrh	r3, [r7, #14]
 8016304:	2b08      	cmp	r3, #8
 8016306:	d003      	beq.n	8016310 <ethernet_input+0xa0>
 8016308:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801630c:	d014      	beq.n	8016338 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801630e:	e032      	b.n	8016376 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016316:	f003 0308 	and.w	r3, r3, #8
 801631a:	2b00      	cmp	r3, #0
 801631c:	d024      	beq.n	8016368 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801631e:	8afb      	ldrh	r3, [r7, #22]
 8016320:	4619      	mov	r1, r3
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7f7 fb44 	bl	800d9b0 <pbuf_remove_header>
 8016328:	4603      	mov	r3, r0
 801632a:	2b00      	cmp	r3, #0
 801632c:	d11e      	bne.n	801636c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801632e:	6839      	ldr	r1, [r7, #0]
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f7fe ff21 	bl	8015178 <ip4_input>
      break;
 8016336:	e013      	b.n	8016360 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801633e:	f003 0308 	and.w	r3, r3, #8
 8016342:	2b00      	cmp	r3, #0
 8016344:	d014      	beq.n	8016370 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016346:	8afb      	ldrh	r3, [r7, #22]
 8016348:	4619      	mov	r1, r3
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f7f7 fb30 	bl	800d9b0 <pbuf_remove_header>
 8016350:	4603      	mov	r3, r0
 8016352:	2b00      	cmp	r3, #0
 8016354:	d10e      	bne.n	8016374 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016356:	6839      	ldr	r1, [r7, #0]
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f7fe f8c1 	bl	80144e0 <etharp_input>
      break;
 801635e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016360:	2300      	movs	r3, #0
 8016362:	e00c      	b.n	801637e <ethernet_input+0x10e>
    goto free_and_return;
 8016364:	bf00      	nop
 8016366:	e006      	b.n	8016376 <ethernet_input+0x106>
        goto free_and_return;
 8016368:	bf00      	nop
 801636a:	e004      	b.n	8016376 <ethernet_input+0x106>
        goto free_and_return;
 801636c:	bf00      	nop
 801636e:	e002      	b.n	8016376 <ethernet_input+0x106>
        goto free_and_return;
 8016370:	bf00      	nop
 8016372:	e000      	b.n	8016376 <ethernet_input+0x106>
        goto free_and_return;
 8016374:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f7f7 fba0 	bl	800dabc <pbuf_free>
  return ERR_OK;
 801637c:	2300      	movs	r3, #0
}
 801637e:	4618      	mov	r0, r3
 8016380:	3718      	adds	r7, #24
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	0801a94c 	.word	0x0801a94c

0801638c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801638c:	b580      	push	{r7, lr}
 801638e:	b086      	sub	sp, #24
 8016390:	af00      	add	r7, sp, #0
 8016392:	60f8      	str	r0, [r7, #12]
 8016394:	60b9      	str	r1, [r7, #8]
 8016396:	607a      	str	r2, [r7, #4]
 8016398:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801639a:	8c3b      	ldrh	r3, [r7, #32]
 801639c:	4618      	mov	r0, r3
 801639e:	f7f6 f833 	bl	800c408 <lwip_htons>
 80163a2:	4603      	mov	r3, r0
 80163a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80163a6:	210e      	movs	r1, #14
 80163a8:	68b8      	ldr	r0, [r7, #8]
 80163aa:	f7f7 faf1 	bl	800d990 <pbuf_add_header>
 80163ae:	4603      	mov	r3, r0
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d125      	bne.n	8016400 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	8afa      	ldrh	r2, [r7, #22]
 80163be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	2206      	movs	r2, #6
 80163c4:	6839      	ldr	r1, [r7, #0]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 ff07 	bl	80171da <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	3306      	adds	r3, #6
 80163d0:	2206      	movs	r2, #6
 80163d2:	6879      	ldr	r1, [r7, #4]
 80163d4:	4618      	mov	r0, r3
 80163d6:	f000 ff00 	bl	80171da <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80163e0:	2b06      	cmp	r3, #6
 80163e2:	d006      	beq.n	80163f2 <ethernet_output+0x66>
 80163e4:	4b0a      	ldr	r3, [pc, #40]	@ (8016410 <ethernet_output+0x84>)
 80163e6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80163ea:	490a      	ldr	r1, [pc, #40]	@ (8016414 <ethernet_output+0x88>)
 80163ec:	480a      	ldr	r0, [pc, #40]	@ (8016418 <ethernet_output+0x8c>)
 80163ee:	f000 fe19 	bl	8017024 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	699b      	ldr	r3, [r3, #24]
 80163f6:	68b9      	ldr	r1, [r7, #8]
 80163f8:	68f8      	ldr	r0, [r7, #12]
 80163fa:	4798      	blx	r3
 80163fc:	4603      	mov	r3, r0
 80163fe:	e002      	b.n	8016406 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016400:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016402:	f06f 0301 	mvn.w	r3, #1
}
 8016406:	4618      	mov	r0, r3
 8016408:	3718      	adds	r7, #24
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}
 801640e:	bf00      	nop
 8016410:	0801a79c 	.word	0x0801a79c
 8016414:	0801a7d4 	.word	0x0801a7d4
 8016418:	0801a808 	.word	0x0801a808

0801641c <ADC_Test_Perform>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

uint8_t ADC_Test_Perform(void)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
	printf("Performing adc test\n");
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 8016422:	2201      	movs	r2, #1
 8016424:	490f      	ldr	r1, [pc, #60]	@ (8016464 <ADC_Test_Perform+0x48>)
 8016426:	4810      	ldr	r0, [pc, #64]	@ (8016468 <ADC_Test_Perform+0x4c>)
 8016428:	f7eb fe68 	bl	80020fc <HAL_ADC_Start_DMA>
 801642c:	4603      	mov	r3, r0
 801642e:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8016430:	79fb      	ldrb	r3, [r7, #7]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d001      	beq.n	801643a <ADC_Test_Perform+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
#endif
		return TEST_FAILED;
 8016436:	23ff      	movs	r3, #255	@ 0xff
 8016438:	e00f      	b.n	801645a <ADC_Test_Perform+0x3e>
	}

	while (!adc_ready);
 801643a:	bf00      	nop
 801643c:	4b0b      	ldr	r3, [pc, #44]	@ (801646c <ADC_Test_Perform+0x50>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d0fb      	beq.n	801643c <ADC_Test_Perform+0x20>
	adc_ready=0;
 8016444:	4b09      	ldr	r3, [pc, #36]	@ (801646c <ADC_Test_Perform+0x50>)
 8016446:	2200      	movs	r2, #0
 8016448:	601a      	str	r2, [r3, #0]

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801644a:	4b06      	ldr	r3, [pc, #24]	@ (8016464 <ADC_Test_Perform+0x48>)
 801644c:	881b      	ldrh	r3, [r3, #0]
 801644e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8016452:	d301      	bcc.n	8016458 <ADC_Test_Perform+0x3c>
 8016454:	2301      	movs	r3, #1
 8016456:	e000      	b.n	801645a <ADC_Test_Perform+0x3e>

	return TEST_FAILED;
 8016458:	23ff      	movs	r3, #255	@ 0xff
}
 801645a:	4618      	mov	r0, r3
 801645c:	3708      	adds	r7, #8
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}
 8016462:	bf00      	nop
 8016464:	200085d4 	.word	0x200085d4
 8016468:	200001e4 	.word	0x200001e4
 801646c:	200087d4 	.word	0x200087d4

08016470 <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
	adc_ready=1;
 8016478:	4b07      	ldr	r3, [pc, #28]	@ (8016498 <HAL_ADC_ConvCpltCallback+0x28>)
 801647a:	2201      	movs	r2, #1
 801647c:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801647e:	4807      	ldr	r0, [pc, #28]	@ (801649c <HAL_ADC_ConvCpltCallback+0x2c>)
 8016480:	f7eb ff3a 	bl	80022f8 <HAL_ADC_Stop_DMA>
 8016484:	4603      	mov	r3, r0
 8016486:	2b00      	cmp	r3, #0
 8016488:	d001      	beq.n	801648e <HAL_ADC_ConvCpltCallback+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
#endif
		Error_Handler();
 801648a:	f7ea fd4b 	bl	8000f24 <Error_Handler>
	}
}
 801648e:	bf00      	nop
 8016490:	3708      	adds	r7, #8
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
 8016496:	bf00      	nop
 8016498:	200087d4 	.word	0x200087d4
 801649c:	200001e4 	.word	0x200001e4

080164a0 <HW_Verification_Proccess>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void HW_Verification_Proccess(void)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 80164a4:	f000 f82a 	bl	80164fc <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 80164a8:	f7f5 fbaa 	bl	800bc00 <MX_LWIP_Process>
 80164ac:	e7fc      	b.n	80164a8 <HW_Verification_Proccess+0x8>
	...

080164b0 <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b086      	sub	sp, #24
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	60f8      	str	r0, [r7, #12]
 80164b8:	607a      	str	r2, [r7, #4]
 80164ba:	461a      	mov	r2, r3
 80164bc:	460b      	mov	r3, r1
 80164be:	72fb      	strb	r3, [r7, #11]
 80164c0:	4613      	mov	r3, r2
 80164c2:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 80164c4:	7afb      	ldrb	r3, [r7, #11]
 80164c6:	461a      	mov	r2, r3
 80164c8:	68f9      	ldr	r1, [r7, #12]
 80164ca:	480b      	ldr	r0, [pc, #44]	@ (80164f8 <Match_CRC+0x48>)
 80164cc:	f7ec fbce 	bl	8002c6c <HAL_CRC_Calculate>
 80164d0:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 80164d2:	7abb      	ldrb	r3, [r7, #10]
 80164d4:	461a      	mov	r2, r3
 80164d6:	6879      	ldr	r1, [r7, #4]
 80164d8:	4807      	ldr	r0, [pc, #28]	@ (80164f8 <Match_CRC+0x48>)
 80164da:	f7ec fbc7 	bl	8002c6c <HAL_CRC_Calculate>
 80164de:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 80164e0:	697a      	ldr	r2, [r7, #20]
 80164e2:	693b      	ldr	r3, [r7, #16]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d101      	bne.n	80164ec <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 80164e8:	2301      	movs	r3, #1
 80164ea:	e000      	b.n	80164ee <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 80164ec:	2300      	movs	r3, #0
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3718      	adds	r7, #24
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	2000028c 	.word	0x2000028c

080164fc <UDP_Server_Init>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Server_Init(void)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8016502:	f7fd fc7d 	bl	8013e00 <udp_new>
 8016506:	4603      	mov	r3, r0
 8016508:	4a12      	ldr	r2, [pc, #72]	@ (8016554 <UDP_Server_Init+0x58>)
 801650a:	6013      	str	r3, [r2, #0]

	if (upcb)
 801650c:	4b11      	ldr	r3, [pc, #68]	@ (8016554 <UDP_Server_Init+0x58>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d01a      	beq.n	801654a <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 8016514:	4b0f      	ldr	r3, [pc, #60]	@ (8016554 <UDP_Server_Init+0x58>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801651c:	490e      	ldr	r1, [pc, #56]	@ (8016558 <UDP_Server_Init+0x5c>)
 801651e:	4618      	mov	r0, r3
 8016520:	f7fd fb84 	bl	8013c2c <udp_bind>
 8016524:	4603      	mov	r3, r0
 8016526:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 8016528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d107      	bne.n	8016540 <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 8016530:	4b08      	ldr	r3, [pc, #32]	@ (8016554 <UDP_Server_Init+0x58>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2200      	movs	r2, #0
 8016536:	4909      	ldr	r1, [pc, #36]	@ (801655c <UDP_Server_Init+0x60>)
 8016538:	4618      	mov	r0, r3
 801653a:	f7fd fbff 	bl	8013d3c <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 801653e:	e004      	b.n	801654a <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 8016540:	4b04      	ldr	r3, [pc, #16]	@ (8016554 <UDP_Server_Init+0x58>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	4618      	mov	r0, r3
 8016546:	f7fd fc19 	bl	8013d7c <udp_remove>
}
 801654a:	bf00      	nop
 801654c:	3708      	adds	r7, #8
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	200087d8 	.word	0x200087d8
 8016558:	0801a948 	.word	0x0801a948
 801655c:	08016561 	.word	0x08016561

08016560 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b086      	sub	sp, #24
 8016564:	af00      	add	r7, sp, #0
 8016566:	60f8      	str	r0, [r7, #12]
 8016568:	60b9      	str	r1, [r7, #8]
 801656a:	607a      	str	r2, [r7, #4]
 801656c:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 801656e:	4a24      	ldr	r2, [pc, #144]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 8016570:	68bb      	ldr	r3, [r7, #8]
 8016572:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 8016574:	4a22      	ldr	r2, [pc, #136]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 801657a:	4a21      	ldr	r2, [pc, #132]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 801657c:	8c3b      	ldrh	r3, [r7, #32]
 801657e:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 8016580:	2300      	movs	r3, #0
 8016582:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	685b      	ldr	r3, [r3, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	461a      	mov	r2, r3
 801658c:	4b1c      	ldr	r3, [pc, #112]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 801658e:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	3304      	adds	r3, #4
 8016594:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	685a      	ldr	r2, [r3, #4]
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	1c59      	adds	r1, r3, #1
 801659e:	6179      	str	r1, [r7, #20]
 80165a0:	4413      	add	r3, r2
 80165a2:	781a      	ldrb	r2, [r3, #0]
 80165a4:	4b16      	ldr	r3, [pc, #88]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 80165a6:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	685a      	ldr	r2, [r3, #4]
 80165ac:	697b      	ldr	r3, [r7, #20]
 80165ae:	1c59      	adds	r1, r3, #1
 80165b0:	6179      	str	r1, [r7, #20]
 80165b2:	4413      	add	r3, r2
 80165b4:	781a      	ldrb	r2, [r3, #0]
 80165b6:	4b12      	ldr	r3, [pc, #72]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 80165b8:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	685a      	ldr	r2, [r3, #4]
 80165be:	697b      	ldr	r3, [r7, #20]
 80165c0:	1c59      	adds	r1, r3, #1
 80165c2:	6179      	str	r1, [r7, #20]
 80165c4:	4413      	add	r3, r2
 80165c6:	781a      	ldrb	r2, [r3, #0]
 80165c8:	4b0d      	ldr	r3, [pc, #52]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 80165ca:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	685a      	ldr	r2, [r3, #4]
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	4413      	add	r3, r2
 80165d4:	4a0a      	ldr	r2, [pc, #40]	@ (8016600 <UDP_Recv_Callback+0xa0>)
 80165d6:	7c92      	ldrb	r2, [r2, #18]
 80165d8:	4619      	mov	r1, r3
 80165da:	480a      	ldr	r0, [pc, #40]	@ (8016604 <UDP_Recv_Callback+0xa4>)
 80165dc:	f000 fdfd 	bl	80171da <memcpy>

    // actual test
	uint8_t result = perform_test();
 80165e0:	f000 f812 	bl	8016608 <perform_test>
 80165e4:	4603      	mov	r3, r0
 80165e6:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 80165e8:	7cfb      	ldrb	r3, [r7, #19]
 80165ea:	4618      	mov	r0, r3
 80165ec:	f000 f88e 	bl	801670c <send_result>

	pbuf_free(p);
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f7f7 fa63 	bl	800dabc <pbuf_free>
}
 80165f6:	bf00      	nop
 80165f8:	3718      	adds	r7, #24
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	200087dc 	.word	0x200087dc
 8016604:	200087ef 	.word	0x200087ef

08016608 <perform_test>:

uint8_t perform_test()
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b082      	sub	sp, #8
 801660c:	af02      	add	r7, sp, #8
	switch (in_msg.peripheral) {
 801660e:	4b33      	ldr	r3, [pc, #204]	@ (80166dc <perform_test+0xd4>)
 8016610:	7c1b      	ldrb	r3, [r3, #16]
 8016612:	3b01      	subs	r3, #1
 8016614:	2b0f      	cmp	r3, #15
 8016616:	d85c      	bhi.n	80166d2 <perform_test+0xca>
 8016618:	a201      	add	r2, pc, #4	@ (adr r2, 8016620 <perform_test+0x18>)
 801661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801661e:	bf00      	nop
 8016620:	08016661 	.word	0x08016661
 8016624:	08016673 	.word	0x08016673
 8016628:	080166d3 	.word	0x080166d3
 801662c:	0801668d 	.word	0x0801668d
 8016630:	080166d3 	.word	0x080166d3
 8016634:	080166d3 	.word	0x080166d3
 8016638:	080166d3 	.word	0x080166d3
 801663c:	080166a7 	.word	0x080166a7
 8016640:	080166d3 	.word	0x080166d3
 8016644:	080166d3 	.word	0x080166d3
 8016648:	080166d3 	.word	0x080166d3
 801664c:	080166d3 	.word	0x080166d3
 8016650:	080166d3 	.word	0x080166d3
 8016654:	080166d3 	.word	0x080166d3
 8016658:	080166d3 	.word	0x080166d3
 801665c:	080166c1 	.word	0x080166c1
		case TEST_TIM:
			return Test_N_Perform("TIMER", TIM_Test_Perform, in_msg.n_iter);
 8016660:	4b1e      	ldr	r3, [pc, #120]	@ (80166dc <perform_test+0xd4>)
 8016662:	7c5b      	ldrb	r3, [r3, #17]
 8016664:	461a      	mov	r2, r3
 8016666:	491e      	ldr	r1, [pc, #120]	@ (80166e0 <perform_test+0xd8>)
 8016668:	481e      	ldr	r0, [pc, #120]	@ (80166e4 <perform_test+0xdc>)
 801666a:	f000 fa83 	bl	8016b74 <Test_N_Perform>
 801666e:	4603      	mov	r3, r0
 8016670:	e030      	b.n	80166d4 <perform_test+0xcc>
			break;
		case TEST_UART:
			return Test_N_Perform_Msg("UART", UART_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8016672:	4b1a      	ldr	r3, [pc, #104]	@ (80166dc <perform_test+0xd4>)
 8016674:	7c9a      	ldrb	r2, [r3, #18]
 8016676:	4b19      	ldr	r3, [pc, #100]	@ (80166dc <perform_test+0xd4>)
 8016678:	7c5b      	ldrb	r3, [r3, #17]
 801667a:	9300      	str	r3, [sp, #0]
 801667c:	4613      	mov	r3, r2
 801667e:	4a1a      	ldr	r2, [pc, #104]	@ (80166e8 <perform_test+0xe0>)
 8016680:	491a      	ldr	r1, [pc, #104]	@ (80166ec <perform_test+0xe4>)
 8016682:	481b      	ldr	r0, [pc, #108]	@ (80166f0 <perform_test+0xe8>)
 8016684:	f000 fa93 	bl	8016bae <Test_N_Perform_Msg>
 8016688:	4603      	mov	r3, r0
 801668a:	e023      	b.n	80166d4 <perform_test+0xcc>
			break;
		case TEST_SPI:
			return Test_N_Perform_Msg("SPI", SPI_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);;
 801668c:	4b13      	ldr	r3, [pc, #76]	@ (80166dc <perform_test+0xd4>)
 801668e:	7c9a      	ldrb	r2, [r3, #18]
 8016690:	4b12      	ldr	r3, [pc, #72]	@ (80166dc <perform_test+0xd4>)
 8016692:	7c5b      	ldrb	r3, [r3, #17]
 8016694:	9300      	str	r3, [sp, #0]
 8016696:	4613      	mov	r3, r2
 8016698:	4a13      	ldr	r2, [pc, #76]	@ (80166e8 <perform_test+0xe0>)
 801669a:	4916      	ldr	r1, [pc, #88]	@ (80166f4 <perform_test+0xec>)
 801669c:	4816      	ldr	r0, [pc, #88]	@ (80166f8 <perform_test+0xf0>)
 801669e:	f000 fa86 	bl	8016bae <Test_N_Perform_Msg>
 80166a2:	4603      	mov	r3, r0
 80166a4:	e016      	b.n	80166d4 <perform_test+0xcc>
			break;
		case TEST_I2C:
			return Test_N_Perform_Msg("I2C", I2C_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 80166a6:	4b0d      	ldr	r3, [pc, #52]	@ (80166dc <perform_test+0xd4>)
 80166a8:	7c9a      	ldrb	r2, [r3, #18]
 80166aa:	4b0c      	ldr	r3, [pc, #48]	@ (80166dc <perform_test+0xd4>)
 80166ac:	7c5b      	ldrb	r3, [r3, #17]
 80166ae:	9300      	str	r3, [sp, #0]
 80166b0:	4613      	mov	r3, r2
 80166b2:	4a0d      	ldr	r2, [pc, #52]	@ (80166e8 <perform_test+0xe0>)
 80166b4:	4911      	ldr	r1, [pc, #68]	@ (80166fc <perform_test+0xf4>)
 80166b6:	4812      	ldr	r0, [pc, #72]	@ (8016700 <perform_test+0xf8>)
 80166b8:	f000 fa79 	bl	8016bae <Test_N_Perform_Msg>
 80166bc:	4603      	mov	r3, r0
 80166be:	e009      	b.n	80166d4 <perform_test+0xcc>
			break;
		case TEST_ADC:
			return Test_N_Perform("ADC", ADC_Test_Perform, in_msg.n_iter);
 80166c0:	4b06      	ldr	r3, [pc, #24]	@ (80166dc <perform_test+0xd4>)
 80166c2:	7c5b      	ldrb	r3, [r3, #17]
 80166c4:	461a      	mov	r2, r3
 80166c6:	490f      	ldr	r1, [pc, #60]	@ (8016704 <perform_test+0xfc>)
 80166c8:	480f      	ldr	r0, [pc, #60]	@ (8016708 <perform_test+0x100>)
 80166ca:	f000 fa53 	bl	8016b74 <Test_N_Perform>
 80166ce:	4603      	mov	r3, r0
 80166d0:	e000      	b.n	80166d4 <perform_test+0xcc>
			break;
		default:
			return TEST_FAILED;
 80166d2:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	46bd      	mov	sp, r7
 80166d8:	bd80      	pop	{r7, pc}
 80166da:	bf00      	nop
 80166dc:	200087dc 	.word	0x200087dc
 80166e0:	08016bf1 	.word	0x08016bf1
 80166e4:	0801a830 	.word	0x0801a830
 80166e8:	200087ef 	.word	0x200087ef
 80166ec:	08016cc1 	.word	0x08016cc1
 80166f0:	0801a838 	.word	0x0801a838
 80166f4:	08016989 	.word	0x08016989
 80166f8:	0801a840 	.word	0x0801a840
 80166fc:	0801676d 	.word	0x0801676d
 8016700:	0801a844 	.word	0x0801a844
 8016704:	0801641d 	.word	0x0801641d
 8016708:	0801a848 	.word	0x0801a848

0801670c <send_result>:

void send_result(uint8_t result)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b086      	sub	sp, #24
 8016710:	af00      	add	r7, sp, #0
 8016712:	4603      	mov	r3, r0
 8016714:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 8016716:	4b14      	ldr	r3, [pc, #80]	@ (8016768 <send_result+0x5c>)
 8016718:	68db      	ldr	r3, [r3, #12]
 801671a:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 801671c:	79fb      	ldrb	r3, [r7, #7]
 801671e:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 8016720:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016724:	2105      	movs	r1, #5
 8016726:	2036      	movs	r0, #54	@ 0x36
 8016728:	f7f6 fee4 	bl	800d4f4 <pbuf_alloc>
 801672c:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d014      	beq.n	801675e <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	461a      	mov	r2, r3
 801673a:	f107 030c 	add.w	r3, r7, #12
 801673e:	6818      	ldr	r0, [r3, #0]
 8016740:	6010      	str	r0, [r2, #0]
 8016742:	791b      	ldrb	r3, [r3, #4]
 8016744:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 8016746:	4b08      	ldr	r3, [pc, #32]	@ (8016768 <send_result+0x5c>)
 8016748:	6818      	ldr	r0, [r3, #0]
 801674a:	4b07      	ldr	r3, [pc, #28]	@ (8016768 <send_result+0x5c>)
 801674c:	685a      	ldr	r2, [r3, #4]
 801674e:	4b06      	ldr	r3, [pc, #24]	@ (8016768 <send_result+0x5c>)
 8016750:	891b      	ldrh	r3, [r3, #8]
 8016752:	6979      	ldr	r1, [r7, #20]
 8016754:	f7fd f8b4 	bl	80138c0 <udp_sendto>
	    pbuf_free(resp_buf);
 8016758:	6978      	ldr	r0, [r7, #20]
 801675a:	f7f7 f9af 	bl	800dabc <pbuf_free>
	}
}
 801675e:	bf00      	nop
 8016760:	3718      	adds	r7, #24
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	200087dc 	.word	0x200087dc

0801676c <I2C_Test_Perform>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801676c:	b590      	push	{r4, r7, lr}
 801676e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8016772:	af00      	add	r7, sp, #0
 8016774:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016778:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801677c:	6018      	str	r0, [r3, #0]
 801677e:	460a      	mov	r2, r1
 8016780:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016784:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016788:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 801678a:	4b4d      	ldr	r3, [pc, #308]	@ (80168c0 <I2C_Test_Perform+0x154>)
 801678c:	2200      	movs	r2, #0
 801678e:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 8016790:	4b4c      	ldr	r3, [pc, #304]	@ (80168c4 <I2C_Test_Perform+0x158>)
 8016792:	2200      	movs	r2, #0
 8016794:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 8016796:	4b4c      	ldr	r3, [pc, #304]	@ (80168c8 <I2C_Test_Perform+0x15c>)
 8016798:	2200      	movs	r2, #0
 801679a:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 801679c:	4b4b      	ldr	r3, [pc, #300]	@ (80168cc <I2C_Test_Perform+0x160>)
 801679e:	2200      	movs	r2, #0
 80167a0:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 80167a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80167a6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	f107 0308 	add.w	r3, r7, #8
 80167b2:	4619      	mov	r1, r3
 80167b4:	4846      	ldr	r0, [pc, #280]	@ (80168d0 <I2C_Test_Perform+0x164>)
 80167b6:	f7ee ffa9 	bl	800570c <HAL_I2C_Slave_Receive_DMA>
 80167ba:	4603      	mov	r3, r0
 80167bc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80167c0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d001      	beq.n	80167cc <I2C_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 80167c8:	23ff      	movs	r3, #255	@ 0xff
 80167ca:	e074      	b.n	80168b6 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 80167cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80167d0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80167dc:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80167e0:	6812      	ldr	r2, [r2, #0]
 80167e2:	2114      	movs	r1, #20
 80167e4:	483b      	ldr	r0, [pc, #236]	@ (80168d4 <I2C_Test_Perform+0x168>)
 80167e6:	f7ee fca1 	bl	800512c <HAL_I2C_Master_Transmit_DMA>
 80167ea:	4603      	mov	r3, r0
 80167ec:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80167f0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d001      	beq.n	80167fc <I2C_Test_Perform+0x90>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 80167f8:	23ff      	movs	r3, #255	@ 0xff
 80167fa:	e05c      	b.n	80168b6 <I2C_Test_Perform+0x14a>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 80167fc:	bf00      	nop
 80167fe:	4b33      	ldr	r3, [pc, #204]	@ (80168cc <I2C_Test_Perform+0x160>)
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	b2db      	uxtb	r3, r3
 8016804:	2b00      	cmp	r3, #0
 8016806:	d0fa      	beq.n	80167fe <I2C_Test_Perform+0x92>
 8016808:	4b2d      	ldr	r3, [pc, #180]	@ (80168c0 <I2C_Test_Perform+0x154>)
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	b2db      	uxtb	r3, r3
 801680e:	2b00      	cmp	r3, #0
 8016810:	d0f5      	beq.n	80167fe <I2C_Test_Perform+0x92>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 8016812:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016816:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	b29b      	uxth	r3, r3
 801681e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8016822:	2114      	movs	r1, #20
 8016824:	482b      	ldr	r0, [pc, #172]	@ (80168d4 <I2C_Test_Perform+0x168>)
 8016826:	f7ee fd95 	bl	8005354 <HAL_I2C_Master_Receive_DMA>
 801682a:	4603      	mov	r3, r0
 801682c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016830:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016834:	2b00      	cmp	r3, #0
 8016836:	d001      	beq.n	801683c <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 8016838:	23ff      	movs	r3, #255	@ 0xff
 801683a:	e03c      	b.n	80168b6 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801683c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016840:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	b29a      	uxth	r2, r3
 8016848:	f107 0308 	add.w	r3, r7, #8
 801684c:	4619      	mov	r1, r3
 801684e:	4820      	ldr	r0, [pc, #128]	@ (80168d0 <I2C_Test_Perform+0x164>)
 8016850:	f7ee fe70 	bl	8005534 <HAL_I2C_Slave_Transmit_DMA>
 8016854:	4603      	mov	r3, r0
 8016856:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801685a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801685e:	2b00      	cmp	r3, #0
 8016860:	d001      	beq.n	8016866 <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 8016862:	23ff      	movs	r3, #255	@ 0xff
 8016864:	e027      	b.n	80168b6 <I2C_Test_Perform+0x14a>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 8016866:	bf00      	nop
 8016868:	4b16      	ldr	r3, [pc, #88]	@ (80168c4 <I2C_Test_Perform+0x158>)
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	b2db      	uxtb	r3, r3
 801686e:	2b00      	cmp	r3, #0
 8016870:	d0fa      	beq.n	8016868 <I2C_Test_Perform+0xfc>
 8016872:	4b15      	ldr	r3, [pc, #84]	@ (80168c8 <I2C_Test_Perform+0x15c>)
 8016874:	781b      	ldrb	r3, [r3, #0]
 8016876:	b2db      	uxtb	r3, r3
 8016878:	2b00      	cmp	r3, #0
 801687a:	d0f5      	beq.n	8016868 <I2C_Test_Perform+0xfc>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801687c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016880:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016884:	781c      	ldrb	r4, [r3, #0]
 8016886:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801688a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801688e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016892:	7819      	ldrb	r1, [r3, #0]
 8016894:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016898:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801689c:	4623      	mov	r3, r4
 801689e:	6800      	ldr	r0, [r0, #0]
 80168a0:	f7ff fe06 	bl	80164b0 <Match_CRC>
 80168a4:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80168a8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80168ac:	2b01      	cmp	r3, #1
 80168ae:	d101      	bne.n	80168b4 <I2C_Test_Perform+0x148>
 80168b0:	2301      	movs	r3, #1
 80168b2:	e000      	b.n	80168b6 <I2C_Test_Perform+0x14a>

	return TEST_FAILED;
 80168b4:	23ff      	movs	r3, #255	@ 0xff
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd90      	pop	{r4, r7, pc}
 80168c0:	200088f0 	.word	0x200088f0
 80168c4:	200088f1 	.word	0x200088f1
 80168c8:	200088f2 	.word	0x200088f2
 80168cc:	200088f3 	.word	0x200088f3
 80168d0:	20000304 	.word	0x20000304
 80168d4:	200002b0 	.word	0x200002b0

080168d8 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80168d8:	b480      	push	{r7}
 80168da:	b083      	sub	sp, #12
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	4a06      	ldr	r2, [pc, #24]	@ (80168fc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80168e4:	4293      	cmp	r3, r2
 80168e6:	d102      	bne.n	80168ee <HAL_I2C_MasterTxCpltCallback+0x16>
 80168e8:	4b05      	ldr	r3, [pc, #20]	@ (8016900 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80168ea:	2201      	movs	r2, #1
 80168ec:	701a      	strb	r2, [r3, #0]
}
 80168ee:	bf00      	nop
 80168f0:	370c      	adds	r7, #12
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr
 80168fa:	bf00      	nop
 80168fc:	200002b0 	.word	0x200002b0
 8016900:	200088f0 	.word	0x200088f0

08016904 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016904:	b480      	push	{r7}
 8016906:	b083      	sub	sp, #12
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	4a06      	ldr	r2, [pc, #24]	@ (8016928 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8016910:	4293      	cmp	r3, r2
 8016912:	d102      	bne.n	801691a <HAL_I2C_MasterRxCpltCallback+0x16>
 8016914:	4b05      	ldr	r3, [pc, #20]	@ (801692c <HAL_I2C_MasterRxCpltCallback+0x28>)
 8016916:	2201      	movs	r2, #1
 8016918:	701a      	strb	r2, [r3, #0]
}
 801691a:	bf00      	nop
 801691c:	370c      	adds	r7, #12
 801691e:	46bd      	mov	sp, r7
 8016920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016924:	4770      	bx	lr
 8016926:	bf00      	nop
 8016928:	200002b0 	.word	0x200002b0
 801692c:	200088f1 	.word	0x200088f1

08016930 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016930:	b480      	push	{r7}
 8016932:	b083      	sub	sp, #12
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	4a06      	ldr	r2, [pc, #24]	@ (8016954 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801693c:	4293      	cmp	r3, r2
 801693e:	d102      	bne.n	8016946 <HAL_I2C_SlaveTxCpltCallback+0x16>
 8016940:	4b05      	ldr	r3, [pc, #20]	@ (8016958 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8016942:	2201      	movs	r2, #1
 8016944:	701a      	strb	r2, [r3, #0]
}
 8016946:	bf00      	nop
 8016948:	370c      	adds	r7, #12
 801694a:	46bd      	mov	sp, r7
 801694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop
 8016954:	20000304 	.word	0x20000304
 8016958:	200088f2 	.word	0x200088f2

0801695c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801695c:	b480      	push	{r7}
 801695e:	b083      	sub	sp, #12
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	4a06      	ldr	r2, [pc, #24]	@ (8016980 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8016968:	4293      	cmp	r3, r2
 801696a:	d102      	bne.n	8016972 <HAL_I2C_SlaveRxCpltCallback+0x16>
 801696c:	4b05      	ldr	r3, [pc, #20]	@ (8016984 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801696e:	2201      	movs	r2, #1
 8016970:	701a      	strb	r2, [r3, #0]
}
 8016972:	bf00      	nop
 8016974:	370c      	adds	r7, #12
 8016976:	46bd      	mov	sp, r7
 8016978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697c:	4770      	bx	lr
 801697e:	bf00      	nop
 8016980:	20000304 	.word	0x20000304
 8016984:	200088f3 	.word	0x200088f3

08016988 <SPI_Test_Perform>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8016988:	b590      	push	{r4, r7, lr}
 801698a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801698e:	af00      	add	r7, sp, #0
 8016990:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016994:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016998:	6018      	str	r0, [r3, #0]
 801699a:	460a      	mov	r2, r1
 801699c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80169a0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80169a4:	701a      	strb	r2, [r3, #0]
	printf("Performing SPI test\n");
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 80169a6:	4b4d      	ldr	r3, [pc, #308]	@ (8016adc <SPI_Test_Perform+0x154>)
 80169a8:	2200      	movs	r2, #0
 80169aa:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 80169ac:	4b4c      	ldr	r3, [pc, #304]	@ (8016ae0 <SPI_Test_Perform+0x158>)
 80169ae:	2200      	movs	r2, #0
 80169b0:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 80169b2:	4b4c      	ldr	r3, [pc, #304]	@ (8016ae4 <SPI_Test_Perform+0x15c>)
 80169b4:	2200      	movs	r2, #0
 80169b6:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 80169b8:	4b4b      	ldr	r3, [pc, #300]	@ (8016ae8 <SPI_Test_Perform+0x160>)
 80169ba:	2200      	movs	r2, #0
 80169bc:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 80169be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80169c2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	b29a      	uxth	r2, r3
 80169ca:	f107 0308 	add.w	r3, r7, #8
 80169ce:	4619      	mov	r1, r3
 80169d0:	4846      	ldr	r0, [pc, #280]	@ (8016aec <SPI_Test_Perform+0x164>)
 80169d2:	f7f1 ffb7 	bl	8008944 <HAL_SPI_Receive_DMA>
 80169d6:	4603      	mov	r3, r0
 80169d8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80169dc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d001      	beq.n	80169e8 <SPI_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
#endif
		return TEST_FAILED;
 80169e4:	23ff      	movs	r3, #255	@ 0xff
 80169e6:	e073      	b.n	8016ad0 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 80169e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80169ec:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	b29a      	uxth	r2, r3
 80169f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80169f8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80169fc:	6819      	ldr	r1, [r3, #0]
 80169fe:	483c      	ldr	r0, [pc, #240]	@ (8016af0 <SPI_Test_Perform+0x168>)
 8016a00:	f7f1 feb2 	bl	8008768 <HAL_SPI_Transmit_DMA>
 8016a04:	4603      	mov	r3, r0
 8016a06:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016a0a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d001      	beq.n	8016a16 <SPI_Test_Perform+0x8e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
#endif
		return TEST_FAILED;
 8016a12:	23ff      	movs	r3, #255	@ 0xff
 8016a14:	e05c      	b.n	8016ad0 <SPI_Test_Perform+0x148>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 8016a16:	bf00      	nop
 8016a18:	4b33      	ldr	r3, [pc, #204]	@ (8016ae8 <SPI_Test_Perform+0x160>)
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	b2db      	uxtb	r3, r3
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d0fa      	beq.n	8016a18 <SPI_Test_Perform+0x90>
 8016a22:	4b2e      	ldr	r3, [pc, #184]	@ (8016adc <SPI_Test_Perform+0x154>)
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	b2db      	uxtb	r3, r3
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d0f5      	beq.n	8016a18 <SPI_Test_Perform+0x90>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 8016a2c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016a30:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	b29a      	uxth	r2, r3
 8016a38:	f107 0308 	add.w	r3, r7, #8
 8016a3c:	4619      	mov	r1, r3
 8016a3e:	482b      	ldr	r0, [pc, #172]	@ (8016aec <SPI_Test_Perform+0x164>)
 8016a40:	f7f1 fe92 	bl	8008768 <HAL_SPI_Transmit_DMA>
 8016a44:	4603      	mov	r3, r0
 8016a46:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016a4a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d001      	beq.n	8016a56 <SPI_Test_Perform+0xce>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
#endif
		return TEST_FAILED;
 8016a52:	23ff      	movs	r3, #255	@ 0xff
 8016a54:	e03c      	b.n	8016ad0 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 8016a56:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016a5a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	b29a      	uxth	r2, r3
 8016a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a66:	4619      	mov	r1, r3
 8016a68:	4821      	ldr	r0, [pc, #132]	@ (8016af0 <SPI_Test_Perform+0x168>)
 8016a6a:	f7f1 ff6b 	bl	8008944 <HAL_SPI_Receive_DMA>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016a74:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d001      	beq.n	8016a80 <SPI_Test_Perform+0xf8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
#endif
		return TEST_FAILED;
 8016a7c:	23ff      	movs	r3, #255	@ 0xff
 8016a7e:	e027      	b.n	8016ad0 <SPI_Test_Perform+0x148>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 8016a80:	bf00      	nop
 8016a82:	4b17      	ldr	r3, [pc, #92]	@ (8016ae0 <SPI_Test_Perform+0x158>)
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	b2db      	uxtb	r3, r3
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d0fa      	beq.n	8016a82 <SPI_Test_Perform+0xfa>
 8016a8c:	4b15      	ldr	r3, [pc, #84]	@ (8016ae4 <SPI_Test_Perform+0x15c>)
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d0f5      	beq.n	8016a82 <SPI_Test_Perform+0xfa>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 8016a96:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016a9a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016a9e:	781c      	ldrb	r4, [r3, #0]
 8016aa0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8016aa4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016aa8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016aac:	7819      	ldrb	r1, [r3, #0]
 8016aae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016ab2:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8016ab6:	4623      	mov	r3, r4
 8016ab8:	6800      	ldr	r0, [r0, #0]
 8016aba:	f7ff fcf9 	bl	80164b0 <Match_CRC>
 8016abe:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8016ac2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016ac6:	2b01      	cmp	r3, #1
 8016ac8:	d101      	bne.n	8016ace <SPI_Test_Perform+0x146>
 8016aca:	2301      	movs	r3, #1
 8016acc:	e000      	b.n	8016ad0 <SPI_Test_Perform+0x148>

	return TEST_FAILED;
 8016ace:	23ff      	movs	r3, #255	@ 0xff
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	bd90      	pop	{r4, r7, pc}
 8016ada:	bf00      	nop
 8016adc:	200088f4 	.word	0x200088f4
 8016ae0:	200088f5 	.word	0x200088f5
 8016ae4:	200088f6 	.word	0x200088f6
 8016ae8:	200088f7 	.word	0x200088f7
 8016aec:	2000053c 	.word	0x2000053c
 8016af0:	200004d8 	.word	0x200004d8

08016af4 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8016af4:	b480      	push	{r7}
 8016af6:	b083      	sub	sp, #12
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	4a09      	ldr	r2, [pc, #36]	@ (8016b24 <HAL_SPI_TxCpltCallback+0x30>)
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d102      	bne.n	8016b0a <HAL_SPI_TxCpltCallback+0x16>
 8016b04:	4b08      	ldr	r3, [pc, #32]	@ (8016b28 <HAL_SPI_TxCpltCallback+0x34>)
 8016b06:	2201      	movs	r2, #1
 8016b08:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	4a07      	ldr	r2, [pc, #28]	@ (8016b2c <HAL_SPI_TxCpltCallback+0x38>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d102      	bne.n	8016b18 <HAL_SPI_TxCpltCallback+0x24>
 8016b12:	4b07      	ldr	r3, [pc, #28]	@ (8016b30 <HAL_SPI_TxCpltCallback+0x3c>)
 8016b14:	2201      	movs	r2, #1
 8016b16:	701a      	strb	r2, [r3, #0]
}
 8016b18:	bf00      	nop
 8016b1a:	370c      	adds	r7, #12
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b22:	4770      	bx	lr
 8016b24:	200004d8 	.word	0x200004d8
 8016b28:	200088f4 	.word	0x200088f4
 8016b2c:	2000053c 	.word	0x2000053c
 8016b30:	200088f6 	.word	0x200088f6

08016b34 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8016b34:	b480      	push	{r7}
 8016b36:	b083      	sub	sp, #12
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	4a09      	ldr	r2, [pc, #36]	@ (8016b64 <HAL_SPI_RxCpltCallback+0x30>)
 8016b40:	4293      	cmp	r3, r2
 8016b42:	d102      	bne.n	8016b4a <HAL_SPI_RxCpltCallback+0x16>
 8016b44:	4b08      	ldr	r3, [pc, #32]	@ (8016b68 <HAL_SPI_RxCpltCallback+0x34>)
 8016b46:	2201      	movs	r2, #1
 8016b48:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	4a07      	ldr	r2, [pc, #28]	@ (8016b6c <HAL_SPI_RxCpltCallback+0x38>)
 8016b4e:	4293      	cmp	r3, r2
 8016b50:	d102      	bne.n	8016b58 <HAL_SPI_RxCpltCallback+0x24>
 8016b52:	4b07      	ldr	r3, [pc, #28]	@ (8016b70 <HAL_SPI_RxCpltCallback+0x3c>)
 8016b54:	2201      	movs	r2, #1
 8016b56:	701a      	strb	r2, [r3, #0]
}
 8016b58:	bf00      	nop
 8016b5a:	370c      	adds	r7, #12
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr
 8016b64:	200004d8 	.word	0x200004d8
 8016b68:	200088f5 	.word	0x200088f5
 8016b6c:	2000053c 	.word	0x2000053c
 8016b70:	200088f7 	.word	0x200088f7

08016b74 <Test_N_Perform>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

uint8_t Test_N_Perform(const char *test_name, TestFunction test_func, uint8_t n)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b086      	sub	sp, #24
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	60f8      	str	r0, [r7, #12]
 8016b7c:	60b9      	str	r1, [r7, #8]
 8016b7e:	4613      	mov	r3, r2
 8016b80:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < n; i++)
 8016b82:	2300      	movs	r3, #0
 8016b84:	617b      	str	r3, [r7, #20]
 8016b86:	e009      	b.n	8016b9c <Test_N_Perform+0x28>
	{
		if (test_func() == TEST_FAILED)
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	4798      	blx	r3
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	2bff      	cmp	r3, #255	@ 0xff
 8016b90:	d101      	bne.n	8016b96 <Test_N_Perform+0x22>
		{
#ifdef PRINT_TESTS_DEBUG
			printf("TEST %d: %s test failed\n", i + 1, test_name);
#endif
			return TEST_FAILED;
 8016b92:	23ff      	movs	r3, #255	@ 0xff
 8016b94:	e007      	b.n	8016ba6 <Test_N_Perform+0x32>
	for (int i = 0; i < n; i++)
 8016b96:	697b      	ldr	r3, [r7, #20]
 8016b98:	3301      	adds	r3, #1
 8016b9a:	617b      	str	r3, [r7, #20]
 8016b9c:	79fb      	ldrb	r3, [r7, #7]
 8016b9e:	697a      	ldr	r2, [r7, #20]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	dbf1      	blt.n	8016b88 <Test_N_Perform+0x14>
			printf("TEST %d: %s test success\n", i + 1, test_name);
		}
#endif
	}

	return TEST_SUCCESS;
 8016ba4:	2301      	movs	r3, #1
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	3718      	adds	r7, #24
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}

08016bae <Test_N_Perform_Msg>:

uint8_t Test_N_Perform_Msg(const char *test_name, MsgTestFunction test_func, uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 8016bae:	b580      	push	{r7, lr}
 8016bb0:	b086      	sub	sp, #24
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	60f8      	str	r0, [r7, #12]
 8016bb6:	60b9      	str	r1, [r7, #8]
 8016bb8:	607a      	str	r2, [r7, #4]
 8016bba:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < n; i++)
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	617b      	str	r3, [r7, #20]
 8016bc0:	e00c      	b.n	8016bdc <Test_N_Perform_Msg+0x2e>
	{
		if (test_func(msg, msg_len) == TEST_FAILED)
 8016bc2:	78fa      	ldrb	r2, [r7, #3]
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	4611      	mov	r1, r2
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	4798      	blx	r3
 8016bcc:	4603      	mov	r3, r0
 8016bce:	2bff      	cmp	r3, #255	@ 0xff
 8016bd0:	d101      	bne.n	8016bd6 <Test_N_Perform_Msg+0x28>
		{
#ifdef PRINT_TESTS_DEBUG
			printf("TEST %d: %s test failed\n", i + 1, test_name);
#endif
			return TEST_FAILED;
 8016bd2:	23ff      	movs	r3, #255	@ 0xff
 8016bd4:	e008      	b.n	8016be8 <Test_N_Perform_Msg+0x3a>
	for (int i = 0; i < n; i++)
 8016bd6:	697b      	ldr	r3, [r7, #20]
 8016bd8:	3301      	adds	r3, #1
 8016bda:	617b      	str	r3, [r7, #20]
 8016bdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016be0:	697a      	ldr	r2, [r7, #20]
 8016be2:	429a      	cmp	r2, r3
 8016be4:	dbed      	blt.n	8016bc2 <Test_N_Perform_Msg+0x14>
			printf("TEST %d: %s test success\n", i + 1, test_name);
		}
#endif
	}

	return TEST_SUCCESS;
 8016be6:	2301      	movs	r3, #1
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	3718      	adds	r7, #24
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <TIM_Test_Perform>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

uint8_t TIM_Test_Perform(void)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
#endif

	tim6_count = 0;
 8016bf6:	4b21      	ldr	r3, [pc, #132]	@ (8016c7c <TIM_Test_Perform+0x8c>)
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8016bfc:	4820      	ldr	r0, [pc, #128]	@ (8016c80 <TIM_Test_Perform+0x90>)
 8016bfe:	f7f2 febf 	bl	8009980 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8016c02:	4b1f      	ldr	r3, [pc, #124]	@ (8016c80 <TIM_Test_Perform+0x90>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	68da      	ldr	r2, [r3, #12]
 8016c08:	4b1d      	ldr	r3, [pc, #116]	@ (8016c80 <TIM_Test_Perform+0x90>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016c10:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(&htim2);
 8016c12:	481c      	ldr	r0, [pc, #112]	@ (8016c84 <TIM_Test_Perform+0x94>)
 8016c14:	f7f2 fe1c 	bl	8009850 <HAL_TIM_Base_Start>

	HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 8016c18:	4b1a      	ldr	r3, [pc, #104]	@ (8016c84 <TIM_Test_Perform+0x94>)
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	3324      	adds	r3, #36	@ 0x24
 8016c1e:	4619      	mov	r1, r3
 8016c20:	4a19      	ldr	r2, [pc, #100]	@ (8016c88 <TIM_Test_Perform+0x98>)
 8016c22:	230a      	movs	r3, #10
 8016c24:	4819      	ldr	r0, [pc, #100]	@ (8016c8c <TIM_Test_Perform+0x9c>)
 8016c26:	f7ec fa75 	bl	8003114 <HAL_DMA_Start_IT>
			         (uint32_t)tim2_samples, N_SAMPLES);

	while(tim6_count < N_SAMPLES);
 8016c2a:	bf00      	nop
 8016c2c:	4b13      	ldr	r3, [pc, #76]	@ (8016c7c <TIM_Test_Perform+0x8c>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2b09      	cmp	r3, #9
 8016c32:	ddfb      	ble.n	8016c2c <TIM_Test_Perform+0x3c>

	HAL_TIM_Base_Stop(&htim2);
 8016c34:	4813      	ldr	r0, [pc, #76]	@ (8016c84 <TIM_Test_Perform+0x94>)
 8016c36:	f7f2 fe7b 	bl	8009930 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim6);
 8016c3a:	4811      	ldr	r0, [pc, #68]	@ (8016c80 <TIM_Test_Perform+0x90>)
 8016c3c:	f7f2 fe78 	bl	8009930 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 8016c40:	2301      	movs	r3, #1
 8016c42:	607b      	str	r3, [r7, #4]
 8016c44:	e012      	b.n	8016c6c <TIM_Test_Perform+0x7c>
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != EXPECTED_INTERVAL)
 8016c46:	4a10      	ldr	r2, [pc, #64]	@ (8016c88 <TIM_Test_Perform+0x98>)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	3b01      	subs	r3, #1
 8016c52:	490d      	ldr	r1, [pc, #52]	@ (8016c88 <TIM_Test_Perform+0x98>)
 8016c54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8016c58:	1ad3      	subs	r3, r2, r3
 8016c5a:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 8016c5e:	4293      	cmp	r3, r2
 8016c60:	d001      	beq.n	8016c66 <TIM_Test_Perform+0x76>
			return TEST_FAILED;
 8016c62:	23ff      	movs	r3, #255	@ 0xff
 8016c64:	e006      	b.n	8016c74 <TIM_Test_Perform+0x84>
	for (int i = 1; i < N_SAMPLES; i++)
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	3301      	adds	r3, #1
 8016c6a:	607b      	str	r3, [r7, #4]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2b09      	cmp	r3, #9
 8016c70:	dde9      	ble.n	8016c46 <TIM_Test_Perform+0x56>
	}

	return TEST_SUCCESS;
 8016c72:	2301      	movs	r3, #1
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3708      	adds	r7, #8
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}
 8016c7c:	200088f8 	.word	0x200088f8
 8016c80:	20000770 	.word	0x20000770
 8016c84:	20000724 	.word	0x20000724
 8016c88:	200088fc 	.word	0x200088fc
 8016c8c:	200007bc 	.word	0x200007bc

08016c90 <HAL_TIM_PeriodElapsedCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016c90:	b480      	push	{r7}
 8016c92:	b083      	sub	sp, #12
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) tim6_count++;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	4a07      	ldr	r2, [pc, #28]	@ (8016cb8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	d104      	bne.n	8016caa <HAL_TIM_PeriodElapsedCallback+0x1a>
 8016ca0:	4b06      	ldr	r3, [pc, #24]	@ (8016cbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	4a05      	ldr	r2, [pc, #20]	@ (8016cbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8016ca8:	6013      	str	r3, [r2, #0]
}
 8016caa:	bf00      	nop
 8016cac:	370c      	adds	r7, #12
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	20000770 	.word	0x20000770
 8016cbc:	200088f8 	.word	0x200088f8

08016cc0 <UART_Test_Perform>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8016cc0:	b590      	push	{r4, r7, lr}
 8016cc2:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8016cc6:	af00      	add	r7, sp, #0
 8016cc8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016ccc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016cd0:	6018      	str	r0, [r3, #0]
 8016cd2:	460a      	mov	r2, r1
 8016cd4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016cd8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016cdc:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
#endif

	uart4_rx_done = 0;
 8016cde:	4b3d      	ldr	r3, [pc, #244]	@ (8016dd4 <UART_Test_Perform+0x114>)
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 8016ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8016dd8 <UART_Test_Perform+0x118>)
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 8016cea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016cee:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	f107 030c 	add.w	r3, r7, #12
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	4837      	ldr	r0, [pc, #220]	@ (8016ddc <UART_Test_Perform+0x11c>)
 8016cfe:	f7f3 fbd3 	bl	800a4a8 <HAL_UART_Receive_DMA>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d001      	beq.n	8016d0c <UART_Test_Perform+0x4c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 8016d08:	23ff      	movs	r3, #255	@ 0xff
 8016d0a:	e05d      	b.n	8016dc8 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 8016d0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016d10:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016d14:	781b      	ldrb	r3, [r3, #0]
 8016d16:	b29a      	uxth	r2, r3
 8016d18:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016d1c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016d20:	6819      	ldr	r1, [r3, #0]
 8016d22:	482f      	ldr	r0, [pc, #188]	@ (8016de0 <UART_Test_Perform+0x120>)
 8016d24:	f7f3 fb62 	bl	800a3ec <HAL_UART_Transmit_IT>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d001      	beq.n	8016d32 <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 8016d2e:	23ff      	movs	r3, #255	@ 0xff
 8016d30:	e04a      	b.n	8016dc8 <UART_Test_Perform+0x108>
	}
	while (!uart5_rx_done);
 8016d32:	bf00      	nop
 8016d34:	4b28      	ldr	r3, [pc, #160]	@ (8016dd8 <UART_Test_Perform+0x118>)
 8016d36:	781b      	ldrb	r3, [r3, #0]
 8016d38:	b2db      	uxtb	r3, r3
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d0fa      	beq.n	8016d34 <UART_Test_Perform+0x74>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8016d3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016d42:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	b29a      	uxth	r2, r3
 8016d4a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8016d4e:	4619      	mov	r1, r3
 8016d50:	4823      	ldr	r0, [pc, #140]	@ (8016de0 <UART_Test_Perform+0x120>)
 8016d52:	f7f3 fba9 	bl	800a4a8 <HAL_UART_Receive_DMA>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <UART_Test_Perform+0xa0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 8016d5c:	23ff      	movs	r3, #255	@ 0xff
 8016d5e:	e033      	b.n	8016dc8 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8016d60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016d64:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	b29a      	uxth	r2, r3
 8016d6c:	f107 030c 	add.w	r3, r7, #12
 8016d70:	4619      	mov	r1, r3
 8016d72:	481a      	ldr	r0, [pc, #104]	@ (8016ddc <UART_Test_Perform+0x11c>)
 8016d74:	f7f3 fb3a 	bl	800a3ec <HAL_UART_Transmit_IT>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d001      	beq.n	8016d82 <UART_Test_Perform+0xc2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 8016d7e:	23ff      	movs	r3, #255	@ 0xff
 8016d80:	e022      	b.n	8016dc8 <UART_Test_Perform+0x108>
	}
	while (!uart4_rx_done);
 8016d82:	bf00      	nop
 8016d84:	4b13      	ldr	r3, [pc, #76]	@ (8016dd4 <UART_Test_Perform+0x114>)
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	b2db      	uxtb	r3, r3
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d0fa      	beq.n	8016d84 <UART_Test_Perform+0xc4>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8016d8e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016d92:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016d96:	781c      	ldrb	r4, [r3, #0]
 8016d98:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8016d9c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016da0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016da4:	7819      	ldrb	r1, [r3, #0]
 8016da6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016daa:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8016dae:	4623      	mov	r3, r4
 8016db0:	6800      	ldr	r0, [r0, #0]
 8016db2:	f7ff fb7d 	bl	80164b0 <Match_CRC>
 8016db6:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8016dba:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8016dbe:	2b01      	cmp	r3, #1
 8016dc0:	d101      	bne.n	8016dc6 <UART_Test_Perform+0x106>
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	e000      	b.n	8016dc8 <UART_Test_Perform+0x108>

	return TEST_FAILED;
 8016dc6:	23ff      	movs	r3, #255	@ 0xff
}
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd90      	pop	{r4, r7, pc}
 8016dd2:	bf00      	nop
 8016dd4:	20008924 	.word	0x20008924
 8016dd8:	20008925 	.word	0x20008925
 8016ddc:	200008a4 	.word	0x200008a4
 8016de0:	2000081c 	.word	0x2000081c

08016de4 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8016de4:	b480      	push	{r7}
 8016de6:	b083      	sub	sp, #12
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	4a09      	ldr	r2, [pc, #36]	@ (8016e14 <HAL_UART_RxCpltCallback+0x30>)
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d102      	bne.n	8016dfa <HAL_UART_RxCpltCallback+0x16>
 8016df4:	4b08      	ldr	r3, [pc, #32]	@ (8016e18 <HAL_UART_RxCpltCallback+0x34>)
 8016df6:	2201      	movs	r2, #1
 8016df8:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	4a07      	ldr	r2, [pc, #28]	@ (8016e1c <HAL_UART_RxCpltCallback+0x38>)
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d102      	bne.n	8016e08 <HAL_UART_RxCpltCallback+0x24>
 8016e02:	4b07      	ldr	r3, [pc, #28]	@ (8016e20 <HAL_UART_RxCpltCallback+0x3c>)
 8016e04:	2201      	movs	r2, #1
 8016e06:	701a      	strb	r2, [r3, #0]
}
 8016e08:	bf00      	nop
 8016e0a:	370c      	adds	r7, #12
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e12:	4770      	bx	lr
 8016e14:	2000081c 	.word	0x2000081c
 8016e18:	20008924 	.word	0x20008924
 8016e1c:	200008a4 	.word	0x200008a4
 8016e20:	20008925 	.word	0x20008925

08016e24 <rand>:
 8016e24:	4b16      	ldr	r3, [pc, #88]	@ (8016e80 <rand+0x5c>)
 8016e26:	b510      	push	{r4, lr}
 8016e28:	681c      	ldr	r4, [r3, #0]
 8016e2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016e2c:	b9b3      	cbnz	r3, 8016e5c <rand+0x38>
 8016e2e:	2018      	movs	r0, #24
 8016e30:	f000 fa4a 	bl	80172c8 <malloc>
 8016e34:	4602      	mov	r2, r0
 8016e36:	6320      	str	r0, [r4, #48]	@ 0x30
 8016e38:	b920      	cbnz	r0, 8016e44 <rand+0x20>
 8016e3a:	4b12      	ldr	r3, [pc, #72]	@ (8016e84 <rand+0x60>)
 8016e3c:	4812      	ldr	r0, [pc, #72]	@ (8016e88 <rand+0x64>)
 8016e3e:	2152      	movs	r1, #82	@ 0x52
 8016e40:	f000 f9da 	bl	80171f8 <__assert_func>
 8016e44:	4911      	ldr	r1, [pc, #68]	@ (8016e8c <rand+0x68>)
 8016e46:	4b12      	ldr	r3, [pc, #72]	@ (8016e90 <rand+0x6c>)
 8016e48:	e9c0 1300 	strd	r1, r3, [r0]
 8016e4c:	4b11      	ldr	r3, [pc, #68]	@ (8016e94 <rand+0x70>)
 8016e4e:	6083      	str	r3, [r0, #8]
 8016e50:	230b      	movs	r3, #11
 8016e52:	8183      	strh	r3, [r0, #12]
 8016e54:	2100      	movs	r1, #0
 8016e56:	2001      	movs	r0, #1
 8016e58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016e5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e5e:	480e      	ldr	r0, [pc, #56]	@ (8016e98 <rand+0x74>)
 8016e60:	690b      	ldr	r3, [r1, #16]
 8016e62:	694c      	ldr	r4, [r1, #20]
 8016e64:	4a0d      	ldr	r2, [pc, #52]	@ (8016e9c <rand+0x78>)
 8016e66:	4358      	muls	r0, r3
 8016e68:	fb02 0004 	mla	r0, r2, r4, r0
 8016e6c:	fba3 3202 	umull	r3, r2, r3, r2
 8016e70:	3301      	adds	r3, #1
 8016e72:	eb40 0002 	adc.w	r0, r0, r2
 8016e76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016e7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016e7e:	bd10      	pop	{r4, pc}
 8016e80:	20000038 	.word	0x20000038
 8016e84:	0801a95a 	.word	0x0801a95a
 8016e88:	0801a971 	.word	0x0801a971
 8016e8c:	abcd330e 	.word	0xabcd330e
 8016e90:	e66d1234 	.word	0xe66d1234
 8016e94:	0005deec 	.word	0x0005deec
 8016e98:	5851f42d 	.word	0x5851f42d
 8016e9c:	4c957f2d 	.word	0x4c957f2d

08016ea0 <std>:
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	b510      	push	{r4, lr}
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8016eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016eae:	6083      	str	r3, [r0, #8]
 8016eb0:	8181      	strh	r1, [r0, #12]
 8016eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8016eb4:	81c2      	strh	r2, [r0, #14]
 8016eb6:	6183      	str	r3, [r0, #24]
 8016eb8:	4619      	mov	r1, r3
 8016eba:	2208      	movs	r2, #8
 8016ebc:	305c      	adds	r0, #92	@ 0x5c
 8016ebe:	f000 f916 	bl	80170ee <memset>
 8016ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ef8 <std+0x58>)
 8016ec4:	6263      	str	r3, [r4, #36]	@ 0x24
 8016ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8016efc <std+0x5c>)
 8016ec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016eca:	4b0d      	ldr	r3, [pc, #52]	@ (8016f00 <std+0x60>)
 8016ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016ece:	4b0d      	ldr	r3, [pc, #52]	@ (8016f04 <std+0x64>)
 8016ed0:	6323      	str	r3, [r4, #48]	@ 0x30
 8016ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8016f08 <std+0x68>)
 8016ed4:	6224      	str	r4, [r4, #32]
 8016ed6:	429c      	cmp	r4, r3
 8016ed8:	d006      	beq.n	8016ee8 <std+0x48>
 8016eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016ede:	4294      	cmp	r4, r2
 8016ee0:	d002      	beq.n	8016ee8 <std+0x48>
 8016ee2:	33d0      	adds	r3, #208	@ 0xd0
 8016ee4:	429c      	cmp	r4, r3
 8016ee6:	d105      	bne.n	8016ef4 <std+0x54>
 8016ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ef0:	f000 b970 	b.w	80171d4 <__retarget_lock_init_recursive>
 8016ef4:	bd10      	pop	{r4, pc}
 8016ef6:	bf00      	nop
 8016ef8:	08017049 	.word	0x08017049
 8016efc:	0801706b 	.word	0x0801706b
 8016f00:	080170a3 	.word	0x080170a3
 8016f04:	080170c7 	.word	0x080170c7
 8016f08:	20008928 	.word	0x20008928

08016f0c <stdio_exit_handler>:
 8016f0c:	4a02      	ldr	r2, [pc, #8]	@ (8016f18 <stdio_exit_handler+0xc>)
 8016f0e:	4903      	ldr	r1, [pc, #12]	@ (8016f1c <stdio_exit_handler+0x10>)
 8016f10:	4803      	ldr	r0, [pc, #12]	@ (8016f20 <stdio_exit_handler+0x14>)
 8016f12:	f000 b869 	b.w	8016fe8 <_fwalk_sglue>
 8016f16:	bf00      	nop
 8016f18:	2000002c 	.word	0x2000002c
 8016f1c:	08017ad9 	.word	0x08017ad9
 8016f20:	2000003c 	.word	0x2000003c

08016f24 <cleanup_stdio>:
 8016f24:	6841      	ldr	r1, [r0, #4]
 8016f26:	4b0c      	ldr	r3, [pc, #48]	@ (8016f58 <cleanup_stdio+0x34>)
 8016f28:	4299      	cmp	r1, r3
 8016f2a:	b510      	push	{r4, lr}
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	d001      	beq.n	8016f34 <cleanup_stdio+0x10>
 8016f30:	f000 fdd2 	bl	8017ad8 <_fflush_r>
 8016f34:	68a1      	ldr	r1, [r4, #8]
 8016f36:	4b09      	ldr	r3, [pc, #36]	@ (8016f5c <cleanup_stdio+0x38>)
 8016f38:	4299      	cmp	r1, r3
 8016f3a:	d002      	beq.n	8016f42 <cleanup_stdio+0x1e>
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f000 fdcb 	bl	8017ad8 <_fflush_r>
 8016f42:	68e1      	ldr	r1, [r4, #12]
 8016f44:	4b06      	ldr	r3, [pc, #24]	@ (8016f60 <cleanup_stdio+0x3c>)
 8016f46:	4299      	cmp	r1, r3
 8016f48:	d004      	beq.n	8016f54 <cleanup_stdio+0x30>
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f50:	f000 bdc2 	b.w	8017ad8 <_fflush_r>
 8016f54:	bd10      	pop	{r4, pc}
 8016f56:	bf00      	nop
 8016f58:	20008928 	.word	0x20008928
 8016f5c:	20008990 	.word	0x20008990
 8016f60:	200089f8 	.word	0x200089f8

08016f64 <global_stdio_init.part.0>:
 8016f64:	b510      	push	{r4, lr}
 8016f66:	4b0b      	ldr	r3, [pc, #44]	@ (8016f94 <global_stdio_init.part.0+0x30>)
 8016f68:	4c0b      	ldr	r4, [pc, #44]	@ (8016f98 <global_stdio_init.part.0+0x34>)
 8016f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8016f9c <global_stdio_init.part.0+0x38>)
 8016f6c:	601a      	str	r2, [r3, #0]
 8016f6e:	4620      	mov	r0, r4
 8016f70:	2200      	movs	r2, #0
 8016f72:	2104      	movs	r1, #4
 8016f74:	f7ff ff94 	bl	8016ea0 <std>
 8016f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016f7c:	2201      	movs	r2, #1
 8016f7e:	2109      	movs	r1, #9
 8016f80:	f7ff ff8e 	bl	8016ea0 <std>
 8016f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016f88:	2202      	movs	r2, #2
 8016f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f8e:	2112      	movs	r1, #18
 8016f90:	f7ff bf86 	b.w	8016ea0 <std>
 8016f94:	20008a60 	.word	0x20008a60
 8016f98:	20008928 	.word	0x20008928
 8016f9c:	08016f0d 	.word	0x08016f0d

08016fa0 <__sfp_lock_acquire>:
 8016fa0:	4801      	ldr	r0, [pc, #4]	@ (8016fa8 <__sfp_lock_acquire+0x8>)
 8016fa2:	f000 b918 	b.w	80171d6 <__retarget_lock_acquire_recursive>
 8016fa6:	bf00      	nop
 8016fa8:	20008a69 	.word	0x20008a69

08016fac <__sfp_lock_release>:
 8016fac:	4801      	ldr	r0, [pc, #4]	@ (8016fb4 <__sfp_lock_release+0x8>)
 8016fae:	f000 b913 	b.w	80171d8 <__retarget_lock_release_recursive>
 8016fb2:	bf00      	nop
 8016fb4:	20008a69 	.word	0x20008a69

08016fb8 <__sinit>:
 8016fb8:	b510      	push	{r4, lr}
 8016fba:	4604      	mov	r4, r0
 8016fbc:	f7ff fff0 	bl	8016fa0 <__sfp_lock_acquire>
 8016fc0:	6a23      	ldr	r3, [r4, #32]
 8016fc2:	b11b      	cbz	r3, 8016fcc <__sinit+0x14>
 8016fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fc8:	f7ff bff0 	b.w	8016fac <__sfp_lock_release>
 8016fcc:	4b04      	ldr	r3, [pc, #16]	@ (8016fe0 <__sinit+0x28>)
 8016fce:	6223      	str	r3, [r4, #32]
 8016fd0:	4b04      	ldr	r3, [pc, #16]	@ (8016fe4 <__sinit+0x2c>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d1f5      	bne.n	8016fc4 <__sinit+0xc>
 8016fd8:	f7ff ffc4 	bl	8016f64 <global_stdio_init.part.0>
 8016fdc:	e7f2      	b.n	8016fc4 <__sinit+0xc>
 8016fde:	bf00      	nop
 8016fe0:	08016f25 	.word	0x08016f25
 8016fe4:	20008a60 	.word	0x20008a60

08016fe8 <_fwalk_sglue>:
 8016fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fec:	4607      	mov	r7, r0
 8016fee:	4688      	mov	r8, r1
 8016ff0:	4614      	mov	r4, r2
 8016ff2:	2600      	movs	r6, #0
 8016ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8016ffc:	d505      	bpl.n	801700a <_fwalk_sglue+0x22>
 8016ffe:	6824      	ldr	r4, [r4, #0]
 8017000:	2c00      	cmp	r4, #0
 8017002:	d1f7      	bne.n	8016ff4 <_fwalk_sglue+0xc>
 8017004:	4630      	mov	r0, r6
 8017006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801700a:	89ab      	ldrh	r3, [r5, #12]
 801700c:	2b01      	cmp	r3, #1
 801700e:	d907      	bls.n	8017020 <_fwalk_sglue+0x38>
 8017010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017014:	3301      	adds	r3, #1
 8017016:	d003      	beq.n	8017020 <_fwalk_sglue+0x38>
 8017018:	4629      	mov	r1, r5
 801701a:	4638      	mov	r0, r7
 801701c:	47c0      	blx	r8
 801701e:	4306      	orrs	r6, r0
 8017020:	3568      	adds	r5, #104	@ 0x68
 8017022:	e7e9      	b.n	8016ff8 <_fwalk_sglue+0x10>

08017024 <iprintf>:
 8017024:	b40f      	push	{r0, r1, r2, r3}
 8017026:	b507      	push	{r0, r1, r2, lr}
 8017028:	4906      	ldr	r1, [pc, #24]	@ (8017044 <iprintf+0x20>)
 801702a:	ab04      	add	r3, sp, #16
 801702c:	6808      	ldr	r0, [r1, #0]
 801702e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017032:	6881      	ldr	r1, [r0, #8]
 8017034:	9301      	str	r3, [sp, #4]
 8017036:	f000 fa27 	bl	8017488 <_vfiprintf_r>
 801703a:	b003      	add	sp, #12
 801703c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017040:	b004      	add	sp, #16
 8017042:	4770      	bx	lr
 8017044:	20000038 	.word	0x20000038

08017048 <__sread>:
 8017048:	b510      	push	{r4, lr}
 801704a:	460c      	mov	r4, r1
 801704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017050:	f000 f878 	bl	8017144 <_read_r>
 8017054:	2800      	cmp	r0, #0
 8017056:	bfab      	itete	ge
 8017058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801705a:	89a3      	ldrhlt	r3, [r4, #12]
 801705c:	181b      	addge	r3, r3, r0
 801705e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017062:	bfac      	ite	ge
 8017064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017066:	81a3      	strhlt	r3, [r4, #12]
 8017068:	bd10      	pop	{r4, pc}

0801706a <__swrite>:
 801706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801706e:	461f      	mov	r7, r3
 8017070:	898b      	ldrh	r3, [r1, #12]
 8017072:	05db      	lsls	r3, r3, #23
 8017074:	4605      	mov	r5, r0
 8017076:	460c      	mov	r4, r1
 8017078:	4616      	mov	r6, r2
 801707a:	d505      	bpl.n	8017088 <__swrite+0x1e>
 801707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017080:	2302      	movs	r3, #2
 8017082:	2200      	movs	r2, #0
 8017084:	f000 f84c 	bl	8017120 <_lseek_r>
 8017088:	89a3      	ldrh	r3, [r4, #12]
 801708a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801708e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017092:	81a3      	strh	r3, [r4, #12]
 8017094:	4632      	mov	r2, r6
 8017096:	463b      	mov	r3, r7
 8017098:	4628      	mov	r0, r5
 801709a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801709e:	f000 b863 	b.w	8017168 <_write_r>

080170a2 <__sseek>:
 80170a2:	b510      	push	{r4, lr}
 80170a4:	460c      	mov	r4, r1
 80170a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170aa:	f000 f839 	bl	8017120 <_lseek_r>
 80170ae:	1c43      	adds	r3, r0, #1
 80170b0:	89a3      	ldrh	r3, [r4, #12]
 80170b2:	bf15      	itete	ne
 80170b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80170b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80170ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80170be:	81a3      	strheq	r3, [r4, #12]
 80170c0:	bf18      	it	ne
 80170c2:	81a3      	strhne	r3, [r4, #12]
 80170c4:	bd10      	pop	{r4, pc}

080170c6 <__sclose>:
 80170c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170ca:	f000 b819 	b.w	8017100 <_close_r>

080170ce <memcmp>:
 80170ce:	b510      	push	{r4, lr}
 80170d0:	3901      	subs	r1, #1
 80170d2:	4402      	add	r2, r0
 80170d4:	4290      	cmp	r0, r2
 80170d6:	d101      	bne.n	80170dc <memcmp+0xe>
 80170d8:	2000      	movs	r0, #0
 80170da:	e005      	b.n	80170e8 <memcmp+0x1a>
 80170dc:	7803      	ldrb	r3, [r0, #0]
 80170de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80170e2:	42a3      	cmp	r3, r4
 80170e4:	d001      	beq.n	80170ea <memcmp+0x1c>
 80170e6:	1b18      	subs	r0, r3, r4
 80170e8:	bd10      	pop	{r4, pc}
 80170ea:	3001      	adds	r0, #1
 80170ec:	e7f2      	b.n	80170d4 <memcmp+0x6>

080170ee <memset>:
 80170ee:	4402      	add	r2, r0
 80170f0:	4603      	mov	r3, r0
 80170f2:	4293      	cmp	r3, r2
 80170f4:	d100      	bne.n	80170f8 <memset+0xa>
 80170f6:	4770      	bx	lr
 80170f8:	f803 1b01 	strb.w	r1, [r3], #1
 80170fc:	e7f9      	b.n	80170f2 <memset+0x4>
	...

08017100 <_close_r>:
 8017100:	b538      	push	{r3, r4, r5, lr}
 8017102:	4d06      	ldr	r5, [pc, #24]	@ (801711c <_close_r+0x1c>)
 8017104:	2300      	movs	r3, #0
 8017106:	4604      	mov	r4, r0
 8017108:	4608      	mov	r0, r1
 801710a:	602b      	str	r3, [r5, #0]
 801710c:	f7ea fa7a 	bl	8001604 <_close>
 8017110:	1c43      	adds	r3, r0, #1
 8017112:	d102      	bne.n	801711a <_close_r+0x1a>
 8017114:	682b      	ldr	r3, [r5, #0]
 8017116:	b103      	cbz	r3, 801711a <_close_r+0x1a>
 8017118:	6023      	str	r3, [r4, #0]
 801711a:	bd38      	pop	{r3, r4, r5, pc}
 801711c:	20008a64 	.word	0x20008a64

08017120 <_lseek_r>:
 8017120:	b538      	push	{r3, r4, r5, lr}
 8017122:	4d07      	ldr	r5, [pc, #28]	@ (8017140 <_lseek_r+0x20>)
 8017124:	4604      	mov	r4, r0
 8017126:	4608      	mov	r0, r1
 8017128:	4611      	mov	r1, r2
 801712a:	2200      	movs	r2, #0
 801712c:	602a      	str	r2, [r5, #0]
 801712e:	461a      	mov	r2, r3
 8017130:	f7ea fa8f 	bl	8001652 <_lseek>
 8017134:	1c43      	adds	r3, r0, #1
 8017136:	d102      	bne.n	801713e <_lseek_r+0x1e>
 8017138:	682b      	ldr	r3, [r5, #0]
 801713a:	b103      	cbz	r3, 801713e <_lseek_r+0x1e>
 801713c:	6023      	str	r3, [r4, #0]
 801713e:	bd38      	pop	{r3, r4, r5, pc}
 8017140:	20008a64 	.word	0x20008a64

08017144 <_read_r>:
 8017144:	b538      	push	{r3, r4, r5, lr}
 8017146:	4d07      	ldr	r5, [pc, #28]	@ (8017164 <_read_r+0x20>)
 8017148:	4604      	mov	r4, r0
 801714a:	4608      	mov	r0, r1
 801714c:	4611      	mov	r1, r2
 801714e:	2200      	movs	r2, #0
 8017150:	602a      	str	r2, [r5, #0]
 8017152:	461a      	mov	r2, r3
 8017154:	f7ea fa39 	bl	80015ca <_read>
 8017158:	1c43      	adds	r3, r0, #1
 801715a:	d102      	bne.n	8017162 <_read_r+0x1e>
 801715c:	682b      	ldr	r3, [r5, #0]
 801715e:	b103      	cbz	r3, 8017162 <_read_r+0x1e>
 8017160:	6023      	str	r3, [r4, #0]
 8017162:	bd38      	pop	{r3, r4, r5, pc}
 8017164:	20008a64 	.word	0x20008a64

08017168 <_write_r>:
 8017168:	b538      	push	{r3, r4, r5, lr}
 801716a:	4d07      	ldr	r5, [pc, #28]	@ (8017188 <_write_r+0x20>)
 801716c:	4604      	mov	r4, r0
 801716e:	4608      	mov	r0, r1
 8017170:	4611      	mov	r1, r2
 8017172:	2200      	movs	r2, #0
 8017174:	602a      	str	r2, [r5, #0]
 8017176:	461a      	mov	r2, r3
 8017178:	f7e9 fe20 	bl	8000dbc <_write>
 801717c:	1c43      	adds	r3, r0, #1
 801717e:	d102      	bne.n	8017186 <_write_r+0x1e>
 8017180:	682b      	ldr	r3, [r5, #0]
 8017182:	b103      	cbz	r3, 8017186 <_write_r+0x1e>
 8017184:	6023      	str	r3, [r4, #0]
 8017186:	bd38      	pop	{r3, r4, r5, pc}
 8017188:	20008a64 	.word	0x20008a64

0801718c <__libc_init_array>:
 801718c:	b570      	push	{r4, r5, r6, lr}
 801718e:	4d0d      	ldr	r5, [pc, #52]	@ (80171c4 <__libc_init_array+0x38>)
 8017190:	4c0d      	ldr	r4, [pc, #52]	@ (80171c8 <__libc_init_array+0x3c>)
 8017192:	1b64      	subs	r4, r4, r5
 8017194:	10a4      	asrs	r4, r4, #2
 8017196:	2600      	movs	r6, #0
 8017198:	42a6      	cmp	r6, r4
 801719a:	d109      	bne.n	80171b0 <__libc_init_array+0x24>
 801719c:	4d0b      	ldr	r5, [pc, #44]	@ (80171cc <__libc_init_array+0x40>)
 801719e:	4c0c      	ldr	r4, [pc, #48]	@ (80171d0 <__libc_init_array+0x44>)
 80171a0:	f000 fe48 	bl	8017e34 <_init>
 80171a4:	1b64      	subs	r4, r4, r5
 80171a6:	10a4      	asrs	r4, r4, #2
 80171a8:	2600      	movs	r6, #0
 80171aa:	42a6      	cmp	r6, r4
 80171ac:	d105      	bne.n	80171ba <__libc_init_array+0x2e>
 80171ae:	bd70      	pop	{r4, r5, r6, pc}
 80171b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80171b4:	4798      	blx	r3
 80171b6:	3601      	adds	r6, #1
 80171b8:	e7ee      	b.n	8017198 <__libc_init_array+0xc>
 80171ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80171be:	4798      	blx	r3
 80171c0:	3601      	adds	r6, #1
 80171c2:	e7f2      	b.n	80171aa <__libc_init_array+0x1e>
 80171c4:	0801aa40 	.word	0x0801aa40
 80171c8:	0801aa40 	.word	0x0801aa40
 80171cc:	0801aa40 	.word	0x0801aa40
 80171d0:	0801aa44 	.word	0x0801aa44

080171d4 <__retarget_lock_init_recursive>:
 80171d4:	4770      	bx	lr

080171d6 <__retarget_lock_acquire_recursive>:
 80171d6:	4770      	bx	lr

080171d8 <__retarget_lock_release_recursive>:
 80171d8:	4770      	bx	lr

080171da <memcpy>:
 80171da:	440a      	add	r2, r1
 80171dc:	4291      	cmp	r1, r2
 80171de:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80171e2:	d100      	bne.n	80171e6 <memcpy+0xc>
 80171e4:	4770      	bx	lr
 80171e6:	b510      	push	{r4, lr}
 80171e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171f0:	4291      	cmp	r1, r2
 80171f2:	d1f9      	bne.n	80171e8 <memcpy+0xe>
 80171f4:	bd10      	pop	{r4, pc}
	...

080171f8 <__assert_func>:
 80171f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171fa:	4614      	mov	r4, r2
 80171fc:	461a      	mov	r2, r3
 80171fe:	4b09      	ldr	r3, [pc, #36]	@ (8017224 <__assert_func+0x2c>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	4605      	mov	r5, r0
 8017204:	68d8      	ldr	r0, [r3, #12]
 8017206:	b14c      	cbz	r4, 801721c <__assert_func+0x24>
 8017208:	4b07      	ldr	r3, [pc, #28]	@ (8017228 <__assert_func+0x30>)
 801720a:	9100      	str	r1, [sp, #0]
 801720c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017210:	4906      	ldr	r1, [pc, #24]	@ (801722c <__assert_func+0x34>)
 8017212:	462b      	mov	r3, r5
 8017214:	f000 fc88 	bl	8017b28 <fiprintf>
 8017218:	f000 fd3c 	bl	8017c94 <abort>
 801721c:	4b04      	ldr	r3, [pc, #16]	@ (8017230 <__assert_func+0x38>)
 801721e:	461c      	mov	r4, r3
 8017220:	e7f3      	b.n	801720a <__assert_func+0x12>
 8017222:	bf00      	nop
 8017224:	20000038 	.word	0x20000038
 8017228:	0801a9c9 	.word	0x0801a9c9
 801722c:	0801a9d6 	.word	0x0801a9d6
 8017230:	0801aa04 	.word	0x0801aa04

08017234 <_free_r>:
 8017234:	b538      	push	{r3, r4, r5, lr}
 8017236:	4605      	mov	r5, r0
 8017238:	2900      	cmp	r1, #0
 801723a:	d041      	beq.n	80172c0 <_free_r+0x8c>
 801723c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017240:	1f0c      	subs	r4, r1, #4
 8017242:	2b00      	cmp	r3, #0
 8017244:	bfb8      	it	lt
 8017246:	18e4      	addlt	r4, r4, r3
 8017248:	f000 f8e8 	bl	801741c <__malloc_lock>
 801724c:	4a1d      	ldr	r2, [pc, #116]	@ (80172c4 <_free_r+0x90>)
 801724e:	6813      	ldr	r3, [r2, #0]
 8017250:	b933      	cbnz	r3, 8017260 <_free_r+0x2c>
 8017252:	6063      	str	r3, [r4, #4]
 8017254:	6014      	str	r4, [r2, #0]
 8017256:	4628      	mov	r0, r5
 8017258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801725c:	f000 b8e4 	b.w	8017428 <__malloc_unlock>
 8017260:	42a3      	cmp	r3, r4
 8017262:	d908      	bls.n	8017276 <_free_r+0x42>
 8017264:	6820      	ldr	r0, [r4, #0]
 8017266:	1821      	adds	r1, r4, r0
 8017268:	428b      	cmp	r3, r1
 801726a:	bf01      	itttt	eq
 801726c:	6819      	ldreq	r1, [r3, #0]
 801726e:	685b      	ldreq	r3, [r3, #4]
 8017270:	1809      	addeq	r1, r1, r0
 8017272:	6021      	streq	r1, [r4, #0]
 8017274:	e7ed      	b.n	8017252 <_free_r+0x1e>
 8017276:	461a      	mov	r2, r3
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	b10b      	cbz	r3, 8017280 <_free_r+0x4c>
 801727c:	42a3      	cmp	r3, r4
 801727e:	d9fa      	bls.n	8017276 <_free_r+0x42>
 8017280:	6811      	ldr	r1, [r2, #0]
 8017282:	1850      	adds	r0, r2, r1
 8017284:	42a0      	cmp	r0, r4
 8017286:	d10b      	bne.n	80172a0 <_free_r+0x6c>
 8017288:	6820      	ldr	r0, [r4, #0]
 801728a:	4401      	add	r1, r0
 801728c:	1850      	adds	r0, r2, r1
 801728e:	4283      	cmp	r3, r0
 8017290:	6011      	str	r1, [r2, #0]
 8017292:	d1e0      	bne.n	8017256 <_free_r+0x22>
 8017294:	6818      	ldr	r0, [r3, #0]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	6053      	str	r3, [r2, #4]
 801729a:	4408      	add	r0, r1
 801729c:	6010      	str	r0, [r2, #0]
 801729e:	e7da      	b.n	8017256 <_free_r+0x22>
 80172a0:	d902      	bls.n	80172a8 <_free_r+0x74>
 80172a2:	230c      	movs	r3, #12
 80172a4:	602b      	str	r3, [r5, #0]
 80172a6:	e7d6      	b.n	8017256 <_free_r+0x22>
 80172a8:	6820      	ldr	r0, [r4, #0]
 80172aa:	1821      	adds	r1, r4, r0
 80172ac:	428b      	cmp	r3, r1
 80172ae:	bf04      	itt	eq
 80172b0:	6819      	ldreq	r1, [r3, #0]
 80172b2:	685b      	ldreq	r3, [r3, #4]
 80172b4:	6063      	str	r3, [r4, #4]
 80172b6:	bf04      	itt	eq
 80172b8:	1809      	addeq	r1, r1, r0
 80172ba:	6021      	streq	r1, [r4, #0]
 80172bc:	6054      	str	r4, [r2, #4]
 80172be:	e7ca      	b.n	8017256 <_free_r+0x22>
 80172c0:	bd38      	pop	{r3, r4, r5, pc}
 80172c2:	bf00      	nop
 80172c4:	20008a70 	.word	0x20008a70

080172c8 <malloc>:
 80172c8:	4b02      	ldr	r3, [pc, #8]	@ (80172d4 <malloc+0xc>)
 80172ca:	4601      	mov	r1, r0
 80172cc:	6818      	ldr	r0, [r3, #0]
 80172ce:	f000 b825 	b.w	801731c <_malloc_r>
 80172d2:	bf00      	nop
 80172d4:	20000038 	.word	0x20000038

080172d8 <sbrk_aligned>:
 80172d8:	b570      	push	{r4, r5, r6, lr}
 80172da:	4e0f      	ldr	r6, [pc, #60]	@ (8017318 <sbrk_aligned+0x40>)
 80172dc:	460c      	mov	r4, r1
 80172de:	6831      	ldr	r1, [r6, #0]
 80172e0:	4605      	mov	r5, r0
 80172e2:	b911      	cbnz	r1, 80172ea <sbrk_aligned+0x12>
 80172e4:	f000 fcc6 	bl	8017c74 <_sbrk_r>
 80172e8:	6030      	str	r0, [r6, #0]
 80172ea:	4621      	mov	r1, r4
 80172ec:	4628      	mov	r0, r5
 80172ee:	f000 fcc1 	bl	8017c74 <_sbrk_r>
 80172f2:	1c43      	adds	r3, r0, #1
 80172f4:	d103      	bne.n	80172fe <sbrk_aligned+0x26>
 80172f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80172fa:	4620      	mov	r0, r4
 80172fc:	bd70      	pop	{r4, r5, r6, pc}
 80172fe:	1cc4      	adds	r4, r0, #3
 8017300:	f024 0403 	bic.w	r4, r4, #3
 8017304:	42a0      	cmp	r0, r4
 8017306:	d0f8      	beq.n	80172fa <sbrk_aligned+0x22>
 8017308:	1a21      	subs	r1, r4, r0
 801730a:	4628      	mov	r0, r5
 801730c:	f000 fcb2 	bl	8017c74 <_sbrk_r>
 8017310:	3001      	adds	r0, #1
 8017312:	d1f2      	bne.n	80172fa <sbrk_aligned+0x22>
 8017314:	e7ef      	b.n	80172f6 <sbrk_aligned+0x1e>
 8017316:	bf00      	nop
 8017318:	20008a6c 	.word	0x20008a6c

0801731c <_malloc_r>:
 801731c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017320:	1ccd      	adds	r5, r1, #3
 8017322:	f025 0503 	bic.w	r5, r5, #3
 8017326:	3508      	adds	r5, #8
 8017328:	2d0c      	cmp	r5, #12
 801732a:	bf38      	it	cc
 801732c:	250c      	movcc	r5, #12
 801732e:	2d00      	cmp	r5, #0
 8017330:	4606      	mov	r6, r0
 8017332:	db01      	blt.n	8017338 <_malloc_r+0x1c>
 8017334:	42a9      	cmp	r1, r5
 8017336:	d904      	bls.n	8017342 <_malloc_r+0x26>
 8017338:	230c      	movs	r3, #12
 801733a:	6033      	str	r3, [r6, #0]
 801733c:	2000      	movs	r0, #0
 801733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017418 <_malloc_r+0xfc>
 8017346:	f000 f869 	bl	801741c <__malloc_lock>
 801734a:	f8d8 3000 	ldr.w	r3, [r8]
 801734e:	461c      	mov	r4, r3
 8017350:	bb44      	cbnz	r4, 80173a4 <_malloc_r+0x88>
 8017352:	4629      	mov	r1, r5
 8017354:	4630      	mov	r0, r6
 8017356:	f7ff ffbf 	bl	80172d8 <sbrk_aligned>
 801735a:	1c43      	adds	r3, r0, #1
 801735c:	4604      	mov	r4, r0
 801735e:	d158      	bne.n	8017412 <_malloc_r+0xf6>
 8017360:	f8d8 4000 	ldr.w	r4, [r8]
 8017364:	4627      	mov	r7, r4
 8017366:	2f00      	cmp	r7, #0
 8017368:	d143      	bne.n	80173f2 <_malloc_r+0xd6>
 801736a:	2c00      	cmp	r4, #0
 801736c:	d04b      	beq.n	8017406 <_malloc_r+0xea>
 801736e:	6823      	ldr	r3, [r4, #0]
 8017370:	4639      	mov	r1, r7
 8017372:	4630      	mov	r0, r6
 8017374:	eb04 0903 	add.w	r9, r4, r3
 8017378:	f000 fc7c 	bl	8017c74 <_sbrk_r>
 801737c:	4581      	cmp	r9, r0
 801737e:	d142      	bne.n	8017406 <_malloc_r+0xea>
 8017380:	6821      	ldr	r1, [r4, #0]
 8017382:	1a6d      	subs	r5, r5, r1
 8017384:	4629      	mov	r1, r5
 8017386:	4630      	mov	r0, r6
 8017388:	f7ff ffa6 	bl	80172d8 <sbrk_aligned>
 801738c:	3001      	adds	r0, #1
 801738e:	d03a      	beq.n	8017406 <_malloc_r+0xea>
 8017390:	6823      	ldr	r3, [r4, #0]
 8017392:	442b      	add	r3, r5
 8017394:	6023      	str	r3, [r4, #0]
 8017396:	f8d8 3000 	ldr.w	r3, [r8]
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	bb62      	cbnz	r2, 80173f8 <_malloc_r+0xdc>
 801739e:	f8c8 7000 	str.w	r7, [r8]
 80173a2:	e00f      	b.n	80173c4 <_malloc_r+0xa8>
 80173a4:	6822      	ldr	r2, [r4, #0]
 80173a6:	1b52      	subs	r2, r2, r5
 80173a8:	d420      	bmi.n	80173ec <_malloc_r+0xd0>
 80173aa:	2a0b      	cmp	r2, #11
 80173ac:	d917      	bls.n	80173de <_malloc_r+0xc2>
 80173ae:	1961      	adds	r1, r4, r5
 80173b0:	42a3      	cmp	r3, r4
 80173b2:	6025      	str	r5, [r4, #0]
 80173b4:	bf18      	it	ne
 80173b6:	6059      	strne	r1, [r3, #4]
 80173b8:	6863      	ldr	r3, [r4, #4]
 80173ba:	bf08      	it	eq
 80173bc:	f8c8 1000 	streq.w	r1, [r8]
 80173c0:	5162      	str	r2, [r4, r5]
 80173c2:	604b      	str	r3, [r1, #4]
 80173c4:	4630      	mov	r0, r6
 80173c6:	f000 f82f 	bl	8017428 <__malloc_unlock>
 80173ca:	f104 000b 	add.w	r0, r4, #11
 80173ce:	1d23      	adds	r3, r4, #4
 80173d0:	f020 0007 	bic.w	r0, r0, #7
 80173d4:	1ac2      	subs	r2, r0, r3
 80173d6:	bf1c      	itt	ne
 80173d8:	1a1b      	subne	r3, r3, r0
 80173da:	50a3      	strne	r3, [r4, r2]
 80173dc:	e7af      	b.n	801733e <_malloc_r+0x22>
 80173de:	6862      	ldr	r2, [r4, #4]
 80173e0:	42a3      	cmp	r3, r4
 80173e2:	bf0c      	ite	eq
 80173e4:	f8c8 2000 	streq.w	r2, [r8]
 80173e8:	605a      	strne	r2, [r3, #4]
 80173ea:	e7eb      	b.n	80173c4 <_malloc_r+0xa8>
 80173ec:	4623      	mov	r3, r4
 80173ee:	6864      	ldr	r4, [r4, #4]
 80173f0:	e7ae      	b.n	8017350 <_malloc_r+0x34>
 80173f2:	463c      	mov	r4, r7
 80173f4:	687f      	ldr	r7, [r7, #4]
 80173f6:	e7b6      	b.n	8017366 <_malloc_r+0x4a>
 80173f8:	461a      	mov	r2, r3
 80173fa:	685b      	ldr	r3, [r3, #4]
 80173fc:	42a3      	cmp	r3, r4
 80173fe:	d1fb      	bne.n	80173f8 <_malloc_r+0xdc>
 8017400:	2300      	movs	r3, #0
 8017402:	6053      	str	r3, [r2, #4]
 8017404:	e7de      	b.n	80173c4 <_malloc_r+0xa8>
 8017406:	230c      	movs	r3, #12
 8017408:	6033      	str	r3, [r6, #0]
 801740a:	4630      	mov	r0, r6
 801740c:	f000 f80c 	bl	8017428 <__malloc_unlock>
 8017410:	e794      	b.n	801733c <_malloc_r+0x20>
 8017412:	6005      	str	r5, [r0, #0]
 8017414:	e7d6      	b.n	80173c4 <_malloc_r+0xa8>
 8017416:	bf00      	nop
 8017418:	20008a70 	.word	0x20008a70

0801741c <__malloc_lock>:
 801741c:	4801      	ldr	r0, [pc, #4]	@ (8017424 <__malloc_lock+0x8>)
 801741e:	f7ff beda 	b.w	80171d6 <__retarget_lock_acquire_recursive>
 8017422:	bf00      	nop
 8017424:	20008a68 	.word	0x20008a68

08017428 <__malloc_unlock>:
 8017428:	4801      	ldr	r0, [pc, #4]	@ (8017430 <__malloc_unlock+0x8>)
 801742a:	f7ff bed5 	b.w	80171d8 <__retarget_lock_release_recursive>
 801742e:	bf00      	nop
 8017430:	20008a68 	.word	0x20008a68

08017434 <__sfputc_r>:
 8017434:	6893      	ldr	r3, [r2, #8]
 8017436:	3b01      	subs	r3, #1
 8017438:	2b00      	cmp	r3, #0
 801743a:	b410      	push	{r4}
 801743c:	6093      	str	r3, [r2, #8]
 801743e:	da08      	bge.n	8017452 <__sfputc_r+0x1e>
 8017440:	6994      	ldr	r4, [r2, #24]
 8017442:	42a3      	cmp	r3, r4
 8017444:	db01      	blt.n	801744a <__sfputc_r+0x16>
 8017446:	290a      	cmp	r1, #10
 8017448:	d103      	bne.n	8017452 <__sfputc_r+0x1e>
 801744a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801744e:	f000 bb7d 	b.w	8017b4c <__swbuf_r>
 8017452:	6813      	ldr	r3, [r2, #0]
 8017454:	1c58      	adds	r0, r3, #1
 8017456:	6010      	str	r0, [r2, #0]
 8017458:	7019      	strb	r1, [r3, #0]
 801745a:	4608      	mov	r0, r1
 801745c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017460:	4770      	bx	lr

08017462 <__sfputs_r>:
 8017462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017464:	4606      	mov	r6, r0
 8017466:	460f      	mov	r7, r1
 8017468:	4614      	mov	r4, r2
 801746a:	18d5      	adds	r5, r2, r3
 801746c:	42ac      	cmp	r4, r5
 801746e:	d101      	bne.n	8017474 <__sfputs_r+0x12>
 8017470:	2000      	movs	r0, #0
 8017472:	e007      	b.n	8017484 <__sfputs_r+0x22>
 8017474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017478:	463a      	mov	r2, r7
 801747a:	4630      	mov	r0, r6
 801747c:	f7ff ffda 	bl	8017434 <__sfputc_r>
 8017480:	1c43      	adds	r3, r0, #1
 8017482:	d1f3      	bne.n	801746c <__sfputs_r+0xa>
 8017484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017488 <_vfiprintf_r>:
 8017488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801748c:	460d      	mov	r5, r1
 801748e:	b09d      	sub	sp, #116	@ 0x74
 8017490:	4614      	mov	r4, r2
 8017492:	4698      	mov	r8, r3
 8017494:	4606      	mov	r6, r0
 8017496:	b118      	cbz	r0, 80174a0 <_vfiprintf_r+0x18>
 8017498:	6a03      	ldr	r3, [r0, #32]
 801749a:	b90b      	cbnz	r3, 80174a0 <_vfiprintf_r+0x18>
 801749c:	f7ff fd8c 	bl	8016fb8 <__sinit>
 80174a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80174a2:	07d9      	lsls	r1, r3, #31
 80174a4:	d405      	bmi.n	80174b2 <_vfiprintf_r+0x2a>
 80174a6:	89ab      	ldrh	r3, [r5, #12]
 80174a8:	059a      	lsls	r2, r3, #22
 80174aa:	d402      	bmi.n	80174b2 <_vfiprintf_r+0x2a>
 80174ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174ae:	f7ff fe92 	bl	80171d6 <__retarget_lock_acquire_recursive>
 80174b2:	89ab      	ldrh	r3, [r5, #12]
 80174b4:	071b      	lsls	r3, r3, #28
 80174b6:	d501      	bpl.n	80174bc <_vfiprintf_r+0x34>
 80174b8:	692b      	ldr	r3, [r5, #16]
 80174ba:	b99b      	cbnz	r3, 80174e4 <_vfiprintf_r+0x5c>
 80174bc:	4629      	mov	r1, r5
 80174be:	4630      	mov	r0, r6
 80174c0:	f000 fb82 	bl	8017bc8 <__swsetup_r>
 80174c4:	b170      	cbz	r0, 80174e4 <_vfiprintf_r+0x5c>
 80174c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80174c8:	07dc      	lsls	r4, r3, #31
 80174ca:	d504      	bpl.n	80174d6 <_vfiprintf_r+0x4e>
 80174cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174d0:	b01d      	add	sp, #116	@ 0x74
 80174d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174d6:	89ab      	ldrh	r3, [r5, #12]
 80174d8:	0598      	lsls	r0, r3, #22
 80174da:	d4f7      	bmi.n	80174cc <_vfiprintf_r+0x44>
 80174dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174de:	f7ff fe7b 	bl	80171d8 <__retarget_lock_release_recursive>
 80174e2:	e7f3      	b.n	80174cc <_vfiprintf_r+0x44>
 80174e4:	2300      	movs	r3, #0
 80174e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80174e8:	2320      	movs	r3, #32
 80174ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80174ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80174f2:	2330      	movs	r3, #48	@ 0x30
 80174f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80176a4 <_vfiprintf_r+0x21c>
 80174f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80174fc:	f04f 0901 	mov.w	r9, #1
 8017500:	4623      	mov	r3, r4
 8017502:	469a      	mov	sl, r3
 8017504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017508:	b10a      	cbz	r2, 801750e <_vfiprintf_r+0x86>
 801750a:	2a25      	cmp	r2, #37	@ 0x25
 801750c:	d1f9      	bne.n	8017502 <_vfiprintf_r+0x7a>
 801750e:	ebba 0b04 	subs.w	fp, sl, r4
 8017512:	d00b      	beq.n	801752c <_vfiprintf_r+0xa4>
 8017514:	465b      	mov	r3, fp
 8017516:	4622      	mov	r2, r4
 8017518:	4629      	mov	r1, r5
 801751a:	4630      	mov	r0, r6
 801751c:	f7ff ffa1 	bl	8017462 <__sfputs_r>
 8017520:	3001      	adds	r0, #1
 8017522:	f000 80a7 	beq.w	8017674 <_vfiprintf_r+0x1ec>
 8017526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017528:	445a      	add	r2, fp
 801752a:	9209      	str	r2, [sp, #36]	@ 0x24
 801752c:	f89a 3000 	ldrb.w	r3, [sl]
 8017530:	2b00      	cmp	r3, #0
 8017532:	f000 809f 	beq.w	8017674 <_vfiprintf_r+0x1ec>
 8017536:	2300      	movs	r3, #0
 8017538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801753c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017540:	f10a 0a01 	add.w	sl, sl, #1
 8017544:	9304      	str	r3, [sp, #16]
 8017546:	9307      	str	r3, [sp, #28]
 8017548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801754c:	931a      	str	r3, [sp, #104]	@ 0x68
 801754e:	4654      	mov	r4, sl
 8017550:	2205      	movs	r2, #5
 8017552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017556:	4853      	ldr	r0, [pc, #332]	@ (80176a4 <_vfiprintf_r+0x21c>)
 8017558:	f7e8 fe5a 	bl	8000210 <memchr>
 801755c:	9a04      	ldr	r2, [sp, #16]
 801755e:	b9d8      	cbnz	r0, 8017598 <_vfiprintf_r+0x110>
 8017560:	06d1      	lsls	r1, r2, #27
 8017562:	bf44      	itt	mi
 8017564:	2320      	movmi	r3, #32
 8017566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801756a:	0713      	lsls	r3, r2, #28
 801756c:	bf44      	itt	mi
 801756e:	232b      	movmi	r3, #43	@ 0x2b
 8017570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017574:	f89a 3000 	ldrb.w	r3, [sl]
 8017578:	2b2a      	cmp	r3, #42	@ 0x2a
 801757a:	d015      	beq.n	80175a8 <_vfiprintf_r+0x120>
 801757c:	9a07      	ldr	r2, [sp, #28]
 801757e:	4654      	mov	r4, sl
 8017580:	2000      	movs	r0, #0
 8017582:	f04f 0c0a 	mov.w	ip, #10
 8017586:	4621      	mov	r1, r4
 8017588:	f811 3b01 	ldrb.w	r3, [r1], #1
 801758c:	3b30      	subs	r3, #48	@ 0x30
 801758e:	2b09      	cmp	r3, #9
 8017590:	d94b      	bls.n	801762a <_vfiprintf_r+0x1a2>
 8017592:	b1b0      	cbz	r0, 80175c2 <_vfiprintf_r+0x13a>
 8017594:	9207      	str	r2, [sp, #28]
 8017596:	e014      	b.n	80175c2 <_vfiprintf_r+0x13a>
 8017598:	eba0 0308 	sub.w	r3, r0, r8
 801759c:	fa09 f303 	lsl.w	r3, r9, r3
 80175a0:	4313      	orrs	r3, r2
 80175a2:	9304      	str	r3, [sp, #16]
 80175a4:	46a2      	mov	sl, r4
 80175a6:	e7d2      	b.n	801754e <_vfiprintf_r+0xc6>
 80175a8:	9b03      	ldr	r3, [sp, #12]
 80175aa:	1d19      	adds	r1, r3, #4
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	9103      	str	r1, [sp, #12]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	bfbb      	ittet	lt
 80175b4:	425b      	neglt	r3, r3
 80175b6:	f042 0202 	orrlt.w	r2, r2, #2
 80175ba:	9307      	strge	r3, [sp, #28]
 80175bc:	9307      	strlt	r3, [sp, #28]
 80175be:	bfb8      	it	lt
 80175c0:	9204      	strlt	r2, [sp, #16]
 80175c2:	7823      	ldrb	r3, [r4, #0]
 80175c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80175c6:	d10a      	bne.n	80175de <_vfiprintf_r+0x156>
 80175c8:	7863      	ldrb	r3, [r4, #1]
 80175ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80175cc:	d132      	bne.n	8017634 <_vfiprintf_r+0x1ac>
 80175ce:	9b03      	ldr	r3, [sp, #12]
 80175d0:	1d1a      	adds	r2, r3, #4
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	9203      	str	r2, [sp, #12]
 80175d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80175da:	3402      	adds	r4, #2
 80175dc:	9305      	str	r3, [sp, #20]
 80175de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80176b4 <_vfiprintf_r+0x22c>
 80175e2:	7821      	ldrb	r1, [r4, #0]
 80175e4:	2203      	movs	r2, #3
 80175e6:	4650      	mov	r0, sl
 80175e8:	f7e8 fe12 	bl	8000210 <memchr>
 80175ec:	b138      	cbz	r0, 80175fe <_vfiprintf_r+0x176>
 80175ee:	9b04      	ldr	r3, [sp, #16]
 80175f0:	eba0 000a 	sub.w	r0, r0, sl
 80175f4:	2240      	movs	r2, #64	@ 0x40
 80175f6:	4082      	lsls	r2, r0
 80175f8:	4313      	orrs	r3, r2
 80175fa:	3401      	adds	r4, #1
 80175fc:	9304      	str	r3, [sp, #16]
 80175fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017602:	4829      	ldr	r0, [pc, #164]	@ (80176a8 <_vfiprintf_r+0x220>)
 8017604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017608:	2206      	movs	r2, #6
 801760a:	f7e8 fe01 	bl	8000210 <memchr>
 801760e:	2800      	cmp	r0, #0
 8017610:	d03f      	beq.n	8017692 <_vfiprintf_r+0x20a>
 8017612:	4b26      	ldr	r3, [pc, #152]	@ (80176ac <_vfiprintf_r+0x224>)
 8017614:	bb1b      	cbnz	r3, 801765e <_vfiprintf_r+0x1d6>
 8017616:	9b03      	ldr	r3, [sp, #12]
 8017618:	3307      	adds	r3, #7
 801761a:	f023 0307 	bic.w	r3, r3, #7
 801761e:	3308      	adds	r3, #8
 8017620:	9303      	str	r3, [sp, #12]
 8017622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017624:	443b      	add	r3, r7
 8017626:	9309      	str	r3, [sp, #36]	@ 0x24
 8017628:	e76a      	b.n	8017500 <_vfiprintf_r+0x78>
 801762a:	fb0c 3202 	mla	r2, ip, r2, r3
 801762e:	460c      	mov	r4, r1
 8017630:	2001      	movs	r0, #1
 8017632:	e7a8      	b.n	8017586 <_vfiprintf_r+0xfe>
 8017634:	2300      	movs	r3, #0
 8017636:	3401      	adds	r4, #1
 8017638:	9305      	str	r3, [sp, #20]
 801763a:	4619      	mov	r1, r3
 801763c:	f04f 0c0a 	mov.w	ip, #10
 8017640:	4620      	mov	r0, r4
 8017642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017646:	3a30      	subs	r2, #48	@ 0x30
 8017648:	2a09      	cmp	r2, #9
 801764a:	d903      	bls.n	8017654 <_vfiprintf_r+0x1cc>
 801764c:	2b00      	cmp	r3, #0
 801764e:	d0c6      	beq.n	80175de <_vfiprintf_r+0x156>
 8017650:	9105      	str	r1, [sp, #20]
 8017652:	e7c4      	b.n	80175de <_vfiprintf_r+0x156>
 8017654:	fb0c 2101 	mla	r1, ip, r1, r2
 8017658:	4604      	mov	r4, r0
 801765a:	2301      	movs	r3, #1
 801765c:	e7f0      	b.n	8017640 <_vfiprintf_r+0x1b8>
 801765e:	ab03      	add	r3, sp, #12
 8017660:	9300      	str	r3, [sp, #0]
 8017662:	462a      	mov	r2, r5
 8017664:	4b12      	ldr	r3, [pc, #72]	@ (80176b0 <_vfiprintf_r+0x228>)
 8017666:	a904      	add	r1, sp, #16
 8017668:	4630      	mov	r0, r6
 801766a:	f3af 8000 	nop.w
 801766e:	4607      	mov	r7, r0
 8017670:	1c78      	adds	r0, r7, #1
 8017672:	d1d6      	bne.n	8017622 <_vfiprintf_r+0x19a>
 8017674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017676:	07d9      	lsls	r1, r3, #31
 8017678:	d405      	bmi.n	8017686 <_vfiprintf_r+0x1fe>
 801767a:	89ab      	ldrh	r3, [r5, #12]
 801767c:	059a      	lsls	r2, r3, #22
 801767e:	d402      	bmi.n	8017686 <_vfiprintf_r+0x1fe>
 8017680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017682:	f7ff fda9 	bl	80171d8 <__retarget_lock_release_recursive>
 8017686:	89ab      	ldrh	r3, [r5, #12]
 8017688:	065b      	lsls	r3, r3, #25
 801768a:	f53f af1f 	bmi.w	80174cc <_vfiprintf_r+0x44>
 801768e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017690:	e71e      	b.n	80174d0 <_vfiprintf_r+0x48>
 8017692:	ab03      	add	r3, sp, #12
 8017694:	9300      	str	r3, [sp, #0]
 8017696:	462a      	mov	r2, r5
 8017698:	4b05      	ldr	r3, [pc, #20]	@ (80176b0 <_vfiprintf_r+0x228>)
 801769a:	a904      	add	r1, sp, #16
 801769c:	4630      	mov	r0, r6
 801769e:	f000 f879 	bl	8017794 <_printf_i>
 80176a2:	e7e4      	b.n	801766e <_vfiprintf_r+0x1e6>
 80176a4:	0801aa05 	.word	0x0801aa05
 80176a8:	0801aa0f 	.word	0x0801aa0f
 80176ac:	00000000 	.word	0x00000000
 80176b0:	08017463 	.word	0x08017463
 80176b4:	0801aa0b 	.word	0x0801aa0b

080176b8 <_printf_common>:
 80176b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176bc:	4616      	mov	r6, r2
 80176be:	4698      	mov	r8, r3
 80176c0:	688a      	ldr	r2, [r1, #8]
 80176c2:	690b      	ldr	r3, [r1, #16]
 80176c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80176c8:	4293      	cmp	r3, r2
 80176ca:	bfb8      	it	lt
 80176cc:	4613      	movlt	r3, r2
 80176ce:	6033      	str	r3, [r6, #0]
 80176d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80176d4:	4607      	mov	r7, r0
 80176d6:	460c      	mov	r4, r1
 80176d8:	b10a      	cbz	r2, 80176de <_printf_common+0x26>
 80176da:	3301      	adds	r3, #1
 80176dc:	6033      	str	r3, [r6, #0]
 80176de:	6823      	ldr	r3, [r4, #0]
 80176e0:	0699      	lsls	r1, r3, #26
 80176e2:	bf42      	ittt	mi
 80176e4:	6833      	ldrmi	r3, [r6, #0]
 80176e6:	3302      	addmi	r3, #2
 80176e8:	6033      	strmi	r3, [r6, #0]
 80176ea:	6825      	ldr	r5, [r4, #0]
 80176ec:	f015 0506 	ands.w	r5, r5, #6
 80176f0:	d106      	bne.n	8017700 <_printf_common+0x48>
 80176f2:	f104 0a19 	add.w	sl, r4, #25
 80176f6:	68e3      	ldr	r3, [r4, #12]
 80176f8:	6832      	ldr	r2, [r6, #0]
 80176fa:	1a9b      	subs	r3, r3, r2
 80176fc:	42ab      	cmp	r3, r5
 80176fe:	dc26      	bgt.n	801774e <_printf_common+0x96>
 8017700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017704:	6822      	ldr	r2, [r4, #0]
 8017706:	3b00      	subs	r3, #0
 8017708:	bf18      	it	ne
 801770a:	2301      	movne	r3, #1
 801770c:	0692      	lsls	r2, r2, #26
 801770e:	d42b      	bmi.n	8017768 <_printf_common+0xb0>
 8017710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017714:	4641      	mov	r1, r8
 8017716:	4638      	mov	r0, r7
 8017718:	47c8      	blx	r9
 801771a:	3001      	adds	r0, #1
 801771c:	d01e      	beq.n	801775c <_printf_common+0xa4>
 801771e:	6823      	ldr	r3, [r4, #0]
 8017720:	6922      	ldr	r2, [r4, #16]
 8017722:	f003 0306 	and.w	r3, r3, #6
 8017726:	2b04      	cmp	r3, #4
 8017728:	bf02      	ittt	eq
 801772a:	68e5      	ldreq	r5, [r4, #12]
 801772c:	6833      	ldreq	r3, [r6, #0]
 801772e:	1aed      	subeq	r5, r5, r3
 8017730:	68a3      	ldr	r3, [r4, #8]
 8017732:	bf0c      	ite	eq
 8017734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017738:	2500      	movne	r5, #0
 801773a:	4293      	cmp	r3, r2
 801773c:	bfc4      	itt	gt
 801773e:	1a9b      	subgt	r3, r3, r2
 8017740:	18ed      	addgt	r5, r5, r3
 8017742:	2600      	movs	r6, #0
 8017744:	341a      	adds	r4, #26
 8017746:	42b5      	cmp	r5, r6
 8017748:	d11a      	bne.n	8017780 <_printf_common+0xc8>
 801774a:	2000      	movs	r0, #0
 801774c:	e008      	b.n	8017760 <_printf_common+0xa8>
 801774e:	2301      	movs	r3, #1
 8017750:	4652      	mov	r2, sl
 8017752:	4641      	mov	r1, r8
 8017754:	4638      	mov	r0, r7
 8017756:	47c8      	blx	r9
 8017758:	3001      	adds	r0, #1
 801775a:	d103      	bne.n	8017764 <_printf_common+0xac>
 801775c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017764:	3501      	adds	r5, #1
 8017766:	e7c6      	b.n	80176f6 <_printf_common+0x3e>
 8017768:	18e1      	adds	r1, r4, r3
 801776a:	1c5a      	adds	r2, r3, #1
 801776c:	2030      	movs	r0, #48	@ 0x30
 801776e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017772:	4422      	add	r2, r4
 8017774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801777c:	3302      	adds	r3, #2
 801777e:	e7c7      	b.n	8017710 <_printf_common+0x58>
 8017780:	2301      	movs	r3, #1
 8017782:	4622      	mov	r2, r4
 8017784:	4641      	mov	r1, r8
 8017786:	4638      	mov	r0, r7
 8017788:	47c8      	blx	r9
 801778a:	3001      	adds	r0, #1
 801778c:	d0e6      	beq.n	801775c <_printf_common+0xa4>
 801778e:	3601      	adds	r6, #1
 8017790:	e7d9      	b.n	8017746 <_printf_common+0x8e>
	...

08017794 <_printf_i>:
 8017794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017798:	7e0f      	ldrb	r7, [r1, #24]
 801779a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801779c:	2f78      	cmp	r7, #120	@ 0x78
 801779e:	4691      	mov	r9, r2
 80177a0:	4680      	mov	r8, r0
 80177a2:	460c      	mov	r4, r1
 80177a4:	469a      	mov	sl, r3
 80177a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80177aa:	d807      	bhi.n	80177bc <_printf_i+0x28>
 80177ac:	2f62      	cmp	r7, #98	@ 0x62
 80177ae:	d80a      	bhi.n	80177c6 <_printf_i+0x32>
 80177b0:	2f00      	cmp	r7, #0
 80177b2:	f000 80d1 	beq.w	8017958 <_printf_i+0x1c4>
 80177b6:	2f58      	cmp	r7, #88	@ 0x58
 80177b8:	f000 80b8 	beq.w	801792c <_printf_i+0x198>
 80177bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80177c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80177c4:	e03a      	b.n	801783c <_printf_i+0xa8>
 80177c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80177ca:	2b15      	cmp	r3, #21
 80177cc:	d8f6      	bhi.n	80177bc <_printf_i+0x28>
 80177ce:	a101      	add	r1, pc, #4	@ (adr r1, 80177d4 <_printf_i+0x40>)
 80177d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80177d4:	0801782d 	.word	0x0801782d
 80177d8:	08017841 	.word	0x08017841
 80177dc:	080177bd 	.word	0x080177bd
 80177e0:	080177bd 	.word	0x080177bd
 80177e4:	080177bd 	.word	0x080177bd
 80177e8:	080177bd 	.word	0x080177bd
 80177ec:	08017841 	.word	0x08017841
 80177f0:	080177bd 	.word	0x080177bd
 80177f4:	080177bd 	.word	0x080177bd
 80177f8:	080177bd 	.word	0x080177bd
 80177fc:	080177bd 	.word	0x080177bd
 8017800:	0801793f 	.word	0x0801793f
 8017804:	0801786b 	.word	0x0801786b
 8017808:	080178f9 	.word	0x080178f9
 801780c:	080177bd 	.word	0x080177bd
 8017810:	080177bd 	.word	0x080177bd
 8017814:	08017961 	.word	0x08017961
 8017818:	080177bd 	.word	0x080177bd
 801781c:	0801786b 	.word	0x0801786b
 8017820:	080177bd 	.word	0x080177bd
 8017824:	080177bd 	.word	0x080177bd
 8017828:	08017901 	.word	0x08017901
 801782c:	6833      	ldr	r3, [r6, #0]
 801782e:	1d1a      	adds	r2, r3, #4
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	6032      	str	r2, [r6, #0]
 8017834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801783c:	2301      	movs	r3, #1
 801783e:	e09c      	b.n	801797a <_printf_i+0x1e6>
 8017840:	6833      	ldr	r3, [r6, #0]
 8017842:	6820      	ldr	r0, [r4, #0]
 8017844:	1d19      	adds	r1, r3, #4
 8017846:	6031      	str	r1, [r6, #0]
 8017848:	0606      	lsls	r6, r0, #24
 801784a:	d501      	bpl.n	8017850 <_printf_i+0xbc>
 801784c:	681d      	ldr	r5, [r3, #0]
 801784e:	e003      	b.n	8017858 <_printf_i+0xc4>
 8017850:	0645      	lsls	r5, r0, #25
 8017852:	d5fb      	bpl.n	801784c <_printf_i+0xb8>
 8017854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017858:	2d00      	cmp	r5, #0
 801785a:	da03      	bge.n	8017864 <_printf_i+0xd0>
 801785c:	232d      	movs	r3, #45	@ 0x2d
 801785e:	426d      	negs	r5, r5
 8017860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017864:	4858      	ldr	r0, [pc, #352]	@ (80179c8 <_printf_i+0x234>)
 8017866:	230a      	movs	r3, #10
 8017868:	e011      	b.n	801788e <_printf_i+0xfa>
 801786a:	6821      	ldr	r1, [r4, #0]
 801786c:	6833      	ldr	r3, [r6, #0]
 801786e:	0608      	lsls	r0, r1, #24
 8017870:	f853 5b04 	ldr.w	r5, [r3], #4
 8017874:	d402      	bmi.n	801787c <_printf_i+0xe8>
 8017876:	0649      	lsls	r1, r1, #25
 8017878:	bf48      	it	mi
 801787a:	b2ad      	uxthmi	r5, r5
 801787c:	2f6f      	cmp	r7, #111	@ 0x6f
 801787e:	4852      	ldr	r0, [pc, #328]	@ (80179c8 <_printf_i+0x234>)
 8017880:	6033      	str	r3, [r6, #0]
 8017882:	bf14      	ite	ne
 8017884:	230a      	movne	r3, #10
 8017886:	2308      	moveq	r3, #8
 8017888:	2100      	movs	r1, #0
 801788a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801788e:	6866      	ldr	r6, [r4, #4]
 8017890:	60a6      	str	r6, [r4, #8]
 8017892:	2e00      	cmp	r6, #0
 8017894:	db05      	blt.n	80178a2 <_printf_i+0x10e>
 8017896:	6821      	ldr	r1, [r4, #0]
 8017898:	432e      	orrs	r6, r5
 801789a:	f021 0104 	bic.w	r1, r1, #4
 801789e:	6021      	str	r1, [r4, #0]
 80178a0:	d04b      	beq.n	801793a <_printf_i+0x1a6>
 80178a2:	4616      	mov	r6, r2
 80178a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80178a8:	fb03 5711 	mls	r7, r3, r1, r5
 80178ac:	5dc7      	ldrb	r7, [r0, r7]
 80178ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80178b2:	462f      	mov	r7, r5
 80178b4:	42bb      	cmp	r3, r7
 80178b6:	460d      	mov	r5, r1
 80178b8:	d9f4      	bls.n	80178a4 <_printf_i+0x110>
 80178ba:	2b08      	cmp	r3, #8
 80178bc:	d10b      	bne.n	80178d6 <_printf_i+0x142>
 80178be:	6823      	ldr	r3, [r4, #0]
 80178c0:	07df      	lsls	r7, r3, #31
 80178c2:	d508      	bpl.n	80178d6 <_printf_i+0x142>
 80178c4:	6923      	ldr	r3, [r4, #16]
 80178c6:	6861      	ldr	r1, [r4, #4]
 80178c8:	4299      	cmp	r1, r3
 80178ca:	bfde      	ittt	le
 80178cc:	2330      	movle	r3, #48	@ 0x30
 80178ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80178d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80178d6:	1b92      	subs	r2, r2, r6
 80178d8:	6122      	str	r2, [r4, #16]
 80178da:	f8cd a000 	str.w	sl, [sp]
 80178de:	464b      	mov	r3, r9
 80178e0:	aa03      	add	r2, sp, #12
 80178e2:	4621      	mov	r1, r4
 80178e4:	4640      	mov	r0, r8
 80178e6:	f7ff fee7 	bl	80176b8 <_printf_common>
 80178ea:	3001      	adds	r0, #1
 80178ec:	d14a      	bne.n	8017984 <_printf_i+0x1f0>
 80178ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178f2:	b004      	add	sp, #16
 80178f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178f8:	6823      	ldr	r3, [r4, #0]
 80178fa:	f043 0320 	orr.w	r3, r3, #32
 80178fe:	6023      	str	r3, [r4, #0]
 8017900:	4832      	ldr	r0, [pc, #200]	@ (80179cc <_printf_i+0x238>)
 8017902:	2778      	movs	r7, #120	@ 0x78
 8017904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017908:	6823      	ldr	r3, [r4, #0]
 801790a:	6831      	ldr	r1, [r6, #0]
 801790c:	061f      	lsls	r7, r3, #24
 801790e:	f851 5b04 	ldr.w	r5, [r1], #4
 8017912:	d402      	bmi.n	801791a <_printf_i+0x186>
 8017914:	065f      	lsls	r7, r3, #25
 8017916:	bf48      	it	mi
 8017918:	b2ad      	uxthmi	r5, r5
 801791a:	6031      	str	r1, [r6, #0]
 801791c:	07d9      	lsls	r1, r3, #31
 801791e:	bf44      	itt	mi
 8017920:	f043 0320 	orrmi.w	r3, r3, #32
 8017924:	6023      	strmi	r3, [r4, #0]
 8017926:	b11d      	cbz	r5, 8017930 <_printf_i+0x19c>
 8017928:	2310      	movs	r3, #16
 801792a:	e7ad      	b.n	8017888 <_printf_i+0xf4>
 801792c:	4826      	ldr	r0, [pc, #152]	@ (80179c8 <_printf_i+0x234>)
 801792e:	e7e9      	b.n	8017904 <_printf_i+0x170>
 8017930:	6823      	ldr	r3, [r4, #0]
 8017932:	f023 0320 	bic.w	r3, r3, #32
 8017936:	6023      	str	r3, [r4, #0]
 8017938:	e7f6      	b.n	8017928 <_printf_i+0x194>
 801793a:	4616      	mov	r6, r2
 801793c:	e7bd      	b.n	80178ba <_printf_i+0x126>
 801793e:	6833      	ldr	r3, [r6, #0]
 8017940:	6825      	ldr	r5, [r4, #0]
 8017942:	6961      	ldr	r1, [r4, #20]
 8017944:	1d18      	adds	r0, r3, #4
 8017946:	6030      	str	r0, [r6, #0]
 8017948:	062e      	lsls	r6, r5, #24
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	d501      	bpl.n	8017952 <_printf_i+0x1be>
 801794e:	6019      	str	r1, [r3, #0]
 8017950:	e002      	b.n	8017958 <_printf_i+0x1c4>
 8017952:	0668      	lsls	r0, r5, #25
 8017954:	d5fb      	bpl.n	801794e <_printf_i+0x1ba>
 8017956:	8019      	strh	r1, [r3, #0]
 8017958:	2300      	movs	r3, #0
 801795a:	6123      	str	r3, [r4, #16]
 801795c:	4616      	mov	r6, r2
 801795e:	e7bc      	b.n	80178da <_printf_i+0x146>
 8017960:	6833      	ldr	r3, [r6, #0]
 8017962:	1d1a      	adds	r2, r3, #4
 8017964:	6032      	str	r2, [r6, #0]
 8017966:	681e      	ldr	r6, [r3, #0]
 8017968:	6862      	ldr	r2, [r4, #4]
 801796a:	2100      	movs	r1, #0
 801796c:	4630      	mov	r0, r6
 801796e:	f7e8 fc4f 	bl	8000210 <memchr>
 8017972:	b108      	cbz	r0, 8017978 <_printf_i+0x1e4>
 8017974:	1b80      	subs	r0, r0, r6
 8017976:	6060      	str	r0, [r4, #4]
 8017978:	6863      	ldr	r3, [r4, #4]
 801797a:	6123      	str	r3, [r4, #16]
 801797c:	2300      	movs	r3, #0
 801797e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017982:	e7aa      	b.n	80178da <_printf_i+0x146>
 8017984:	6923      	ldr	r3, [r4, #16]
 8017986:	4632      	mov	r2, r6
 8017988:	4649      	mov	r1, r9
 801798a:	4640      	mov	r0, r8
 801798c:	47d0      	blx	sl
 801798e:	3001      	adds	r0, #1
 8017990:	d0ad      	beq.n	80178ee <_printf_i+0x15a>
 8017992:	6823      	ldr	r3, [r4, #0]
 8017994:	079b      	lsls	r3, r3, #30
 8017996:	d413      	bmi.n	80179c0 <_printf_i+0x22c>
 8017998:	68e0      	ldr	r0, [r4, #12]
 801799a:	9b03      	ldr	r3, [sp, #12]
 801799c:	4298      	cmp	r0, r3
 801799e:	bfb8      	it	lt
 80179a0:	4618      	movlt	r0, r3
 80179a2:	e7a6      	b.n	80178f2 <_printf_i+0x15e>
 80179a4:	2301      	movs	r3, #1
 80179a6:	4632      	mov	r2, r6
 80179a8:	4649      	mov	r1, r9
 80179aa:	4640      	mov	r0, r8
 80179ac:	47d0      	blx	sl
 80179ae:	3001      	adds	r0, #1
 80179b0:	d09d      	beq.n	80178ee <_printf_i+0x15a>
 80179b2:	3501      	adds	r5, #1
 80179b4:	68e3      	ldr	r3, [r4, #12]
 80179b6:	9903      	ldr	r1, [sp, #12]
 80179b8:	1a5b      	subs	r3, r3, r1
 80179ba:	42ab      	cmp	r3, r5
 80179bc:	dcf2      	bgt.n	80179a4 <_printf_i+0x210>
 80179be:	e7eb      	b.n	8017998 <_printf_i+0x204>
 80179c0:	2500      	movs	r5, #0
 80179c2:	f104 0619 	add.w	r6, r4, #25
 80179c6:	e7f5      	b.n	80179b4 <_printf_i+0x220>
 80179c8:	0801aa16 	.word	0x0801aa16
 80179cc:	0801aa27 	.word	0x0801aa27

080179d0 <__sflush_r>:
 80179d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80179d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179d8:	0716      	lsls	r6, r2, #28
 80179da:	4605      	mov	r5, r0
 80179dc:	460c      	mov	r4, r1
 80179de:	d454      	bmi.n	8017a8a <__sflush_r+0xba>
 80179e0:	684b      	ldr	r3, [r1, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	dc02      	bgt.n	80179ec <__sflush_r+0x1c>
 80179e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	dd48      	ble.n	8017a7e <__sflush_r+0xae>
 80179ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179ee:	2e00      	cmp	r6, #0
 80179f0:	d045      	beq.n	8017a7e <__sflush_r+0xae>
 80179f2:	2300      	movs	r3, #0
 80179f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179f8:	682f      	ldr	r7, [r5, #0]
 80179fa:	6a21      	ldr	r1, [r4, #32]
 80179fc:	602b      	str	r3, [r5, #0]
 80179fe:	d030      	beq.n	8017a62 <__sflush_r+0x92>
 8017a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017a02:	89a3      	ldrh	r3, [r4, #12]
 8017a04:	0759      	lsls	r1, r3, #29
 8017a06:	d505      	bpl.n	8017a14 <__sflush_r+0x44>
 8017a08:	6863      	ldr	r3, [r4, #4]
 8017a0a:	1ad2      	subs	r2, r2, r3
 8017a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017a0e:	b10b      	cbz	r3, 8017a14 <__sflush_r+0x44>
 8017a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017a12:	1ad2      	subs	r2, r2, r3
 8017a14:	2300      	movs	r3, #0
 8017a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a18:	6a21      	ldr	r1, [r4, #32]
 8017a1a:	4628      	mov	r0, r5
 8017a1c:	47b0      	blx	r6
 8017a1e:	1c43      	adds	r3, r0, #1
 8017a20:	89a3      	ldrh	r3, [r4, #12]
 8017a22:	d106      	bne.n	8017a32 <__sflush_r+0x62>
 8017a24:	6829      	ldr	r1, [r5, #0]
 8017a26:	291d      	cmp	r1, #29
 8017a28:	d82b      	bhi.n	8017a82 <__sflush_r+0xb2>
 8017a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8017ad4 <__sflush_r+0x104>)
 8017a2c:	40ca      	lsrs	r2, r1
 8017a2e:	07d6      	lsls	r6, r2, #31
 8017a30:	d527      	bpl.n	8017a82 <__sflush_r+0xb2>
 8017a32:	2200      	movs	r2, #0
 8017a34:	6062      	str	r2, [r4, #4]
 8017a36:	04d9      	lsls	r1, r3, #19
 8017a38:	6922      	ldr	r2, [r4, #16]
 8017a3a:	6022      	str	r2, [r4, #0]
 8017a3c:	d504      	bpl.n	8017a48 <__sflush_r+0x78>
 8017a3e:	1c42      	adds	r2, r0, #1
 8017a40:	d101      	bne.n	8017a46 <__sflush_r+0x76>
 8017a42:	682b      	ldr	r3, [r5, #0]
 8017a44:	b903      	cbnz	r3, 8017a48 <__sflush_r+0x78>
 8017a46:	6560      	str	r0, [r4, #84]	@ 0x54
 8017a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a4a:	602f      	str	r7, [r5, #0]
 8017a4c:	b1b9      	cbz	r1, 8017a7e <__sflush_r+0xae>
 8017a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a52:	4299      	cmp	r1, r3
 8017a54:	d002      	beq.n	8017a5c <__sflush_r+0x8c>
 8017a56:	4628      	mov	r0, r5
 8017a58:	f7ff fbec 	bl	8017234 <_free_r>
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a60:	e00d      	b.n	8017a7e <__sflush_r+0xae>
 8017a62:	2301      	movs	r3, #1
 8017a64:	4628      	mov	r0, r5
 8017a66:	47b0      	blx	r6
 8017a68:	4602      	mov	r2, r0
 8017a6a:	1c50      	adds	r0, r2, #1
 8017a6c:	d1c9      	bne.n	8017a02 <__sflush_r+0x32>
 8017a6e:	682b      	ldr	r3, [r5, #0]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d0c6      	beq.n	8017a02 <__sflush_r+0x32>
 8017a74:	2b1d      	cmp	r3, #29
 8017a76:	d001      	beq.n	8017a7c <__sflush_r+0xac>
 8017a78:	2b16      	cmp	r3, #22
 8017a7a:	d11e      	bne.n	8017aba <__sflush_r+0xea>
 8017a7c:	602f      	str	r7, [r5, #0]
 8017a7e:	2000      	movs	r0, #0
 8017a80:	e022      	b.n	8017ac8 <__sflush_r+0xf8>
 8017a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a86:	b21b      	sxth	r3, r3
 8017a88:	e01b      	b.n	8017ac2 <__sflush_r+0xf2>
 8017a8a:	690f      	ldr	r7, [r1, #16]
 8017a8c:	2f00      	cmp	r7, #0
 8017a8e:	d0f6      	beq.n	8017a7e <__sflush_r+0xae>
 8017a90:	0793      	lsls	r3, r2, #30
 8017a92:	680e      	ldr	r6, [r1, #0]
 8017a94:	bf08      	it	eq
 8017a96:	694b      	ldreq	r3, [r1, #20]
 8017a98:	600f      	str	r7, [r1, #0]
 8017a9a:	bf18      	it	ne
 8017a9c:	2300      	movne	r3, #0
 8017a9e:	eba6 0807 	sub.w	r8, r6, r7
 8017aa2:	608b      	str	r3, [r1, #8]
 8017aa4:	f1b8 0f00 	cmp.w	r8, #0
 8017aa8:	dde9      	ble.n	8017a7e <__sflush_r+0xae>
 8017aaa:	6a21      	ldr	r1, [r4, #32]
 8017aac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017aae:	4643      	mov	r3, r8
 8017ab0:	463a      	mov	r2, r7
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	47b0      	blx	r6
 8017ab6:	2800      	cmp	r0, #0
 8017ab8:	dc08      	bgt.n	8017acc <__sflush_r+0xfc>
 8017aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ac2:	81a3      	strh	r3, [r4, #12]
 8017ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017acc:	4407      	add	r7, r0
 8017ace:	eba8 0800 	sub.w	r8, r8, r0
 8017ad2:	e7e7      	b.n	8017aa4 <__sflush_r+0xd4>
 8017ad4:	20400001 	.word	0x20400001

08017ad8 <_fflush_r>:
 8017ad8:	b538      	push	{r3, r4, r5, lr}
 8017ada:	690b      	ldr	r3, [r1, #16]
 8017adc:	4605      	mov	r5, r0
 8017ade:	460c      	mov	r4, r1
 8017ae0:	b913      	cbnz	r3, 8017ae8 <_fflush_r+0x10>
 8017ae2:	2500      	movs	r5, #0
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	bd38      	pop	{r3, r4, r5, pc}
 8017ae8:	b118      	cbz	r0, 8017af2 <_fflush_r+0x1a>
 8017aea:	6a03      	ldr	r3, [r0, #32]
 8017aec:	b90b      	cbnz	r3, 8017af2 <_fflush_r+0x1a>
 8017aee:	f7ff fa63 	bl	8016fb8 <__sinit>
 8017af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d0f3      	beq.n	8017ae2 <_fflush_r+0xa>
 8017afa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017afc:	07d0      	lsls	r0, r2, #31
 8017afe:	d404      	bmi.n	8017b0a <_fflush_r+0x32>
 8017b00:	0599      	lsls	r1, r3, #22
 8017b02:	d402      	bmi.n	8017b0a <_fflush_r+0x32>
 8017b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b06:	f7ff fb66 	bl	80171d6 <__retarget_lock_acquire_recursive>
 8017b0a:	4628      	mov	r0, r5
 8017b0c:	4621      	mov	r1, r4
 8017b0e:	f7ff ff5f 	bl	80179d0 <__sflush_r>
 8017b12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017b14:	07da      	lsls	r2, r3, #31
 8017b16:	4605      	mov	r5, r0
 8017b18:	d4e4      	bmi.n	8017ae4 <_fflush_r+0xc>
 8017b1a:	89a3      	ldrh	r3, [r4, #12]
 8017b1c:	059b      	lsls	r3, r3, #22
 8017b1e:	d4e1      	bmi.n	8017ae4 <_fflush_r+0xc>
 8017b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b22:	f7ff fb59 	bl	80171d8 <__retarget_lock_release_recursive>
 8017b26:	e7dd      	b.n	8017ae4 <_fflush_r+0xc>

08017b28 <fiprintf>:
 8017b28:	b40e      	push	{r1, r2, r3}
 8017b2a:	b503      	push	{r0, r1, lr}
 8017b2c:	4601      	mov	r1, r0
 8017b2e:	ab03      	add	r3, sp, #12
 8017b30:	4805      	ldr	r0, [pc, #20]	@ (8017b48 <fiprintf+0x20>)
 8017b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b36:	6800      	ldr	r0, [r0, #0]
 8017b38:	9301      	str	r3, [sp, #4]
 8017b3a:	f7ff fca5 	bl	8017488 <_vfiprintf_r>
 8017b3e:	b002      	add	sp, #8
 8017b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b44:	b003      	add	sp, #12
 8017b46:	4770      	bx	lr
 8017b48:	20000038 	.word	0x20000038

08017b4c <__swbuf_r>:
 8017b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b4e:	460e      	mov	r6, r1
 8017b50:	4614      	mov	r4, r2
 8017b52:	4605      	mov	r5, r0
 8017b54:	b118      	cbz	r0, 8017b5e <__swbuf_r+0x12>
 8017b56:	6a03      	ldr	r3, [r0, #32]
 8017b58:	b90b      	cbnz	r3, 8017b5e <__swbuf_r+0x12>
 8017b5a:	f7ff fa2d 	bl	8016fb8 <__sinit>
 8017b5e:	69a3      	ldr	r3, [r4, #24]
 8017b60:	60a3      	str	r3, [r4, #8]
 8017b62:	89a3      	ldrh	r3, [r4, #12]
 8017b64:	071a      	lsls	r2, r3, #28
 8017b66:	d501      	bpl.n	8017b6c <__swbuf_r+0x20>
 8017b68:	6923      	ldr	r3, [r4, #16]
 8017b6a:	b943      	cbnz	r3, 8017b7e <__swbuf_r+0x32>
 8017b6c:	4621      	mov	r1, r4
 8017b6e:	4628      	mov	r0, r5
 8017b70:	f000 f82a 	bl	8017bc8 <__swsetup_r>
 8017b74:	b118      	cbz	r0, 8017b7e <__swbuf_r+0x32>
 8017b76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017b7a:	4638      	mov	r0, r7
 8017b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b7e:	6823      	ldr	r3, [r4, #0]
 8017b80:	6922      	ldr	r2, [r4, #16]
 8017b82:	1a98      	subs	r0, r3, r2
 8017b84:	6963      	ldr	r3, [r4, #20]
 8017b86:	b2f6      	uxtb	r6, r6
 8017b88:	4283      	cmp	r3, r0
 8017b8a:	4637      	mov	r7, r6
 8017b8c:	dc05      	bgt.n	8017b9a <__swbuf_r+0x4e>
 8017b8e:	4621      	mov	r1, r4
 8017b90:	4628      	mov	r0, r5
 8017b92:	f7ff ffa1 	bl	8017ad8 <_fflush_r>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	d1ed      	bne.n	8017b76 <__swbuf_r+0x2a>
 8017b9a:	68a3      	ldr	r3, [r4, #8]
 8017b9c:	3b01      	subs	r3, #1
 8017b9e:	60a3      	str	r3, [r4, #8]
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	1c5a      	adds	r2, r3, #1
 8017ba4:	6022      	str	r2, [r4, #0]
 8017ba6:	701e      	strb	r6, [r3, #0]
 8017ba8:	6962      	ldr	r2, [r4, #20]
 8017baa:	1c43      	adds	r3, r0, #1
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d004      	beq.n	8017bba <__swbuf_r+0x6e>
 8017bb0:	89a3      	ldrh	r3, [r4, #12]
 8017bb2:	07db      	lsls	r3, r3, #31
 8017bb4:	d5e1      	bpl.n	8017b7a <__swbuf_r+0x2e>
 8017bb6:	2e0a      	cmp	r6, #10
 8017bb8:	d1df      	bne.n	8017b7a <__swbuf_r+0x2e>
 8017bba:	4621      	mov	r1, r4
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	f7ff ff8b 	bl	8017ad8 <_fflush_r>
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	d0d9      	beq.n	8017b7a <__swbuf_r+0x2e>
 8017bc6:	e7d6      	b.n	8017b76 <__swbuf_r+0x2a>

08017bc8 <__swsetup_r>:
 8017bc8:	b538      	push	{r3, r4, r5, lr}
 8017bca:	4b29      	ldr	r3, [pc, #164]	@ (8017c70 <__swsetup_r+0xa8>)
 8017bcc:	4605      	mov	r5, r0
 8017bce:	6818      	ldr	r0, [r3, #0]
 8017bd0:	460c      	mov	r4, r1
 8017bd2:	b118      	cbz	r0, 8017bdc <__swsetup_r+0x14>
 8017bd4:	6a03      	ldr	r3, [r0, #32]
 8017bd6:	b90b      	cbnz	r3, 8017bdc <__swsetup_r+0x14>
 8017bd8:	f7ff f9ee 	bl	8016fb8 <__sinit>
 8017bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017be0:	0719      	lsls	r1, r3, #28
 8017be2:	d422      	bmi.n	8017c2a <__swsetup_r+0x62>
 8017be4:	06da      	lsls	r2, r3, #27
 8017be6:	d407      	bmi.n	8017bf8 <__swsetup_r+0x30>
 8017be8:	2209      	movs	r2, #9
 8017bea:	602a      	str	r2, [r5, #0]
 8017bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bf0:	81a3      	strh	r3, [r4, #12]
 8017bf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017bf6:	e033      	b.n	8017c60 <__swsetup_r+0x98>
 8017bf8:	0758      	lsls	r0, r3, #29
 8017bfa:	d512      	bpl.n	8017c22 <__swsetup_r+0x5a>
 8017bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bfe:	b141      	cbz	r1, 8017c12 <__swsetup_r+0x4a>
 8017c00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c04:	4299      	cmp	r1, r3
 8017c06:	d002      	beq.n	8017c0e <__swsetup_r+0x46>
 8017c08:	4628      	mov	r0, r5
 8017c0a:	f7ff fb13 	bl	8017234 <_free_r>
 8017c0e:	2300      	movs	r3, #0
 8017c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c12:	89a3      	ldrh	r3, [r4, #12]
 8017c14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017c18:	81a3      	strh	r3, [r4, #12]
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	6063      	str	r3, [r4, #4]
 8017c1e:	6923      	ldr	r3, [r4, #16]
 8017c20:	6023      	str	r3, [r4, #0]
 8017c22:	89a3      	ldrh	r3, [r4, #12]
 8017c24:	f043 0308 	orr.w	r3, r3, #8
 8017c28:	81a3      	strh	r3, [r4, #12]
 8017c2a:	6923      	ldr	r3, [r4, #16]
 8017c2c:	b94b      	cbnz	r3, 8017c42 <__swsetup_r+0x7a>
 8017c2e:	89a3      	ldrh	r3, [r4, #12]
 8017c30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c38:	d003      	beq.n	8017c42 <__swsetup_r+0x7a>
 8017c3a:	4621      	mov	r1, r4
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	f000 f856 	bl	8017cee <__smakebuf_r>
 8017c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c46:	f013 0201 	ands.w	r2, r3, #1
 8017c4a:	d00a      	beq.n	8017c62 <__swsetup_r+0x9a>
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	60a2      	str	r2, [r4, #8]
 8017c50:	6962      	ldr	r2, [r4, #20]
 8017c52:	4252      	negs	r2, r2
 8017c54:	61a2      	str	r2, [r4, #24]
 8017c56:	6922      	ldr	r2, [r4, #16]
 8017c58:	b942      	cbnz	r2, 8017c6c <__swsetup_r+0xa4>
 8017c5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017c5e:	d1c5      	bne.n	8017bec <__swsetup_r+0x24>
 8017c60:	bd38      	pop	{r3, r4, r5, pc}
 8017c62:	0799      	lsls	r1, r3, #30
 8017c64:	bf58      	it	pl
 8017c66:	6962      	ldrpl	r2, [r4, #20]
 8017c68:	60a2      	str	r2, [r4, #8]
 8017c6a:	e7f4      	b.n	8017c56 <__swsetup_r+0x8e>
 8017c6c:	2000      	movs	r0, #0
 8017c6e:	e7f7      	b.n	8017c60 <__swsetup_r+0x98>
 8017c70:	20000038 	.word	0x20000038

08017c74 <_sbrk_r>:
 8017c74:	b538      	push	{r3, r4, r5, lr}
 8017c76:	4d06      	ldr	r5, [pc, #24]	@ (8017c90 <_sbrk_r+0x1c>)
 8017c78:	2300      	movs	r3, #0
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	4608      	mov	r0, r1
 8017c7e:	602b      	str	r3, [r5, #0]
 8017c80:	f7e9 fcf4 	bl	800166c <_sbrk>
 8017c84:	1c43      	adds	r3, r0, #1
 8017c86:	d102      	bne.n	8017c8e <_sbrk_r+0x1a>
 8017c88:	682b      	ldr	r3, [r5, #0]
 8017c8a:	b103      	cbz	r3, 8017c8e <_sbrk_r+0x1a>
 8017c8c:	6023      	str	r3, [r4, #0]
 8017c8e:	bd38      	pop	{r3, r4, r5, pc}
 8017c90:	20008a64 	.word	0x20008a64

08017c94 <abort>:
 8017c94:	b508      	push	{r3, lr}
 8017c96:	2006      	movs	r0, #6
 8017c98:	f000 f88e 	bl	8017db8 <raise>
 8017c9c:	2001      	movs	r0, #1
 8017c9e:	f7e9 fc89 	bl	80015b4 <_exit>

08017ca2 <__swhatbuf_r>:
 8017ca2:	b570      	push	{r4, r5, r6, lr}
 8017ca4:	460c      	mov	r4, r1
 8017ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017caa:	2900      	cmp	r1, #0
 8017cac:	b096      	sub	sp, #88	@ 0x58
 8017cae:	4615      	mov	r5, r2
 8017cb0:	461e      	mov	r6, r3
 8017cb2:	da0d      	bge.n	8017cd0 <__swhatbuf_r+0x2e>
 8017cb4:	89a3      	ldrh	r3, [r4, #12]
 8017cb6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017cba:	f04f 0100 	mov.w	r1, #0
 8017cbe:	bf14      	ite	ne
 8017cc0:	2340      	movne	r3, #64	@ 0x40
 8017cc2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017cc6:	2000      	movs	r0, #0
 8017cc8:	6031      	str	r1, [r6, #0]
 8017cca:	602b      	str	r3, [r5, #0]
 8017ccc:	b016      	add	sp, #88	@ 0x58
 8017cce:	bd70      	pop	{r4, r5, r6, pc}
 8017cd0:	466a      	mov	r2, sp
 8017cd2:	f000 f879 	bl	8017dc8 <_fstat_r>
 8017cd6:	2800      	cmp	r0, #0
 8017cd8:	dbec      	blt.n	8017cb4 <__swhatbuf_r+0x12>
 8017cda:	9901      	ldr	r1, [sp, #4]
 8017cdc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017ce0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017ce4:	4259      	negs	r1, r3
 8017ce6:	4159      	adcs	r1, r3
 8017ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017cec:	e7eb      	b.n	8017cc6 <__swhatbuf_r+0x24>

08017cee <__smakebuf_r>:
 8017cee:	898b      	ldrh	r3, [r1, #12]
 8017cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017cf2:	079d      	lsls	r5, r3, #30
 8017cf4:	4606      	mov	r6, r0
 8017cf6:	460c      	mov	r4, r1
 8017cf8:	d507      	bpl.n	8017d0a <__smakebuf_r+0x1c>
 8017cfa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017cfe:	6023      	str	r3, [r4, #0]
 8017d00:	6123      	str	r3, [r4, #16]
 8017d02:	2301      	movs	r3, #1
 8017d04:	6163      	str	r3, [r4, #20]
 8017d06:	b003      	add	sp, #12
 8017d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d0a:	ab01      	add	r3, sp, #4
 8017d0c:	466a      	mov	r2, sp
 8017d0e:	f7ff ffc8 	bl	8017ca2 <__swhatbuf_r>
 8017d12:	9f00      	ldr	r7, [sp, #0]
 8017d14:	4605      	mov	r5, r0
 8017d16:	4639      	mov	r1, r7
 8017d18:	4630      	mov	r0, r6
 8017d1a:	f7ff faff 	bl	801731c <_malloc_r>
 8017d1e:	b948      	cbnz	r0, 8017d34 <__smakebuf_r+0x46>
 8017d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d24:	059a      	lsls	r2, r3, #22
 8017d26:	d4ee      	bmi.n	8017d06 <__smakebuf_r+0x18>
 8017d28:	f023 0303 	bic.w	r3, r3, #3
 8017d2c:	f043 0302 	orr.w	r3, r3, #2
 8017d30:	81a3      	strh	r3, [r4, #12]
 8017d32:	e7e2      	b.n	8017cfa <__smakebuf_r+0xc>
 8017d34:	89a3      	ldrh	r3, [r4, #12]
 8017d36:	6020      	str	r0, [r4, #0]
 8017d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d3c:	81a3      	strh	r3, [r4, #12]
 8017d3e:	9b01      	ldr	r3, [sp, #4]
 8017d40:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017d44:	b15b      	cbz	r3, 8017d5e <__smakebuf_r+0x70>
 8017d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d4a:	4630      	mov	r0, r6
 8017d4c:	f000 f84e 	bl	8017dec <_isatty_r>
 8017d50:	b128      	cbz	r0, 8017d5e <__smakebuf_r+0x70>
 8017d52:	89a3      	ldrh	r3, [r4, #12]
 8017d54:	f023 0303 	bic.w	r3, r3, #3
 8017d58:	f043 0301 	orr.w	r3, r3, #1
 8017d5c:	81a3      	strh	r3, [r4, #12]
 8017d5e:	89a3      	ldrh	r3, [r4, #12]
 8017d60:	431d      	orrs	r5, r3
 8017d62:	81a5      	strh	r5, [r4, #12]
 8017d64:	e7cf      	b.n	8017d06 <__smakebuf_r+0x18>

08017d66 <_raise_r>:
 8017d66:	291f      	cmp	r1, #31
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4605      	mov	r5, r0
 8017d6c:	460c      	mov	r4, r1
 8017d6e:	d904      	bls.n	8017d7a <_raise_r+0x14>
 8017d70:	2316      	movs	r3, #22
 8017d72:	6003      	str	r3, [r0, #0]
 8017d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d78:	bd38      	pop	{r3, r4, r5, pc}
 8017d7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017d7c:	b112      	cbz	r2, 8017d84 <_raise_r+0x1e>
 8017d7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d82:	b94b      	cbnz	r3, 8017d98 <_raise_r+0x32>
 8017d84:	4628      	mov	r0, r5
 8017d86:	f000 f853 	bl	8017e30 <_getpid_r>
 8017d8a:	4622      	mov	r2, r4
 8017d8c:	4601      	mov	r1, r0
 8017d8e:	4628      	mov	r0, r5
 8017d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d94:	f000 b83a 	b.w	8017e0c <_kill_r>
 8017d98:	2b01      	cmp	r3, #1
 8017d9a:	d00a      	beq.n	8017db2 <_raise_r+0x4c>
 8017d9c:	1c59      	adds	r1, r3, #1
 8017d9e:	d103      	bne.n	8017da8 <_raise_r+0x42>
 8017da0:	2316      	movs	r3, #22
 8017da2:	6003      	str	r3, [r0, #0]
 8017da4:	2001      	movs	r0, #1
 8017da6:	e7e7      	b.n	8017d78 <_raise_r+0x12>
 8017da8:	2100      	movs	r1, #0
 8017daa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017dae:	4620      	mov	r0, r4
 8017db0:	4798      	blx	r3
 8017db2:	2000      	movs	r0, #0
 8017db4:	e7e0      	b.n	8017d78 <_raise_r+0x12>
	...

08017db8 <raise>:
 8017db8:	4b02      	ldr	r3, [pc, #8]	@ (8017dc4 <raise+0xc>)
 8017dba:	4601      	mov	r1, r0
 8017dbc:	6818      	ldr	r0, [r3, #0]
 8017dbe:	f7ff bfd2 	b.w	8017d66 <_raise_r>
 8017dc2:	bf00      	nop
 8017dc4:	20000038 	.word	0x20000038

08017dc8 <_fstat_r>:
 8017dc8:	b538      	push	{r3, r4, r5, lr}
 8017dca:	4d07      	ldr	r5, [pc, #28]	@ (8017de8 <_fstat_r+0x20>)
 8017dcc:	2300      	movs	r3, #0
 8017dce:	4604      	mov	r4, r0
 8017dd0:	4608      	mov	r0, r1
 8017dd2:	4611      	mov	r1, r2
 8017dd4:	602b      	str	r3, [r5, #0]
 8017dd6:	f7e9 fc21 	bl	800161c <_fstat>
 8017dda:	1c43      	adds	r3, r0, #1
 8017ddc:	d102      	bne.n	8017de4 <_fstat_r+0x1c>
 8017dde:	682b      	ldr	r3, [r5, #0]
 8017de0:	b103      	cbz	r3, 8017de4 <_fstat_r+0x1c>
 8017de2:	6023      	str	r3, [r4, #0]
 8017de4:	bd38      	pop	{r3, r4, r5, pc}
 8017de6:	bf00      	nop
 8017de8:	20008a64 	.word	0x20008a64

08017dec <_isatty_r>:
 8017dec:	b538      	push	{r3, r4, r5, lr}
 8017dee:	4d06      	ldr	r5, [pc, #24]	@ (8017e08 <_isatty_r+0x1c>)
 8017df0:	2300      	movs	r3, #0
 8017df2:	4604      	mov	r4, r0
 8017df4:	4608      	mov	r0, r1
 8017df6:	602b      	str	r3, [r5, #0]
 8017df8:	f7e9 fc20 	bl	800163c <_isatty>
 8017dfc:	1c43      	adds	r3, r0, #1
 8017dfe:	d102      	bne.n	8017e06 <_isatty_r+0x1a>
 8017e00:	682b      	ldr	r3, [r5, #0]
 8017e02:	b103      	cbz	r3, 8017e06 <_isatty_r+0x1a>
 8017e04:	6023      	str	r3, [r4, #0]
 8017e06:	bd38      	pop	{r3, r4, r5, pc}
 8017e08:	20008a64 	.word	0x20008a64

08017e0c <_kill_r>:
 8017e0c:	b538      	push	{r3, r4, r5, lr}
 8017e0e:	4d07      	ldr	r5, [pc, #28]	@ (8017e2c <_kill_r+0x20>)
 8017e10:	2300      	movs	r3, #0
 8017e12:	4604      	mov	r4, r0
 8017e14:	4608      	mov	r0, r1
 8017e16:	4611      	mov	r1, r2
 8017e18:	602b      	str	r3, [r5, #0]
 8017e1a:	f7e9 fbb9 	bl	8001590 <_kill>
 8017e1e:	1c43      	adds	r3, r0, #1
 8017e20:	d102      	bne.n	8017e28 <_kill_r+0x1c>
 8017e22:	682b      	ldr	r3, [r5, #0]
 8017e24:	b103      	cbz	r3, 8017e28 <_kill_r+0x1c>
 8017e26:	6023      	str	r3, [r4, #0]
 8017e28:	bd38      	pop	{r3, r4, r5, pc}
 8017e2a:	bf00      	nop
 8017e2c:	20008a64 	.word	0x20008a64

08017e30 <_getpid_r>:
 8017e30:	f7e9 bba6 	b.w	8001580 <_getpid>

08017e34 <_init>:
 8017e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e36:	bf00      	nop
 8017e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e3a:	bc08      	pop	{r3}
 8017e3c:	469e      	mov	lr, r3
 8017e3e:	4770      	bx	lr

08017e40 <_fini>:
 8017e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e42:	bf00      	nop
 8017e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e46:	bc08      	pop	{r3}
 8017e48:	469e      	mov	lr, r3
 8017e4a:	4770      	bx	lr
