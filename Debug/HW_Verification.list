
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001867c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003880  0801884c  0801884c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0cc  0801c0cc  0001e20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c0cc  0801c0cc  0001d0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c0d4  0801c0d4  0001e20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c0d4  0801c0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c0d8  0801c0d8  0001d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  0801c0dc  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  0801c1a8  0001e0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  0801c248  0001e16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088dc  2000020c  0801c2e8  0001e20c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008ae8  0801c2e8  0001eae8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e20c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030248  00000000  00000000  0001e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000081a1  00000000  00000000  0004e484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  00056628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001cbc  00000000  00000000  00058aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039453  00000000  00000000  0005a75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003db04  00000000  00000000  00093baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011558f  00000000  00000000  000d16b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e6c42  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009c48  00000000  00000000  001e6c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001f08d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018834 	.word	0x08018834

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08018834 	.word	0x08018834

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fd1b 	bl	8002078 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fc6c 	bl	8000f24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 febb 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fc5c 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000228 	.word	0x20000228
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fadb 	bl	8004ca0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fc45 	bl	8002fbc <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fbf4 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000270 	.word	0x20000270
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fa0b 	bl	8002ba8 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fbc4 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d0 	.word	0x200002d0
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200b      	movs	r0, #11
 8000824:	f002 f989 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 f9a2 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200c      	movs	r0, #12
 8000834:	f002 f981 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 f99a 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	200d      	movs	r0, #13
 8000844:	f002 f979 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 f992 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	200e      	movs	r0, #14
 8000854:	f002 f971 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 f98a 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2010      	movs	r0, #16
 8000864:	f002 f969 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 f982 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2011      	movs	r0, #17
 8000874:	f002 f961 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 f97a 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 f959 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 f972 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 f951 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 f96a 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 f949 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 f962 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 f941 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 f95a 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 f939 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 f952 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 f931 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 f94a 	bl	8002b72 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <MX_GPIO_Init+0xa4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a26      	ldr	r2, [pc, #152]	@ (8000990 <MX_GPIO_Init+0xa4>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_GPIO_Init+0xa4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_GPIO_Init+0xa4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_GPIO_Init+0xa4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_GPIO_Init+0xa4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

}
 8000982:	bf00      	nop
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_I2C1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <MX_I2C1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <MX_I2C1_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009d0:	f004 fb12 	bl	8004ff8 <HAL_I2C_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 faa3 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009e2:	f006 fcb5 	bl	8007350 <HAL_I2CEx_ConfigAnalogFilter>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 fa9a 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009f4:	f006 fcf7 	bl	80073e6 <HAL_I2CEx_ConfigDigitalFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 fa91 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002f4 	.word	0x200002f4
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	20404768 	.word	0x20404768

08000a14 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <MX_I2C2_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <MX_I2C2_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a26:	2214      	movs	r2, #20
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a4e:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a50:	f004 fad2 	bl	8004ff8 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 fa63 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a62:	f006 fc75 	bl	8007350 <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 fa5a 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_I2C2_Init+0x74>)
 8000a74:	f006 fcb7 	bl	80073e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 fa51 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000348 	.word	0x20000348
 8000a8c:	40005800 	.word	0x40005800
 8000a90:	20404768 	.word	0x20404768

08000a94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0ac      	sub	sp, #176	@ 0xb0
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	2284      	movs	r2, #132	@ 0x84
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f017 f87b 	bl	8017bb0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a57      	ldr	r2, [pc, #348]	@ (8000c1c <HAL_I2C_MspInit+0x188>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	f040 80b9 	bne.w	8000c38 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ac6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000aca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f007 f9ad 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ae0:	f000 fa20 	bl	8000f24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af0:	4b4b      	ldr	r3, [pc, #300]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b16:	2304      	movs	r3, #4
 8000b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4840      	ldr	r0, [pc, #256]	@ (8000c24 <HAL_I2C_MspInit+0x190>)
 8000b24:	f004 f8bc 	bl	8004ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b28:	4b3d      	ldr	r3, [pc, #244]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000b2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b34:	4b3a      	ldr	r3, [pc, #232]	@ (8000c20 <HAL_I2C_MspInit+0x18c>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000b40:	4b39      	ldr	r3, [pc, #228]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b42:	4a3a      	ldr	r2, [pc, #232]	@ (8000c2c <HAL_I2C_MspInit+0x198>)
 8000b44:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000b46:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b4c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4e:	4b36      	ldr	r3, [pc, #216]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5a:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b60:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b62:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b68:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b80:	4829      	ldr	r0, [pc, #164]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b82:	f002 fa1b 	bl	8002fbc <HAL_DMA_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000b8c:	f000 f9ca 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a25      	ldr	r2, [pc, #148]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <HAL_I2C_MspInit+0x194>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000b9e:	4a25      	ldr	r2, [pc, #148]	@ (8000c34 <HAL_I2C_MspInit+0x1a0>)
 8000ba0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000ba4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ba8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bac:	2240      	movs	r2, #64	@ 0x40
 8000bae:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bbc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000bdc:	4814      	ldr	r0, [pc, #80]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bde:	f002 f9ed 	bl	8002fbc <HAL_DMA_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000be8:	f000 f99c 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <HAL_I2C_MspInit+0x19c>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	201f      	movs	r0, #31
 8000bfe:	f001 ff9c 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c02:	201f      	movs	r0, #31
 8000c04:	f001 ffb5 	bl	8002b72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2020      	movs	r0, #32
 8000c0e:	f001 ff94 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c12:	2020      	movs	r0, #32
 8000c14:	f001 ffad 	bl	8002b72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c18:	e0be      	b.n	8000d98 <HAL_I2C_MspInit+0x304>
 8000c1a:	bf00      	nop
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400
 8000c28:	2000039c 	.word	0x2000039c
 8000c2c:	40026088 	.word	0x40026088
 8000c30:	200003fc 	.word	0x200003fc
 8000c34:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a58      	ldr	r2, [pc, #352]	@ (8000da0 <HAL_I2C_MspInit+0x30c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f040 80aa 	bne.w	8000d98 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 f8ed 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000c60:	f000 f960 	bl	8000f24 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b4f      	ldr	r3, [pc, #316]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	4a4e      	ldr	r2, [pc, #312]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c70:	4b4c      	ldr	r3, [pc, #304]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c84:	2312      	movs	r3, #18
 8000c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c96:	2304      	movs	r3, #4
 8000c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4841      	ldr	r0, [pc, #260]	@ (8000da8 <HAL_I2C_MspInit+0x314>)
 8000ca4:	f003 fffc 	bl	8004ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a3d      	ldr	r2, [pc, #244]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000cae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000da4 <HAL_I2C_MspInit+0x310>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8000db0 <HAL_I2C_MspInit+0x31c>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000cc6:	4b39      	ldr	r3, [pc, #228]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cc8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b34      	ldr	r3, [pc, #208]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000d00:	482a      	ldr	r0, [pc, #168]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000d02:	f002 f95b 	bl	8002fbc <HAL_DMA_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000d0c:	f000 f90a 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a26      	ldr	r2, [pc, #152]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000d14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d16:	4a25      	ldr	r2, [pc, #148]	@ (8000dac <HAL_I2C_MspInit+0x318>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d1e:	4a26      	ldr	r2, [pc, #152]	@ (8000db8 <HAL_I2C_MspInit+0x324>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000d22:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d24:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d28:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2a:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d2c:	2240      	movs	r2, #64	@ 0x40
 8000d2e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000d5c:	4815      	ldr	r0, [pc, #84]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d5e:	f002 f92d 	bl	8002fbc <HAL_DMA_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8000d68:	f000 f8dc 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a11      	ldr	r2, [pc, #68]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d72:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <HAL_I2C_MspInit+0x320>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2021      	movs	r0, #33	@ 0x21
 8000d7e:	f001 fedc 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d82:	2021      	movs	r0, #33	@ 0x21
 8000d84:	f001 fef5 	bl	8002b72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2022      	movs	r0, #34	@ 0x22
 8000d8e:	f001 fed4 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000d92:	2022      	movs	r0, #34	@ 0x22
 8000d94:	f001 feed 	bl	8002b72 <HAL_NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	37b0      	adds	r7, #176	@ 0xb0
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40005800 	.word	0x40005800
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	2000045c 	.word	0x2000045c
 8000db0:	40026058 	.word	0x40026058
 8000db4:	200004bc 	.word	0x200004bc
 8000db8:	400260b8 	.word	0x400260b8

08000dbc <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <_write+0x3c>)
 8000dca:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <_write+0x40>)
 8000dd8:	f009 fa80 	bl	800a2dc <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8000ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de0:	2201      	movs	r2, #1
 8000de2:	6979      	ldr	r1, [r7, #20]
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <_write+0x40>)
 8000de6:	f009 fa79 	bl	800a2dc <HAL_UART_Transmit>
	return len + 1;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3301      	adds	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	0801884c 	.word	0x0801884c
 8000dfc:	20000970 	.word	0x20000970

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f001 f8b7 	bl	8001f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f820 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f7ff fd6e 	bl	80008ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000e10:	f7ff fcea 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e14:	f000 fdc6 	bl	80019a4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000e18:	f00a fdb4 	bl	800b984 <MX_LWIP_Init>
  MX_CRC_Init();
 8000e1c:	f7ff fca2 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8000e20:	f000 fd60 	bl	80018e4 <MX_UART4_Init>
  MX_UART5_Init();
 8000e24:	f000 fd8e 	bl	8001944 <MX_UART5_Init>
  MX_I2C1_Init();
 8000e28:	f7ff fdb4 	bl	8000994 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e2c:	f7ff fdf2 	bl	8000a14 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000e30:	f000 f87e 	bl	8000f30 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000e34:	f000 f8ba 	bl	8000fac <MX_SPI4_Init>
  MX_ADC1_Init();
 8000e38:	f7ff fbd0 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8000e3c:	f000 fcae 	bl	800179c <MX_TIM6_Init>
  MX_TIM2_Init();
 8000e40:	f000 fc5e 	bl	8001700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 8000e44:	f015 ff04 	bl	8016c50 <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <main+0x48>

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	@ 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2230      	movs	r2, #48	@ 0x30
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f016 fea8 	bl	8017bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	4a29      	ldr	r2, [pc, #164]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <SystemClock_Config+0xd4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a24      	ldr	r2, [pc, #144]	@ (8000f20 <SystemClock_Config+0xd4>)
 8000e8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <SystemClock_Config+0xd4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000eb8:	23d8      	movs	r3, #216	@ 0xd8
 8000eba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 fb29 	bl	8007520 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ed4:	f000 f826 	bl	8000f24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed8:	f006 fad2 	bl	8007480 <HAL_PWREx_EnableOverDrive>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ee2:	f000 f81f 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2302      	movs	r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ef2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ef6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2107      	movs	r1, #7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fdaf 	bl	8007a68 <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f10:	f000 f808 	bl	8000f24 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3750      	adds	r7, #80	@ 0x50
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <MX_SPI1_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f66:	2218      	movs	r2, #24
 8000f68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f7e:	2207      	movs	r2, #7
 8000f80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_SPI1_Init+0x74>)
 8000f90:	f007 fb40 	bl	8008614 <HAL_SPI_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f7ff ffc3 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000051c 	.word	0x2000051c
 8000fa8:	40013000 	.word	0x40013000

08000fac <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fb2:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <MX_SPI4_Init+0x6c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fc4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_SPI4_Init+0x68>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_SPI4_Init+0x68>)
 8001002:	f007 fb07 	bl	8008614 <HAL_SPI_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 800100c:	f7ff ff8a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000580 	.word	0x20000580
 8001018:	40013400 	.word	0x40013400

0800101c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	@ 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4aa1      	ldr	r2, [pc, #644]	@ (80012c0 <HAL_SPI_MspInit+0x2a4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	f040 80a9 	bne.w	8001192 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001040:	4ba0      	ldr	r3, [pc, #640]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001044:	4a9f      	ldr	r2, [pc, #636]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001046:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800104a:	6453      	str	r3, [r2, #68]	@ 0x44
 800104c:	4b9d      	ldr	r3, [pc, #628]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800104e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b9a      	ldr	r3, [pc, #616]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a99      	ldr	r2, [pc, #612]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
 8001064:	4b97      	ldr	r3, [pc, #604]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b94      	ldr	r3, [pc, #592]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	4a93      	ldr	r2, [pc, #588]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	6313      	str	r3, [r2, #48]	@ 0x30
 800107c:	4b91      	ldr	r3, [pc, #580]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001088:	2370      	movs	r3, #112	@ 0x70
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001098:	2305      	movs	r3, #5
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4889      	ldr	r0, [pc, #548]	@ (80012c8 <HAL_SPI_MspInit+0x2ac>)
 80010a4:	f003 fdfc 	bl	8004ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010a8:	2320      	movs	r3, #32
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b8:	2305      	movs	r3, #5
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4882      	ldr	r0, [pc, #520]	@ (80012cc <HAL_SPI_MspInit+0x2b0>)
 80010c4:	f003 fdec 	bl	8004ca0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80010c8:	4b81      	ldr	r3, [pc, #516]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010ca:	4a82      	ldr	r2, [pc, #520]	@ (80012d4 <HAL_SPI_MspInit+0x2b8>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80010ce:	4b80      	ldr	r3, [pc, #512]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010d0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d6:	4b7e      	ldr	r3, [pc, #504]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b7c      	ldr	r3, [pc, #496]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b7b      	ldr	r3, [pc, #492]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ea:	4b79      	ldr	r3, [pc, #484]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f0:	4b77      	ldr	r3, [pc, #476]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80010f6:	4b76      	ldr	r3, [pc, #472]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010fc:	4b74      	ldr	r3, [pc, #464]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001102:	4b73      	ldr	r3, [pc, #460]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001108:	4871      	ldr	r0, [pc, #452]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 800110a:	f001 ff57 	bl	8002fbc <HAL_DMA_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001114:	f7ff ff06 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a6d      	ldr	r2, [pc, #436]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 800111c:	659a      	str	r2, [r3, #88]	@ 0x58
 800111e:	4a6c      	ldr	r2, [pc, #432]	@ (80012d0 <HAL_SPI_MspInit+0x2b4>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001124:	4b6c      	ldr	r3, [pc, #432]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001126:	4a6d      	ldr	r2, [pc, #436]	@ (80012dc <HAL_SPI_MspInit+0x2c0>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800112a:	4b6b      	ldr	r3, [pc, #428]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800112c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001132:	4b69      	ldr	r3, [pc, #420]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001134:	2240      	movs	r2, #64	@ 0x40
 8001136:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b67      	ldr	r3, [pc, #412]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b66      	ldr	r3, [pc, #408]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b62      	ldr	r3, [pc, #392]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001152:	4b61      	ldr	r3, [pc, #388]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001158:	4b5f      	ldr	r3, [pc, #380]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115e:	4b5e      	ldr	r3, [pc, #376]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001164:	485c      	ldr	r0, [pc, #368]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001166:	f001 ff29 	bl	8002fbc <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001170:	f7ff fed8 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a58      	ldr	r2, [pc, #352]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 8001178:	655a      	str	r2, [r3, #84]	@ 0x54
 800117a:	4a57      	ldr	r2, [pc, #348]	@ (80012d8 <HAL_SPI_MspInit+0x2bc>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2023      	movs	r0, #35	@ 0x23
 8001186:	f001 fcd8 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800118a:	2023      	movs	r0, #35	@ 0x23
 800118c:	f001 fcf1 	bl	8002b72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001190:	e091      	b.n	80012b6 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a52      	ldr	r2, [pc, #328]	@ (80012e0 <HAL_SPI_MspInit+0x2c4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 808c 	bne.w	80012b6 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800119e:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a48      	ldr	r2, [pc, #288]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a42      	ldr	r2, [pc, #264]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <HAL_SPI_MspInit+0x2a8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011ce:	2374      	movs	r3, #116	@ 0x74
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011de:	2305      	movs	r3, #5
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	483e      	ldr	r0, [pc, #248]	@ (80012e4 <HAL_SPI_MspInit+0x2c8>)
 80011ea:	f003 fd59 	bl	8004ca0 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80011ee:	4b3e      	ldr	r3, [pc, #248]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 80011f0:	4a3e      	ldr	r2, [pc, #248]	@ (80012ec <HAL_SPI_MspInit+0x2d0>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 80011f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 800120a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001210:	4b35      	ldr	r3, [pc, #212]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001216:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800122e:	482e      	ldr	r0, [pc, #184]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001230:	f001 fec4 	bl	8002fbc <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800123a:	f7ff fe73 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a29      	ldr	r2, [pc, #164]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001242:	659a      	str	r2, [r3, #88]	@ 0x58
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <HAL_SPI_MspInit+0x2cc>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800124c:	4a29      	ldr	r2, [pc, #164]	@ (80012f4 <HAL_SPI_MspInit+0x2d8>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001252:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001256:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800125a:	2240      	movs	r2, #64	@ 0x40
 800125c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800126a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800128a:	4819      	ldr	r0, [pc, #100]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800128c:	f001 fe96 	bl	8002fbc <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8001296:	f7ff fe45 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 800129e:	655a      	str	r2, [r3, #84]	@ 0x54
 80012a0:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <HAL_SPI_MspInit+0x2d4>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2054      	movs	r0, #84	@ 0x54
 80012ac:	f001 fc45 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80012b0:	2054      	movs	r0, #84	@ 0x54
 80012b2:	f001 fc5e 	bl	8002b72 <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	@ 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40013000 	.word	0x40013000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	200005e4 	.word	0x200005e4
 80012d4:	40026440 	.word	0x40026440
 80012d8:	20000644 	.word	0x20000644
 80012dc:	40026458 	.word	0x40026458
 80012e0:	40013400 	.word	0x40013400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	200006a4 	.word	0x200006a4
 80012ec:	40026410 	.word	0x40026410
 80012f0:	20000704 	.word	0x20000704
 80012f4:	40026428 	.word	0x40026428

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_MspInit+0x44>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <HAL_MspInit+0x44>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <HAL_MspInit+0x44>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_MspInit+0x44>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x44>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x44>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 fe2b 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <DMA1_Stream0_IRQHandler+0x10>)
 80013a6:	f001 ffa9 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000a58 	.word	0x20000a58

080013b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <DMA1_Stream1_IRQHandler+0x10>)
 80013ba:	f001 ff9f 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000800 	.word	0x20000800

080013c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Stream2_IRQHandler+0x10>)
 80013ce:	f001 ff95 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200009f8 	.word	0x200009f8

080013dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <DMA1_Stream3_IRQHandler+0x10>)
 80013e2:	f001 ff8b 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000045c 	.word	0x2000045c

080013f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <DMA1_Stream5_IRQHandler+0x10>)
 80013f6:	f001 ff81 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000039c 	.word	0x2000039c

08001404 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <DMA1_Stream6_IRQHandler+0x10>)
 800140a:	f001 ff77 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200003fc 	.word	0x200003fc

08001418 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <I2C1_EV_IRQHandler+0x10>)
 800141e:	f004 fa2d 	bl	800587c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002f4 	.word	0x200002f4

0800142c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <I2C1_ER_IRQHandler+0x10>)
 8001432:	f004 fa3d 	bl	80058b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002f4 	.word	0x200002f4

08001440 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <I2C2_EV_IRQHandler+0x10>)
 8001446:	f004 fa19 	bl	800587c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000348 	.word	0x20000348

08001454 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <I2C2_ER_IRQHandler+0x10>)
 800145a:	f004 fa29 	bl	80058b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000348 	.word	0x20000348

08001468 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <SPI1_IRQHandler+0x10>)
 800146e:	f007 fd11 	bl	8008e94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000051c 	.word	0x2000051c

0800147c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <USART3_IRQHandler+0x10>)
 8001482:	f009 f857 	bl	800a534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000970 	.word	0x20000970

08001490 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Stream7_IRQHandler+0x10>)
 8001496:	f001 ff31 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200004bc 	.word	0x200004bc

080014a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <UART4_IRQHandler+0x10>)
 80014aa:	f009 f843 	bl	800a534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000860 	.word	0x20000860

080014b8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <UART5_IRQHandler+0x10>)
 80014be:	f009 f839 	bl	800a534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200008e8 	.word	0x200008e8

080014cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM6_DAC_IRQHandler+0x10>)
 80014d2:	f008 facf 	bl	8009a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200007b4 	.word	0x200007b4

080014e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA2_Stream0_IRQHandler+0x10>)
 80014e6:	f001 ff09 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200006a4 	.word	0x200006a4

080014f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <DMA2_Stream1_IRQHandler+0x10>)
 80014fa:	f001 feff 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000704 	.word	0x20000704

08001508 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <DMA2_Stream2_IRQHandler+0x10>)
 800150e:	f001 fef5 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200005e4 	.word	0x200005e4

0800151c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA2_Stream3_IRQHandler+0x10>)
 8001522:	f001 feeb 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000644 	.word	0x20000644

08001530 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA2_Stream4_IRQHandler+0x10>)
 8001536:	f001 fee1 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000270 	.word	0x20000270

08001544 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <ETH_IRQHandler+0x10>)
 800154a:	f002 fcbd 	bl	8003ec8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20005498 	.word	0x20005498

08001558 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <ETH_WKUP_IRQHandler+0x10>)
 800155e:	f002 fcb3 	bl	8003ec8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20005498 	.word	0x20005498

0800156c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <SPI4_IRQHandler+0x10>)
 8001572:	f007 fc8f 	bl	8008e94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000580 	.word	0x20000580

08001580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_kill>:

int _kill(int pid, int sig)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800159a:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <_kill+0x20>)
 800159c:	2216      	movs	r2, #22
 800159e:	601a      	str	r2, [r3, #0]
  return -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20008ad8 	.word	0x20008ad8

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe5 	bl	8001590 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <_exit+0x12>

080015ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015dc:	f3af 8000 	nop.w
 80015e0:	4601      	mov	r1, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	b2ca      	uxtb	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbf0      	blt.n	80015dc <_read+0x12>
  }

  return len;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162c:	605a      	str	r2, [r3, #4]
  return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_isatty>:

int _isatty(int file)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d205      	bcs.n	80016a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <_sbrk+0x6c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016a6:	e009      	b.n	80016bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a06      	ldr	r2, [pc, #24]	@ (80016d0 <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	20050000 	.word	0x20050000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	20000764 	.word	0x20000764
 80016d4:	20008ae8 	.word	0x20008ae8
 80016d8:	20008ad8 	.word	0x20008ad8

080016dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_TIM2_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <MX_TIM2_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001746:	4814      	ldr	r0, [pc, #80]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001748:	f008 f82c 	bl	80097a4 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001752:	f7ff fbe7 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001764:	f008 fa8e 	bl	8009c84 <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800176e:	f7ff fbd9 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001780:	f008 fcb2 	bl	800a0e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800178a:	f7ff fbcb 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000768 	.word	0x20000768

0800179c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017ae:	4a16      	ldr	r2, [pc, #88]	@ (8001808 <MX_TIM6_Init+0x6c>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5400-1;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017b4:	f241 5217 	movw	r2, #5399	@ 0x1517
 80017b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017ce:	480d      	ldr	r0, [pc, #52]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017d0:	f007 ffe8 	bl	80097a4 <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80017da:	f7ff fba3 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017de:	2320      	movs	r3, #32
 80017e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	@ (8001804 <MX_TIM6_Init+0x68>)
 80017ec:	f008 fc7c 	bl	800a0e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80017f6:	f7ff fb95 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200007b4 	.word	0x200007b4
 8001808:	40001000 	.word	0x40001000

0800180c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181c:	d10c      	bne.n	8001838 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181e:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	4a2c      	ldr	r2, [pc, #176]	@ (80018d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_TIM_Base_MspInit+0xc8>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001836:	e049      	b.n	80018cc <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a26      	ldr	r2, [pc, #152]	@ (80018d8 <HAL_TIM_Base_MspInit+0xcc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d144      	bne.n	80018cc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4a23      	ldr	r2, [pc, #140]	@ (80018d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6413      	str	r3, [r2, #64]	@ 0x40
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 800185c:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <HAL_TIM_Base_MspInit+0xd4>)
 800185e:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001860:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 8001862:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001866:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 8001876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187a:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 800187e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001882:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 8001886:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800188a:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 8001894:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001898:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 80018a0:	480e      	ldr	r0, [pc, #56]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 80018a2:	f001 fb8b 	bl	8002fbc <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 80018ac:	f7ff fb3a 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_TIM_Base_MspInit+0xd0>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2036      	movs	r0, #54	@ 0x36
 80018c2:	f001 f93a 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018c6:	2036      	movs	r0, #54	@ 0x36
 80018c8:	f001 f953 	bl	8002b72 <HAL_NVIC_EnableIRQ>
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40001000 	.word	0x40001000
 80018dc:	20000800 	.word	0x20000800
 80018e0:	40026028 	.word	0x40026028

080018e4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_UART4_Init+0x58>)
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <MX_UART4_Init+0x5c>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_UART4_Init+0x58>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_UART4_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <MX_UART4_Init+0x58>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_UART4_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_UART4_Init+0x58>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <MX_UART4_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_UART4_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <MX_UART4_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_UART4_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <MX_UART4_Init+0x58>)
 8001928:	f008 fc8a 	bl	800a240 <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001932:	f7ff faf7 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000860 	.word	0x20000860
 8001940:	40004c00 	.word	0x40004c00

08001944 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <MX_UART5_Init+0x58>)
 800194a:	4a15      	ldr	r2, [pc, #84]	@ (80019a0 <MX_UART5_Init+0x5c>)
 800194c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <MX_UART5_Init+0x58>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_UART5_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_UART5_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_UART5_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_UART5_Init+0x58>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <MX_UART5_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_UART5_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <MX_UART5_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_UART5_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_UART5_Init+0x58>)
 8001988:	f008 fc5a 	bl	800a240 <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001992:	f7ff fac7 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200008e8 	.word	0x200008e8
 80019a0:	40005000 	.word	0x40005000

080019a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019aa:	4a15      	ldr	r2, [pc, #84]	@ (8001a00 <MX_USART3_UART_Init+0x5c>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_USART3_UART_Init+0x58>)
 80019e8:	f008 fc2a 	bl	800a240 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019f2:	f7ff fa97 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000970 	.word	0x20000970
 8001a00:	40004800 	.word	0x40004800

08001a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0b0      	sub	sp, #192	@ 0xc0
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a20:	2284      	movs	r2, #132	@ 0x84
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f016 f8c3 	bl	8017bb0 <memset>
  if(uartHandle->Instance==UART4)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4ab0      	ldr	r2, [pc, #704]	@ (8001cf0 <HAL_UART_MspInit+0x2ec>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d173      	bne.n	8001b1c <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a42:	4618      	mov	r0, r3
 8001a44:	f006 f9f6 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a4e:	f7ff fa69 	bl	8000f24 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a52:	4ba8      	ldr	r3, [pc, #672]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4aa7      	ldr	r2, [pc, #668]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001a58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4ba5      	ldr	r3, [pc, #660]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	4ba2      	ldr	r3, [pc, #648]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4aa1      	ldr	r2, [pc, #644]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b9f      	ldr	r3, [pc, #636]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4893      	ldr	r0, [pc, #588]	@ (8001cf8 <HAL_UART_MspInit+0x2f4>)
 8001aaa:	f003 f8f9 	bl	8004ca0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001aae:	4b93      	ldr	r3, [pc, #588]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001ab0:	4a93      	ldr	r2, [pc, #588]	@ (8001d00 <HAL_UART_MspInit+0x2fc>)
 8001ab2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ab4:	4b91      	ldr	r3, [pc, #580]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001ab6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aba:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abc:	4b8f      	ldr	r3, [pc, #572]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac2:	4b8e      	ldr	r3, [pc, #568]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ace:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad0:	4b8a      	ldr	r3, [pc, #552]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad6:	4b89      	ldr	r3, [pc, #548]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001adc:	4b87      	ldr	r3, [pc, #540]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae2:	4b86      	ldr	r3, [pc, #536]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae8:	4b84      	ldr	r3, [pc, #528]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001aee:	4883      	ldr	r0, [pc, #524]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001af0:	f001 fa64 	bl	8002fbc <HAL_DMA_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001afa:	f7ff fa13 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a7e      	ldr	r2, [pc, #504]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001b02:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b04:	4a7d      	ldr	r2, [pc, #500]	@ (8001cfc <HAL_UART_MspInit+0x2f8>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2034      	movs	r0, #52	@ 0x34
 8001b10:	f001 f813 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b14:	2034      	movs	r0, #52	@ 0x34
 8001b16:	f001 f82c 	bl	8002b72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b1a:	e0e4      	b.n	8001ce6 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a78      	ldr	r2, [pc, #480]	@ (8001d04 <HAL_UART_MspInit+0x300>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	f040 8095 	bne.w	8001c52 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 f97c 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001b42:	f7ff f9ef 	bl	8000f24 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b46:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b52:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b65      	ldr	r3, [pc, #404]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a64      	ldr	r2, [pc, #400]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b62      	ldr	r3, [pc, #392]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4850      	ldr	r0, [pc, #320]	@ (8001cf8 <HAL_UART_MspInit+0x2f4>)
 8001bb6:	f003 f873 	bl	8004ca0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bdc:	4619      	mov	r1, r3
 8001bde:	484a      	ldr	r0, [pc, #296]	@ (8001d08 <HAL_UART_MspInit+0x304>)
 8001be0:	f003 f85e 	bl	8004ca0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001be4:	4b49      	ldr	r3, [pc, #292]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001be6:	4a4a      	ldr	r2, [pc, #296]	@ (8001d10 <HAL_UART_MspInit+0x30c>)
 8001be8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001bea:	4b48      	ldr	r3, [pc, #288]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001bec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bf0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf2:	4b46      	ldr	r3, [pc, #280]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf8:	4b44      	ldr	r3, [pc, #272]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfe:	4b43      	ldr	r3, [pc, #268]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c04:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c06:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001c12:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c18:	4b3c      	ldr	r3, [pc, #240]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001c24:	4839      	ldr	r0, [pc, #228]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c26:	f001 f9c9 	bl	8002fbc <HAL_DMA_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8001c30:	f7ff f978 	bl	8000f24 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a35      	ldr	r2, [pc, #212]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c38:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c3a:	4a34      	ldr	r2, [pc, #208]	@ (8001d0c <HAL_UART_MspInit+0x308>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2035      	movs	r0, #53	@ 0x35
 8001c46:	f000 ff78 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c4a:	2035      	movs	r0, #53	@ 0x35
 8001c4c:	f000 ff91 	bl	8002b72 <HAL_NVIC_EnableIRQ>
}
 8001c50:	e049      	b.n	8001ce6 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2f      	ldr	r2, [pc, #188]	@ (8001d14 <HAL_UART_MspInit+0x310>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d144      	bne.n	8001ce6 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f006 f8e2 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0x276>
      Error_Handler();
 8001c76:	f7ff f955 	bl	8000f24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a17      	ldr	r2, [pc, #92]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_UART_MspInit+0x2f0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001caa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc4:	2307      	movs	r3, #7
 8001cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <HAL_UART_MspInit+0x304>)
 8001cd2:	f002 ffe5 	bl	8004ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2027      	movs	r0, #39	@ 0x27
 8001cdc:	f000 ff2d 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ce0:	2027      	movs	r0, #39	@ 0x27
 8001ce2:	f000 ff46 	bl	8002b72 <HAL_NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	37c0      	adds	r7, #192	@ 0xc0
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40004c00 	.word	0x40004c00
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	200009f8 	.word	0x200009f8
 8001d00:	40026040 	.word	0x40026040
 8001d04:	40005000 	.word	0x40005000
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	20000a58 	.word	0x20000a58
 8001d10:	40026010 	.word	0x40026010
 8001d14:	40004800 	.word	0x40004800

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d1c:	f7ff fcde 	bl	80016dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001d46:	f015 ff81 	bl	8017c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff f859 	bl	8000e00 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001d5c:	0801c0dc 	.word	0x0801c0dc
  ldr r2, =_sbss
 8001d60:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001d64:	20008ae8 	.word	0x20008ae8

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>

08001d6a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <LAN8742_RegisterBusIO+0x28>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <LAN8742_RegisterBusIO+0x28>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <LAN8742_RegisterBusIO+0x28>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d96:	e014      	b.n	8001dc2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d139      	bne.n	8001e5e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e01c      	b.n	8001e3e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	2112      	movs	r1, #18
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	4798      	blx	r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da03      	bge.n	8001e20 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001e18:	f06f 0304 	mvn.w	r3, #4
 8001e1c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001e1e:	e00b      	b.n	8001e38 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d105      	bne.n	8001e38 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
         break;
 8001e36:	e005      	b.n	8001e44 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	d9df      	bls.n	8001e04 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b1f      	cmp	r3, #31
 8001e4a:	d902      	bls.n	8001e52 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e4c:	f06f 0302 	mvn.w	r3, #2
 8001e50:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001e5e:	693b      	ldr	r3, [r7, #16]
 }
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6810      	ldr	r0, [r2, #0]
 8001e7c:	f107 020c 	add.w	r2, r7, #12
 8001e80:	2101      	movs	r1, #1
 8001e82:	4798      	blx	r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	da02      	bge.n	8001e90 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e8a:	f06f 0304 	mvn.w	r3, #4
 8001e8e:	e06e      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6810      	ldr	r0, [r2, #0]
 8001e98:	f107 020c 	add.w	r2, r7, #12
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4798      	blx	r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da02      	bge.n	8001eac <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ea6:	f06f 0304 	mvn.w	r3, #4
 8001eaa:	e060      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e059      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6810      	ldr	r0, [r2, #0]
 8001ec2:	f107 020c 	add.w	r2, r7, #12
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4798      	blx	r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da02      	bge.n	8001ed6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ed0:	f06f 0304 	mvn.w	r3, #4
 8001ed4:	e04b      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d11b      	bne.n	8001f18 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <LAN8742_GetLinkState+0x90>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e03a      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e033      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f10:	2304      	movs	r3, #4
 8001f12:	e02c      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f14:	2305      	movs	r3, #5
 8001f16:	e02a      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6810      	ldr	r0, [r2, #0]
 8001f20:	f107 020c 	add.w	r2, r7, #12
 8001f24:	211f      	movs	r1, #31
 8001f26:	4798      	blx	r3
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da02      	bge.n	8001f34 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f2e:	f06f 0304 	mvn.w	r3, #4
 8001f32:	e01c      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e015      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 031c 	and.w	r3, r3, #28
 8001f48:	2b18      	cmp	r3, #24
 8001f4a:	d101      	bne.n	8001f50 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e00e      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 031c 	and.w	r3, r3, #28
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d101      	bne.n	8001f5e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e007      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 031c 	and.w	r3, r3, #28
 8001f64:	2b14      	cmp	r3, #20
 8001f66:	d101      	bne.n	8001f6c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e000      	b.n	8001f6e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f6c:	2305      	movs	r3, #5
    }
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f000 fdd2 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f80:	200f      	movs	r0, #15
 8001f82:	f000 f805 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f86:	f7ff f9b7 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fded 	bl	8002b8e <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fcc:	f000 fdb5 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	@ (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008
 8002014:	20000ab8 	.word	0x20000ab8

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000ab8 	.word	0x20000ab8

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e031      	b.n	80020f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe faf2 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_ADC_Init+0x84>)
 80020bc:	4013      	ands	r3, r2
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fae0 	bl	800268c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80020e2:	e001      	b.n	80020e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	ffffeefd 	.word	0xffffeefd

08002100 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Start_DMA+0x22>
 800211e:	2302      	movs	r3, #2
 8002120:	e0d6      	b.n	80022d0 <HAL_ADC_Start_DMA+0x1d0>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d018      	beq.n	800216a <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002148:	4b63      	ldr	r3, [pc, #396]	@ (80022d8 <HAL_ADC_Start_DMA+0x1d8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a63      	ldr	r2, [pc, #396]	@ (80022dc <HAL_ADC_Start_DMA+0x1dc>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9a      	lsrs	r2, r3, #18
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 800215c:	e002      	b.n	8002164 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3b01      	subs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	f040 809e 	bne.w	80022b6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800217e:	4b58      	ldr	r3, [pc, #352]	@ (80022e0 <HAL_ADC_Start_DMA+0x1e0>)
 8002180:	4013      	ands	r3, r2
 8002182:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b4:	d106      	bne.n	80021c4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	f023 0206 	bic.w	r2, r3, #6
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80021c2:	e002      	b.n	80021ca <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	4a43      	ldr	r2, [pc, #268]	@ (80022e4 <HAL_ADC_Start_DMA+0x1e4>)
 80021d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <HAL_ADC_Start_DMA+0x1e8>)
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e6:	4a41      	ldr	r2, [pc, #260]	@ (80022ec <HAL_ADC_Start_DMA+0x1ec>)
 80021e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002202:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	334c      	adds	r3, #76	@ 0x4c
 800221e:	4619      	mov	r1, r3
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f000 ff78 	bl	8003118 <HAL_DMA_Start_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800222c:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <HAL_ADC_Start_DMA+0x1f0>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10f      	bne.n	8002258 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d143      	bne.n	80022ce <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	e03a      	b.n	80022ce <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	@ (80022f4 <HAL_ADC_Start_DMA+0x1f4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10e      	bne.n	8002280 <HAL_ADC_Start_DMA+0x180>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800227e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002280:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_ADC_Start_DMA+0x1f0>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d120      	bne.n	80022ce <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	@ (80022f8 <HAL_ADC_Start_DMA+0x1f8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d11b      	bne.n	80022ce <HAL_ADC_Start_DMA+0x1ce>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d114      	bne.n	80022ce <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	e00b      	b.n	80022ce <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000000 	.word	0x20000000
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	fffff8fe 	.word	0xfffff8fe
 80022e4:	08002881 	.word	0x08002881
 80022e8:	0800293b 	.word	0x0800293b
 80022ec:	08002957 	.word	0x08002957
 80022f0:	40012300 	.word	0x40012300
 80022f4:	40012000 	.word	0x40012000
 80022f8:	40012200 	.word	0x40012200

080022fc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Stop_DMA+0x1a>
 8002312:	2302      	movs	r3, #2
 8002314:	e046      	b.n	80023a4 <HAL_ADC_Stop_DMA+0xa8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d12e      	bne.n	800239a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d10f      	bne.n	800237a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235e:	4618      	mov	r0, r3
 8002360:	f000 ff3a 	bl	80031d8 <HAL_DMA_Abort>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002388:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <HAL_ADC_Stop_DMA+0xb0>)
 8002390:	4013      	ands	r3, r2
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	ffffeefe 	.word	0xffffeefe

080023b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e13a      	b.n	800266a <HAL_ADC_ConfigChannel+0x292>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b09      	cmp	r3, #9
 8002402:	d93a      	bls.n	800247a <HAL_ADC_ConfigChannel+0xa2>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800240c:	d035      	beq.n	800247a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68d9      	ldr	r1, [r3, #12]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	3b1e      	subs	r3, #30
 8002424:	2207      	movs	r2, #7
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	400a      	ands	r2, r1
 8002432:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a8f      	ldr	r2, [pc, #572]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10a      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68d9      	ldr	r1, [r3, #12]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	061a      	lsls	r2, r3, #24
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002452:	e039      	b.n	80024c8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	4603      	mov	r3, r0
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4403      	add	r3, r0
 800246c:	3b1e      	subs	r3, #30
 800246e:	409a      	lsls	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002478:	e026      	b.n	80024c8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2207      	movs	r2, #7
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	400a      	ands	r2, r1
 80024a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	4603      	mov	r3, r0
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4403      	add	r3, r0
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	409a      	lsls	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d824      	bhi.n	800251a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b05      	subs	r3, #5
 80024e2:	221f      	movs	r2, #31
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43da      	mvns	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b05      	subs	r3, #5
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	635a      	str	r2, [r3, #52]	@ 0x34
 8002518:	e04c      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d824      	bhi.n	800256c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b23      	subs	r3, #35	@ 0x23
 8002534:	221f      	movs	r2, #31
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b23      	subs	r3, #35	@ 0x23
 800255e:	fa00 f203 	lsl.w	r2, r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
 800256a:	e023      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	3b41      	subs	r3, #65	@ 0x41
 800257e:	221f      	movs	r2, #31
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43da      	mvns	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	400a      	ands	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b41      	subs	r3, #65	@ 0x41
 80025a8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a30      	ldr	r2, [pc, #192]	@ (800267c <HAL_ADC_ConfigChannel+0x2a4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1fc>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 80025ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a28      	ldr	r2, [pc, #160]	@ (800267c <HAL_ADC_ConfigChannel+0x2a4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10f      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x226>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d10b      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80025e6:	4b26      	ldr	r3, [pc, #152]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a25      	ldr	r2, [pc, #148]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 80025ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025f2:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 80025f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1e      	ldr	r2, [pc, #120]	@ (800267c <HAL_ADC_ConfigChannel+0x2a4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d12b      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x288>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1a      	ldr	r2, [pc, #104]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d003      	beq.n	800261a <HAL_ADC_ConfigChannel+0x242>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b11      	cmp	r3, #17
 8002618:	d122      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a18      	ldr	r2, [pc, #96]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 8002620:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002624:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002626:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <HAL_ADC_ConfigChannel+0x2a8>)
 800262c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002630:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <HAL_ADC_ConfigChannel+0x2a0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_ADC_ConfigChannel+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a11      	ldr	r2, [pc, #68]	@ (8002688 <HAL_ADC_ConfigChannel+0x2b0>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9a      	lsrs	r2, r3, #18
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002652:	e002      	b.n	800265a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3b01      	subs	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f9      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	10000012 	.word	0x10000012
 800267c:	40012000 	.word	0x40012000
 8002680:	40012300 	.word	0x40012300
 8002684:	20000000 	.word	0x20000000
 8002688:	431bde83 	.word	0x431bde83

0800268c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002694:	4b78      	ldr	r3, [pc, #480]	@ (8002878 <ADC_Init+0x1ec>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a77      	ldr	r2, [pc, #476]	@ (8002878 <ADC_Init+0x1ec>)
 800269a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800269e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026a0:	4b75      	ldr	r3, [pc, #468]	@ (8002878 <ADC_Init+0x1ec>)
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4973      	ldr	r1, [pc, #460]	@ (8002878 <ADC_Init+0x1ec>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271a:	4a58      	ldr	r2, [pc, #352]	@ (800287c <ADC_Init+0x1f0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800272e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	e00f      	b.n	8002786 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002784:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0202 	bic.w	r2, r2, #2
 8002794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	005a      	lsls	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	3b01      	subs	r3, #1
 80027e0:	035a      	lsls	r2, r3, #13
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	e007      	b.n	80027fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800280a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	3b01      	subs	r3, #1
 8002818:	051a      	lsls	r2, r3, #20
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800283e:	025a      	lsls	r2, r3, #9
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	029a      	lsls	r2, r3, #10
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	40012300 	.word	0x40012300
 800287c:	0f000001 	.word	0x0f000001

08002880 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d13c      	bne.n	8002914 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d12b      	bne.n	800290c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d127      	bne.n	800290c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d119      	bne.n	800290c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0220 	bic.w	r2, r2, #32
 80028e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f014 f983 	bl	8016c18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002912:	e00e      	b.n	8002932 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff fd4f 	bl	80023c4 <HAL_ADC_ErrorCallback>
}
 8002926:	e004      	b.n	8002932 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fd31 	bl	80023b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	f043 0204 	orr.w	r2, r3, #4
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fd24 	bl	80023c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x40>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	05fa0000 	.word	0x05fa0000

080029cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 0307 	and.w	r3, r3, #7
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db0b      	blt.n	8002a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4907      	ldr	r1, [pc, #28]	@ (8002a20 <__NVIC_EnableIRQ+0x38>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e100 	.word	0xe000e100

08002a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	@ (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	@ (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
         );
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	@ 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b04:	f7ff ff8e 	bl	8002a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff29 	bl	8002984 <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff3e 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff8e 	bl	8002a78 <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5d 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff31 	bl	80029e8 <__NVIC_EnableIRQ>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffa2 	bl	8002ae0 <SysTick_Config>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e054      	b.n	8002c64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7f5b      	ldrb	r3, [r3, #29]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd fdec 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	791b      	ldrb	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a22      	ldr	r2, [pc, #136]	@ (8002c6c <HAL_CRC_Init+0xc4>)
 8002be4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0218 	bic.w	r2, r2, #24
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	e00c      	b.n	8002c12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	461a      	mov	r2, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f94c 	bl	8002ea0 <HAL_CRCEx_Polynomial_Set>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e028      	b.n	8002c64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	795b      	ldrb	r3, [r3, #5]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c22:	611a      	str	r2, [r3, #16]
 8002c24:	e004      	b.n	8002c30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6912      	ldr	r2, [r2, #16]
 8002c2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	04c11db7 	.word	0x04c11db7

08002c70 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2202      	movs	r2, #2
 8002c84:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d006      	beq.n	8002cac <HAL_CRC_Calculate+0x3c>
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d829      	bhi.n	8002cf6 <HAL_CRC_Calculate+0x86>
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d019      	beq.n	8002cda <HAL_CRC_Calculate+0x6a>
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d01e      	beq.n	8002ce8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002caa:	e024      	b.n	8002cf6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e00a      	b.n	8002cc8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	441a      	add	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d3f0      	bcc.n	8002cb2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	613b      	str	r3, [r7, #16]
      break;
 8002cd8:	e00e      	b.n	8002cf8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f812 	bl	8002d08 <CRC_Handle_8>
 8002ce4:	6138      	str	r0, [r7, #16]
      break;
 8002ce6:	e007      	b.n	8002cf8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f89d 	bl	8002e2c <CRC_Handle_16>
 8002cf2:	6138      	str	r0, [r7, #16]
      break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_CRC_Calculate+0x88>
      break;
 8002cf6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002cfe:	693b      	ldr	r3, [r7, #16]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	e023      	b.n	8002d62 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4413      	add	r3, r2
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	440b      	add	r3, r1
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d34:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	440b      	add	r3, r1
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002d44:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3303      	adds	r3, #3
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	440b      	add	r3, r1
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002d58:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3d6      	bcc.n	8002d1a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d051      	beq.n	8002e1a <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d108      	bne.n	8002d92 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4413      	add	r3, r2
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	7013      	strb	r3, [r2, #0]
 8002d90:	e043      	b.n	8002e1a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d118      	bne.n	8002dce <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3301      	adds	r3, #1
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	440b      	add	r3, r1
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	8b7a      	ldrh	r2, [r7, #26]
 8002dca:	801a      	strh	r2, [r3, #0]
 8002dcc:	e025      	b.n	8002e1a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d120      	bne.n	8002e1a <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b21b      	sxth	r3, r3
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	3301      	adds	r3, #1
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	440b      	add	r3, r1
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b21b      	sxth	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	8b7a      	ldrh	r2, [r7, #26]
 8002e06:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3724      	adds	r7, #36	@ 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e013      	b.n	8002e66 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	4413      	add	r3, r2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	041a      	lsls	r2, r3, #16
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	440b      	add	r3, r1
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3301      	adds	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d3e6      	bcc.n	8002e3e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	4413      	add	r3, r2
 8002e88:	881a      	ldrh	r2, [r3, #0]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002eb0:	231f      	movs	r3, #31
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
 8002ec2:	e063      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ec4:	bf00      	nop
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1e5a      	subs	r2, r3, #1
 8002eca:	613a      	str	r2, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_CRCEx_Polynomial_Set+0x44>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b18      	cmp	r3, #24
 8002ee8:	d846      	bhi.n	8002f78 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002eea:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f7f 	.word	0x08002f7f
 8002ef4:	08002f79 	.word	0x08002f79
 8002ef8:	08002f79 	.word	0x08002f79
 8002efc:	08002f79 	.word	0x08002f79
 8002f00:	08002f79 	.word	0x08002f79
 8002f04:	08002f79 	.word	0x08002f79
 8002f08:	08002f79 	.word	0x08002f79
 8002f0c:	08002f79 	.word	0x08002f79
 8002f10:	08002f6d 	.word	0x08002f6d
 8002f14:	08002f79 	.word	0x08002f79
 8002f18:	08002f79 	.word	0x08002f79
 8002f1c:	08002f79 	.word	0x08002f79
 8002f20:	08002f79 	.word	0x08002f79
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	08002f79 	.word	0x08002f79
 8002f30:	08002f61 	.word	0x08002f61
 8002f34:	08002f79 	.word	0x08002f79
 8002f38:	08002f79 	.word	0x08002f79
 8002f3c:	08002f79 	.word	0x08002f79
 8002f40:	08002f79 	.word	0x08002f79
 8002f44:	08002f79 	.word	0x08002f79
 8002f48:	08002f79 	.word	0x08002f79
 8002f4c:	08002f79 	.word	0x08002f79
 8002f50:	08002f55 	.word	0x08002f55
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d913      	bls.n	8002f82 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f5e:	e010      	b.n	8002f82 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	d90f      	bls.n	8002f86 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f6a:	e00c      	b.n	8002f86 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d90b      	bls.n	8002f8a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f76:	e008      	b.n	8002f8a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
        break;
 8002f7c:	e006      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e004      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f8a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10d      	bne.n	8002fae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 0118 	bic.w	r1, r3, #24
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff f826 	bl	8002018 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e099      	b.n	800310c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff8:	e00f      	b.n	800301a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffa:	f7ff f80d 	bl	8002018 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b05      	cmp	r3, #5
 8003006:	d908      	bls.n	800301a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e078      	b.n	800310c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e8      	bne.n	8002ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4b38      	ldr	r3, [pc, #224]	@ (8003114 <HAL_DMA_Init+0x158>)
 8003034:	4013      	ands	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	4313      	orrs	r3, r2
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0307 	bic.w	r3, r3, #7
 800309a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d117      	bne.n	80030de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb23 	bl	800370c <DMA_CheckFifoParam>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2240      	movs	r2, #64	@ 0x40
 80030d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030da:	2301      	movs	r3, #1
 80030dc:	e016      	b.n	800310c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fada 	bl	80036a0 <DMA_CalcBaseAndBitshift>
 80030ec:	4603      	mov	r3, r0
 80030ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	223f      	movs	r2, #63	@ 0x3f
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	f010803f 	.word	0xf010803f

08003118 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_DMA_Start_IT+0x26>
 800313a:	2302      	movs	r3, #2
 800313c:	e048      	b.n	80031d0 <HAL_DMA_Start_IT+0xb8>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d137      	bne.n	80031c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa6c 	bl	8003644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	223f      	movs	r2, #63	@ 0x3f
 8003172:	409a      	lsls	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0216 	orr.w	r2, r2, #22
 8003186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003196:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0208 	orr.w	r2, r2, #8
 80031ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e005      	b.n	80031ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031e6:	f7fe ff17 	bl	8002018 <HAL_GetTick>
 80031ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d008      	beq.n	800320a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2280      	movs	r2, #128	@ 0x80
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e052      	b.n	80032b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0216 	bic.w	r2, r2, #22
 8003218:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003228:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_DMA_Abort+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325a:	e013      	b.n	8003284 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800325c:	f7fe fedc 	bl	8002018 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b05      	cmp	r3, #5
 8003268:	d90c      	bls.n	8003284 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2203      	movs	r2, #3
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e015      	b.n	80032b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e4      	bne.n	800325c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	223f      	movs	r2, #63	@ 0x3f
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d004      	beq.n	80032d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2280      	movs	r2, #128	@ 0x80
 80032d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00c      	b.n	80032f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2205      	movs	r2, #5
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003308:	4b8e      	ldr	r3, [pc, #568]	@ (8003544 <HAL_DMA_IRQHandler+0x248>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a8e      	ldr	r2, [pc, #568]	@ (8003548 <HAL_DMA_IRQHandler+0x24c>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0a9b      	lsrs	r3, r3, #10
 8003314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	2208      	movs	r2, #8
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01a      	beq.n	8003368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	2208      	movs	r2, #8
 8003356:	409a      	lsls	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d012      	beq.n	800339e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	2201      	movs	r2, #1
 800338c:	409a      	lsls	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003396:	f043 0202 	orr.w	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	2204      	movs	r2, #4
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d012      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	2204      	movs	r2, #4
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f043 0204 	orr.w	r2, r3, #4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	2210      	movs	r2, #16
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d043      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d03c      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	2210      	movs	r2, #16
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d018      	beq.n	800343e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d024      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
 800342a:	e01f      	b.n	800346c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
 800343c:	e016      	b.n	800346c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0208 	bic.w	r2, r2, #8
 800345a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	2220      	movs	r2, #32
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 808f 	beq.w	800359c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8087 	beq.w	800359c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	2220      	movs	r2, #32
 8003494:	409a      	lsls	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d136      	bne.n	8003514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0216 	bic.w	r2, r2, #22
 80034b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x1da>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0208 	bic.w	r2, r2, #8
 80034e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	223f      	movs	r2, #63	@ 0x3f
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003506:	2b00      	cmp	r3, #0
 8003508:	d07e      	beq.n	8003608 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
        }
        return;
 8003512:	e079      	b.n	8003608 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01d      	beq.n	800355e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10d      	bne.n	800354c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003534:	2b00      	cmp	r3, #0
 8003536:	d031      	beq.n	800359c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
 8003540:	e02c      	b.n	800359c <HAL_DMA_IRQHandler+0x2a0>
 8003542:	bf00      	nop
 8003544:	20000000 	.word	0x20000000
 8003548:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
 800355c:	e01e      	b.n	800359c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10f      	bne.n	800358c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0210 	bic.w	r2, r2, #16
 800357a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d032      	beq.n	800360a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2205      	movs	r2, #5
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d307      	bcc.n	80035e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f2      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x2cc>
 80035e2:	e000      	b.n	80035e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
 8003606:	e000      	b.n	800360a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003608:	bf00      	nop
    }
  }
}
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800361e:	b2db      	uxtb	r3, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d108      	bne.n	8003684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003682:	e007      	b.n	8003694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3b10      	subs	r3, #16
 80036b0:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <DMA_CalcBaseAndBitshift+0x60>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <DMA_CalcBaseAndBitshift+0x64>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d908      	bls.n	80036e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80036de:	e006      	b.n	80036ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	aaaaaaab 	.word	0xaaaaaaab
 8003704:	0801bed0 	.word	0x0801bed0
 8003708:	fffffc00 	.word	0xfffffc00

0800370c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11f      	bne.n	8003766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d856      	bhi.n	80037da <DMA_CheckFifoParam+0xce>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <DMA_CheckFifoParam+0x28>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003757 	.word	0x08003757
 800373c:	08003745 	.word	0x08003745
 8003740:	080037db 	.word	0x080037db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d046      	beq.n	80037de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003754:	e043      	b.n	80037de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800375e:	d140      	bne.n	80037e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003764:	e03d      	b.n	80037e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376e:	d121      	bne.n	80037b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d837      	bhi.n	80037e6 <DMA_CheckFifoParam+0xda>
 8003776:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <DMA_CheckFifoParam+0x70>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003793 	.word	0x08003793
 8003784:	0800378d 	.word	0x0800378d
 8003788:	080037a5 	.word	0x080037a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e030      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d025      	beq.n	80037ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e022      	b.n	80037ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ac:	d11f      	bne.n	80037ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b2:	e01c      	b.n	80037ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d903      	bls.n	80037c2 <DMA_CheckFifoParam+0xb6>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d003      	beq.n	80037c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c0:	e018      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      break;
 80037c6:	e015      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e00b      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037da:	bf00      	nop
 80037dc:	e00a      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e008      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e006      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e004      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
    }
  } 
  
  return status; 
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e086      	b.n	8003924 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f008 fbdb 	bl	800bfe4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	4b3f      	ldr	r3, [pc, #252]	@ (800392c <HAL_ETH_Init+0x128>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	4a3e      	ldr	r2, [pc, #248]	@ (800392c <HAL_ETH_Init+0x128>)
 8003834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003838:	6453      	str	r3, [r2, #68]	@ 0x44
 800383a:	4b3c      	ldr	r3, [pc, #240]	@ (800392c <HAL_ETH_Init+0x128>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003846:	4b3a      	ldr	r3, [pc, #232]	@ (8003930 <HAL_ETH_Init+0x12c>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a39      	ldr	r2, [pc, #228]	@ (8003930 <HAL_ETH_Init+0x12c>)
 800384c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003850:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003852:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <HAL_ETH_Init+0x12c>)
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4935      	ldr	r1, [pc, #212]	@ (8003930 <HAL_ETH_Init+0x12c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003860:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <HAL_ETH_Init+0x12c>)
 8003862:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800387a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800387c:	f7fe fbcc 	bl	8002018 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003882:	e011      	b.n	80038a8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003884:	f7fe fbc8 	bl	8002018 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003892:	d909      	bls.n	80038a8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2204      	movs	r2, #4
 8003898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	22e0      	movs	r2, #224	@ 0xe0
 80038a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e03d      	b.n	8003924 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e4      	bne.n	8003884 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 ff34 	bl	8004728 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 ffdf 	bl	8004884 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f001 f835 	bl	8004936 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	461a      	mov	r2, r3
 80038d2:	2100      	movs	r1, #0
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 ff9d 	bl	8004814 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80038e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <HAL_ETH_Init+0x130>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800390e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2210      	movs	r2, #16
 800391e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	40013800 	.word	0x40013800
 8003934:	00020060 	.word	0x00020060

08003938 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003946:	2b10      	cmp	r3, #16
 8003948:	d15f      	bne.n	8003a0a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa2e 	bl	8003dc0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800396c:	2001      	movs	r0, #1
 800396e:	f7fe fb5f 	bl	8002030 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800398c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003990:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039a8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fd58 	bl	8004460 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0208 	orr.w	r2, r2, #8
 80039be:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039c8:	2001      	movs	r0, #1
 80039ca:	f7fe fb31 	bl	8002030 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0204 	orr.w	r2, r2, #4
 80039e4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ee:	69d9      	ldr	r1, [r3, #28]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <HAL_ETH_Start_IT+0xdc>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039fc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2240      	movs	r2, #64	@ 0x40
 8003a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	0001a0c1 	.word	0x0001a0c1

08003a18 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a26:	2b40      	cmp	r3, #64	@ 0x40
 8003a28:	d16e      	bne.n	8003b08 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b34      	ldr	r3, [pc, #208]	@ (8003b14 <HAL_ETH_Stop_IT+0xfc>)
 8003a42:	400b      	ands	r3, r1
 8003a44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a48:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a60:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	f023 0302 	bic.w	r3, r3, #2
 8003a74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a78:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0204 	bic.w	r2, r2, #4
 8003a88:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f7fe facc 	bl	8002030 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fcdd 	bl	8004460 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0208 	bic.w	r2, r2, #8
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f7fe fab6 	bl	8002030 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e00e      	b.n	8003af0 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	3212      	adds	r2, #18
 8003ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003adc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	3301      	adds	r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d9ed      	bls.n	8003ad2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2210      	movs	r2, #16
 8003b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	fffe5f3e 	.word	0xfffe5f3e

08003b18 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07c      	b.n	8003c38 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b44:	2b40      	cmp	r3, #64	@ 0x40
 8003b46:	d176      	bne.n	8003c36 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 ff61 	bl	8004a14 <ETH_Prepare_Tx_Descriptors>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f043 0202 	orr.w	r2, r3, #2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e065      	b.n	8003c38 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b6c:	f3bf 8f4f 	dsb	sy
}
 8003b70:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3206      	adds	r2, #6
 8003b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d904      	bls.n	8003b9c <HAL_ETH_Transmit+0x84>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	1f1a      	subs	r2, r3, #4
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3106      	adds	r1, #6
 8003ba8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bb0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003bb2:	f7fe fa31 	bl	8002018 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003bb8:	e037      	b.n	8003c2a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d011      	beq.n	8003bf0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f043 0208 	orr.w	r2, r3, #8
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e023      	b.n	8003c38 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bf6:	d018      	beq.n	8003c2a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf8:	f7fe fa0e 	bl	8002018 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <HAL_ETH_Transmit+0xf6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10d      	bne.n	8003c2a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	f043 0204 	orr.w	r2, r3, #4
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003c24:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e006      	b.n	8003c38 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	dbc3      	blt.n	8003bba <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0a4      	b.n	8003db6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d001      	beq.n	8003c7a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e09d      	b.n	8003db6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	3212      	adds	r2, #18
 8003c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c90:	f1c3 0304 	rsb	r3, r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c96:	e066      	b.n	8003d66 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <HAL_ETH_ReadData+0x88>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03c      	beq.n	8003d42 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003cea:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003d00:	2301      	movs	r3, #1
 8003d02:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f008 fb31 	bl	800c388 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	441a      	add	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3301      	adds	r3, #1
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d902      	bls.n	8003d54 <HAL_ETH_ReadData+0x114>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3b04      	subs	r3, #4
 8003d52:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	3212      	adds	r2, #18
 8003d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3301      	adds	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	db06      	blt.n	8003d7c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d202      	bcs.n	8003d7c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d08d      	beq.n	8003c98 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	441a      	add	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f815 	bl	8003dc0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d108      	bne.n	8003db4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dd4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	3212      	adds	r2, #18
 8003ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003de8:	e042      	b.n	8003e70 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d112      	bne.n	8003e18 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003df2:	f107 0308 	add.w	r3, r7, #8
 8003df6:	4618      	mov	r0, r3
 8003df8:	f008 fa96 	bl	800c328 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	74fb      	strb	r3, [r7, #19]
 8003e06:	e007      	b.n	8003e18 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	461a      	mov	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ec4 <ETH_UpdateDescriptor+0x104>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	6053      	str	r3, [r2, #4]
 8003e32:	e005      	b.n	8003e40 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d902      	bls.n	8003e5e <ETH_UpdateDescriptor+0x9e>
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	3212      	adds	r2, #18
 8003e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e68:	617b      	str	r3, [r7, #20]
      desccount--;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <ETH_UpdateDescriptor+0xbc>
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1b6      	bne.n	8003dea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d01a      	beq.n	8003ebc <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3303      	adds	r3, #3
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003e90:	f3bf 8f5f 	dmb	sy
}
 8003e94:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	18ca      	adds	r2, r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eae:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	80004000 	.word	0x80004000

08003ec8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8004020 <HAL_ETH_IRQHandler+0x158>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <HAL_ETH_IRQHandler+0x56>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <HAL_ETH_IRQHandler+0x15c>)
 8003f16:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f891 	bl	8004040 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00f      	beq.n	8003f48 <HAL_ETH_IRQHandler+0x80>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003f40:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f872 	bl	800402c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d042      	beq.n	8003fd8 <HAL_ETH_IRQHandler+0x110>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03d      	beq.n	8003fd8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f043 0208 	orr.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01a      	beq.n	8003fac <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	4b29      	ldr	r3, [pc, #164]	@ (8004028 <HAL_ETH_IRQHandler+0x160>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003f9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fa0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	22e0      	movs	r2, #224	@ 0xe0
 8003fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003faa:	e012      	b.n	8003fd2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fd0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f83e 	bl	8004054 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00e      	beq.n	8004000 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f838 	bl	8004068 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800400a:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_ETH_IRQHandler+0x158>)
 800400c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004010:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f832 	bl	800407c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40013c00 	.word	0x40013c00
 8004024:	00010040 	.word	0x00010040
 8004028:	007e2000 	.word	0x007e2000

0800402c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 031c 	and.w	r3, r3, #28
 80040ac:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	02db      	lsls	r3, r3, #11
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	019b      	lsls	r3, r3, #6
 80040be:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0302 	bic.w	r3, r3, #2
 80040ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80040e0:	f7fd ff9a 	bl	8002018 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040e6:	e00d      	b.n	8004104 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80040e8:	f7fd ff96 	bl	8002018 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f6:	d301      	bcc.n	80040fc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e010      	b.n	800411e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ec      	bne.n	80040e8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	b29b      	uxth	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 031c 	and.w	r3, r3, #28
 8004142:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	02db      	lsls	r3, r3, #11
 8004148:	b29b      	uxth	r3, r3
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	019b      	lsls	r3, r3, #6
 8004154:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004180:	f7fd ff4a 	bl	8002018 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004186:	e00d      	b.n	80041a4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004188:	f7fd ff46 	bl	8002018 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004196:	d301      	bcc.n	800419c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e009      	b.n	80041b0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ec      	bne.n	8004188 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0e6      	b.n	800439a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b29a      	uxth	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e00b      	b.n	80043d2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d105      	bne.n	80043d0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f870 	bl	80044ac <ETH_SetMACConfig>

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 031c 	bic.w	r3, r3, #28
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043f4:	f003 fcea 	bl	8007dcc <HAL_RCC_GetHCLKFreq>
 80043f8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4a14      	ldr	r2, [pc, #80]	@ (8004450 <HAL_ETH_SetMDIOClockRange+0x74>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d804      	bhi.n	800440c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f043 0308 	orr.w	r3, r3, #8
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e019      	b.n	8004440 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a11      	ldr	r2, [pc, #68]	@ (8004454 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d204      	bcs.n	800441e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f043 030c 	orr.w	r3, r3, #12
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	e010      	b.n	8004440 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d90c      	bls.n	8004440 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4a0c      	ldr	r2, [pc, #48]	@ (800445c <HAL_ETH_SetMDIOClockRange+0x80>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d804      	bhi.n	8004438 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f043 0304 	orr.w	r3, r3, #4
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e003      	b.n	8004440 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f043 0310 	orr.w	r3, r3, #16
 800443e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	611a      	str	r2, [r3, #16]
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	02160ebf 	.word	0x02160ebf
 8004454:	03938700 	.word	0x03938700
 8004458:	05f5e0ff 	.word	0x05f5e0ff
 800445c:	08f0d17f 	.word	0x08f0d17f

08004460 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004482:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004490:	2001      	movs	r0, #1
 8004492:	f7fd fdcd 	bl	8002030 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a0:	6193      	str	r3, [r2, #24]
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <ETH_SetMACConfig+0x164>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	7b9b      	ldrb	r3, [r3, #14]
 80044ca:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	7c12      	ldrb	r2, [r2, #16]
 80044d0:	2a00      	cmp	r2, #0
 80044d2:	d102      	bne.n	80044da <ETH_SetMACConfig+0x2e>
 80044d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044d8:	e000      	b.n	80044dc <ETH_SetMACConfig+0x30>
 80044da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	7c52      	ldrb	r2, [r2, #17]
 80044e2:	2a00      	cmp	r2, #0
 80044e4:	d102      	bne.n	80044ec <ETH_SetMACConfig+0x40>
 80044e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80044ea:	e000      	b.n	80044ee <ETH_SetMACConfig+0x42>
 80044ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	7fdb      	ldrb	r3, [r3, #31]
 80044fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80044fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	7f92      	ldrb	r2, [r2, #30]
 8004508:	2a00      	cmp	r2, #0
 800450a:	d102      	bne.n	8004512 <ETH_SetMACConfig+0x66>
 800450c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004510:	e000      	b.n	8004514 <ETH_SetMACConfig+0x68>
 8004512:	2200      	movs	r2, #0
                        macconf->Speed |
 8004514:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	7f1b      	ldrb	r3, [r3, #28]
 800451a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800451c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004522:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	791b      	ldrb	r3, [r3, #4]
 8004528:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800452a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004532:	2a00      	cmp	r2, #0
 8004534:	d102      	bne.n	800453c <ETH_SetMACConfig+0x90>
 8004536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453a:	e000      	b.n	800453e <ETH_SetMACConfig+0x92>
 800453c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800453e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	7bdb      	ldrb	r3, [r3, #15]
 8004544:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004546:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800454c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004554:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004556:	4313      	orrs	r3, r2
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800456e:	2001      	movs	r0, #1
 8004570:	f7fd fd5e 	bl	8002030 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800458a:	4013      	ands	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004592:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800459a:	2a00      	cmp	r2, #0
 800459c:	d101      	bne.n	80045a2 <ETH_SetMACConfig+0xf6>
 800459e:	2280      	movs	r2, #128	@ 0x80
 80045a0:	e000      	b.n	80045a4 <ETH_SetMACConfig+0xf8>
 80045a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80045aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80045b2:	2a01      	cmp	r2, #1
 80045b4:	d101      	bne.n	80045ba <ETH_SetMACConfig+0x10e>
 80045b6:	2208      	movs	r2, #8
 80045b8:	e000      	b.n	80045bc <ETH_SetMACConfig+0x110>
 80045ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80045bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80045c4:	2a01      	cmp	r2, #1
 80045c6:	d101      	bne.n	80045cc <ETH_SetMACConfig+0x120>
 80045c8:	2204      	movs	r2, #4
 80045ca:	e000      	b.n	80045ce <ETH_SetMACConfig+0x122>
 80045cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80045d6:	2a01      	cmp	r2, #1
 80045d8:	d101      	bne.n	80045de <ETH_SetMACConfig+0x132>
 80045da:	2202      	movs	r2, #2
 80045dc:	e000      	b.n	80045e0 <ETH_SetMACConfig+0x134>
 80045de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045e0:	4313      	orrs	r3, r2
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045f8:	2001      	movs	r0, #1
 80045fa:	f7fd fd19 	bl	8002030 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	619a      	str	r2, [r3, #24]
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	fd20810f 	.word	0xfd20810f

08004614 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4b3d      	ldr	r3, [pc, #244]	@ (8004724 <ETH_SetDMAConfig+0x110>)
 800462e:	4013      	ands	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	7b1b      	ldrb	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <ETH_SetDMAConfig+0x2c>
 800463a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800463e:	e000      	b.n	8004642 <ETH_SetDMAConfig+0x2e>
 8004640:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	7b5b      	ldrb	r3, [r3, #13]
 8004646:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004648:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	7f52      	ldrb	r2, [r2, #29]
 800464e:	2a00      	cmp	r2, #0
 8004650:	d102      	bne.n	8004658 <ETH_SetDMAConfig+0x44>
 8004652:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004656:	e000      	b.n	800465a <ETH_SetDMAConfig+0x46>
 8004658:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800465a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	7b9b      	ldrb	r3, [r3, #14]
 8004660:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004662:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004668:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	7f1b      	ldrb	r3, [r3, #28]
 800466e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	7f9b      	ldrb	r3, [r3, #30]
 8004676:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004678:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800467e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004686:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004688:	4313      	orrs	r3, r2
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004698:	461a      	mov	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fd fcc0 	bl	8002030 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b8:	461a      	mov	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	791b      	ldrb	r3, [r3, #4]
 80046c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80046ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80046de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004708:	2001      	movs	r0, #1
 800470a:	f7fd fc91 	bl	8002030 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6013      	str	r3, [r2, #0]
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	f8de3f23 	.word	0xf8de3f23

08004728 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b0a6      	sub	sp, #152	@ 0x98
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800473c:	2300      	movs	r3, #0
 800473e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004764:	2300      	movs	r3, #0
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800476a:	2300      	movs	r3, #0
 800476c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004774:	2300      	movs	r3, #0
 8004776:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004784:	2300      	movs	r3, #0
 8004786:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800478a:	2300      	movs	r3, #0
 800478c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004790:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004794:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004796:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800479a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800479c:	2300      	movs	r3, #0
 800479e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fe7f 	bl	80044ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80047ae:	2301      	movs	r3, #1
 80047b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80047bc:	2301      	movs	r3, #1
 80047be:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047da:	2301      	movs	r3, #1
 80047dc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047e8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047ee:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff05 	bl	8004614 <ETH_SetDMAConfig>
}
 800480a:	bf00      	nop
 800480c:	3798      	adds	r7, #152	@ 0x98
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3305      	adds	r3, #5
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	3204      	adds	r2, #4
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4b11      	ldr	r3, [pc, #68]	@ (800487c <ETH_MACAddressConfig+0x68>)
 8004836:	4413      	add	r3, r2
 8004838:	461a      	mov	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3303      	adds	r3, #3
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	061a      	lsls	r2, r3, #24
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3302      	adds	r3, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3301      	adds	r3, #1
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	4313      	orrs	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <ETH_MACAddressConfig+0x6c>)
 8004866:	4413      	add	r3, r2
 8004868:	461a      	mov	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40028040 	.word	0x40028040
 8004880:	40028044 	.word	0x40028044

08004884 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e03e      	b.n	8004910 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	440b      	add	r3, r1
 80048a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	3206      	adds	r2, #6
 80048c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d80c      	bhi.n	80048f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68d9      	ldr	r1, [r3, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	440b      	add	r3, r1
 80048ec:	461a      	mov	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	e004      	b.n	80048fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3301      	adds	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d9bd      	bls.n	8004892 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004928:	611a      	str	r2, [r3, #16]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e048      	b.n	80049d6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6919      	ldr	r1, [r3, #16]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	440b      	add	r3, r1
 8004954:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004980:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	3212      	adds	r2, #18
 80049a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d80c      	bhi.n	80049c6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6919      	ldr	r1, [r3, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	440b      	add	r3, r1
 80049be:	461a      	mov	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e004      	b.n	80049d0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d9b3      	bls.n	8004944 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a06:	60da      	str	r2, [r3, #12]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b091      	sub	sp, #68	@ 0x44
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3318      	adds	r3, #24
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a56:	d007      	beq.n	8004a68 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e111      	b.n	8004c90 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6e:	3301      	adds	r3, #1
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	4b86      	ldr	r3, [pc, #536]	@ (8004c9c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a86:	6852      	ldr	r2, [r2, #4]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004aee:	e082      	b.n	8004bf6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d006      	beq.n	8004b10 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e005      	b.n	8004b1c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1e:	3301      	adds	r3, #1
 8004b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d902      	bls.n	8004b2e <ETH_Prepare_Tx_Descriptors+0x11a>
 8004b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2a:	3b04      	subs	r3, #4
 8004b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b44:	d007      	beq.n	8004b56 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d029      	beq.n	8004baa <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b62:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004b64:	2300      	movs	r3, #0
 8004b66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b68:	e019      	b.n	8004b9e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004b6a:	f3bf 8f5f 	dmb	sy
}
 8004b6e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7e:	3301      	adds	r3, #1
 8004b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d902      	bls.n	8004b8e <ETH_Prepare_Tx_Descriptors+0x17a>
 8004b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b8a:	3b04      	subs	r3, #4
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b96:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d3e1      	bcc.n	8004b6a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e072      	b.n	8004c90 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb8:	3301      	adds	r3, #1
 8004bba:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	4b32      	ldr	r3, [pc, #200]	@ (8004c9c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd6:	6852      	ldr	r2, [r2, #4]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	3301      	adds	r3, #1
 8004be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004be4:	f3bf 8f5f 	dmb	sy
}
 8004be8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f47f af78 	bne.w	8004af0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e005      	b.n	8004c20 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c34:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004c36:	f3bf 8f5f 	dmb	sy
}
 8004c3a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c50:	3304      	adds	r3, #4
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c5c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c62:	613b      	str	r3, [r7, #16]
  return(result);
 8004c64:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	2301      	movs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f383 8810 	msr	PRIMASK, r3
}
 8004c72:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	4413      	add	r3, r2
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f383 8810 	msr	PRIMASK, r3
}
 8004c8c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3744      	adds	r7, #68	@ 0x44
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	ffffe000 	.word	0xffffe000

08004ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	@ 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	e175      	b.n	8004fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	f040 8164 	bne.w	8004fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d005      	beq.n	8004cf6 <HAL_GPIO_Init+0x56>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d130      	bne.n	8004d58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	2203      	movs	r2, #3
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 0201 	and.w	r2, r3, #1
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d017      	beq.n	8004d94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d123      	bne.n	8004de8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	08da      	lsrs	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3208      	adds	r2, #8
 8004da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	220f      	movs	r2, #15
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	08da      	lsrs	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3208      	adds	r2, #8
 8004de2:	69b9      	ldr	r1, [r7, #24]
 8004de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	2203      	movs	r2, #3
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0203 	and.w	r2, r3, #3
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80be 	beq.w	8004fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2a:	4b66      	ldr	r3, [pc, #408]	@ (8004fc4 <HAL_GPIO_Init+0x324>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	4a65      	ldr	r2, [pc, #404]	@ (8004fc4 <HAL_GPIO_Init+0x324>)
 8004e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e36:	4b63      	ldr	r3, [pc, #396]	@ (8004fc4 <HAL_GPIO_Init+0x324>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e42:	4a61      	ldr	r2, [pc, #388]	@ (8004fc8 <HAL_GPIO_Init+0x328>)
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	089b      	lsrs	r3, r3, #2
 8004e48:	3302      	adds	r3, #2
 8004e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	220f      	movs	r2, #15
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a58      	ldr	r2, [pc, #352]	@ (8004fcc <HAL_GPIO_Init+0x32c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d037      	beq.n	8004ede <HAL_GPIO_Init+0x23e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a57      	ldr	r2, [pc, #348]	@ (8004fd0 <HAL_GPIO_Init+0x330>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d031      	beq.n	8004eda <HAL_GPIO_Init+0x23a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a56      	ldr	r2, [pc, #344]	@ (8004fd4 <HAL_GPIO_Init+0x334>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02b      	beq.n	8004ed6 <HAL_GPIO_Init+0x236>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a55      	ldr	r2, [pc, #340]	@ (8004fd8 <HAL_GPIO_Init+0x338>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d025      	beq.n	8004ed2 <HAL_GPIO_Init+0x232>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a54      	ldr	r2, [pc, #336]	@ (8004fdc <HAL_GPIO_Init+0x33c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01f      	beq.n	8004ece <HAL_GPIO_Init+0x22e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a53      	ldr	r2, [pc, #332]	@ (8004fe0 <HAL_GPIO_Init+0x340>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d019      	beq.n	8004eca <HAL_GPIO_Init+0x22a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a52      	ldr	r2, [pc, #328]	@ (8004fe4 <HAL_GPIO_Init+0x344>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_GPIO_Init+0x226>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a51      	ldr	r2, [pc, #324]	@ (8004fe8 <HAL_GPIO_Init+0x348>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_GPIO_Init+0x222>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a50      	ldr	r2, [pc, #320]	@ (8004fec <HAL_GPIO_Init+0x34c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <HAL_GPIO_Init+0x21e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8004ff0 <HAL_GPIO_Init+0x350>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_GPIO_Init+0x21a>
 8004eb6:	2309      	movs	r3, #9
 8004eb8:	e012      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004eba:	230a      	movs	r3, #10
 8004ebc:	e010      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	e00e      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004ec2:	2307      	movs	r3, #7
 8004ec4:	e00c      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004ec6:	2306      	movs	r3, #6
 8004ec8:	e00a      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004eca:	2305      	movs	r3, #5
 8004ecc:	e008      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004ece:	2304      	movs	r3, #4
 8004ed0:	e006      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e004      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e002      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_GPIO_Init+0x240>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	f002 0203 	and.w	r2, r2, #3
 8004ee6:	0092      	lsls	r2, r2, #2
 8004ee8:	4093      	lsls	r3, r2
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ef0:	4935      	ldr	r1, [pc, #212]	@ (8004fc8 <HAL_GPIO_Init+0x328>)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	089b      	lsrs	r3, r3, #2
 8004ef6:	3302      	adds	r3, #2
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004efe:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f22:	4a34      	ldr	r2, [pc, #208]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f28:	4b32      	ldr	r3, [pc, #200]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f4c:	4a29      	ldr	r2, [pc, #164]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f52:	4b28      	ldr	r3, [pc, #160]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f76:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fa0:	4a14      	ldr	r2, [pc, #80]	@ (8004ff4 <HAL_GPIO_Init+0x354>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	f67f ae86 	bls.w	8004cc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3724      	adds	r7, #36	@ 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40013800 	.word	0x40013800
 8004fcc:	40020000 	.word	0x40020000
 8004fd0:	40020400 	.word	0x40020400
 8004fd4:	40020800 	.word	0x40020800
 8004fd8:	40020c00 	.word	0x40020c00
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40021400 	.word	0x40021400
 8004fe4:	40021800 	.word	0x40021800
 8004fe8:	40021c00 	.word	0x40021c00
 8004fec:	40022000 	.word	0x40022000
 8004ff0:	40022400 	.word	0x40022400
 8004ff4:	40013c00 	.word	0x40013c00

08004ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e08b      	b.n	8005122 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fb fd38 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	@ 0x24
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d107      	bne.n	8005072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	e006      	b.n	8005080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800507e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d108      	bne.n	800509a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	e007      	b.n	80050aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6859      	ldr	r1, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_I2C_Init+0x134>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69d9      	ldr	r1, [r3, #28]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	02008000 	.word	0x02008000

08005130 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	461a      	mov	r2, r3
 800513c:	460b      	mov	r3, r1
 800513e:	817b      	strh	r3, [r7, #10]
 8005140:	4613      	mov	r3, r2
 8005142:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	f040 80ef 	bne.w	8005334 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005164:	d101      	bne.n	800516a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005166:	2302      	movs	r3, #2
 8005168:	e0e5      	b.n	8005336 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005174:	2302      	movs	r3, #2
 8005176:	e0de      	b.n	8005336 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2221      	movs	r2, #33	@ 0x21
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2210      	movs	r2, #16
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	893a      	ldrh	r2, [r7, #8]
 80051a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a66      	ldr	r2, [pc, #408]	@ (8005340 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80051a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a66      	ldr	r2, [pc, #408]	@ (8005344 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80051ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2bff      	cmp	r3, #255	@ 0xff
 80051b6:	d906      	bls.n	80051c6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	22ff      	movs	r2, #255	@ 0xff
 80051bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	e007      	b.n	80051d6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051d4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01a      	beq.n	8005214 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d074      	beq.n	8005306 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d022      	beq.n	800526a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	4a47      	ldr	r2, [pc, #284]	@ (8005348 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800522a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	4a46      	ldr	r2, [pc, #280]	@ (800534c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005232:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	2200      	movs	r2, #0
 800523a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	2200      	movs	r2, #0
 8005242:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005254:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800525a:	f7fd ff5d 	bl	8003118 <HAL_DMA_Start_IT>
 800525e:	4603      	mov	r3, r0
 8005260:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d13a      	bne.n	80052de <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005268:	e013      	b.n	8005292 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e051      	b.n	8005336 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005296:	b2db      	uxtb	r3, r3
 8005298:	3301      	adds	r3, #1
 800529a:	b2da      	uxtb	r2, r3
 800529c:	8979      	ldrh	r1, [r7, #10]
 800529e:	4b2c      	ldr	r3, [pc, #176]	@ (8005350 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f001 ff3f 	bl	8007128 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80052c4:	2110      	movs	r1, #16
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f001 ff60 	bl	800718c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e028      	b.n	8005330 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f2:	f043 0210 	orr.w	r2, r3, #16
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e017      	b.n	8005336 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800530a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	8979      	ldrh	r1, [r7, #10]
 8005312:	4b0f      	ldr	r3, [pc, #60]	@ (8005350 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f001 ff04 	bl	8007128 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005328:	2101      	movs	r1, #1
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 ff2e 	bl	800718c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	ffff0000 	.word	0xffff0000
 8005344:	08005e7f 	.word	0x08005e7f
 8005348:	08006eab 	.word	0x08006eab
 800534c:	08007079 	.word	0x08007079
 8005350:	80002000 	.word	0x80002000
 8005354:	080059f3 	.word	0x080059f3

08005358 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	461a      	mov	r2, r3
 8005364:	460b      	mov	r3, r1
 8005366:	817b      	strh	r3, [r7, #10]
 8005368:	4613      	mov	r3, r2
 800536a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b20      	cmp	r3, #32
 8005376:	f040 80cd 	bne.w	8005514 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005388:	d101      	bne.n	800538e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
 800538c:	e0c3      	b.n	8005516 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_I2C_Master_Receive_DMA+0x44>
 8005398:	2302      	movs	r3, #2
 800539a:	e0bc      	b.n	8005516 <HAL_I2C_Master_Receive_DMA+0x1be>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2222      	movs	r2, #34	@ 0x22
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2210      	movs	r2, #16
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	893a      	ldrh	r2, [r7, #8]
 80053c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a55      	ldr	r2, [pc, #340]	@ (8005520 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80053ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a55      	ldr	r2, [pc, #340]	@ (8005524 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80053d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2bff      	cmp	r3, #255	@ 0xff
 80053da:	d906      	bls.n	80053ea <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80053e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e007      	b.n	80053fa <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80053f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d070      	beq.n	80054e4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d020      	beq.n	800544c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540e:	4a46      	ldr	r2, [pc, #280]	@ (8005528 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005410:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	4a45      	ldr	r2, [pc, #276]	@ (800552c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005418:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	2200      	movs	r2, #0
 8005428:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3324      	adds	r3, #36	@ 0x24
 8005434:	4619      	mov	r1, r3
 8005436:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800543c:	f7fd fe6c 	bl	8003118 <HAL_DMA_Start_IT>
 8005440:	4603      	mov	r3, r0
 8005442:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d138      	bne.n	80054bc <HAL_I2C_Master_Receive_DMA+0x164>
 800544a:	e013      	b.n	8005474 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005460:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e050      	b.n	8005516 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005478:	b2da      	uxtb	r2, r3
 800547a:	8979      	ldrh	r1, [r7, #10]
 800547c:	4b2c      	ldr	r3, [pc, #176]	@ (8005530 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f001 fe50 	bl	8007128 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80054a2:	2110      	movs	r1, #16
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f001 fe71 	bl	800718c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e029      	b.n	8005510 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	f043 0210 	orr.w	r2, r3, #16
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e018      	b.n	8005516 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80054e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	8979      	ldrh	r1, [r7, #10]
 80054f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005530 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f001 fe14 	bl	8007128 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005508:	2102      	movs	r1, #2
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f001 fe3e 	bl	800718c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e000      	b.n	8005516 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005514:	2302      	movs	r3, #2
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	ffff0000 	.word	0xffff0000
 8005524:	08005e7f 	.word	0x08005e7f
 8005528:	08006f81 	.word	0x08006f81
 800552c:	08007079 	.word	0x08007079
 8005530:	80002400 	.word	0x80002400
 8005534:	080059f3 	.word	0x080059f3

08005538 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b20      	cmp	r3, #32
 8005550:	f040 80d1 	bne.w	80056f6 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0c5      	b.n	80056f8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005576:	2302      	movs	r3, #2
 8005578:	e0be      	b.n	80056f8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2221      	movs	r2, #33	@ 0x21
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a53      	ldr	r2, [pc, #332]	@ (8005700 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80055b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a53      	ldr	r2, [pc, #332]	@ (8005704 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80055b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c2:	d117      	bne.n	80055f4 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d068      	beq.n	80056d0 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005602:	2b00      	cmp	r3, #0
 8005604:	d022      	beq.n	800564c <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	4a3f      	ldr	r2, [pc, #252]	@ (8005708 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 800560c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	4a3e      	ldr	r2, [pc, #248]	@ (800570c <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005614:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	2200      	movs	r2, #0
 800561c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005622:	2200      	movs	r2, #0
 8005624:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800562e:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005636:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800563c:	f7fd fd6c 	bl	8003118 <HAL_DMA_Start_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d12e      	bne.n	80056a8 <HAL_I2C_Slave_Transmit_DMA+0x170>
 800564a:	e013      	b.n	8005674 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2228      	movs	r2, #40	@ 0x28
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005660:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e041      	b.n	80056f8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005682:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800568c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f001 fd7b 	bl	800718c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e024      	b.n	80056f2 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2228      	movs	r2, #40	@ 0x28
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056bc:	f043 0210 	orr.w	r2, r3, #16
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e013      	b.n	80056f8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056de:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f001 fd4d 	bl	800718c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	ffff0000 	.word	0xffff0000
 8005704:	08006321 	.word	0x08006321
 8005708:	08006f41 	.word	0x08006f41
 800570c:	08007079 	.word	0x08007079

08005710 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b20      	cmp	r3, #32
 8005728:	f040 809b 	bne.w	8005862 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e08f      	b.n	8005864 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_I2C_Slave_Receive_DMA+0x42>
 800574e:	2302      	movs	r3, #2
 8005750:	e088      	b.n	8005864 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2222      	movs	r2, #34	@ 0x22
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4a38      	ldr	r2, [pc, #224]	@ (800586c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 800578a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a38      	ldr	r2, [pc, #224]	@ (8005870 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005790:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d020      	beq.n	80057dc <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	4a35      	ldr	r2, [pc, #212]	@ (8005874 <HAL_I2C_Slave_Receive_DMA+0x164>)
 80057a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	4a34      	ldr	r2, [pc, #208]	@ (8005878 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80057a8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	2200      	movs	r2, #0
 80057b0:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	2200      	movs	r2, #0
 80057b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3324      	adds	r3, #36	@ 0x24
 80057c4:	4619      	mov	r1, r3
 80057c6:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057cc:	f7fd fca4 	bl	8003118 <HAL_DMA_Start_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d12f      	bne.n	800583a <HAL_I2C_Slave_Receive_DMA+0x12a>
 80057da:	e013      	b.n	8005804 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2228      	movs	r2, #40	@ 0x28
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e02f      	b.n	8005864 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005812:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800581c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f001 fcb3 	bl	800718c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005834:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	e014      	b.n	8005864 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2228      	movs	r2, #40	@ 0x28
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f043 0210 	orr.w	r2, r3, #16
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	ffff0000 	.word	0xffff0000
 8005870:	08006321 	.word	0x08006321
 8005874:	08007033 	.word	0x08007033
 8005878:	08007079 	.word	0x08007079

0800587c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
  }
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e4:	f043 0201 	orr.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	0a9b      	lsrs	r3, r3, #10
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	09db      	lsrs	r3, r3, #7
 8005906:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f043 0208 	orr.w	r2, r3, #8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005922:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	0a5b      	lsrs	r3, r3, #9
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d010      	beq.n	8005952 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	09db      	lsrs	r3, r3, #7
 8005934:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005940:	f043 0202 	orr.w	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005950:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005956:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 030b 	and.w	r3, r3, #11
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f965 	bl	8006c34 <I2C_ITError>
  }
}
 800596a:	bf00      	nop
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	70fb      	strb	r3, [r7, #3]
 800597e:	4613      	mov	r3, r2
 8005980:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af02      	add	r7, sp, #8
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <I2C_Master_ISR_IT+0x1e>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e12e      	b.n	8005c6e <I2C_Master_ISR_IT+0x27c>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2210      	movs	r2, #16
 8005a36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3c:	f043 0204 	orr.w	r2, r3, #4
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f001 fa0c 	bl	8006e62 <I2C_Flush_TXDR>
 8005a4a:	e0fb      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d023      	beq.n	8005aa0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01d      	beq.n	8005aa0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0304 	bic.w	r3, r3, #4
 8005a6a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a9e:	e0d1      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d12a      	bne.n	8005b02 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d024      	beq.n	8005b02 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01e      	beq.n	8005b02 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80ba 	beq.w	8005c44 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005b00:	e0a0      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	09db      	lsrs	r3, r3, #7
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d06b      	beq.n	8005be6 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d065      	beq.n	8005be6 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d04e      	beq.n	8005bc2 <I2C_Master_ISR_IT+0x1d0>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d14a      	bne.n	8005bc2 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b38:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2bff      	cmp	r3, #255	@ 0xff
 8005b42:	d91c      	bls.n	8005b7e <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	0c1b      	lsrs	r3, r3, #16
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d103      	bne.n	8005b60 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b5e:	e002      	b.n	8005b66 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	22ff      	movs	r2, #255	@ 0xff
 8005b64:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	8a79      	ldrh	r1, [r7, #18]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f001 fad6 	bl	8007128 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b7c:	e032      	b.n	8005be4 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b90:	d00b      	beq.n	8005baa <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b96:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b9c:	8a79      	ldrh	r1, [r7, #18]
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	9000      	str	r0, [sp, #0]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f001 fac0 	bl	8007128 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ba8:	e01c      	b.n	8005be4 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	8a79      	ldrh	r1, [r7, #18]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f001 fab4 	bl	8007128 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc0:	e010      	b.n	8005be4 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bd0:	d003      	beq.n	8005bda <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fd09 	bl	80065ea <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bd8:	e034      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bda:	2140      	movs	r1, #64	@ 0x40
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f001 f829 	bl	8006c34 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005be2:	e02f      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
 8005be4:	e02e      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d028      	beq.n	8005c44 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d022      	beq.n	8005c44 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d119      	bne.n	8005c3c <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c16:	d015      	beq.n	8005c44 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c20:	d108      	bne.n	8005c34 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	e007      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fcd8 	bl	80065ea <I2C_ITMasterSeqCplt>
 8005c3a:	e003      	b.n	8005c44 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c3c:	2140      	movs	r1, #64	@ 0x40
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fff8 	bl	8006c34 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005c5c:	6979      	ldr	r1, [r7, #20]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fd5e 	bl	8006720 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <I2C_Slave_ISR_IT+0x24>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e0ed      	b.n	8005e76 <I2C_Slave_ISR_IT+0x200>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d004      	beq.n	8005cc4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005cba:	6939      	ldr	r1, [r7, #16]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fdf9 	bl	80068b4 <I2C_ITSlaveCplt>
 8005cc2:	e0d3      	b.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	091b      	lsrs	r3, r3, #4
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d04d      	beq.n	8005d6c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	091b      	lsrs	r3, r3, #4
 8005cd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d047      	beq.n	8005d6c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d128      	bne.n	8005d38 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b28      	cmp	r3, #40	@ 0x28
 8005cf0:	d108      	bne.n	8005d04 <I2C_Slave_ISR_IT+0x8e>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf8:	d104      	bne.n	8005d04 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cfa:	6939      	ldr	r1, [r7, #16]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 ff43 	bl	8006b88 <I2C_ITListenCplt>
 8005d02:	e032      	b.n	8005d6a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b29      	cmp	r3, #41	@ 0x29
 8005d0e:	d10e      	bne.n	8005d2e <I2C_Slave_ISR_IT+0xb8>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d16:	d00a      	beq.n	8005d2e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f001 f89e 	bl	8006e62 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fc9c 	bl	8006664 <I2C_ITSlaveSeqCplt>
 8005d2c:	e01d      	b.n	8005d6a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2210      	movs	r2, #16
 8005d34:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d36:	e096      	b.n	8005e66 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	f043 0204 	orr.w	r2, r3, #4
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <I2C_Slave_ISR_IT+0xe6>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d58:	f040 8085 	bne.w	8005e66 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d60:	4619      	mov	r1, r3
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 ff66 	bl	8006c34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d68:	e07d      	b.n	8005e66 <I2C_Slave_ISR_IT+0x1f0>
 8005d6a:	e07c      	b.n	8005e66 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d030      	beq.n	8005dda <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	089b      	lsrs	r3, r3, #2
 8005d7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d02a      	beq.n	8005dda <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d14f      	bne.n	8005e6a <I2C_Slave_ISR_IT+0x1f4>
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dd0:	d04b      	beq.n	8005e6a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fc46 	bl	8006664 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005dd8:	e047      	b.n	8005e6a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	08db      	lsrs	r3, r3, #3
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005df2:	6939      	ldr	r1, [r7, #16]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fb74 	bl	80064e2 <I2C_ITAddrCplt>
 8005dfa:	e037      	b.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d031      	beq.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02b      	beq.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d018      	beq.n	8005e50 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e4e:	e00d      	b.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e56:	d002      	beq.n	8005e5e <I2C_Slave_ISR_IT+0x1e8>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fc00 	bl	8006664 <I2C_ITSlaveSeqCplt>
 8005e64:	e002      	b.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005e6a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b088      	sub	sp, #32
 8005e82:	af02      	add	r7, sp, #8
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <I2C_Master_ISR_DMA+0x1a>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e0f0      	b.n	800607a <I2C_Master_ISR_DMA+0x1fc>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	091b      	lsrs	r3, r3, #4
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	091b      	lsrs	r3, r3, #4
 8005eb0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d011      	beq.n	8005edc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec4:	f043 0204 	orr.w	r2, r3, #4
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ecc:	2120      	movs	r1, #32
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f001 f95c 	bl	800718c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 ffc4 	bl	8006e62 <I2C_Flush_TXDR>
 8005eda:	e0c9      	b.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8081 	beq.w	8005fec <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	099b      	lsrs	r3, r3, #6
 8005eee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d07a      	beq.n	8005fec <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f04:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d05c      	beq.n	8005fca <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f1c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2bff      	cmp	r3, #255	@ 0xff
 8005f26:	d914      	bls.n	8005f52 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d103      	bne.n	8005f44 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f42:	e002      	b.n	8005f4a <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	22ff      	movs	r2, #255	@ 0xff
 8005f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005f4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e010      	b.n	8005f74 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f64:	d003      	beq.n	8005f6e <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e002      	b.n	8005f74 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f72:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	8a79      	ldrh	r1, [r7, #18]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 f8d0 	bl	8007128 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b22      	cmp	r3, #34	@ 0x22
 8005fa4:	d108      	bne.n	8005fb8 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fb4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fb6:	e05b      	b.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fc8:	e052      	b.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd8:	d003      	beq.n	8005fe2 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fb05 	bl	80065ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005fe0:	e046      	b.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fe2:	2140      	movs	r1, #64	@ 0x40
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fe25 	bl	8006c34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005fea:	e041      	b.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	099b      	lsrs	r3, r3, #6
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d029      	beq.n	800604c <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	099b      	lsrs	r3, r3, #6
 8005ffc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006000:	2b00      	cmp	r3, #0
 8006002:	d023      	beq.n	800604c <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d119      	bne.n	8006042 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800601c:	d027      	beq.n	800606e <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006022:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006026:	d108      	bne.n	800603a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006036:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006038:	e019      	b.n	800606e <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fad5 	bl	80065ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006040:	e015      	b.n	800606e <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006042:	2140      	movs	r1, #64	@ 0x40
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fdf5 	bl	8006c34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800604a:	e010      	b.n	800606e <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fb5a 	bl	8006720 <I2C_ITMasterCplt>
 800606c:	e000      	b.n	8006070 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800606e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006090:	4b94      	ldr	r3, [pc, #592]	@ (80062e4 <I2C_Mem_ISR_DMA+0x260>)
 8006092:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <I2C_Mem_ISR_DMA+0x1e>
 800609e:	2302      	movs	r3, #2
 80060a0:	e139      	b.n	8006316 <I2C_Mem_ISR_DMA+0x292>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d017      	beq.n	80060e6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2210      	movs	r2, #16
 80060c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ce:	f043 0204 	orr.w	r2, r3, #4
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80060d6:	2120      	movs	r1, #32
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f001 f857 	bl	800718c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 febf 	bl	8006e62 <I2C_Flush_TXDR>
 80060e4:	e112      	b.n	800630c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00f      	beq.n	8006112 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006106:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800610e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006110:	e0fc      	b.n	800630c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	09db      	lsrs	r3, r3, #7
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d06e      	beq.n	80061fc <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	099b      	lsrs	r3, r3, #6
 8006122:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006126:	2b00      	cmp	r3, #0
 8006128:	d068      	beq.n	80061fc <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800612a:	2101      	movs	r1, #1
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f001 f8b1 	bl	8007294 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006132:	2110      	movs	r1, #16
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f001 f829 	bl	800718c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d056      	beq.n	80061f2 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2bff      	cmp	r3, #255	@ 0xff
 800614c:	d91e      	bls.n	800618c <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d103      	bne.n	800616a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006168:	e002      	b.n	8006170 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	22ff      	movs	r2, #255	@ 0xff
 800616e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006174:	b299      	uxth	r1, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617a:	b2da      	uxtb	r2, r3
 800617c:	2300      	movs	r3, #0
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 ffcf 	bl	8007128 <I2C_TransferConfig>
 800618a:	e011      	b.n	80061b0 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619a:	b299      	uxth	r1, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	2300      	movs	r3, #0
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 ffbc 	bl	8007128 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b22      	cmp	r3, #34	@ 0x22
 80061cc:	d108      	bne.n	80061e0 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061de:	e095      	b.n	800630c <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061f0:	e08c      	b.n	800630c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061f2:	2140      	movs	r1, #64	@ 0x40
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fd1d 	bl	8006c34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80061fa:	e087      	b.n	800630c <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	099b      	lsrs	r3, r3, #6
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d071      	beq.n	80062ec <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	099b      	lsrs	r3, r3, #6
 800620c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006210:	2b00      	cmp	r3, #0
 8006212:	d06b      	beq.n	80062ec <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006214:	2101      	movs	r1, #1
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 f83c 	bl	8007294 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800621c:	2110      	movs	r1, #16
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 ffb4 	bl	800718c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b22      	cmp	r3, #34	@ 0x22
 800622e:	d101      	bne.n	8006234 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006230:	4b2d      	ldr	r3, [pc, #180]	@ (80062e8 <I2C_Mem_ISR_DMA+0x264>)
 8006232:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2bff      	cmp	r3, #255	@ 0xff
 800623c:	d91e      	bls.n	800627c <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	0c1b      	lsrs	r3, r3, #16
 8006246:	b2db      	uxtb	r3, r3
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d103      	bne.n	800625a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006258:	e002      	b.n	8006260 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	22ff      	movs	r2, #255	@ 0xff
 800625e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006264:	b299      	uxth	r1, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626a:	b2da      	uxtb	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 ff57 	bl	8007128 <I2C_TransferConfig>
 800627a:	e011      	b.n	80062a0 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628a:	b299      	uxth	r1, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006290:	b2da      	uxtb	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 ff44 	bl	8007128 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b22      	cmp	r3, #34	@ 0x22
 80062bc:	d108      	bne.n	80062d0 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062cc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062ce:	e01d      	b.n	800630c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062de:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062e0:	e014      	b.n	800630c <I2C_Mem_ISR_DMA+0x288>
 80062e2:	bf00      	nop
 80062e4:	80002000 	.word	0x80002000
 80062e8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fa0a 	bl	8006720 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop

08006320 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <I2C_Slave_ISR_DMA+0x24>
 8006340:	2302      	movs	r3, #2
 8006342:	e0ca      	b.n	80064da <I2C_Slave_ISR_DMA+0x1ba>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 faa4 	bl	80068b4 <I2C_ITSlaveCplt>
 800636c:	e0b0      	b.n	80064d0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 809a 	beq.w	80064b0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	091b      	lsrs	r3, r3, #4
 8006380:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8093 	beq.w	80064b0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	0b9b      	lsrs	r3, r3, #14
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d105      	bne.n	80063a2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0bdb      	lsrs	r3, r3, #15
 800639a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d07f      	beq.n	80064a2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	0bdb      	lsrs	r3, r3, #15
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00d      	beq.n	80063ea <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	0b9b      	lsrs	r3, r3, #14
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80063e6:	2301      	movs	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d128      	bne.n	8006442 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b28      	cmp	r3, #40	@ 0x28
 80063fa:	d108      	bne.n	800640e <I2C_Slave_ISR_DMA+0xee>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006402:	d104      	bne.n	800640e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fbbe 	bl	8006b88 <I2C_ITListenCplt>
 800640c:	e048      	b.n	80064a0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b29      	cmp	r3, #41	@ 0x29
 8006418:	d10e      	bne.n	8006438 <I2C_Slave_ISR_DMA+0x118>
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006420:	d00a      	beq.n	8006438 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2210      	movs	r2, #16
 8006428:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fd19 	bl	8006e62 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f917 	bl	8006664 <I2C_ITSlaveSeqCplt>
 8006436:	e033      	b.n	80064a0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2210      	movs	r2, #16
 800643e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006440:	e034      	b.n	80064ac <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2210      	movs	r2, #16
 8006448:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f043 0204 	orr.w	r2, r3, #4
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800645c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <I2C_Slave_ISR_DMA+0x14c>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800646a:	d11f      	bne.n	80064ac <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b21      	cmp	r3, #33	@ 0x21
 8006470:	d002      	beq.n	8006478 <I2C_Slave_ISR_DMA+0x158>
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	2b29      	cmp	r3, #41	@ 0x29
 8006476:	d103      	bne.n	8006480 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2221      	movs	r2, #33	@ 0x21
 800647c:	631a      	str	r2, [r3, #48]	@ 0x30
 800647e:	e008      	b.n	8006492 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	2b22      	cmp	r3, #34	@ 0x22
 8006484:	d002      	beq.n	800648c <I2C_Slave_ISR_DMA+0x16c>
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	2b2a      	cmp	r3, #42	@ 0x2a
 800648a:	d102      	bne.n	8006492 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2222      	movs	r2, #34	@ 0x22
 8006490:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006496:	4619      	mov	r1, r3
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fbcb 	bl	8006c34 <I2C_ITError>
      if (treatdmanack == 1U)
 800649e:	e005      	b.n	80064ac <I2C_Slave_ISR_DMA+0x18c>
 80064a0:	e004      	b.n	80064ac <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2210      	movs	r2, #16
 80064a8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064aa:	e011      	b.n	80064d0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80064ac:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064ae:	e00f      	b.n	80064d0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f809 	bl	80064e2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064f8:	2b28      	cmp	r3, #40	@ 0x28
 80064fa:	d16a      	bne.n	80065d2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	0c1b      	lsrs	r3, r3, #16
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	0c1b      	lsrs	r3, r3, #16
 8006514:	b29b      	uxth	r3, r3
 8006516:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800651a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006528:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006536:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d138      	bne.n	80065b2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006540:	897b      	ldrh	r3, [r7, #10]
 8006542:	09db      	lsrs	r3, r3, #7
 8006544:	b29a      	uxth	r2, r3
 8006546:	89bb      	ldrh	r3, [r7, #12]
 8006548:	4053      	eors	r3, r2
 800654a:	b29b      	uxth	r3, r3
 800654c:	f003 0306 	and.w	r3, r3, #6
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11c      	bne.n	800658e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006554:	897b      	ldrh	r3, [r7, #10]
 8006556:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006566:	2b02      	cmp	r3, #2
 8006568:	d13b      	bne.n	80065e2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2208      	movs	r2, #8
 8006576:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006580:	89ba      	ldrh	r2, [r7, #12]
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff f9f3 	bl	8005972 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800658c:	e029      	b.n	80065e2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800658e:	893b      	ldrh	r3, [r7, #8]
 8006590:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006592:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fe7c 	bl	8007294 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065a4:	89ba      	ldrh	r2, [r7, #12]
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff f9e1 	bl	8005972 <HAL_I2C_AddrCallback>
}
 80065b0:	e017      	b.n	80065e2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fe6c 	bl	8007294 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065c4:	89ba      	ldrh	r2, [r7, #12]
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff f9d1 	bl	8005972 <HAL_I2C_AddrCallback>
}
 80065d0:	e007      	b.n	80065e2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2208      	movs	r2, #8
 80065d8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b21      	cmp	r3, #33	@ 0x21
 8006604:	d115      	bne.n	8006632 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2211      	movs	r2, #17
 8006612:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800661a:	2101      	movs	r1, #1
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fe39 	bl	8007294 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f010 fd46 	bl	80170bc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006630:	e014      	b.n	800665c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2212      	movs	r2, #18
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006646:	2102      	movs	r1, #2
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fe23 	bl	8007294 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f010 fd46 	bl	80170e8 <HAL_I2C_MasterRxCpltCallback>
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	0b9b      	lsrs	r3, r3, #14
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e00d      	b.n	80066b6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	0bdb      	lsrs	r3, r3, #15
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b29      	cmp	r3, #41	@ 0x29
 80066c0:	d112      	bne.n	80066e8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2228      	movs	r2, #40	@ 0x28
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2221      	movs	r2, #33	@ 0x21
 80066ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066d0:	2101      	movs	r1, #1
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fdde 	bl	8007294 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f010 fd17 	bl	8017114 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80066e6:	e017      	b.n	8006718 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f2:	d111      	bne.n	8006718 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2228      	movs	r2, #40	@ 0x28
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2222      	movs	r2, #34	@ 0x22
 8006700:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006702:	2102      	movs	r1, #2
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fdc5 	bl	8007294 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f010 fd14 	bl	8017140 <HAL_I2C_SlaveRxCpltCallback>
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2220      	movs	r2, #32
 8006734:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b21      	cmp	r3, #33	@ 0x21
 8006740:	d107      	bne.n	8006752 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006742:	2101      	movs	r1, #1
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fda5 	bl	8007294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2211      	movs	r2, #17
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006750:	e00c      	b.n	800676c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b22      	cmp	r3, #34	@ 0x22
 800675c:	d106      	bne.n	800676c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800675e:	2102      	movs	r1, #2
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fd97 	bl	8007294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2212      	movs	r2, #18
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6859      	ldr	r1, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b4d      	ldr	r3, [pc, #308]	@ (80068ac <I2C_ITMasterCplt+0x18c>)
 8006778:	400b      	ands	r3, r1
 800677a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a4a      	ldr	r2, [pc, #296]	@ (80068b0 <I2C_ITMasterCplt+0x190>)
 8006786:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d009      	beq.n	80067a8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2210      	movs	r2, #16
 800679a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a0:	f043 0204 	orr.w	r2, r3, #4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b60      	cmp	r3, #96	@ 0x60
 80067b2:	d10b      	bne.n	80067cc <I2C_ITMasterCplt+0xac>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	089b      	lsrs	r3, r3, #2
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80067ca:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fb48 	bl	8006e62 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b60      	cmp	r3, #96	@ 0x60
 80067e2:	d002      	beq.n	80067ea <I2C_ITMasterCplt+0xca>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d006      	beq.n	80067f8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa1f 	bl	8006c34 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067f6:	e054      	b.n	80068a2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b21      	cmp	r3, #33	@ 0x21
 8006802:	d124      	bne.n	800684e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b40      	cmp	r3, #64	@ 0x40
 800681c:	d10b      	bne.n	8006836 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff f8b7 	bl	80059a2 <HAL_I2C_MemTxCpltCallback>
}
 8006834:	e035      	b.n	80068a2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f010 fc38 	bl	80170bc <HAL_I2C_MasterTxCpltCallback>
}
 800684c:	e029      	b.n	80068a2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b22      	cmp	r3, #34	@ 0x22
 8006858:	d123      	bne.n	80068a2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b40      	cmp	r3, #64	@ 0x40
 8006872:	d10b      	bne.n	800688c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff f896 	bl	80059b6 <HAL_I2C_MemRxCpltCallback>
}
 800688a:	e00a      	b.n	80068a2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f010 fc23 	bl	80170e8 <HAL_I2C_MasterRxCpltCallback>
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	fe00e800 	.word	0xfe00e800
 80068b0:	ffff0000 	.word	0xffff0000

080068b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2220      	movs	r2, #32
 80068de:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	2b21      	cmp	r3, #33	@ 0x21
 80068e4:	d002      	beq.n	80068ec <I2C_ITSlaveCplt+0x38>
 80068e6:	7afb      	ldrb	r3, [r7, #11]
 80068e8:	2b29      	cmp	r3, #41	@ 0x29
 80068ea:	d108      	bne.n	80068fe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80068ec:	f248 0101 	movw	r1, #32769	@ 0x8001
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fccf 	bl	8007294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2221      	movs	r2, #33	@ 0x21
 80068fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80068fc:	e019      	b.n	8006932 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068fe:	7afb      	ldrb	r3, [r7, #11]
 8006900:	2b22      	cmp	r3, #34	@ 0x22
 8006902:	d002      	beq.n	800690a <I2C_ITSlaveCplt+0x56>
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	2b2a      	cmp	r3, #42	@ 0x2a
 8006908:	d108      	bne.n	800691c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800690a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fcc0 	bl	8007294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2222      	movs	r2, #34	@ 0x22
 8006918:	631a      	str	r2, [r3, #48]	@ 0x30
 800691a:	e00a      	b.n	8006932 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	2b28      	cmp	r3, #40	@ 0x28
 8006920:	d107      	bne.n	8006932 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006922:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fcb4 	bl	8007294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006940:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b8c      	ldr	r3, [pc, #560]	@ (8006b80 <I2C_ITSlaveCplt+0x2cc>)
 800694e:	400b      	ands	r3, r1
 8006950:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fa85 	bl	8006e62 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	0b9b      	lsrs	r3, r3, #14
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d013      	beq.n	800698c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006972:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006978:	2b00      	cmp	r3, #0
 800697a:	d020      	beq.n	80069be <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800698a:	e018      	b.n	80069be <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	0bdb      	lsrs	r3, r3, #15
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d012      	beq.n	80069be <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069a6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d006      	beq.n	80069be <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d020      	beq.n	8006a0c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00c      	beq.n	8006a0c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1a:	f043 0204 	orr.w	r2, r3, #4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d04a      	beq.n	8006ac4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d044      	beq.n	8006ac4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d128      	bne.n	8006a96 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b28      	cmp	r3, #40	@ 0x28
 8006a4e:	d108      	bne.n	8006a62 <I2C_ITSlaveCplt+0x1ae>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a56:	d104      	bne.n	8006a62 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a58:	6979      	ldr	r1, [r7, #20]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f894 	bl	8006b88 <I2C_ITListenCplt>
 8006a60:	e030      	b.n	8006ac4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b29      	cmp	r3, #41	@ 0x29
 8006a6c:	d10e      	bne.n	8006a8c <I2C_ITSlaveCplt+0x1d8>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a74:	d00a      	beq.n	8006a8c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9ef 	bl	8006e62 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fded 	bl	8006664 <I2C_ITSlaveSeqCplt>
 8006a8a:	e01b      	b.n	8006ac4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2210      	movs	r2, #16
 8006a92:	61da      	str	r2, [r3, #28]
 8006a94:	e016      	b.n	8006ac4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	f043 0204 	orr.w	r2, r3, #4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <I2C_ITSlaveCplt+0x204>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab6:	d105      	bne.n	8006ac4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8b8 	bl	8006c34 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d010      	beq.n	8006afc <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8a7 	bl	8006c34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b28      	cmp	r3, #40	@ 0x28
 8006af0:	d141      	bne.n	8006b76 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f847 	bl	8006b88 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006afa:	e03c      	b.n	8006b76 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b04:	d014      	beq.n	8006b30 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fdac 	bl	8006664 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006b84 <I2C_ITSlaveCplt+0x2d0>)
 8006b10:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fe ff30 	bl	800598e <HAL_I2C_ListenCpltCallback>
}
 8006b2e:	e022      	b.n	8006b76 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b22      	cmp	r3, #34	@ 0x22
 8006b3a:	d10e      	bne.n	8006b5a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f010 faf4 	bl	8017140 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b58:	e00d      	b.n	8006b76 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f010 facf 	bl	8017114 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	fe00e800 	.word	0xfe00e800
 8006b84:	ffff0000 	.word	0xffff0000

08006b88 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a26      	ldr	r2, [pc, #152]	@ (8006c30 <I2C_ITListenCplt+0xa8>)
 8006b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	089b      	lsrs	r3, r3, #2
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d022      	beq.n	8006c06 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d012      	beq.n	8006c06 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfe:	f043 0204 	orr.w	r2, r3, #4
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c06:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb42 	bl	8007294 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2210      	movs	r2, #16
 8006c16:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fe feb4 	bl	800598e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	ffff0000 	.word	0xffff0000

08006c34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c44:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a6d      	ldr	r2, [pc, #436]	@ (8006e08 <I2C_ITError+0x1d4>)
 8006c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b28      	cmp	r3, #40	@ 0x28
 8006c6a:	d005      	beq.n	8006c78 <I2C_ITError+0x44>
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b29      	cmp	r3, #41	@ 0x29
 8006c70:	d002      	beq.n	8006c78 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c76:	d10b      	bne.n	8006c90 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c78:	2103      	movs	r1, #3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fb0a 	bl	8007294 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2228      	movs	r2, #40	@ 0x28
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a60      	ldr	r2, [pc, #384]	@ (8006e0c <I2C_ITError+0x1d8>)
 8006c8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c8e:	e030      	b.n	8006cf2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c90:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fafd 	bl	8007294 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f8e1 	bl	8006e62 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b60      	cmp	r3, #96	@ 0x60
 8006caa:	d01f      	beq.n	8006cec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d114      	bne.n	8006cec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d109      	bne.n	8006ce4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2210      	movs	r2, #16
 8006cd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cdc:	f043 0204 	orr.w	r2, r3, #4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d039      	beq.n	8006d74 <I2C_ITError+0x140>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b11      	cmp	r3, #17
 8006d04:	d002      	beq.n	8006d0c <I2C_ITError+0xd8>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b21      	cmp	r3, #33	@ 0x21
 8006d0a:	d133      	bne.n	8006d74 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d1a:	d107      	bne.n	8006d2c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d2a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fc fc6d 	bl	8003610 <HAL_DMA_GetState>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d017      	beq.n	8006d6c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d40:	4a33      	ldr	r2, [pc, #204]	@ (8006e10 <I2C_ITError+0x1dc>)
 8006d42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fc fab1 	bl	80032b8 <HAL_DMA_Abort_IT>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d04d      	beq.n	8006df8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d66:	4610      	mov	r0, r2
 8006d68:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d6a:	e045      	b.n	8006df8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f851 	bl	8006e14 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d72:	e041      	b.n	8006df8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d039      	beq.n	8006df0 <I2C_ITError+0x1bc>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b12      	cmp	r3, #18
 8006d80:	d002      	beq.n	8006d88 <I2C_ITError+0x154>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b22      	cmp	r3, #34	@ 0x22
 8006d86:	d133      	bne.n	8006df0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d96:	d107      	bne.n	8006da8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006da6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fc fc2f 	bl	8003610 <HAL_DMA_GetState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d017      	beq.n	8006de8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbc:	4a14      	ldr	r2, [pc, #80]	@ (8006e10 <I2C_ITError+0x1dc>)
 8006dbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fc fa73 	bl	80032b8 <HAL_DMA_Abort_IT>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d011      	beq.n	8006dfc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006de2:	4610      	mov	r0, r2
 8006de4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006de6:	e009      	b.n	8006dfc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f813 	bl	8006e14 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dee:	e005      	b.n	8006dfc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f80f 	bl	8006e14 <I2C_TreatErrorCallback>
  }
}
 8006df6:	e002      	b.n	8006dfe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006df8:	bf00      	nop
 8006dfa:	e000      	b.n	8006dfe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dfc:	bf00      	nop
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	ffff0000 	.word	0xffff0000
 8006e0c:	08005c77 	.word	0x08005c77
 8006e10:	080070ed 	.word	0x080070ed

08006e14 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b60      	cmp	r3, #96	@ 0x60
 8006e26:	d10e      	bne.n	8006e46 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fe fdcd 	bl	80059de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e44:	e009      	b.n	8006e5a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fe fdb8 	bl	80059ca <HAL_I2C_ErrorCallback>
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d103      	bne.n	8006e80 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d007      	beq.n	8006e9e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0201 	orr.w	r2, r2, #1
 8006e9c:	619a      	str	r2, [r3, #24]
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ec6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d104      	bne.n	8006edc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ed2:	2120      	movs	r1, #32
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f959 	bl	800718c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006eda:	e02d      	b.n	8006f38 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2bff      	cmp	r3, #255	@ 0xff
 8006ef2:	d903      	bls.n	8006efc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	22ff      	movs	r2, #255	@ 0xff
 8006ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006efa:	e004      	b.n	8006f06 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3328      	adds	r3, #40	@ 0x28
 8006f16:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f1c:	f7fc f8fc 	bl	8003118 <HAL_DMA_Start_IT>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f26:	2110      	movs	r1, #16
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff fe83 	bl	8006c34 <I2C_ITError>
}
 8006f2e:	e003      	b.n	8006f38 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f30:	2140      	movs	r1, #64	@ 0x40
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f92a 	bl	800718c <I2C_Enable_IRQ>
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f5a:	d002      	beq.n	8006f62 <I2C_DMASlaveTransmitCplt+0x22>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f70:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff fb76 	bl	8006664 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f9c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006fa8:	2120      	movs	r1, #32
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f8ee 	bl	800718c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006fb0:	e03b      	b.n	800702a <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006fba:	441a      	add	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2bff      	cmp	r3, #255	@ 0xff
 8006fc8:	d911      	bls.n	8006fee <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d103      	bne.n	8006fe6 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fe4:	e008      	b.n	8006ff8 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	22ff      	movs	r2, #255	@ 0xff
 8006fea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fec:	e004      	b.n	8006ff8 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3324      	adds	r3, #36	@ 0x24
 8007002:	4619      	mov	r1, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800700e:	f7fc f883 	bl	8003118 <HAL_DMA_Start_IT>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007018:	2110      	movs	r1, #16
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fe0a 	bl	8006c34 <I2C_ITError>
}
 8007020:	e003      	b.n	800702a <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007022:	2140      	movs	r1, #64	@ 0x40
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f8b1 	bl	800718c <I2C_Enable_IRQ>
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10e      	bne.n	8007070 <I2C_DMASlaveReceiveCplt+0x3e>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007058:	d00a      	beq.n	8007070 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007068:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff fafa 	bl	8006664 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800709e:	2301      	movs	r3, #1
 80070a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80070b6:	2301      	movs	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fc fab6 	bl	800362c <HAL_DMA_GetError>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d00e      	beq.n	80070e4 <I2C_DMAError+0x6c>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070da:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80070dc:	2110      	movs	r1, #16
 80070de:	68b8      	ldr	r0, [r7, #8]
 80070e0:	f7ff fda8 	bl	8006c34 <I2C_ITError>
  }
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007106:	2200      	movs	r2, #0
 8007108:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	2200      	movs	r2, #0
 8007118:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff fe7a 	bl	8006e14 <I2C_TreatErrorCallback>
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	817b      	strh	r3, [r7, #10]
 8007136:	4613      	mov	r3, r2
 8007138:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800713a:	897b      	ldrh	r3, [r7, #10]
 800713c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007140:	7a7b      	ldrb	r3, [r7, #9]
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007148:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	4313      	orrs	r3, r2
 8007152:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007156:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	0d5b      	lsrs	r3, r3, #21
 8007162:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007166:	4b08      	ldr	r3, [pc, #32]	@ (8007188 <I2C_TransferConfig+0x60>)
 8007168:	430b      	orrs	r3, r1
 800716a:	43db      	mvns	r3, r3
 800716c:	ea02 0103 	and.w	r1, r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	03ff63ff 	.word	0x03ff63ff

0800718c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a0:	4a39      	ldr	r2, [pc, #228]	@ (8007288 <I2C_Enable_IRQ+0xfc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d032      	beq.n	800720c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071aa:	4a38      	ldr	r2, [pc, #224]	@ (800728c <I2C_Enable_IRQ+0x100>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d02d      	beq.n	800720c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071b4:	4a36      	ldr	r2, [pc, #216]	@ (8007290 <I2C_Enable_IRQ+0x104>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d028      	beq.n	800720c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80071ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da03      	bge.n	80071ca <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80071c8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80071da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80071dc:	887b      	ldrh	r3, [r7, #2]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80071ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071ee:	887b      	ldrh	r3, [r7, #2]
 80071f0:	2b10      	cmp	r3, #16
 80071f2:	d103      	bne.n	80071fc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80071fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80071fc:	887b      	ldrh	r3, [r7, #2]
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d133      	bne.n	800726a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f043 0320 	orr.w	r3, r3, #32
 8007208:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800720a:	e02e      	b.n	800726a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800720c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	da03      	bge.n	800721c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800721a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800721c:	887b      	ldrh	r3, [r7, #2]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800722c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800722e:	887b      	ldrh	r3, [r7, #2]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800723e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007240:	887b      	ldrh	r3, [r7, #2]
 8007242:	2b10      	cmp	r3, #16
 8007244:	d103      	bne.n	800724e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800724c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800724e:	887b      	ldrh	r3, [r7, #2]
 8007250:	2b20      	cmp	r3, #32
 8007252:	d103      	bne.n	800725c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800725a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800725c:	887b      	ldrh	r3, [r7, #2]
 800725e:	2b40      	cmp	r3, #64	@ 0x40
 8007260:	d103      	bne.n	800726a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007268:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6819      	ldr	r1, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	430a      	orrs	r2, r1
 8007278:	601a      	str	r2, [r3, #0]
}
 800727a:	bf00      	nop
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	08005e7f 	.word	0x08005e7f
 800728c:	08006321 	.word	0x08006321
 8007290:	08006085 	.word	0x08006085

08007294 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80072a4:	887b      	ldrh	r3, [r7, #2]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00f      	beq.n	80072ce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80072b4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072c2:	2b28      	cmp	r3, #40	@ 0x28
 80072c4:	d003      	beq.n	80072ce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80072ce:	887b      	ldrh	r3, [r7, #2]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00f      	beq.n	80072f8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80072de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072ec:	2b28      	cmp	r3, #40	@ 0x28
 80072ee:	d003      	beq.n	80072f8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072f6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80072f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	da03      	bge.n	8007308 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007306:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007308:	887b      	ldrh	r3, [r7, #2]
 800730a:	2b10      	cmp	r3, #16
 800730c:	d103      	bne.n	8007316 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007314:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	2b20      	cmp	r3, #32
 800731a:	d103      	bne.n	8007324 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f043 0320 	orr.w	r3, r3, #32
 8007322:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007324:	887b      	ldrh	r3, [r7, #2]
 8007326:	2b40      	cmp	r3, #64	@ 0x40
 8007328:	d103      	bne.n	8007332 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007330:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6819      	ldr	r1, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	43da      	mvns	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	400a      	ands	r2, r1
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b20      	cmp	r3, #32
 8007364:	d138      	bne.n	80073d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007370:	2302      	movs	r3, #2
 8007372:	e032      	b.n	80073da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2224      	movs	r2, #36	@ 0x24
 8007380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0201 	bic.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d139      	bne.n	8007470 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007406:	2302      	movs	r3, #2
 8007408:	e033      	b.n	8007472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2224      	movs	r2, #36	@ 0x24
 8007416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007438:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e000      	b.n	8007472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800748a:	4b23      	ldr	r3, [pc, #140]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x98>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748e:	4a22      	ldr	r2, [pc, #136]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x98>)
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007494:	6413      	str	r3, [r2, #64]	@ 0x40
 8007496:	4b20      	ldr	r3, [pc, #128]	@ (8007518 <HAL_PWREx_EnableOverDrive+0x98>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074a2:	4b1e      	ldr	r3, [pc, #120]	@ (800751c <HAL_PWREx_EnableOverDrive+0x9c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1d      	ldr	r2, [pc, #116]	@ (800751c <HAL_PWREx_EnableOverDrive+0x9c>)
 80074a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074ae:	f7fa fdb3 	bl	8002018 <HAL_GetTick>
 80074b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074b4:	e009      	b.n	80074ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074b6:	f7fa fdaf 	bl	8002018 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074c4:	d901      	bls.n	80074ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e022      	b.n	8007510 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074ca:	4b14      	ldr	r3, [pc, #80]	@ (800751c <HAL_PWREx_EnableOverDrive+0x9c>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d6:	d1ee      	bne.n	80074b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074d8:	4b10      	ldr	r3, [pc, #64]	@ (800751c <HAL_PWREx_EnableOverDrive+0x9c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a0f      	ldr	r2, [pc, #60]	@ (800751c <HAL_PWREx_EnableOverDrive+0x9c>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074e4:	f7fa fd98 	bl	8002018 <HAL_GetTick>
 80074e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074ea:	e009      	b.n	8007500 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074ec:	f7fa fd94 	bl	8002018 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074fa:	d901      	bls.n	8007500 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e007      	b.n	8007510 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007500:	4b06      	ldr	r3, [pc, #24]	@ (800751c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800750c:	d1ee      	bne.n	80074ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	40023800 	.word	0x40023800
 800751c:	40007000 	.word	0x40007000

08007520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e291      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8087 	beq.w	8007652 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007544:	4b96      	ldr	r3, [pc, #600]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 030c 	and.w	r3, r3, #12
 800754c:	2b04      	cmp	r3, #4
 800754e:	d00c      	beq.n	800756a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007550:	4b93      	ldr	r3, [pc, #588]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b08      	cmp	r3, #8
 800755a:	d112      	bne.n	8007582 <HAL_RCC_OscConfig+0x62>
 800755c:	4b90      	ldr	r3, [pc, #576]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007564:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007568:	d10b      	bne.n	8007582 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800756a:	4b8d      	ldr	r3, [pc, #564]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d06c      	beq.n	8007650 <HAL_RCC_OscConfig+0x130>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d168      	bne.n	8007650 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e26b      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800758a:	d106      	bne.n	800759a <HAL_RCC_OscConfig+0x7a>
 800758c:	4b84      	ldr	r3, [pc, #528]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a83      	ldr	r2, [pc, #524]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	e02e      	b.n	80075f8 <HAL_RCC_OscConfig+0xd8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10c      	bne.n	80075bc <HAL_RCC_OscConfig+0x9c>
 80075a2:	4b7f      	ldr	r3, [pc, #508]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a7e      	ldr	r2, [pc, #504]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	4b7c      	ldr	r3, [pc, #496]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7b      	ldr	r2, [pc, #492]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	e01d      	b.n	80075f8 <HAL_RCC_OscConfig+0xd8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075c4:	d10c      	bne.n	80075e0 <HAL_RCC_OscConfig+0xc0>
 80075c6:	4b76      	ldr	r3, [pc, #472]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a75      	ldr	r2, [pc, #468]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	4b73      	ldr	r3, [pc, #460]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a72      	ldr	r2, [pc, #456]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	e00b      	b.n	80075f8 <HAL_RCC_OscConfig+0xd8>
 80075e0:	4b6f      	ldr	r3, [pc, #444]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a6e      	ldr	r2, [pc, #440]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	4b6c      	ldr	r3, [pc, #432]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a6b      	ldr	r2, [pc, #428]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80075f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d013      	beq.n	8007628 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fa fd0a 	bl	8002018 <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007608:	f7fa fd06 	bl	8002018 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b64      	cmp	r3, #100	@ 0x64
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e21f      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800761a:	4b61      	ldr	r3, [pc, #388]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0f0      	beq.n	8007608 <HAL_RCC_OscConfig+0xe8>
 8007626:	e014      	b.n	8007652 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fa fcf6 	bl	8002018 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007630:	f7fa fcf2 	bl	8002018 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b64      	cmp	r3, #100	@ 0x64
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e20b      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007642:	4b57      	ldr	r3, [pc, #348]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1f0      	bne.n	8007630 <HAL_RCC_OscConfig+0x110>
 800764e:	e000      	b.n	8007652 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d069      	beq.n	8007732 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800765e:	4b50      	ldr	r3, [pc, #320]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 030c 	and.w	r3, r3, #12
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00b      	beq.n	8007682 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800766a:	4b4d      	ldr	r3, [pc, #308]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
 8007672:	2b08      	cmp	r3, #8
 8007674:	d11c      	bne.n	80076b0 <HAL_RCC_OscConfig+0x190>
 8007676:	4b4a      	ldr	r3, [pc, #296]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d116      	bne.n	80076b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007682:	4b47      	ldr	r3, [pc, #284]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <HAL_RCC_OscConfig+0x17a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d001      	beq.n	800769a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e1df      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800769a:	4b41      	ldr	r3, [pc, #260]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	493d      	ldr	r1, [pc, #244]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ae:	e040      	b.n	8007732 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d023      	beq.n	8007700 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076b8:	4b39      	ldr	r3, [pc, #228]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a38      	ldr	r2, [pc, #224]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c4:	f7fa fca8 	bl	8002018 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076cc:	f7fa fca4 	bl	8002018 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e1bd      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076de:	4b30      	ldr	r3, [pc, #192]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f0      	beq.n	80076cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ea:	4b2d      	ldr	r3, [pc, #180]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	4929      	ldr	r1, [pc, #164]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	600b      	str	r3, [r1, #0]
 80076fe:	e018      	b.n	8007732 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007700:	4b27      	ldr	r3, [pc, #156]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a26      	ldr	r2, [pc, #152]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fa fc84 	bl	8002018 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007714:	f7fa fc80 	bl	8002018 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e199      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007726:	4b1e      	ldr	r3, [pc, #120]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d038      	beq.n	80077b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d019      	beq.n	800777a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007746:	4b16      	ldr	r3, [pc, #88]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774a:	4a15      	ldr	r2, [pc, #84]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007752:	f7fa fc61 	bl	8002018 <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800775a:	f7fa fc5d 	bl	8002018 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e176      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776c:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800776e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <HAL_RCC_OscConfig+0x23a>
 8007778:	e01a      	b.n	80077b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800777a:	4b09      	ldr	r3, [pc, #36]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 800777c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800777e:	4a08      	ldr	r2, [pc, #32]	@ (80077a0 <HAL_RCC_OscConfig+0x280>)
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007786:	f7fa fc47 	bl	8002018 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800778c:	e00a      	b.n	80077a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800778e:	f7fa fc43 	bl	8002018 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d903      	bls.n	80077a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e15c      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
 80077a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a4:	4b91      	ldr	r3, [pc, #580]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80077a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1ee      	bne.n	800778e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80a4 	beq.w	8007906 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077be:	4b8b      	ldr	r3, [pc, #556]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10d      	bne.n	80077e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ca:	4b88      	ldr	r3, [pc, #544]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	4a87      	ldr	r2, [pc, #540]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80077d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80077d6:	4b85      	ldr	r3, [pc, #532]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077de:	60bb      	str	r3, [r7, #8]
 80077e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077e2:	2301      	movs	r3, #1
 80077e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077e6:	4b82      	ldr	r3, [pc, #520]	@ (80079f0 <HAL_RCC_OscConfig+0x4d0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d118      	bne.n	8007824 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077f2:	4b7f      	ldr	r3, [pc, #508]	@ (80079f0 <HAL_RCC_OscConfig+0x4d0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a7e      	ldr	r2, [pc, #504]	@ (80079f0 <HAL_RCC_OscConfig+0x4d0>)
 80077f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077fe:	f7fa fc0b 	bl	8002018 <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007804:	e008      	b.n	8007818 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007806:	f7fa fc07 	bl	8002018 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b64      	cmp	r3, #100	@ 0x64
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e120      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007818:	4b75      	ldr	r3, [pc, #468]	@ (80079f0 <HAL_RCC_OscConfig+0x4d0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d106      	bne.n	800783a <HAL_RCC_OscConfig+0x31a>
 800782c:	4b6f      	ldr	r3, [pc, #444]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 800782e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007830:	4a6e      	ldr	r2, [pc, #440]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	6713      	str	r3, [r2, #112]	@ 0x70
 8007838:	e02d      	b.n	8007896 <HAL_RCC_OscConfig+0x376>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10c      	bne.n	800785c <HAL_RCC_OscConfig+0x33c>
 8007842:	4b6a      	ldr	r3, [pc, #424]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007846:	4a69      	ldr	r2, [pc, #420]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	6713      	str	r3, [r2, #112]	@ 0x70
 800784e:	4b67      	ldr	r3, [pc, #412]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007852:	4a66      	ldr	r2, [pc, #408]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007854:	f023 0304 	bic.w	r3, r3, #4
 8007858:	6713      	str	r3, [r2, #112]	@ 0x70
 800785a:	e01c      	b.n	8007896 <HAL_RCC_OscConfig+0x376>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b05      	cmp	r3, #5
 8007862:	d10c      	bne.n	800787e <HAL_RCC_OscConfig+0x35e>
 8007864:	4b61      	ldr	r3, [pc, #388]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007868:	4a60      	ldr	r2, [pc, #384]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 800786a:	f043 0304 	orr.w	r3, r3, #4
 800786e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007870:	4b5e      	ldr	r3, [pc, #376]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007874:	4a5d      	ldr	r2, [pc, #372]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	6713      	str	r3, [r2, #112]	@ 0x70
 800787c:	e00b      	b.n	8007896 <HAL_RCC_OscConfig+0x376>
 800787e:	4b5b      	ldr	r3, [pc, #364]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007882:	4a5a      	ldr	r2, [pc, #360]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	6713      	str	r3, [r2, #112]	@ 0x70
 800788a:	4b58      	ldr	r3, [pc, #352]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	4a57      	ldr	r2, [pc, #348]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007890:	f023 0304 	bic.w	r3, r3, #4
 8007894:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d015      	beq.n	80078ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789e:	f7fa fbbb 	bl	8002018 <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a4:	e00a      	b.n	80078bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a6:	f7fa fbb7 	bl	8002018 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d901      	bls.n	80078bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e0ce      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078bc:	4b4b      	ldr	r3, [pc, #300]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80078be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d0ee      	beq.n	80078a6 <HAL_RCC_OscConfig+0x386>
 80078c8:	e014      	b.n	80078f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ca:	f7fa fba5 	bl	8002018 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d0:	e00a      	b.n	80078e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d2:	f7fa fba1 	bl	8002018 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e0b8      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e8:	4b40      	ldr	r3, [pc, #256]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80078ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1ee      	bne.n	80078d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d105      	bne.n	8007906 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078fa:	4b3c      	ldr	r3, [pc, #240]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80078fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fe:	4a3b      	ldr	r2, [pc, #236]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007904:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80a4 	beq.w	8007a58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007910:	4b36      	ldr	r3, [pc, #216]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 030c 	and.w	r3, r3, #12
 8007918:	2b08      	cmp	r3, #8
 800791a:	d06b      	beq.n	80079f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d149      	bne.n	80079b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007924:	4b31      	ldr	r3, [pc, #196]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a30      	ldr	r2, [pc, #192]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 800792a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800792e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007930:	f7fa fb72 	bl	8002018 <HAL_GetTick>
 8007934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007938:	f7fa fb6e 	bl	8002018 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e087      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800794a:	4b28      	ldr	r3, [pc, #160]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1f0      	bne.n	8007938 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	019b      	lsls	r3, r3, #6
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	3b01      	subs	r3, #1
 8007970:	041b      	lsls	r3, r3, #16
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007978:	061b      	lsls	r3, r3, #24
 800797a:	4313      	orrs	r3, r2
 800797c:	4a1b      	ldr	r2, [pc, #108]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 800797e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007982:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007984:	4b19      	ldr	r3, [pc, #100]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 800798a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800798e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fa fb42 	bl	8002018 <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007998:	f7fa fb3e 	bl	8002018 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e057      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079aa:	4b10      	ldr	r3, [pc, #64]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0x478>
 80079b6:	e04f      	b.n	8007a58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b8:	4b0c      	ldr	r3, [pc, #48]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a0b      	ldr	r2, [pc, #44]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80079be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c4:	f7fa fb28 	bl	8002018 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079cc:	f7fa fb24 	bl	8002018 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e03d      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079de:	4b03      	ldr	r3, [pc, #12]	@ (80079ec <HAL_RCC_OscConfig+0x4cc>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f0      	bne.n	80079cc <HAL_RCC_OscConfig+0x4ac>
 80079ea:	e035      	b.n	8007a58 <HAL_RCC_OscConfig+0x538>
 80079ec:	40023800 	.word	0x40023800
 80079f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80079f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a64 <HAL_RCC_OscConfig+0x544>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d028      	beq.n	8007a54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d121      	bne.n	8007a54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d11a      	bne.n	8007a54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a24:	4013      	ands	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d111      	bne.n	8007a54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d107      	bne.n	8007a54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d001      	beq.n	8007a58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	40023800 	.word	0x40023800

08007a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0d0      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a80:	4b6a      	ldr	r3, [pc, #424]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d910      	bls.n	8007ab0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a8e:	4b67      	ldr	r3, [pc, #412]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 020f 	bic.w	r2, r3, #15
 8007a96:	4965      	ldr	r1, [pc, #404]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a9e:	4b63      	ldr	r3, [pc, #396]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 030f 	and.w	r3, r3, #15
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d001      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e0b8      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d020      	beq.n	8007afe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ac8:	4b59      	ldr	r3, [pc, #356]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	4a58      	ldr	r2, [pc, #352]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ae0:	4b53      	ldr	r3, [pc, #332]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4a52      	ldr	r2, [pc, #328]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aec:	4b50      	ldr	r3, [pc, #320]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	494d      	ldr	r1, [pc, #308]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d040      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d107      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b12:	4b47      	ldr	r3, [pc, #284]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d115      	bne.n	8007b4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e07f      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d107      	bne.n	8007b3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b2a:	4b41      	ldr	r3, [pc, #260]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e073      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e06b      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b4a:	4b39      	ldr	r3, [pc, #228]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f023 0203 	bic.w	r2, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4936      	ldr	r1, [pc, #216]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5c:	f7fa fa5c 	bl	8002018 <HAL_GetTick>
 8007b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b62:	e00a      	b.n	8007b7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b64:	f7fa fa58 	bl	8002018 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e053      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f003 020c 	and.w	r2, r3, #12
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d1eb      	bne.n	8007b64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b8c:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d210      	bcs.n	8007bbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b9a:	4b24      	ldr	r3, [pc, #144]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f023 020f 	bic.w	r2, r3, #15
 8007ba2:	4922      	ldr	r1, [pc, #136]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007baa:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d001      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e032      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0304 	and.w	r3, r3, #4
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d008      	beq.n	8007bda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bc8:	4b19      	ldr	r3, [pc, #100]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	4916      	ldr	r1, [pc, #88]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007be6:	4b12      	ldr	r3, [pc, #72]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	490e      	ldr	r1, [pc, #56]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bfa:	f000 f821 	bl	8007c40 <HAL_RCC_GetSysClockFreq>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	091b      	lsrs	r3, r3, #4
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	490a      	ldr	r1, [pc, #40]	@ (8007c34 <HAL_RCC_ClockConfig+0x1cc>)
 8007c0c:	5ccb      	ldrb	r3, [r1, r3]
 8007c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c12:	4a09      	ldr	r2, [pc, #36]	@ (8007c38 <HAL_RCC_ClockConfig+0x1d0>)
 8007c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c16:	4b09      	ldr	r3, [pc, #36]	@ (8007c3c <HAL_RCC_ClockConfig+0x1d4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fa f9b8 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40023c00 	.word	0x40023c00
 8007c30:	40023800 	.word	0x40023800
 8007c34:	0801beb8 	.word	0x0801beb8
 8007c38:	20000000 	.word	0x20000000
 8007c3c:	20000004 	.word	0x20000004

08007c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c44:	b090      	sub	sp, #64	@ 0x40
 8007c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c50:	2300      	movs	r3, #0
 8007c52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c58:	4b59      	ldr	r3, [pc, #356]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 030c 	and.w	r3, r3, #12
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d00d      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x40>
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	f200 80a1 	bhi.w	8007dac <HAL_RCC_GetSysClockFreq+0x16c>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <HAL_RCC_GetSysClockFreq+0x34>
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d003      	beq.n	8007c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8007c72:	e09b      	b.n	8007dac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c74:	4b53      	ldr	r3, [pc, #332]	@ (8007dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c78:	e09b      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c7a:	4b53      	ldr	r3, [pc, #332]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c7e:	e098      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c80:	4b4f      	ldr	r3, [pc, #316]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d028      	beq.n	8007ce8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c96:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	099b      	lsrs	r3, r3, #6
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	623b      	str	r3, [r7, #32]
 8007ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4b47      	ldr	r3, [pc, #284]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cac:	fb03 f201 	mul.w	r2, r3, r1
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	fb00 f303 	mul.w	r3, r0, r3
 8007cb6:	4413      	add	r3, r2
 8007cb8:	4a43      	ldr	r2, [pc, #268]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cba:	fba0 1202 	umull	r1, r2, r0, r2
 8007cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cc0:	460a      	mov	r2, r1
 8007cc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cc6:	4413      	add	r3, r2
 8007cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ccc:	2200      	movs	r2, #0
 8007cce:	61bb      	str	r3, [r7, #24]
 8007cd0:	61fa      	str	r2, [r7, #28]
 8007cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007cda:	f7f8 fae9 	bl	80002b0 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce6:	e053      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce8:	4b35      	ldr	r3, [pc, #212]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	099b      	lsrs	r3, r3, #6
 8007cee:	2200      	movs	r2, #0
 8007cf0:	613b      	str	r3, [r7, #16]
 8007cf2:	617a      	str	r2, [r7, #20]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cfa:	f04f 0b00 	mov.w	fp, #0
 8007cfe:	4652      	mov	r2, sl
 8007d00:	465b      	mov	r3, fp
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f04f 0100 	mov.w	r1, #0
 8007d0a:	0159      	lsls	r1, r3, #5
 8007d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d10:	0150      	lsls	r0, r2, #5
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	ebb2 080a 	subs.w	r8, r2, sl
 8007d1a:	eb63 090b 	sbc.w	r9, r3, fp
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d32:	ebb2 0408 	subs.w	r4, r2, r8
 8007d36:	eb63 0509 	sbc.w	r5, r3, r9
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	00eb      	lsls	r3, r5, #3
 8007d44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d48:	00e2      	lsls	r2, r4, #3
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	461d      	mov	r5, r3
 8007d4e:	eb14 030a 	adds.w	r3, r4, sl
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	eb45 030b 	adc.w	r3, r5, fp
 8007d58:	607b      	str	r3, [r7, #4]
 8007d5a:	f04f 0200 	mov.w	r2, #0
 8007d5e:	f04f 0300 	mov.w	r3, #0
 8007d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d66:	4629      	mov	r1, r5
 8007d68:	028b      	lsls	r3, r1, #10
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d70:	4621      	mov	r1, r4
 8007d72:	028a      	lsls	r2, r1, #10
 8007d74:	4610      	mov	r0, r2
 8007d76:	4619      	mov	r1, r3
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	60bb      	str	r3, [r7, #8]
 8007d7e:	60fa      	str	r2, [r7, #12]
 8007d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d84:	f7f8 fa94 	bl	80002b0 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d90:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007da0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007daa:	e002      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dac:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3740      	adds	r7, #64	@ 0x40
 8007db8:	46bd      	mov	sp, r7
 8007dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	00f42400 	.word	0x00f42400
 8007dc8:	017d7840 	.word	0x017d7840

08007dcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dd0:	4b03      	ldr	r3, [pc, #12]	@ (8007de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20000000 	.word	0x20000000

08007de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007de8:	f7ff fff0 	bl	8007dcc <HAL_RCC_GetHCLKFreq>
 8007dec:	4602      	mov	r2, r0
 8007dee:	4b05      	ldr	r3, [pc, #20]	@ (8007e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	0a9b      	lsrs	r3, r3, #10
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	4903      	ldr	r1, [pc, #12]	@ (8007e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dfa:	5ccb      	ldrb	r3, [r1, r3]
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40023800 	.word	0x40023800
 8007e08:	0801bec8 	.word	0x0801bec8

08007e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e10:	f7ff ffdc 	bl	8007dcc <HAL_RCC_GetHCLKFreq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	0b5b      	lsrs	r3, r3, #13
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	4903      	ldr	r1, [pc, #12]	@ (8007e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e22:	5ccb      	ldrb	r3, [r1, r3]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	0801bec8 	.word	0x0801bec8

08007e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d012      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e5c:	4b69      	ldr	r3, [pc, #420]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4a68      	ldr	r2, [pc, #416]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e62:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007e66:	6093      	str	r3, [r2, #8]
 8007e68:	4b66      	ldr	r3, [pc, #408]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e70:	4964      	ldr	r1, [pc, #400]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d017      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9c:	4959      	ldr	r1, [pc, #356]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eac:	d101      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d017      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007eca:	4b4e      	ldr	r3, [pc, #312]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ed0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed8:	494a      	ldr	r1, [pc, #296]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ee8:	d101      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 808b 	beq.w	800802e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f18:	4b3a      	ldr	r3, [pc, #232]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1c:	4a39      	ldr	r2, [pc, #228]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f22:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f24:	4b37      	ldr	r3, [pc, #220]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f2c:	60bb      	str	r3, [r7, #8]
 8007f2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f30:	4b35      	ldr	r3, [pc, #212]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a34      	ldr	r2, [pc, #208]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f3c:	f7fa f86c 	bl	8002018 <HAL_GetTick>
 8007f40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f42:	e008      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f44:	f7fa f868 	bl	8002018 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b64      	cmp	r3, #100	@ 0x64
 8007f50:	d901      	bls.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e357      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f56:	4b2c      	ldr	r3, [pc, #176]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0f0      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f62:	4b28      	ldr	r3, [pc, #160]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d035      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d02e      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f80:	4b20      	ldr	r3, [pc, #128]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f94:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f96:	4b1b      	ldr	r3, [pc, #108]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fa0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007fa2:	4a18      	ldr	r2, [pc, #96]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fa8:	4b16      	ldr	r3, [pc, #88]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d114      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb4:	f7fa f830 	bl	8002018 <HAL_GetTick>
 8007fb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fba:	e00a      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fbc:	f7fa f82c 	bl	8002018 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e319      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0ee      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fea:	d111      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007fec:	4b05      	ldr	r3, [pc, #20]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007ff8:	4b04      	ldr	r3, [pc, #16]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ffa:	400b      	ands	r3, r1
 8007ffc:	4901      	ldr	r1, [pc, #4]	@ (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	608b      	str	r3, [r1, #8]
 8008002:	e00b      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008004:	40023800 	.word	0x40023800
 8008008:	40007000 	.word	0x40007000
 800800c:	0ffffcff 	.word	0x0ffffcff
 8008010:	4baa      	ldr	r3, [pc, #680]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	4aa9      	ldr	r2, [pc, #676]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008016:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800801a:	6093      	str	r3, [r2, #8]
 800801c:	4ba7      	ldr	r3, [pc, #668]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800801e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008028:	49a4      	ldr	r1, [pc, #656]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800802a:	4313      	orrs	r3, r2
 800802c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b00      	cmp	r3, #0
 8008038:	d010      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800803a:	4ba0      	ldr	r3, [pc, #640]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800803c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008040:	4a9e      	ldr	r2, [pc, #632]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008046:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800804a:	4b9c      	ldr	r3, [pc, #624]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008054:	4999      	ldr	r1, [pc, #612]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008068:	4b94      	ldr	r3, [pc, #592]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008076:	4991      	ldr	r1, [pc, #580]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800808a:	4b8c      	ldr	r3, [pc, #560]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008090:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008098:	4988      	ldr	r1, [pc, #544]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080ac:	4b83      	ldr	r3, [pc, #524]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ba:	4980      	ldr	r1, [pc, #512]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080ce:	4b7b      	ldr	r3, [pc, #492]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080dc:	4977      	ldr	r1, [pc, #476]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080f0:	4b72      	ldr	r3, [pc, #456]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f6:	f023 0203 	bic.w	r2, r3, #3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fe:	496f      	ldr	r1, [pc, #444]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008112:	4b6a      	ldr	r3, [pc, #424]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008118:	f023 020c 	bic.w	r2, r3, #12
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008120:	4966      	ldr	r1, [pc, #408]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008134:	4b61      	ldr	r3, [pc, #388]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008142:	495e      	ldr	r1, [pc, #376]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008156:	4b59      	ldr	r3, [pc, #356]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008164:	4955      	ldr	r1, [pc, #340]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008178:	4b50      	ldr	r3, [pc, #320]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008186:	494d      	ldr	r1, [pc, #308]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800819a:	4b48      	ldr	r3, [pc, #288]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a8:	4944      	ldr	r1, [pc, #272]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80081bc:	4b3f      	ldr	r3, [pc, #252]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ca:	493c      	ldr	r1, [pc, #240]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80081de:	4b37      	ldr	r3, [pc, #220]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ec:	4933      	ldr	r1, [pc, #204]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008200:	4b2e      	ldr	r3, [pc, #184]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008206:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800820e:	492b      	ldr	r1, [pc, #172]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d011      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008222:	4b26      	ldr	r3, [pc, #152]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008228:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008230:	4922      	ldr	r1, [pc, #136]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800823c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008240:	d101      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008242:	2301      	movs	r3, #1
 8008244:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008252:	2301      	movs	r3, #1
 8008254:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008262:	4b16      	ldr	r3, [pc, #88]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008268:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008270:	4912      	ldr	r1, [pc, #72]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008284:	4b0d      	ldr	r3, [pc, #52]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800828a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008294:	4909      	ldr	r1, [pc, #36]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008296:	4313      	orrs	r3, r2
 8008298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d006      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80d9 	beq.w	8008462 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082b0:	4b02      	ldr	r3, [pc, #8]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a01      	ldr	r2, [pc, #4]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082ba:	e001      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80082bc:	40023800 	.word	0x40023800
 80082c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c2:	f7f9 fea9 	bl	8002018 <HAL_GetTick>
 80082c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082c8:	e008      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082ca:	f7f9 fea5 	bl	8002018 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b64      	cmp	r3, #100	@ 0x64
 80082d6:	d901      	bls.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e194      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082dc:	4b6c      	ldr	r3, [pc, #432]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f0      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d021      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11d      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80082fc:	4b64      	ldr	r3, [pc, #400]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008302:	0c1b      	lsrs	r3, r3, #16
 8008304:	f003 0303 	and.w	r3, r3, #3
 8008308:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800830a:	4b61      	ldr	r3, [pc, #388]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800830c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008310:	0e1b      	lsrs	r3, r3, #24
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	019a      	lsls	r2, r3, #6
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	431a      	orrs	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	061b      	lsls	r3, r3, #24
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	071b      	lsls	r3, r3, #28
 8008330:	4957      	ldr	r1, [pc, #348]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800834c:	d00a      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008356:	2b00      	cmp	r3, #0
 8008358:	d02e      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008362:	d129      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008364:	4b4a      	ldr	r3, [pc, #296]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800836a:	0c1b      	lsrs	r3, r3, #16
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008372:	4b47      	ldr	r3, [pc, #284]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008378:	0f1b      	lsrs	r3, r3, #28
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	019a      	lsls	r2, r3, #6
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	041b      	lsls	r3, r3, #16
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	061b      	lsls	r3, r3, #24
 8008392:	431a      	orrs	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	071b      	lsls	r3, r3, #28
 8008398:	493d      	ldr	r1, [pc, #244]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083a0:	4b3b      	ldr	r3, [pc, #236]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083a6:	f023 021f 	bic.w	r2, r3, #31
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ae:	3b01      	subs	r3, #1
 80083b0:	4937      	ldr	r1, [pc, #220]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01d      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083c4:	4b32      	ldr	r3, [pc, #200]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ca:	0e1b      	lsrs	r3, r3, #24
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d8:	0f1b      	lsrs	r3, r3, #28
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	019a      	lsls	r2, r3, #6
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	431a      	orrs	r2, r3
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	061b      	lsls	r3, r3, #24
 80083f2:	431a      	orrs	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	071b      	lsls	r3, r3, #28
 80083f8:	4925      	ldr	r1, [pc, #148]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d011      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	019a      	lsls	r2, r3, #6
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	061b      	lsls	r3, r3, #24
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	071b      	lsls	r3, r3, #28
 8008428:	4919      	ldr	r1, [pc, #100]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008430:	4b17      	ldr	r3, [pc, #92]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a16      	ldr	r2, [pc, #88]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008436:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800843a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800843c:	f7f9 fdec 	bl	8002018 <HAL_GetTick>
 8008440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008442:	e008      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008444:	f7f9 fde8 	bl	8002018 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b64      	cmp	r3, #100	@ 0x64
 8008450:	d901      	bls.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e0d7      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008456:	4b0e      	ldr	r3, [pc, #56]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b01      	cmp	r3, #1
 8008466:	f040 80cd 	bne.w	8008604 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800846a:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a08      	ldr	r2, [pc, #32]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008476:	f7f9 fdcf 	bl	8002018 <HAL_GetTick>
 800847a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800847c:	e00a      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800847e:	f7f9 fdcb 	bl	8002018 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b64      	cmp	r3, #100	@ 0x64
 800848a:	d903      	bls.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e0ba      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008490:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008494:	4b5e      	ldr	r3, [pc, #376]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800849c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a0:	d0ed      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d009      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d02e      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d12a      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80084ca:	4b51      	ldr	r3, [pc, #324]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084de:	0f1b      	lsrs	r3, r3, #28
 80084e0:	f003 0307 	and.w	r3, r3, #7
 80084e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	019a      	lsls	r2, r3, #6
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	041b      	lsls	r3, r3, #16
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	061b      	lsls	r3, r3, #24
 80084f8:	431a      	orrs	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	071b      	lsls	r3, r3, #28
 80084fe:	4944      	ldr	r1, [pc, #272]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008500:	4313      	orrs	r3, r2
 8008502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008506:	4b42      	ldr	r3, [pc, #264]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800850c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008514:	3b01      	subs	r3, #1
 8008516:	021b      	lsls	r3, r3, #8
 8008518:	493d      	ldr	r1, [pc, #244]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d022      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008534:	d11d      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008536:	4b36      	ldr	r3, [pc, #216]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853c:	0e1b      	lsrs	r3, r3, #24
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008544:	4b32      	ldr	r3, [pc, #200]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854a:	0f1b      	lsrs	r3, r3, #28
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	019a      	lsls	r2, r3, #6
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	041b      	lsls	r3, r3, #16
 800855e:	431a      	orrs	r2, r3
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	061b      	lsls	r3, r3, #24
 8008564:	431a      	orrs	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	071b      	lsls	r3, r3, #28
 800856a:	4929      	ldr	r1, [pc, #164]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d028      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800857e:	4b24      	ldr	r3, [pc, #144]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008584:	0e1b      	lsrs	r3, r3, #24
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800858c:	4b20      	ldr	r3, [pc, #128]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008592:	0c1b      	lsrs	r3, r3, #16
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	019a      	lsls	r2, r3, #6
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	431a      	orrs	r2, r3
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	061b      	lsls	r3, r3, #24
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	071b      	lsls	r3, r3, #28
 80085b2:	4917      	ldr	r1, [pc, #92]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085ba:	4b15      	ldr	r3, [pc, #84]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c8:	4911      	ldr	r1, [pc, #68]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80085d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085dc:	f7f9 fd1c 	bl	8002018 <HAL_GetTick>
 80085e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085e2:	e008      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085e4:	f7f9 fd18 	bl	8002018 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b64      	cmp	r3, #100	@ 0x64
 80085f0:	d901      	bls.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e007      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085f6:	4b06      	ldr	r3, [pc, #24]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008602:	d1ef      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3720      	adds	r7, #32
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40023800 	.word	0x40023800

08008614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e09d      	b.n	8008762 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	d108      	bne.n	8008640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008636:	d009      	beq.n	800864c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	61da      	str	r2, [r3, #28]
 800863e:	e005      	b.n	800864c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7f8 fcd8 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008682:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800868c:	d902      	bls.n	8008694 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e002      	b.n	800869a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008698:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80086a2:	d007      	beq.n	80086b4 <HAL_SPI_Init+0xa0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086ac:	d002      	beq.n	80086b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	ea42 0103 	orr.w	r1, r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	f003 0204 	and.w	r2, r3, #4
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008730:	ea42 0103 	orr.w	r1, r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b01      	cmp	r3, #1
 8008784:	d001      	beq.n	800878a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008786:	2302      	movs	r3, #2
 8008788:	e0d4      	b.n	8008934 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <HAL_SPI_Transmit_DMA+0x2a>
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e0cc      	b.n	8008934 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_SPI_Transmit_DMA+0x3c>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e0c5      	b.n	8008934 <HAL_SPI_Transmit_DMA+0x1c8>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2203      	movs	r2, #3
 80087b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	88fa      	ldrh	r2, [r7, #6]
 80087ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087fa:	d10f      	bne.n	800881c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800880a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800881a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008820:	4a46      	ldr	r2, [pc, #280]	@ (800893c <HAL_SPI_Transmit_DMA+0x1d0>)
 8008822:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008828:	4a45      	ldr	r2, [pc, #276]	@ (8008940 <HAL_SPI_Transmit_DMA+0x1d4>)
 800882a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008830:	4a44      	ldr	r2, [pc, #272]	@ (8008944 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008832:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008838:	2200      	movs	r2, #0
 800883a:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800884a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008854:	d82d      	bhi.n	80088b2 <HAL_SPI_Transmit_DMA+0x146>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008860:	d127      	bne.n	80088b2 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008866:	b29b      	uxth	r3, r3
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10f      	bne.n	8008890 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800887e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008884:	b29b      	uxth	r3, r3
 8008886:	085b      	lsrs	r3, r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800888e:	e010      	b.n	80088b2 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800889e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	085b      	lsrs	r3, r3, #1
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3301      	adds	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ba:	4619      	mov	r1, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	330c      	adds	r3, #12
 80088c2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088ca:	f7fa fc25 	bl	8003118 <HAL_DMA_Start_IT>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088d8:	f043 0210 	orr.w	r2, r3, #16
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e023      	b.n	8008934 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f6:	2b40      	cmp	r3, #64	@ 0x40
 80088f8:	d007      	beq.n	800890a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008908:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0220 	orr.w	r2, r2, #32
 8008920:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0202 	orr.w	r2, r2, #2
 8008930:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	080092dd 	.word	0x080092dd
 8008940:	080090f9 	.word	0x080090f9
 8008944:	08009331 	.word	0x08009331

08008948 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b01      	cmp	r3, #1
 8008960:	d001      	beq.n	8008966 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008962:	2302      	movs	r3, #2
 8008964:	e105      	b.n	8008b72 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_SPI_Receive_DMA+0x2a>
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e0fd      	b.n	8008b72 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d110      	bne.n	80089a0 <HAL_SPI_Receive_DMA+0x58>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008986:	d10b      	bne.n	80089a0 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2204      	movs	r2, #4
 800898c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f8f6 	bl	8008b88 <HAL_SPI_TransmitReceive_DMA>
 800899c:	4603      	mov	r3, r0
 800899e:	e0e8      	b.n	8008b72 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_SPI_Receive_DMA+0x66>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e0e1      	b.n	8008b72 <HAL_SPI_Receive_DMA+0x22a>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2204      	movs	r2, #4
 80089ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	88fa      	ldrh	r2, [r7, #6]
 80089ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089fa:	d10f      	bne.n	8008a1c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008a1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a2a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a34:	d908      	bls.n	8008a48 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	e042      	b.n	8008ace <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a56:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a62:	d134      	bne.n	8008ace <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a72:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d111      	bne.n	8008aa8 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a92:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	085b      	lsrs	r3, r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008aa6:	e012      	b.n	8008ace <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ab6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	085b      	lsrs	r3, r3, #1
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b7c <HAL_SPI_Receive_DMA+0x234>)
 8008ad4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ada:	4a29      	ldr	r2, [pc, #164]	@ (8008b80 <HAL_SPI_Receive_DMA+0x238>)
 8008adc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae2:	4a28      	ldr	r2, [pc, #160]	@ (8008b84 <HAL_SPI_Receive_DMA+0x23c>)
 8008ae4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aea:	2200      	movs	r2, #0
 8008aec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	4619      	mov	r1, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008b08:	f7fa fb06 	bl	8003118 <HAL_DMA_Start_IT>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00b      	beq.n	8008b2a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b16:	f043 0210 	orr.w	r2, r3, #16
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e023      	b.n	8008b72 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b34:	2b40      	cmp	r3, #64	@ 0x40
 8008b36:	d007      	beq.n	8008b48 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b46:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0220 	orr.w	r2, r2, #32
 8008b5e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0201 	orr.w	r2, r2, #1
 8008b6e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	080092f9 	.word	0x080092f9
 8008b80:	080091a1 	.word	0x080091a1
 8008b84:	08009331 	.word	0x08009331

08008b88 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b9c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d00c      	beq.n	8008bc4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bb0:	d106      	bne.n	8008bc0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d001      	beq.n	8008bc4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e158      	b.n	8008e76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008bd0:	887b      	ldrh	r3, [r7, #2]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e14d      	b.n	8008e76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d101      	bne.n	8008be8 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008be4:	2302      	movs	r3, #2
 8008be6:	e146      	b.n	8008e76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d003      	beq.n	8008c04 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2205      	movs	r2, #5
 8008c00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	887a      	ldrh	r2, [r7, #2]
 8008c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	887a      	ldrh	r2, [r7, #2]
 8008c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	887a      	ldrh	r2, [r7, #2]
 8008c26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	887a      	ldrh	r2, [r7, #2]
 8008c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008c4c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c56:	d908      	bls.n	8008c6a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c66:	605a      	str	r2, [r3, #4]
 8008c68:	e06f      	b.n	8008d4a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c78:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c84:	d126      	bne.n	8008cd4 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10f      	bne.n	8008cb2 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ca0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cb0:	e010      	b.n	8008cd4 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cc0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	085b      	lsrs	r3, r3, #1
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3301      	adds	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cde:	d134      	bne.n	8008d4a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d111      	bne.n	8008d24 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d0e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008d22:	e012      	b.n	8008d4a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d32:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3301      	adds	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d108      	bne.n	8008d68 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5a:	4a49      	ldr	r2, [pc, #292]	@ (8008e80 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d62:	4a48      	ldr	r2, [pc, #288]	@ (8008e84 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008d64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d66:	e007      	b.n	8008d78 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d6c:	4a46      	ldr	r2, [pc, #280]	@ (8008e88 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008d6e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d74:	4a45      	ldr	r2, [pc, #276]	@ (8008e8c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d7c:	4a44      	ldr	r2, [pc, #272]	@ (8008e90 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008d7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d84:	2200      	movs	r2, #0
 8008d86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	4619      	mov	r1, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008da0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008da2:	f7fa f9b9 	bl	8003118 <HAL_DMA_Start_IT>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008db0:	f043 0210 	orr.w	r2, r3, #16
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e058      	b.n	8008e76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd8:	2200      	movs	r2, #0
 8008dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de0:	2200      	movs	r2, #0
 8008de2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de8:	2200      	movs	r2, #0
 8008dea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df0:	2200      	movs	r2, #0
 8008df2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	330c      	adds	r3, #12
 8008e04:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e0c:	f7fa f984 	bl	8003118 <HAL_DMA_Start_IT>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1a:	f043 0210 	orr.w	r2, r3, #16
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e023      	b.n	8008e76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e38:	2b40      	cmp	r3, #64	@ 0x40
 8008e3a:	d007      	beq.n	8008e4c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e4a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0220 	orr.w	r2, r2, #32
 8008e62:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0202 	orr.w	r2, r2, #2
 8008e72:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	080092f9 	.word	0x080092f9
 8008e84:	080091a1 	.word	0x080091a1
 8008e88:	08009315 	.word	0x08009315
 8008e8c:	0800924b 	.word	0x0800924b
 8008e90:	08009331 	.word	0x08009331

08008e94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	099b      	lsrs	r3, r3, #6
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10f      	bne.n	8008ed8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	099b      	lsrs	r3, r3, #6
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d004      	beq.n	8008ed8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
    return;
 8008ed6:	e0d7      	b.n	8009088 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	085b      	lsrs	r3, r3, #1
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <HAL_SPI_IRQHandler+0x66>
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	09db      	lsrs	r3, r3, #7
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	4798      	blx	r3
    return;
 8008ef8:	e0c6      	b.n	8009088 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10c      	bne.n	8008f20 <HAL_SPI_IRQHandler+0x8c>
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	099b      	lsrs	r3, r3, #6
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 80b4 	beq.w	8009088 <HAL_SPI_IRQHandler+0x1f4>
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 80ad 	beq.w	8009088 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	099b      	lsrs	r3, r3, #6
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d023      	beq.n	8008f82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d011      	beq.n	8008f6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f4a:	f043 0204 	orr.w	r2, r3, #4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f52:	2300      	movs	r3, #0
 8008f54:	617b      	str	r3, [r7, #20]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	e00b      	b.n	8008f82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	613b      	str	r3, [r7, #16]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	613b      	str	r3, [r7, #16]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	693b      	ldr	r3, [r7, #16]
        return;
 8008f80:	e082      	b.n	8009088 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	095b      	lsrs	r3, r3, #5
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d014      	beq.n	8008fb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f92:	f043 0201 	orr.w	r2, r3, #1
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	0a1b      	lsrs	r3, r3, #8
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00c      	beq.n	8008fde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fc8:	f043 0208 	orr.w	r2, r3, #8
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60bb      	str	r3, [r7, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	60bb      	str	r3, [r7, #8]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d04f      	beq.n	8009086 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ff4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <HAL_SPI_IRQHandler+0x17e>
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d034      	beq.n	800907c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0203 	bic.w	r2, r2, #3
 8009020:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902e:	4a18      	ldr	r2, [pc, #96]	@ (8009090 <HAL_SPI_IRQHandler+0x1fc>)
 8009030:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009036:	4618      	mov	r0, r3
 8009038:	f7fa f93e 	bl	80032b8 <HAL_DMA_Abort_IT>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d005      	beq.n	800904e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009046:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009052:	2b00      	cmp	r3, #0
 8009054:	d016      	beq.n	8009084 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905a:	4a0d      	ldr	r2, [pc, #52]	@ (8009090 <HAL_SPI_IRQHandler+0x1fc>)
 800905c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009062:	4618      	mov	r0, r3
 8009064:	f7fa f928 	bl	80032b8 <HAL_DMA_Abort_IT>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009072:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800907a:	e003      	b.n	8009084 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f831 	bl	80090e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009082:	e000      	b.n	8009086 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009084:	bf00      	nop
    return;
 8009086:	bf00      	nop
  }
}
 8009088:	3720      	adds	r7, #32
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	08009371 	.word	0x08009371

08009094 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009104:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009106:	f7f8 ff87 	bl	8002018 <HAL_GetTick>
 800910a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800911a:	d03b      	beq.n	8009194 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0220 	bic.w	r2, r2, #32
 800912a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0202 	bic.w	r2, r2, #2
 800913a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	2164      	movs	r1, #100	@ 0x64
 8009140:	6978      	ldr	r0, [r7, #20]
 8009142:	f000 fac5 	bl	80096d0 <SPI_EndRxTxTransaction>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009150:	f043 0220 	orr.w	r2, r3, #32
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2200      	movs	r2, #0
 800917a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800918c:	6978      	ldr	r0, [r7, #20]
 800918e:	f7ff ffa9 	bl	80090e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009192:	e002      	b.n	800919a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009194:	6978      	ldr	r0, [r7, #20]
 8009196:	f00e f8b7 	bl	8017308 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091ae:	f7f8 ff33 	bl	8002018 <HAL_GetTick>
 80091b2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c2:	d03c      	beq.n	800923e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0220 	bic.w	r2, r2, #32
 80091d2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10d      	bne.n	80091f8 <SPI_DMAReceiveCplt+0x58>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091e4:	d108      	bne.n	80091f8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0203 	bic.w	r2, r2, #3
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	e007      	b.n	8009208 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0201 	bic.w	r2, r2, #1
 8009206:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	2164      	movs	r1, #100	@ 0x64
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 f9e3 	bl	80095d8 <SPI_EndRxTransaction>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2220      	movs	r2, #32
 800921c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7ff ff54 	bl	80090e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800923c:	e002      	b.n	8009244 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f00e f882 	bl	8017348 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009258:	f7f8 fede 	bl	8002018 <HAL_GetTick>
 800925c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800926c:	d030      	beq.n	80092d0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0220 	bic.w	r2, r2, #32
 800927c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	2164      	movs	r1, #100	@ 0x64
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fa24 	bl	80096d0 <SPI_EndRxTxTransaction>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009292:	f043 0220 	orr.w	r2, r3, #32
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0203 	bic.w	r2, r2, #3
 80092a8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d003      	beq.n	80092d0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7ff ff0b 	bl	80090e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80092ce:	e002      	b.n	80092d6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fedf 	bl	8009094 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff fedc 	bl	80090a8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009304:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7ff fed8 	bl	80090bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009320:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f7ff fed4 	bl	80090d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009328:	bf00      	nop
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0203 	bic.w	r2, r2, #3
 800934c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009352:	f043 0210 	orr.w	r2, r3, #16
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff febe 	bl	80090e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009368:	bf00      	nop
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff fea9 	bl	80090e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	4613      	mov	r3, r2
 80093aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093ac:	f7f8 fe34 	bl	8002018 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4413      	add	r3, r2
 80093ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093bc:	f7f8 fe2c 	bl	8002018 <HAL_GetTick>
 80093c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093c2:	4b39      	ldr	r3, [pc, #228]	@ (80094a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	015b      	lsls	r3, r3, #5
 80093c8:	0d1b      	lsrs	r3, r3, #20
 80093ca:	69fa      	ldr	r2, [r7, #28]
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
 80093d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093d2:	e055      	b.n	8009480 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093da:	d051      	beq.n	8009480 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093dc:	f7f8 fe1c 	bl	8002018 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d902      	bls.n	80093f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d13d      	bne.n	800946e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800940a:	d111      	bne.n	8009430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009414:	d004      	beq.n	8009420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800941e:	d107      	bne.n	8009430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800942e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009438:	d10f      	bne.n	800945a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e018      	b.n	80094a0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	e002      	b.n	8009480 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	3b01      	subs	r3, #1
 800947e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	4013      	ands	r3, r2
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	429a      	cmp	r2, r3
 800948e:	bf0c      	ite	eq
 8009490:	2301      	moveq	r3, #1
 8009492:	2300      	movne	r3, #0
 8009494:	b2db      	uxtb	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	429a      	cmp	r2, r3
 800949c:	d19a      	bne.n	80093d4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3720      	adds	r7, #32
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000000 	.word	0x20000000

080094ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08a      	sub	sp, #40	@ 0x28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80094be:	f7f8 fdab 	bl	8002018 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	4413      	add	r3, r2
 80094cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80094ce:	f7f8 fda3 	bl	8002018 <HAL_GetTick>
 80094d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80094dc:	4b3d      	ldr	r3, [pc, #244]	@ (80095d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	4613      	mov	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	00da      	lsls	r2, r3, #3
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	0d1b      	lsrs	r3, r3, #20
 80094ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ee:	fb02 f303 	mul.w	r3, r2, r3
 80094f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094f4:	e061      	b.n	80095ba <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094fc:	d107      	bne.n	800950e <SPI_WaitFifoStateUntilTimeout+0x62>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	b2db      	uxtb	r3, r3
 800950a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800950c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009514:	d051      	beq.n	80095ba <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009516:	f7f8 fd7f 	bl	8002018 <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009522:	429a      	cmp	r2, r3
 8009524:	d902      	bls.n	800952c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	2b00      	cmp	r3, #0
 800952a:	d13d      	bne.n	80095a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800953a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009544:	d111      	bne.n	800956a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800954e:	d004      	beq.n	800955a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009558:	d107      	bne.n	800956a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009568:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009572:	d10f      	bne.n	8009594 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009592:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e011      	b.n	80095cc <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b2:	e002      	b.n	80095ba <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4013      	ands	r3, r2
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d195      	bne.n	80094f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3728      	adds	r7, #40	@ 0x28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20000000 	.word	0x20000000

080095d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af02      	add	r7, sp, #8
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095ec:	d111      	bne.n	8009612 <SPI_EndRxTransaction+0x3a>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095f6:	d004      	beq.n	8009602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009600:	d107      	bne.n	8009612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009610:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800961a:	d112      	bne.n	8009642 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2200      	movs	r2, #0
 8009624:	2180      	movs	r1, #128	@ 0x80
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f7ff feb8 	bl	800939c <SPI_WaitFlagStateUntilTimeout>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d021      	beq.n	8009676 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009636:	f043 0220 	orr.w	r2, r3, #32
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e03d      	b.n	80096be <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009642:	4b21      	ldr	r3, [pc, #132]	@ (80096c8 <SPI_EndRxTransaction+0xf0>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a21      	ldr	r2, [pc, #132]	@ (80096cc <SPI_EndRxTransaction+0xf4>)
 8009648:	fba2 2303 	umull	r2, r3, r2, r3
 800964c:	0d5b      	lsrs	r3, r3, #21
 800964e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009652:	fb02 f303 	mul.w	r3, r2, r3
 8009656:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	3b01      	subs	r3, #1
 8009662:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800966e:	2b80      	cmp	r3, #128	@ 0x80
 8009670:	d0f2      	beq.n	8009658 <SPI_EndRxTransaction+0x80>
 8009672:	e000      	b.n	8009676 <SPI_EndRxTransaction+0x9e>
        break;
 8009674:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800967e:	d11d      	bne.n	80096bc <SPI_EndRxTransaction+0xe4>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009688:	d004      	beq.n	8009694 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009692:	d113      	bne.n	80096bc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2200      	movs	r2, #0
 800969c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff ff03 	bl	80094ac <SPI_WaitFifoStateUntilTimeout>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096b0:	f043 0220 	orr.w	r2, r3, #32
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e000      	b.n	80096be <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20000000 	.word	0x20000000
 80096cc:	165e9f81 	.word	0x165e9f81

080096d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7ff fedf 	bl	80094ac <SPI_WaitFifoStateUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d007      	beq.n	8009704 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f8:	f043 0220 	orr.w	r2, r3, #32
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e046      	b.n	8009792 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009704:	4b25      	ldr	r3, [pc, #148]	@ (800979c <SPI_EndRxTxTransaction+0xcc>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a25      	ldr	r2, [pc, #148]	@ (80097a0 <SPI_EndRxTxTransaction+0xd0>)
 800970a:	fba2 2303 	umull	r2, r3, r2, r3
 800970e:	0d5b      	lsrs	r3, r3, #21
 8009710:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009714:	fb02 f303 	mul.w	r3, r2, r3
 8009718:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009722:	d112      	bne.n	800974a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2200      	movs	r2, #0
 800972c:	2180      	movs	r1, #128	@ 0x80
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f7ff fe34 	bl	800939c <SPI_WaitFlagStateUntilTimeout>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d016      	beq.n	8009768 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800973e:	f043 0220 	orr.w	r2, r3, #32
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e023      	b.n	8009792 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	3b01      	subs	r3, #1
 8009754:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009760:	2b80      	cmp	r3, #128	@ 0x80
 8009762:	d0f2      	beq.n	800974a <SPI_EndRxTxTransaction+0x7a>
 8009764:	e000      	b.n	8009768 <SPI_EndRxTxTransaction+0x98>
        break;
 8009766:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2200      	movs	r2, #0
 8009770:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f7ff fe99 	bl	80094ac <SPI_WaitFifoStateUntilTimeout>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d007      	beq.n	8009790 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009784:	f043 0220 	orr.w	r2, r3, #32
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e000      	b.n	8009792 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000000 	.word	0x20000000
 80097a0:	165e9f81 	.word	0x165e9f81

080097a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e049      	b.n	800984a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7f8 f81e 	bl	800180c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3304      	adds	r3, #4
 80097e0:	4619      	mov	r1, r3
 80097e2:	4610      	mov	r0, r2
 80097e4:	f000 fb40 	bl	8009e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	d001      	beq.n	800986c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e04c      	b.n	8009906 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a26      	ldr	r2, [pc, #152]	@ (8009914 <HAL_TIM_Base_Start+0xc0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d022      	beq.n	80098c4 <HAL_TIM_Base_Start+0x70>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009886:	d01d      	beq.n	80098c4 <HAL_TIM_Base_Start+0x70>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a22      	ldr	r2, [pc, #136]	@ (8009918 <HAL_TIM_Base_Start+0xc4>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d018      	beq.n	80098c4 <HAL_TIM_Base_Start+0x70>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a21      	ldr	r2, [pc, #132]	@ (800991c <HAL_TIM_Base_Start+0xc8>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d013      	beq.n	80098c4 <HAL_TIM_Base_Start+0x70>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009920 <HAL_TIM_Base_Start+0xcc>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d00e      	beq.n	80098c4 <HAL_TIM_Base_Start+0x70>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009924 <HAL_TIM_Base_Start+0xd0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d009      	beq.n	80098c4 <HAL_TIM_Base_Start+0x70>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009928 <HAL_TIM_Base_Start+0xd4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d004      	beq.n	80098c4 <HAL_TIM_Base_Start+0x70>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a1b      	ldr	r2, [pc, #108]	@ (800992c <HAL_TIM_Base_Start+0xd8>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d115      	bne.n	80098f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	4b19      	ldr	r3, [pc, #100]	@ (8009930 <HAL_TIM_Base_Start+0xdc>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b06      	cmp	r3, #6
 80098d4:	d015      	beq.n	8009902 <HAL_TIM_Base_Start+0xae>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098dc:	d011      	beq.n	8009902 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0201 	orr.w	r2, r2, #1
 80098ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ee:	e008      	b.n	8009902 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	e000      	b.n	8009904 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	40010000 	.word	0x40010000
 8009918:	40000400 	.word	0x40000400
 800991c:	40000800 	.word	0x40000800
 8009920:	40000c00 	.word	0x40000c00
 8009924:	40010400 	.word	0x40010400
 8009928:	40014000 	.word	0x40014000
 800992c:	40001800 	.word	0x40001800
 8009930:	00010007 	.word	0x00010007

08009934 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	4b0f      	ldr	r3, [pc, #60]	@ (8009980 <HAL_TIM_Base_Stop+0x4c>)
 8009944:	4013      	ands	r3, r2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10f      	bne.n	800996a <HAL_TIM_Base_Stop+0x36>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	f240 4344 	movw	r3, #1092	@ 0x444
 8009954:	4013      	ands	r3, r2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d107      	bne.n	800996a <HAL_TIM_Base_Stop+0x36>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 0201 	bic.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	00111111 	.word	0x00111111

08009984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b01      	cmp	r3, #1
 8009996:	d001      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e054      	b.n	8009a46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68da      	ldr	r2, [r3, #12]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f042 0201 	orr.w	r2, r2, #1
 80099b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a26      	ldr	r2, [pc, #152]	@ (8009a54 <HAL_TIM_Base_Start_IT+0xd0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d022      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0x80>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c6:	d01d      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0x80>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a22      	ldr	r2, [pc, #136]	@ (8009a58 <HAL_TIM_Base_Start_IT+0xd4>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d018      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0x80>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a21      	ldr	r2, [pc, #132]	@ (8009a5c <HAL_TIM_Base_Start_IT+0xd8>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d013      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0x80>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009a60 <HAL_TIM_Base_Start_IT+0xdc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d00e      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0x80>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009a64 <HAL_TIM_Base_Start_IT+0xe0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d009      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0x80>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a68 <HAL_TIM_Base_Start_IT+0xe4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d004      	beq.n	8009a04 <HAL_TIM_Base_Start_IT+0x80>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a1b      	ldr	r2, [pc, #108]	@ (8009a6c <HAL_TIM_Base_Start_IT+0xe8>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d115      	bne.n	8009a30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	4b19      	ldr	r3, [pc, #100]	@ (8009a70 <HAL_TIM_Base_Start_IT+0xec>)
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b06      	cmp	r3, #6
 8009a14:	d015      	beq.n	8009a42 <HAL_TIM_Base_Start_IT+0xbe>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a1c:	d011      	beq.n	8009a42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f042 0201 	orr.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2e:	e008      	b.n	8009a42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	e000      	b.n	8009a44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	40010000 	.word	0x40010000
 8009a58:	40000400 	.word	0x40000400
 8009a5c:	40000800 	.word	0x40000800
 8009a60:	40000c00 	.word	0x40000c00
 8009a64:	40010400 	.word	0x40010400
 8009a68:	40014000 	.word	0x40014000
 8009a6c:	40001800 	.word	0x40001800
 8009a70:	00010007 	.word	0x00010007

08009a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d020      	beq.n	8009ad8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f003 0302 	and.w	r3, r3, #2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01b      	beq.n	8009ad8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f06f 0202 	mvn.w	r2, #2
 8009aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f9b4 	bl	8009e2c <HAL_TIM_IC_CaptureCallback>
 8009ac4:	e005      	b.n	8009ad2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f9a6 	bl	8009e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f9b7 	bl	8009e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 0304 	and.w	r3, r3, #4
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d020      	beq.n	8009b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01b      	beq.n	8009b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f06f 0204 	mvn.w	r2, #4
 8009af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2202      	movs	r2, #2
 8009afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f98e 	bl	8009e2c <HAL_TIM_IC_CaptureCallback>
 8009b10:	e005      	b.n	8009b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f980 	bl	8009e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f991 	bl	8009e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f003 0308 	and.w	r3, r3, #8
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d020      	beq.n	8009b70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f003 0308 	and.w	r3, r3, #8
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01b      	beq.n	8009b70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f06f 0208 	mvn.w	r2, #8
 8009b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2204      	movs	r2, #4
 8009b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f968 	bl	8009e2c <HAL_TIM_IC_CaptureCallback>
 8009b5c:	e005      	b.n	8009b6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f95a 	bl	8009e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f96b 	bl	8009e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d020      	beq.n	8009bbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f003 0310 	and.w	r3, r3, #16
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01b      	beq.n	8009bbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f06f 0210 	mvn.w	r2, #16
 8009b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2208      	movs	r2, #8
 8009b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f942 	bl	8009e2c <HAL_TIM_IC_CaptureCallback>
 8009ba8:	e005      	b.n	8009bb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f934 	bl	8009e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f945 	bl	8009e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00c      	beq.n	8009be0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f06f 0201 	mvn.w	r2, #1
 8009bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f00d fca6 	bl	801752c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d104      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00c      	beq.n	8009c0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fb05 	bl	800a218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00c      	beq.n	8009c32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fafd 	bl	800a22c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00c      	beq.n	8009c56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d007      	beq.n	8009c56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f8ff 	bl	8009e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	f003 0320 	and.w	r3, r3, #32
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00c      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f06f 0220 	mvn.w	r2, #32
 8009c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fac5 	bl	800a204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e0b4      	b.n	8009e0a <HAL_TIM_ConfigClockSource+0x186>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	4b56      	ldr	r3, [pc, #344]	@ (8009e14 <HAL_TIM_ConfigClockSource+0x190>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd8:	d03e      	beq.n	8009d58 <HAL_TIM_ConfigClockSource+0xd4>
 8009cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cde:	f200 8087 	bhi.w	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce6:	f000 8086 	beq.w	8009df6 <HAL_TIM_ConfigClockSource+0x172>
 8009cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cee:	d87f      	bhi.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf0:	2b70      	cmp	r3, #112	@ 0x70
 8009cf2:	d01a      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0xa6>
 8009cf4:	2b70      	cmp	r3, #112	@ 0x70
 8009cf6:	d87b      	bhi.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf8:	2b60      	cmp	r3, #96	@ 0x60
 8009cfa:	d050      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x11a>
 8009cfc:	2b60      	cmp	r3, #96	@ 0x60
 8009cfe:	d877      	bhi.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009d00:	2b50      	cmp	r3, #80	@ 0x50
 8009d02:	d03c      	beq.n	8009d7e <HAL_TIM_ConfigClockSource+0xfa>
 8009d04:	2b50      	cmp	r3, #80	@ 0x50
 8009d06:	d873      	bhi.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009d08:	2b40      	cmp	r3, #64	@ 0x40
 8009d0a:	d058      	beq.n	8009dbe <HAL_TIM_ConfigClockSource+0x13a>
 8009d0c:	2b40      	cmp	r3, #64	@ 0x40
 8009d0e:	d86f      	bhi.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009d10:	2b30      	cmp	r3, #48	@ 0x30
 8009d12:	d064      	beq.n	8009dde <HAL_TIM_ConfigClockSource+0x15a>
 8009d14:	2b30      	cmp	r3, #48	@ 0x30
 8009d16:	d86b      	bhi.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d060      	beq.n	8009dde <HAL_TIM_ConfigClockSource+0x15a>
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d867      	bhi.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d05c      	beq.n	8009dde <HAL_TIM_ConfigClockSource+0x15a>
 8009d24:	2b10      	cmp	r3, #16
 8009d26:	d05a      	beq.n	8009dde <HAL_TIM_ConfigClockSource+0x15a>
 8009d28:	e062      	b.n	8009df0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d3a:	f000 f9b5 	bl	800a0a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	609a      	str	r2, [r3, #8]
      break;
 8009d56:	e04f      	b.n	8009df8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d68:	f000 f99e 	bl	800a0a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d7a:	609a      	str	r2, [r3, #8]
      break;
 8009d7c:	e03c      	b.n	8009df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f000 f912 	bl	8009fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2150      	movs	r1, #80	@ 0x50
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f96b 	bl	800a072 <TIM_ITRx_SetConfig>
      break;
 8009d9c:	e02c      	b.n	8009df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009daa:	461a      	mov	r2, r3
 8009dac:	f000 f931 	bl	800a012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2160      	movs	r1, #96	@ 0x60
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 f95b 	bl	800a072 <TIM_ITRx_SetConfig>
      break;
 8009dbc:	e01c      	b.n	8009df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f000 f8f2 	bl	8009fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2140      	movs	r1, #64	@ 0x40
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 f94b 	bl	800a072 <TIM_ITRx_SetConfig>
      break;
 8009ddc:	e00c      	b.n	8009df8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4619      	mov	r1, r3
 8009de8:	4610      	mov	r0, r2
 8009dea:	f000 f942 	bl	800a072 <TIM_ITRx_SetConfig>
      break;
 8009dee:	e003      	b.n	8009df8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	73fb      	strb	r3, [r7, #15]
      break;
 8009df4:	e000      	b.n	8009df8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	fffeff88 	.word	0xfffeff88

08009e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a43      	ldr	r2, [pc, #268]	@ (8009f88 <TIM_Base_SetConfig+0x120>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d013      	beq.n	8009ea8 <TIM_Base_SetConfig+0x40>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e86:	d00f      	beq.n	8009ea8 <TIM_Base_SetConfig+0x40>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a40      	ldr	r2, [pc, #256]	@ (8009f8c <TIM_Base_SetConfig+0x124>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d00b      	beq.n	8009ea8 <TIM_Base_SetConfig+0x40>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a3f      	ldr	r2, [pc, #252]	@ (8009f90 <TIM_Base_SetConfig+0x128>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d007      	beq.n	8009ea8 <TIM_Base_SetConfig+0x40>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a3e      	ldr	r2, [pc, #248]	@ (8009f94 <TIM_Base_SetConfig+0x12c>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d003      	beq.n	8009ea8 <TIM_Base_SetConfig+0x40>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a3d      	ldr	r2, [pc, #244]	@ (8009f98 <TIM_Base_SetConfig+0x130>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d108      	bne.n	8009eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a32      	ldr	r2, [pc, #200]	@ (8009f88 <TIM_Base_SetConfig+0x120>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d02b      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec8:	d027      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8009f8c <TIM_Base_SetConfig+0x124>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d023      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8009f90 <TIM_Base_SetConfig+0x128>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d01f      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a2d      	ldr	r2, [pc, #180]	@ (8009f94 <TIM_Base_SetConfig+0x12c>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d01b      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8009f98 <TIM_Base_SetConfig+0x130>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d017      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a2b      	ldr	r2, [pc, #172]	@ (8009f9c <TIM_Base_SetConfig+0x134>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d013      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8009fa0 <TIM_Base_SetConfig+0x138>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00f      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a29      	ldr	r2, [pc, #164]	@ (8009fa4 <TIM_Base_SetConfig+0x13c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d00b      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a28      	ldr	r2, [pc, #160]	@ (8009fa8 <TIM_Base_SetConfig+0x140>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d007      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a27      	ldr	r2, [pc, #156]	@ (8009fac <TIM_Base_SetConfig+0x144>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d003      	beq.n	8009f1a <TIM_Base_SetConfig+0xb2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a26      	ldr	r2, [pc, #152]	@ (8009fb0 <TIM_Base_SetConfig+0x148>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d108      	bne.n	8009f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8009f88 <TIM_Base_SetConfig+0x120>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d003      	beq.n	8009f5a <TIM_Base_SetConfig+0xf2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a10      	ldr	r2, [pc, #64]	@ (8009f98 <TIM_Base_SetConfig+0x130>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d103      	bne.n	8009f62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	691a      	ldr	r2, [r3, #16]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f043 0204 	orr.w	r2, r3, #4
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	601a      	str	r2, [r3, #0]
}
 8009f7a:	bf00      	nop
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	40010400 	.word	0x40010400
 8009f9c:	40014000 	.word	0x40014000
 8009fa0:	40014400 	.word	0x40014400
 8009fa4:	40014800 	.word	0x40014800
 8009fa8:	40001800 	.word	0x40001800
 8009fac:	40001c00 	.word	0x40001c00
 8009fb0:	40002000 	.word	0x40002000

08009fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	f023 0201 	bic.w	r2, r3, #1
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f023 030a 	bic.w	r3, r3, #10
 8009ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	621a      	str	r2, [r3, #32]
}
 800a006:	bf00      	nop
 800a008:	371c      	adds	r7, #28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a012:	b480      	push	{r7}
 800a014:	b087      	sub	sp, #28
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	f023 0210 	bic.w	r2, r3, #16
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a03c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	031b      	lsls	r3, r3, #12
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	4313      	orrs	r3, r2
 800a046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a04e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	4313      	orrs	r3, r2
 800a058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	621a      	str	r2, [r3, #32]
}
 800a066:	bf00      	nop
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a072:	b480      	push	{r7}
 800a074:	b085      	sub	sp, #20
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	f043 0307 	orr.w	r3, r3, #7
 800a094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	609a      	str	r2, [r3, #8]
}
 800a09c:	bf00      	nop
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	021a      	lsls	r2, r3, #8
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	609a      	str	r2, [r3, #8]
}
 800a0dc:	bf00      	nop
 800a0de:	371c      	adds	r7, #28
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d101      	bne.n	800a100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e06d      	b.n	800a1dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a30      	ldr	r2, [pc, #192]	@ (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d004      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a2f      	ldr	r2, [pc, #188]	@ (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d108      	bne.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a13a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a14c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4313      	orrs	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a20      	ldr	r2, [pc, #128]	@ (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d022      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a172:	d01d      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a1d      	ldr	r2, [pc, #116]	@ (800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d018      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d013      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00e      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a15      	ldr	r2, [pc, #84]	@ (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d009      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a16      	ldr	r2, [pc, #88]	@ (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a15      	ldr	r2, [pc, #84]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d10c      	bne.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	40010000 	.word	0x40010000
 800a1ec:	40010400 	.word	0x40010400
 800a1f0:	40000400 	.word	0x40000400
 800a1f4:	40000800 	.word	0x40000800
 800a1f8:	40000c00 	.word	0x40000c00
 800a1fc:	40014000 	.word	0x40014000
 800a200:	40001800 	.word	0x40001800

0800a204 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e040      	b.n	800a2d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d106      	bne.n	800a268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7f7 fbce 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2224      	movs	r2, #36	@ 0x24
 800a26c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0201 	bic.w	r2, r2, #1
 800a27c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fece 	bl	800b028 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fc67 	bl	800ab60 <UART_SetConfig>
 800a292:	4603      	mov	r3, r0
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e01b      	b.n	800a2d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0201 	orr.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 ff4d 	bl	800b16c <UART_CheckIdleState>
 800a2d2:	4603      	mov	r3, r0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08a      	sub	sp, #40	@ 0x28
 800a2e0:	af02      	add	r7, sp, #8
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2f0:	2b20      	cmp	r3, #32
 800a2f2:	d177      	bne.n	800a3e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d002      	beq.n	800a300 <HAL_UART_Transmit+0x24>
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e070      	b.n	800a3e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2221      	movs	r2, #33	@ 0x21
 800a310:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a312:	f7f7 fe81 	bl	8002018 <HAL_GetTick>
 800a316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	88fa      	ldrh	r2, [r7, #6]
 800a31c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	88fa      	ldrh	r2, [r7, #6]
 800a324:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a330:	d108      	bne.n	800a344 <HAL_UART_Transmit+0x68>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d104      	bne.n	800a344 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	61bb      	str	r3, [r7, #24]
 800a342:	e003      	b.n	800a34c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a34c:	e02f      	b.n	800a3ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2200      	movs	r2, #0
 800a356:	2180      	movs	r1, #128	@ 0x80
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 ff5e 	bl	800b21a <UART_WaitOnFlagUntilTimeout>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2220      	movs	r2, #32
 800a368:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e03b      	b.n	800a3e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10b      	bne.n	800a38c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a382:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	3302      	adds	r3, #2
 800a388:	61bb      	str	r3, [r7, #24]
 800a38a:	e007      	b.n	800a39c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	781a      	ldrb	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	3301      	adds	r3, #1
 800a39a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1c9      	bne.n	800a34e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2140      	movs	r1, #64	@ 0x40
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 ff28 	bl	800b21a <UART_WaitOnFlagUntilTimeout>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d004      	beq.n	800a3da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e005      	b.n	800a3e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e000      	b.n	800a3e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a3e4:	2302      	movs	r3, #2
  }
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b08b      	sub	sp, #44	@ 0x2c
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a402:	2b20      	cmp	r3, #32
 800a404:	d147      	bne.n	800a496 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <HAL_UART_Transmit_IT+0x22>
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e040      	b.n	800a498 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	88fa      	ldrh	r2, [r7, #6]
 800a420:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	88fa      	ldrh	r2, [r7, #6]
 800a428:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2221      	movs	r2, #33	@ 0x21
 800a43e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a448:	d107      	bne.n	800a45a <HAL_UART_Transmit_IT+0x6a>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4a13      	ldr	r2, [pc, #76]	@ (800a4a4 <HAL_UART_Transmit_IT+0xb4>)
 800a456:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a458:	e002      	b.n	800a460 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	4a12      	ldr	r2, [pc, #72]	@ (800a4a8 <HAL_UART_Transmit_IT+0xb8>)
 800a45e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	e853 3f00 	ldrex	r3, [r3]
 800a46c:	613b      	str	r3, [r7, #16]
   return(result);
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a474:	627b      	str	r3, [r7, #36]	@ 0x24
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	623b      	str	r3, [r7, #32]
 800a480:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	69f9      	ldr	r1, [r7, #28]
 800a484:	6a3a      	ldr	r2, [r7, #32]
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e6      	bne.n	800a460 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e000      	b.n	800a498 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a496:	2302      	movs	r3, #2
  }
}
 800a498:	4618      	mov	r0, r3
 800a49a:	372c      	adds	r7, #44	@ 0x2c
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	0800b871 	.word	0x0800b871
 800a4a8:	0800b7bb 	.word	0x0800b7bb

0800a4ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08a      	sub	sp, #40	@ 0x28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4c0:	2b20      	cmp	r3, #32
 800a4c2:	d132      	bne.n	800a52a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <HAL_UART_Receive_DMA+0x24>
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e02b      	b.n	800a52c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d018      	beq.n	800a51a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	623b      	str	r3, [r7, #32]
 800a508:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	69f9      	ldr	r1, [r7, #28]
 800a50c:	6a3a      	ldr	r2, [r7, #32]
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	61bb      	str	r3, [r7, #24]
   return(result);
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e6      	bne.n	800a4e8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	461a      	mov	r2, r3
 800a51e:	68b9      	ldr	r1, [r7, #8]
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 fee7 	bl	800b2f4 <UART_Start_Receive_DMA>
 800a526:	4603      	mov	r3, r0
 800a528:	e000      	b.n	800a52c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a52a:	2302      	movs	r3, #2
  }
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3728      	adds	r7, #40	@ 0x28
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b0ba      	sub	sp, #232	@ 0xe8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a55a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a55e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a562:	4013      	ands	r3, r2
 800a564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d115      	bne.n	800a59c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00f      	beq.n	800a59c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a580:	f003 0320 	and.w	r3, r3, #32
 800a584:	2b00      	cmp	r3, #0
 800a586:	d009      	beq.n	800a59c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 82b1 	beq.w	800aaf4 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	4798      	blx	r3
      }
      return;
 800a59a:	e2ab      	b.n	800aaf4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a59c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 8117 	beq.w	800a7d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a5a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d106      	bne.n	800a5c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a5b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a5b6:	4b85      	ldr	r3, [pc, #532]	@ (800a7cc <HAL_UART_IRQHandler+0x298>)
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 810a 	beq.w	800a7d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d011      	beq.n	800a5f0 <HAL_UART_IRQHandler+0xbc>
 800a5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00b      	beq.n	800a5f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5e6:	f043 0201 	orr.w	r2, r3, #1
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d011      	beq.n	800a620 <HAL_UART_IRQHandler+0xec>
 800a5fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00b      	beq.n	800a620 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2202      	movs	r2, #2
 800a60e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a616:	f043 0204 	orr.w	r2, r3, #4
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d011      	beq.n	800a650 <HAL_UART_IRQHandler+0x11c>
 800a62c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2204      	movs	r2, #4
 800a63e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a646:	f043 0202 	orr.w	r2, r3, #2
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a654:	f003 0308 	and.w	r3, r3, #8
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d017      	beq.n	800a68c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	2b00      	cmp	r3, #0
 800a666:	d105      	bne.n	800a674 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a66c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00b      	beq.n	800a68c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2208      	movs	r2, #8
 800a67a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a682:	f043 0208 	orr.w	r2, r3, #8
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a694:	2b00      	cmp	r3, #0
 800a696:	d012      	beq.n	800a6be <HAL_UART_IRQHandler+0x18a>
 800a698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a69c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00c      	beq.n	800a6be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6b4:	f043 0220 	orr.w	r2, r3, #32
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 8217 	beq.w	800aaf8 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ce:	f003 0320 	and.w	r3, r3, #32
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00d      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d007      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a706:	2b40      	cmp	r3, #64	@ 0x40
 800a708:	d005      	beq.n	800a716 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a70a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a70e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a712:	2b00      	cmp	r3, #0
 800a714:	d04f      	beq.n	800a7b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 feb2 	bl	800b480 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a726:	2b40      	cmp	r3, #64	@ 0x40
 800a728:	d141      	bne.n	800a7ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3308      	adds	r3, #8
 800a730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a756:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a75a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a76e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1d9      	bne.n	800a72a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d013      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a782:	4a13      	ldr	r2, [pc, #76]	@ (800a7d0 <HAL_UART_IRQHandler+0x29c>)
 800a784:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7f8 fd94 	bl	80032b8 <HAL_DMA_Abort_IT>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d017      	beq.n	800a7c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a79a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a4:	e00f      	b.n	800a7c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f9c4 	bl	800ab34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ac:	e00b      	b.n	800a7c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f9c0 	bl	800ab34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b4:	e007      	b.n	800a7c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f9bc 	bl	800ab34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a7c4:	e198      	b.n	800aaf8 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c6:	bf00      	nop
    return;
 800a7c8:	e196      	b.n	800aaf8 <HAL_UART_IRQHandler+0x5c4>
 800a7ca:	bf00      	nop
 800a7cc:	04000120 	.word	0x04000120
 800a7d0:	0800b797 	.word	0x0800b797

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	f040 8166 	bne.w	800aaaa <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7e2:	f003 0310 	and.w	r3, r3, #16
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 815f 	beq.w	800aaaa <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 8158 	beq.w	800aaaa <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2210      	movs	r2, #16
 800a800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a80c:	2b40      	cmp	r3, #64	@ 0x40
 800a80e:	f040 80d0 	bne.w	800a9b2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a81e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 80ab 	beq.w	800a97e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a82e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a832:	429a      	cmp	r2, r3
 800a834:	f080 80a3 	bcs.w	800a97e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a83e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a84c:	f000 8086 	beq.w	800a95c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a858:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a86c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a87a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a87e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a882:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a886:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1da      	bne.n	800a850 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a8a4:	e853 3f00 	ldrex	r3, [r3]
 800a8a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a8aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8ac:	f023 0301 	bic.w	r3, r3, #1
 800a8b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a8be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8ca:	e841 2300 	strex	r3, r2, [r1]
 800a8ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1e1      	bne.n	800a89a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a900:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a902:	e841 2300 	strex	r3, r2, [r1]
 800a906:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1e3      	bne.n	800a8d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2220      	movs	r2, #32
 800a912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a924:	e853 3f00 	ldrex	r3, [r3]
 800a928:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a92a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a92c:	f023 0310 	bic.w	r3, r3, #16
 800a930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	461a      	mov	r2, r3
 800a93a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a93e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a940:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a942:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a946:	e841 2300 	strex	r3, r2, [r1]
 800a94a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a94c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1e4      	bne.n	800a91c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a956:	4618      	mov	r0, r3
 800a958:	f7f8 fc3e 	bl	80031d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a96e:	b29b      	uxth	r3, r3
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	b29b      	uxth	r3, r3
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f8e6 	bl	800ab48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a97c:	e0be      	b.n	800aafc <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a984:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a988:	429a      	cmp	r2, r3
 800a98a:	f040 80b7 	bne.w	800aafc <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a998:	f040 80b0 	bne.w	800aafc <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8cc 	bl	800ab48 <HAL_UARTEx_RxEventCallback>
      return;
 800a9b0:	e0a4      	b.n	800aafc <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 8096 	beq.w	800ab00 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800a9d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 8091 	beq.w	800ab00 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa00:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e4      	bne.n	800a9de <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3308      	adds	r3, #8
 800aa1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	623b      	str	r3, [r7, #32]
   return(result);
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	f023 0301 	bic.w	r3, r3, #1
 800aa2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3308      	adds	r3, #8
 800aa34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa38:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e3      	bne.n	800aa14 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f023 0310 	bic.w	r3, r3, #16
 800aa74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa82:	61fb      	str	r3, [r7, #28]
 800aa84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	69b9      	ldr	r1, [r7, #24]
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e4      	bne.n	800aa60 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2202      	movs	r2, #2
 800aa9a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f850 	bl	800ab48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaa8:	e02a      	b.n	800ab00 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01c      	beq.n	800ab04 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	4798      	blx	r3
    }
    return;
 800aad2:	e017      	b.n	800ab04 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d012      	beq.n	800ab06 <HAL_UART_IRQHandler+0x5d2>
 800aae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00c      	beq.n	800ab06 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 ff1f 	bl	800b930 <UART_EndTransmit_IT>
    return;
 800aaf2:	e008      	b.n	800ab06 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aaf4:	bf00      	nop
 800aaf6:	e006      	b.n	800ab06 <HAL_UART_IRQHandler+0x5d2>
    return;
 800aaf8:	bf00      	nop
 800aafa:	e004      	b.n	800ab06 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aafc:	bf00      	nop
 800aafe:	e002      	b.n	800ab06 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ab00:	bf00      	nop
 800ab02:	e000      	b.n	800ab06 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ab04:	bf00      	nop
  }

}
 800ab06:	37e8      	adds	r7, #232	@ 0xe8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	431a      	orrs	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	69db      	ldr	r3, [r3, #28]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	4ba6      	ldr	r3, [pc, #664]	@ (800ae24 <UART_SetConfig+0x2c4>)
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	6812      	ldr	r2, [r2, #0]
 800ab92:	6979      	ldr	r1, [r7, #20]
 800ab94:	430b      	orrs	r3, r1
 800ab96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68da      	ldr	r2, [r3, #12]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	4313      	orrs	r3, r2
 800abbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	430a      	orrs	r2, r1
 800abd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a94      	ldr	r2, [pc, #592]	@ (800ae28 <UART_SetConfig+0x2c8>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d120      	bne.n	800ac1e <UART_SetConfig+0xbe>
 800abdc:	4b93      	ldr	r3, [pc, #588]	@ (800ae2c <UART_SetConfig+0x2cc>)
 800abde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d816      	bhi.n	800ac18 <UART_SetConfig+0xb8>
 800abea:	a201      	add	r2, pc, #4	@ (adr r2, 800abf0 <UART_SetConfig+0x90>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac01 	.word	0x0800ac01
 800abf4:	0800ac0d 	.word	0x0800ac0d
 800abf8:	0800ac07 	.word	0x0800ac07
 800abfc:	0800ac13 	.word	0x0800ac13
 800ac00:	2301      	movs	r3, #1
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	e150      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac06:	2302      	movs	r3, #2
 800ac08:	77fb      	strb	r3, [r7, #31]
 800ac0a:	e14d      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac0c:	2304      	movs	r3, #4
 800ac0e:	77fb      	strb	r3, [r7, #31]
 800ac10:	e14a      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac12:	2308      	movs	r3, #8
 800ac14:	77fb      	strb	r3, [r7, #31]
 800ac16:	e147      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac18:	2310      	movs	r3, #16
 800ac1a:	77fb      	strb	r3, [r7, #31]
 800ac1c:	e144      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a83      	ldr	r2, [pc, #524]	@ (800ae30 <UART_SetConfig+0x2d0>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d132      	bne.n	800ac8e <UART_SetConfig+0x12e>
 800ac28:	4b80      	ldr	r3, [pc, #512]	@ (800ae2c <UART_SetConfig+0x2cc>)
 800ac2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2e:	f003 030c 	and.w	r3, r3, #12
 800ac32:	2b0c      	cmp	r3, #12
 800ac34:	d828      	bhi.n	800ac88 <UART_SetConfig+0x128>
 800ac36:	a201      	add	r2, pc, #4	@ (adr r2, 800ac3c <UART_SetConfig+0xdc>)
 800ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3c:	0800ac71 	.word	0x0800ac71
 800ac40:	0800ac89 	.word	0x0800ac89
 800ac44:	0800ac89 	.word	0x0800ac89
 800ac48:	0800ac89 	.word	0x0800ac89
 800ac4c:	0800ac7d 	.word	0x0800ac7d
 800ac50:	0800ac89 	.word	0x0800ac89
 800ac54:	0800ac89 	.word	0x0800ac89
 800ac58:	0800ac89 	.word	0x0800ac89
 800ac5c:	0800ac77 	.word	0x0800ac77
 800ac60:	0800ac89 	.word	0x0800ac89
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800ac89 	.word	0x0800ac89
 800ac6c:	0800ac83 	.word	0x0800ac83
 800ac70:	2300      	movs	r3, #0
 800ac72:	77fb      	strb	r3, [r7, #31]
 800ac74:	e118      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac76:	2302      	movs	r3, #2
 800ac78:	77fb      	strb	r3, [r7, #31]
 800ac7a:	e115      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	e112      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac82:	2308      	movs	r3, #8
 800ac84:	77fb      	strb	r3, [r7, #31]
 800ac86:	e10f      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac88:	2310      	movs	r3, #16
 800ac8a:	77fb      	strb	r3, [r7, #31]
 800ac8c:	e10c      	b.n	800aea8 <UART_SetConfig+0x348>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a68      	ldr	r2, [pc, #416]	@ (800ae34 <UART_SetConfig+0x2d4>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d120      	bne.n	800acda <UART_SetConfig+0x17a>
 800ac98:	4b64      	ldr	r3, [pc, #400]	@ (800ae2c <UART_SetConfig+0x2cc>)
 800ac9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aca2:	2b30      	cmp	r3, #48	@ 0x30
 800aca4:	d013      	beq.n	800acce <UART_SetConfig+0x16e>
 800aca6:	2b30      	cmp	r3, #48	@ 0x30
 800aca8:	d814      	bhi.n	800acd4 <UART_SetConfig+0x174>
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d009      	beq.n	800acc2 <UART_SetConfig+0x162>
 800acae:	2b20      	cmp	r3, #32
 800acb0:	d810      	bhi.n	800acd4 <UART_SetConfig+0x174>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d002      	beq.n	800acbc <UART_SetConfig+0x15c>
 800acb6:	2b10      	cmp	r3, #16
 800acb8:	d006      	beq.n	800acc8 <UART_SetConfig+0x168>
 800acba:	e00b      	b.n	800acd4 <UART_SetConfig+0x174>
 800acbc:	2300      	movs	r3, #0
 800acbe:	77fb      	strb	r3, [r7, #31]
 800acc0:	e0f2      	b.n	800aea8 <UART_SetConfig+0x348>
 800acc2:	2302      	movs	r3, #2
 800acc4:	77fb      	strb	r3, [r7, #31]
 800acc6:	e0ef      	b.n	800aea8 <UART_SetConfig+0x348>
 800acc8:	2304      	movs	r3, #4
 800acca:	77fb      	strb	r3, [r7, #31]
 800accc:	e0ec      	b.n	800aea8 <UART_SetConfig+0x348>
 800acce:	2308      	movs	r3, #8
 800acd0:	77fb      	strb	r3, [r7, #31]
 800acd2:	e0e9      	b.n	800aea8 <UART_SetConfig+0x348>
 800acd4:	2310      	movs	r3, #16
 800acd6:	77fb      	strb	r3, [r7, #31]
 800acd8:	e0e6      	b.n	800aea8 <UART_SetConfig+0x348>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a56      	ldr	r2, [pc, #344]	@ (800ae38 <UART_SetConfig+0x2d8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d120      	bne.n	800ad26 <UART_SetConfig+0x1c6>
 800ace4:	4b51      	ldr	r3, [pc, #324]	@ (800ae2c <UART_SetConfig+0x2cc>)
 800ace6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800acee:	2bc0      	cmp	r3, #192	@ 0xc0
 800acf0:	d013      	beq.n	800ad1a <UART_SetConfig+0x1ba>
 800acf2:	2bc0      	cmp	r3, #192	@ 0xc0
 800acf4:	d814      	bhi.n	800ad20 <UART_SetConfig+0x1c0>
 800acf6:	2b80      	cmp	r3, #128	@ 0x80
 800acf8:	d009      	beq.n	800ad0e <UART_SetConfig+0x1ae>
 800acfa:	2b80      	cmp	r3, #128	@ 0x80
 800acfc:	d810      	bhi.n	800ad20 <UART_SetConfig+0x1c0>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <UART_SetConfig+0x1a8>
 800ad02:	2b40      	cmp	r3, #64	@ 0x40
 800ad04:	d006      	beq.n	800ad14 <UART_SetConfig+0x1b4>
 800ad06:	e00b      	b.n	800ad20 <UART_SetConfig+0x1c0>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	77fb      	strb	r3, [r7, #31]
 800ad0c:	e0cc      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad0e:	2302      	movs	r3, #2
 800ad10:	77fb      	strb	r3, [r7, #31]
 800ad12:	e0c9      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad14:	2304      	movs	r3, #4
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e0c6      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	77fb      	strb	r3, [r7, #31]
 800ad1e:	e0c3      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad20:	2310      	movs	r3, #16
 800ad22:	77fb      	strb	r3, [r7, #31]
 800ad24:	e0c0      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a44      	ldr	r2, [pc, #272]	@ (800ae3c <UART_SetConfig+0x2dc>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d125      	bne.n	800ad7c <UART_SetConfig+0x21c>
 800ad30:	4b3e      	ldr	r3, [pc, #248]	@ (800ae2c <UART_SetConfig+0x2cc>)
 800ad32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad3e:	d017      	beq.n	800ad70 <UART_SetConfig+0x210>
 800ad40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad44:	d817      	bhi.n	800ad76 <UART_SetConfig+0x216>
 800ad46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad4a:	d00b      	beq.n	800ad64 <UART_SetConfig+0x204>
 800ad4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad50:	d811      	bhi.n	800ad76 <UART_SetConfig+0x216>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <UART_SetConfig+0x1fe>
 800ad56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad5a:	d006      	beq.n	800ad6a <UART_SetConfig+0x20a>
 800ad5c:	e00b      	b.n	800ad76 <UART_SetConfig+0x216>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	77fb      	strb	r3, [r7, #31]
 800ad62:	e0a1      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad64:	2302      	movs	r3, #2
 800ad66:	77fb      	strb	r3, [r7, #31]
 800ad68:	e09e      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad6a:	2304      	movs	r3, #4
 800ad6c:	77fb      	strb	r3, [r7, #31]
 800ad6e:	e09b      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad70:	2308      	movs	r3, #8
 800ad72:	77fb      	strb	r3, [r7, #31]
 800ad74:	e098      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad76:	2310      	movs	r3, #16
 800ad78:	77fb      	strb	r3, [r7, #31]
 800ad7a:	e095      	b.n	800aea8 <UART_SetConfig+0x348>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a2f      	ldr	r2, [pc, #188]	@ (800ae40 <UART_SetConfig+0x2e0>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d125      	bne.n	800add2 <UART_SetConfig+0x272>
 800ad86:	4b29      	ldr	r3, [pc, #164]	@ (800ae2c <UART_SetConfig+0x2cc>)
 800ad88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad94:	d017      	beq.n	800adc6 <UART_SetConfig+0x266>
 800ad96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad9a:	d817      	bhi.n	800adcc <UART_SetConfig+0x26c>
 800ad9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada0:	d00b      	beq.n	800adba <UART_SetConfig+0x25a>
 800ada2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada6:	d811      	bhi.n	800adcc <UART_SetConfig+0x26c>
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <UART_SetConfig+0x254>
 800adac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adb0:	d006      	beq.n	800adc0 <UART_SetConfig+0x260>
 800adb2:	e00b      	b.n	800adcc <UART_SetConfig+0x26c>
 800adb4:	2301      	movs	r3, #1
 800adb6:	77fb      	strb	r3, [r7, #31]
 800adb8:	e076      	b.n	800aea8 <UART_SetConfig+0x348>
 800adba:	2302      	movs	r3, #2
 800adbc:	77fb      	strb	r3, [r7, #31]
 800adbe:	e073      	b.n	800aea8 <UART_SetConfig+0x348>
 800adc0:	2304      	movs	r3, #4
 800adc2:	77fb      	strb	r3, [r7, #31]
 800adc4:	e070      	b.n	800aea8 <UART_SetConfig+0x348>
 800adc6:	2308      	movs	r3, #8
 800adc8:	77fb      	strb	r3, [r7, #31]
 800adca:	e06d      	b.n	800aea8 <UART_SetConfig+0x348>
 800adcc:	2310      	movs	r3, #16
 800adce:	77fb      	strb	r3, [r7, #31]
 800add0:	e06a      	b.n	800aea8 <UART_SetConfig+0x348>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae44 <UART_SetConfig+0x2e4>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d138      	bne.n	800ae4e <UART_SetConfig+0x2ee>
 800addc:	4b13      	ldr	r3, [pc, #76]	@ (800ae2c <UART_SetConfig+0x2cc>)
 800adde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ade6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adea:	d017      	beq.n	800ae1c <UART_SetConfig+0x2bc>
 800adec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adf0:	d82a      	bhi.n	800ae48 <UART_SetConfig+0x2e8>
 800adf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf6:	d00b      	beq.n	800ae10 <UART_SetConfig+0x2b0>
 800adf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adfc:	d824      	bhi.n	800ae48 <UART_SetConfig+0x2e8>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <UART_SetConfig+0x2aa>
 800ae02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae06:	d006      	beq.n	800ae16 <UART_SetConfig+0x2b6>
 800ae08:	e01e      	b.n	800ae48 <UART_SetConfig+0x2e8>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	77fb      	strb	r3, [r7, #31]
 800ae0e:	e04b      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae10:	2302      	movs	r3, #2
 800ae12:	77fb      	strb	r3, [r7, #31]
 800ae14:	e048      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae16:	2304      	movs	r3, #4
 800ae18:	77fb      	strb	r3, [r7, #31]
 800ae1a:	e045      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae1c:	2308      	movs	r3, #8
 800ae1e:	77fb      	strb	r3, [r7, #31]
 800ae20:	e042      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae22:	bf00      	nop
 800ae24:	efff69f3 	.word	0xefff69f3
 800ae28:	40011000 	.word	0x40011000
 800ae2c:	40023800 	.word	0x40023800
 800ae30:	40004400 	.word	0x40004400
 800ae34:	40004800 	.word	0x40004800
 800ae38:	40004c00 	.word	0x40004c00
 800ae3c:	40005000 	.word	0x40005000
 800ae40:	40011400 	.word	0x40011400
 800ae44:	40007800 	.word	0x40007800
 800ae48:	2310      	movs	r3, #16
 800ae4a:	77fb      	strb	r3, [r7, #31]
 800ae4c:	e02c      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a72      	ldr	r2, [pc, #456]	@ (800b01c <UART_SetConfig+0x4bc>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d125      	bne.n	800aea4 <UART_SetConfig+0x344>
 800ae58:	4b71      	ldr	r3, [pc, #452]	@ (800b020 <UART_SetConfig+0x4c0>)
 800ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ae62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae66:	d017      	beq.n	800ae98 <UART_SetConfig+0x338>
 800ae68:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae6c:	d817      	bhi.n	800ae9e <UART_SetConfig+0x33e>
 800ae6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae72:	d00b      	beq.n	800ae8c <UART_SetConfig+0x32c>
 800ae74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae78:	d811      	bhi.n	800ae9e <UART_SetConfig+0x33e>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <UART_SetConfig+0x326>
 800ae7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae82:	d006      	beq.n	800ae92 <UART_SetConfig+0x332>
 800ae84:	e00b      	b.n	800ae9e <UART_SetConfig+0x33e>
 800ae86:	2300      	movs	r3, #0
 800ae88:	77fb      	strb	r3, [r7, #31]
 800ae8a:	e00d      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	e00a      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae92:	2304      	movs	r3, #4
 800ae94:	77fb      	strb	r3, [r7, #31]
 800ae96:	e007      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae98:	2308      	movs	r3, #8
 800ae9a:	77fb      	strb	r3, [r7, #31]
 800ae9c:	e004      	b.n	800aea8 <UART_SetConfig+0x348>
 800ae9e:	2310      	movs	r3, #16
 800aea0:	77fb      	strb	r3, [r7, #31]
 800aea2:	e001      	b.n	800aea8 <UART_SetConfig+0x348>
 800aea4:	2310      	movs	r3, #16
 800aea6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	69db      	ldr	r3, [r3, #28]
 800aeac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeb0:	d15b      	bne.n	800af6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aeb2:	7ffb      	ldrb	r3, [r7, #31]
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d828      	bhi.n	800af0a <UART_SetConfig+0x3aa>
 800aeb8:	a201      	add	r2, pc, #4	@ (adr r2, 800aec0 <UART_SetConfig+0x360>)
 800aeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebe:	bf00      	nop
 800aec0:	0800aee5 	.word	0x0800aee5
 800aec4:	0800aeed 	.word	0x0800aeed
 800aec8:	0800aef5 	.word	0x0800aef5
 800aecc:	0800af0b 	.word	0x0800af0b
 800aed0:	0800aefb 	.word	0x0800aefb
 800aed4:	0800af0b 	.word	0x0800af0b
 800aed8:	0800af0b 	.word	0x0800af0b
 800aedc:	0800af0b 	.word	0x0800af0b
 800aee0:	0800af03 	.word	0x0800af03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aee4:	f7fc ff7e 	bl	8007de4 <HAL_RCC_GetPCLK1Freq>
 800aee8:	61b8      	str	r0, [r7, #24]
        break;
 800aeea:	e013      	b.n	800af14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeec:	f7fc ff8e 	bl	8007e0c <HAL_RCC_GetPCLK2Freq>
 800aef0:	61b8      	str	r0, [r7, #24]
        break;
 800aef2:	e00f      	b.n	800af14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aef4:	4b4b      	ldr	r3, [pc, #300]	@ (800b024 <UART_SetConfig+0x4c4>)
 800aef6:	61bb      	str	r3, [r7, #24]
        break;
 800aef8:	e00c      	b.n	800af14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aefa:	f7fc fea1 	bl	8007c40 <HAL_RCC_GetSysClockFreq>
 800aefe:	61b8      	str	r0, [r7, #24]
        break;
 800af00:	e008      	b.n	800af14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af06:	61bb      	str	r3, [r7, #24]
        break;
 800af08:	e004      	b.n	800af14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	77bb      	strb	r3, [r7, #30]
        break;
 800af12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d074      	beq.n	800b004 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	005a      	lsls	r2, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	085b      	lsrs	r3, r3, #1
 800af24:	441a      	add	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	2b0f      	cmp	r3, #15
 800af34:	d916      	bls.n	800af64 <UART_SetConfig+0x404>
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af3c:	d212      	bcs.n	800af64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	b29b      	uxth	r3, r3
 800af42:	f023 030f 	bic.w	r3, r3, #15
 800af46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	085b      	lsrs	r3, r3, #1
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	f003 0307 	and.w	r3, r3, #7
 800af52:	b29a      	uxth	r2, r3
 800af54:	89fb      	ldrh	r3, [r7, #14]
 800af56:	4313      	orrs	r3, r2
 800af58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	89fa      	ldrh	r2, [r7, #14]
 800af60:	60da      	str	r2, [r3, #12]
 800af62:	e04f      	b.n	800b004 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	77bb      	strb	r3, [r7, #30]
 800af68:	e04c      	b.n	800b004 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af6a:	7ffb      	ldrb	r3, [r7, #31]
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	d828      	bhi.n	800afc2 <UART_SetConfig+0x462>
 800af70:	a201      	add	r2, pc, #4	@ (adr r2, 800af78 <UART_SetConfig+0x418>)
 800af72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af76:	bf00      	nop
 800af78:	0800af9d 	.word	0x0800af9d
 800af7c:	0800afa5 	.word	0x0800afa5
 800af80:	0800afad 	.word	0x0800afad
 800af84:	0800afc3 	.word	0x0800afc3
 800af88:	0800afb3 	.word	0x0800afb3
 800af8c:	0800afc3 	.word	0x0800afc3
 800af90:	0800afc3 	.word	0x0800afc3
 800af94:	0800afc3 	.word	0x0800afc3
 800af98:	0800afbb 	.word	0x0800afbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af9c:	f7fc ff22 	bl	8007de4 <HAL_RCC_GetPCLK1Freq>
 800afa0:	61b8      	str	r0, [r7, #24]
        break;
 800afa2:	e013      	b.n	800afcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afa4:	f7fc ff32 	bl	8007e0c <HAL_RCC_GetPCLK2Freq>
 800afa8:	61b8      	str	r0, [r7, #24]
        break;
 800afaa:	e00f      	b.n	800afcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afac:	4b1d      	ldr	r3, [pc, #116]	@ (800b024 <UART_SetConfig+0x4c4>)
 800afae:	61bb      	str	r3, [r7, #24]
        break;
 800afb0:	e00c      	b.n	800afcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afb2:	f7fc fe45 	bl	8007c40 <HAL_RCC_GetSysClockFreq>
 800afb6:	61b8      	str	r0, [r7, #24]
        break;
 800afb8:	e008      	b.n	800afcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afbe:	61bb      	str	r3, [r7, #24]
        break;
 800afc0:	e004      	b.n	800afcc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	77bb      	strb	r3, [r7, #30]
        break;
 800afca:	bf00      	nop
    }

    if (pclk != 0U)
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d018      	beq.n	800b004 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	085a      	lsrs	r2, r3, #1
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	441a      	add	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b0f      	cmp	r3, #15
 800afea:	d909      	bls.n	800b000 <UART_SetConfig+0x4a0>
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aff2:	d205      	bcs.n	800b000 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	60da      	str	r2, [r3, #12]
 800affe:	e001      	b.n	800b004 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b010:	7fbb      	ldrb	r3, [r7, #30]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3720      	adds	r7, #32
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	40007c00 	.word	0x40007c00
 800b020:	40023800 	.word	0x40023800
 800b024:	00f42400 	.word	0x00f42400

0800b028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b034:	f003 0308 	and.w	r3, r3, #8
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00a      	beq.n	800b052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	430a      	orrs	r2, r1
 800b050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	430a      	orrs	r2, r1
 800b072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00a      	beq.n	800b096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b09a:	f003 0304 	and.w	r3, r3, #4
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0bc:	f003 0310 	and.w	r3, r3, #16
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00a      	beq.n	800b0da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0de:	f003 0320 	and.w	r3, r3, #32
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01a      	beq.n	800b13e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b126:	d10a      	bne.n	800b13e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	430a      	orrs	r2, r1
 800b13c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00a      	beq.n	800b160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	430a      	orrs	r2, r1
 800b15e:	605a      	str	r2, [r3, #4]
  }
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08c      	sub	sp, #48	@ 0x30
 800b170:	af02      	add	r7, sp, #8
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b17c:	f7f6 ff4c 	bl	8002018 <HAL_GetTick>
 800b180:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0308 	and.w	r3, r3, #8
 800b18c:	2b08      	cmp	r3, #8
 800b18e:	d12e      	bne.n	800b1ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	2200      	movs	r2, #0
 800b19a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f83b 	bl	800b21a <UART_WaitOnFlagUntilTimeout>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d021      	beq.n	800b1ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1be:	623b      	str	r3, [r7, #32]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	61fb      	str	r3, [r7, #28]
 800b1ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1cc:	69b9      	ldr	r1, [r7, #24]
 800b1ce:	69fa      	ldr	r2, [r7, #28]
 800b1d0:	e841 2300 	strex	r3, r2, [r1]
 800b1d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1e6      	bne.n	800b1aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e011      	b.n	800b212 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3728      	adds	r7, #40	@ 0x28
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	603b      	str	r3, [r7, #0]
 800b226:	4613      	mov	r3, r2
 800b228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b22a:	e04f      	b.n	800b2cc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b232:	d04b      	beq.n	800b2cc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b234:	f7f6 fef0 	bl	8002018 <HAL_GetTick>
 800b238:	4602      	mov	r2, r0
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	429a      	cmp	r2, r3
 800b242:	d302      	bcc.n	800b24a <UART_WaitOnFlagUntilTimeout+0x30>
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	e04e      	b.n	800b2ec <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 0304 	and.w	r3, r3, #4
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d037      	beq.n	800b2cc <UART_WaitOnFlagUntilTimeout+0xb2>
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b80      	cmp	r3, #128	@ 0x80
 800b260:	d034      	beq.n	800b2cc <UART_WaitOnFlagUntilTimeout+0xb2>
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b40      	cmp	r3, #64	@ 0x40
 800b266:	d031      	beq.n	800b2cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f003 0308 	and.w	r3, r3, #8
 800b272:	2b08      	cmp	r3, #8
 800b274:	d110      	bne.n	800b298 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2208      	movs	r2, #8
 800b27c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f000 f8fe 	bl	800b480 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2208      	movs	r2, #8
 800b288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e029      	b.n	800b2ec <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2a6:	d111      	bne.n	800b2cc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 f8e4 	bl	800b480 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e00f      	b.n	800b2ec <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69da      	ldr	r2, [r3, #28]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	bf0c      	ite	eq
 800b2dc:	2301      	moveq	r3, #1
 800b2de:	2300      	movne	r3, #0
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	79fb      	ldrb	r3, [r7, #7]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d0a0      	beq.n	800b22c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b096      	sub	sp, #88	@ 0x58
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	4613      	mov	r3, r2
 800b300:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	88fa      	ldrh	r2, [r7, #6]
 800b30c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2222      	movs	r2, #34	@ 0x22
 800b31c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b324:	2b00      	cmp	r3, #0
 800b326:	d028      	beq.n	800b37a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b32c:	4a3e      	ldr	r2, [pc, #248]	@ (800b428 <UART_Start_Receive_DMA+0x134>)
 800b32e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b334:	4a3d      	ldr	r2, [pc, #244]	@ (800b42c <UART_Start_Receive_DMA+0x138>)
 800b336:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b33c:	4a3c      	ldr	r2, [pc, #240]	@ (800b430 <UART_Start_Receive_DMA+0x13c>)
 800b33e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b344:	2200      	movs	r2, #0
 800b346:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3324      	adds	r3, #36	@ 0x24
 800b352:	4619      	mov	r1, r3
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b358:	461a      	mov	r2, r3
 800b35a:	88fb      	ldrh	r3, [r7, #6]
 800b35c:	f7f7 fedc 	bl	8003118 <HAL_DMA_Start_IT>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d009      	beq.n	800b37a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2210      	movs	r2, #16
 800b36a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2220      	movs	r2, #32
 800b372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e051      	b.n	800b41e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d018      	beq.n	800b3b4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38a:	e853 3f00 	ldrex	r3, [r3]
 800b38e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b396:	657b      	str	r3, [r7, #84]	@ 0x54
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b3a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3a8:	e841 2300 	strex	r3, r2, [r1]
 800b3ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b3ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e6      	bne.n	800b382 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3be:	e853 3f00 	ldrex	r3, [r3]
 800b3c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c6:	f043 0301 	orr.w	r3, r3, #1
 800b3ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b3d4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b3d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b3da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3dc:	e841 2300 	strex	r3, r2, [r1]
 800b3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e5      	bne.n	800b3b4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	e853 3f00 	ldrex	r3, [r3]
 800b3f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3308      	adds	r3, #8
 800b406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b408:	623a      	str	r2, [r7, #32]
 800b40a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40c:	69f9      	ldr	r1, [r7, #28]
 800b40e:	6a3a      	ldr	r2, [r7, #32]
 800b410:	e841 2300 	strex	r3, r2, [r1]
 800b414:	61bb      	str	r3, [r7, #24]
   return(result);
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1e5      	bne.n	800b3e8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3758      	adds	r7, #88	@ 0x58
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	0800b549 	.word	0x0800b549
 800b42c:	0800b6a7 	.word	0x0800b6a7
 800b430:	0800b719 	.word	0x0800b719

0800b434 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b434:	b480      	push	{r7}
 800b436:	b089      	sub	sp, #36	@ 0x24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	60bb      	str	r3, [r7, #8]
   return(result);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b450:	61fb      	str	r3, [r7, #28]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	61bb      	str	r3, [r7, #24]
 800b45c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45e:	6979      	ldr	r1, [r7, #20]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	e841 2300 	strex	r3, r2, [r1]
 800b466:	613b      	str	r3, [r7, #16]
   return(result);
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e6      	bne.n	800b43c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2220      	movs	r2, #32
 800b472:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b474:	bf00      	nop
 800b476:	3724      	adds	r7, #36	@ 0x24
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b480:	b480      	push	{r7}
 800b482:	b095      	sub	sp, #84	@ 0x54
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b490:	e853 3f00 	ldrex	r3, [r3]
 800b494:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4ae:	e841 2300 	strex	r3, r2, [r1]
 800b4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1e6      	bne.n	800b488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3308      	adds	r3, #8
 800b4c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	e853 3f00 	ldrex	r3, [r3]
 800b4c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	f023 0301 	bic.w	r3, r3, #1
 800b4d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e5      	bne.n	800b4ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d118      	bne.n	800b528 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	60bb      	str	r3, [r7, #8]
   return(result);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f023 0310 	bic.w	r3, r3, #16
 800b50a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b514:	61bb      	str	r3, [r7, #24]
 800b516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6979      	ldr	r1, [r7, #20]
 800b51a:	69ba      	ldr	r2, [r7, #24]
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	613b      	str	r3, [r7, #16]
   return(result);
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e6      	bne.n	800b4f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2220      	movs	r2, #32
 800b52c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b53c:	bf00      	nop
 800b53e:	3754      	adds	r7, #84	@ 0x54
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b09c      	sub	sp, #112	@ 0x70
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b554:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b55e:	d071      	beq.n	800b644 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b562:	2200      	movs	r2, #0
 800b564:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b57c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b57e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b586:	657b      	str	r3, [r7, #84]	@ 0x54
 800b588:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b58c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e6      	bne.n	800b568 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b59a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ac:	f023 0301 	bic.w	r3, r3, #1
 800b5b0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b5b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b5ba:	643a      	str	r2, [r7, #64]	@ 0x40
 800b5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5c2:	e841 2300 	strex	r3, r2, [r1]
 800b5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1e5      	bne.n	800b59a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b5e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b5ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e5      	bne.n	800b5ce <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b604:	2220      	movs	r2, #32
 800b606:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d118      	bne.n	800b644 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	e853 3f00 	ldrex	r3, [r3]
 800b61e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f023 0310 	bic.w	r3, r3, #16
 800b626:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	461a      	mov	r2, r3
 800b62e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b630:	61bb      	str	r3, [r7, #24]
 800b632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b634:	6979      	ldr	r1, [r7, #20]
 800b636:	69ba      	ldr	r2, [r7, #24]
 800b638:	e841 2300 	strex	r3, r2, [r1]
 800b63c:	613b      	str	r3, [r7, #16]
   return(result);
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1e6      	bne.n	800b612 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b646:	2200      	movs	r2, #0
 800b648:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b64c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d122      	bne.n	800b698 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800b652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b654:	2200      	movs	r2, #0
 800b656:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b666:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b66a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b66e:	429a      	cmp	r2, r3
 800b670:	d204      	bcs.n	800b67c <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b674:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b678:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b67c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b67e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b688:	b29b      	uxth	r3, r3
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	4619      	mov	r1, r3
 800b690:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b692:	f7ff fa59 	bl	800ab48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b696:	e002      	b.n	800b69e <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800b698:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b69a:	f00c f809 	bl	80176b0 <HAL_UART_RxCpltCallback>
}
 800b69e:	bf00      	nop
 800b6a0:	3770      	adds	r7, #112	@ 0x70
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d123      	bne.n	800b70a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b6c8:	085b      	lsrs	r3, r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b6e0:	897a      	ldrh	r2, [r7, #10]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d803      	bhi.n	800b6ee <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	897a      	ldrh	r2, [r7, #10]
 800b6ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	4619      	mov	r1, r3
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7ff fa20 	bl	800ab48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b708:	e002      	b.n	800b710 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f7ff fa08 	bl	800ab20 <HAL_UART_RxHalfCpltCallback>
}
 800b710:	bf00      	nop
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b724:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b72a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b732:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b73e:	2b80      	cmp	r3, #128	@ 0x80
 800b740:	d109      	bne.n	800b756 <UART_DMAError+0x3e>
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b21      	cmp	r3, #33	@ 0x21
 800b746:	d106      	bne.n	800b756 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b750:	6978      	ldr	r0, [r7, #20]
 800b752:	f7ff fe6f 	bl	800b434 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b760:	2b40      	cmp	r3, #64	@ 0x40
 800b762:	d109      	bne.n	800b778 <UART_DMAError+0x60>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2b22      	cmp	r3, #34	@ 0x22
 800b768:	d106      	bne.n	800b778 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b772:	6978      	ldr	r0, [r7, #20]
 800b774:	f7ff fe84 	bl	800b480 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b77e:	f043 0210 	orr.w	r2, r3, #16
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b788:	6978      	ldr	r0, [r7, #20]
 800b78a:	f7ff f9d3 	bl	800ab34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b78e:	bf00      	nop
 800b790:	3718      	adds	r7, #24
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b084      	sub	sp, #16
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7ff f9c1 	bl	800ab34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7b2:	bf00      	nop
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b08f      	sub	sp, #60	@ 0x3c
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7c6:	2b21      	cmp	r3, #33	@ 0x21
 800b7c8:	d14c      	bne.n	800b864 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d132      	bne.n	800b83c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e6      	bne.n	800b7d6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	e853 3f00 	ldrex	r3, [r3]
 800b814:	60bb      	str	r3, [r7, #8]
   return(result);
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b81c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b826:	61bb      	str	r3, [r7, #24]
 800b828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82a:	6979      	ldr	r1, [r7, #20]
 800b82c:	69ba      	ldr	r2, [r7, #24]
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	613b      	str	r3, [r7, #16]
   return(result);
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1e6      	bne.n	800b808 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b83a:	e013      	b.n	800b864 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b840:	781a      	ldrb	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b84c:	1c5a      	adds	r2, r3, #1
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b858:	b29b      	uxth	r3, r3
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b864:	bf00      	nop
 800b866:	373c      	adds	r7, #60	@ 0x3c
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b870:	b480      	push	{r7}
 800b872:	b091      	sub	sp, #68	@ 0x44
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b87c:	2b21      	cmp	r3, #33	@ 0x21
 800b87e:	d151      	bne.n	800b924 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b886:	b29b      	uxth	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d132      	bne.n	800b8f2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b894:	e853 3f00 	ldrex	r3, [r3]
 800b898:	623b      	str	r3, [r7, #32]
   return(result);
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8b2:	e841 2300 	strex	r3, r2, [r1]
 800b8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1e6      	bne.n	800b88c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	e853 3f00 	ldrex	r3, [r3]
 800b8ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8dc:	61fb      	str	r3, [r7, #28]
 800b8de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e0:	69b9      	ldr	r1, [r7, #24]
 800b8e2:	69fa      	ldr	r2, [r7, #28]
 800b8e4:	e841 2300 	strex	r3, r2, [r1]
 800b8e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1e6      	bne.n	800b8be <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b8f0:	e018      	b.n	800b924 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b906:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b90c:	1c9a      	adds	r2, r3, #2
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b918:	b29b      	uxth	r3, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b924:	bf00      	nop
 800b926:	3744      	adds	r7, #68	@ 0x44
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b088      	sub	sp, #32
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	e853 3f00 	ldrex	r3, [r3]
 800b944:	60bb      	str	r3, [r7, #8]
   return(result);
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b94c:	61fb      	str	r3, [r7, #28]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	61bb      	str	r3, [r7, #24]
 800b958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95a:	6979      	ldr	r1, [r7, #20]
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	e841 2300 	strex	r3, r2, [r1]
 800b962:	613b      	str	r3, [r7, #16]
   return(result);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e6      	bne.n	800b938 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2220      	movs	r2, #32
 800b96e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff f8c8 	bl	800ab0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b97c:	bf00      	nop
 800b97e:	3720      	adds	r7, #32
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b98a:	4b87      	ldr	r3, [pc, #540]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b98c:	220a      	movs	r2, #10
 800b98e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800b990:	4b85      	ldr	r3, [pc, #532]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b992:	2200      	movs	r2, #0
 800b994:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b996:	4b84      	ldr	r3, [pc, #528]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b998:	2201      	movs	r2, #1
 800b99a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800b99c:	4b82      	ldr	r3, [pc, #520]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b99e:	2264      	movs	r2, #100	@ 0x64
 800b9a0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b9a2:	4b82      	ldr	r3, [pc, #520]	@ (800bbac <MX_LWIP_Init+0x228>)
 800b9a4:	22ff      	movs	r2, #255	@ 0xff
 800b9a6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b9a8:	4b80      	ldr	r3, [pc, #512]	@ (800bbac <MX_LWIP_Init+0x228>)
 800b9aa:	22ff      	movs	r2, #255	@ 0xff
 800b9ac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b9ae:	4b7f      	ldr	r3, [pc, #508]	@ (800bbac <MX_LWIP_Init+0x228>)
 800b9b0:	22ff      	movs	r2, #255	@ 0xff
 800b9b2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b9b4:	4b7d      	ldr	r3, [pc, #500]	@ (800bbac <MX_LWIP_Init+0x228>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800b9ba:	4b7d      	ldr	r3, [pc, #500]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800b9bc:	220a      	movs	r2, #10
 800b9be:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b9c0:	4b7b      	ldr	r3, [pc, #492]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b9c6:	4b7a      	ldr	r3, [pc, #488]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800b9cc:	4b78      	ldr	r3, [pc, #480]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800b9ce:	2265      	movs	r2, #101	@ 0x65
 800b9d0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b9d2:	f000 fd6a 	bl	800c4aa <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b9d6:	4b74      	ldr	r3, [pc, #464]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	061a      	lsls	r2, r3, #24
 800b9dc:	4b72      	ldr	r3, [pc, #456]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b9de:	785b      	ldrb	r3, [r3, #1]
 800b9e0:	041b      	lsls	r3, r3, #16
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	4b70      	ldr	r3, [pc, #448]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b9e6:	789b      	ldrb	r3, [r3, #2]
 800b9e8:	021b      	lsls	r3, r3, #8
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	4a6e      	ldr	r2, [pc, #440]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b9ee:	78d2      	ldrb	r2, [r2, #3]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	061a      	lsls	r2, r3, #24
 800b9f4:	4b6c      	ldr	r3, [pc, #432]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	0619      	lsls	r1, r3, #24
 800b9fa:	4b6b      	ldr	r3, [pc, #428]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800b9fc:	785b      	ldrb	r3, [r3, #1]
 800b9fe:	041b      	lsls	r3, r3, #16
 800ba00:	4319      	orrs	r1, r3
 800ba02:	4b69      	ldr	r3, [pc, #420]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba04:	789b      	ldrb	r3, [r3, #2]
 800ba06:	021b      	lsls	r3, r3, #8
 800ba08:	430b      	orrs	r3, r1
 800ba0a:	4967      	ldr	r1, [pc, #412]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba0c:	78c9      	ldrb	r1, [r1, #3]
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	021b      	lsls	r3, r3, #8
 800ba12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba16:	431a      	orrs	r2, r3
 800ba18:	4b63      	ldr	r3, [pc, #396]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	0619      	lsls	r1, r3, #24
 800ba1e:	4b62      	ldr	r3, [pc, #392]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba20:	785b      	ldrb	r3, [r3, #1]
 800ba22:	041b      	lsls	r3, r3, #16
 800ba24:	4319      	orrs	r1, r3
 800ba26:	4b60      	ldr	r3, [pc, #384]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba28:	789b      	ldrb	r3, [r3, #2]
 800ba2a:	021b      	lsls	r3, r3, #8
 800ba2c:	430b      	orrs	r3, r1
 800ba2e:	495e      	ldr	r1, [pc, #376]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba30:	78c9      	ldrb	r1, [r1, #3]
 800ba32:	430b      	orrs	r3, r1
 800ba34:	0a1b      	lsrs	r3, r3, #8
 800ba36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba3a:	431a      	orrs	r2, r3
 800ba3c:	4b5a      	ldr	r3, [pc, #360]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	0619      	lsls	r1, r3, #24
 800ba42:	4b59      	ldr	r3, [pc, #356]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba44:	785b      	ldrb	r3, [r3, #1]
 800ba46:	041b      	lsls	r3, r3, #16
 800ba48:	4319      	orrs	r1, r3
 800ba4a:	4b57      	ldr	r3, [pc, #348]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba4c:	789b      	ldrb	r3, [r3, #2]
 800ba4e:	021b      	lsls	r3, r3, #8
 800ba50:	430b      	orrs	r3, r1
 800ba52:	4955      	ldr	r1, [pc, #340]	@ (800bba8 <MX_LWIP_Init+0x224>)
 800ba54:	78c9      	ldrb	r1, [r1, #3]
 800ba56:	430b      	orrs	r3, r1
 800ba58:	0e1b      	lsrs	r3, r3, #24
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	4a55      	ldr	r2, [pc, #340]	@ (800bbb4 <MX_LWIP_Init+0x230>)
 800ba5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ba60:	4b52      	ldr	r3, [pc, #328]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	061a      	lsls	r2, r3, #24
 800ba66:	4b51      	ldr	r3, [pc, #324]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba68:	785b      	ldrb	r3, [r3, #1]
 800ba6a:	041b      	lsls	r3, r3, #16
 800ba6c:	431a      	orrs	r2, r3
 800ba6e:	4b4f      	ldr	r3, [pc, #316]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba70:	789b      	ldrb	r3, [r3, #2]
 800ba72:	021b      	lsls	r3, r3, #8
 800ba74:	4313      	orrs	r3, r2
 800ba76:	4a4d      	ldr	r2, [pc, #308]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba78:	78d2      	ldrb	r2, [r2, #3]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	061a      	lsls	r2, r3, #24
 800ba7e:	4b4b      	ldr	r3, [pc, #300]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	0619      	lsls	r1, r3, #24
 800ba84:	4b49      	ldr	r3, [pc, #292]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba86:	785b      	ldrb	r3, [r3, #1]
 800ba88:	041b      	lsls	r3, r3, #16
 800ba8a:	4319      	orrs	r1, r3
 800ba8c:	4b47      	ldr	r3, [pc, #284]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba8e:	789b      	ldrb	r3, [r3, #2]
 800ba90:	021b      	lsls	r3, r3, #8
 800ba92:	430b      	orrs	r3, r1
 800ba94:	4945      	ldr	r1, [pc, #276]	@ (800bbac <MX_LWIP_Init+0x228>)
 800ba96:	78c9      	ldrb	r1, [r1, #3]
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	021b      	lsls	r3, r3, #8
 800ba9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800baa0:	431a      	orrs	r2, r3
 800baa2:	4b42      	ldr	r3, [pc, #264]	@ (800bbac <MX_LWIP_Init+0x228>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	0619      	lsls	r1, r3, #24
 800baa8:	4b40      	ldr	r3, [pc, #256]	@ (800bbac <MX_LWIP_Init+0x228>)
 800baaa:	785b      	ldrb	r3, [r3, #1]
 800baac:	041b      	lsls	r3, r3, #16
 800baae:	4319      	orrs	r1, r3
 800bab0:	4b3e      	ldr	r3, [pc, #248]	@ (800bbac <MX_LWIP_Init+0x228>)
 800bab2:	789b      	ldrb	r3, [r3, #2]
 800bab4:	021b      	lsls	r3, r3, #8
 800bab6:	430b      	orrs	r3, r1
 800bab8:	493c      	ldr	r1, [pc, #240]	@ (800bbac <MX_LWIP_Init+0x228>)
 800baba:	78c9      	ldrb	r1, [r1, #3]
 800babc:	430b      	orrs	r3, r1
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bac4:	431a      	orrs	r2, r3
 800bac6:	4b39      	ldr	r3, [pc, #228]	@ (800bbac <MX_LWIP_Init+0x228>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	0619      	lsls	r1, r3, #24
 800bacc:	4b37      	ldr	r3, [pc, #220]	@ (800bbac <MX_LWIP_Init+0x228>)
 800bace:	785b      	ldrb	r3, [r3, #1]
 800bad0:	041b      	lsls	r3, r3, #16
 800bad2:	4319      	orrs	r1, r3
 800bad4:	4b35      	ldr	r3, [pc, #212]	@ (800bbac <MX_LWIP_Init+0x228>)
 800bad6:	789b      	ldrb	r3, [r3, #2]
 800bad8:	021b      	lsls	r3, r3, #8
 800bada:	430b      	orrs	r3, r1
 800badc:	4933      	ldr	r1, [pc, #204]	@ (800bbac <MX_LWIP_Init+0x228>)
 800bade:	78c9      	ldrb	r1, [r1, #3]
 800bae0:	430b      	orrs	r3, r1
 800bae2:	0e1b      	lsrs	r3, r3, #24
 800bae4:	4313      	orrs	r3, r2
 800bae6:	4a34      	ldr	r2, [pc, #208]	@ (800bbb8 <MX_LWIP_Init+0x234>)
 800bae8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800baea:	4b31      	ldr	r3, [pc, #196]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	061a      	lsls	r2, r3, #24
 800baf0:	4b2f      	ldr	r3, [pc, #188]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800baf2:	785b      	ldrb	r3, [r3, #1]
 800baf4:	041b      	lsls	r3, r3, #16
 800baf6:	431a      	orrs	r2, r3
 800baf8:	4b2d      	ldr	r3, [pc, #180]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bafa:	789b      	ldrb	r3, [r3, #2]
 800bafc:	021b      	lsls	r3, r3, #8
 800bafe:	4313      	orrs	r3, r2
 800bb00:	4a2b      	ldr	r2, [pc, #172]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb02:	78d2      	ldrb	r2, [r2, #3]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	061a      	lsls	r2, r3, #24
 800bb08:	4b29      	ldr	r3, [pc, #164]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	0619      	lsls	r1, r3, #24
 800bb0e:	4b28      	ldr	r3, [pc, #160]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	041b      	lsls	r3, r3, #16
 800bb14:	4319      	orrs	r1, r3
 800bb16:	4b26      	ldr	r3, [pc, #152]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb18:	789b      	ldrb	r3, [r3, #2]
 800bb1a:	021b      	lsls	r3, r3, #8
 800bb1c:	430b      	orrs	r3, r1
 800bb1e:	4924      	ldr	r1, [pc, #144]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb20:	78c9      	ldrb	r1, [r1, #3]
 800bb22:	430b      	orrs	r3, r1
 800bb24:	021b      	lsls	r3, r3, #8
 800bb26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	4b20      	ldr	r3, [pc, #128]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	0619      	lsls	r1, r3, #24
 800bb32:	4b1f      	ldr	r3, [pc, #124]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb34:	785b      	ldrb	r3, [r3, #1]
 800bb36:	041b      	lsls	r3, r3, #16
 800bb38:	4319      	orrs	r1, r3
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb3c:	789b      	ldrb	r3, [r3, #2]
 800bb3e:	021b      	lsls	r3, r3, #8
 800bb40:	430b      	orrs	r3, r1
 800bb42:	491b      	ldr	r1, [pc, #108]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb44:	78c9      	ldrb	r1, [r1, #3]
 800bb46:	430b      	orrs	r3, r1
 800bb48:	0a1b      	lsrs	r3, r3, #8
 800bb4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	4b17      	ldr	r3, [pc, #92]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	0619      	lsls	r1, r3, #24
 800bb56:	4b16      	ldr	r3, [pc, #88]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb58:	785b      	ldrb	r3, [r3, #1]
 800bb5a:	041b      	lsls	r3, r3, #16
 800bb5c:	4319      	orrs	r1, r3
 800bb5e:	4b14      	ldr	r3, [pc, #80]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb60:	789b      	ldrb	r3, [r3, #2]
 800bb62:	021b      	lsls	r3, r3, #8
 800bb64:	430b      	orrs	r3, r1
 800bb66:	4912      	ldr	r1, [pc, #72]	@ (800bbb0 <MX_LWIP_Init+0x22c>)
 800bb68:	78c9      	ldrb	r1, [r1, #3]
 800bb6a:	430b      	orrs	r3, r1
 800bb6c:	0e1b      	lsrs	r3, r3, #24
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	4a12      	ldr	r2, [pc, #72]	@ (800bbbc <MX_LWIP_Init+0x238>)
 800bb72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bb74:	4b12      	ldr	r3, [pc, #72]	@ (800bbc0 <MX_LWIP_Init+0x23c>)
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	4b12      	ldr	r3, [pc, #72]	@ (800bbc4 <MX_LWIP_Init+0x240>)
 800bb7a:	9301      	str	r3, [sp, #4]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	4b0e      	ldr	r3, [pc, #56]	@ (800bbbc <MX_LWIP_Init+0x238>)
 800bb82:	4a0d      	ldr	r2, [pc, #52]	@ (800bbb8 <MX_LWIP_Init+0x234>)
 800bb84:	490b      	ldr	r1, [pc, #44]	@ (800bbb4 <MX_LWIP_Init+0x230>)
 800bb86:	4810      	ldr	r0, [pc, #64]	@ (800bbc8 <MX_LWIP_Init+0x244>)
 800bb88:	f001 f976 	bl	800ce78 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bb8c:	480e      	ldr	r0, [pc, #56]	@ (800bbc8 <MX_LWIP_Init+0x244>)
 800bb8e:	f001 fc07 	bl	800d3a0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bb92:	480d      	ldr	r0, [pc, #52]	@ (800bbc8 <MX_LWIP_Init+0x244>)
 800bb94:	f001 fc28 	bl	800d3e8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bb98:	490c      	ldr	r1, [pc, #48]	@ (800bbcc <MX_LWIP_Init+0x248>)
 800bb9a:	480b      	ldr	r0, [pc, #44]	@ (800bbc8 <MX_LWIP_Init+0x244>)
 800bb9c:	f001 fd26 	bl	800d5ec <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bba0:	bf00      	nop
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20000b00 	.word	0x20000b00
 800bbac:	20000b04 	.word	0x20000b04
 800bbb0:	20000b08 	.word	0x20000b08
 800bbb4:	20000af4 	.word	0x20000af4
 800bbb8:	20000af8 	.word	0x20000af8
 800bbbc:	20000afc 	.word	0x20000afc
 800bbc0:	080169f5 	.word	0x080169f5
 800bbc4:	0800bf45 	.word	0x0800bf45
 800bbc8:	20000ac0 	.word	0x20000ac0
 800bbcc:	0800bc21 	.word	0x0800bc21

0800bbd0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800bbd8:	f7f6 fa1e 	bl	8002018 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	4b08      	ldr	r3, [pc, #32]	@ (800bc00 <Ethernet_Link_Periodic_Handle+0x30>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b63      	cmp	r3, #99	@ 0x63
 800bbe6:	d907      	bls.n	800bbf8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800bbe8:	f7f6 fa16 	bl	8002018 <HAL_GetTick>
 800bbec:	4603      	mov	r3, r0
 800bbee:	4a04      	ldr	r2, [pc, #16]	@ (800bc00 <Ethernet_Link_Periodic_Handle+0x30>)
 800bbf0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fb0c 	bl	800c210 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20000abc 	.word	0x20000abc

0800bc04 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800bc08:	4804      	ldr	r0, [pc, #16]	@ (800bc1c <MX_LWIP_Process+0x18>)
 800bc0a:	f000 f97b 	bl	800bf04 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800bc0e:	f007 fd85 	bl	801371c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800bc12:	4802      	ldr	r0, [pc, #8]	@ (800bc1c <MX_LWIP_Process+0x18>)
 800bc14:	f7ff ffdc 	bl	800bbd0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800bc18:	bf00      	nop
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20000ac0 	.word	0x20000ac0

0800bc20 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <SCB_InvalidateDCache_by_Addr>:
{
 800bc34:	b480      	push	{r7}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bc46:	2320      	movs	r3, #32
 800bc48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc4a:	f3bf 8f4f 	dsb	sy
}
 800bc4e:	bf00      	nop
    while (op_size > 0) {
 800bc50:	e00b      	b.n	800bc6a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800bc52:	4a0d      	ldr	r2, [pc, #52]	@ (800bc88 <SCB_InvalidateDCache_by_Addr+0x54>)
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	4413      	add	r3, r2
 800bc60:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	dcf0      	bgt.n	800bc52 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800bc70:	f3bf 8f4f 	dsb	sy
}
 800bc74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bc76:	f3bf 8f6f 	isb	sy
}
 800bc7a:	bf00      	nop
}
 800bc7c:	bf00      	nop
 800bc7e:	371c      	adds	r7, #28
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	e000ed00 	.word	0xe000ed00

0800bc8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bc98:	4b44      	ldr	r3, [pc, #272]	@ (800bdac <low_level_init+0x120>)
 800bc9a:	4a45      	ldr	r2, [pc, #276]	@ (800bdb0 <low_level_init+0x124>)
 800bc9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bca2:	2380      	movs	r3, #128	@ 0x80
 800bca4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bca6:	23e1      	movs	r3, #225	@ 0xe1
 800bca8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bcb6:	4a3d      	ldr	r2, [pc, #244]	@ (800bdac <low_level_init+0x120>)
 800bcb8:	f107 0308 	add.w	r3, r7, #8
 800bcbc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bcbe:	4b3b      	ldr	r3, [pc, #236]	@ (800bdac <low_level_init+0x120>)
 800bcc0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bcc4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bcc6:	4b39      	ldr	r3, [pc, #228]	@ (800bdac <low_level_init+0x120>)
 800bcc8:	4a3a      	ldr	r2, [pc, #232]	@ (800bdb4 <low_level_init+0x128>)
 800bcca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bccc:	4b37      	ldr	r3, [pc, #220]	@ (800bdac <low_level_init+0x120>)
 800bcce:	4a3a      	ldr	r2, [pc, #232]	@ (800bdb8 <low_level_init+0x12c>)
 800bcd0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bcd2:	4b36      	ldr	r3, [pc, #216]	@ (800bdac <low_level_init+0x120>)
 800bcd4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bcd8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bcda:	4834      	ldr	r0, [pc, #208]	@ (800bdac <low_level_init+0x120>)
 800bcdc:	f7f7 fd92 	bl	8003804 <HAL_ETH_Init>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bce4:	2238      	movs	r2, #56	@ 0x38
 800bce6:	2100      	movs	r1, #0
 800bce8:	4834      	ldr	r0, [pc, #208]	@ (800bdbc <low_level_init+0x130>)
 800bcea:	f00b ff61 	bl	8017bb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bcee:	4b33      	ldr	r3, [pc, #204]	@ (800bdbc <low_level_init+0x130>)
 800bcf0:	2221      	movs	r2, #33	@ 0x21
 800bcf2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bcf4:	4b31      	ldr	r3, [pc, #196]	@ (800bdbc <low_level_init+0x130>)
 800bcf6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bcfa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bcfc:	4b2f      	ldr	r3, [pc, #188]	@ (800bdbc <low_level_init+0x130>)
 800bcfe:	2200      	movs	r2, #0
 800bd00:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bd02:	482f      	ldr	r0, [pc, #188]	@ (800bdc0 <low_level_init+0x134>)
 800bd04:	f000 ff80 	bl	800cc08 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2206      	movs	r2, #6
 800bd0c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bd10:	4b26      	ldr	r3, [pc, #152]	@ (800bdac <low_level_init+0x120>)
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	781a      	ldrb	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bd1c:	4b23      	ldr	r3, [pc, #140]	@ (800bdac <low_level_init+0x120>)
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	785a      	ldrb	r2, [r3, #1]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bd28:	4b20      	ldr	r3, [pc, #128]	@ (800bdac <low_level_init+0x120>)
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	789a      	ldrb	r2, [r3, #2]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bd34:	4b1d      	ldr	r3, [pc, #116]	@ (800bdac <low_level_init+0x120>)
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	78da      	ldrb	r2, [r3, #3]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bd40:	4b1a      	ldr	r3, [pc, #104]	@ (800bdac <low_level_init+0x120>)
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	791a      	ldrb	r2, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bd4c:	4b17      	ldr	r3, [pc, #92]	@ (800bdac <low_level_init+0x120>)
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	795a      	ldrb	r2, [r3, #5]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bd5e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd66:	f043 030a 	orr.w	r3, r3, #10
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bd72:	4914      	ldr	r1, [pc, #80]	@ (800bdc4 <low_level_init+0x138>)
 800bd74:	4814      	ldr	r0, [pc, #80]	@ (800bdc8 <low_level_init+0x13c>)
 800bd76:	f7f5 fff8 	bl	8001d6a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bd7a:	4813      	ldr	r0, [pc, #76]	@ (800bdc8 <low_level_init+0x13c>)
 800bd7c:	f7f6 f827 	bl	8001dce <LAN8742_Init>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d006      	beq.n	800bd94 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 fc00 	bl	800d58c <netif_set_link_down>
    netif_set_down(netif);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f001 fb97 	bl	800d4c0 <netif_set_down>
 800bd92:	e008      	b.n	800bda6 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d103      	bne.n	800bda2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fa38 	bl	800c210 <ethernet_link_check_state>
 800bda0:	e001      	b.n	800bda6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800bda2:	f7f5 f8bf 	bl	8000f24 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20005498 	.word	0x20005498
 800bdb0:	40028000 	.word	0x40028000
 800bdb4:	2000016c 	.word	0x2000016c
 800bdb8:	200000cc 	.word	0x200000cc
 800bdbc:	20005548 	.word	0x20005548
 800bdc0:	0801bed8 	.word	0x0801bed8
 800bdc4:	2000000c 	.word	0x2000000c
 800bdc8:	20005580 	.word	0x20005580

0800bdcc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b092      	sub	sp, #72	@ 0x48
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bde4:	f107 030c 	add.w	r3, r7, #12
 800bde8:	2230      	movs	r2, #48	@ 0x30
 800bdea:	2100      	movs	r1, #0
 800bdec:	4618      	mov	r0, r3
 800bdee:	f00b fedf 	bl	8017bb0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bdf2:	f107 030c 	add.w	r3, r7, #12
 800bdf6:	2230      	movs	r2, #48	@ 0x30
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f00b fed8 	bl	8017bb0 <memset>

  for(q = p; q != NULL; q = q->next)
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	643b      	str	r3, [r7, #64]	@ 0x40
 800be04:	e045      	b.n	800be92 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800be06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d902      	bls.n	800be12 <low_level_output+0x46>
      return ERR_IF;
 800be0c:	f06f 030b 	mvn.w	r3, #11
 800be10:	e055      	b.n	800bebe <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800be12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be14:	6859      	ldr	r1, [r3, #4]
 800be16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be18:	4613      	mov	r3, r2
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	3348      	adds	r3, #72	@ 0x48
 800be22:	443b      	add	r3, r7
 800be24:	3b3c      	subs	r3, #60	@ 0x3c
 800be26:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800be28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be2a:	895b      	ldrh	r3, [r3, #10]
 800be2c:	4619      	mov	r1, r3
 800be2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be30:	4613      	mov	r3, r2
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	3348      	adds	r3, #72	@ 0x48
 800be3a:	443b      	add	r3, r7
 800be3c:	3b38      	subs	r3, #56	@ 0x38
 800be3e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800be40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be42:	2b00      	cmp	r3, #0
 800be44:	d011      	beq.n	800be6a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800be46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be48:	1e5a      	subs	r2, r3, #1
 800be4a:	f107 000c 	add.w	r0, r7, #12
 800be4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be50:	460b      	mov	r3, r1
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	440b      	add	r3, r1
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	18c1      	adds	r1, r0, r3
 800be5a:	4613      	mov	r3, r2
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	4413      	add	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	3348      	adds	r3, #72	@ 0x48
 800be64:	443b      	add	r3, r7
 800be66:	3b34      	subs	r3, #52	@ 0x34
 800be68:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800be6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d109      	bne.n	800be86 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800be72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be74:	4613      	mov	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	3348      	adds	r3, #72	@ 0x48
 800be7e:	443b      	add	r3, r7
 800be80:	3b34      	subs	r3, #52	@ 0x34
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
    }

    i++;
 800be86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be88:	3301      	adds	r3, #1
 800be8a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800be8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	643b      	str	r3, [r7, #64]	@ 0x40
 800be92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1b6      	bne.n	800be06 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	891b      	ldrh	r3, [r3, #8]
 800be9c:	461a      	mov	r2, r3
 800be9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bec8 <low_level_output+0xfc>)
 800bea0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bea2:	4a09      	ldr	r2, [pc, #36]	@ (800bec8 <low_level_output+0xfc>)
 800bea4:	f107 030c 	add.w	r3, r7, #12
 800bea8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800beaa:	4a07      	ldr	r2, [pc, #28]	@ (800bec8 <low_level_output+0xfc>)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800beb0:	2214      	movs	r2, #20
 800beb2:	4905      	ldr	r1, [pc, #20]	@ (800bec8 <low_level_output+0xfc>)
 800beb4:	4805      	ldr	r0, [pc, #20]	@ (800becc <low_level_output+0x100>)
 800beb6:	f7f7 fe2f 	bl	8003b18 <HAL_ETH_Transmit>

  return errval;
 800beba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3748      	adds	r7, #72	@ 0x48
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20005548 	.word	0x20005548
 800becc:	20005498 	.word	0x20005498

0800bed0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bed8:	2300      	movs	r3, #0
 800beda:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bedc:	4b07      	ldr	r3, [pc, #28]	@ (800befc <low_level_input+0x2c>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d105      	bne.n	800bef0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bee4:	f107 030c 	add.w	r3, r7, #12
 800bee8:	4619      	mov	r1, r3
 800beea:	4805      	ldr	r0, [pc, #20]	@ (800bf00 <low_level_input+0x30>)
 800beec:	f7f7 fea8 	bl	8003c40 <HAL_ETH_ReadData>
  }

  return p;
 800bef0:	68fb      	ldr	r3, [r7, #12]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20005494 	.word	0x20005494
 800bf00:	20005498 	.word	0x20005498

0800bf04 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff ffdd 	bl	800bed0 <low_level_input>
 800bf16:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	4798      	blx	r3
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f001 fedc 	bl	800dcec <pbuf_free>
      }
    }
  } while(p!=NULL);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1ea      	bne.n	800bf10 <ethernetif_input+0xc>
}
 800bf3a:	bf00      	nop
 800bf3c:	bf00      	nop
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <ethernetif_init+0x1c>
 800bf52:	4b0e      	ldr	r3, [pc, #56]	@ (800bf8c <ethernetif_init+0x48>)
 800bf54:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800bf58:	490d      	ldr	r1, [pc, #52]	@ (800bf90 <ethernetif_init+0x4c>)
 800bf5a:	480e      	ldr	r0, [pc, #56]	@ (800bf94 <ethernetif_init+0x50>)
 800bf5c:	f00b fcc8 	bl	80178f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2273      	movs	r2, #115	@ 0x73
 800bf64:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2274      	movs	r2, #116	@ 0x74
 800bf6c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a09      	ldr	r2, [pc, #36]	@ (800bf98 <ethernetif_init+0x54>)
 800bf74:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a08      	ldr	r2, [pc, #32]	@ (800bf9c <ethernetif_init+0x58>)
 800bf7a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff fe85 	bl	800bc8c <low_level_init>

  return ERR_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	08018868 	.word	0x08018868
 800bf90:	08018884 	.word	0x08018884
 800bf94:	08018894 	.word	0x08018894
 800bf98:	08014d89 	.word	0x08014d89
 800bf9c:	0800bdcd 	.word	0x0800bdcd

0800bfa0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bfac:	68f9      	ldr	r1, [r7, #12]
 800bfae:	4807      	ldr	r0, [pc, #28]	@ (800bfcc <pbuf_free_custom+0x2c>)
 800bfb0:	f000 ff0c 	bl	800cdcc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bfb4:	4b06      	ldr	r3, [pc, #24]	@ (800bfd0 <pbuf_free_custom+0x30>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d102      	bne.n	800bfc2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bfbc:	4b04      	ldr	r3, [pc, #16]	@ (800bfd0 <pbuf_free_custom+0x30>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	701a      	strb	r2, [r3, #0]
  }
}
 800bfc2:	bf00      	nop
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	0801bed8 	.word	0x0801bed8
 800bfd0:	20005494 	.word	0x20005494

0800bfd4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bfd8:	f7f6 f81e 	bl	8002018 <HAL_GetTick>
 800bfdc:	4603      	mov	r3, r0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08e      	sub	sp, #56	@ 0x38
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	605a      	str	r2, [r3, #4]
 800bff6:	609a      	str	r2, [r3, #8]
 800bff8:	60da      	str	r2, [r3, #12]
 800bffa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a56      	ldr	r2, [pc, #344]	@ (800c15c <HAL_ETH_MspInit+0x178>)
 800c002:	4293      	cmp	r3, r2
 800c004:	f040 80a6 	bne.w	800c154 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c008:	4b55      	ldr	r3, [pc, #340]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c00c:	4a54      	ldr	r2, [pc, #336]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c00e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c012:	6313      	str	r3, [r2, #48]	@ 0x30
 800c014:	4b52      	ldr	r3, [pc, #328]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c01c:	623b      	str	r3, [r7, #32]
 800c01e:	6a3b      	ldr	r3, [r7, #32]
 800c020:	4b4f      	ldr	r3, [pc, #316]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c024:	4a4e      	ldr	r2, [pc, #312]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c02a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c02c:	4b4c      	ldr	r3, [pc, #304]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c034:	61fb      	str	r3, [r7, #28]
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	4b49      	ldr	r3, [pc, #292]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c03c:	4a48      	ldr	r2, [pc, #288]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c03e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c042:	6313      	str	r3, [r2, #48]	@ 0x30
 800c044:	4b46      	ldr	r3, [pc, #280]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c04c:	61bb      	str	r3, [r7, #24]
 800c04e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c050:	4b43      	ldr	r3, [pc, #268]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c054:	4a42      	ldr	r2, [pc, #264]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c056:	f043 0304 	orr.w	r3, r3, #4
 800c05a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c05c:	4b40      	ldr	r3, [pc, #256]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c068:	4b3d      	ldr	r3, [pc, #244]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c06c:	4a3c      	ldr	r2, [pc, #240]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c06e:	f043 0301 	orr.w	r3, r3, #1
 800c072:	6313      	str	r3, [r2, #48]	@ 0x30
 800c074:	4b3a      	ldr	r3, [pc, #232]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	613b      	str	r3, [r7, #16]
 800c07e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c080:	4b37      	ldr	r3, [pc, #220]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c084:	4a36      	ldr	r2, [pc, #216]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c086:	f043 0302 	orr.w	r3, r3, #2
 800c08a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c08c:	4b34      	ldr	r3, [pc, #208]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c098:	4b31      	ldr	r3, [pc, #196]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09c:	4a30      	ldr	r2, [pc, #192]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c160 <HAL_ETH_MspInit+0x17c>)
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ac:	60bb      	str	r3, [r7, #8]
 800c0ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c0b0:	2332      	movs	r3, #50	@ 0x32
 800c0b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c0c0:	230b      	movs	r3, #11
 800c0c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c0c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4826      	ldr	r0, [pc, #152]	@ (800c164 <HAL_ETH_MspInit+0x180>)
 800c0cc:	f7f8 fde8 	bl	8004ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c0d0:	2386      	movs	r3, #134	@ 0x86
 800c0d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c0e0:	230b      	movs	r3, #11
 800c0e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	481f      	ldr	r0, [pc, #124]	@ (800c168 <HAL_ETH_MspInit+0x184>)
 800c0ec:	f7f8 fdd8 	bl	8004ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c0f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0fe:	2303      	movs	r3, #3
 800c100:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c102:	230b      	movs	r3, #11
 800c104:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c10a:	4619      	mov	r1, r3
 800c10c:	4817      	ldr	r0, [pc, #92]	@ (800c16c <HAL_ETH_MspInit+0x188>)
 800c10e:	f7f8 fdc7 	bl	8004ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c112:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c118:	2302      	movs	r3, #2
 800c11a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c11c:	2300      	movs	r3, #0
 800c11e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c120:	2303      	movs	r3, #3
 800c122:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c124:	230b      	movs	r3, #11
 800c126:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c12c:	4619      	mov	r1, r3
 800c12e:	4810      	ldr	r0, [pc, #64]	@ (800c170 <HAL_ETH_MspInit+0x18c>)
 800c130:	f7f8 fdb6 	bl	8004ca0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800c134:	2200      	movs	r2, #0
 800c136:	2100      	movs	r1, #0
 800c138:	203d      	movs	r0, #61	@ 0x3d
 800c13a:	f7f6 fcfe 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c13e:	203d      	movs	r0, #61	@ 0x3d
 800c140:	f7f6 fd17 	bl	8002b72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800c144:	2200      	movs	r2, #0
 800c146:	2100      	movs	r1, #0
 800c148:	203e      	movs	r0, #62	@ 0x3e
 800c14a:	f7f6 fcf6 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c14e:	203e      	movs	r0, #62	@ 0x3e
 800c150:	f7f6 fd0f 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c154:	bf00      	nop
 800c156:	3738      	adds	r7, #56	@ 0x38
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	40028000 	.word	0x40028000
 800c160:	40023800 	.word	0x40023800
 800c164:	40020800 	.word	0x40020800
 800c168:	40020000 	.word	0x40020000
 800c16c:	40020400 	.word	0x40020400
 800c170:	40021800 	.word	0x40021800

0800c174 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c178:	4802      	ldr	r0, [pc, #8]	@ (800c184 <ETH_PHY_IO_Init+0x10>)
 800c17a:	f7f8 f92f 	bl	80043dc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	bd80      	pop	{r7, pc}
 800c184:	20005498 	.word	0x20005498

0800c188 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c188:	b480      	push	{r7}
 800c18a:	af00      	add	r7, sp, #0
  return 0;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	68f9      	ldr	r1, [r7, #12]
 800c1aa:	4807      	ldr	r0, [pc, #28]	@ (800c1c8 <ETH_PHY_IO_ReadReg+0x30>)
 800c1ac:	f7f7 ff70 	bl	8004090 <HAL_ETH_ReadPHYRegister>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d002      	beq.n	800c1bc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c1b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1ba:	e000      	b.n	800c1be <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20005498 	.word	0x20005498

0800c1cc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	68f9      	ldr	r1, [r7, #12]
 800c1de:	4807      	ldr	r0, [pc, #28]	@ (800c1fc <ETH_PHY_IO_WriteReg+0x30>)
 800c1e0:	f7f7 ffa1 	bl	8004126 <HAL_ETH_WritePHYRegister>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1ee:	e000      	b.n	800c1f2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20005498 	.word	0x20005498

0800c200 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c204:	f7f5 ff08 	bl	8002018 <HAL_GetTick>
 800c208:	4603      	mov	r3, r0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b0a0      	sub	sp, #128	@ 0x80
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c218:	f107 030c 	add.w	r3, r7, #12
 800c21c:	2264      	movs	r2, #100	@ 0x64
 800c21e:	2100      	movs	r1, #0
 800c220:	4618      	mov	r0, r3
 800c222:	f00b fcc5 	bl	8017bb0 <memset>
  int32_t PHYLinkState = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c22a:	2300      	movs	r3, #0
 800c22c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c22e:	2300      	movs	r3, #0
 800c230:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c232:	2300      	movs	r3, #0
 800c234:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c236:	483a      	ldr	r0, [pc, #232]	@ (800c320 <ethernet_link_check_state+0x110>)
 800c238:	f7f5 fe16 	bl	8001e68 <LAN8742_GetLinkState>
 800c23c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c244:	089b      	lsrs	r3, r3, #2
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00c      	beq.n	800c26a <ethernet_link_check_state+0x5a>
 800c250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c252:	2b01      	cmp	r3, #1
 800c254:	dc09      	bgt.n	800c26a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 800c256:	4833      	ldr	r0, [pc, #204]	@ (800c324 <ethernet_link_check_state+0x114>)
 800c258:	f7f7 fbde 	bl	8003a18 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 f92f 	bl	800d4c0 <netif_set_down>
    netif_set_link_down(netif);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f001 f992 	bl	800d58c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c268:	e055      	b.n	800c316 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c270:	f003 0304 	and.w	r3, r3, #4
 800c274:	2b00      	cmp	r3, #0
 800c276:	d14e      	bne.n	800c316 <ethernet_link_check_state+0x106>
 800c278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	dd4b      	ble.n	800c316 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c27e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c280:	3b02      	subs	r3, #2
 800c282:	2b03      	cmp	r3, #3
 800c284:	d82a      	bhi.n	800c2dc <ethernet_link_check_state+0xcc>
 800c286:	a201      	add	r2, pc, #4	@ (adr r2, 800c28c <ethernet_link_check_state+0x7c>)
 800c288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28c:	0800c29d 	.word	0x0800c29d
 800c290:	0800c2af 	.word	0x0800c2af
 800c294:	0800c2bf 	.word	0x0800c2bf
 800c298:	0800c2cf 	.word	0x0800c2cf
      duplex = ETH_FULLDUPLEX_MODE;
 800c29c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c2a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2ac:	e017      	b.n	800c2de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c2b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2bc:	e00f      	b.n	800c2de <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c2be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2c2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2cc:	e007      	b.n	800c2de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c2da:	e000      	b.n	800c2de <ethernet_link_check_state+0xce>
      break;
 800c2dc:	bf00      	nop
    if(linkchanged)
 800c2de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d018      	beq.n	800c316 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c2e4:	f107 030c 	add.w	r3, r7, #12
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	480e      	ldr	r0, [pc, #56]	@ (800c324 <ethernet_link_check_state+0x114>)
 800c2ec:	f7f7 ff64 	bl	80041b8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c2f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2f2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800c2f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2f6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c2f8:	f107 030c 	add.w	r3, r7, #12
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4809      	ldr	r0, [pc, #36]	@ (800c324 <ethernet_link_check_state+0x114>)
 800c300:	f7f8 f851 	bl	80043a6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c304:	4807      	ldr	r0, [pc, #28]	@ (800c324 <ethernet_link_check_state+0x114>)
 800c306:	f7f7 fb17 	bl	8003938 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f001 f86c 	bl	800d3e8 <netif_set_up>
      netif_set_link_up(netif);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f001 f907 	bl	800d524 <netif_set_link_up>
}
 800c316:	bf00      	nop
 800c318:	3780      	adds	r7, #128	@ 0x80
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	20005580 	.word	0x20005580
 800c324:	20005498 	.word	0x20005498

0800c328 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af02      	add	r7, sp, #8
 800c32e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c330:	4812      	ldr	r0, [pc, #72]	@ (800c37c <HAL_ETH_RxAllocateCallback+0x54>)
 800c332:	f000 fcdd 	bl	800ccf0 <memp_malloc_pool>
 800c336:	60f8      	str	r0, [r7, #12]
  if (p)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d014      	beq.n	800c368 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f103 0220 	add.w	r2, r3, #32
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4a0d      	ldr	r2, [pc, #52]	@ (800c380 <HAL_ETH_RxAllocateCallback+0x58>)
 800c34c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c356:	9201      	str	r2, [sp, #4]
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2241      	movs	r2, #65	@ 0x41
 800c35e:	2100      	movs	r1, #0
 800c360:	2000      	movs	r0, #0
 800c362:	f001 fb09 	bl	800d978 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c366:	e005      	b.n	800c374 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c368:	4b06      	ldr	r3, [pc, #24]	@ (800c384 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c36a:	2201      	movs	r2, #1
 800c36c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]
}
 800c374:	bf00      	nop
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	0801bed8 	.word	0x0801bed8
 800c380:	0800bfa1 	.word	0x0800bfa1
 800c384:	20005494 	.word	0x20005494

0800c388 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3b20      	subs	r3, #32
 800c3a6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	887a      	ldrh	r2, [r7, #2]
 800c3b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d103      	bne.n	800c3ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	69fa      	ldr	r2, [r7, #28]
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	e003      	b.n	800c3d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	69fa      	ldr	r2, [r7, #28]
 800c3d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	69fa      	ldr	r2, [r7, #28]
 800c3d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	61fb      	str	r3, [r7, #28]
 800c3de:	e009      	b.n	800c3f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	891a      	ldrh	r2, [r3, #8]
 800c3e4:	887b      	ldrh	r3, [r7, #2]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1f2      	bne.n	800c3e0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c3fa:	887b      	ldrh	r3, [r7, #2]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff fc18 	bl	800bc34 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c404:	bf00      	nop
 800c406:	3720      	adds	r7, #32
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	4603      	mov	r3, r0
 800c414:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 800c416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dc04      	bgt.n	800c428 <lwip_strerr+0x1c>
 800c41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c422:	f113 0f10 	cmn.w	r3, #16
 800c426:	da01      	bge.n	800c42c <lwip_strerr+0x20>
    return "Unknown error.";
 800c428:	4b06      	ldr	r3, [pc, #24]	@ (800c444 <lwip_strerr+0x38>)
 800c42a:	e005      	b.n	800c438 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 800c42c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c430:	425b      	negs	r3, r3
 800c432:	4a05      	ldr	r2, [pc, #20]	@ (800c448 <lwip_strerr+0x3c>)
 800c434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	080189f8 	.word	0x080189f8
 800c448:	20000020 	.word	0x20000020

0800c44c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c45a:	021b      	lsls	r3, r3, #8
 800c45c:	b21a      	sxth	r2, r3
 800c45e:	88fb      	ldrh	r3, [r7, #6]
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	b29b      	uxth	r3, r3
 800c464:	b21b      	sxth	r3, r3
 800c466:	4313      	orrs	r3, r2
 800c468:	b21b      	sxth	r3, r3
 800c46a:	b29b      	uxth	r3, r3
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	061a      	lsls	r2, r3, #24
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c48c:	431a      	orrs	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	0a1b      	lsrs	r3, r3, #8
 800c492:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c496:	431a      	orrs	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	0e1b      	lsrs	r3, r3, #24
 800c49c:	4313      	orrs	r3, r2
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	370c      	adds	r7, #12
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c4b4:	f000 f8d4 	bl	800c660 <mem_init>
  memp_init();
 800c4b8:	f000 fbd6 	bl	800cc68 <memp_init>
  pbuf_init();
  netif_init();
 800c4bc:	f000 fcd4 	bl	800ce68 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c4c0:	f007 f96e 	bl	80137a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c4c4:	f001 feb0 	bl	800e228 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c4c8:	f007 f8e0 	bl	801368c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c4cc:	bf00      	nop
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c4de:	4b05      	ldr	r3, [pc, #20]	@ (800c4f4 <ptr_to_mem+0x20>)
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	88fb      	ldrh	r3, [r7, #6]
 800c4e4:	4413      	add	r3, r2
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	200055b8 	.word	0x200055b8

0800c4f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c500:	4b05      	ldr	r3, [pc, #20]	@ (800c518 <mem_to_ptr+0x20>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	b29b      	uxth	r3, r3
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	200055b8 	.word	0x200055b8

0800c51c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c51c:	b590      	push	{r4, r7, lr}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c524:	4b45      	ldr	r3, [pc, #276]	@ (800c63c <plug_holes+0x120>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d206      	bcs.n	800c53c <plug_holes+0x20>
 800c52e:	4b44      	ldr	r3, [pc, #272]	@ (800c640 <plug_holes+0x124>)
 800c530:	f240 12df 	movw	r2, #479	@ 0x1df
 800c534:	4943      	ldr	r1, [pc, #268]	@ (800c644 <plug_holes+0x128>)
 800c536:	4844      	ldr	r0, [pc, #272]	@ (800c648 <plug_holes+0x12c>)
 800c538:	f00b f9da 	bl	80178f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c53c:	4b43      	ldr	r3, [pc, #268]	@ (800c64c <plug_holes+0x130>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	429a      	cmp	r2, r3
 800c544:	d306      	bcc.n	800c554 <plug_holes+0x38>
 800c546:	4b3e      	ldr	r3, [pc, #248]	@ (800c640 <plug_holes+0x124>)
 800c548:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c54c:	4940      	ldr	r1, [pc, #256]	@ (800c650 <plug_holes+0x134>)
 800c54e:	483e      	ldr	r0, [pc, #248]	@ (800c648 <plug_holes+0x12c>)
 800c550:	f00b f9ce 	bl	80178f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	791b      	ldrb	r3, [r3, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d006      	beq.n	800c56a <plug_holes+0x4e>
 800c55c:	4b38      	ldr	r3, [pc, #224]	@ (800c640 <plug_holes+0x124>)
 800c55e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c562:	493c      	ldr	r1, [pc, #240]	@ (800c654 <plug_holes+0x138>)
 800c564:	4838      	ldr	r0, [pc, #224]	@ (800c648 <plug_holes+0x12c>)
 800c566:	f00b f9c3 	bl	80178f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c572:	d906      	bls.n	800c582 <plug_holes+0x66>
 800c574:	4b32      	ldr	r3, [pc, #200]	@ (800c640 <plug_holes+0x124>)
 800c576:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c57a:	4937      	ldr	r1, [pc, #220]	@ (800c658 <plug_holes+0x13c>)
 800c57c:	4832      	ldr	r0, [pc, #200]	@ (800c648 <plug_holes+0x12c>)
 800c57e:	f00b f9b7 	bl	80178f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	881b      	ldrh	r3, [r3, #0]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff ffa4 	bl	800c4d4 <ptr_to_mem>
 800c58c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	429a      	cmp	r2, r3
 800c594:	d024      	beq.n	800c5e0 <plug_holes+0xc4>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	791b      	ldrb	r3, [r3, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d120      	bne.n	800c5e0 <plug_holes+0xc4>
 800c59e:	4b2b      	ldr	r3, [pc, #172]	@ (800c64c <plug_holes+0x130>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d01b      	beq.n	800c5e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c5a8:	4b2c      	ldr	r3, [pc, #176]	@ (800c65c <plug_holes+0x140>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d102      	bne.n	800c5b8 <plug_holes+0x9c>
      lfree = mem;
 800c5b2:	4a2a      	ldr	r2, [pc, #168]	@ (800c65c <plug_holes+0x140>)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	881a      	ldrh	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c5c8:	d00a      	beq.n	800c5e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff ff80 	bl	800c4d4 <ptr_to_mem>
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff ff8e 	bl	800c4f8 <mem_to_ptr>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	885b      	ldrh	r3, [r3, #2]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff ff75 	bl	800c4d4 <ptr_to_mem>
 800c5ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d01f      	beq.n	800c634 <plug_holes+0x118>
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	791b      	ldrb	r3, [r3, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d11b      	bne.n	800c634 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c5fc:	4b17      	ldr	r3, [pc, #92]	@ (800c65c <plug_holes+0x140>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	429a      	cmp	r2, r3
 800c604:	d102      	bne.n	800c60c <plug_holes+0xf0>
      lfree = pmem;
 800c606:	4a15      	ldr	r2, [pc, #84]	@ (800c65c <plug_holes+0x140>)
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	881a      	ldrh	r2, [r3, #0]
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c61c:	d00a      	beq.n	800c634 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	881b      	ldrh	r3, [r3, #0]
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff ff56 	bl	800c4d4 <ptr_to_mem>
 800c628:	4604      	mov	r4, r0
 800c62a:	68b8      	ldr	r0, [r7, #8]
 800c62c:	f7ff ff64 	bl	800c4f8 <mem_to_ptr>
 800c630:	4603      	mov	r3, r0
 800c632:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c634:	bf00      	nop
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd90      	pop	{r4, r7, pc}
 800c63c:	200055b8 	.word	0x200055b8
 800c640:	08018a08 	.word	0x08018a08
 800c644:	08018a38 	.word	0x08018a38
 800c648:	08018a50 	.word	0x08018a50
 800c64c:	200055bc 	.word	0x200055bc
 800c650:	08018a78 	.word	0x08018a78
 800c654:	08018a94 	.word	0x08018a94
 800c658:	08018ab0 	.word	0x08018ab0
 800c65c:	200055c0 	.word	0x200055c0

0800c660 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c666:	4b16      	ldr	r3, [pc, #88]	@ (800c6c0 <mem_init+0x60>)
 800c668:	4a16      	ldr	r2, [pc, #88]	@ (800c6c4 <mem_init+0x64>)
 800c66a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c66c:	4b14      	ldr	r3, [pc, #80]	@ (800c6c0 <mem_init+0x60>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c678:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c686:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800c68a:	f7ff ff23 	bl	800c4d4 <ptr_to_mem>
 800c68e:	4603      	mov	r3, r0
 800c690:	4a0d      	ldr	r2, [pc, #52]	@ (800c6c8 <mem_init+0x68>)
 800c692:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c694:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c8 <mem_init+0x68>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2201      	movs	r2, #1
 800c69a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c69c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c8 <mem_init+0x68>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c6a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c6a6:	4b08      	ldr	r3, [pc, #32]	@ (800c6c8 <mem_init+0x68>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c6ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c6b0:	4b03      	ldr	r3, [pc, #12]	@ (800c6c0 <mem_init+0x60>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a05      	ldr	r2, [pc, #20]	@ (800c6cc <mem_init+0x6c>)
 800c6b6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c6b8:	bf00      	nop
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	200055b8 	.word	0x200055b8
 800c6c4:	20048000 	.word	0x20048000
 800c6c8:	200055bc 	.word	0x200055bc
 800c6cc:	200055c0 	.word	0x200055c0

0800c6d0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff ff0d 	bl	800c4f8 <mem_to_ptr>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fef4 	bl	800c4d4 <ptr_to_mem>
 800c6ec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	885b      	ldrh	r3, [r3, #2]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff feee 	bl	800c4d4 <ptr_to_mem>
 800c6f8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c702:	d818      	bhi.n	800c736 <mem_link_valid+0x66>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	885b      	ldrh	r3, [r3, #2]
 800c708:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c70c:	d813      	bhi.n	800c736 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c712:	8afa      	ldrh	r2, [r7, #22]
 800c714:	429a      	cmp	r2, r3
 800c716:	d004      	beq.n	800c722 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	8afa      	ldrh	r2, [r7, #22]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d109      	bne.n	800c736 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c722:	4b08      	ldr	r3, [pc, #32]	@ (800c744 <mem_link_valid+0x74>)
 800c724:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d006      	beq.n	800c73a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	885b      	ldrh	r3, [r3, #2]
 800c730:	8afa      	ldrh	r2, [r7, #22]
 800c732:	429a      	cmp	r2, r3
 800c734:	d001      	beq.n	800c73a <mem_link_valid+0x6a>
    return 0;
 800c736:	2300      	movs	r3, #0
 800c738:	e000      	b.n	800c73c <mem_link_valid+0x6c>
  }
  return 1;
 800c73a:	2301      	movs	r3, #1
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	200055bc 	.word	0x200055bc

0800c748 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d04c      	beq.n	800c7f0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f003 0303 	and.w	r3, r3, #3
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d007      	beq.n	800c770 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c760:	4b25      	ldr	r3, [pc, #148]	@ (800c7f8 <mem_free+0xb0>)
 800c762:	f240 2273 	movw	r2, #627	@ 0x273
 800c766:	4925      	ldr	r1, [pc, #148]	@ (800c7fc <mem_free+0xb4>)
 800c768:	4825      	ldr	r0, [pc, #148]	@ (800c800 <mem_free+0xb8>)
 800c76a:	f00b f8c1 	bl	80178f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c76e:	e040      	b.n	800c7f2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	3b08      	subs	r3, #8
 800c774:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c776:	4b23      	ldr	r3, [pc, #140]	@ (800c804 <mem_free+0xbc>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d306      	bcc.n	800c78e <mem_free+0x46>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f103 020c 	add.w	r2, r3, #12
 800c786:	4b20      	ldr	r3, [pc, #128]	@ (800c808 <mem_free+0xc0>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d907      	bls.n	800c79e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c78e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f8 <mem_free+0xb0>)
 800c790:	f240 227f 	movw	r2, #639	@ 0x27f
 800c794:	491d      	ldr	r1, [pc, #116]	@ (800c80c <mem_free+0xc4>)
 800c796:	481a      	ldr	r0, [pc, #104]	@ (800c800 <mem_free+0xb8>)
 800c798:	f00b f8aa 	bl	80178f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c79c:	e029      	b.n	800c7f2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	791b      	ldrb	r3, [r3, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d107      	bne.n	800c7b6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c7a6:	4b14      	ldr	r3, [pc, #80]	@ (800c7f8 <mem_free+0xb0>)
 800c7a8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c7ac:	4918      	ldr	r1, [pc, #96]	@ (800c810 <mem_free+0xc8>)
 800c7ae:	4814      	ldr	r0, [pc, #80]	@ (800c800 <mem_free+0xb8>)
 800c7b0:	f00b f89e 	bl	80178f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c7b4:	e01d      	b.n	800c7f2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f7ff ff8a 	bl	800c6d0 <mem_link_valid>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d107      	bne.n	800c7d2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7f8 <mem_free+0xb0>)
 800c7c4:	f240 2295 	movw	r2, #661	@ 0x295
 800c7c8:	4912      	ldr	r1, [pc, #72]	@ (800c814 <mem_free+0xcc>)
 800c7ca:	480d      	ldr	r0, [pc, #52]	@ (800c800 <mem_free+0xb8>)
 800c7cc:	f00b f890 	bl	80178f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c7d0:	e00f      	b.n	800c7f2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c818 <mem_free+0xd0>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d202      	bcs.n	800c7e8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c7e2:	4a0d      	ldr	r2, [pc, #52]	@ (800c818 <mem_free+0xd0>)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f7ff fe97 	bl	800c51c <plug_holes>
 800c7ee:	e000      	b.n	800c7f2 <mem_free+0xaa>
    return;
 800c7f0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	08018a08 	.word	0x08018a08
 800c7fc:	08018adc 	.word	0x08018adc
 800c800:	08018a50 	.word	0x08018a50
 800c804:	200055b8 	.word	0x200055b8
 800c808:	200055bc 	.word	0x200055bc
 800c80c:	08018b00 	.word	0x08018b00
 800c810:	08018b1c 	.word	0x08018b1c
 800c814:	08018b44 	.word	0x08018b44
 800c818:	200055c0 	.word	0x200055c0

0800c81c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	460b      	mov	r3, r1
 800c826:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c828:	887b      	ldrh	r3, [r7, #2]
 800c82a:	3303      	adds	r3, #3
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	f023 0303 	bic.w	r3, r3, #3
 800c832:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c834:	8bfb      	ldrh	r3, [r7, #30]
 800c836:	2b0b      	cmp	r3, #11
 800c838:	d801      	bhi.n	800c83e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c83a:	230c      	movs	r3, #12
 800c83c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c83e:	8bfb      	ldrh	r3, [r7, #30]
 800c840:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c844:	d803      	bhi.n	800c84e <mem_trim+0x32>
 800c846:	8bfa      	ldrh	r2, [r7, #30]
 800c848:	887b      	ldrh	r3, [r7, #2]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d201      	bcs.n	800c852 <mem_trim+0x36>
    return NULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	e0cc      	b.n	800c9ec <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c852:	4b68      	ldr	r3, [pc, #416]	@ (800c9f4 <mem_trim+0x1d8>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d304      	bcc.n	800c866 <mem_trim+0x4a>
 800c85c:	4b66      	ldr	r3, [pc, #408]	@ (800c9f8 <mem_trim+0x1dc>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	429a      	cmp	r2, r3
 800c864:	d306      	bcc.n	800c874 <mem_trim+0x58>
 800c866:	4b65      	ldr	r3, [pc, #404]	@ (800c9fc <mem_trim+0x1e0>)
 800c868:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c86c:	4964      	ldr	r1, [pc, #400]	@ (800ca00 <mem_trim+0x1e4>)
 800c86e:	4865      	ldr	r0, [pc, #404]	@ (800ca04 <mem_trim+0x1e8>)
 800c870:	f00b f83e 	bl	80178f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c874:	4b5f      	ldr	r3, [pc, #380]	@ (800c9f4 <mem_trim+0x1d8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d304      	bcc.n	800c888 <mem_trim+0x6c>
 800c87e:	4b5e      	ldr	r3, [pc, #376]	@ (800c9f8 <mem_trim+0x1dc>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d301      	bcc.n	800c88c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	e0af      	b.n	800c9ec <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	3b08      	subs	r3, #8
 800c890:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c892:	69b8      	ldr	r0, [r7, #24]
 800c894:	f7ff fe30 	bl	800c4f8 <mem_to_ptr>
 800c898:	4603      	mov	r3, r0
 800c89a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	881a      	ldrh	r2, [r3, #0]
 800c8a0:	8afb      	ldrh	r3, [r7, #22]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	3b08      	subs	r3, #8
 800c8a8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c8aa:	8bfa      	ldrh	r2, [r7, #30]
 800c8ac:	8abb      	ldrh	r3, [r7, #20]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d906      	bls.n	800c8c0 <mem_trim+0xa4>
 800c8b2:	4b52      	ldr	r3, [pc, #328]	@ (800c9fc <mem_trim+0x1e0>)
 800c8b4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c8b8:	4953      	ldr	r1, [pc, #332]	@ (800ca08 <mem_trim+0x1ec>)
 800c8ba:	4852      	ldr	r0, [pc, #328]	@ (800ca04 <mem_trim+0x1e8>)
 800c8bc:	f00b f818 	bl	80178f0 <iprintf>
  if (newsize > size) {
 800c8c0:	8bfa      	ldrh	r2, [r7, #30]
 800c8c2:	8abb      	ldrh	r3, [r7, #20]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d901      	bls.n	800c8cc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e08f      	b.n	800c9ec <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c8cc:	8bfa      	ldrh	r2, [r7, #30]
 800c8ce:	8abb      	ldrh	r3, [r7, #20]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d101      	bne.n	800c8d8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	e089      	b.n	800c9ec <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7ff fdf9 	bl	800c4d4 <ptr_to_mem>
 800c8e2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	791b      	ldrb	r3, [r3, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d13f      	bne.n	800c96c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c8f4:	d106      	bne.n	800c904 <mem_trim+0xe8>
 800c8f6:	4b41      	ldr	r3, [pc, #260]	@ (800c9fc <mem_trim+0x1e0>)
 800c8f8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c8fc:	4943      	ldr	r1, [pc, #268]	@ (800ca0c <mem_trim+0x1f0>)
 800c8fe:	4841      	ldr	r0, [pc, #260]	@ (800ca04 <mem_trim+0x1e8>)
 800c900:	f00a fff6 	bl	80178f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c90a:	8afa      	ldrh	r2, [r7, #22]
 800c90c:	8bfb      	ldrh	r3, [r7, #30]
 800c90e:	4413      	add	r3, r2
 800c910:	b29b      	uxth	r3, r3
 800c912:	3308      	adds	r3, #8
 800c914:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c916:	4b3e      	ldr	r3, [pc, #248]	@ (800ca10 <mem_trim+0x1f4>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d106      	bne.n	800c92e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c920:	89fb      	ldrh	r3, [r7, #14]
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fdd6 	bl	800c4d4 <ptr_to_mem>
 800c928:	4603      	mov	r3, r0
 800c92a:	4a39      	ldr	r2, [pc, #228]	@ (800ca10 <mem_trim+0x1f4>)
 800c92c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c92e:	89fb      	ldrh	r3, [r7, #14]
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff fdcf 	bl	800c4d4 <ptr_to_mem>
 800c936:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	2200      	movs	r2, #0
 800c93c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	89ba      	ldrh	r2, [r7, #12]
 800c942:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	8afa      	ldrh	r2, [r7, #22]
 800c948:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	89fa      	ldrh	r2, [r7, #14]
 800c94e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c958:	d047      	beq.n	800c9ea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff fdb8 	bl	800c4d4 <ptr_to_mem>
 800c964:	4602      	mov	r2, r0
 800c966:	89fb      	ldrh	r3, [r7, #14]
 800c968:	8053      	strh	r3, [r2, #2]
 800c96a:	e03e      	b.n	800c9ea <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c96c:	8bfb      	ldrh	r3, [r7, #30]
 800c96e:	f103 0214 	add.w	r2, r3, #20
 800c972:	8abb      	ldrh	r3, [r7, #20]
 800c974:	429a      	cmp	r2, r3
 800c976:	d838      	bhi.n	800c9ea <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c978:	8afa      	ldrh	r2, [r7, #22]
 800c97a:	8bfb      	ldrh	r3, [r7, #30]
 800c97c:	4413      	add	r3, r2
 800c97e:	b29b      	uxth	r3, r3
 800c980:	3308      	adds	r3, #8
 800c982:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c98c:	d106      	bne.n	800c99c <mem_trim+0x180>
 800c98e:	4b1b      	ldr	r3, [pc, #108]	@ (800c9fc <mem_trim+0x1e0>)
 800c990:	f240 3216 	movw	r2, #790	@ 0x316
 800c994:	491d      	ldr	r1, [pc, #116]	@ (800ca0c <mem_trim+0x1f0>)
 800c996:	481b      	ldr	r0, [pc, #108]	@ (800ca04 <mem_trim+0x1e8>)
 800c998:	f00a ffaa 	bl	80178f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c99c:	89fb      	ldrh	r3, [r7, #14]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff fd98 	bl	800c4d4 <ptr_to_mem>
 800c9a4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c9a6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca10 <mem_trim+0x1f4>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d202      	bcs.n	800c9b6 <mem_trim+0x19a>
      lfree = mem2;
 800c9b0:	4a17      	ldr	r2, [pc, #92]	@ (800ca10 <mem_trim+0x1f4>)
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	881a      	ldrh	r2, [r3, #0]
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	8afa      	ldrh	r2, [r7, #22]
 800c9c8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	89fa      	ldrh	r2, [r7, #14]
 800c9ce:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	881b      	ldrh	r3, [r3, #0]
 800c9d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c9d8:	d007      	beq.n	800c9ea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	881b      	ldrh	r3, [r3, #0]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff fd78 	bl	800c4d4 <ptr_to_mem>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	89fb      	ldrh	r3, [r7, #14]
 800c9e8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c9ea:	687b      	ldr	r3, [r7, #4]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	200055b8 	.word	0x200055b8
 800c9f8:	200055bc 	.word	0x200055bc
 800c9fc:	08018a08 	.word	0x08018a08
 800ca00:	08018b78 	.word	0x08018b78
 800ca04:	08018a50 	.word	0x08018a50
 800ca08:	08018b90 	.word	0x08018b90
 800ca0c:	08018bb0 	.word	0x08018bb0
 800ca10:	200055c0 	.word	0x200055c0

0800ca14 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b088      	sub	sp, #32
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ca1e:	88fb      	ldrh	r3, [r7, #6]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <mem_malloc+0x14>
    return NULL;
 800ca24:	2300      	movs	r3, #0
 800ca26:	e0d9      	b.n	800cbdc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ca28:	88fb      	ldrh	r3, [r7, #6]
 800ca2a:	3303      	adds	r3, #3
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	f023 0303 	bic.w	r3, r3, #3
 800ca32:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ca34:	8bbb      	ldrh	r3, [r7, #28]
 800ca36:	2b0b      	cmp	r3, #11
 800ca38:	d801      	bhi.n	800ca3e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ca3e:	8bbb      	ldrh	r3, [r7, #28]
 800ca40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ca44:	d803      	bhi.n	800ca4e <mem_malloc+0x3a>
 800ca46:	8bba      	ldrh	r2, [r7, #28]
 800ca48:	88fb      	ldrh	r3, [r7, #6]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d201      	bcs.n	800ca52 <mem_malloc+0x3e>
    return NULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e0c4      	b.n	800cbdc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca52:	4b64      	ldr	r3, [pc, #400]	@ (800cbe4 <mem_malloc+0x1d0>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff fd4e 	bl	800c4f8 <mem_to_ptr>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	83fb      	strh	r3, [r7, #30]
 800ca60:	e0b4      	b.n	800cbcc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ca62:	8bfb      	ldrh	r3, [r7, #30]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7ff fd35 	bl	800c4d4 <ptr_to_mem>
 800ca6a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	791b      	ldrb	r3, [r3, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f040 80a4 	bne.w	800cbbe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	881b      	ldrh	r3, [r3, #0]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	8bfb      	ldrh	r3, [r7, #30]
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	f1a3 0208 	sub.w	r2, r3, #8
 800ca84:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ca86:	429a      	cmp	r2, r3
 800ca88:	f0c0 8099 	bcc.w	800cbbe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	881b      	ldrh	r3, [r3, #0]
 800ca90:	461a      	mov	r2, r3
 800ca92:	8bfb      	ldrh	r3, [r7, #30]
 800ca94:	1ad3      	subs	r3, r2, r3
 800ca96:	f1a3 0208 	sub.w	r2, r3, #8
 800ca9a:	8bbb      	ldrh	r3, [r7, #28]
 800ca9c:	3314      	adds	r3, #20
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d333      	bcc.n	800cb0a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800caa2:	8bfa      	ldrh	r2, [r7, #30]
 800caa4:	8bbb      	ldrh	r3, [r7, #28]
 800caa6:	4413      	add	r3, r2
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	3308      	adds	r3, #8
 800caac:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800caae:	8a7b      	ldrh	r3, [r7, #18]
 800cab0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cab4:	d106      	bne.n	800cac4 <mem_malloc+0xb0>
 800cab6:	4b4c      	ldr	r3, [pc, #304]	@ (800cbe8 <mem_malloc+0x1d4>)
 800cab8:	f240 3287 	movw	r2, #903	@ 0x387
 800cabc:	494b      	ldr	r1, [pc, #300]	@ (800cbec <mem_malloc+0x1d8>)
 800cabe:	484c      	ldr	r0, [pc, #304]	@ (800cbf0 <mem_malloc+0x1dc>)
 800cac0:	f00a ff16 	bl	80178f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cac4:	8a7b      	ldrh	r3, [r7, #18]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7ff fd04 	bl	800c4d4 <ptr_to_mem>
 800cacc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2200      	movs	r2, #0
 800cad2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	881a      	ldrh	r2, [r3, #0]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	8bfa      	ldrh	r2, [r7, #30]
 800cae0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	8a7a      	ldrh	r2, [r7, #18]
 800cae6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	2201      	movs	r2, #1
 800caec:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800caf6:	d00b      	beq.n	800cb10 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff fce9 	bl	800c4d4 <ptr_to_mem>
 800cb02:	4602      	mov	r2, r0
 800cb04:	8a7b      	ldrh	r3, [r7, #18]
 800cb06:	8053      	strh	r3, [r2, #2]
 800cb08:	e002      	b.n	800cb10 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cb10:	4b34      	ldr	r3, [pc, #208]	@ (800cbe4 <mem_malloc+0x1d0>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d127      	bne.n	800cb6a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800cb1a:	4b32      	ldr	r3, [pc, #200]	@ (800cbe4 <mem_malloc+0x1d0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cb20:	e005      	b.n	800cb2e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7ff fcd4 	bl	800c4d4 <ptr_to_mem>
 800cb2c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	791b      	ldrb	r3, [r3, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d004      	beq.n	800cb40 <mem_malloc+0x12c>
 800cb36:	4b2f      	ldr	r3, [pc, #188]	@ (800cbf4 <mem_malloc+0x1e0>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69ba      	ldr	r2, [r7, #24]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d1f0      	bne.n	800cb22 <mem_malloc+0x10e>
          }
          lfree = cur;
 800cb40:	4a28      	ldr	r2, [pc, #160]	@ (800cbe4 <mem_malloc+0x1d0>)
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cb46:	4b27      	ldr	r3, [pc, #156]	@ (800cbe4 <mem_malloc+0x1d0>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	4b2a      	ldr	r3, [pc, #168]	@ (800cbf4 <mem_malloc+0x1e0>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d00b      	beq.n	800cb6a <mem_malloc+0x156>
 800cb52:	4b24      	ldr	r3, [pc, #144]	@ (800cbe4 <mem_malloc+0x1d0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	791b      	ldrb	r3, [r3, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d006      	beq.n	800cb6a <mem_malloc+0x156>
 800cb5c:	4b22      	ldr	r3, [pc, #136]	@ (800cbe8 <mem_malloc+0x1d4>)
 800cb5e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800cb62:	4925      	ldr	r1, [pc, #148]	@ (800cbf8 <mem_malloc+0x1e4>)
 800cb64:	4822      	ldr	r0, [pc, #136]	@ (800cbf0 <mem_malloc+0x1dc>)
 800cb66:	f00a fec3 	bl	80178f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cb6a:	8bba      	ldrh	r2, [r7, #28]
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	4413      	add	r3, r2
 800cb70:	3308      	adds	r3, #8
 800cb72:	4a20      	ldr	r2, [pc, #128]	@ (800cbf4 <mem_malloc+0x1e0>)
 800cb74:	6812      	ldr	r2, [r2, #0]
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d906      	bls.n	800cb88 <mem_malloc+0x174>
 800cb7a:	4b1b      	ldr	r3, [pc, #108]	@ (800cbe8 <mem_malloc+0x1d4>)
 800cb7c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800cb80:	491e      	ldr	r1, [pc, #120]	@ (800cbfc <mem_malloc+0x1e8>)
 800cb82:	481b      	ldr	r0, [pc, #108]	@ (800cbf0 <mem_malloc+0x1dc>)
 800cb84:	f00a feb4 	bl	80178f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f003 0303 	and.w	r3, r3, #3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <mem_malloc+0x18c>
 800cb92:	4b15      	ldr	r3, [pc, #84]	@ (800cbe8 <mem_malloc+0x1d4>)
 800cb94:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800cb98:	4919      	ldr	r1, [pc, #100]	@ (800cc00 <mem_malloc+0x1ec>)
 800cb9a:	4815      	ldr	r0, [pc, #84]	@ (800cbf0 <mem_malloc+0x1dc>)
 800cb9c:	f00a fea8 	bl	80178f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f003 0303 	and.w	r3, r3, #3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d006      	beq.n	800cbb8 <mem_malloc+0x1a4>
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe8 <mem_malloc+0x1d4>)
 800cbac:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800cbb0:	4914      	ldr	r1, [pc, #80]	@ (800cc04 <mem_malloc+0x1f0>)
 800cbb2:	480f      	ldr	r0, [pc, #60]	@ (800cbf0 <mem_malloc+0x1dc>)
 800cbb4:	f00a fe9c 	bl	80178f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	3308      	adds	r3, #8
 800cbbc:	e00e      	b.n	800cbdc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cbbe:	8bfb      	ldrh	r3, [r7, #30]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff fc87 	bl	800c4d4 <ptr_to_mem>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cbcc:	8bfa      	ldrh	r2, [r7, #30]
 800cbce:	8bbb      	ldrh	r3, [r7, #28]
 800cbd0:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	f4ff af44 	bcc.w	800ca62 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3720      	adds	r7, #32
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	200055c0 	.word	0x200055c0
 800cbe8:	08018a08 	.word	0x08018a08
 800cbec:	08018bb0 	.word	0x08018bb0
 800cbf0:	08018a50 	.word	0x08018a50
 800cbf4:	200055bc 	.word	0x200055bc
 800cbf8:	08018bc4 	.word	0x08018bc4
 800cbfc:	08018be0 	.word	0x08018be0
 800cc00:	08018c10 	.word	0x08018c10
 800cc04:	08018c40 	.word	0x08018c40

0800cc08 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	3303      	adds	r3, #3
 800cc1e:	f023 0303 	bic.w	r3, r3, #3
 800cc22:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cc24:	2300      	movs	r3, #0
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	e011      	b.n	800cc4e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	889b      	ldrh	r3, [r3, #4]
 800cc40:	461a      	mov	r2, r3
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	4413      	add	r3, r2
 800cc46:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	88db      	ldrh	r3, [r3, #6]
 800cc52:	461a      	mov	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4293      	cmp	r3, r2
 800cc58:	dbe7      	blt.n	800cc2a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cc5a:	bf00      	nop
 800cc5c:	bf00      	nop
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc6e:	2300      	movs	r3, #0
 800cc70:	80fb      	strh	r3, [r7, #6]
 800cc72:	e009      	b.n	800cc88 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cc74:	88fb      	ldrh	r3, [r7, #6]
 800cc76:	4a08      	ldr	r2, [pc, #32]	@ (800cc98 <memp_init+0x30>)
 800cc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff ffc3 	bl	800cc08 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc82:	88fb      	ldrh	r3, [r7, #6]
 800cc84:	3301      	adds	r3, #1
 800cc86:	80fb      	strh	r3, [r7, #6]
 800cc88:	88fb      	ldrh	r3, [r7, #6]
 800cc8a:	2b08      	cmp	r3, #8
 800cc8c:	d9f2      	bls.n	800cc74 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cc8e:	bf00      	nop
 800cc90:	bf00      	nop
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	0801bf78 	.word	0x0801bf78

0800cc9c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d012      	beq.n	800ccd8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	6812      	ldr	r2, [r2, #0]
 800ccba:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f003 0303 	and.w	r3, r3, #3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d006      	beq.n	800ccd4 <do_memp_malloc_pool+0x38>
 800ccc6:	4b07      	ldr	r3, [pc, #28]	@ (800cce4 <do_memp_malloc_pool+0x48>)
 800ccc8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800cccc:	4906      	ldr	r1, [pc, #24]	@ (800cce8 <do_memp_malloc_pool+0x4c>)
 800ccce:	4807      	ldr	r0, [pc, #28]	@ (800ccec <do_memp_malloc_pool+0x50>)
 800ccd0:	f00a fe0e 	bl	80178f0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	e000      	b.n	800ccda <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	08018ccc 	.word	0x08018ccc
 800cce8:	08018cfc 	.word	0x08018cfc
 800ccec:	08018d20 	.word	0x08018d20

0800ccf0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d106      	bne.n	800cd0c <memp_malloc_pool+0x1c>
 800ccfe:	4b0a      	ldr	r3, [pc, #40]	@ (800cd28 <memp_malloc_pool+0x38>)
 800cd00:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800cd04:	4909      	ldr	r1, [pc, #36]	@ (800cd2c <memp_malloc_pool+0x3c>)
 800cd06:	480a      	ldr	r0, [pc, #40]	@ (800cd30 <memp_malloc_pool+0x40>)
 800cd08:	f00a fdf2 	bl	80178f0 <iprintf>
  if (desc == NULL) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d101      	bne.n	800cd16 <memp_malloc_pool+0x26>
    return NULL;
 800cd12:	2300      	movs	r3, #0
 800cd14:	e003      	b.n	800cd1e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff ffc0 	bl	800cc9c <do_memp_malloc_pool>
 800cd1c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	08018ccc 	.word	0x08018ccc
 800cd2c:	08018d48 	.word	0x08018d48
 800cd30:	08018d20 	.word	0x08018d20

0800cd34 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cd3e:	79fb      	ldrb	r3, [r7, #7]
 800cd40:	2b08      	cmp	r3, #8
 800cd42:	d908      	bls.n	800cd56 <memp_malloc+0x22>
 800cd44:	4b0a      	ldr	r3, [pc, #40]	@ (800cd70 <memp_malloc+0x3c>)
 800cd46:	f240 1257 	movw	r2, #343	@ 0x157
 800cd4a:	490a      	ldr	r1, [pc, #40]	@ (800cd74 <memp_malloc+0x40>)
 800cd4c:	480a      	ldr	r0, [pc, #40]	@ (800cd78 <memp_malloc+0x44>)
 800cd4e:	f00a fdcf 	bl	80178f0 <iprintf>
 800cd52:	2300      	movs	r3, #0
 800cd54:	e008      	b.n	800cd68 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	4a08      	ldr	r2, [pc, #32]	@ (800cd7c <memp_malloc+0x48>)
 800cd5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff ff9c 	bl	800cc9c <do_memp_malloc_pool>
 800cd64:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cd66:	68fb      	ldr	r3, [r7, #12]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	08018ccc 	.word	0x08018ccc
 800cd74:	08018d5c 	.word	0x08018d5c
 800cd78:	08018d20 	.word	0x08018d20
 800cd7c:	0801bf78 	.word	0x0801bf78

0800cd80 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	f003 0303 	and.w	r3, r3, #3
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d006      	beq.n	800cda2 <do_memp_free_pool+0x22>
 800cd94:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc0 <do_memp_free_pool+0x40>)
 800cd96:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800cd9a:	490a      	ldr	r1, [pc, #40]	@ (800cdc4 <do_memp_free_pool+0x44>)
 800cd9c:	480a      	ldr	r0, [pc, #40]	@ (800cdc8 <do_memp_free_pool+0x48>)
 800cd9e:	f00a fda7 	bl	80178f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800cdb8:	bf00      	nop
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	08018ccc 	.word	0x08018ccc
 800cdc4:	08018d7c 	.word	0x08018d7c
 800cdc8:	08018d20 	.word	0x08018d20

0800cdcc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d106      	bne.n	800cdea <memp_free_pool+0x1e>
 800cddc:	4b0a      	ldr	r3, [pc, #40]	@ (800ce08 <memp_free_pool+0x3c>)
 800cdde:	f240 1295 	movw	r2, #405	@ 0x195
 800cde2:	490a      	ldr	r1, [pc, #40]	@ (800ce0c <memp_free_pool+0x40>)
 800cde4:	480a      	ldr	r0, [pc, #40]	@ (800ce10 <memp_free_pool+0x44>)
 800cde6:	f00a fd83 	bl	80178f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d007      	beq.n	800ce00 <memp_free_pool+0x34>
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d004      	beq.n	800ce00 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff ffc1 	bl	800cd80 <do_memp_free_pool>
 800cdfe:	e000      	b.n	800ce02 <memp_free_pool+0x36>
    return;
 800ce00:	bf00      	nop
}
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	08018ccc 	.word	0x08018ccc
 800ce0c:	08018d48 	.word	0x08018d48
 800ce10:	08018d20 	.word	0x08018d20

0800ce14 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	6039      	str	r1, [r7, #0]
 800ce1e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	2b08      	cmp	r3, #8
 800ce24:	d907      	bls.n	800ce36 <memp_free+0x22>
 800ce26:	4b0c      	ldr	r3, [pc, #48]	@ (800ce58 <memp_free+0x44>)
 800ce28:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ce2c:	490b      	ldr	r1, [pc, #44]	@ (800ce5c <memp_free+0x48>)
 800ce2e:	480c      	ldr	r0, [pc, #48]	@ (800ce60 <memp_free+0x4c>)
 800ce30:	f00a fd5e 	bl	80178f0 <iprintf>
 800ce34:	e00c      	b.n	800ce50 <memp_free+0x3c>

  if (mem == NULL) {
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d008      	beq.n	800ce4e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ce3c:	79fb      	ldrb	r3, [r7, #7]
 800ce3e:	4a09      	ldr	r2, [pc, #36]	@ (800ce64 <memp_free+0x50>)
 800ce40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff ff9a 	bl	800cd80 <do_memp_free_pool>
 800ce4c:	e000      	b.n	800ce50 <memp_free+0x3c>
    return;
 800ce4e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	08018ccc 	.word	0x08018ccc
 800ce5c:	08018d9c 	.word	0x08018d9c
 800ce60:	08018d20 	.word	0x08018d20
 800ce64:	0801bf78 	.word	0x0801bf78

0800ce68 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ce6c:	bf00      	nop
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
	...

0800ce78 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af02      	add	r7, sp, #8
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d108      	bne.n	800ce9e <netif_add+0x26>
 800ce8c:	4b96      	ldr	r3, [pc, #600]	@ (800d0e8 <netif_add+0x270>)
 800ce8e:	f240 1227 	movw	r2, #295	@ 0x127
 800ce92:	4996      	ldr	r1, [pc, #600]	@ (800d0ec <netif_add+0x274>)
 800ce94:	4896      	ldr	r0, [pc, #600]	@ (800d0f0 <netif_add+0x278>)
 800ce96:	f00a fd2b 	bl	80178f0 <iprintf>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e14c      	b.n	800d138 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d108      	bne.n	800ceb6 <netif_add+0x3e>
 800cea4:	4b90      	ldr	r3, [pc, #576]	@ (800d0e8 <netif_add+0x270>)
 800cea6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ceaa:	4992      	ldr	r1, [pc, #584]	@ (800d0f4 <netif_add+0x27c>)
 800ceac:	4890      	ldr	r0, [pc, #576]	@ (800d0f0 <netif_add+0x278>)
 800ceae:	f00a fd1f 	bl	80178f0 <iprintf>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e140      	b.n	800d138 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cebc:	4b8e      	ldr	r3, [pc, #568]	@ (800d0f8 <netif_add+0x280>)
 800cebe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d101      	bne.n	800ceca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cec6:	4b8c      	ldr	r3, [pc, #560]	@ (800d0f8 <netif_add+0x280>)
 800cec8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ced0:	4b89      	ldr	r3, [pc, #548]	@ (800d0f8 <netif_add+0x280>)
 800ced2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	4a84      	ldr	r2, [pc, #528]	@ (800d0fc <netif_add+0x284>)
 800ceea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6a3a      	ldr	r2, [r7, #32]
 800cf04:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cf06:	4b7e      	ldr	r3, [pc, #504]	@ (800d100 <netif_add+0x288>)
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf14:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	68b9      	ldr	r1, [r7, #8]
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f000 f9f5 	bl	800d30c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	4798      	blx	r3
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d001      	beq.n	800cf32 <netif_add+0xba>
    return NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e102      	b.n	800d138 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf38:	2bff      	cmp	r3, #255	@ 0xff
 800cf3a:	d103      	bne.n	800cf44 <netif_add+0xcc>
        netif->num = 0;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf48:	4b6e      	ldr	r3, [pc, #440]	@ (800d104 <netif_add+0x28c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	617b      	str	r3, [r7, #20]
 800cf4e:	e02b      	b.n	800cfa8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d106      	bne.n	800cf66 <netif_add+0xee>
 800cf58:	4b63      	ldr	r3, [pc, #396]	@ (800d0e8 <netif_add+0x270>)
 800cf5a:	f240 128b 	movw	r2, #395	@ 0x18b
 800cf5e:	496a      	ldr	r1, [pc, #424]	@ (800d108 <netif_add+0x290>)
 800cf60:	4863      	ldr	r0, [pc, #396]	@ (800d0f0 <netif_add+0x278>)
 800cf62:	f00a fcc5 	bl	80178f0 <iprintf>
        num_netifs++;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	2bff      	cmp	r3, #255	@ 0xff
 800cf70:	dd06      	ble.n	800cf80 <netif_add+0x108>
 800cf72:	4b5d      	ldr	r3, [pc, #372]	@ (800d0e8 <netif_add+0x270>)
 800cf74:	f240 128d 	movw	r2, #397	@ 0x18d
 800cf78:	4964      	ldr	r1, [pc, #400]	@ (800d10c <netif_add+0x294>)
 800cf7a:	485d      	ldr	r0, [pc, #372]	@ (800d0f0 <netif_add+0x278>)
 800cf7c:	f00a fcb8 	bl	80178f0 <iprintf>
        if (netif2->num == netif->num) {
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d108      	bne.n	800cfa2 <netif_add+0x12a>
          netif->num++;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf96:	3301      	adds	r3, #1
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800cfa0:	e005      	b.n	800cfae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	617b      	str	r3, [r7, #20]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1d0      	bne.n	800cf50 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1be      	bne.n	800cf32 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfba:	2bfe      	cmp	r3, #254	@ 0xfe
 800cfbc:	d103      	bne.n	800cfc6 <netif_add+0x14e>
    netif_num = 0;
 800cfbe:	4b50      	ldr	r3, [pc, #320]	@ (800d100 <netif_add+0x288>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
 800cfc4:	e006      	b.n	800cfd4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfcc:	3301      	adds	r3, #1
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	4b4b      	ldr	r3, [pc, #300]	@ (800d100 <netif_add+0x288>)
 800cfd2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cfd4:	4b4b      	ldr	r3, [pc, #300]	@ (800d104 <netif_add+0x28c>)
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cfdc:	4a49      	ldr	r2, [pc, #292]	@ (800d104 <netif_add+0x28c>)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800cfe8:	4619      	mov	r1, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cff0:	461a      	mov	r2, r3
 800cff2:	4847      	ldr	r0, [pc, #284]	@ (800d110 <netif_add+0x298>)
 800cff4:	f00a fc7c 	bl	80178f0 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800cff8:	4846      	ldr	r0, [pc, #280]	@ (800d114 <netif_add+0x29c>)
 800cffa:	f00a fc79 	bl	80178f0 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d003      	beq.n	800d00c <netif_add+0x194>
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	4619      	mov	r1, r3
 800d00a:	e000      	b.n	800d00e <netif_add+0x196>
 800d00c:	2100      	movs	r1, #0
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d004      	beq.n	800d01e <netif_add+0x1a6>
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	3301      	adds	r3, #1
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	461a      	mov	r2, r3
 800d01c:	e000      	b.n	800d020 <netif_add+0x1a8>
 800d01e:	2200      	movs	r2, #0
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d004      	beq.n	800d030 <netif_add+0x1b8>
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	3302      	adds	r3, #2
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	4618      	mov	r0, r3
 800d02e:	e000      	b.n	800d032 <netif_add+0x1ba>
 800d030:	2000      	movs	r0, #0
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d003      	beq.n	800d040 <netif_add+0x1c8>
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	3303      	adds	r3, #3
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	e000      	b.n	800d042 <netif_add+0x1ca>
 800d040:	2300      	movs	r3, #0
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	4603      	mov	r3, r0
 800d046:	4834      	ldr	r0, [pc, #208]	@ (800d118 <netif_add+0x2a0>)
 800d048:	f00a fc52 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800d04c:	4833      	ldr	r0, [pc, #204]	@ (800d11c <netif_add+0x2a4>)
 800d04e:	f00a fc4f 	bl	80178f0 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d003      	beq.n	800d060 <netif_add+0x1e8>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	4619      	mov	r1, r3
 800d05e:	e000      	b.n	800d062 <netif_add+0x1ea>
 800d060:	2100      	movs	r1, #0
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d004      	beq.n	800d072 <netif_add+0x1fa>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	3301      	adds	r3, #1
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	461a      	mov	r2, r3
 800d070:	e000      	b.n	800d074 <netif_add+0x1fc>
 800d072:	2200      	movs	r2, #0
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d004      	beq.n	800d084 <netif_add+0x20c>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3302      	adds	r3, #2
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	4618      	mov	r0, r3
 800d082:	e000      	b.n	800d086 <netif_add+0x20e>
 800d084:	2000      	movs	r0, #0
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d003      	beq.n	800d094 <netif_add+0x21c>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	3303      	adds	r3, #3
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	e000      	b.n	800d096 <netif_add+0x21e>
 800d094:	2300      	movs	r3, #0
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	4603      	mov	r3, r0
 800d09a:	481f      	ldr	r0, [pc, #124]	@ (800d118 <netif_add+0x2a0>)
 800d09c:	f00a fc28 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800d0a0:	481f      	ldr	r0, [pc, #124]	@ (800d120 <netif_add+0x2a8>)
 800d0a2:	f00a fc25 	bl	80178f0 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d003      	beq.n	800d0b4 <netif_add+0x23c>
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	e000      	b.n	800d0b6 <netif_add+0x23e>
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <netif_add+0x24e>
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	e000      	b.n	800d0c8 <netif_add+0x250>
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d004      	beq.n	800d0d8 <netif_add+0x260>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	3302      	adds	r3, #2
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	e000      	b.n	800d0da <netif_add+0x262>
 800d0d8:	2000      	movs	r0, #0
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d021      	beq.n	800d124 <netif_add+0x2ac>
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	3303      	adds	r3, #3
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	e01e      	b.n	800d126 <netif_add+0x2ae>
 800d0e8:	08018db8 	.word	0x08018db8
 800d0ec:	08018e4c 	.word	0x08018e4c
 800d0f0:	08018e08 	.word	0x08018e08
 800d0f4:	08018e68 	.word	0x08018e68
 800d0f8:	0801bfdc 	.word	0x0801bfdc
 800d0fc:	0800d60f 	.word	0x0800d60f
 800d100:	200084f8 	.word	0x200084f8
 800d104:	200084f0 	.word	0x200084f0
 800d108:	08018e8c 	.word	0x08018e8c
 800d10c:	08018ea0 	.word	0x08018ea0
 800d110:	08018ed0 	.word	0x08018ed0
 800d114:	08018ef0 	.word	0x08018ef0
 800d118:	08018ef8 	.word	0x08018ef8
 800d11c:	08018f08 	.word	0x08018f08
 800d120:	08018f14 	.word	0x08018f14
 800d124:	2300      	movs	r3, #0
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4603      	mov	r3, r0
 800d12a:	4805      	ldr	r0, [pc, #20]	@ (800d140 <netif_add+0x2c8>)
 800d12c:	f00a fbe0 	bl	80178f0 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800d130:	200a      	movs	r0, #10
 800d132:	f00a fbef 	bl	8017914 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d136:	68fb      	ldr	r3, [r7, #12]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	08018ef8 	.word	0x08018ef8

0800d144 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f002 fbb9 	bl	800f8c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f007 f927 	bl	80143ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d15e:	bf00      	nop
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d106      	bne.n	800d188 <netif_do_set_ipaddr+0x20>
 800d17a:	4b1e      	ldr	r3, [pc, #120]	@ (800d1f4 <netif_do_set_ipaddr+0x8c>)
 800d17c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d180:	491d      	ldr	r1, [pc, #116]	@ (800d1f8 <netif_do_set_ipaddr+0x90>)
 800d182:	481e      	ldr	r0, [pc, #120]	@ (800d1fc <netif_do_set_ipaddr+0x94>)
 800d184:	f00a fbb4 	bl	80178f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d106      	bne.n	800d19c <netif_do_set_ipaddr+0x34>
 800d18e:	4b19      	ldr	r3, [pc, #100]	@ (800d1f4 <netif_do_set_ipaddr+0x8c>)
 800d190:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d194:	4918      	ldr	r1, [pc, #96]	@ (800d1f8 <netif_do_set_ipaddr+0x90>)
 800d196:	4819      	ldr	r0, [pc, #100]	@ (800d1fc <netif_do_set_ipaddr+0x94>)
 800d198:	f00a fbaa 	bl	80178f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d01f      	beq.n	800d1ea <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800d1ba:	4811      	ldr	r0, [pc, #68]	@ (800d200 <netif_do_set_ipaddr+0x98>)
 800d1bc:	f00a fc08 	bl	80179d0 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d1c0:	f107 0314 	add.w	r3, r7, #20
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff ffbc 	bl	800d144 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d002      	beq.n	800d1d8 <netif_do_set_ipaddr+0x70>
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	e000      	b.n	800d1da <netif_do_set_ipaddr+0x72>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d1de:	2101      	movs	r1, #1
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 f92d 	bl	800d440 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e000      	b.n	800d1ec <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	08018db8 	.word	0x08018db8
 800d1f8:	08018f1c 	.word	0x08018f1c
 800d1fc:	08018e08 	.word	0x08018e08
 800d200:	08018f2c 	.word	0x08018f2c

0800d204 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d204:	b5b0      	push	{r4, r5, r7, lr}
 800d206:	b088      	sub	sp, #32
 800d208:	af04      	add	r7, sp, #16
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3308      	adds	r3, #8
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d02d      	beq.n	800d27a <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <netif_do_set_netmask+0x26>
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	e000      	b.n	800d22c <netif_do_set_netmask+0x28>
 800d22a:	2300      	movs	r3, #0
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d236:	4618      	mov	r0, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d23e:	461c      	mov	r4, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	3308      	adds	r3, #8
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	461d      	mov	r5, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	3308      	adds	r3, #8
 800d24c:	3301      	adds	r3, #1
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	3308      	adds	r3, #8
 800d256:	3302      	adds	r3, #2
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	4619      	mov	r1, r3
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3308      	adds	r3, #8
 800d260:	3303      	adds	r3, #3
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	9302      	str	r3, [sp, #8]
 800d266:	9101      	str	r1, [sp, #4]
 800d268:	9200      	str	r2, [sp, #0]
 800d26a:	462b      	mov	r3, r5
 800d26c:	4622      	mov	r2, r4
 800d26e:	4601      	mov	r1, r0
 800d270:	4804      	ldr	r0, [pc, #16]	@ (800d284 <netif_do_set_netmask+0x80>)
 800d272:	f00a fb3d 	bl	80178f0 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d276:	2301      	movs	r3, #1
 800d278:	e000      	b.n	800d27c <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bdb0      	pop	{r4, r5, r7, pc}
 800d284:	08018f7c 	.word	0x08018f7c

0800d288 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d288:	b5b0      	push	{r4, r5, r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af04      	add	r7, sp, #16
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	330c      	adds	r3, #12
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d02d      	beq.n	800d2fe <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <netif_do_set_gw+0x26>
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	e000      	b.n	800d2b0 <netif_do_set_gw+0x28>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d2c2:	461c      	mov	r4, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	330c      	adds	r3, #12
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	461d      	mov	r5, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	330c      	adds	r3, #12
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	330c      	adds	r3, #12
 800d2da:	3302      	adds	r3, #2
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	330c      	adds	r3, #12
 800d2e4:	3303      	adds	r3, #3
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	9302      	str	r3, [sp, #8]
 800d2ea:	9101      	str	r1, [sp, #4]
 800d2ec:	9200      	str	r2, [sp, #0]
 800d2ee:	462b      	mov	r3, r5
 800d2f0:	4622      	mov	r2, r4
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	4804      	ldr	r0, [pc, #16]	@ (800d308 <netif_do_set_gw+0x80>)
 800d2f6:	f00a fafb 	bl	80178f0 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e000      	b.n	800d300 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bdb0      	pop	{r4, r5, r7, pc}
 800d308:	08018fdc 	.word	0x08018fdc

0800d30c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b088      	sub	sp, #32
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
 800d318:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d101      	bne.n	800d32c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d328:	4b1c      	ldr	r3, [pc, #112]	@ (800d39c <netif_set_addr+0x90>)
 800d32a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d332:	4b1a      	ldr	r3, [pc, #104]	@ (800d39c <netif_set_addr+0x90>)
 800d334:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d101      	bne.n	800d340 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d33c:	4b17      	ldr	r3, [pc, #92]	@ (800d39c <netif_set_addr+0x90>)
 800d33e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <netif_set_addr+0x42>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <netif_set_addr+0x46>
 800d34e:	2301      	movs	r3, #1
 800d350:	e000      	b.n	800d354 <netif_set_addr+0x48>
 800d352:	2300      	movs	r3, #0
 800d354:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d006      	beq.n	800d36a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d35c:	f107 0310 	add.w	r3, r7, #16
 800d360:	461a      	mov	r2, r3
 800d362:	68b9      	ldr	r1, [r7, #8]
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f7ff feff 	bl	800d168 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d36a:	69fa      	ldr	r2, [r7, #28]
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f7ff ff48 	bl	800d204 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f7ff ff85 	bl	800d288 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d106      	bne.n	800d392 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d384:	f107 0310 	add.w	r3, r7, #16
 800d388:	461a      	mov	r2, r3
 800d38a:	68b9      	ldr	r1, [r7, #8]
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f7ff feeb 	bl	800d168 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d392:	bf00      	nop
 800d394:	3720      	adds	r7, #32
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	0801bfdc 	.word	0x0801bfdc

0800d3a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d3a8:	4a0d      	ldr	r2, [pc, #52]	@ (800d3e0 <netif_set_default+0x40>)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d004      	beq.n	800d3be <netif_set_default+0x1e>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	e000      	b.n	800d3c0 <netif_set_default+0x20>
 800d3be:	2127      	movs	r1, #39	@ 0x27
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d003      	beq.n	800d3ce <netif_set_default+0x2e>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d3cc:	e000      	b.n	800d3d0 <netif_set_default+0x30>
 800d3ce:	2327      	movs	r3, #39	@ 0x27
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4804      	ldr	r0, [pc, #16]	@ (800d3e4 <netif_set_default+0x44>)
 800d3d4:	f00a fa8c 	bl	80178f0 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d3d8:	bf00      	nop
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	200084f4 	.word	0x200084f4
 800d3e4:	08019050 	.word	0x08019050

0800d3e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d107      	bne.n	800d406 <netif_set_up+0x1e>
 800d3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d434 <netif_set_up+0x4c>)
 800d3f8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d3fc:	490e      	ldr	r1, [pc, #56]	@ (800d438 <netif_set_up+0x50>)
 800d3fe:	480f      	ldr	r0, [pc, #60]	@ (800d43c <netif_set_up+0x54>)
 800d400:	f00a fa76 	bl	80178f0 <iprintf>
 800d404:	e013      	b.n	800d42e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d40c:	f003 0301 	and.w	r3, r3, #1
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10c      	bne.n	800d42e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d41a:	f043 0301 	orr.w	r3, r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d426:	2103      	movs	r1, #3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f809 	bl	800d440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	08018db8 	.word	0x08018db8
 800d438:	08019078 	.word	0x08019078
 800d43c:	08018e08 	.word	0x08018e08

0800d440 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d106      	bne.n	800d460 <netif_issue_reports+0x20>
 800d452:	4b18      	ldr	r3, [pc, #96]	@ (800d4b4 <netif_issue_reports+0x74>)
 800d454:	f240 326d 	movw	r2, #877	@ 0x36d
 800d458:	4917      	ldr	r1, [pc, #92]	@ (800d4b8 <netif_issue_reports+0x78>)
 800d45a:	4818      	ldr	r0, [pc, #96]	@ (800d4bc <netif_issue_reports+0x7c>)
 800d45c:	f00a fa48 	bl	80178f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d466:	f003 0304 	and.w	r3, r3, #4
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d01e      	beq.n	800d4ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d474:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d017      	beq.n	800d4ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d47c:	78fb      	ldrb	r3, [r7, #3]
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	d013      	beq.n	800d4ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	3304      	adds	r3, #4
 800d48a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00e      	beq.n	800d4ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d496:	f003 0308 	and.w	r3, r3, #8
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d007      	beq.n	800d4ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f007 ff5d 	bl	8015364 <etharp_request>
 800d4aa:	e000      	b.n	800d4ae <netif_issue_reports+0x6e>
    return;
 800d4ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	08018db8 	.word	0x08018db8
 800d4b8:	08019094 	.word	0x08019094
 800d4bc:	08018e08 	.word	0x08018e08

0800d4c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d107      	bne.n	800d4de <netif_set_down+0x1e>
 800d4ce:	4b12      	ldr	r3, [pc, #72]	@ (800d518 <netif_set_down+0x58>)
 800d4d0:	f240 329b 	movw	r2, #923	@ 0x39b
 800d4d4:	4911      	ldr	r1, [pc, #68]	@ (800d51c <netif_set_down+0x5c>)
 800d4d6:	4812      	ldr	r0, [pc, #72]	@ (800d520 <netif_set_down+0x60>)
 800d4d8:	f00a fa0a 	bl	80178f0 <iprintf>
 800d4dc:	e019      	b.n	800d512 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d4e4:	f003 0301 	and.w	r3, r3, #1
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d012      	beq.n	800d512 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d4f2:	f023 0301 	bic.w	r3, r3, #1
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d504:	f003 0308 	and.w	r3, r3, #8
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f007 fae7 	bl	8014ae0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	08018db8 	.word	0x08018db8
 800d51c:	080190b8 	.word	0x080190b8
 800d520:	08018e08 	.word	0x08018e08

0800d524 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d107      	bne.n	800d542 <netif_set_link_up+0x1e>
 800d532:	4b13      	ldr	r3, [pc, #76]	@ (800d580 <netif_set_link_up+0x5c>)
 800d534:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d538:	4912      	ldr	r1, [pc, #72]	@ (800d584 <netif_set_link_up+0x60>)
 800d53a:	4813      	ldr	r0, [pc, #76]	@ (800d588 <netif_set_link_up+0x64>)
 800d53c:	f00a f9d8 	bl	80178f0 <iprintf>
 800d540:	e01b      	b.n	800d57a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d548:	f003 0304 	and.w	r3, r3, #4
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d114      	bne.n	800d57a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d556:	f043 0304 	orr.w	r3, r3, #4
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d562:	2103      	movs	r1, #3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff ff6b 	bl	800d440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	69db      	ldr	r3, [r3, #28]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d003      	beq.n	800d57a <netif_set_link_up+0x56>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	69db      	ldr	r3, [r3, #28]
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	08018db8 	.word	0x08018db8
 800d584:	080190d8 	.word	0x080190d8
 800d588:	08018e08 	.word	0x08018e08

0800d58c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d107      	bne.n	800d5aa <netif_set_link_down+0x1e>
 800d59a:	4b11      	ldr	r3, [pc, #68]	@ (800d5e0 <netif_set_link_down+0x54>)
 800d59c:	f240 4206 	movw	r2, #1030	@ 0x406
 800d5a0:	4910      	ldr	r1, [pc, #64]	@ (800d5e4 <netif_set_link_down+0x58>)
 800d5a2:	4811      	ldr	r0, [pc, #68]	@ (800d5e8 <netif_set_link_down+0x5c>)
 800d5a4:	f00a f9a4 	bl	80178f0 <iprintf>
 800d5a8:	e017      	b.n	800d5da <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d5b0:	f003 0304 	and.w	r3, r3, #4
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d010      	beq.n	800d5da <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d5be:	f023 0304 	bic.w	r3, r3, #4
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	69db      	ldr	r3, [r3, #28]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <netif_set_link_down+0x4e>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	08018db8 	.word	0x08018db8
 800d5e4:	080190fc 	.word	0x080190fc
 800d5e8:	08018e08 	.word	0x08018e08

0800d5ec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	61da      	str	r2, [r3, #28]
  }
}
 800d602:	bf00      	nop
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d60e:	b480      	push	{r7}
 800d610:	b085      	sub	sp, #20
 800d612:	af00      	add	r7, sp, #0
 800d614:	60f8      	str	r0, [r7, #12]
 800d616:	60b9      	str	r1, [r7, #8]
 800d618:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d61a:	f06f 030b 	mvn.w	r3, #11
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
	...

0800d62c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	4603      	mov	r3, r0
 800d634:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d636:	79fb      	ldrb	r3, [r7, #7]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d013      	beq.n	800d664 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d63c:	4b0d      	ldr	r3, [pc, #52]	@ (800d674 <netif_get_by_index+0x48>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	e00c      	b.n	800d65e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d64a:	3301      	adds	r3, #1
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	79fa      	ldrb	r2, [r7, #7]
 800d650:	429a      	cmp	r2, r3
 800d652:	d101      	bne.n	800d658 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	e006      	b.n	800d666 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1ef      	bne.n	800d644 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3714      	adds	r7, #20
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	200084f0 	.word	0x200084f0

0800d678 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d67e:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b0 <pbuf_free_ooseq+0x38>)
 800d680:	2200      	movs	r2, #0
 800d682:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d684:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b4 <pbuf_free_ooseq+0x3c>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	607b      	str	r3, [r7, #4]
 800d68a:	e00a      	b.n	800d6a2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d690:	2b00      	cmp	r3, #0
 800d692:	d003      	beq.n	800d69c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f002 f955 	bl	800f944 <tcp_free_ooseq>
      return;
 800d69a:	e005      	b.n	800d6a8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	607b      	str	r3, [r7, #4]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1f1      	bne.n	800d68c <pbuf_free_ooseq+0x14>
    }
  }
}
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	200084f9 	.word	0x200084f9
 800d6b4:	20008508 	.word	0x20008508

0800d6b8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d6bc:	4b03      	ldr	r3, [pc, #12]	@ (800d6cc <pbuf_pool_is_empty+0x14>)
 800d6be:	2201      	movs	r2, #1
 800d6c0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d6c2:	bf00      	nop
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr
 800d6cc:	200084f9 	.word	0x200084f9

0800d6d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	4611      	mov	r1, r2
 800d6dc:	461a      	mov	r2, r3
 800d6de:	460b      	mov	r3, r1
 800d6e0:	80fb      	strh	r3, [r7, #6]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	88ba      	ldrh	r2, [r7, #4]
 800d6fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d6fe:	8b3b      	ldrh	r3, [r7, #24]
 800d700:	b2da      	uxtb	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	7f3a      	ldrb	r2, [r7, #28]
 800d70a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2201      	movs	r2, #1
 800d710:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2200      	movs	r2, #0
 800d716:	73da      	strb	r2, [r3, #15]
}
 800d718:	bf00      	nop
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08c      	sub	sp, #48	@ 0x30
 800d728:	af02      	add	r7, sp, #8
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
 800d72e:	460b      	mov	r3, r1
 800d730:	80bb      	strh	r3, [r7, #4]
 800d732:	4613      	mov	r3, r2
 800d734:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d73a:	887b      	ldrh	r3, [r7, #2]
 800d73c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d740:	d07f      	beq.n	800d842 <pbuf_alloc+0x11e>
 800d742:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d746:	f300 80c8 	bgt.w	800d8da <pbuf_alloc+0x1b6>
 800d74a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d74e:	d010      	beq.n	800d772 <pbuf_alloc+0x4e>
 800d750:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d754:	f300 80c1 	bgt.w	800d8da <pbuf_alloc+0x1b6>
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d002      	beq.n	800d762 <pbuf_alloc+0x3e>
 800d75c:	2b41      	cmp	r3, #65	@ 0x41
 800d75e:	f040 80bc 	bne.w	800d8da <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d762:	887a      	ldrh	r2, [r7, #2]
 800d764:	88bb      	ldrh	r3, [r7, #4]
 800d766:	4619      	mov	r1, r3
 800d768:	2000      	movs	r0, #0
 800d76a:	f000 f8d1 	bl	800d910 <pbuf_alloc_reference>
 800d76e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d770:	e0bd      	b.n	800d8ee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d772:	2300      	movs	r3, #0
 800d774:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d776:	2300      	movs	r3, #0
 800d778:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d77a:	88bb      	ldrh	r3, [r7, #4]
 800d77c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d77e:	2008      	movs	r0, #8
 800d780:	f7ff fad8 	bl	800cd34 <memp_malloc>
 800d784:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d109      	bne.n	800d7a0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d78c:	f7ff ff94 	bl	800d6b8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <pbuf_alloc+0x78>
            pbuf_free(p);
 800d796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d798:	f000 faa8 	bl	800dcec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d79c:	2300      	movs	r3, #0
 800d79e:	e0a7      	b.n	800d8f0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d7a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d7a2:	3303      	adds	r3, #3
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	f023 0303 	bic.w	r3, r3, #3
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	8b7a      	ldrh	r2, [r7, #26]
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	bf28      	it	cs
 800d7b8:	4613      	movcs	r3, r2
 800d7ba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d7bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d7be:	3310      	adds	r3, #16
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	3303      	adds	r3, #3
 800d7c6:	f023 0303 	bic.w	r3, r3, #3
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	89f9      	ldrh	r1, [r7, #14]
 800d7ce:	8b7a      	ldrh	r2, [r7, #26]
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	9301      	str	r3, [sp, #4]
 800d7d4:	887b      	ldrh	r3, [r7, #2]
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	460b      	mov	r3, r1
 800d7da:	4601      	mov	r1, r0
 800d7dc:	6938      	ldr	r0, [r7, #16]
 800d7de:	f7ff ff77 	bl	800d6d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	f003 0303 	and.w	r3, r3, #3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d006      	beq.n	800d7fc <pbuf_alloc+0xd8>
 800d7ee:	4b42      	ldr	r3, [pc, #264]	@ (800d8f8 <pbuf_alloc+0x1d4>)
 800d7f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d7f4:	4941      	ldr	r1, [pc, #260]	@ (800d8fc <pbuf_alloc+0x1d8>)
 800d7f6:	4842      	ldr	r0, [pc, #264]	@ (800d900 <pbuf_alloc+0x1dc>)
 800d7f8:	f00a f87a 	bl	80178f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d7fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d7fe:	3303      	adds	r3, #3
 800d800:	f023 0303 	bic.w	r3, r3, #3
 800d804:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d808:	d106      	bne.n	800d818 <pbuf_alloc+0xf4>
 800d80a:	4b3b      	ldr	r3, [pc, #236]	@ (800d8f8 <pbuf_alloc+0x1d4>)
 800d80c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d810:	493c      	ldr	r1, [pc, #240]	@ (800d904 <pbuf_alloc+0x1e0>)
 800d812:	483b      	ldr	r0, [pc, #236]	@ (800d900 <pbuf_alloc+0x1dc>)
 800d814:	f00a f86c 	bl	80178f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d102      	bne.n	800d824 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	627b      	str	r3, [r7, #36]	@ 0x24
 800d822:	e002      	b.n	800d82a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d82e:	8b7a      	ldrh	r2, [r7, #26]
 800d830:	89fb      	ldrh	r3, [r7, #14]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d836:	2300      	movs	r3, #0
 800d838:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d83a:	8b7b      	ldrh	r3, [r7, #26]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d19e      	bne.n	800d77e <pbuf_alloc+0x5a>
      break;
 800d840:	e055      	b.n	800d8ee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d842:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d844:	3303      	adds	r3, #3
 800d846:	b29b      	uxth	r3, r3
 800d848:	f023 0303 	bic.w	r3, r3, #3
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	88bb      	ldrh	r3, [r7, #4]
 800d850:	3303      	adds	r3, #3
 800d852:	b29b      	uxth	r3, r3
 800d854:	f023 0303 	bic.w	r3, r3, #3
 800d858:	b29b      	uxth	r3, r3
 800d85a:	4413      	add	r3, r2
 800d85c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d85e:	8b3b      	ldrh	r3, [r7, #24]
 800d860:	3310      	adds	r3, #16
 800d862:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d864:	8b3a      	ldrh	r2, [r7, #24]
 800d866:	88bb      	ldrh	r3, [r7, #4]
 800d868:	3303      	adds	r3, #3
 800d86a:	f023 0303 	bic.w	r3, r3, #3
 800d86e:	429a      	cmp	r2, r3
 800d870:	d306      	bcc.n	800d880 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d872:	8afa      	ldrh	r2, [r7, #22]
 800d874:	88bb      	ldrh	r3, [r7, #4]
 800d876:	3303      	adds	r3, #3
 800d878:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d201      	bcs.n	800d884 <pbuf_alloc+0x160>
        return NULL;
 800d880:	2300      	movs	r3, #0
 800d882:	e035      	b.n	800d8f0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d884:	8afb      	ldrh	r3, [r7, #22]
 800d886:	4618      	mov	r0, r3
 800d888:	f7ff f8c4 	bl	800ca14 <mem_malloc>
 800d88c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d890:	2b00      	cmp	r3, #0
 800d892:	d101      	bne.n	800d898 <pbuf_alloc+0x174>
        return NULL;
 800d894:	2300      	movs	r3, #0
 800d896:	e02b      	b.n	800d8f0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d898:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d89a:	3310      	adds	r3, #16
 800d89c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d89e:	4413      	add	r3, r2
 800d8a0:	3303      	adds	r3, #3
 800d8a2:	f023 0303 	bic.w	r3, r3, #3
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	88b9      	ldrh	r1, [r7, #4]
 800d8aa:	88ba      	ldrh	r2, [r7, #4]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	887b      	ldrh	r3, [r7, #2]
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8ba:	f7ff ff09 	bl	800d6d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	f003 0303 	and.w	r3, r3, #3
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d010      	beq.n	800d8ec <pbuf_alloc+0x1c8>
 800d8ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d8f8 <pbuf_alloc+0x1d4>)
 800d8cc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d8d0:	490d      	ldr	r1, [pc, #52]	@ (800d908 <pbuf_alloc+0x1e4>)
 800d8d2:	480b      	ldr	r0, [pc, #44]	@ (800d900 <pbuf_alloc+0x1dc>)
 800d8d4:	f00a f80c 	bl	80178f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d8d8:	e008      	b.n	800d8ec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d8da:	4b07      	ldr	r3, [pc, #28]	@ (800d8f8 <pbuf_alloc+0x1d4>)
 800d8dc:	f240 1227 	movw	r2, #295	@ 0x127
 800d8e0:	490a      	ldr	r1, [pc, #40]	@ (800d90c <pbuf_alloc+0x1e8>)
 800d8e2:	4807      	ldr	r0, [pc, #28]	@ (800d900 <pbuf_alloc+0x1dc>)
 800d8e4:	f00a f804 	bl	80178f0 <iprintf>
      return NULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e001      	b.n	800d8f0 <pbuf_alloc+0x1cc>
      break;
 800d8ec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3728      	adds	r7, #40	@ 0x28
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	08019158 	.word	0x08019158
 800d8fc:	08019188 	.word	0x08019188
 800d900:	080191b8 	.word	0x080191b8
 800d904:	080191e0 	.word	0x080191e0
 800d908:	08019214 	.word	0x08019214
 800d90c:	08019240 	.word	0x08019240

0800d910 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af02      	add	r7, sp, #8
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	460b      	mov	r3, r1
 800d91a:	807b      	strh	r3, [r7, #2]
 800d91c:	4613      	mov	r3, r2
 800d91e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d920:	883b      	ldrh	r3, [r7, #0]
 800d922:	2b41      	cmp	r3, #65	@ 0x41
 800d924:	d009      	beq.n	800d93a <pbuf_alloc_reference+0x2a>
 800d926:	883b      	ldrh	r3, [r7, #0]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d006      	beq.n	800d93a <pbuf_alloc_reference+0x2a>
 800d92c:	4b0f      	ldr	r3, [pc, #60]	@ (800d96c <pbuf_alloc_reference+0x5c>)
 800d92e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d932:	490f      	ldr	r1, [pc, #60]	@ (800d970 <pbuf_alloc_reference+0x60>)
 800d934:	480f      	ldr	r0, [pc, #60]	@ (800d974 <pbuf_alloc_reference+0x64>)
 800d936:	f009 ffdb 	bl	80178f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d93a:	2007      	movs	r0, #7
 800d93c:	f7ff f9fa 	bl	800cd34 <memp_malloc>
 800d940:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d948:	2300      	movs	r3, #0
 800d94a:	e00b      	b.n	800d964 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d94c:	8879      	ldrh	r1, [r7, #2]
 800d94e:	887a      	ldrh	r2, [r7, #2]
 800d950:	2300      	movs	r3, #0
 800d952:	9301      	str	r3, [sp, #4]
 800d954:	883b      	ldrh	r3, [r7, #0]
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	460b      	mov	r3, r1
 800d95a:	6879      	ldr	r1, [r7, #4]
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f7ff feb7 	bl	800d6d0 <pbuf_init_alloced_pbuf>
  return p;
 800d962:	68fb      	ldr	r3, [r7, #12]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	08019158 	.word	0x08019158
 800d970:	0801925c 	.word	0x0801925c
 800d974:	080191b8 	.word	0x080191b8

0800d978 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b088      	sub	sp, #32
 800d97c:	af02      	add	r7, sp, #8
 800d97e:	607b      	str	r3, [r7, #4]
 800d980:	4603      	mov	r3, r0
 800d982:	73fb      	strb	r3, [r7, #15]
 800d984:	460b      	mov	r3, r1
 800d986:	81bb      	strh	r3, [r7, #12]
 800d988:	4613      	mov	r3, r2
 800d98a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d990:	8a7b      	ldrh	r3, [r7, #18]
 800d992:	3303      	adds	r3, #3
 800d994:	f023 0203 	bic.w	r2, r3, #3
 800d998:	89bb      	ldrh	r3, [r7, #12]
 800d99a:	441a      	add	r2, r3
 800d99c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d901      	bls.n	800d9a6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e018      	b.n	800d9d8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d007      	beq.n	800d9bc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d9ac:	8a7b      	ldrh	r3, [r7, #18]
 800d9ae:	3303      	adds	r3, #3
 800d9b0:	f023 0303 	bic.w	r3, r3, #3
 800d9b4:	6a3a      	ldr	r2, [r7, #32]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	617b      	str	r3, [r7, #20]
 800d9ba:	e001      	b.n	800d9c0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	89b9      	ldrh	r1, [r7, #12]
 800d9c4:	89ba      	ldrh	r2, [r7, #12]
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	897b      	ldrh	r3, [r7, #10]
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	6979      	ldr	r1, [r7, #20]
 800d9d2:	f7ff fe7d 	bl	800d6d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d9d6:	687b      	ldr	r3, [r7, #4]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3718      	adds	r7, #24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d106      	bne.n	800da00 <pbuf_realloc+0x20>
 800d9f2:	4b3a      	ldr	r3, [pc, #232]	@ (800dadc <pbuf_realloc+0xfc>)
 800d9f4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d9f8:	4939      	ldr	r1, [pc, #228]	@ (800dae0 <pbuf_realloc+0x100>)
 800d9fa:	483a      	ldr	r0, [pc, #232]	@ (800dae4 <pbuf_realloc+0x104>)
 800d9fc:	f009 ff78 	bl	80178f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	891b      	ldrh	r3, [r3, #8]
 800da04:	887a      	ldrh	r2, [r7, #2]
 800da06:	429a      	cmp	r2, r3
 800da08:	d263      	bcs.n	800dad2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	891a      	ldrh	r2, [r3, #8]
 800da0e:	887b      	ldrh	r3, [r7, #2]
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da14:	887b      	ldrh	r3, [r7, #2]
 800da16:	817b      	strh	r3, [r7, #10]
  q = p;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da1c:	e018      	b.n	800da50 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	895b      	ldrh	r3, [r3, #10]
 800da22:	897a      	ldrh	r2, [r7, #10]
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	891a      	ldrh	r2, [r3, #8]
 800da2c:	893b      	ldrh	r3, [r7, #8]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	b29a      	uxth	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <pbuf_realloc+0x70>
 800da42:	4b26      	ldr	r3, [pc, #152]	@ (800dadc <pbuf_realloc+0xfc>)
 800da44:	f240 12af 	movw	r2, #431	@ 0x1af
 800da48:	4927      	ldr	r1, [pc, #156]	@ (800dae8 <pbuf_realloc+0x108>)
 800da4a:	4826      	ldr	r0, [pc, #152]	@ (800dae4 <pbuf_realloc+0x104>)
 800da4c:	f009 ff50 	bl	80178f0 <iprintf>
  while (rem_len > q->len) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	895b      	ldrh	r3, [r3, #10]
 800da54:	897a      	ldrh	r2, [r7, #10]
 800da56:	429a      	cmp	r2, r3
 800da58:	d8e1      	bhi.n	800da1e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	7b1b      	ldrb	r3, [r3, #12]
 800da5e:	f003 030f 	and.w	r3, r3, #15
 800da62:	2b00      	cmp	r3, #0
 800da64:	d121      	bne.n	800daaa <pbuf_realloc+0xca>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	895b      	ldrh	r3, [r3, #10]
 800da6a:	897a      	ldrh	r2, [r7, #10]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d01c      	beq.n	800daaa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	7b5b      	ldrb	r3, [r3, #13]
 800da74:	f003 0302 	and.w	r3, r3, #2
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d116      	bne.n	800daaa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	b29a      	uxth	r2, r3
 800da86:	897b      	ldrh	r3, [r7, #10]
 800da88:	4413      	add	r3, r2
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4619      	mov	r1, r3
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f7fe fec4 	bl	800c81c <mem_trim>
 800da94:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <pbuf_realloc+0xca>
 800da9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dadc <pbuf_realloc+0xfc>)
 800da9e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800daa2:	4912      	ldr	r1, [pc, #72]	@ (800daec <pbuf_realloc+0x10c>)
 800daa4:	480f      	ldr	r0, [pc, #60]	@ (800dae4 <pbuf_realloc+0x104>)
 800daa6:	f009 ff23 	bl	80178f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	897a      	ldrh	r2, [r7, #10]
 800daae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	895a      	ldrh	r2, [r3, #10]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d004      	beq.n	800daca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 f911 	bl	800dcec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
 800dad0:	e000      	b.n	800dad4 <pbuf_realloc+0xf4>
    return;
 800dad2:	bf00      	nop

}
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	08019158 	.word	0x08019158
 800dae0:	08019270 	.word	0x08019270
 800dae4:	080191b8 	.word	0x080191b8
 800dae8:	08019288 	.word	0x08019288
 800daec:	080192a0 	.word	0x080192a0

0800daf0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	4613      	mov	r3, r2
 800dafc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d106      	bne.n	800db12 <pbuf_add_header_impl+0x22>
 800db04:	4b2b      	ldr	r3, [pc, #172]	@ (800dbb4 <pbuf_add_header_impl+0xc4>)
 800db06:	f240 12df 	movw	r2, #479	@ 0x1df
 800db0a:	492b      	ldr	r1, [pc, #172]	@ (800dbb8 <pbuf_add_header_impl+0xc8>)
 800db0c:	482b      	ldr	r0, [pc, #172]	@ (800dbbc <pbuf_add_header_impl+0xcc>)
 800db0e:	f009 feef 	bl	80178f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d003      	beq.n	800db20 <pbuf_add_header_impl+0x30>
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db1e:	d301      	bcc.n	800db24 <pbuf_add_header_impl+0x34>
    return 1;
 800db20:	2301      	movs	r3, #1
 800db22:	e043      	b.n	800dbac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d101      	bne.n	800db2e <pbuf_add_header_impl+0x3e>
    return 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	e03e      	b.n	800dbac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	891a      	ldrh	r2, [r3, #8]
 800db36:	8a7b      	ldrh	r3, [r7, #18]
 800db38:	4413      	add	r3, r2
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	8a7a      	ldrh	r2, [r7, #18]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d901      	bls.n	800db46 <pbuf_add_header_impl+0x56>
    return 1;
 800db42:	2301      	movs	r3, #1
 800db44:	e032      	b.n	800dbac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	7b1b      	ldrb	r3, [r3, #12]
 800db4a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800db4c:	8a3b      	ldrh	r3, [r7, #16]
 800db4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00c      	beq.n	800db70 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	425b      	negs	r3, r3
 800db5e:	4413      	add	r3, r2
 800db60:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3310      	adds	r3, #16
 800db66:	697a      	ldr	r2, [r7, #20]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d20d      	bcs.n	800db88 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800db6c:	2301      	movs	r3, #1
 800db6e:	e01d      	b.n	800dbac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d006      	beq.n	800db84 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	425b      	negs	r3, r3
 800db7e:	4413      	add	r3, r2
 800db80:	617b      	str	r3, [r7, #20]
 800db82:	e001      	b.n	800db88 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800db84:	2301      	movs	r3, #1
 800db86:	e011      	b.n	800dbac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	697a      	ldr	r2, [r7, #20]
 800db8c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	895a      	ldrh	r2, [r3, #10]
 800db92:	8a7b      	ldrh	r3, [r7, #18]
 800db94:	4413      	add	r3, r2
 800db96:	b29a      	uxth	r2, r3
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	891a      	ldrh	r2, [r3, #8]
 800dba0:	8a7b      	ldrh	r3, [r7, #18]
 800dba2:	4413      	add	r3, r2
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	811a      	strh	r2, [r3, #8]


  return 0;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3718      	adds	r7, #24
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	08019158 	.word	0x08019158
 800dbb8:	080192bc 	.word	0x080192bc
 800dbbc:	080191b8 	.word	0x080191b8

0800dbc0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dbca:	2200      	movs	r2, #0
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff ff8e 	bl	800daf0 <pbuf_add_header_impl>
 800dbd4:	4603      	mov	r3, r0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d106      	bne.n	800dbfe <pbuf_remove_header+0x1e>
 800dbf0:	4b20      	ldr	r3, [pc, #128]	@ (800dc74 <pbuf_remove_header+0x94>)
 800dbf2:	f240 224b 	movw	r2, #587	@ 0x24b
 800dbf6:	4920      	ldr	r1, [pc, #128]	@ (800dc78 <pbuf_remove_header+0x98>)
 800dbf8:	4820      	ldr	r0, [pc, #128]	@ (800dc7c <pbuf_remove_header+0x9c>)
 800dbfa:	f009 fe79 	bl	80178f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d003      	beq.n	800dc0c <pbuf_remove_header+0x2c>
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc0a:	d301      	bcc.n	800dc10 <pbuf_remove_header+0x30>
    return 1;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e02c      	b.n	800dc6a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <pbuf_remove_header+0x3a>
    return 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	e027      	b.n	800dc6a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	895b      	ldrh	r3, [r3, #10]
 800dc22:	89fa      	ldrh	r2, [r7, #14]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d908      	bls.n	800dc3a <pbuf_remove_header+0x5a>
 800dc28:	4b12      	ldr	r3, [pc, #72]	@ (800dc74 <pbuf_remove_header+0x94>)
 800dc2a:	f240 2255 	movw	r2, #597	@ 0x255
 800dc2e:	4914      	ldr	r1, [pc, #80]	@ (800dc80 <pbuf_remove_header+0xa0>)
 800dc30:	4812      	ldr	r0, [pc, #72]	@ (800dc7c <pbuf_remove_header+0x9c>)
 800dc32:	f009 fe5d 	bl	80178f0 <iprintf>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e017      	b.n	800dc6a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	441a      	add	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	895a      	ldrh	r2, [r3, #10]
 800dc50:	89fb      	ldrh	r3, [r7, #14]
 800dc52:	1ad3      	subs	r3, r2, r3
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	891a      	ldrh	r2, [r3, #8]
 800dc5e:	89fb      	ldrh	r3, [r7, #14]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	08019158 	.word	0x08019158
 800dc78:	080192bc 	.word	0x080192bc
 800dc7c:	080191b8 	.word	0x080191b8
 800dc80:	080192c8 	.word	0x080192c8

0800dc84 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	807b      	strh	r3, [r7, #2]
 800dc90:	4613      	mov	r3, r2
 800dc92:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dc94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	da08      	bge.n	800dcae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dc9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dca0:	425b      	negs	r3, r3
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff ff9b 	bl	800dbe0 <pbuf_remove_header>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	e007      	b.n	800dcbe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dcae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcb2:	787a      	ldrb	r2, [r7, #1]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff ff1a 	bl	800daf0 <pbuf_add_header_impl>
 800dcbc:	4603      	mov	r3, r0
  }
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dcd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7ff ffd2 	bl	800dc84 <pbuf_header_impl>
 800dce0:	4603      	mov	r3, r0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10b      	bne.n	800dd12 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d106      	bne.n	800dd0e <pbuf_free+0x22>
 800dd00:	4b38      	ldr	r3, [pc, #224]	@ (800dde4 <pbuf_free+0xf8>)
 800dd02:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800dd06:	4938      	ldr	r1, [pc, #224]	@ (800dde8 <pbuf_free+0xfc>)
 800dd08:	4838      	ldr	r0, [pc, #224]	@ (800ddec <pbuf_free+0x100>)
 800dd0a:	f009 fdf1 	bl	80178f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e063      	b.n	800ddda <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dd16:	e05c      	b.n	800ddd2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	7b9b      	ldrb	r3, [r3, #14]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <pbuf_free+0x42>
 800dd20:	4b30      	ldr	r3, [pc, #192]	@ (800dde4 <pbuf_free+0xf8>)
 800dd22:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800dd26:	4932      	ldr	r1, [pc, #200]	@ (800ddf0 <pbuf_free+0x104>)
 800dd28:	4830      	ldr	r0, [pc, #192]	@ (800ddec <pbuf_free+0x100>)
 800dd2a:	f009 fde1 	bl	80178f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	7b9b      	ldrb	r3, [r3, #14]
 800dd32:	3b01      	subs	r3, #1
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	739a      	strb	r2, [r3, #14]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	7b9b      	ldrb	r3, [r3, #14]
 800dd3e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dd40:	7dbb      	ldrb	r3, [r7, #22]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d143      	bne.n	800ddce <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7b1b      	ldrb	r3, [r3, #12]
 800dd50:	f003 030f 	and.w	r3, r3, #15
 800dd54:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	7b5b      	ldrb	r3, [r3, #13]
 800dd5a:	f003 0302 	and.w	r3, r3, #2
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d011      	beq.n	800dd86 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d106      	bne.n	800dd7c <pbuf_free+0x90>
 800dd6e:	4b1d      	ldr	r3, [pc, #116]	@ (800dde4 <pbuf_free+0xf8>)
 800dd70:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800dd74:	491f      	ldr	r1, [pc, #124]	@ (800ddf4 <pbuf_free+0x108>)
 800dd76:	481d      	ldr	r0, [pc, #116]	@ (800ddec <pbuf_free+0x100>)
 800dd78:	f009 fdba 	bl	80178f0 <iprintf>
        pc->custom_free_function(p);
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	4798      	blx	r3
 800dd84:	e01d      	b.n	800ddc2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
 800dd88:	2b02      	cmp	r3, #2
 800dd8a:	d104      	bne.n	800dd96 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800dd8c:	6879      	ldr	r1, [r7, #4]
 800dd8e:	2008      	movs	r0, #8
 800dd90:	f7ff f840 	bl	800ce14 <memp_free>
 800dd94:	e015      	b.n	800ddc2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d104      	bne.n	800dda6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800dd9c:	6879      	ldr	r1, [r7, #4]
 800dd9e:	2007      	movs	r0, #7
 800dda0:	f7ff f838 	bl	800ce14 <memp_free>
 800dda4:	e00d      	b.n	800ddc2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d103      	bne.n	800ddb4 <pbuf_free+0xc8>
          mem_free(p);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7fe fccb 	bl	800c748 <mem_free>
 800ddb2:	e006      	b.n	800ddc2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	@ (800dde4 <pbuf_free+0xf8>)
 800ddb6:	f240 320f 	movw	r2, #783	@ 0x30f
 800ddba:	490f      	ldr	r1, [pc, #60]	@ (800ddf8 <pbuf_free+0x10c>)
 800ddbc:	480b      	ldr	r0, [pc, #44]	@ (800ddec <pbuf_free+0x100>)
 800ddbe:	f009 fd97 	bl	80178f0 <iprintf>
        }
      }
      count++;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	607b      	str	r3, [r7, #4]
 800ddcc:	e001      	b.n	800ddd2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d19f      	bne.n	800dd18 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ddd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3718      	adds	r7, #24
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	08019158 	.word	0x08019158
 800dde8:	080192bc 	.word	0x080192bc
 800ddec:	080191b8 	.word	0x080191b8
 800ddf0:	080192e8 	.word	0x080192e8
 800ddf4:	08019300 	.word	0x08019300
 800ddf8:	08019324 	.word	0x08019324

0800ddfc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800de04:	2300      	movs	r3, #0
 800de06:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800de08:	e005      	b.n	800de16 <pbuf_clen+0x1a>
    ++len;
 800de0a:	89fb      	ldrh	r3, [r7, #14]
 800de0c:	3301      	adds	r3, #1
 800de0e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d1f6      	bne.n	800de0a <pbuf_clen+0xe>
  }
  return len;
 800de1c:	89fb      	ldrh	r3, [r7, #14]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
	...

0800de2c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d010      	beq.n	800de5c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	7b9b      	ldrb	r3, [r3, #14]
 800de3e:	3301      	adds	r3, #1
 800de40:	b2da      	uxtb	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	7b9b      	ldrb	r3, [r3, #14]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <pbuf_ref+0x30>
 800de4e:	4b05      	ldr	r3, [pc, #20]	@ (800de64 <pbuf_ref+0x38>)
 800de50:	f240 3242 	movw	r2, #834	@ 0x342
 800de54:	4904      	ldr	r1, [pc, #16]	@ (800de68 <pbuf_ref+0x3c>)
 800de56:	4805      	ldr	r0, [pc, #20]	@ (800de6c <pbuf_ref+0x40>)
 800de58:	f009 fd4a 	bl	80178f0 <iprintf>
  }
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	08019158 	.word	0x08019158
 800de68:	08019338 	.word	0x08019338
 800de6c:	080191b8 	.word	0x080191b8

0800de70 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <pbuf_cat+0x16>
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d107      	bne.n	800de96 <pbuf_cat+0x26>
 800de86:	4b20      	ldr	r3, [pc, #128]	@ (800df08 <pbuf_cat+0x98>)
 800de88:	f240 3259 	movw	r2, #857	@ 0x359
 800de8c:	491f      	ldr	r1, [pc, #124]	@ (800df0c <pbuf_cat+0x9c>)
 800de8e:	4820      	ldr	r0, [pc, #128]	@ (800df10 <pbuf_cat+0xa0>)
 800de90:	f009 fd2e 	bl	80178f0 <iprintf>
 800de94:	e034      	b.n	800df00 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	60fb      	str	r3, [r7, #12]
 800de9a:	e00a      	b.n	800deb2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	891a      	ldrh	r2, [r3, #8]
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	891b      	ldrh	r3, [r3, #8]
 800dea4:	4413      	add	r3, r2
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	60fb      	str	r3, [r7, #12]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1f0      	bne.n	800de9c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	891a      	ldrh	r2, [r3, #8]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	895b      	ldrh	r3, [r3, #10]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d006      	beq.n	800ded4 <pbuf_cat+0x64>
 800dec6:	4b10      	ldr	r3, [pc, #64]	@ (800df08 <pbuf_cat+0x98>)
 800dec8:	f240 3262 	movw	r2, #866	@ 0x362
 800decc:	4911      	ldr	r1, [pc, #68]	@ (800df14 <pbuf_cat+0xa4>)
 800dece:	4810      	ldr	r0, [pc, #64]	@ (800df10 <pbuf_cat+0xa0>)
 800ded0:	f009 fd0e 	bl	80178f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d006      	beq.n	800deea <pbuf_cat+0x7a>
 800dedc:	4b0a      	ldr	r3, [pc, #40]	@ (800df08 <pbuf_cat+0x98>)
 800dede:	f240 3263 	movw	r2, #867	@ 0x363
 800dee2:	490d      	ldr	r1, [pc, #52]	@ (800df18 <pbuf_cat+0xa8>)
 800dee4:	480a      	ldr	r0, [pc, #40]	@ (800df10 <pbuf_cat+0xa0>)
 800dee6:	f009 fd03 	bl	80178f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	891a      	ldrh	r2, [r3, #8]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	891b      	ldrh	r3, [r3, #8]
 800def2:	4413      	add	r3, r2
 800def4:	b29a      	uxth	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	08019158 	.word	0x08019158
 800df0c:	0801934c 	.word	0x0801934c
 800df10:	080191b8 	.word	0x080191b8
 800df14:	08019384 	.word	0x08019384
 800df18:	080193b4 	.word	0x080193b4

0800df1c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7ff ffa1 	bl	800de70 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800df2e:	6838      	ldr	r0, [r7, #0]
 800df30:	f7ff ff7c 	bl	800de2c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800df34:	bf00      	nop
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800df46:	2300      	movs	r3, #0
 800df48:	617b      	str	r3, [r7, #20]
 800df4a:	2300      	movs	r3, #0
 800df4c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d008      	beq.n	800df66 <pbuf_copy+0x2a>
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d005      	beq.n	800df66 <pbuf_copy+0x2a>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	891a      	ldrh	r2, [r3, #8]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	891b      	ldrh	r3, [r3, #8]
 800df62:	429a      	cmp	r2, r3
 800df64:	d209      	bcs.n	800df7a <pbuf_copy+0x3e>
 800df66:	4b57      	ldr	r3, [pc, #348]	@ (800e0c4 <pbuf_copy+0x188>)
 800df68:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800df6c:	4956      	ldr	r1, [pc, #344]	@ (800e0c8 <pbuf_copy+0x18c>)
 800df6e:	4857      	ldr	r0, [pc, #348]	@ (800e0cc <pbuf_copy+0x190>)
 800df70:	f009 fcbe 	bl	80178f0 <iprintf>
 800df74:	f06f 030f 	mvn.w	r3, #15
 800df78:	e09f      	b.n	800e0ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	895b      	ldrh	r3, [r3, #10]
 800df7e:	461a      	mov	r2, r3
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	1ad2      	subs	r2, r2, r3
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	895b      	ldrh	r3, [r3, #10]
 800df88:	4619      	mov	r1, r3
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	1acb      	subs	r3, r1, r3
 800df8e:	429a      	cmp	r2, r3
 800df90:	d306      	bcc.n	800dfa0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	895b      	ldrh	r3, [r3, #10]
 800df96:	461a      	mov	r2, r3
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	e005      	b.n	800dfac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	895b      	ldrh	r3, [r3, #10]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	18d0      	adds	r0, r2, r3
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	4413      	add	r3, r2
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	f009 fe6b 	bl	8017c9a <memcpy>
    offset_to += len;
 800dfc4:	697a      	ldr	r2, [r7, #20]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	4413      	add	r3, r2
 800dfca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	895b      	ldrh	r3, [r3, #10]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d906      	bls.n	800dfee <pbuf_copy+0xb2>
 800dfe0:	4b38      	ldr	r3, [pc, #224]	@ (800e0c4 <pbuf_copy+0x188>)
 800dfe2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800dfe6:	493a      	ldr	r1, [pc, #232]	@ (800e0d0 <pbuf_copy+0x194>)
 800dfe8:	4838      	ldr	r0, [pc, #224]	@ (800e0cc <pbuf_copy+0x190>)
 800dfea:	f009 fc81 	bl	80178f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	895b      	ldrh	r3, [r3, #10]
 800dff2:	461a      	mov	r2, r3
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d906      	bls.n	800e008 <pbuf_copy+0xcc>
 800dffa:	4b32      	ldr	r3, [pc, #200]	@ (800e0c4 <pbuf_copy+0x188>)
 800dffc:	f240 32da 	movw	r2, #986	@ 0x3da
 800e000:	4934      	ldr	r1, [pc, #208]	@ (800e0d4 <pbuf_copy+0x198>)
 800e002:	4832      	ldr	r0, [pc, #200]	@ (800e0cc <pbuf_copy+0x190>)
 800e004:	f009 fc74 	bl	80178f0 <iprintf>
    if (offset_from >= p_from->len) {
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	895b      	ldrh	r3, [r3, #10]
 800e00c:	461a      	mov	r2, r3
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	4293      	cmp	r3, r2
 800e012:	d304      	bcc.n	800e01e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	895b      	ldrh	r3, [r3, #10]
 800e022:	461a      	mov	r2, r3
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	4293      	cmp	r3, r2
 800e028:	d114      	bne.n	800e054 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e02a:	2300      	movs	r3, #0
 800e02c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10c      	bne.n	800e054 <pbuf_copy+0x118>
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d009      	beq.n	800e054 <pbuf_copy+0x118>
 800e040:	4b20      	ldr	r3, [pc, #128]	@ (800e0c4 <pbuf_copy+0x188>)
 800e042:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e046:	4924      	ldr	r1, [pc, #144]	@ (800e0d8 <pbuf_copy+0x19c>)
 800e048:	4820      	ldr	r0, [pc, #128]	@ (800e0cc <pbuf_copy+0x190>)
 800e04a:	f009 fc51 	bl	80178f0 <iprintf>
 800e04e:	f06f 030f 	mvn.w	r3, #15
 800e052:	e032      	b.n	800e0ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d013      	beq.n	800e082 <pbuf_copy+0x146>
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	895a      	ldrh	r2, [r3, #10]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	891b      	ldrh	r3, [r3, #8]
 800e062:	429a      	cmp	r2, r3
 800e064:	d10d      	bne.n	800e082 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d009      	beq.n	800e082 <pbuf_copy+0x146>
 800e06e:	4b15      	ldr	r3, [pc, #84]	@ (800e0c4 <pbuf_copy+0x188>)
 800e070:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e074:	4919      	ldr	r1, [pc, #100]	@ (800e0dc <pbuf_copy+0x1a0>)
 800e076:	4815      	ldr	r0, [pc, #84]	@ (800e0cc <pbuf_copy+0x190>)
 800e078:	f009 fc3a 	bl	80178f0 <iprintf>
 800e07c:	f06f 0305 	mvn.w	r3, #5
 800e080:	e01b      	b.n	800e0ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d013      	beq.n	800e0b0 <pbuf_copy+0x174>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	895a      	ldrh	r2, [r3, #10]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	891b      	ldrh	r3, [r3, #8]
 800e090:	429a      	cmp	r2, r3
 800e092:	d10d      	bne.n	800e0b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d009      	beq.n	800e0b0 <pbuf_copy+0x174>
 800e09c:	4b09      	ldr	r3, [pc, #36]	@ (800e0c4 <pbuf_copy+0x188>)
 800e09e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e0a2:	490e      	ldr	r1, [pc, #56]	@ (800e0dc <pbuf_copy+0x1a0>)
 800e0a4:	4809      	ldr	r0, [pc, #36]	@ (800e0cc <pbuf_copy+0x190>)
 800e0a6:	f009 fc23 	bl	80178f0 <iprintf>
 800e0aa:	f06f 0305 	mvn.w	r3, #5
 800e0ae:	e004      	b.n	800e0ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f47f af61 	bne.w	800df7a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	08019158 	.word	0x08019158
 800e0c8:	08019400 	.word	0x08019400
 800e0cc:	080191b8 	.word	0x080191b8
 800e0d0:	08019430 	.word	0x08019430
 800e0d4:	08019448 	.word	0x08019448
 800e0d8:	08019464 	.word	0x08019464
 800e0dc:	08019474 	.word	0x08019474

0800e0e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	80fb      	strh	r3, [r7, #6]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d108      	bne.n	800e116 <pbuf_copy_partial+0x36>
 800e104:	4b2b      	ldr	r3, [pc, #172]	@ (800e1b4 <pbuf_copy_partial+0xd4>)
 800e106:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e10a:	492b      	ldr	r1, [pc, #172]	@ (800e1b8 <pbuf_copy_partial+0xd8>)
 800e10c:	482b      	ldr	r0, [pc, #172]	@ (800e1bc <pbuf_copy_partial+0xdc>)
 800e10e:	f009 fbef 	bl	80178f0 <iprintf>
 800e112:	2300      	movs	r3, #0
 800e114:	e04a      	b.n	800e1ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d108      	bne.n	800e12e <pbuf_copy_partial+0x4e>
 800e11c:	4b25      	ldr	r3, [pc, #148]	@ (800e1b4 <pbuf_copy_partial+0xd4>)
 800e11e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e122:	4927      	ldr	r1, [pc, #156]	@ (800e1c0 <pbuf_copy_partial+0xe0>)
 800e124:	4825      	ldr	r0, [pc, #148]	@ (800e1bc <pbuf_copy_partial+0xdc>)
 800e126:	f009 fbe3 	bl	80178f0 <iprintf>
 800e12a:	2300      	movs	r3, #0
 800e12c:	e03e      	b.n	800e1ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	61fb      	str	r3, [r7, #28]
 800e132:	e034      	b.n	800e19e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e134:	88bb      	ldrh	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00a      	beq.n	800e150 <pbuf_copy_partial+0x70>
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	895b      	ldrh	r3, [r3, #10]
 800e13e:	88ba      	ldrh	r2, [r7, #4]
 800e140:	429a      	cmp	r2, r3
 800e142:	d305      	bcc.n	800e150 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	895b      	ldrh	r3, [r3, #10]
 800e148:	88ba      	ldrh	r2, [r7, #4]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	80bb      	strh	r3, [r7, #4]
 800e14e:	e023      	b.n	800e198 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	895a      	ldrh	r2, [r3, #10]
 800e154:	88bb      	ldrh	r3, [r7, #4]
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e15a:	8b3a      	ldrh	r2, [r7, #24]
 800e15c:	88fb      	ldrh	r3, [r7, #6]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d901      	bls.n	800e166 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e162:	88fb      	ldrh	r3, [r7, #6]
 800e164:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e166:	8b7b      	ldrh	r3, [r7, #26]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	18d0      	adds	r0, r2, r3
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	88bb      	ldrh	r3, [r7, #4]
 800e172:	4413      	add	r3, r2
 800e174:	8b3a      	ldrh	r2, [r7, #24]
 800e176:	4619      	mov	r1, r3
 800e178:	f009 fd8f 	bl	8017c9a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e17c:	8afa      	ldrh	r2, [r7, #22]
 800e17e:	8b3b      	ldrh	r3, [r7, #24]
 800e180:	4413      	add	r3, r2
 800e182:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e184:	8b7a      	ldrh	r2, [r7, #26]
 800e186:	8b3b      	ldrh	r3, [r7, #24]
 800e188:	4413      	add	r3, r2
 800e18a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e18c:	88fa      	ldrh	r2, [r7, #6]
 800e18e:	8b3b      	ldrh	r3, [r7, #24]
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e194:	2300      	movs	r3, #0
 800e196:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	61fb      	str	r3, [r7, #28]
 800e19e:	88fb      	ldrh	r3, [r7, #6]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <pbuf_copy_partial+0xca>
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1c4      	bne.n	800e134 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e1aa:	8afb      	ldrh	r3, [r7, #22]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3720      	adds	r7, #32
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	08019158 	.word	0x08019158
 800e1b8:	080194a0 	.word	0x080194a0
 800e1bc:	080191b8 	.word	0x080191b8
 800e1c0:	080194c0 	.word	0x080194c0

0800e1c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	603a      	str	r2, [r7, #0]
 800e1ce:	71fb      	strb	r3, [r7, #7]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	8919      	ldrh	r1, [r3, #8]
 800e1d8:	88ba      	ldrh	r2, [r7, #4]
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff faa1 	bl	800d724 <pbuf_alloc>
 800e1e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d101      	bne.n	800e1ee <pbuf_clone+0x2a>
    return NULL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e011      	b.n	800e212 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7ff fea3 	bl	800df3c <pbuf_copy>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e1fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d006      	beq.n	800e210 <pbuf_clone+0x4c>
 800e202:	4b06      	ldr	r3, [pc, #24]	@ (800e21c <pbuf_clone+0x58>)
 800e204:	f240 5224 	movw	r2, #1316	@ 0x524
 800e208:	4905      	ldr	r1, [pc, #20]	@ (800e220 <pbuf_clone+0x5c>)
 800e20a:	4806      	ldr	r0, [pc, #24]	@ (800e224 <pbuf_clone+0x60>)
 800e20c:	f009 fb70 	bl	80178f0 <iprintf>
  return q;
 800e210:	68fb      	ldr	r3, [r7, #12]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	08019158 	.word	0x08019158
 800e220:	080195cc 	.word	0x080195cc
 800e224:	080191b8 	.word	0x080191b8

0800e228 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e22c:	f009 fa60 	bl	80176f0 <rand>
 800e230:	4603      	mov	r3, r0
 800e232:	b29b      	uxth	r3, r3
 800e234:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e238:	b29b      	uxth	r3, r3
 800e23a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e23e:	b29a      	uxth	r2, r3
 800e240:	4b01      	ldr	r3, [pc, #4]	@ (800e248 <tcp_init+0x20>)
 800e242:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e244:	bf00      	nop
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20000064 	.word	0x20000064

0800e24c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7d1b      	ldrb	r3, [r3, #20]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d105      	bne.n	800e268 <tcp_free+0x1c>
 800e25c:	4b06      	ldr	r3, [pc, #24]	@ (800e278 <tcp_free+0x2c>)
 800e25e:	22d4      	movs	r2, #212	@ 0xd4
 800e260:	4906      	ldr	r1, [pc, #24]	@ (800e27c <tcp_free+0x30>)
 800e262:	4807      	ldr	r0, [pc, #28]	@ (800e280 <tcp_free+0x34>)
 800e264:	f009 fb44 	bl	80178f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e268:	6879      	ldr	r1, [r7, #4]
 800e26a:	2001      	movs	r0, #1
 800e26c:	f7fe fdd2 	bl	800ce14 <memp_free>
}
 800e270:	bf00      	nop
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	08019658 	.word	0x08019658
 800e27c:	08019688 	.word	0x08019688
 800e280:	0801969c 	.word	0x0801969c

0800e284 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	7d1b      	ldrb	r3, [r3, #20]
 800e290:	2b01      	cmp	r3, #1
 800e292:	d105      	bne.n	800e2a0 <tcp_free_listen+0x1c>
 800e294:	4b06      	ldr	r3, [pc, #24]	@ (800e2b0 <tcp_free_listen+0x2c>)
 800e296:	22df      	movs	r2, #223	@ 0xdf
 800e298:	4906      	ldr	r1, [pc, #24]	@ (800e2b4 <tcp_free_listen+0x30>)
 800e29a:	4807      	ldr	r0, [pc, #28]	@ (800e2b8 <tcp_free_listen+0x34>)
 800e29c:	f009 fb28 	bl	80178f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e2a0:	6879      	ldr	r1, [r7, #4]
 800e2a2:	2002      	movs	r0, #2
 800e2a4:	f7fe fdb6 	bl	800ce14 <memp_free>
}
 800e2a8:	bf00      	nop
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	08019658 	.word	0x08019658
 800e2b4:	080196c4 	.word	0x080196c4
 800e2b8:	0801969c 	.word	0x0801969c

0800e2bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e2c0:	f000 fea4 	bl	800f00c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e2c4:	4b07      	ldr	r3, [pc, #28]	@ (800e2e4 <tcp_tmr+0x28>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	4b05      	ldr	r3, [pc, #20]	@ (800e2e4 <tcp_tmr+0x28>)
 800e2ce:	701a      	strb	r2, [r3, #0]
 800e2d0:	4b04      	ldr	r3, [pc, #16]	@ (800e2e4 <tcp_tmr+0x28>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 0301 	and.w	r3, r3, #1
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e2dc:	f000 fb54 	bl	800e988 <tcp_slowtmr>
  }
}
 800e2e0:	bf00      	nop
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20008511 	.word	0x20008511

0800e2e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d105      	bne.n	800e304 <tcp_remove_listener+0x1c>
 800e2f8:	4b0d      	ldr	r3, [pc, #52]	@ (800e330 <tcp_remove_listener+0x48>)
 800e2fa:	22ff      	movs	r2, #255	@ 0xff
 800e2fc:	490d      	ldr	r1, [pc, #52]	@ (800e334 <tcp_remove_listener+0x4c>)
 800e2fe:	480e      	ldr	r0, [pc, #56]	@ (800e338 <tcp_remove_listener+0x50>)
 800e300:	f009 faf6 	bl	80178f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	e00a      	b.n	800e320 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	429a      	cmp	r2, r3
 800e312:	d102      	bne.n	800e31a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	60fb      	str	r3, [r7, #12]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1f1      	bne.n	800e30a <tcp_remove_listener+0x22>
    }
  }
}
 800e326:	bf00      	nop
 800e328:	bf00      	nop
 800e32a:	3710      	adds	r7, #16
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	08019658 	.word	0x08019658
 800e334:	080196e0 	.word	0x080196e0
 800e338:	0801969c 	.word	0x0801969c

0800e33c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d106      	bne.n	800e358 <tcp_listen_closed+0x1c>
 800e34a:	4b14      	ldr	r3, [pc, #80]	@ (800e39c <tcp_listen_closed+0x60>)
 800e34c:	f240 1211 	movw	r2, #273	@ 0x111
 800e350:	4913      	ldr	r1, [pc, #76]	@ (800e3a0 <tcp_listen_closed+0x64>)
 800e352:	4814      	ldr	r0, [pc, #80]	@ (800e3a4 <tcp_listen_closed+0x68>)
 800e354:	f009 facc 	bl	80178f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	7d1b      	ldrb	r3, [r3, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d006      	beq.n	800e36e <tcp_listen_closed+0x32>
 800e360:	4b0e      	ldr	r3, [pc, #56]	@ (800e39c <tcp_listen_closed+0x60>)
 800e362:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e366:	4910      	ldr	r1, [pc, #64]	@ (800e3a8 <tcp_listen_closed+0x6c>)
 800e368:	480e      	ldr	r0, [pc, #56]	@ (800e3a4 <tcp_listen_closed+0x68>)
 800e36a:	f009 fac1 	bl	80178f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e36e:	2301      	movs	r3, #1
 800e370:	60fb      	str	r3, [r7, #12]
 800e372:	e00b      	b.n	800e38c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e374:	4a0d      	ldr	r2, [pc, #52]	@ (800e3ac <tcp_listen_closed+0x70>)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	6879      	ldr	r1, [r7, #4]
 800e380:	4618      	mov	r0, r3
 800e382:	f7ff ffb1 	bl	800e2e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	3301      	adds	r3, #1
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b03      	cmp	r3, #3
 800e390:	d9f0      	bls.n	800e374 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e392:	bf00      	nop
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	08019658 	.word	0x08019658
 800e3a0:	08019708 	.word	0x08019708
 800e3a4:	0801969c 	.word	0x0801969c
 800e3a8:	08019714 	.word	0x08019714
 800e3ac:	0801bfb4 	.word	0x0801bfb4

0800e3b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e3b0:	b5b0      	push	{r4, r5, r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af04      	add	r7, sp, #16
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <tcp_close_shutdown+0x20>
 800e3c2:	4b63      	ldr	r3, [pc, #396]	@ (800e550 <tcp_close_shutdown+0x1a0>)
 800e3c4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e3c8:	4962      	ldr	r1, [pc, #392]	@ (800e554 <tcp_close_shutdown+0x1a4>)
 800e3ca:	4863      	ldr	r0, [pc, #396]	@ (800e558 <tcp_close_shutdown+0x1a8>)
 800e3cc:	f009 fa90 	bl	80178f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d066      	beq.n	800e4a4 <tcp_close_shutdown+0xf4>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	7d1b      	ldrb	r3, [r3, #20]
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d003      	beq.n	800e3e6 <tcp_close_shutdown+0x36>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7d1b      	ldrb	r3, [r3, #20]
 800e3e2:	2b07      	cmp	r3, #7
 800e3e4:	d15e      	bne.n	800e4a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d104      	bne.n	800e3f8 <tcp_close_shutdown+0x48>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e3f6:	d055      	beq.n	800e4a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	8b5b      	ldrh	r3, [r3, #26]
 800e3fc:	f003 0310 	and.w	r3, r3, #16
 800e400:	2b00      	cmp	r3, #0
 800e402:	d106      	bne.n	800e412 <tcp_close_shutdown+0x62>
 800e404:	4b52      	ldr	r3, [pc, #328]	@ (800e550 <tcp_close_shutdown+0x1a0>)
 800e406:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e40a:	4954      	ldr	r1, [pc, #336]	@ (800e55c <tcp_close_shutdown+0x1ac>)
 800e40c:	4852      	ldr	r0, [pc, #328]	@ (800e558 <tcp_close_shutdown+0x1a8>)
 800e40e:	f009 fa6f 	bl	80178f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e41a:	687d      	ldr	r5, [r7, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3304      	adds	r3, #4
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	8ad2      	ldrh	r2, [r2, #22]
 800e424:	6879      	ldr	r1, [r7, #4]
 800e426:	8b09      	ldrh	r1, [r1, #24]
 800e428:	9102      	str	r1, [sp, #8]
 800e42a:	9201      	str	r2, [sp, #4]
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	462b      	mov	r3, r5
 800e430:	4622      	mov	r2, r4
 800e432:	4601      	mov	r1, r0
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f004 fea7 	bl	8013188 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f001 f8c8 	bl	800f5d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e440:	4b47      	ldr	r3, [pc, #284]	@ (800e560 <tcp_close_shutdown+0x1b0>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	429a      	cmp	r2, r3
 800e448:	d105      	bne.n	800e456 <tcp_close_shutdown+0xa6>
 800e44a:	4b45      	ldr	r3, [pc, #276]	@ (800e560 <tcp_close_shutdown+0x1b0>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	4a43      	ldr	r2, [pc, #268]	@ (800e560 <tcp_close_shutdown+0x1b0>)
 800e452:	6013      	str	r3, [r2, #0]
 800e454:	e013      	b.n	800e47e <tcp_close_shutdown+0xce>
 800e456:	4b42      	ldr	r3, [pc, #264]	@ (800e560 <tcp_close_shutdown+0x1b0>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	60fb      	str	r3, [r7, #12]
 800e45c:	e00c      	b.n	800e478 <tcp_close_shutdown+0xc8>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	429a      	cmp	r2, r3
 800e466:	d104      	bne.n	800e472 <tcp_close_shutdown+0xc2>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	68da      	ldr	r2, [r3, #12]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	60da      	str	r2, [r3, #12]
 800e470:	e005      	b.n	800e47e <tcp_close_shutdown+0xce>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1ef      	bne.n	800e45e <tcp_close_shutdown+0xae>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	60da      	str	r2, [r3, #12]
 800e484:	4b37      	ldr	r3, [pc, #220]	@ (800e564 <tcp_close_shutdown+0x1b4>)
 800e486:	2201      	movs	r2, #1
 800e488:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e48a:	4b37      	ldr	r3, [pc, #220]	@ (800e568 <tcp_close_shutdown+0x1b8>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	429a      	cmp	r2, r3
 800e492:	d102      	bne.n	800e49a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e494:	f003 fd62 	bl	8011f5c <tcp_trigger_input_pcb_close>
 800e498:	e002      	b.n	800e4a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f7ff fed6 	bl	800e24c <tcp_free>
      }
      return ERR_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	e050      	b.n	800e546 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	7d1b      	ldrb	r3, [r3, #20]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d03b      	beq.n	800e524 <tcp_close_shutdown+0x174>
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	dc44      	bgt.n	800e53a <tcp_close_shutdown+0x18a>
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <tcp_close_shutdown+0x10a>
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d02a      	beq.n	800e50e <tcp_close_shutdown+0x15e>
 800e4b8:	e03f      	b.n	800e53a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	8adb      	ldrh	r3, [r3, #22]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d021      	beq.n	800e506 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4c2:	4b2a      	ldr	r3, [pc, #168]	@ (800e56c <tcp_close_shutdown+0x1bc>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d105      	bne.n	800e4d8 <tcp_close_shutdown+0x128>
 800e4cc:	4b27      	ldr	r3, [pc, #156]	@ (800e56c <tcp_close_shutdown+0x1bc>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	4a26      	ldr	r2, [pc, #152]	@ (800e56c <tcp_close_shutdown+0x1bc>)
 800e4d4:	6013      	str	r3, [r2, #0]
 800e4d6:	e013      	b.n	800e500 <tcp_close_shutdown+0x150>
 800e4d8:	4b24      	ldr	r3, [pc, #144]	@ (800e56c <tcp_close_shutdown+0x1bc>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	60bb      	str	r3, [r7, #8]
 800e4de:	e00c      	b.n	800e4fa <tcp_close_shutdown+0x14a>
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d104      	bne.n	800e4f4 <tcp_close_shutdown+0x144>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	68da      	ldr	r2, [r3, #12]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	60da      	str	r2, [r3, #12]
 800e4f2:	e005      	b.n	800e500 <tcp_close_shutdown+0x150>
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	60bb      	str	r3, [r7, #8]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1ef      	bne.n	800e4e0 <tcp_close_shutdown+0x130>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7ff fea0 	bl	800e24c <tcp_free>
      break;
 800e50c:	e01a      	b.n	800e544 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff ff14 	bl	800e33c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	4816      	ldr	r0, [pc, #88]	@ (800e570 <tcp_close_shutdown+0x1c0>)
 800e518:	f001 f8aa 	bl	800f670 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f7ff feb1 	bl	800e284 <tcp_free_listen>
      break;
 800e522:	e00f      	b.n	800e544 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e524:	6879      	ldr	r1, [r7, #4]
 800e526:	480e      	ldr	r0, [pc, #56]	@ (800e560 <tcp_close_shutdown+0x1b0>)
 800e528:	f001 f8a2 	bl	800f670 <tcp_pcb_remove>
 800e52c:	4b0d      	ldr	r3, [pc, #52]	@ (800e564 <tcp_close_shutdown+0x1b4>)
 800e52e:	2201      	movs	r2, #1
 800e530:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7ff fe8a 	bl	800e24c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e538:	e004      	b.n	800e544 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f81a 	bl	800e574 <tcp_close_shutdown_fin>
 800e540:	4603      	mov	r3, r0
 800e542:	e000      	b.n	800e546 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bdb0      	pop	{r4, r5, r7, pc}
 800e54e:	bf00      	nop
 800e550:	08019658 	.word	0x08019658
 800e554:	0801972c 	.word	0x0801972c
 800e558:	0801969c 	.word	0x0801969c
 800e55c:	0801974c 	.word	0x0801974c
 800e560:	20008508 	.word	0x20008508
 800e564:	20008510 	.word	0x20008510
 800e568:	2000854c 	.word	0x2000854c
 800e56c:	20008500 	.word	0x20008500
 800e570:	20008504 	.word	0x20008504

0800e574 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <tcp_close_shutdown_fin+0x1c>
 800e582:	4b2e      	ldr	r3, [pc, #184]	@ (800e63c <tcp_close_shutdown_fin+0xc8>)
 800e584:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e588:	492d      	ldr	r1, [pc, #180]	@ (800e640 <tcp_close_shutdown_fin+0xcc>)
 800e58a:	482e      	ldr	r0, [pc, #184]	@ (800e644 <tcp_close_shutdown_fin+0xd0>)
 800e58c:	f009 f9b0 	bl	80178f0 <iprintf>

  switch (pcb->state) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	7d1b      	ldrb	r3, [r3, #20]
 800e594:	2b07      	cmp	r3, #7
 800e596:	d020      	beq.n	800e5da <tcp_close_shutdown_fin+0x66>
 800e598:	2b07      	cmp	r3, #7
 800e59a:	dc2b      	bgt.n	800e5f4 <tcp_close_shutdown_fin+0x80>
 800e59c:	2b03      	cmp	r3, #3
 800e59e:	d002      	beq.n	800e5a6 <tcp_close_shutdown_fin+0x32>
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	d00d      	beq.n	800e5c0 <tcp_close_shutdown_fin+0x4c>
 800e5a4:	e026      	b.n	800e5f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f003 fef0 	bl	801238c <tcp_send_fin>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d11f      	bne.n	800e5f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2205      	movs	r2, #5
 800e5bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5be:	e01b      	b.n	800e5f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f003 fee3 	bl	801238c <tcp_send_fin>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d114      	bne.n	800e5fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2205      	movs	r2, #5
 800e5d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5d8:	e010      	b.n	800e5fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f003 fed6 	bl	801238c <tcp_send_fin>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e5e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d109      	bne.n	800e600 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2209      	movs	r2, #9
 800e5f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5f2:	e005      	b.n	800e600 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	e01c      	b.n	800e632 <tcp_close_shutdown_fin+0xbe>
      break;
 800e5f8:	bf00      	nop
 800e5fa:	e002      	b.n	800e602 <tcp_close_shutdown_fin+0x8e>
      break;
 800e5fc:	bf00      	nop
 800e5fe:	e000      	b.n	800e602 <tcp_close_shutdown_fin+0x8e>
      break;
 800e600:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d103      	bne.n	800e612 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f003 fffc 	bl	8012608 <tcp_output>
 800e610:	e00d      	b.n	800e62e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e61a:	d108      	bne.n	800e62e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	8b5b      	ldrh	r3, [r3, #26]
 800e620:	f043 0308 	orr.w	r3, r3, #8
 800e624:	b29a      	uxth	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e62a:	2300      	movs	r3, #0
 800e62c:	e001      	b.n	800e632 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	08019658 	.word	0x08019658
 800e640:	08019708 	.word	0x08019708
 800e644:	0801969c 	.word	0x0801969c

0800e648 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d109      	bne.n	800e66a <tcp_close+0x22>
 800e656:	4b0f      	ldr	r3, [pc, #60]	@ (800e694 <tcp_close+0x4c>)
 800e658:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e65c:	490e      	ldr	r1, [pc, #56]	@ (800e698 <tcp_close+0x50>)
 800e65e:	480f      	ldr	r0, [pc, #60]	@ (800e69c <tcp_close+0x54>)
 800e660:	f009 f946 	bl	80178f0 <iprintf>
 800e664:	f06f 030f 	mvn.w	r3, #15
 800e668:	e00f      	b.n	800e68a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	7d1b      	ldrb	r3, [r3, #20]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d006      	beq.n	800e680 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	8b5b      	ldrh	r3, [r3, #26]
 800e676:	f043 0310 	orr.w	r3, r3, #16
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e680:	2101      	movs	r1, #1
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7ff fe94 	bl	800e3b0 <tcp_close_shutdown>
 800e688:	4603      	mov	r3, r0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	08019658 	.word	0x08019658
 800e698:	08019768 	.word	0x08019768
 800e69c:	0801969c 	.word	0x0801969c

0800e6a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b08e      	sub	sp, #56	@ 0x38
 800e6a4:	af04      	add	r7, sp, #16
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d107      	bne.n	800e6c0 <tcp_abandon+0x20>
 800e6b0:	4b52      	ldr	r3, [pc, #328]	@ (800e7fc <tcp_abandon+0x15c>)
 800e6b2:	f240 223d 	movw	r2, #573	@ 0x23d
 800e6b6:	4952      	ldr	r1, [pc, #328]	@ (800e800 <tcp_abandon+0x160>)
 800e6b8:	4852      	ldr	r0, [pc, #328]	@ (800e804 <tcp_abandon+0x164>)
 800e6ba:	f009 f919 	bl	80178f0 <iprintf>
 800e6be:	e099      	b.n	800e7f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	7d1b      	ldrb	r3, [r3, #20]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d106      	bne.n	800e6d6 <tcp_abandon+0x36>
 800e6c8:	4b4c      	ldr	r3, [pc, #304]	@ (800e7fc <tcp_abandon+0x15c>)
 800e6ca:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e6ce:	494e      	ldr	r1, [pc, #312]	@ (800e808 <tcp_abandon+0x168>)
 800e6d0:	484c      	ldr	r0, [pc, #304]	@ (800e804 <tcp_abandon+0x164>)
 800e6d2:	f009 f90d 	bl	80178f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	7d1b      	ldrb	r3, [r3, #20]
 800e6da:	2b0a      	cmp	r3, #10
 800e6dc:	d107      	bne.n	800e6ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e6de:	6879      	ldr	r1, [r7, #4]
 800e6e0:	484a      	ldr	r0, [pc, #296]	@ (800e80c <tcp_abandon+0x16c>)
 800e6e2:	f000 ffc5 	bl	800f670 <tcp_pcb_remove>
    tcp_free(pcb);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff fdb0 	bl	800e24c <tcp_free>
 800e6ec:	e082      	b.n	800e7f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e700:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e708:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	7d1b      	ldrb	r3, [r3, #20]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d126      	bne.n	800e766 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	8adb      	ldrh	r3, [r3, #22]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d02e      	beq.n	800e77e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e720:	4b3b      	ldr	r3, [pc, #236]	@ (800e810 <tcp_abandon+0x170>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	429a      	cmp	r2, r3
 800e728:	d105      	bne.n	800e736 <tcp_abandon+0x96>
 800e72a:	4b39      	ldr	r3, [pc, #228]	@ (800e810 <tcp_abandon+0x170>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	4a37      	ldr	r2, [pc, #220]	@ (800e810 <tcp_abandon+0x170>)
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	e013      	b.n	800e75e <tcp_abandon+0xbe>
 800e736:	4b36      	ldr	r3, [pc, #216]	@ (800e810 <tcp_abandon+0x170>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	61fb      	str	r3, [r7, #28]
 800e73c:	e00c      	b.n	800e758 <tcp_abandon+0xb8>
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	429a      	cmp	r2, r3
 800e746:	d104      	bne.n	800e752 <tcp_abandon+0xb2>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	68da      	ldr	r2, [r3, #12]
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	60da      	str	r2, [r3, #12]
 800e750:	e005      	b.n	800e75e <tcp_abandon+0xbe>
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	61fb      	str	r3, [r7, #28]
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1ef      	bne.n	800e73e <tcp_abandon+0x9e>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	60da      	str	r2, [r3, #12]
 800e764:	e00b      	b.n	800e77e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	8adb      	ldrh	r3, [r3, #22]
 800e76e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	4828      	ldr	r0, [pc, #160]	@ (800e814 <tcp_abandon+0x174>)
 800e774:	f000 ff7c 	bl	800f670 <tcp_pcb_remove>
 800e778:	4b27      	ldr	r3, [pc, #156]	@ (800e818 <tcp_abandon+0x178>)
 800e77a:	2201      	movs	r2, #1
 800e77c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e782:	2b00      	cmp	r3, #0
 800e784:	d004      	beq.n	800e790 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 fd1e 	bl	800f1cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e794:	2b00      	cmp	r3, #0
 800e796:	d004      	beq.n	800e7a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e79c:	4618      	mov	r0, r3
 800e79e:	f000 fd15 	bl	800f1cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d004      	beq.n	800e7b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 fd0c 	bl	800f1cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00e      	beq.n	800e7d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e7ba:	6879      	ldr	r1, [r7, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	3304      	adds	r3, #4
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	8b12      	ldrh	r2, [r2, #24]
 800e7c4:	9202      	str	r2, [sp, #8]
 800e7c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e7c8:	9201      	str	r2, [sp, #4]
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	69b9      	ldr	r1, [r7, #24]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f004 fcd8 	bl	8013188 <tcp_rst>
    }
    last_state = pcb->state;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7d1b      	ldrb	r3, [r3, #20]
 800e7dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7ff fd34 	bl	800e24c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d004      	beq.n	800e7f4 <tcp_abandon+0x154>
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	f06f 010c 	mvn.w	r1, #12
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	4798      	blx	r3
  }
}
 800e7f4:	3728      	adds	r7, #40	@ 0x28
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	08019658 	.word	0x08019658
 800e800:	0801979c 	.word	0x0801979c
 800e804:	0801969c 	.word	0x0801969c
 800e808:	080197b8 	.word	0x080197b8
 800e80c:	2000850c 	.word	0x2000850c
 800e810:	20008500 	.word	0x20008500
 800e814:	20008508 	.word	0x20008508
 800e818:	20008510 	.word	0x20008510

0800e81c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e824:	2101      	movs	r1, #1
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f7ff ff3a 	bl	800e6a0 <tcp_abandon>
}
 800e82c:	bf00      	nop
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d106      	bne.n	800e850 <tcp_update_rcv_ann_wnd+0x1c>
 800e842:	4b25      	ldr	r3, [pc, #148]	@ (800e8d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e844:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e848:	4924      	ldr	r1, [pc, #144]	@ (800e8dc <tcp_update_rcv_ann_wnd+0xa8>)
 800e84a:	4825      	ldr	r0, [pc, #148]	@ (800e8e0 <tcp_update_rcv_ann_wnd+0xac>)
 800e84c:	f009 f850 	bl	80178f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e858:	4413      	add	r3, r2
 800e85a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e864:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e868:	bf28      	it	cs
 800e86a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e86e:	b292      	uxth	r2, r2
 800e870:	4413      	add	r3, r2
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	db08      	blt.n	800e88c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	e020      	b.n	800e8ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	dd03      	ble.n	800e8a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e8a0:	e014      	b.n	800e8cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8b4:	d306      	bcc.n	800e8c4 <tcp_update_rcv_ann_wnd+0x90>
 800e8b6:	4b08      	ldr	r3, [pc, #32]	@ (800e8d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e8b8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e8bc:	4909      	ldr	r1, [pc, #36]	@ (800e8e4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e8be:	4808      	ldr	r0, [pc, #32]	@ (800e8e0 <tcp_update_rcv_ann_wnd+0xac>)
 800e8c0:	f009 f816 	bl	80178f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	b29a      	uxth	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e8cc:	2300      	movs	r3, #0
  }
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	08019658 	.word	0x08019658
 800e8dc:	080198b4 	.word	0x080198b4
 800e8e0:	0801969c 	.word	0x0801969c
 800e8e4:	080198d8 	.word	0x080198d8

0800e8e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d107      	bne.n	800e90a <tcp_recved+0x22>
 800e8fa:	4b1f      	ldr	r3, [pc, #124]	@ (800e978 <tcp_recved+0x90>)
 800e8fc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e900:	491e      	ldr	r1, [pc, #120]	@ (800e97c <tcp_recved+0x94>)
 800e902:	481f      	ldr	r0, [pc, #124]	@ (800e980 <tcp_recved+0x98>)
 800e904:	f008 fff4 	bl	80178f0 <iprintf>
 800e908:	e032      	b.n	800e970 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	7d1b      	ldrb	r3, [r3, #20]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d106      	bne.n	800e920 <tcp_recved+0x38>
 800e912:	4b19      	ldr	r3, [pc, #100]	@ (800e978 <tcp_recved+0x90>)
 800e914:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e918:	491a      	ldr	r1, [pc, #104]	@ (800e984 <tcp_recved+0x9c>)
 800e91a:	4819      	ldr	r0, [pc, #100]	@ (800e980 <tcp_recved+0x98>)
 800e91c:	f008 ffe8 	bl	80178f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e924:	887b      	ldrh	r3, [r7, #2]
 800e926:	4413      	add	r3, r2
 800e928:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e92a:	89fb      	ldrh	r3, [r7, #14]
 800e92c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e930:	d804      	bhi.n	800e93c <tcp_recved+0x54>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e936:	89fa      	ldrh	r2, [r7, #14]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d204      	bcs.n	800e946 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e942:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e944:	e002      	b.n	800e94c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	89fa      	ldrh	r2, [r7, #14]
 800e94a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7ff ff71 	bl	800e834 <tcp_update_rcv_ann_wnd>
 800e952:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e95a:	d309      	bcc.n	800e970 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	8b5b      	ldrh	r3, [r3, #26]
 800e960:	f043 0302 	orr.w	r3, r3, #2
 800e964:	b29a      	uxth	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f003 fe4c 	bl	8012608 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	08019658 	.word	0x08019658
 800e97c:	080198f4 	.word	0x080198f4
 800e980:	0801969c 	.word	0x0801969c
 800e984:	0801990c 	.word	0x0801990c

0800e988 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e988:	b5b0      	push	{r4, r5, r7, lr}
 800e98a:	b090      	sub	sp, #64	@ 0x40
 800e98c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e98e:	2300      	movs	r3, #0
 800e990:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e994:	4b95      	ldr	r3, [pc, #596]	@ (800ebec <tcp_slowtmr+0x264>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3301      	adds	r3, #1
 800e99a:	4a94      	ldr	r2, [pc, #592]	@ (800ebec <tcp_slowtmr+0x264>)
 800e99c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e99e:	4b94      	ldr	r3, [pc, #592]	@ (800ebf0 <tcp_slowtmr+0x268>)
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	4b92      	ldr	r3, [pc, #584]	@ (800ebf0 <tcp_slowtmr+0x268>)
 800e9a8:	701a      	strb	r2, [r3, #0]
 800e9aa:	e000      	b.n	800e9ae <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e9ac:	bf00      	nop
  prev = NULL;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e9b2:	4b90      	ldr	r3, [pc, #576]	@ (800ebf4 <tcp_slowtmr+0x26c>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e9b8:	e29d      	b.n	800eef6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9bc:	7d1b      	ldrb	r3, [r3, #20]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d106      	bne.n	800e9d0 <tcp_slowtmr+0x48>
 800e9c2:	4b8d      	ldr	r3, [pc, #564]	@ (800ebf8 <tcp_slowtmr+0x270>)
 800e9c4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e9c8:	498c      	ldr	r1, [pc, #560]	@ (800ebfc <tcp_slowtmr+0x274>)
 800e9ca:	488d      	ldr	r0, [pc, #564]	@ (800ec00 <tcp_slowtmr+0x278>)
 800e9cc:	f008 ff90 	bl	80178f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d2:	7d1b      	ldrb	r3, [r3, #20]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d106      	bne.n	800e9e6 <tcp_slowtmr+0x5e>
 800e9d8:	4b87      	ldr	r3, [pc, #540]	@ (800ebf8 <tcp_slowtmr+0x270>)
 800e9da:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e9de:	4989      	ldr	r1, [pc, #548]	@ (800ec04 <tcp_slowtmr+0x27c>)
 800e9e0:	4887      	ldr	r0, [pc, #540]	@ (800ec00 <tcp_slowtmr+0x278>)
 800e9e2:	f008 ff85 	bl	80178f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ea:	2b0a      	cmp	r3, #10
 800e9ec:	d106      	bne.n	800e9fc <tcp_slowtmr+0x74>
 800e9ee:	4b82      	ldr	r3, [pc, #520]	@ (800ebf8 <tcp_slowtmr+0x270>)
 800e9f0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e9f4:	4984      	ldr	r1, [pc, #528]	@ (800ec08 <tcp_slowtmr+0x280>)
 800e9f6:	4882      	ldr	r0, [pc, #520]	@ (800ec00 <tcp_slowtmr+0x278>)
 800e9f8:	f008 ff7a 	bl	80178f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9fe:	7f9a      	ldrb	r2, [r3, #30]
 800ea00:	4b7b      	ldr	r3, [pc, #492]	@ (800ebf0 <tcp_slowtmr+0x268>)
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d105      	bne.n	800ea14 <tcp_slowtmr+0x8c>
      prev = pcb;
 800ea08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ea0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ea12:	e270      	b.n	800eef6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800ea14:	4b76      	ldr	r3, [pc, #472]	@ (800ebf0 <tcp_slowtmr+0x268>)
 800ea16:	781a      	ldrb	r2, [r3, #0]
 800ea18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ea28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea2a:	7d1b      	ldrb	r3, [r3, #20]
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d10a      	bne.n	800ea46 <tcp_slowtmr+0xbe>
 800ea30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea36:	2b05      	cmp	r3, #5
 800ea38:	d905      	bls.n	800ea46 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ea3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea3e:	3301      	adds	r3, #1
 800ea40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800ea44:	e11e      	b.n	800ec84 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ea46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea4c:	2b0b      	cmp	r3, #11
 800ea4e:	d905      	bls.n	800ea5c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea54:	3301      	adds	r3, #1
 800ea56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ea5a:	e113      	b.n	800ec84 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ea5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d075      	beq.n	800eb52 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ea66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d006      	beq.n	800ea7c <tcp_slowtmr+0xf4>
 800ea6e:	4b62      	ldr	r3, [pc, #392]	@ (800ebf8 <tcp_slowtmr+0x270>)
 800ea70:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ea74:	4965      	ldr	r1, [pc, #404]	@ (800ec0c <tcp_slowtmr+0x284>)
 800ea76:	4862      	ldr	r0, [pc, #392]	@ (800ec00 <tcp_slowtmr+0x278>)
 800ea78:	f008 ff3a 	bl	80178f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ea7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d106      	bne.n	800ea92 <tcp_slowtmr+0x10a>
 800ea84:	4b5c      	ldr	r3, [pc, #368]	@ (800ebf8 <tcp_slowtmr+0x270>)
 800ea86:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ea8a:	4961      	ldr	r1, [pc, #388]	@ (800ec10 <tcp_slowtmr+0x288>)
 800ea8c:	485c      	ldr	r0, [pc, #368]	@ (800ec00 <tcp_slowtmr+0x278>)
 800ea8e:	f008 ff2f 	bl	80178f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ea92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea94:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ea98:	2b0b      	cmp	r3, #11
 800ea9a:	d905      	bls.n	800eaa8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ea9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eaa6:	e0ed      	b.n	800ec84 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaaa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eaae:	3b01      	subs	r3, #1
 800eab0:	4a58      	ldr	r2, [pc, #352]	@ (800ec14 <tcp_slowtmr+0x28c>)
 800eab2:	5cd3      	ldrb	r3, [r2, r3]
 800eab4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eabc:	7c7a      	ldrb	r2, [r7, #17]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d907      	bls.n	800ead2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800eac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eac8:	3301      	adds	r3, #1
 800eaca:	b2da      	uxtb	r2, r3
 800eacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eace:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800ead2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ead8:	7c7a      	ldrb	r2, [r7, #17]
 800eada:	429a      	cmp	r2, r3
 800eadc:	f200 80d2 	bhi.w	800ec84 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800eae0:	2301      	movs	r3, #1
 800eae2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800eae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d108      	bne.n	800eb00 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eaee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eaf0:	f004 fc3e 	bl	8013370 <tcp_zero_window_probe>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d014      	beq.n	800eb24 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800eafa:	2300      	movs	r3, #0
 800eafc:	623b      	str	r3, [r7, #32]
 800eafe:	e011      	b.n	800eb24 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800eb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb06:	4619      	mov	r1, r3
 800eb08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb0a:	f003 faf3 	bl	80120f4 <tcp_split_unsent_seg>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d107      	bne.n	800eb24 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800eb14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb16:	f003 fd77 	bl	8012608 <tcp_output>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800eb20:	2300      	movs	r3, #0
 800eb22:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f000 80ac 	beq.w	800ec84 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800eb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb36:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eb3a:	2b06      	cmp	r3, #6
 800eb3c:	f200 80a2 	bhi.w	800ec84 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800eb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb42:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eb46:	3301      	adds	r3, #1
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb4c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800eb50:	e098      	b.n	800ec84 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800eb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	db0f      	blt.n	800eb7c <tcp_slowtmr+0x1f4>
 800eb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800eb62:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d008      	beq.n	800eb7c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800eb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	3301      	adds	r3, #1
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	b21a      	sxth	r2, r3
 800eb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800eb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	db7b      	blt.n	800ec84 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800eb8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb8e:	f004 f831 	bl	8012bf4 <tcp_rexmit_rto_prepare>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d007      	beq.n	800eba8 <tcp_slowtmr+0x220>
 800eb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d171      	bne.n	800ec84 <tcp_slowtmr+0x2fc>
 800eba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d06d      	beq.n	800ec84 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800eba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebaa:	7d1b      	ldrb	r3, [r3, #20]
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	d03a      	beq.n	800ec26 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ebb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ebb6:	2b0c      	cmp	r3, #12
 800ebb8:	bf28      	it	cs
 800ebba:	230c      	movcs	r3, #12
 800ebbc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ebbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ebc4:	10db      	asrs	r3, r3, #3
 800ebc6:	b21b      	sxth	r3, r3
 800ebc8:	461a      	mov	r2, r3
 800ebca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ebd0:	4413      	add	r3, r2
 800ebd2:	7efa      	ldrb	r2, [r7, #27]
 800ebd4:	4910      	ldr	r1, [pc, #64]	@ (800ec18 <tcp_slowtmr+0x290>)
 800ebd6:	5c8a      	ldrb	r2, [r1, r2]
 800ebd8:	4093      	lsls	r3, r2
 800ebda:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	dc1a      	bgt.n	800ec1c <tcp_slowtmr+0x294>
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	b21a      	sxth	r2, r3
 800ebea:	e019      	b.n	800ec20 <tcp_slowtmr+0x298>
 800ebec:	200084fc 	.word	0x200084fc
 800ebf0:	20008512 	.word	0x20008512
 800ebf4:	20008508 	.word	0x20008508
 800ebf8:	08019658 	.word	0x08019658
 800ebfc:	0801999c 	.word	0x0801999c
 800ec00:	0801969c 	.word	0x0801969c
 800ec04:	080199c8 	.word	0x080199c8
 800ec08:	080199f4 	.word	0x080199f4
 800ec0c:	08019a24 	.word	0x08019a24
 800ec10:	08019a58 	.word	0x08019a58
 800ec14:	0801bfac 	.word	0x0801bfac
 800ec18:	0801bf9c 	.word	0x0801bf9c
 800ec1c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ec20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ec26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec28:	2200      	movs	r2, #0
 800ec2a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ec2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ec32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	bf28      	it	cs
 800ec3c:	4613      	movcs	r3, r2
 800ec3e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ec40:	8a7b      	ldrh	r3, [r7, #18]
 800ec42:	085b      	lsrs	r3, r3, #1
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ec4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ec52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d206      	bcs.n	800ec6c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ec5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ec6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec6e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ec70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec72:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ec76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ec7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec80:	f004 f832 	bl	8012ce8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ec84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec86:	7d1b      	ldrb	r3, [r3, #20]
 800ec88:	2b06      	cmp	r3, #6
 800ec8a:	d111      	bne.n	800ecb0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ec8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8e:	8b5b      	ldrh	r3, [r3, #26]
 800ec90:	f003 0310 	and.w	r3, r3, #16
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d00b      	beq.n	800ecb0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec98:	4b9c      	ldr	r3, [pc, #624]	@ (800ef0c <tcp_slowtmr+0x584>)
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9e:	6a1b      	ldr	r3, [r3, #32]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	2b28      	cmp	r3, #40	@ 0x28
 800eca4:	d904      	bls.n	800ecb0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800eca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecaa:	3301      	adds	r3, #1
 800ecac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ecb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb2:	7a5b      	ldrb	r3, [r3, #9]
 800ecb4:	f003 0308 	and.w	r3, r3, #8
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d04a      	beq.n	800ed52 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ecbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecbe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ecc0:	2b04      	cmp	r3, #4
 800ecc2:	d003      	beq.n	800eccc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ecc8:	2b07      	cmp	r3, #7
 800ecca:	d142      	bne.n	800ed52 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eccc:	4b8f      	ldr	r3, [pc, #572]	@ (800ef0c <tcp_slowtmr+0x584>)
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	6a1b      	ldr	r3, [r3, #32]
 800ecd4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ecd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ecdc:	4b8c      	ldr	r3, [pc, #560]	@ (800ef10 <tcp_slowtmr+0x588>)
 800ecde:	440b      	add	r3, r1
 800ece0:	498c      	ldr	r1, [pc, #560]	@ (800ef14 <tcp_slowtmr+0x58c>)
 800ece2:	fba1 1303 	umull	r1, r3, r1, r3
 800ece6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d90a      	bls.n	800ed02 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800ecec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ecf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed00:	e027      	b.n	800ed52 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed02:	4b82      	ldr	r3, [pc, #520]	@ (800ef0c <tcp_slowtmr+0x584>)
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ed0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed0e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ed12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed14:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ed18:	4618      	mov	r0, r3
 800ed1a:	4b7f      	ldr	r3, [pc, #508]	@ (800ef18 <tcp_slowtmr+0x590>)
 800ed1c:	fb00 f303 	mul.w	r3, r0, r3
 800ed20:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ed22:	497c      	ldr	r1, [pc, #496]	@ (800ef14 <tcp_slowtmr+0x58c>)
 800ed24:	fba1 1303 	umull	r1, r3, r1, r3
 800ed28:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d911      	bls.n	800ed52 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ed2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed30:	f004 fade 	bl	80132f0 <tcp_keepalive>
 800ed34:	4603      	mov	r3, r0
 800ed36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800ed3a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d107      	bne.n	800ed52 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ed42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed44:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ed48:	3301      	adds	r3, #1
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ed52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d011      	beq.n	800ed7e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ed5a:	4b6c      	ldr	r3, [pc, #432]	@ (800ef0c <tcp_slowtmr+0x584>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	1ad2      	subs	r2, r2, r3
 800ed64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	005b      	lsls	r3, r3, #1
 800ed70:	440b      	add	r3, r1
 800ed72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d302      	bcc.n	800ed7e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800ed78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed7a:	f000 fde3 	bl	800f944 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ed7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed80:	7d1b      	ldrb	r3, [r3, #20]
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d10b      	bne.n	800ed9e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed86:	4b61      	ldr	r3, [pc, #388]	@ (800ef0c <tcp_slowtmr+0x584>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8c:	6a1b      	ldr	r3, [r3, #32]
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	2b28      	cmp	r3, #40	@ 0x28
 800ed92:	d904      	bls.n	800ed9e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800ed94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed98:	3301      	adds	r3, #1
 800ed9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800ed9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda0:	7d1b      	ldrb	r3, [r3, #20]
 800eda2:	2b09      	cmp	r3, #9
 800eda4:	d10b      	bne.n	800edbe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eda6:	4b59      	ldr	r3, [pc, #356]	@ (800ef0c <tcp_slowtmr+0x584>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	2bf0      	cmp	r3, #240	@ 0xf0
 800edb2:	d904      	bls.n	800edbe <tcp_slowtmr+0x436>
        ++pcb_remove;
 800edb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edb8:	3301      	adds	r3, #1
 800edba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800edbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d060      	beq.n	800ee88 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800edc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edcc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800edce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800edd0:	f000 fbfe 	bl	800f5d0 <tcp_pcb_purge>
      if (prev != NULL) {
 800edd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d010      	beq.n	800edfc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800edda:	4b50      	ldr	r3, [pc, #320]	@ (800ef1c <tcp_slowtmr+0x594>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d106      	bne.n	800edf2 <tcp_slowtmr+0x46a>
 800ede4:	4b4e      	ldr	r3, [pc, #312]	@ (800ef20 <tcp_slowtmr+0x598>)
 800ede6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800edea:	494e      	ldr	r1, [pc, #312]	@ (800ef24 <tcp_slowtmr+0x59c>)
 800edec:	484e      	ldr	r0, [pc, #312]	@ (800ef28 <tcp_slowtmr+0x5a0>)
 800edee:	f008 fd7f 	bl	80178f0 <iprintf>
        prev->next = pcb->next;
 800edf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf4:	68da      	ldr	r2, [r3, #12]
 800edf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf8:	60da      	str	r2, [r3, #12]
 800edfa:	e00f      	b.n	800ee1c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800edfc:	4b47      	ldr	r3, [pc, #284]	@ (800ef1c <tcp_slowtmr+0x594>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d006      	beq.n	800ee14 <tcp_slowtmr+0x48c>
 800ee06:	4b46      	ldr	r3, [pc, #280]	@ (800ef20 <tcp_slowtmr+0x598>)
 800ee08:	f240 5271 	movw	r2, #1393	@ 0x571
 800ee0c:	4947      	ldr	r1, [pc, #284]	@ (800ef2c <tcp_slowtmr+0x5a4>)
 800ee0e:	4846      	ldr	r0, [pc, #280]	@ (800ef28 <tcp_slowtmr+0x5a0>)
 800ee10:	f008 fd6e 	bl	80178f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ee14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	4a40      	ldr	r2, [pc, #256]	@ (800ef1c <tcp_slowtmr+0x594>)
 800ee1a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ee1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d013      	beq.n	800ee4c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ee24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee26:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ee28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee2a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ee2c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ee2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee30:	3304      	adds	r3, #4
 800ee32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee34:	8ad2      	ldrh	r2, [r2, #22]
 800ee36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee38:	8b09      	ldrh	r1, [r1, #24]
 800ee3a:	9102      	str	r1, [sp, #8]
 800ee3c:	9201      	str	r2, [sp, #4]
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	462b      	mov	r3, r5
 800ee42:	4622      	mov	r2, r4
 800ee44:	4601      	mov	r1, r0
 800ee46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee48:	f004 f99e 	bl	8013188 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ee4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee4e:	691b      	ldr	r3, [r3, #16]
 800ee50:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ee52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee54:	7d1b      	ldrb	r3, [r3, #20]
 800ee56:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ee58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee5a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ee5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ee62:	6838      	ldr	r0, [r7, #0]
 800ee64:	f7ff f9f2 	bl	800e24c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ee68:	4b31      	ldr	r3, [pc, #196]	@ (800ef30 <tcp_slowtmr+0x5a8>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d004      	beq.n	800ee7e <tcp_slowtmr+0x4f6>
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f06f 010c 	mvn.w	r1, #12
 800ee7a:	68b8      	ldr	r0, [r7, #8]
 800ee7c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ee7e:	4b2c      	ldr	r3, [pc, #176]	@ (800ef30 <tcp_slowtmr+0x5a8>)
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d037      	beq.n	800eef6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ee86:	e592      	b.n	800e9ae <tcp_slowtmr+0x26>
      prev = pcb;
 800ee88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ee8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ee92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee94:	7f1b      	ldrb	r3, [r3, #28]
 800ee96:	3301      	adds	r3, #1
 800ee98:	b2da      	uxtb	r2, r3
 800ee9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ee9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea0:	7f1a      	ldrb	r2, [r3, #28]
 800eea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea4:	7f5b      	ldrb	r3, [r3, #29]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d325      	bcc.n	800eef6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800eeaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeac:	2200      	movs	r2, #0
 800eeae:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800eeb0:	4b1f      	ldr	r3, [pc, #124]	@ (800ef30 <tcp_slowtmr+0x5a8>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800eeb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00b      	beq.n	800eed8 <tcp_slowtmr+0x550>
 800eec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eec8:	6912      	ldr	r2, [r2, #16]
 800eeca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eecc:	4610      	mov	r0, r2
 800eece:	4798      	blx	r3
 800eed0:	4603      	mov	r3, r0
 800eed2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800eed6:	e002      	b.n	800eede <tcp_slowtmr+0x556>
 800eed8:	2300      	movs	r3, #0
 800eeda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800eede:	4b14      	ldr	r3, [pc, #80]	@ (800ef30 <tcp_slowtmr+0x5a8>)
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f47f ad62 	bne.w	800e9ac <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800eee8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d102      	bne.n	800eef6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800eef0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eef2:	f003 fb89 	bl	8012608 <tcp_output>
  while (pcb != NULL) {
 800eef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f47f ad5e 	bne.w	800e9ba <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ef02:	4b0c      	ldr	r3, [pc, #48]	@ (800ef34 <tcp_slowtmr+0x5ac>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ef08:	e069      	b.n	800efde <tcp_slowtmr+0x656>
 800ef0a:	bf00      	nop
 800ef0c:	200084fc 	.word	0x200084fc
 800ef10:	000a4cb8 	.word	0x000a4cb8
 800ef14:	10624dd3 	.word	0x10624dd3
 800ef18:	000124f8 	.word	0x000124f8
 800ef1c:	20008508 	.word	0x20008508
 800ef20:	08019658 	.word	0x08019658
 800ef24:	08019a90 	.word	0x08019a90
 800ef28:	0801969c 	.word	0x0801969c
 800ef2c:	08019abc 	.word	0x08019abc
 800ef30:	20008510 	.word	0x20008510
 800ef34:	2000850c 	.word	0x2000850c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ef38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3a:	7d1b      	ldrb	r3, [r3, #20]
 800ef3c:	2b0a      	cmp	r3, #10
 800ef3e:	d006      	beq.n	800ef4e <tcp_slowtmr+0x5c6>
 800ef40:	4b2b      	ldr	r3, [pc, #172]	@ (800eff0 <tcp_slowtmr+0x668>)
 800ef42:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ef46:	492b      	ldr	r1, [pc, #172]	@ (800eff4 <tcp_slowtmr+0x66c>)
 800ef48:	482b      	ldr	r0, [pc, #172]	@ (800eff8 <tcp_slowtmr+0x670>)
 800ef4a:	f008 fcd1 	bl	80178f0 <iprintf>
    pcb_remove = 0;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ef54:	4b29      	ldr	r3, [pc, #164]	@ (800effc <tcp_slowtmr+0x674>)
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5a:	6a1b      	ldr	r3, [r3, #32]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	2bf0      	cmp	r3, #240	@ 0xf0
 800ef60:	d904      	bls.n	800ef6c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ef62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef66:	3301      	adds	r3, #1
 800ef68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ef6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d02f      	beq.n	800efd4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ef74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef76:	f000 fb2b 	bl	800f5d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ef7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d010      	beq.n	800efa2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ef80:	4b1f      	ldr	r3, [pc, #124]	@ (800f000 <tcp_slowtmr+0x678>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d106      	bne.n	800ef98 <tcp_slowtmr+0x610>
 800ef8a:	4b19      	ldr	r3, [pc, #100]	@ (800eff0 <tcp_slowtmr+0x668>)
 800ef8c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ef90:	491c      	ldr	r1, [pc, #112]	@ (800f004 <tcp_slowtmr+0x67c>)
 800ef92:	4819      	ldr	r0, [pc, #100]	@ (800eff8 <tcp_slowtmr+0x670>)
 800ef94:	f008 fcac 	bl	80178f0 <iprintf>
        prev->next = pcb->next;
 800ef98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef9a:	68da      	ldr	r2, [r3, #12]
 800ef9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef9e:	60da      	str	r2, [r3, #12]
 800efa0:	e00f      	b.n	800efc2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800efa2:	4b17      	ldr	r3, [pc, #92]	@ (800f000 <tcp_slowtmr+0x678>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d006      	beq.n	800efba <tcp_slowtmr+0x632>
 800efac:	4b10      	ldr	r3, [pc, #64]	@ (800eff0 <tcp_slowtmr+0x668>)
 800efae:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800efb2:	4915      	ldr	r1, [pc, #84]	@ (800f008 <tcp_slowtmr+0x680>)
 800efb4:	4810      	ldr	r0, [pc, #64]	@ (800eff8 <tcp_slowtmr+0x670>)
 800efb6:	f008 fc9b 	bl	80178f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800efba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	4a10      	ldr	r2, [pc, #64]	@ (800f000 <tcp_slowtmr+0x678>)
 800efc0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800efc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800efc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800efcc:	69f8      	ldr	r0, [r7, #28]
 800efce:	f7ff f93d 	bl	800e24c <tcp_free>
 800efd2:	e004      	b.n	800efde <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800efd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800efd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800efde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1a9      	bne.n	800ef38 <tcp_slowtmr+0x5b0>
    }
  }
}
 800efe4:	bf00      	nop
 800efe6:	bf00      	nop
 800efe8:	3730      	adds	r7, #48	@ 0x30
 800efea:	46bd      	mov	sp, r7
 800efec:	bdb0      	pop	{r4, r5, r7, pc}
 800efee:	bf00      	nop
 800eff0:	08019658 	.word	0x08019658
 800eff4:	08019ae8 	.word	0x08019ae8
 800eff8:	0801969c 	.word	0x0801969c
 800effc:	200084fc 	.word	0x200084fc
 800f000:	2000850c 	.word	0x2000850c
 800f004:	08019b18 	.word	0x08019b18
 800f008:	08019b40 	.word	0x08019b40

0800f00c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f012:	4b2d      	ldr	r3, [pc, #180]	@ (800f0c8 <tcp_fasttmr+0xbc>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	3301      	adds	r3, #1
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	4b2b      	ldr	r3, [pc, #172]	@ (800f0c8 <tcp_fasttmr+0xbc>)
 800f01c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f01e:	4b2b      	ldr	r3, [pc, #172]	@ (800f0cc <tcp_fasttmr+0xc0>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f024:	e048      	b.n	800f0b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	7f9a      	ldrb	r2, [r3, #30]
 800f02a:	4b27      	ldr	r3, [pc, #156]	@ (800f0c8 <tcp_fasttmr+0xbc>)
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d03f      	beq.n	800f0b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f032:	4b25      	ldr	r3, [pc, #148]	@ (800f0c8 <tcp_fasttmr+0xbc>)
 800f034:	781a      	ldrb	r2, [r3, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8b5b      	ldrh	r3, [r3, #26]
 800f03e:	f003 0301 	and.w	r3, r3, #1
 800f042:	2b00      	cmp	r3, #0
 800f044:	d010      	beq.n	800f068 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	8b5b      	ldrh	r3, [r3, #26]
 800f04a:	f043 0302 	orr.w	r3, r3, #2
 800f04e:	b29a      	uxth	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f003 fad7 	bl	8012608 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	8b5b      	ldrh	r3, [r3, #26]
 800f05e:	f023 0303 	bic.w	r3, r3, #3
 800f062:	b29a      	uxth	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	8b5b      	ldrh	r3, [r3, #26]
 800f06c:	f003 0308 	and.w	r3, r3, #8
 800f070:	2b00      	cmp	r3, #0
 800f072:	d009      	beq.n	800f088 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	8b5b      	ldrh	r3, [r3, #26]
 800f078:	f023 0308 	bic.w	r3, r3, #8
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f7ff fa76 	bl	800e574 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00a      	beq.n	800f0ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f096:	4b0e      	ldr	r3, [pc, #56]	@ (800f0d0 <tcp_fasttmr+0xc4>)
 800f098:	2200      	movs	r2, #0
 800f09a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 f819 	bl	800f0d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f0a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d0 <tcp_fasttmr+0xc4>)
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d000      	beq.n	800f0ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f0aa:	e7b8      	b.n	800f01e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	607b      	str	r3, [r7, #4]
 800f0b0:	e002      	b.n	800f0b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1b3      	bne.n	800f026 <tcp_fasttmr+0x1a>
    }
  }
}
 800f0be:	bf00      	nop
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	20008512 	.word	0x20008512
 800f0cc:	20008508 	.word	0x20008508
 800f0d0:	20008510 	.word	0x20008510

0800f0d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f0d4:	b590      	push	{r4, r7, lr}
 800f0d6:	b085      	sub	sp, #20
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d109      	bne.n	800f0f6 <tcp_process_refused_data+0x22>
 800f0e2:	4b37      	ldr	r3, [pc, #220]	@ (800f1c0 <tcp_process_refused_data+0xec>)
 800f0e4:	f240 6209 	movw	r2, #1545	@ 0x609
 800f0e8:	4936      	ldr	r1, [pc, #216]	@ (800f1c4 <tcp_process_refused_data+0xf0>)
 800f0ea:	4837      	ldr	r0, [pc, #220]	@ (800f1c8 <tcp_process_refused_data+0xf4>)
 800f0ec:	f008 fc00 	bl	80178f0 <iprintf>
 800f0f0:	f06f 030f 	mvn.w	r3, #15
 800f0f4:	e060      	b.n	800f1b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0fa:	7b5b      	ldrb	r3, [r3, #13]
 800f0fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f102:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00b      	beq.n	800f12c <tcp_process_refused_data+0x58>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6918      	ldr	r0, [r3, #16]
 800f11e:	2300      	movs	r3, #0
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	6879      	ldr	r1, [r7, #4]
 800f124:	47a0      	blx	r4
 800f126:	4603      	mov	r3, r0
 800f128:	73fb      	strb	r3, [r7, #15]
 800f12a:	e007      	b.n	800f13c <tcp_process_refused_data+0x68>
 800f12c:	2300      	movs	r3, #0
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	6879      	ldr	r1, [r7, #4]
 800f132:	2000      	movs	r0, #0
 800f134:	f000 f8a4 	bl	800f280 <tcp_recv_null>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d12a      	bne.n	800f19a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	f003 0320 	and.w	r3, r3, #32
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d033      	beq.n	800f1b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f152:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f156:	d005      	beq.n	800f164 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f15c:	3301      	adds	r3, #1
 800f15e:	b29a      	uxth	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00b      	beq.n	800f186 <tcp_process_refused_data+0xb2>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6918      	ldr	r0, [r3, #16]
 800f178:	2300      	movs	r3, #0
 800f17a:	2200      	movs	r2, #0
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	47a0      	blx	r4
 800f180:	4603      	mov	r3, r0
 800f182:	73fb      	strb	r3, [r7, #15]
 800f184:	e001      	b.n	800f18a <tcp_process_refused_data+0xb6>
 800f186:	2300      	movs	r3, #0
 800f188:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f18e:	f113 0f0d 	cmn.w	r3, #13
 800f192:	d110      	bne.n	800f1b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f194:	f06f 030c 	mvn.w	r3, #12
 800f198:	e00e      	b.n	800f1b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f19e:	f113 0f0d 	cmn.w	r3, #13
 800f1a2:	d102      	bne.n	800f1aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f1a4:	f06f 030c 	mvn.w	r3, #12
 800f1a8:	e006      	b.n	800f1b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f1b0:	f06f 0304 	mvn.w	r3, #4
 800f1b4:	e000      	b.n	800f1b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f1b6:	2300      	movs	r3, #0
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3714      	adds	r7, #20
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd90      	pop	{r4, r7, pc}
 800f1c0:	08019658 	.word	0x08019658
 800f1c4:	08019b68 	.word	0x08019b68
 800f1c8:	0801969c 	.word	0x0801969c

0800f1cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f1d4:	e007      	b.n	800f1e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f80a 	bl	800f1f6 <tcp_seg_free>
    seg = next;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d1f4      	bne.n	800f1d6 <tcp_segs_free+0xa>
  }
}
 800f1ec:	bf00      	nop
 800f1ee:	bf00      	nop
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b082      	sub	sp, #8
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00c      	beq.n	800f21e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d004      	beq.n	800f216 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	4618      	mov	r0, r3
 800f212:	f7fe fd6b 	bl	800dcec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f216:	6879      	ldr	r1, [r7, #4]
 800f218:	2003      	movs	r0, #3
 800f21a:	f7fd fdfb 	bl	800ce14 <memp_free>
  }
}
 800f21e:	bf00      	nop
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
	...

0800f228 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <tcp_seg_copy+0x1c>
 800f236:	4b0f      	ldr	r3, [pc, #60]	@ (800f274 <tcp_seg_copy+0x4c>)
 800f238:	f240 6282 	movw	r2, #1666	@ 0x682
 800f23c:	490e      	ldr	r1, [pc, #56]	@ (800f278 <tcp_seg_copy+0x50>)
 800f23e:	480f      	ldr	r0, [pc, #60]	@ (800f27c <tcp_seg_copy+0x54>)
 800f240:	f008 fb56 	bl	80178f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f244:	2003      	movs	r0, #3
 800f246:	f7fd fd75 	bl	800cd34 <memp_malloc>
 800f24a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <tcp_seg_copy+0x2e>
    return NULL;
 800f252:	2300      	movs	r3, #0
 800f254:	e00a      	b.n	800f26c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f256:	2214      	movs	r2, #20
 800f258:	6879      	ldr	r1, [r7, #4]
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f008 fd1d 	bl	8017c9a <memcpy>
  pbuf_ref(cseg->p);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	4618      	mov	r0, r3
 800f266:	f7fe fde1 	bl	800de2c <pbuf_ref>
  return cseg;
 800f26a:	68fb      	ldr	r3, [r7, #12]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	08019658 	.word	0x08019658
 800f278:	08019bac 	.word	0x08019bac
 800f27c:	0801969c 	.word	0x0801969c

0800f280 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
 800f28c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d109      	bne.n	800f2a8 <tcp_recv_null+0x28>
 800f294:	4b12      	ldr	r3, [pc, #72]	@ (800f2e0 <tcp_recv_null+0x60>)
 800f296:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f29a:	4912      	ldr	r1, [pc, #72]	@ (800f2e4 <tcp_recv_null+0x64>)
 800f29c:	4812      	ldr	r0, [pc, #72]	@ (800f2e8 <tcp_recv_null+0x68>)
 800f29e:	f008 fb27 	bl	80178f0 <iprintf>
 800f2a2:	f06f 030f 	mvn.w	r3, #15
 800f2a6:	e016      	b.n	800f2d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d009      	beq.n	800f2c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	891b      	ldrh	r3, [r3, #8]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68b8      	ldr	r0, [r7, #8]
 800f2b6:	f7ff fb17 	bl	800e8e8 <tcp_recved>
    pbuf_free(p);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7fe fd16 	bl	800dcec <pbuf_free>
 800f2c0:	e008      	b.n	800f2d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f2c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d104      	bne.n	800f2d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f2ca:	68b8      	ldr	r0, [r7, #8]
 800f2cc:	f7ff f9bc 	bl	800e648 <tcp_close>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	e000      	b.n	800f2d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	08019658 	.word	0x08019658
 800f2e4:	08019bc8 	.word	0x08019bc8
 800f2e8:	0801969c 	.word	0x0801969c

0800f2ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b086      	sub	sp, #24
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	db01      	blt.n	800f302 <tcp_kill_prio+0x16>
 800f2fe:	79fb      	ldrb	r3, [r7, #7]
 800f300:	e000      	b.n	800f304 <tcp_kill_prio+0x18>
 800f302:	237f      	movs	r3, #127	@ 0x7f
 800f304:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f306:	7afb      	ldrb	r3, [r7, #11]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d034      	beq.n	800f376 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f30c:	7afb      	ldrb	r3, [r7, #11]
 800f30e:	3b01      	subs	r3, #1
 800f310:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f312:	2300      	movs	r3, #0
 800f314:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f316:	2300      	movs	r3, #0
 800f318:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f31a:	4b19      	ldr	r3, [pc, #100]	@ (800f380 <tcp_kill_prio+0x94>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	617b      	str	r3, [r7, #20]
 800f320:	e01f      	b.n	800f362 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	7d5b      	ldrb	r3, [r3, #21]
 800f326:	7afa      	ldrb	r2, [r7, #11]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d80c      	bhi.n	800f346 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f330:	7afa      	ldrb	r2, [r7, #11]
 800f332:	429a      	cmp	r2, r3
 800f334:	d112      	bne.n	800f35c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f336:	4b13      	ldr	r3, [pc, #76]	@ (800f384 <tcp_kill_prio+0x98>)
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	1ad3      	subs	r3, r2, r3
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	429a      	cmp	r2, r3
 800f344:	d80a      	bhi.n	800f35c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f346:	4b0f      	ldr	r3, [pc, #60]	@ (800f384 <tcp_kill_prio+0x98>)
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	6a1b      	ldr	r3, [r3, #32]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	7d5b      	ldrb	r3, [r3, #21]
 800f35a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	617b      	str	r3, [r7, #20]
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1dc      	bne.n	800f322 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d004      	beq.n	800f378 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f36e:	6938      	ldr	r0, [r7, #16]
 800f370:	f7ff fa54 	bl	800e81c <tcp_abort>
 800f374:	e000      	b.n	800f378 <tcp_kill_prio+0x8c>
    return;
 800f376:	bf00      	nop
  }
}
 800f378:	3718      	adds	r7, #24
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	20008508 	.word	0x20008508
 800f384:	200084fc 	.word	0x200084fc

0800f388 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b086      	sub	sp, #24
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	4603      	mov	r3, r0
 800f390:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f392:	79fb      	ldrb	r3, [r7, #7]
 800f394:	2b08      	cmp	r3, #8
 800f396:	d009      	beq.n	800f3ac <tcp_kill_state+0x24>
 800f398:	79fb      	ldrb	r3, [r7, #7]
 800f39a:	2b09      	cmp	r3, #9
 800f39c:	d006      	beq.n	800f3ac <tcp_kill_state+0x24>
 800f39e:	4b1a      	ldr	r3, [pc, #104]	@ (800f408 <tcp_kill_state+0x80>)
 800f3a0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f3a4:	4919      	ldr	r1, [pc, #100]	@ (800f40c <tcp_kill_state+0x84>)
 800f3a6:	481a      	ldr	r0, [pc, #104]	@ (800f410 <tcp_kill_state+0x88>)
 800f3a8:	f008 faa2 	bl	80178f0 <iprintf>

  inactivity = 0;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3b4:	4b17      	ldr	r3, [pc, #92]	@ (800f414 <tcp_kill_state+0x8c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	617b      	str	r3, [r7, #20]
 800f3ba:	e017      	b.n	800f3ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	7d1b      	ldrb	r3, [r3, #20]
 800f3c0:	79fa      	ldrb	r2, [r7, #7]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d10f      	bne.n	800f3e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f3c6:	4b14      	ldr	r3, [pc, #80]	@ (800f418 <tcp_kill_state+0x90>)
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	6a1b      	ldr	r3, [r3, #32]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d807      	bhi.n	800f3e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f3d6:	4b10      	ldr	r3, [pc, #64]	@ (800f418 <tcp_kill_state+0x90>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	6a1b      	ldr	r3, [r3, #32]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	617b      	str	r3, [r7, #20]
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1e4      	bne.n	800f3bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d003      	beq.n	800f400 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	6938      	ldr	r0, [r7, #16]
 800f3fc:	f7ff f950 	bl	800e6a0 <tcp_abandon>
  }
}
 800f400:	bf00      	nop
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	08019658 	.word	0x08019658
 800f40c:	08019be4 	.word	0x08019be4
 800f410:	0801969c 	.word	0x0801969c
 800f414:	20008508 	.word	0x20008508
 800f418:	200084fc 	.word	0x200084fc

0800f41c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f426:	2300      	movs	r3, #0
 800f428:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f42a:	4b12      	ldr	r3, [pc, #72]	@ (800f474 <tcp_kill_timewait+0x58>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	60fb      	str	r3, [r7, #12]
 800f430:	e012      	b.n	800f458 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f432:	4b11      	ldr	r3, [pc, #68]	@ (800f478 <tcp_kill_timewait+0x5c>)
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d807      	bhi.n	800f452 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f442:	4b0d      	ldr	r3, [pc, #52]	@ (800f478 <tcp_kill_timewait+0x5c>)
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6a1b      	ldr	r3, [r3, #32]
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	60fb      	str	r3, [r7, #12]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e9      	bne.n	800f432 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d002      	beq.n	800f46a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f464:	68b8      	ldr	r0, [r7, #8]
 800f466:	f7ff f9d9 	bl	800e81c <tcp_abort>
  }
}
 800f46a:	bf00      	nop
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	2000850c 	.word	0x2000850c
 800f478:	200084fc 	.word	0x200084fc

0800f47c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f482:	4b10      	ldr	r3, [pc, #64]	@ (800f4c4 <tcp_handle_closepend+0x48>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f488:	e014      	b.n	800f4b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	8b5b      	ldrh	r3, [r3, #26]
 800f494:	f003 0308 	and.w	r3, r3, #8
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d009      	beq.n	800f4b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	8b5b      	ldrh	r3, [r3, #26]
 800f4a0:	f023 0308 	bic.w	r3, r3, #8
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7ff f862 	bl	800e574 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1e7      	bne.n	800f48a <tcp_handle_closepend+0xe>
  }
}
 800f4ba:	bf00      	nop
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20008508 	.word	0x20008508

0800f4c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f4d2:	2001      	movs	r0, #1
 800f4d4:	f7fd fc2e 	bl	800cd34 <memp_malloc>
 800f4d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d126      	bne.n	800f52e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f4e0:	f7ff ffcc 	bl	800f47c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f4e4:	f7ff ff9a 	bl	800f41c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f4e8:	2001      	movs	r0, #1
 800f4ea:	f7fd fc23 	bl	800cd34 <memp_malloc>
 800f4ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d11b      	bne.n	800f52e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f4f6:	2009      	movs	r0, #9
 800f4f8:	f7ff ff46 	bl	800f388 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f4fc:	2001      	movs	r0, #1
 800f4fe:	f7fd fc19 	bl	800cd34 <memp_malloc>
 800f502:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d111      	bne.n	800f52e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f50a:	2008      	movs	r0, #8
 800f50c:	f7ff ff3c 	bl	800f388 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f510:	2001      	movs	r0, #1
 800f512:	f7fd fc0f 	bl	800cd34 <memp_malloc>
 800f516:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d107      	bne.n	800f52e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f51e:	79fb      	ldrb	r3, [r7, #7]
 800f520:	4618      	mov	r0, r3
 800f522:	f7ff fee3 	bl	800f2ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f526:	2001      	movs	r0, #1
 800f528:	f7fd fc04 	bl	800cd34 <memp_malloc>
 800f52c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d03f      	beq.n	800f5b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f534:	229c      	movs	r2, #156	@ 0x9c
 800f536:	2100      	movs	r1, #0
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f008 fb39 	bl	8017bb0 <memset>
    pcb->prio = prio;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	79fa      	ldrb	r2, [r7, #7]
 800f542:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f54a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f554:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	22ff      	movs	r2, #255	@ 0xff
 800f562:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f56a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2206      	movs	r2, #6
 800f570:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2206      	movs	r2, #6
 800f578:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f580:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2201      	movs	r2, #1
 800f586:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f58a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c0 <tcp_alloc+0xf8>)
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f592:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c4 <tcp_alloc+0xfc>)
 800f594:	781a      	ldrb	r2, [r3, #0]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f5a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	4a08      	ldr	r2, [pc, #32]	@ (800f5c8 <tcp_alloc+0x100>)
 800f5a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	4a07      	ldr	r2, [pc, #28]	@ (800f5cc <tcp_alloc+0x104>)
 800f5b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	200084fc 	.word	0x200084fc
 800f5c4:	20008512 	.word	0x20008512
 800f5c8:	0800f281 	.word	0x0800f281
 800f5cc:	006ddd00 	.word	0x006ddd00

0800f5d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d107      	bne.n	800f5ee <tcp_pcb_purge+0x1e>
 800f5de:	4b21      	ldr	r3, [pc, #132]	@ (800f664 <tcp_pcb_purge+0x94>)
 800f5e0:	f640 0251 	movw	r2, #2129	@ 0x851
 800f5e4:	4920      	ldr	r1, [pc, #128]	@ (800f668 <tcp_pcb_purge+0x98>)
 800f5e6:	4821      	ldr	r0, [pc, #132]	@ (800f66c <tcp_pcb_purge+0x9c>)
 800f5e8:	f008 f982 	bl	80178f0 <iprintf>
 800f5ec:	e037      	b.n	800f65e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	7d1b      	ldrb	r3, [r3, #20]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d033      	beq.n	800f65e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f5fa:	2b0a      	cmp	r3, #10
 800f5fc:	d02f      	beq.n	800f65e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f602:	2b01      	cmp	r3, #1
 800f604:	d02b      	beq.n	800f65e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d007      	beq.n	800f61e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fb6a 	bl	800dcec <pbuf_free>
      pcb->refused_data = NULL;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f622:	2b00      	cmp	r3, #0
 800f624:	d002      	beq.n	800f62c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f98c 	bl	800f944 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f632:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f638:	4618      	mov	r0, r3
 800f63a:	f7ff fdc7 	bl	800f1cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f642:	4618      	mov	r0, r3
 800f644:	f7ff fdc2 	bl	800f1cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	08019658 	.word	0x08019658
 800f668:	08019ca4 	.word	0x08019ca4
 800f66c:	0801969c 	.word	0x0801969c

0800f670 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d106      	bne.n	800f68e <tcp_pcb_remove+0x1e>
 800f680:	4b3e      	ldr	r3, [pc, #248]	@ (800f77c <tcp_pcb_remove+0x10c>)
 800f682:	f640 0283 	movw	r2, #2179	@ 0x883
 800f686:	493e      	ldr	r1, [pc, #248]	@ (800f780 <tcp_pcb_remove+0x110>)
 800f688:	483e      	ldr	r0, [pc, #248]	@ (800f784 <tcp_pcb_remove+0x114>)
 800f68a:	f008 f931 	bl	80178f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d106      	bne.n	800f6a2 <tcp_pcb_remove+0x32>
 800f694:	4b39      	ldr	r3, [pc, #228]	@ (800f77c <tcp_pcb_remove+0x10c>)
 800f696:	f640 0284 	movw	r2, #2180	@ 0x884
 800f69a:	493b      	ldr	r1, [pc, #236]	@ (800f788 <tcp_pcb_remove+0x118>)
 800f69c:	4839      	ldr	r0, [pc, #228]	@ (800f784 <tcp_pcb_remove+0x114>)
 800f69e:	f008 f927 	bl	80178f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d105      	bne.n	800f6b8 <tcp_pcb_remove+0x48>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	68da      	ldr	r2, [r3, #12]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	601a      	str	r2, [r3, #0]
 800f6b6:	e013      	b.n	800f6e0 <tcp_pcb_remove+0x70>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	60fb      	str	r3, [r7, #12]
 800f6be:	e00c      	b.n	800f6da <tcp_pcb_remove+0x6a>
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d104      	bne.n	800f6d4 <tcp_pcb_remove+0x64>
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	68da      	ldr	r2, [r3, #12]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	60da      	str	r2, [r3, #12]
 800f6d2:	e005      	b.n	800f6e0 <tcp_pcb_remove+0x70>
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	60fb      	str	r3, [r7, #12]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1ef      	bne.n	800f6c0 <tcp_pcb_remove+0x50>
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f6e6:	6838      	ldr	r0, [r7, #0]
 800f6e8:	f7ff ff72 	bl	800f5d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	7d1b      	ldrb	r3, [r3, #20]
 800f6f0:	2b0a      	cmp	r3, #10
 800f6f2:	d013      	beq.n	800f71c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d00f      	beq.n	800f71c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	8b5b      	ldrh	r3, [r3, #26]
 800f700:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f704:	2b00      	cmp	r3, #0
 800f706:	d009      	beq.n	800f71c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	8b5b      	ldrh	r3, [r3, #26]
 800f70c:	f043 0302 	orr.w	r3, r3, #2
 800f710:	b29a      	uxth	r2, r3
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f716:	6838      	ldr	r0, [r7, #0]
 800f718:	f002 ff76 	bl	8012608 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	7d1b      	ldrb	r3, [r3, #20]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d020      	beq.n	800f766 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d006      	beq.n	800f73a <tcp_pcb_remove+0xca>
 800f72c:	4b13      	ldr	r3, [pc, #76]	@ (800f77c <tcp_pcb_remove+0x10c>)
 800f72e:	f640 0293 	movw	r2, #2195	@ 0x893
 800f732:	4916      	ldr	r1, [pc, #88]	@ (800f78c <tcp_pcb_remove+0x11c>)
 800f734:	4813      	ldr	r0, [pc, #76]	@ (800f784 <tcp_pcb_remove+0x114>)
 800f736:	f008 f8db 	bl	80178f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d006      	beq.n	800f750 <tcp_pcb_remove+0xe0>
 800f742:	4b0e      	ldr	r3, [pc, #56]	@ (800f77c <tcp_pcb_remove+0x10c>)
 800f744:	f640 0294 	movw	r2, #2196	@ 0x894
 800f748:	4911      	ldr	r1, [pc, #68]	@ (800f790 <tcp_pcb_remove+0x120>)
 800f74a:	480e      	ldr	r0, [pc, #56]	@ (800f784 <tcp_pcb_remove+0x114>)
 800f74c:	f008 f8d0 	bl	80178f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f754:	2b00      	cmp	r3, #0
 800f756:	d006      	beq.n	800f766 <tcp_pcb_remove+0xf6>
 800f758:	4b08      	ldr	r3, [pc, #32]	@ (800f77c <tcp_pcb_remove+0x10c>)
 800f75a:	f640 0296 	movw	r2, #2198	@ 0x896
 800f75e:	490d      	ldr	r1, [pc, #52]	@ (800f794 <tcp_pcb_remove+0x124>)
 800f760:	4808      	ldr	r0, [pc, #32]	@ (800f784 <tcp_pcb_remove+0x114>)
 800f762:	f008 f8c5 	bl	80178f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2200      	movs	r2, #0
 800f76a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2200      	movs	r2, #0
 800f770:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f772:	bf00      	nop
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	08019658 	.word	0x08019658
 800f780:	08019cc0 	.word	0x08019cc0
 800f784:	0801969c 	.word	0x0801969c
 800f788:	08019cdc 	.word	0x08019cdc
 800f78c:	08019cfc 	.word	0x08019cfc
 800f790:	08019d14 	.word	0x08019d14
 800f794:	08019d30 	.word	0x08019d30

0800f798 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <tcp_next_iss+0x1c>
 800f7a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f7d0 <tcp_next_iss+0x38>)
 800f7a8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f7ac:	4909      	ldr	r1, [pc, #36]	@ (800f7d4 <tcp_next_iss+0x3c>)
 800f7ae:	480a      	ldr	r0, [pc, #40]	@ (800f7d8 <tcp_next_iss+0x40>)
 800f7b0:	f008 f89e 	bl	80178f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f7b4:	4b09      	ldr	r3, [pc, #36]	@ (800f7dc <tcp_next_iss+0x44>)
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	4b09      	ldr	r3, [pc, #36]	@ (800f7e0 <tcp_next_iss+0x48>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4413      	add	r3, r2
 800f7be:	4a07      	ldr	r2, [pc, #28]	@ (800f7dc <tcp_next_iss+0x44>)
 800f7c0:	6013      	str	r3, [r2, #0]
  return iss;
 800f7c2:	4b06      	ldr	r3, [pc, #24]	@ (800f7dc <tcp_next_iss+0x44>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	08019658 	.word	0x08019658
 800f7d4:	08019d48 	.word	0x08019d48
 800f7d8:	0801969c 	.word	0x0801969c
 800f7dc:	20000068 	.word	0x20000068
 800f7e0:	200084fc 	.word	0x200084fc

0800f7e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b086      	sub	sp, #24
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	607a      	str	r2, [r7, #4]
 800f7f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d106      	bne.n	800f806 <tcp_eff_send_mss_netif+0x22>
 800f7f8:	4b14      	ldr	r3, [pc, #80]	@ (800f84c <tcp_eff_send_mss_netif+0x68>)
 800f7fa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f7fe:	4914      	ldr	r1, [pc, #80]	@ (800f850 <tcp_eff_send_mss_netif+0x6c>)
 800f800:	4814      	ldr	r0, [pc, #80]	@ (800f854 <tcp_eff_send_mss_netif+0x70>)
 800f802:	f008 f875 	bl	80178f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d101      	bne.n	800f810 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f80c:	89fb      	ldrh	r3, [r7, #14]
 800f80e:	e019      	b.n	800f844 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f814:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f816:	8afb      	ldrh	r3, [r7, #22]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d012      	beq.n	800f842 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f81c:	2328      	movs	r3, #40	@ 0x28
 800f81e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f820:	8afa      	ldrh	r2, [r7, #22]
 800f822:	8abb      	ldrh	r3, [r7, #20]
 800f824:	429a      	cmp	r2, r3
 800f826:	d904      	bls.n	800f832 <tcp_eff_send_mss_netif+0x4e>
 800f828:	8afa      	ldrh	r2, [r7, #22]
 800f82a:	8abb      	ldrh	r3, [r7, #20]
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	b29b      	uxth	r3, r3
 800f830:	e000      	b.n	800f834 <tcp_eff_send_mss_netif+0x50>
 800f832:	2300      	movs	r3, #0
 800f834:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f836:	8a7a      	ldrh	r2, [r7, #18]
 800f838:	89fb      	ldrh	r3, [r7, #14]
 800f83a:	4293      	cmp	r3, r2
 800f83c:	bf28      	it	cs
 800f83e:	4613      	movcs	r3, r2
 800f840:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f842:	89fb      	ldrh	r3, [r7, #14]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	08019658 	.word	0x08019658
 800f850:	08019d64 	.word	0x08019d64
 800f854:	0801969c 	.word	0x0801969c

0800f858 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d11d      	bne.n	800f8a8 <tcp_netif_ip_addr_changed_pcblist+0x50>
 800f86c:	4b12      	ldr	r3, [pc, #72]	@ (800f8b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f86e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f872:	4912      	ldr	r1, [pc, #72]	@ (800f8bc <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800f874:	4812      	ldr	r0, [pc, #72]	@ (800f8c0 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800f876:	f008 f83b 	bl	80178f0 <iprintf>

  while (pcb != NULL) {
 800f87a:	e015      	b.n	800f8a8 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	429a      	cmp	r2, r3
 800f886:	d10c      	bne.n	800f8a2 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800f88e:	68f9      	ldr	r1, [r7, #12]
 800f890:	480c      	ldr	r0, [pc, #48]	@ (800f8c4 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800f892:	f008 f82d 	bl	80178f0 <iprintf>
      tcp_abort(pcb);
 800f896:	68f8      	ldr	r0, [r7, #12]
 800f898:	f7fe ffc0 	bl	800e81c <tcp_abort>
      pcb = next;
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	60fb      	str	r3, [r7, #12]
 800f8a0:	e002      	b.n	800f8a8 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d1e6      	bne.n	800f87c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f8ae:	bf00      	nop
 800f8b0:	bf00      	nop
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	08019658 	.word	0x08019658
 800f8bc:	08019d8c 	.word	0x08019d8c
 800f8c0:	0801969c 	.word	0x0801969c
 800f8c4:	08019dc0 	.word	0x08019dc0

0800f8c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d02a      	beq.n	800f92e <tcp_netif_ip_addr_changed+0x66>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d026      	beq.n	800f92e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f8e0:	4b15      	ldr	r3, [pc, #84]	@ (800f938 <tcp_netif_ip_addr_changed+0x70>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f7ff ffb6 	bl	800f858 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f8ec:	4b13      	ldr	r3, [pc, #76]	@ (800f93c <tcp_netif_ip_addr_changed+0x74>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7ff ffb0 	bl	800f858 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d017      	beq.n	800f92e <tcp_netif_ip_addr_changed+0x66>
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d013      	beq.n	800f92e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f906:	4b0e      	ldr	r3, [pc, #56]	@ (800f940 <tcp_netif_ip_addr_changed+0x78>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	e00c      	b.n	800f928 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	429a      	cmp	r2, r3
 800f918:	d103      	bne.n	800f922 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	60fb      	str	r3, [r7, #12]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1ef      	bne.n	800f90e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f92e:	bf00      	nop
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20008508 	.word	0x20008508
 800f93c:	20008500 	.word	0x20008500
 800f940:	20008504 	.word	0x20008504

0800f944 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f950:	2b00      	cmp	r3, #0
 800f952:	d007      	beq.n	800f964 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff fc37 	bl	800f1cc <tcp_segs_free>
    pcb->ooseq = NULL;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f964:	bf00      	nop
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f96c:	b590      	push	{r4, r7, lr}
 800f96e:	b08d      	sub	sp, #52	@ 0x34
 800f970:	af04      	add	r7, sp, #16
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d105      	bne.n	800f988 <tcp_input+0x1c>
 800f97c:	4b9b      	ldr	r3, [pc, #620]	@ (800fbec <tcp_input+0x280>)
 800f97e:	2283      	movs	r2, #131	@ 0x83
 800f980:	499b      	ldr	r1, [pc, #620]	@ (800fbf0 <tcp_input+0x284>)
 800f982:	489c      	ldr	r0, [pc, #624]	@ (800fbf4 <tcp_input+0x288>)
 800f984:	f007 ffb4 	bl	80178f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	4a9a      	ldr	r2, [pc, #616]	@ (800fbf8 <tcp_input+0x28c>)
 800f98e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	895b      	ldrh	r3, [r3, #10]
 800f994:	2b13      	cmp	r3, #19
 800f996:	f240 83d1 	bls.w	801013c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f99a:	4b98      	ldr	r3, [pc, #608]	@ (800fbfc <tcp_input+0x290>)
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	4a97      	ldr	r2, [pc, #604]	@ (800fbfc <tcp_input+0x290>)
 800f9a0:	6812      	ldr	r2, [r2, #0]
 800f9a2:	4611      	mov	r1, r2
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f006 f9a5 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f040 83c7 	bne.w	8010140 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f9b2:	4b92      	ldr	r3, [pc, #584]	@ (800fbfc <tcp_input+0x290>)
 800f9b4:	695b      	ldr	r3, [r3, #20]
 800f9b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f9ba:	2be0      	cmp	r3, #224	@ 0xe0
 800f9bc:	f000 83c0 	beq.w	8010140 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f9c0:	4b8d      	ldr	r3, [pc, #564]	@ (800fbf8 <tcp_input+0x28c>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	899b      	ldrh	r3, [r3, #12]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fc fd3f 	bl	800c44c <lwip_htons>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	0b1b      	lsrs	r3, r3, #12
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f9da:	7cbb      	ldrb	r3, [r7, #18]
 800f9dc:	2b13      	cmp	r3, #19
 800f9de:	f240 83b1 	bls.w	8010144 <tcp_input+0x7d8>
 800f9e2:	7cbb      	ldrb	r3, [r7, #18]
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	891b      	ldrh	r3, [r3, #8]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	f200 83aa 	bhi.w	8010144 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f9f0:	7cbb      	ldrb	r3, [r7, #18]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	3b14      	subs	r3, #20
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	4b81      	ldr	r3, [pc, #516]	@ (800fc00 <tcp_input+0x294>)
 800f9fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f9fc:	4b81      	ldr	r3, [pc, #516]	@ (800fc04 <tcp_input+0x298>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	895a      	ldrh	r2, [r3, #10]
 800fa06:	7cbb      	ldrb	r3, [r7, #18]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d309      	bcc.n	800fa22 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fa0e:	4b7c      	ldr	r3, [pc, #496]	@ (800fc00 <tcp_input+0x294>)
 800fa10:	881a      	ldrh	r2, [r3, #0]
 800fa12:	4b7d      	ldr	r3, [pc, #500]	@ (800fc08 <tcp_input+0x29c>)
 800fa14:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fa16:	7cbb      	ldrb	r3, [r7, #18]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7fe f8e0 	bl	800dbe0 <pbuf_remove_header>
 800fa20:	e04e      	b.n	800fac0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d105      	bne.n	800fa36 <tcp_input+0xca>
 800fa2a:	4b70      	ldr	r3, [pc, #448]	@ (800fbec <tcp_input+0x280>)
 800fa2c:	22c2      	movs	r2, #194	@ 0xc2
 800fa2e:	4977      	ldr	r1, [pc, #476]	@ (800fc0c <tcp_input+0x2a0>)
 800fa30:	4870      	ldr	r0, [pc, #448]	@ (800fbf4 <tcp_input+0x288>)
 800fa32:	f007 ff5d 	bl	80178f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fa36:	2114      	movs	r1, #20
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7fe f8d1 	bl	800dbe0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	895a      	ldrh	r2, [r3, #10]
 800fa42:	4b71      	ldr	r3, [pc, #452]	@ (800fc08 <tcp_input+0x29c>)
 800fa44:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fa46:	4b6e      	ldr	r3, [pc, #440]	@ (800fc00 <tcp_input+0x294>)
 800fa48:	881a      	ldrh	r2, [r3, #0]
 800fa4a:	4b6f      	ldr	r3, [pc, #444]	@ (800fc08 <tcp_input+0x29c>)
 800fa4c:	881b      	ldrh	r3, [r3, #0]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fa52:	4b6d      	ldr	r3, [pc, #436]	@ (800fc08 <tcp_input+0x29c>)
 800fa54:	881b      	ldrh	r3, [r3, #0]
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7fe f8c1 	bl	800dbe0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	895b      	ldrh	r3, [r3, #10]
 800fa64:	8a3a      	ldrh	r2, [r7, #16]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	f200 836e 	bhi.w	8010148 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	4a64      	ldr	r2, [pc, #400]	@ (800fc04 <tcp_input+0x298>)
 800fa74:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	8a3a      	ldrh	r2, [r7, #16]
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fe f8ae 	bl	800dbe0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	891a      	ldrh	r2, [r3, #8]
 800fa88:	8a3b      	ldrh	r3, [r7, #16]
 800fa8a:	1ad3      	subs	r3, r2, r3
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	895b      	ldrh	r3, [r3, #10]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d005      	beq.n	800faa6 <tcp_input+0x13a>
 800fa9a:	4b54      	ldr	r3, [pc, #336]	@ (800fbec <tcp_input+0x280>)
 800fa9c:	22df      	movs	r2, #223	@ 0xdf
 800fa9e:	495c      	ldr	r1, [pc, #368]	@ (800fc10 <tcp_input+0x2a4>)
 800faa0:	4854      	ldr	r0, [pc, #336]	@ (800fbf4 <tcp_input+0x288>)
 800faa2:	f007 ff25 	bl	80178f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	891a      	ldrh	r2, [r3, #8]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	891b      	ldrh	r3, [r3, #8]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d005      	beq.n	800fac0 <tcp_input+0x154>
 800fab4:	4b4d      	ldr	r3, [pc, #308]	@ (800fbec <tcp_input+0x280>)
 800fab6:	22e0      	movs	r2, #224	@ 0xe0
 800fab8:	4956      	ldr	r1, [pc, #344]	@ (800fc14 <tcp_input+0x2a8>)
 800faba:	484e      	ldr	r0, [pc, #312]	@ (800fbf4 <tcp_input+0x288>)
 800fabc:	f007 ff18 	bl	80178f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fac0:	4b4d      	ldr	r3, [pc, #308]	@ (800fbf8 <tcp_input+0x28c>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	881b      	ldrh	r3, [r3, #0]
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	4a4b      	ldr	r2, [pc, #300]	@ (800fbf8 <tcp_input+0x28c>)
 800faca:	6814      	ldr	r4, [r2, #0]
 800facc:	4618      	mov	r0, r3
 800face:	f7fc fcbd 	bl	800c44c <lwip_htons>
 800fad2:	4603      	mov	r3, r0
 800fad4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fad6:	4b48      	ldr	r3, [pc, #288]	@ (800fbf8 <tcp_input+0x28c>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	885b      	ldrh	r3, [r3, #2]
 800fadc:	b29b      	uxth	r3, r3
 800fade:	4a46      	ldr	r2, [pc, #280]	@ (800fbf8 <tcp_input+0x28c>)
 800fae0:	6814      	ldr	r4, [r2, #0]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fc fcb2 	bl	800c44c <lwip_htons>
 800fae8:	4603      	mov	r3, r0
 800faea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800faec:	4b42      	ldr	r3, [pc, #264]	@ (800fbf8 <tcp_input+0x28c>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	4a41      	ldr	r2, [pc, #260]	@ (800fbf8 <tcp_input+0x28c>)
 800faf4:	6814      	ldr	r4, [r2, #0]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fc fcbe 	bl	800c478 <lwip_htonl>
 800fafc:	4603      	mov	r3, r0
 800fafe:	6063      	str	r3, [r4, #4]
 800fb00:	6863      	ldr	r3, [r4, #4]
 800fb02:	4a45      	ldr	r2, [pc, #276]	@ (800fc18 <tcp_input+0x2ac>)
 800fb04:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fb06:	4b3c      	ldr	r3, [pc, #240]	@ (800fbf8 <tcp_input+0x28c>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	4a3a      	ldr	r2, [pc, #232]	@ (800fbf8 <tcp_input+0x28c>)
 800fb0e:	6814      	ldr	r4, [r2, #0]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fc fcb1 	bl	800c478 <lwip_htonl>
 800fb16:	4603      	mov	r3, r0
 800fb18:	60a3      	str	r3, [r4, #8]
 800fb1a:	68a3      	ldr	r3, [r4, #8]
 800fb1c:	4a3f      	ldr	r2, [pc, #252]	@ (800fc1c <tcp_input+0x2b0>)
 800fb1e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fb20:	4b35      	ldr	r3, [pc, #212]	@ (800fbf8 <tcp_input+0x28c>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	89db      	ldrh	r3, [r3, #14]
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	4a33      	ldr	r2, [pc, #204]	@ (800fbf8 <tcp_input+0x28c>)
 800fb2a:	6814      	ldr	r4, [r2, #0]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fc fc8d 	bl	800c44c <lwip_htons>
 800fb32:	4603      	mov	r3, r0
 800fb34:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fb36:	4b30      	ldr	r3, [pc, #192]	@ (800fbf8 <tcp_input+0x28c>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	899b      	ldrh	r3, [r3, #12]
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fc fc84 	bl	800c44c <lwip_htons>
 800fb44:	4603      	mov	r3, r0
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb4c:	b2da      	uxtb	r2, r3
 800fb4e:	4b34      	ldr	r3, [pc, #208]	@ (800fc20 <tcp_input+0x2b4>)
 800fb50:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	891a      	ldrh	r2, [r3, #8]
 800fb56:	4b33      	ldr	r3, [pc, #204]	@ (800fc24 <tcp_input+0x2b8>)
 800fb58:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fb5a:	4b31      	ldr	r3, [pc, #196]	@ (800fc20 <tcp_input+0x2b4>)
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	f003 0303 	and.w	r3, r3, #3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00c      	beq.n	800fb80 <tcp_input+0x214>
    tcplen++;
 800fb66:	4b2f      	ldr	r3, [pc, #188]	@ (800fc24 <tcp_input+0x2b8>)
 800fb68:	881b      	ldrh	r3, [r3, #0]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	4b2d      	ldr	r3, [pc, #180]	@ (800fc24 <tcp_input+0x2b8>)
 800fb70:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	891a      	ldrh	r2, [r3, #8]
 800fb76:	4b2b      	ldr	r3, [pc, #172]	@ (800fc24 <tcp_input+0x2b8>)
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	f200 82e6 	bhi.w	801014c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fb80:	2300      	movs	r3, #0
 800fb82:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb84:	4b28      	ldr	r3, [pc, #160]	@ (800fc28 <tcp_input+0x2bc>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	61bb      	str	r3, [r7, #24]
 800fb8a:	e09d      	b.n	800fcc8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	7d1b      	ldrb	r3, [r3, #20]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d105      	bne.n	800fba0 <tcp_input+0x234>
 800fb94:	4b15      	ldr	r3, [pc, #84]	@ (800fbec <tcp_input+0x280>)
 800fb96:	22fb      	movs	r2, #251	@ 0xfb
 800fb98:	4924      	ldr	r1, [pc, #144]	@ (800fc2c <tcp_input+0x2c0>)
 800fb9a:	4816      	ldr	r0, [pc, #88]	@ (800fbf4 <tcp_input+0x288>)
 800fb9c:	f007 fea8 	bl	80178f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	7d1b      	ldrb	r3, [r3, #20]
 800fba4:	2b0a      	cmp	r3, #10
 800fba6:	d105      	bne.n	800fbb4 <tcp_input+0x248>
 800fba8:	4b10      	ldr	r3, [pc, #64]	@ (800fbec <tcp_input+0x280>)
 800fbaa:	22fc      	movs	r2, #252	@ 0xfc
 800fbac:	4920      	ldr	r1, [pc, #128]	@ (800fc30 <tcp_input+0x2c4>)
 800fbae:	4811      	ldr	r0, [pc, #68]	@ (800fbf4 <tcp_input+0x288>)
 800fbb0:	f007 fe9e 	bl	80178f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	7d1b      	ldrb	r3, [r3, #20]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d105      	bne.n	800fbc8 <tcp_input+0x25c>
 800fbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800fbec <tcp_input+0x280>)
 800fbbe:	22fd      	movs	r2, #253	@ 0xfd
 800fbc0:	491c      	ldr	r1, [pc, #112]	@ (800fc34 <tcp_input+0x2c8>)
 800fbc2:	480c      	ldr	r0, [pc, #48]	@ (800fbf4 <tcp_input+0x288>)
 800fbc4:	f007 fe94 	bl	80178f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	7a1b      	ldrb	r3, [r3, #8]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d033      	beq.n	800fc38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	7a1a      	ldrb	r2, [r3, #8]
 800fbd4:	4b09      	ldr	r3, [pc, #36]	@ (800fbfc <tcp_input+0x290>)
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbdc:	3301      	adds	r3, #1
 800fbde:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d029      	beq.n	800fc38 <tcp_input+0x2cc>
      prev = pcb;
 800fbe4:	69bb      	ldr	r3, [r7, #24]
 800fbe6:	61fb      	str	r3, [r7, #28]
      continue;
 800fbe8:	e06b      	b.n	800fcc2 <tcp_input+0x356>
 800fbea:	bf00      	nop
 800fbec:	08019de8 	.word	0x08019de8
 800fbf0:	08019e1c 	.word	0x08019e1c
 800fbf4:	08019e34 	.word	0x08019e34
 800fbf8:	20008528 	.word	0x20008528
 800fbfc:	200055a0 	.word	0x200055a0
 800fc00:	2000852c 	.word	0x2000852c
 800fc04:	20008530 	.word	0x20008530
 800fc08:	2000852e 	.word	0x2000852e
 800fc0c:	08019e5c 	.word	0x08019e5c
 800fc10:	08019e6c 	.word	0x08019e6c
 800fc14:	08019e78 	.word	0x08019e78
 800fc18:	20008538 	.word	0x20008538
 800fc1c:	2000853c 	.word	0x2000853c
 800fc20:	20008544 	.word	0x20008544
 800fc24:	20008542 	.word	0x20008542
 800fc28:	20008508 	.word	0x20008508
 800fc2c:	08019e98 	.word	0x08019e98
 800fc30:	08019ec0 	.word	0x08019ec0
 800fc34:	08019eec 	.word	0x08019eec
    }

    if (pcb->remote_port == tcphdr->src &&
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	8b1a      	ldrh	r2, [r3, #24]
 800fc3c:	4b72      	ldr	r3, [pc, #456]	@ (800fe08 <tcp_input+0x49c>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d13a      	bne.n	800fcbe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	8ada      	ldrh	r2, [r3, #22]
 800fc4c:	4b6e      	ldr	r3, [pc, #440]	@ (800fe08 <tcp_input+0x49c>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	885b      	ldrh	r3, [r3, #2]
 800fc52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d132      	bne.n	800fcbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	685a      	ldr	r2, [r3, #4]
 800fc5c:	4b6b      	ldr	r3, [pc, #428]	@ (800fe0c <tcp_input+0x4a0>)
 800fc5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d12c      	bne.n	800fcbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc64:	69bb      	ldr	r3, [r7, #24]
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	4b68      	ldr	r3, [pc, #416]	@ (800fe0c <tcp_input+0x4a0>)
 800fc6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d126      	bne.n	800fcbe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	69ba      	ldr	r2, [r7, #24]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d106      	bne.n	800fc88 <tcp_input+0x31c>
 800fc7a:	4b65      	ldr	r3, [pc, #404]	@ (800fe10 <tcp_input+0x4a4>)
 800fc7c:	f240 120d 	movw	r2, #269	@ 0x10d
 800fc80:	4964      	ldr	r1, [pc, #400]	@ (800fe14 <tcp_input+0x4a8>)
 800fc82:	4865      	ldr	r0, [pc, #404]	@ (800fe18 <tcp_input+0x4ac>)
 800fc84:	f007 fe34 	bl	80178f0 <iprintf>
      if (prev != NULL) {
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00a      	beq.n	800fca4 <tcp_input+0x338>
        prev->next = pcb->next;
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	68da      	ldr	r2, [r3, #12]
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fc96:	4b61      	ldr	r3, [pc, #388]	@ (800fe1c <tcp_input+0x4b0>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fc9e:	4a5f      	ldr	r2, [pc, #380]	@ (800fe1c <tcp_input+0x4b0>)
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	69ba      	ldr	r2, [r7, #24]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d111      	bne.n	800fcd2 <tcp_input+0x366>
 800fcae:	4b58      	ldr	r3, [pc, #352]	@ (800fe10 <tcp_input+0x4a4>)
 800fcb0:	f240 1215 	movw	r2, #277	@ 0x115
 800fcb4:	495a      	ldr	r1, [pc, #360]	@ (800fe20 <tcp_input+0x4b4>)
 800fcb6:	4858      	ldr	r0, [pc, #352]	@ (800fe18 <tcp_input+0x4ac>)
 800fcb8:	f007 fe1a 	bl	80178f0 <iprintf>
      break;
 800fcbc:	e009      	b.n	800fcd2 <tcp_input+0x366>
    }
    prev = pcb;
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	61bb      	str	r3, [r7, #24]
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f47f af5e 	bne.w	800fb8c <tcp_input+0x220>
 800fcd0:	e000      	b.n	800fcd4 <tcp_input+0x368>
      break;
 800fcd2:	bf00      	nop
  }

  if (pcb == NULL) {
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f040 80aa 	bne.w	800fe30 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcdc:	4b51      	ldr	r3, [pc, #324]	@ (800fe24 <tcp_input+0x4b8>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	61bb      	str	r3, [r7, #24]
 800fce2:	e03f      	b.n	800fd64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	7d1b      	ldrb	r3, [r3, #20]
 800fce8:	2b0a      	cmp	r3, #10
 800fcea:	d006      	beq.n	800fcfa <tcp_input+0x38e>
 800fcec:	4b48      	ldr	r3, [pc, #288]	@ (800fe10 <tcp_input+0x4a4>)
 800fcee:	f240 121f 	movw	r2, #287	@ 0x11f
 800fcf2:	494d      	ldr	r1, [pc, #308]	@ (800fe28 <tcp_input+0x4bc>)
 800fcf4:	4848      	ldr	r0, [pc, #288]	@ (800fe18 <tcp_input+0x4ac>)
 800fcf6:	f007 fdfb 	bl	80178f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	7a1b      	ldrb	r3, [r3, #8]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d009      	beq.n	800fd16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd02:	69bb      	ldr	r3, [r7, #24]
 800fd04:	7a1a      	ldrb	r2, [r3, #8]
 800fd06:	4b41      	ldr	r3, [pc, #260]	@ (800fe0c <tcp_input+0x4a0>)
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd0e:	3301      	adds	r3, #1
 800fd10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d122      	bne.n	800fd5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	8b1a      	ldrh	r2, [r3, #24]
 800fd1a:	4b3b      	ldr	r3, [pc, #236]	@ (800fe08 <tcp_input+0x49c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d11b      	bne.n	800fd5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	8ada      	ldrh	r2, [r3, #22]
 800fd2a:	4b37      	ldr	r3, [pc, #220]	@ (800fe08 <tcp_input+0x49c>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	885b      	ldrh	r3, [r3, #2]
 800fd30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d113      	bne.n	800fd5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	685a      	ldr	r2, [r3, #4]
 800fd3a:	4b34      	ldr	r3, [pc, #208]	@ (800fe0c <tcp_input+0x4a0>)
 800fd3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d10d      	bne.n	800fd5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	4b31      	ldr	r3, [pc, #196]	@ (800fe0c <tcp_input+0x4a0>)
 800fd48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d107      	bne.n	800fd5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fd4e:	69b8      	ldr	r0, [r7, #24]
 800fd50:	f000 fb56 	bl	8010400 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7fd ffc9 	bl	800dcec <pbuf_free>
        return;
 800fd5a:	e1fd      	b.n	8010158 <tcp_input+0x7ec>
        continue;
 800fd5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd5e:	69bb      	ldr	r3, [r7, #24]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	61bb      	str	r3, [r7, #24]
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1bc      	bne.n	800fce4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd6e:	4b2f      	ldr	r3, [pc, #188]	@ (800fe2c <tcp_input+0x4c0>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	617b      	str	r3, [r7, #20]
 800fd74:	e02a      	b.n	800fdcc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	7a1b      	ldrb	r3, [r3, #8]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00c      	beq.n	800fd98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	7a1a      	ldrb	r2, [r3, #8]
 800fd82:	4b22      	ldr	r3, [pc, #136]	@ (800fe0c <tcp_input+0x4a0>)
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d002      	beq.n	800fd98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	61fb      	str	r3, [r7, #28]
        continue;
 800fd96:	e016      	b.n	800fdc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	8ada      	ldrh	r2, [r3, #22]
 800fd9c:	4b1a      	ldr	r3, [pc, #104]	@ (800fe08 <tcp_input+0x49c>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	885b      	ldrh	r3, [r3, #2]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d10c      	bne.n	800fdc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	4b17      	ldr	r3, [pc, #92]	@ (800fe0c <tcp_input+0x4a0>)
 800fdae:	695b      	ldr	r3, [r3, #20]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d00f      	beq.n	800fdd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00d      	beq.n	800fdd6 <tcp_input+0x46a>
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d009      	beq.n	800fdd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	68db      	ldr	r3, [r3, #12]
 800fdca:	617b      	str	r3, [r7, #20]
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1d1      	bne.n	800fd76 <tcp_input+0x40a>
 800fdd2:	e000      	b.n	800fdd6 <tcp_input+0x46a>
            break;
 800fdd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d029      	beq.n	800fe30 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00a      	beq.n	800fdf8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	68da      	ldr	r2, [r3, #12]
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fdea:	4b10      	ldr	r3, [pc, #64]	@ (800fe2c <tcp_input+0x4c0>)
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fdf2:	4a0e      	ldr	r2, [pc, #56]	@ (800fe2c <tcp_input+0x4c0>)
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fdf8:	6978      	ldr	r0, [r7, #20]
 800fdfa:	f000 fa03 	bl	8010204 <tcp_listen_input>
      }
      pbuf_free(p);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f7fd ff74 	bl	800dcec <pbuf_free>
      return;
 800fe04:	e1a8      	b.n	8010158 <tcp_input+0x7ec>
 800fe06:	bf00      	nop
 800fe08:	20008528 	.word	0x20008528
 800fe0c:	200055a0 	.word	0x200055a0
 800fe10:	08019de8 	.word	0x08019de8
 800fe14:	08019f14 	.word	0x08019f14
 800fe18:	08019e34 	.word	0x08019e34
 800fe1c:	20008508 	.word	0x20008508
 800fe20:	08019f40 	.word	0x08019f40
 800fe24:	2000850c 	.word	0x2000850c
 800fe28:	08019f6c 	.word	0x08019f6c
 800fe2c:	20008504 	.word	0x20008504
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f000 8158 	beq.w	80100e8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fe38:	4b95      	ldr	r3, [pc, #596]	@ (8010090 <tcp_input+0x724>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	891a      	ldrh	r2, [r3, #8]
 800fe42:	4b93      	ldr	r3, [pc, #588]	@ (8010090 <tcp_input+0x724>)
 800fe44:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fe46:	4a92      	ldr	r2, [pc, #584]	@ (8010090 <tcp_input+0x724>)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fe4c:	4b91      	ldr	r3, [pc, #580]	@ (8010094 <tcp_input+0x728>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a8f      	ldr	r2, [pc, #572]	@ (8010090 <tcp_input+0x724>)
 800fe52:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800fe54:	4b90      	ldr	r3, [pc, #576]	@ (8010098 <tcp_input+0x72c>)
 800fe56:	2200      	movs	r2, #0
 800fe58:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fe5a:	4b90      	ldr	r3, [pc, #576]	@ (801009c <tcp_input+0x730>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fe60:	4b8f      	ldr	r3, [pc, #572]	@ (80100a0 <tcp_input+0x734>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fe66:	4b8f      	ldr	r3, [pc, #572]	@ (80100a4 <tcp_input+0x738>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	f003 0308 	and.w	r3, r3, #8
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d006      	beq.n	800fe80 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	7b5b      	ldrb	r3, [r3, #13]
 800fe76:	f043 0301 	orr.w	r3, r3, #1
 800fe7a:	b2da      	uxtb	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d017      	beq.n	800feb8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe88:	69b8      	ldr	r0, [r7, #24]
 800fe8a:	f7ff f923 	bl	800f0d4 <tcp_process_refused_data>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	f113 0f0d 	cmn.w	r3, #13
 800fe94:	d007      	beq.n	800fea6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00c      	beq.n	800feb8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe9e:	4b82      	ldr	r3, [pc, #520]	@ (80100a8 <tcp_input+0x73c>)
 800fea0:	881b      	ldrh	r3, [r3, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d008      	beq.n	800feb8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f040 80e3 	bne.w	8010076 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800feb0:	69b8      	ldr	r0, [r7, #24]
 800feb2:	f003 f9bb 	bl	801322c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800feb6:	e0de      	b.n	8010076 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800feb8:	4a7c      	ldr	r2, [pc, #496]	@ (80100ac <tcp_input+0x740>)
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800febe:	69b8      	ldr	r0, [r7, #24]
 800fec0:	f000 fb18 	bl	80104f4 <tcp_process>
 800fec4:	4603      	mov	r3, r0
 800fec6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fecc:	f113 0f0d 	cmn.w	r3, #13
 800fed0:	f000 80d3 	beq.w	801007a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fed4:	4b71      	ldr	r3, [pc, #452]	@ (801009c <tcp_input+0x730>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	f003 0308 	and.w	r3, r3, #8
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d015      	beq.n	800ff0c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d008      	beq.n	800fefc <tcp_input+0x590>
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fef0:	69ba      	ldr	r2, [r7, #24]
 800fef2:	6912      	ldr	r2, [r2, #16]
 800fef4:	f06f 010d 	mvn.w	r1, #13
 800fef8:	4610      	mov	r0, r2
 800fefa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fefc:	69b9      	ldr	r1, [r7, #24]
 800fefe:	486c      	ldr	r0, [pc, #432]	@ (80100b0 <tcp_input+0x744>)
 800ff00:	f7ff fbb6 	bl	800f670 <tcp_pcb_remove>
        tcp_free(pcb);
 800ff04:	69b8      	ldr	r0, [r7, #24]
 800ff06:	f7fe f9a1 	bl	800e24c <tcp_free>
 800ff0a:	e0da      	b.n	80100c2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ff10:	4b63      	ldr	r3, [pc, #396]	@ (80100a0 <tcp_input+0x734>)
 800ff12:	881b      	ldrh	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d01d      	beq.n	800ff54 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ff18:	4b61      	ldr	r3, [pc, #388]	@ (80100a0 <tcp_input+0x734>)
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00a      	beq.n	800ff3e <tcp_input+0x5d2>
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff2e:	69ba      	ldr	r2, [r7, #24]
 800ff30:	6910      	ldr	r0, [r2, #16]
 800ff32:	89fa      	ldrh	r2, [r7, #14]
 800ff34:	69b9      	ldr	r1, [r7, #24]
 800ff36:	4798      	blx	r3
 800ff38:	4603      	mov	r3, r0
 800ff3a:	74fb      	strb	r3, [r7, #19]
 800ff3c:	e001      	b.n	800ff42 <tcp_input+0x5d6>
 800ff3e:	2300      	movs	r3, #0
 800ff40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ff42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff46:	f113 0f0d 	cmn.w	r3, #13
 800ff4a:	f000 8098 	beq.w	801007e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ff4e:	4b54      	ldr	r3, [pc, #336]	@ (80100a0 <tcp_input+0x734>)
 800ff50:	2200      	movs	r2, #0
 800ff52:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ff54:	69b8      	ldr	r0, [r7, #24]
 800ff56:	f000 f915 	bl	8010184 <tcp_input_delayed_close>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f040 8090 	bne.w	8010082 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ff62:	4b4d      	ldr	r3, [pc, #308]	@ (8010098 <tcp_input+0x72c>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d041      	beq.n	800ffee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ff6a:	69bb      	ldr	r3, [r7, #24]
 800ff6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d006      	beq.n	800ff80 <tcp_input+0x614>
 800ff72:	4b50      	ldr	r3, [pc, #320]	@ (80100b4 <tcp_input+0x748>)
 800ff74:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ff78:	494f      	ldr	r1, [pc, #316]	@ (80100b8 <tcp_input+0x74c>)
 800ff7a:	4850      	ldr	r0, [pc, #320]	@ (80100bc <tcp_input+0x750>)
 800ff7c:	f007 fcb8 	bl	80178f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	8b5b      	ldrh	r3, [r3, #26]
 800ff84:	f003 0310 	and.w	r3, r3, #16
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d008      	beq.n	800ff9e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ff8c:	4b42      	ldr	r3, [pc, #264]	@ (8010098 <tcp_input+0x72c>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fd feab 	bl	800dcec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ff96:	69b8      	ldr	r0, [r7, #24]
 800ff98:	f7fe fc40 	bl	800e81c <tcp_abort>
            goto aborted;
 800ff9c:	e091      	b.n	80100c2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00c      	beq.n	800ffc2 <tcp_input+0x656>
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	6918      	ldr	r0, [r3, #16]
 800ffb2:	4b39      	ldr	r3, [pc, #228]	@ (8010098 <tcp_input+0x72c>)
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	69b9      	ldr	r1, [r7, #24]
 800ffba:	47a0      	blx	r4
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	74fb      	strb	r3, [r7, #19]
 800ffc0:	e008      	b.n	800ffd4 <tcp_input+0x668>
 800ffc2:	4b35      	ldr	r3, [pc, #212]	@ (8010098 <tcp_input+0x72c>)
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	69b9      	ldr	r1, [r7, #24]
 800ffca:	2000      	movs	r0, #0
 800ffcc:	f7ff f958 	bl	800f280 <tcp_recv_null>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ffd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffd8:	f113 0f0d 	cmn.w	r3, #13
 800ffdc:	d053      	beq.n	8010086 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ffde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d003      	beq.n	800ffee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ffe6:	4b2c      	ldr	r3, [pc, #176]	@ (8010098 <tcp_input+0x72c>)
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ffee:	4b2b      	ldr	r3, [pc, #172]	@ (801009c <tcp_input+0x730>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	f003 0320 	and.w	r3, r3, #32
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d030      	beq.n	801005c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d009      	beq.n	8010016 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010006:	7b5a      	ldrb	r2, [r3, #13]
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801000c:	f042 0220 	orr.w	r2, r2, #32
 8010010:	b2d2      	uxtb	r2, r2
 8010012:	735a      	strb	r2, [r3, #13]
 8010014:	e022      	b.n	801005c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801001a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801001e:	d005      	beq.n	801002c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010024:	3301      	adds	r3, #1
 8010026:	b29a      	uxth	r2, r3
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00b      	beq.n	801004e <tcp_input+0x6e2>
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	6918      	ldr	r0, [r3, #16]
 8010040:	2300      	movs	r3, #0
 8010042:	2200      	movs	r2, #0
 8010044:	69b9      	ldr	r1, [r7, #24]
 8010046:	47a0      	blx	r4
 8010048:	4603      	mov	r3, r0
 801004a:	74fb      	strb	r3, [r7, #19]
 801004c:	e001      	b.n	8010052 <tcp_input+0x6e6>
 801004e:	2300      	movs	r3, #0
 8010050:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010052:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010056:	f113 0f0d 	cmn.w	r3, #13
 801005a:	d016      	beq.n	801008a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801005c:	4b13      	ldr	r3, [pc, #76]	@ (80100ac <tcp_input+0x740>)
 801005e:	2200      	movs	r2, #0
 8010060:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010062:	69b8      	ldr	r0, [r7, #24]
 8010064:	f000 f88e 	bl	8010184 <tcp_input_delayed_close>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d128      	bne.n	80100c0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801006e:	69b8      	ldr	r0, [r7, #24]
 8010070:	f002 faca 	bl	8012608 <tcp_output>
 8010074:	e025      	b.n	80100c2 <tcp_input+0x756>
        goto aborted;
 8010076:	bf00      	nop
 8010078:	e023      	b.n	80100c2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801007a:	bf00      	nop
 801007c:	e021      	b.n	80100c2 <tcp_input+0x756>
              goto aborted;
 801007e:	bf00      	nop
 8010080:	e01f      	b.n	80100c2 <tcp_input+0x756>
          goto aborted;
 8010082:	bf00      	nop
 8010084:	e01d      	b.n	80100c2 <tcp_input+0x756>
            goto aborted;
 8010086:	bf00      	nop
 8010088:	e01b      	b.n	80100c2 <tcp_input+0x756>
              goto aborted;
 801008a:	bf00      	nop
 801008c:	e019      	b.n	80100c2 <tcp_input+0x756>
 801008e:	bf00      	nop
 8010090:	20008514 	.word	0x20008514
 8010094:	20008528 	.word	0x20008528
 8010098:	20008548 	.word	0x20008548
 801009c:	20008545 	.word	0x20008545
 80100a0:	20008540 	.word	0x20008540
 80100a4:	20008544 	.word	0x20008544
 80100a8:	20008542 	.word	0x20008542
 80100ac:	2000854c 	.word	0x2000854c
 80100b0:	20008508 	.word	0x20008508
 80100b4:	08019de8 	.word	0x08019de8
 80100b8:	08019f9c 	.word	0x08019f9c
 80100bc:	08019e34 	.word	0x08019e34
          goto aborted;
 80100c0:	bf00      	nop
    tcp_input_pcb = NULL;
 80100c2:	4b27      	ldr	r3, [pc, #156]	@ (8010160 <tcp_input+0x7f4>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80100c8:	4b26      	ldr	r3, [pc, #152]	@ (8010164 <tcp_input+0x7f8>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80100ce:	4b26      	ldr	r3, [pc, #152]	@ (8010168 <tcp_input+0x7fc>)
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d03f      	beq.n	8010156 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80100d6:	4b24      	ldr	r3, [pc, #144]	@ (8010168 <tcp_input+0x7fc>)
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7fd fe06 	bl	800dcec <pbuf_free>
      inseg.p = NULL;
 80100e0:	4b21      	ldr	r3, [pc, #132]	@ (8010168 <tcp_input+0x7fc>)
 80100e2:	2200      	movs	r2, #0
 80100e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80100e6:	e036      	b.n	8010156 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80100e8:	4b20      	ldr	r3, [pc, #128]	@ (801016c <tcp_input+0x800>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fc f9ab 	bl	800c44c <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	f003 0304 	and.w	r3, r3, #4
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d118      	bne.n	8010134 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010102:	4b1b      	ldr	r3, [pc, #108]	@ (8010170 <tcp_input+0x804>)
 8010104:	6819      	ldr	r1, [r3, #0]
 8010106:	4b1b      	ldr	r3, [pc, #108]	@ (8010174 <tcp_input+0x808>)
 8010108:	881b      	ldrh	r3, [r3, #0]
 801010a:	461a      	mov	r2, r3
 801010c:	4b1a      	ldr	r3, [pc, #104]	@ (8010178 <tcp_input+0x80c>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010112:	4b16      	ldr	r3, [pc, #88]	@ (801016c <tcp_input+0x800>)
 8010114:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010116:	885b      	ldrh	r3, [r3, #2]
 8010118:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801011a:	4a14      	ldr	r2, [pc, #80]	@ (801016c <tcp_input+0x800>)
 801011c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801011e:	8812      	ldrh	r2, [r2, #0]
 8010120:	b292      	uxth	r2, r2
 8010122:	9202      	str	r2, [sp, #8]
 8010124:	9301      	str	r3, [sp, #4]
 8010126:	4b15      	ldr	r3, [pc, #84]	@ (801017c <tcp_input+0x810>)
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	4b15      	ldr	r3, [pc, #84]	@ (8010180 <tcp_input+0x814>)
 801012c:	4602      	mov	r2, r0
 801012e:	2000      	movs	r0, #0
 8010130:	f003 f82a 	bl	8013188 <tcp_rst>
    pbuf_free(p);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7fd fdd9 	bl	800dcec <pbuf_free>
  return;
 801013a:	e00c      	b.n	8010156 <tcp_input+0x7ea>
    goto dropped;
 801013c:	bf00      	nop
 801013e:	e006      	b.n	801014e <tcp_input+0x7e2>
    goto dropped;
 8010140:	bf00      	nop
 8010142:	e004      	b.n	801014e <tcp_input+0x7e2>
    goto dropped;
 8010144:	bf00      	nop
 8010146:	e002      	b.n	801014e <tcp_input+0x7e2>
      goto dropped;
 8010148:	bf00      	nop
 801014a:	e000      	b.n	801014e <tcp_input+0x7e2>
      goto dropped;
 801014c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7fd fdcc 	bl	800dcec <pbuf_free>
 8010154:	e000      	b.n	8010158 <tcp_input+0x7ec>
  return;
 8010156:	bf00      	nop
}
 8010158:	3724      	adds	r7, #36	@ 0x24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd90      	pop	{r4, r7, pc}
 801015e:	bf00      	nop
 8010160:	2000854c 	.word	0x2000854c
 8010164:	20008548 	.word	0x20008548
 8010168:	20008514 	.word	0x20008514
 801016c:	20008528 	.word	0x20008528
 8010170:	2000853c 	.word	0x2000853c
 8010174:	20008542 	.word	0x20008542
 8010178:	20008538 	.word	0x20008538
 801017c:	200055b0 	.word	0x200055b0
 8010180:	200055b4 	.word	0x200055b4

08010184 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d106      	bne.n	80101a0 <tcp_input_delayed_close+0x1c>
 8010192:	4b17      	ldr	r3, [pc, #92]	@ (80101f0 <tcp_input_delayed_close+0x6c>)
 8010194:	f240 225a 	movw	r2, #602	@ 0x25a
 8010198:	4916      	ldr	r1, [pc, #88]	@ (80101f4 <tcp_input_delayed_close+0x70>)
 801019a:	4817      	ldr	r0, [pc, #92]	@ (80101f8 <tcp_input_delayed_close+0x74>)
 801019c:	f007 fba8 	bl	80178f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80101a0:	4b16      	ldr	r3, [pc, #88]	@ (80101fc <tcp_input_delayed_close+0x78>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 0310 	and.w	r3, r3, #16
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01c      	beq.n	80101e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	8b5b      	ldrh	r3, [r3, #26]
 80101b0:	f003 0310 	and.w	r3, r3, #16
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10d      	bne.n	80101d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d008      	beq.n	80101d4 <tcp_input_delayed_close+0x50>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	6912      	ldr	r2, [r2, #16]
 80101cc:	f06f 010e 	mvn.w	r1, #14
 80101d0:	4610      	mov	r0, r2
 80101d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80101d4:	6879      	ldr	r1, [r7, #4]
 80101d6:	480a      	ldr	r0, [pc, #40]	@ (8010200 <tcp_input_delayed_close+0x7c>)
 80101d8:	f7ff fa4a 	bl	800f670 <tcp_pcb_remove>
    tcp_free(pcb);
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7fe f835 	bl	800e24c <tcp_free>
    return 1;
 80101e2:	2301      	movs	r3, #1
 80101e4:	e000      	b.n	80101e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80101e6:	2300      	movs	r3, #0
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	08019de8 	.word	0x08019de8
 80101f4:	08019fb8 	.word	0x08019fb8
 80101f8:	08019e34 	.word	0x08019e34
 80101fc:	20008545 	.word	0x20008545
 8010200:	20008508 	.word	0x20008508

08010204 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010204:	b590      	push	{r4, r7, lr}
 8010206:	b08b      	sub	sp, #44	@ 0x2c
 8010208:	af04      	add	r7, sp, #16
 801020a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801020c:	4b6f      	ldr	r3, [pc, #444]	@ (80103cc <tcp_listen_input+0x1c8>)
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 0304 	and.w	r3, r3, #4
 8010214:	2b00      	cmp	r3, #0
 8010216:	f040 80d2 	bne.w	80103be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d106      	bne.n	801022e <tcp_listen_input+0x2a>
 8010220:	4b6b      	ldr	r3, [pc, #428]	@ (80103d0 <tcp_listen_input+0x1cc>)
 8010222:	f240 2281 	movw	r2, #641	@ 0x281
 8010226:	496b      	ldr	r1, [pc, #428]	@ (80103d4 <tcp_listen_input+0x1d0>)
 8010228:	486b      	ldr	r0, [pc, #428]	@ (80103d8 <tcp_listen_input+0x1d4>)
 801022a:	f007 fb61 	bl	80178f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801022e:	4b67      	ldr	r3, [pc, #412]	@ (80103cc <tcp_listen_input+0x1c8>)
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	f003 0310 	and.w	r3, r3, #16
 8010236:	2b00      	cmp	r3, #0
 8010238:	d019      	beq.n	801026e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801023a:	4b68      	ldr	r3, [pc, #416]	@ (80103dc <tcp_listen_input+0x1d8>)
 801023c:	6819      	ldr	r1, [r3, #0]
 801023e:	4b68      	ldr	r3, [pc, #416]	@ (80103e0 <tcp_listen_input+0x1dc>)
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	461a      	mov	r2, r3
 8010244:	4b67      	ldr	r3, [pc, #412]	@ (80103e4 <tcp_listen_input+0x1e0>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801024a:	4b67      	ldr	r3, [pc, #412]	@ (80103e8 <tcp_listen_input+0x1e4>)
 801024c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801024e:	885b      	ldrh	r3, [r3, #2]
 8010250:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010252:	4a65      	ldr	r2, [pc, #404]	@ (80103e8 <tcp_listen_input+0x1e4>)
 8010254:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010256:	8812      	ldrh	r2, [r2, #0]
 8010258:	b292      	uxth	r2, r2
 801025a:	9202      	str	r2, [sp, #8]
 801025c:	9301      	str	r3, [sp, #4]
 801025e:	4b63      	ldr	r3, [pc, #396]	@ (80103ec <tcp_listen_input+0x1e8>)
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	4b63      	ldr	r3, [pc, #396]	@ (80103f0 <tcp_listen_input+0x1ec>)
 8010264:	4602      	mov	r2, r0
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f002 ff8e 	bl	8013188 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801026c:	e0a9      	b.n	80103c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801026e:	4b57      	ldr	r3, [pc, #348]	@ (80103cc <tcp_listen_input+0x1c8>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	f003 0302 	and.w	r3, r3, #2
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 80a3 	beq.w	80103c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	7d5b      	ldrb	r3, [r3, #21]
 8010280:	4618      	mov	r0, r3
 8010282:	f7ff f921 	bl	800f4c8 <tcp_alloc>
 8010286:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d111      	bne.n	80102b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	699b      	ldr	r3, [r3, #24]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00a      	beq.n	80102ac <tcp_listen_input+0xa8>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	699b      	ldr	r3, [r3, #24]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	6910      	ldr	r0, [r2, #16]
 801029e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102a2:	2100      	movs	r1, #0
 80102a4:	4798      	blx	r3
 80102a6:	4603      	mov	r3, r0
 80102a8:	73bb      	strb	r3, [r7, #14]
      return;
 80102aa:	e08b      	b.n	80103c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80102ac:	23f0      	movs	r3, #240	@ 0xf0
 80102ae:	73bb      	strb	r3, [r7, #14]
      return;
 80102b0:	e088      	b.n	80103c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80102b2:	4b50      	ldr	r3, [pc, #320]	@ (80103f4 <tcp_listen_input+0x1f0>)
 80102b4:	695a      	ldr	r2, [r3, #20]
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80102ba:	4b4e      	ldr	r3, [pc, #312]	@ (80103f4 <tcp_listen_input+0x1f0>)
 80102bc:	691a      	ldr	r2, [r3, #16]
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	8ada      	ldrh	r2, [r3, #22]
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80102ca:	4b47      	ldr	r3, [pc, #284]	@ (80103e8 <tcp_listen_input+0x1e4>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	881b      	ldrh	r3, [r3, #0]
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	2203      	movs	r2, #3
 80102da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80102dc:	4b41      	ldr	r3, [pc, #260]	@ (80103e4 <tcp_listen_input+0x1e0>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	1c5a      	adds	r2, r3, #1
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80102ee:	6978      	ldr	r0, [r7, #20]
 80102f0:	f7ff fa52 	bl	800f798 <tcp_next_iss>
 80102f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	693a      	ldr	r2, [r7, #16]
 80102fa:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	693a      	ldr	r2, [r7, #16]
 8010300:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801030e:	4b35      	ldr	r3, [pc, #212]	@ (80103e4 <tcp_listen_input+0x1e0>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	1e5a      	subs	r2, r3, #1
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	691a      	ldr	r2, [r3, #16]
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	7a5b      	ldrb	r3, [r3, #9]
 801032a:	f003 030c 	and.w	r3, r3, #12
 801032e:	b2da      	uxtb	r2, r3
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	7a1a      	ldrb	r2, [r3, #8]
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801033c:	4b2e      	ldr	r3, [pc, #184]	@ (80103f8 <tcp_listen_input+0x1f4>)
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	60da      	str	r2, [r3, #12]
 8010344:	4a2c      	ldr	r2, [pc, #176]	@ (80103f8 <tcp_listen_input+0x1f4>)
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	6013      	str	r3, [r2, #0]
 801034a:	f003 f8df 	bl	801350c <tcp_timer_needed>
 801034e:	4b2b      	ldr	r3, [pc, #172]	@ (80103fc <tcp_listen_input+0x1f8>)
 8010350:	2201      	movs	r2, #1
 8010352:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010354:	6978      	ldr	r0, [r7, #20]
 8010356:	f001 fd8b 	bl	8011e70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801035a:	4b23      	ldr	r3, [pc, #140]	@ (80103e8 <tcp_listen_input+0x1e4>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	89db      	ldrh	r3, [r3, #14]
 8010360:	b29a      	uxth	r2, r3
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	3304      	adds	r3, #4
 801037c:	4618      	mov	r0, r3
 801037e:	f005 fa23 	bl	80157c8 <ip4_route>
 8010382:	4601      	mov	r1, r0
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	3304      	adds	r3, #4
 8010388:	461a      	mov	r2, r3
 801038a:	4620      	mov	r0, r4
 801038c:	f7ff fa2a 	bl	800f7e4 <tcp_eff_send_mss_netif>
 8010390:	4603      	mov	r3, r0
 8010392:	461a      	mov	r2, r3
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010398:	2112      	movs	r1, #18
 801039a:	6978      	ldr	r0, [r7, #20]
 801039c:	f002 f846 	bl	801242c <tcp_enqueue_flags>
 80103a0:	4603      	mov	r3, r0
 80103a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80103a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d004      	beq.n	80103b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80103ac:	2100      	movs	r1, #0
 80103ae:	6978      	ldr	r0, [r7, #20]
 80103b0:	f7fe f976 	bl	800e6a0 <tcp_abandon>
      return;
 80103b4:	e006      	b.n	80103c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80103b6:	6978      	ldr	r0, [r7, #20]
 80103b8:	f002 f926 	bl	8012608 <tcp_output>
  return;
 80103bc:	e001      	b.n	80103c2 <tcp_listen_input+0x1be>
    return;
 80103be:	bf00      	nop
 80103c0:	e000      	b.n	80103c4 <tcp_listen_input+0x1c0>
  return;
 80103c2:	bf00      	nop
}
 80103c4:	371c      	adds	r7, #28
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd90      	pop	{r4, r7, pc}
 80103ca:	bf00      	nop
 80103cc:	20008544 	.word	0x20008544
 80103d0:	08019de8 	.word	0x08019de8
 80103d4:	08019fe0 	.word	0x08019fe0
 80103d8:	08019e34 	.word	0x08019e34
 80103dc:	2000853c 	.word	0x2000853c
 80103e0:	20008542 	.word	0x20008542
 80103e4:	20008538 	.word	0x20008538
 80103e8:	20008528 	.word	0x20008528
 80103ec:	200055b0 	.word	0x200055b0
 80103f0:	200055b4 	.word	0x200055b4
 80103f4:	200055a0 	.word	0x200055a0
 80103f8:	20008508 	.word	0x20008508
 80103fc:	20008510 	.word	0x20008510

08010400 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b086      	sub	sp, #24
 8010404:	af04      	add	r7, sp, #16
 8010406:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010408:	4b2f      	ldr	r3, [pc, #188]	@ (80104c8 <tcp_timewait_input+0xc8>)
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	f003 0304 	and.w	r3, r3, #4
 8010410:	2b00      	cmp	r3, #0
 8010412:	d153      	bne.n	80104bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d106      	bne.n	8010428 <tcp_timewait_input+0x28>
 801041a:	4b2c      	ldr	r3, [pc, #176]	@ (80104cc <tcp_timewait_input+0xcc>)
 801041c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010420:	492b      	ldr	r1, [pc, #172]	@ (80104d0 <tcp_timewait_input+0xd0>)
 8010422:	482c      	ldr	r0, [pc, #176]	@ (80104d4 <tcp_timewait_input+0xd4>)
 8010424:	f007 fa64 	bl	80178f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010428:	4b27      	ldr	r3, [pc, #156]	@ (80104c8 <tcp_timewait_input+0xc8>)
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	f003 0302 	and.w	r3, r3, #2
 8010430:	2b00      	cmp	r3, #0
 8010432:	d02a      	beq.n	801048a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010434:	4b28      	ldr	r3, [pc, #160]	@ (80104d8 <tcp_timewait_input+0xd8>)
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	2b00      	cmp	r3, #0
 8010440:	db2d      	blt.n	801049e <tcp_timewait_input+0x9e>
 8010442:	4b25      	ldr	r3, [pc, #148]	@ (80104d8 <tcp_timewait_input+0xd8>)
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801044a:	6879      	ldr	r1, [r7, #4]
 801044c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801044e:	440b      	add	r3, r1
 8010450:	1ad3      	subs	r3, r2, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	dc23      	bgt.n	801049e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010456:	4b21      	ldr	r3, [pc, #132]	@ (80104dc <tcp_timewait_input+0xdc>)
 8010458:	6819      	ldr	r1, [r3, #0]
 801045a:	4b21      	ldr	r3, [pc, #132]	@ (80104e0 <tcp_timewait_input+0xe0>)
 801045c:	881b      	ldrh	r3, [r3, #0]
 801045e:	461a      	mov	r2, r3
 8010460:	4b1d      	ldr	r3, [pc, #116]	@ (80104d8 <tcp_timewait_input+0xd8>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010466:	4b1f      	ldr	r3, [pc, #124]	@ (80104e4 <tcp_timewait_input+0xe4>)
 8010468:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801046a:	885b      	ldrh	r3, [r3, #2]
 801046c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801046e:	4a1d      	ldr	r2, [pc, #116]	@ (80104e4 <tcp_timewait_input+0xe4>)
 8010470:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010472:	8812      	ldrh	r2, [r2, #0]
 8010474:	b292      	uxth	r2, r2
 8010476:	9202      	str	r2, [sp, #8]
 8010478:	9301      	str	r3, [sp, #4]
 801047a:	4b1b      	ldr	r3, [pc, #108]	@ (80104e8 <tcp_timewait_input+0xe8>)
 801047c:	9300      	str	r3, [sp, #0]
 801047e:	4b1b      	ldr	r3, [pc, #108]	@ (80104ec <tcp_timewait_input+0xec>)
 8010480:	4602      	mov	r2, r0
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f002 fe80 	bl	8013188 <tcp_rst>
      return;
 8010488:	e01b      	b.n	80104c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801048a:	4b0f      	ldr	r3, [pc, #60]	@ (80104c8 <tcp_timewait_input+0xc8>)
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	f003 0301 	and.w	r3, r3, #1
 8010492:	2b00      	cmp	r3, #0
 8010494:	d003      	beq.n	801049e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010496:	4b16      	ldr	r3, [pc, #88]	@ (80104f0 <tcp_timewait_input+0xf0>)
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801049e:	4b10      	ldr	r3, [pc, #64]	@ (80104e0 <tcp_timewait_input+0xe0>)
 80104a0:	881b      	ldrh	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00c      	beq.n	80104c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8b5b      	ldrh	r3, [r3, #26]
 80104aa:	f043 0302 	orr.w	r3, r3, #2
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f002 f8a7 	bl	8012608 <tcp_output>
  }
  return;
 80104ba:	e001      	b.n	80104c0 <tcp_timewait_input+0xc0>
    return;
 80104bc:	bf00      	nop
 80104be:	e000      	b.n	80104c2 <tcp_timewait_input+0xc2>
  return;
 80104c0:	bf00      	nop
}
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	20008544 	.word	0x20008544
 80104cc:	08019de8 	.word	0x08019de8
 80104d0:	0801a000 	.word	0x0801a000
 80104d4:	08019e34 	.word	0x08019e34
 80104d8:	20008538 	.word	0x20008538
 80104dc:	2000853c 	.word	0x2000853c
 80104e0:	20008542 	.word	0x20008542
 80104e4:	20008528 	.word	0x20008528
 80104e8:	200055b0 	.word	0x200055b0
 80104ec:	200055b4 	.word	0x200055b4
 80104f0:	200084fc 	.word	0x200084fc

080104f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80104f4:	b590      	push	{r4, r7, lr}
 80104f6:	b08d      	sub	sp, #52	@ 0x34
 80104f8:	af04      	add	r7, sp, #16
 80104fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80104fc:	2300      	movs	r3, #0
 80104fe:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8010500:	2300      	movs	r3, #0
 8010502:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d106      	bne.n	8010518 <tcp_process+0x24>
 801050a:	4b9d      	ldr	r3, [pc, #628]	@ (8010780 <tcp_process+0x28c>)
 801050c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010510:	499c      	ldr	r1, [pc, #624]	@ (8010784 <tcp_process+0x290>)
 8010512:	489d      	ldr	r0, [pc, #628]	@ (8010788 <tcp_process+0x294>)
 8010514:	f007 f9ec 	bl	80178f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010518:	4b9c      	ldr	r3, [pc, #624]	@ (801078c <tcp_process+0x298>)
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	f003 0304 	and.w	r3, r3, #4
 8010520:	2b00      	cmp	r3, #0
 8010522:	d04e      	beq.n	80105c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	7d1b      	ldrb	r3, [r3, #20]
 8010528:	2b02      	cmp	r3, #2
 801052a:	d108      	bne.n	801053e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010530:	4b97      	ldr	r3, [pc, #604]	@ (8010790 <tcp_process+0x29c>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	429a      	cmp	r2, r3
 8010536:	d123      	bne.n	8010580 <tcp_process+0x8c>
        acceptable = 1;
 8010538:	2301      	movs	r3, #1
 801053a:	77fb      	strb	r3, [r7, #31]
 801053c:	e020      	b.n	8010580 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010542:	4b94      	ldr	r3, [pc, #592]	@ (8010794 <tcp_process+0x2a0>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	429a      	cmp	r2, r3
 8010548:	d102      	bne.n	8010550 <tcp_process+0x5c>
        acceptable = 1;
 801054a:	2301      	movs	r3, #1
 801054c:	77fb      	strb	r3, [r7, #31]
 801054e:	e017      	b.n	8010580 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010550:	4b90      	ldr	r3, [pc, #576]	@ (8010794 <tcp_process+0x2a0>)
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	2b00      	cmp	r3, #0
 801055c:	db10      	blt.n	8010580 <tcp_process+0x8c>
 801055e:	4b8d      	ldr	r3, [pc, #564]	@ (8010794 <tcp_process+0x2a0>)
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010566:	6879      	ldr	r1, [r7, #4]
 8010568:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801056a:	440b      	add	r3, r1
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	2b00      	cmp	r3, #0
 8010570:	dc06      	bgt.n	8010580 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	8b5b      	ldrh	r3, [r3, #26]
 8010576:	f043 0302 	orr.w	r3, r3, #2
 801057a:	b29a      	uxth	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010580:	7ffb      	ldrb	r3, [r7, #31]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d01b      	beq.n	80105be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	7d1b      	ldrb	r3, [r3, #20]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d106      	bne.n	801059c <tcp_process+0xa8>
 801058e:	4b7c      	ldr	r3, [pc, #496]	@ (8010780 <tcp_process+0x28c>)
 8010590:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010594:	4980      	ldr	r1, [pc, #512]	@ (8010798 <tcp_process+0x2a4>)
 8010596:	487c      	ldr	r0, [pc, #496]	@ (8010788 <tcp_process+0x294>)
 8010598:	f007 f9aa 	bl	80178f0 <iprintf>
      recv_flags |= TF_RESET;
 801059c:	4b7f      	ldr	r3, [pc, #508]	@ (801079c <tcp_process+0x2a8>)
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	f043 0308 	orr.w	r3, r3, #8
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	4b7d      	ldr	r3, [pc, #500]	@ (801079c <tcp_process+0x2a8>)
 80105a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	8b5b      	ldrh	r3, [r3, #26]
 80105ae:	f023 0301 	bic.w	r3, r3, #1
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80105b8:	f06f 030d 	mvn.w	r3, #13
 80105bc:	e37a      	b.n	8010cb4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80105be:	2300      	movs	r3, #0
 80105c0:	e378      	b.n	8010cb4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80105c2:	4b72      	ldr	r3, [pc, #456]	@ (801078c <tcp_process+0x298>)
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	f003 0302 	and.w	r3, r3, #2
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d010      	beq.n	80105f0 <tcp_process+0xfc>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	7d1b      	ldrb	r3, [r3, #20]
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d00c      	beq.n	80105f0 <tcp_process+0xfc>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	7d1b      	ldrb	r3, [r3, #20]
 80105da:	2b03      	cmp	r3, #3
 80105dc:	d008      	beq.n	80105f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	8b5b      	ldrh	r3, [r3, #26]
 80105e2:	f043 0302 	orr.w	r3, r3, #2
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	e361      	b.n	8010cb4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	8b5b      	ldrh	r3, [r3, #26]
 80105f4:	f003 0310 	and.w	r3, r3, #16
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d103      	bne.n	8010604 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80105fc:	4b68      	ldr	r3, [pc, #416]	@ (80107a0 <tcp_process+0x2ac>)
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f001 fc2b 	bl	8011e70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	7d1b      	ldrb	r3, [r3, #20]
 801061e:	3b02      	subs	r3, #2
 8010620:	2b07      	cmp	r3, #7
 8010622:	f200 8337 	bhi.w	8010c94 <tcp_process+0x7a0>
 8010626:	a201      	add	r2, pc, #4	@ (adr r2, 801062c <tcp_process+0x138>)
 8010628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801062c:	0801064d 	.word	0x0801064d
 8010630:	0801087d 	.word	0x0801087d
 8010634:	080109f5 	.word	0x080109f5
 8010638:	08010a1f 	.word	0x08010a1f
 801063c:	08010b43 	.word	0x08010b43
 8010640:	080109f5 	.word	0x080109f5
 8010644:	08010bcf 	.word	0x08010bcf
 8010648:	08010c5f 	.word	0x08010c5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801064c:	4b4f      	ldr	r3, [pc, #316]	@ (801078c <tcp_process+0x298>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	f003 0310 	and.w	r3, r3, #16
 8010654:	2b00      	cmp	r3, #0
 8010656:	f000 80e4 	beq.w	8010822 <tcp_process+0x32e>
 801065a:	4b4c      	ldr	r3, [pc, #304]	@ (801078c <tcp_process+0x298>)
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	f003 0302 	and.w	r3, r3, #2
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 80dd 	beq.w	8010822 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	4b48      	ldr	r3, [pc, #288]	@ (8010790 <tcp_process+0x29c>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	429a      	cmp	r2, r3
 8010674:	f040 80d5 	bne.w	8010822 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010678:	4b46      	ldr	r3, [pc, #280]	@ (8010794 <tcp_process+0x2a0>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	1c5a      	adds	r2, r3, #1
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801068a:	4b41      	ldr	r3, [pc, #260]	@ (8010790 <tcp_process+0x29c>)
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010692:	4b44      	ldr	r3, [pc, #272]	@ (80107a4 <tcp_process+0x2b0>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	89db      	ldrh	r3, [r3, #14]
 8010698:	b29a      	uxth	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80106ac:	4b39      	ldr	r3, [pc, #228]	@ (8010794 <tcp_process+0x2a0>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	1e5a      	subs	r2, r3, #1
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2204      	movs	r2, #4
 80106ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	3304      	adds	r3, #4
 80106c4:	4618      	mov	r0, r3
 80106c6:	f005 f87f 	bl	80157c8 <ip4_route>
 80106ca:	4601      	mov	r1, r0
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	3304      	adds	r3, #4
 80106d0:	461a      	mov	r2, r3
 80106d2:	4620      	mov	r0, r4
 80106d4:	f7ff f886 	bl	800f7e4 <tcp_eff_send_mss_netif>
 80106d8:	4603      	mov	r3, r0
 80106da:	461a      	mov	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106e4:	009a      	lsls	r2, r3, #2
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106ea:	005b      	lsls	r3, r3, #1
 80106ec:	f241 111c 	movw	r1, #4380	@ 0x111c
 80106f0:	428b      	cmp	r3, r1
 80106f2:	bf38      	it	cc
 80106f4:	460b      	movcc	r3, r1
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d204      	bcs.n	8010704 <tcp_process+0x210>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106fe:	009b      	lsls	r3, r3, #2
 8010700:	b29b      	uxth	r3, r3
 8010702:	e00d      	b.n	8010720 <tcp_process+0x22c>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801070e:	4293      	cmp	r3, r2
 8010710:	d904      	bls.n	801071c <tcp_process+0x228>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010716:	005b      	lsls	r3, r3, #1
 8010718:	b29b      	uxth	r3, r3
 801071a:	e001      	b.n	8010720 <tcp_process+0x22c>
 801071c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801072c:	2b00      	cmp	r3, #0
 801072e:	d106      	bne.n	801073e <tcp_process+0x24a>
 8010730:	4b13      	ldr	r3, [pc, #76]	@ (8010780 <tcp_process+0x28c>)
 8010732:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010736:	491c      	ldr	r1, [pc, #112]	@ (80107a8 <tcp_process+0x2b4>)
 8010738:	4813      	ldr	r0, [pc, #76]	@ (8010788 <tcp_process+0x294>)
 801073a:	f007 f8d9 	bl	80178f0 <iprintf>
        --pcb->snd_queuelen;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010744:	3b01      	subs	r3, #1
 8010746:	b29a      	uxth	r2, r3
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010752:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d12a      	bne.n	80107b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801075e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <tcp_process+0x280>
 8010766:	4b06      	ldr	r3, [pc, #24]	@ (8010780 <tcp_process+0x28c>)
 8010768:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801076c:	490f      	ldr	r1, [pc, #60]	@ (80107ac <tcp_process+0x2b8>)
 801076e:	4806      	ldr	r0, [pc, #24]	@ (8010788 <tcp_process+0x294>)
 8010770:	f007 f8be 	bl	80178f0 <iprintf>
          pcb->unsent = rseg->next;
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801077c:	e01c      	b.n	80107b8 <tcp_process+0x2c4>
 801077e:	bf00      	nop
 8010780:	08019de8 	.word	0x08019de8
 8010784:	0801a020 	.word	0x0801a020
 8010788:	08019e34 	.word	0x08019e34
 801078c:	20008544 	.word	0x20008544
 8010790:	2000853c 	.word	0x2000853c
 8010794:	20008538 	.word	0x20008538
 8010798:	0801a03c 	.word	0x0801a03c
 801079c:	20008545 	.word	0x20008545
 80107a0:	200084fc 	.word	0x200084fc
 80107a4:	20008528 	.word	0x20008528
 80107a8:	0801a05c 	.word	0x0801a05c
 80107ac:	0801a074 	.word	0x0801a074
        } else {
          pcb->unacked = rseg->next;
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80107b8:	6978      	ldr	r0, [r7, #20]
 80107ba:	f7fe fd1c 	bl	800f1f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d104      	bne.n	80107d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80107cc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80107ce:	e006      	b.n	80107de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00a      	beq.n	80107fe <tcp_process+0x30a>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	6910      	ldr	r0, [r2, #16]
 80107f2:	2200      	movs	r2, #0
 80107f4:	6879      	ldr	r1, [r7, #4]
 80107f6:	4798      	blx	r3
 80107f8:	4603      	mov	r3, r0
 80107fa:	77bb      	strb	r3, [r7, #30]
 80107fc:	e001      	b.n	8010802 <tcp_process+0x30e>
 80107fe:	2300      	movs	r3, #0
 8010800:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8010802:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010806:	f113 0f0d 	cmn.w	r3, #13
 801080a:	d102      	bne.n	8010812 <tcp_process+0x31e>
          return ERR_ABRT;
 801080c:	f06f 030c 	mvn.w	r3, #12
 8010810:	e250      	b.n	8010cb4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	8b5b      	ldrh	r3, [r3, #26]
 8010816:	f043 0302 	orr.w	r3, r3, #2
 801081a:	b29a      	uxth	r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010820:	e23a      	b.n	8010c98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010822:	4b98      	ldr	r3, [pc, #608]	@ (8010a84 <tcp_process+0x590>)
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	f003 0310 	and.w	r3, r3, #16
 801082a:	2b00      	cmp	r3, #0
 801082c:	f000 8234 	beq.w	8010c98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010830:	4b95      	ldr	r3, [pc, #596]	@ (8010a88 <tcp_process+0x594>)
 8010832:	6819      	ldr	r1, [r3, #0]
 8010834:	4b95      	ldr	r3, [pc, #596]	@ (8010a8c <tcp_process+0x598>)
 8010836:	881b      	ldrh	r3, [r3, #0]
 8010838:	461a      	mov	r2, r3
 801083a:	4b95      	ldr	r3, [pc, #596]	@ (8010a90 <tcp_process+0x59c>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010840:	4b94      	ldr	r3, [pc, #592]	@ (8010a94 <tcp_process+0x5a0>)
 8010842:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010844:	885b      	ldrh	r3, [r3, #2]
 8010846:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010848:	4a92      	ldr	r2, [pc, #584]	@ (8010a94 <tcp_process+0x5a0>)
 801084a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801084c:	8812      	ldrh	r2, [r2, #0]
 801084e:	b292      	uxth	r2, r2
 8010850:	9202      	str	r2, [sp, #8]
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	4b90      	ldr	r3, [pc, #576]	@ (8010a98 <tcp_process+0x5a4>)
 8010856:	9300      	str	r3, [sp, #0]
 8010858:	4b90      	ldr	r3, [pc, #576]	@ (8010a9c <tcp_process+0x5a8>)
 801085a:	4602      	mov	r2, r0
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f002 fc93 	bl	8013188 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010868:	2b05      	cmp	r3, #5
 801086a:	f200 8215 	bhi.w	8010c98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f002 fa5f 	bl	8012d38 <tcp_rexmit_rto>
      break;
 801087a:	e20d      	b.n	8010c98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801087c:	4b81      	ldr	r3, [pc, #516]	@ (8010a84 <tcp_process+0x590>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	f003 0310 	and.w	r3, r3, #16
 8010884:	2b00      	cmp	r3, #0
 8010886:	f000 80a1 	beq.w	80109cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801088a:	4b7f      	ldr	r3, [pc, #508]	@ (8010a88 <tcp_process+0x594>)
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	3b01      	subs	r3, #1
 8010896:	2b00      	cmp	r3, #0
 8010898:	db7e      	blt.n	8010998 <tcp_process+0x4a4>
 801089a:	4b7b      	ldr	r3, [pc, #492]	@ (8010a88 <tcp_process+0x594>)
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dc77      	bgt.n	8010998 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2204      	movs	r2, #4
 80108ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d102      	bne.n	80108bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80108b6:	23fa      	movs	r3, #250	@ 0xfa
 80108b8:	77bb      	strb	r3, [r7, #30]
 80108ba:	e01d      	b.n	80108f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108c0:	699b      	ldr	r3, [r3, #24]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d106      	bne.n	80108d4 <tcp_process+0x3e0>
 80108c6:	4b76      	ldr	r3, [pc, #472]	@ (8010aa0 <tcp_process+0x5ac>)
 80108c8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80108cc:	4975      	ldr	r1, [pc, #468]	@ (8010aa4 <tcp_process+0x5b0>)
 80108ce:	4876      	ldr	r0, [pc, #472]	@ (8010aa8 <tcp_process+0x5b4>)
 80108d0:	f007 f80e 	bl	80178f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00a      	beq.n	80108f4 <tcp_process+0x400>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108e2:	699b      	ldr	r3, [r3, #24]
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	6910      	ldr	r0, [r2, #16]
 80108e8:	2200      	movs	r2, #0
 80108ea:	6879      	ldr	r1, [r7, #4]
 80108ec:	4798      	blx	r3
 80108ee:	4603      	mov	r3, r0
 80108f0:	77bb      	strb	r3, [r7, #30]
 80108f2:	e001      	b.n	80108f8 <tcp_process+0x404>
 80108f4:	23f0      	movs	r3, #240	@ 0xf0
 80108f6:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 80108f8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00a      	beq.n	8010916 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010900:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010904:	f113 0f0d 	cmn.w	r3, #13
 8010908:	d002      	beq.n	8010910 <tcp_process+0x41c>
              tcp_abort(pcb);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f7fd ff86 	bl	800e81c <tcp_abort>
            }
            return ERR_ABRT;
 8010910:	f06f 030c 	mvn.w	r3, #12
 8010914:	e1ce      	b.n	8010cb4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fae0 	bl	8010edc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801091c:	4b63      	ldr	r3, [pc, #396]	@ (8010aac <tcp_process+0x5b8>)
 801091e:	881b      	ldrh	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d005      	beq.n	8010930 <tcp_process+0x43c>
            recv_acked--;
 8010924:	4b61      	ldr	r3, [pc, #388]	@ (8010aac <tcp_process+0x5b8>)
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	3b01      	subs	r3, #1
 801092a:	b29a      	uxth	r2, r3
 801092c:	4b5f      	ldr	r3, [pc, #380]	@ (8010aac <tcp_process+0x5b8>)
 801092e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010934:	009a      	lsls	r2, r3, #2
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801093a:	005b      	lsls	r3, r3, #1
 801093c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010940:	428b      	cmp	r3, r1
 8010942:	bf38      	it	cc
 8010944:	460b      	movcc	r3, r1
 8010946:	429a      	cmp	r2, r3
 8010948:	d204      	bcs.n	8010954 <tcp_process+0x460>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	b29b      	uxth	r3, r3
 8010952:	e00d      	b.n	8010970 <tcp_process+0x47c>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801095e:	4293      	cmp	r3, r2
 8010960:	d904      	bls.n	801096c <tcp_process+0x478>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010966:	005b      	lsls	r3, r3, #1
 8010968:	b29b      	uxth	r3, r3
 801096a:	e001      	b.n	8010970 <tcp_process+0x47c>
 801096c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010976:	4b4e      	ldr	r3, [pc, #312]	@ (8010ab0 <tcp_process+0x5bc>)
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	f003 0320 	and.w	r3, r3, #32
 801097e:	2b00      	cmp	r3, #0
 8010980:	d037      	beq.n	80109f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	8b5b      	ldrh	r3, [r3, #26]
 8010986:	f043 0302 	orr.w	r3, r3, #2
 801098a:	b29a      	uxth	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2207      	movs	r2, #7
 8010994:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010996:	e02c      	b.n	80109f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010998:	4b3b      	ldr	r3, [pc, #236]	@ (8010a88 <tcp_process+0x594>)
 801099a:	6819      	ldr	r1, [r3, #0]
 801099c:	4b3b      	ldr	r3, [pc, #236]	@ (8010a8c <tcp_process+0x598>)
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	461a      	mov	r2, r3
 80109a2:	4b3b      	ldr	r3, [pc, #236]	@ (8010a90 <tcp_process+0x59c>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109a8:	4b3a      	ldr	r3, [pc, #232]	@ (8010a94 <tcp_process+0x5a0>)
 80109aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109ac:	885b      	ldrh	r3, [r3, #2]
 80109ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109b0:	4a38      	ldr	r2, [pc, #224]	@ (8010a94 <tcp_process+0x5a0>)
 80109b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109b4:	8812      	ldrh	r2, [r2, #0]
 80109b6:	b292      	uxth	r2, r2
 80109b8:	9202      	str	r2, [sp, #8]
 80109ba:	9301      	str	r3, [sp, #4]
 80109bc:	4b36      	ldr	r3, [pc, #216]	@ (8010a98 <tcp_process+0x5a4>)
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	4b36      	ldr	r3, [pc, #216]	@ (8010a9c <tcp_process+0x5a8>)
 80109c2:	4602      	mov	r2, r0
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f002 fbdf 	bl	8013188 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80109ca:	e167      	b.n	8010c9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80109cc:	4b2d      	ldr	r3, [pc, #180]	@ (8010a84 <tcp_process+0x590>)
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	f003 0302 	and.w	r3, r3, #2
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 8161 	beq.w	8010c9c <tcp_process+0x7a8>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109de:	1e5a      	subs	r2, r3, #1
 80109e0:	4b2b      	ldr	r3, [pc, #172]	@ (8010a90 <tcp_process+0x59c>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	f040 8159 	bne.w	8010c9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f002 f9c6 	bl	8012d7c <tcp_rexmit>
      break;
 80109f0:	e154      	b.n	8010c9c <tcp_process+0x7a8>
 80109f2:	e153      	b.n	8010c9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fa71 	bl	8010edc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80109fa:	4b2d      	ldr	r3, [pc, #180]	@ (8010ab0 <tcp_process+0x5bc>)
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	f003 0320 	and.w	r3, r3, #32
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	f000 814c 	beq.w	8010ca0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	8b5b      	ldrh	r3, [r3, #26]
 8010a0c:	f043 0302 	orr.w	r3, r3, #2
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2207      	movs	r2, #7
 8010a1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a1c:	e140      	b.n	8010ca0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fa5c 	bl	8010edc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010a24:	4b22      	ldr	r3, [pc, #136]	@ (8010ab0 <tcp_process+0x5bc>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	f003 0320 	and.w	r3, r3, #32
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d071      	beq.n	8010b14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a30:	4b14      	ldr	r3, [pc, #80]	@ (8010a84 <tcp_process+0x590>)
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	f003 0310 	and.w	r3, r3, #16
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d060      	beq.n	8010afe <tcp_process+0x60a>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a40:	4b11      	ldr	r3, [pc, #68]	@ (8010a88 <tcp_process+0x594>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d15a      	bne.n	8010afe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d156      	bne.n	8010afe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	8b5b      	ldrh	r3, [r3, #26]
 8010a54:	f043 0302 	orr.w	r3, r3, #2
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f7fe fdb6 	bl	800f5d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010a64:	4b13      	ldr	r3, [pc, #76]	@ (8010ab4 <tcp_process+0x5c0>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d105      	bne.n	8010a7a <tcp_process+0x586>
 8010a6e:	4b11      	ldr	r3, [pc, #68]	@ (8010ab4 <tcp_process+0x5c0>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	4a0f      	ldr	r2, [pc, #60]	@ (8010ab4 <tcp_process+0x5c0>)
 8010a76:	6013      	str	r3, [r2, #0]
 8010a78:	e02e      	b.n	8010ad8 <tcp_process+0x5e4>
 8010a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8010ab4 <tcp_process+0x5c0>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	613b      	str	r3, [r7, #16]
 8010a80:	e027      	b.n	8010ad2 <tcp_process+0x5de>
 8010a82:	bf00      	nop
 8010a84:	20008544 	.word	0x20008544
 8010a88:	2000853c 	.word	0x2000853c
 8010a8c:	20008542 	.word	0x20008542
 8010a90:	20008538 	.word	0x20008538
 8010a94:	20008528 	.word	0x20008528
 8010a98:	200055b0 	.word	0x200055b0
 8010a9c:	200055b4 	.word	0x200055b4
 8010aa0:	08019de8 	.word	0x08019de8
 8010aa4:	0801a088 	.word	0x0801a088
 8010aa8:	08019e34 	.word	0x08019e34
 8010aac:	20008540 	.word	0x20008540
 8010ab0:	20008545 	.word	0x20008545
 8010ab4:	20008508 	.word	0x20008508
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d104      	bne.n	8010acc <tcp_process+0x5d8>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	68da      	ldr	r2, [r3, #12]
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	60da      	str	r2, [r3, #12]
 8010aca:	e005      	b.n	8010ad8 <tcp_process+0x5e4>
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	613b      	str	r3, [r7, #16]
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d1ef      	bne.n	8010ab8 <tcp_process+0x5c4>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	60da      	str	r2, [r3, #12]
 8010ade:	4b77      	ldr	r3, [pc, #476]	@ (8010cbc <tcp_process+0x7c8>)
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	220a      	movs	r2, #10
 8010ae8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010aea:	4b75      	ldr	r3, [pc, #468]	@ (8010cc0 <tcp_process+0x7cc>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	60da      	str	r2, [r3, #12]
 8010af2:	4a73      	ldr	r2, [pc, #460]	@ (8010cc0 <tcp_process+0x7cc>)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6013      	str	r3, [r2, #0]
 8010af8:	f002 fd08 	bl	801350c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010afc:	e0d2      	b.n	8010ca4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	8b5b      	ldrh	r3, [r3, #26]
 8010b02:	f043 0302 	orr.w	r3, r3, #2
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2208      	movs	r2, #8
 8010b10:	751a      	strb	r2, [r3, #20]
      break;
 8010b12:	e0c7      	b.n	8010ca4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b14:	4b6b      	ldr	r3, [pc, #428]	@ (8010cc4 <tcp_process+0x7d0>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	f003 0310 	and.w	r3, r3, #16
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 80c1 	beq.w	8010ca4 <tcp_process+0x7b0>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b26:	4b68      	ldr	r3, [pc, #416]	@ (8010cc8 <tcp_process+0x7d4>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	f040 80ba 	bne.w	8010ca4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f040 80b5 	bne.w	8010ca4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2206      	movs	r2, #6
 8010b3e:	751a      	strb	r2, [r3, #20]
      break;
 8010b40:	e0b0      	b.n	8010ca4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 f9ca 	bl	8010edc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010b48:	4b60      	ldr	r3, [pc, #384]	@ (8010ccc <tcp_process+0x7d8>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	f003 0320 	and.w	r3, r3, #32
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f000 80a9 	beq.w	8010ca8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	8b5b      	ldrh	r3, [r3, #26]
 8010b5a:	f043 0302 	orr.w	r3, r3, #2
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7fe fd33 	bl	800f5d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010b6a:	4b59      	ldr	r3, [pc, #356]	@ (8010cd0 <tcp_process+0x7dc>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d105      	bne.n	8010b80 <tcp_process+0x68c>
 8010b74:	4b56      	ldr	r3, [pc, #344]	@ (8010cd0 <tcp_process+0x7dc>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	4a55      	ldr	r2, [pc, #340]	@ (8010cd0 <tcp_process+0x7dc>)
 8010b7c:	6013      	str	r3, [r2, #0]
 8010b7e:	e013      	b.n	8010ba8 <tcp_process+0x6b4>
 8010b80:	4b53      	ldr	r3, [pc, #332]	@ (8010cd0 <tcp_process+0x7dc>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	60fb      	str	r3, [r7, #12]
 8010b86:	e00c      	b.n	8010ba2 <tcp_process+0x6ae>
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d104      	bne.n	8010b9c <tcp_process+0x6a8>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	68da      	ldr	r2, [r3, #12]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	60da      	str	r2, [r3, #12]
 8010b9a:	e005      	b.n	8010ba8 <tcp_process+0x6b4>
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	60fb      	str	r3, [r7, #12]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1ef      	bne.n	8010b88 <tcp_process+0x694>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	60da      	str	r2, [r3, #12]
 8010bae:	4b43      	ldr	r3, [pc, #268]	@ (8010cbc <tcp_process+0x7c8>)
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	220a      	movs	r2, #10
 8010bb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010bba:	4b41      	ldr	r3, [pc, #260]	@ (8010cc0 <tcp_process+0x7cc>)
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	60da      	str	r2, [r3, #12]
 8010bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8010cc0 <tcp_process+0x7cc>)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6013      	str	r3, [r2, #0]
 8010bc8:	f002 fca0 	bl	801350c <tcp_timer_needed>
      }
      break;
 8010bcc:	e06c      	b.n	8010ca8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 f984 	bl	8010edc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8010cc4 <tcp_process+0x7d0>)
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	f003 0310 	and.w	r3, r3, #16
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d065      	beq.n	8010cac <tcp_process+0x7b8>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010be4:	4b38      	ldr	r3, [pc, #224]	@ (8010cc8 <tcp_process+0x7d4>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d15f      	bne.n	8010cac <tcp_process+0x7b8>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d15b      	bne.n	8010cac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7fe fceb 	bl	800f5d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010bfa:	4b35      	ldr	r3, [pc, #212]	@ (8010cd0 <tcp_process+0x7dc>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d105      	bne.n	8010c10 <tcp_process+0x71c>
 8010c04:	4b32      	ldr	r3, [pc, #200]	@ (8010cd0 <tcp_process+0x7dc>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	4a31      	ldr	r2, [pc, #196]	@ (8010cd0 <tcp_process+0x7dc>)
 8010c0c:	6013      	str	r3, [r2, #0]
 8010c0e:	e013      	b.n	8010c38 <tcp_process+0x744>
 8010c10:	4b2f      	ldr	r3, [pc, #188]	@ (8010cd0 <tcp_process+0x7dc>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	61bb      	str	r3, [r7, #24]
 8010c16:	e00c      	b.n	8010c32 <tcp_process+0x73e>
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d104      	bne.n	8010c2c <tcp_process+0x738>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	68da      	ldr	r2, [r3, #12]
 8010c26:	69bb      	ldr	r3, [r7, #24]
 8010c28:	60da      	str	r2, [r3, #12]
 8010c2a:	e005      	b.n	8010c38 <tcp_process+0x744>
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	61bb      	str	r3, [r7, #24]
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1ef      	bne.n	8010c18 <tcp_process+0x724>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	60da      	str	r2, [r3, #12]
 8010c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8010cbc <tcp_process+0x7c8>)
 8010c40:	2201      	movs	r2, #1
 8010c42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	220a      	movs	r2, #10
 8010c48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8010cc0 <tcp_process+0x7cc>)
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	60da      	str	r2, [r3, #12]
 8010c52:	4a1b      	ldr	r2, [pc, #108]	@ (8010cc0 <tcp_process+0x7cc>)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6013      	str	r3, [r2, #0]
 8010c58:	f002 fc58 	bl	801350c <tcp_timer_needed>
      }
      break;
 8010c5c:	e026      	b.n	8010cac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 f93c 	bl	8010edc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c64:	4b17      	ldr	r3, [pc, #92]	@ (8010cc4 <tcp_process+0x7d0>)
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	f003 0310 	and.w	r3, r3, #16
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d01f      	beq.n	8010cb0 <tcp_process+0x7bc>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010c74:	4b14      	ldr	r3, [pc, #80]	@ (8010cc8 <tcp_process+0x7d4>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d119      	bne.n	8010cb0 <tcp_process+0x7bc>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d115      	bne.n	8010cb0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010c84:	4b11      	ldr	r3, [pc, #68]	@ (8010ccc <tcp_process+0x7d8>)
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	f043 0310 	orr.w	r3, r3, #16
 8010c8c:	b2da      	uxtb	r2, r3
 8010c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8010ccc <tcp_process+0x7d8>)
 8010c90:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010c92:	e00d      	b.n	8010cb0 <tcp_process+0x7bc>
    default:
      break;
 8010c94:	bf00      	nop
 8010c96:	e00c      	b.n	8010cb2 <tcp_process+0x7be>
      break;
 8010c98:	bf00      	nop
 8010c9a:	e00a      	b.n	8010cb2 <tcp_process+0x7be>
      break;
 8010c9c:	bf00      	nop
 8010c9e:	e008      	b.n	8010cb2 <tcp_process+0x7be>
      break;
 8010ca0:	bf00      	nop
 8010ca2:	e006      	b.n	8010cb2 <tcp_process+0x7be>
      break;
 8010ca4:	bf00      	nop
 8010ca6:	e004      	b.n	8010cb2 <tcp_process+0x7be>
      break;
 8010ca8:	bf00      	nop
 8010caa:	e002      	b.n	8010cb2 <tcp_process+0x7be>
      break;
 8010cac:	bf00      	nop
 8010cae:	e000      	b.n	8010cb2 <tcp_process+0x7be>
      break;
 8010cb0:	bf00      	nop
  }
  return ERR_OK;
 8010cb2:	2300      	movs	r3, #0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3724      	adds	r7, #36	@ 0x24
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd90      	pop	{r4, r7, pc}
 8010cbc:	20008510 	.word	0x20008510
 8010cc0:	2000850c 	.word	0x2000850c
 8010cc4:	20008544 	.word	0x20008544
 8010cc8:	2000853c 	.word	0x2000853c
 8010ccc:	20008545 	.word	0x20008545
 8010cd0:	20008508 	.word	0x20008508

08010cd4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010cd4:	b590      	push	{r4, r7, lr}
 8010cd6:	b085      	sub	sp, #20
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d106      	bne.n	8010cf2 <tcp_oos_insert_segment+0x1e>
 8010ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8010dd4 <tcp_oos_insert_segment+0x100>)
 8010ce6:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010cea:	493b      	ldr	r1, [pc, #236]	@ (8010dd8 <tcp_oos_insert_segment+0x104>)
 8010cec:	483b      	ldr	r0, [pc, #236]	@ (8010ddc <tcp_oos_insert_segment+0x108>)
 8010cee:	f006 fdff 	bl	80178f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	691b      	ldr	r3, [r3, #16]
 8010cf6:	899b      	ldrh	r3, [r3, #12]
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fb fba6 	bl	800c44c <lwip_htons>
 8010d00:	4603      	mov	r3, r0
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	f003 0301 	and.w	r3, r3, #1
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d028      	beq.n	8010d5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010d0c:	6838      	ldr	r0, [r7, #0]
 8010d0e:	f7fe fa5d 	bl	800f1cc <tcp_segs_free>
    next = NULL;
 8010d12:	2300      	movs	r3, #0
 8010d14:	603b      	str	r3, [r7, #0]
 8010d16:	e056      	b.n	8010dc6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	899b      	ldrh	r3, [r3, #12]
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fb fb93 	bl	800c44c <lwip_htons>
 8010d26:	4603      	mov	r3, r0
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d00d      	beq.n	8010d4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	899b      	ldrh	r3, [r3, #12]
 8010d38:	b29c      	uxth	r4, r3
 8010d3a:	2001      	movs	r0, #1
 8010d3c:	f7fb fb86 	bl	800c44c <lwip_htons>
 8010d40:	4603      	mov	r3, r0
 8010d42:	461a      	mov	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	4322      	orrs	r2, r4
 8010d4a:	b292      	uxth	r2, r2
 8010d4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f7fe fa4c 	bl	800f1f6 <tcp_seg_free>
    while (next &&
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00e      	beq.n	8010d82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	891b      	ldrh	r3, [r3, #8]
 8010d68:	461a      	mov	r2, r3
 8010d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8010de0 <tcp_oos_insert_segment+0x10c>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	441a      	add	r2, r3
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	691b      	ldr	r3, [r3, #16]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	6839      	ldr	r1, [r7, #0]
 8010d78:	8909      	ldrh	r1, [r1, #8]
 8010d7a:	440b      	add	r3, r1
 8010d7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	daca      	bge.n	8010d18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d01e      	beq.n	8010dc6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	891b      	ldrh	r3, [r3, #8]
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	4b14      	ldr	r3, [pc, #80]	@ (8010de0 <tcp_oos_insert_segment+0x10c>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	441a      	add	r2, r3
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	691b      	ldr	r3, [r3, #16]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	dd12      	ble.n	8010dc6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	691b      	ldr	r3, [r3, #16]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	4b0d      	ldr	r3, [pc, #52]	@ (8010de0 <tcp_oos_insert_segment+0x10c>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	685a      	ldr	r2, [r3, #4]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	891b      	ldrh	r3, [r3, #8]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	4610      	mov	r0, r2
 8010dc2:	f7fc fe0d 	bl	800d9e0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	683a      	ldr	r2, [r7, #0]
 8010dca:	601a      	str	r2, [r3, #0]
}
 8010dcc:	bf00      	nop
 8010dce:	3714      	adds	r7, #20
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd90      	pop	{r4, r7, pc}
 8010dd4:	08019de8 	.word	0x08019de8
 8010dd8:	0801a0a8 	.word	0x0801a0a8
 8010ddc:	08019e34 	.word	0x08019e34
 8010de0:	20008538 	.word	0x20008538

08010de4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010de4:	b5b0      	push	{r4, r5, r7, lr}
 8010de6:	b086      	sub	sp, #24
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
 8010df0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010df2:	e03e      	b.n	8010e72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fc fffa 	bl	800ddfc <pbuf_clen>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010e12:	8a7a      	ldrh	r2, [r7, #18]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d906      	bls.n	8010e26 <tcp_free_acked_segments+0x42>
 8010e18:	4b2a      	ldr	r3, [pc, #168]	@ (8010ec4 <tcp_free_acked_segments+0xe0>)
 8010e1a:	f240 4257 	movw	r2, #1111	@ 0x457
 8010e1e:	492a      	ldr	r1, [pc, #168]	@ (8010ec8 <tcp_free_acked_segments+0xe4>)
 8010e20:	482a      	ldr	r0, [pc, #168]	@ (8010ecc <tcp_free_acked_segments+0xe8>)
 8010e22:	f006 fd65 	bl	80178f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010e2c:	8a7b      	ldrh	r3, [r7, #18]
 8010e2e:	1ad3      	subs	r3, r2, r3
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	891a      	ldrh	r2, [r3, #8]
 8010e3c:	4b24      	ldr	r3, [pc, #144]	@ (8010ed0 <tcp_free_acked_segments+0xec>)
 8010e3e:	881b      	ldrh	r3, [r3, #0]
 8010e40:	4413      	add	r3, r2
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	4b22      	ldr	r3, [pc, #136]	@ (8010ed0 <tcp_free_acked_segments+0xec>)
 8010e46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010e48:	6978      	ldr	r0, [r7, #20]
 8010e4a:	f7fe f9d4 	bl	800f1f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00c      	beq.n	8010e72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d109      	bne.n	8010e72 <tcp_free_acked_segments+0x8e>
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d106      	bne.n	8010e72 <tcp_free_acked_segments+0x8e>
 8010e64:	4b17      	ldr	r3, [pc, #92]	@ (8010ec4 <tcp_free_acked_segments+0xe0>)
 8010e66:	f240 4261 	movw	r2, #1121	@ 0x461
 8010e6a:	491a      	ldr	r1, [pc, #104]	@ (8010ed4 <tcp_free_acked_segments+0xf0>)
 8010e6c:	4817      	ldr	r0, [pc, #92]	@ (8010ecc <tcp_free_acked_segments+0xe8>)
 8010e6e:	f006 fd3f 	bl	80178f0 <iprintf>
  while (seg_list != NULL &&
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d020      	beq.n	8010eba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	691b      	ldr	r3, [r3, #16]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fb fafa 	bl	800c478 <lwip_htonl>
 8010e84:	4604      	mov	r4, r0
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	891b      	ldrh	r3, [r3, #8]
 8010e8a:	461d      	mov	r5, r3
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	691b      	ldr	r3, [r3, #16]
 8010e90:	899b      	ldrh	r3, [r3, #12]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fb fad9 	bl	800c44c <lwip_htons>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	f003 0303 	and.w	r3, r3, #3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d001      	beq.n	8010eaa <tcp_free_acked_segments+0xc6>
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e000      	b.n	8010eac <tcp_free_acked_segments+0xc8>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	442b      	add	r3, r5
 8010eae:	18e2      	adds	r2, r4, r3
 8010eb0:	4b09      	ldr	r3, [pc, #36]	@ (8010ed8 <tcp_free_acked_segments+0xf4>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	dd9c      	ble.n	8010df4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010eba:	68bb      	ldr	r3, [r7, #8]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3718      	adds	r7, #24
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8010ec4:	08019de8 	.word	0x08019de8
 8010ec8:	0801a0d0 	.word	0x0801a0d0
 8010ecc:	08019e34 	.word	0x08019e34
 8010ed0:	20008540 	.word	0x20008540
 8010ed4:	0801a0f8 	.word	0x0801a0f8
 8010ed8:	2000853c 	.word	0x2000853c

08010edc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010edc:	b5b0      	push	{r4, r5, r7, lr}
 8010ede:	b094      	sub	sp, #80	@ 0x50
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d106      	bne.n	8010efc <tcp_receive+0x20>
 8010eee:	4b91      	ldr	r3, [pc, #580]	@ (8011134 <tcp_receive+0x258>)
 8010ef0:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010ef4:	4990      	ldr	r1, [pc, #576]	@ (8011138 <tcp_receive+0x25c>)
 8010ef6:	4891      	ldr	r0, [pc, #580]	@ (801113c <tcp_receive+0x260>)
 8010ef8:	f006 fcfa 	bl	80178f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	7d1b      	ldrb	r3, [r3, #20]
 8010f00:	2b03      	cmp	r3, #3
 8010f02:	d806      	bhi.n	8010f12 <tcp_receive+0x36>
 8010f04:	4b8b      	ldr	r3, [pc, #556]	@ (8011134 <tcp_receive+0x258>)
 8010f06:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010f0a:	498d      	ldr	r1, [pc, #564]	@ (8011140 <tcp_receive+0x264>)
 8010f0c:	488b      	ldr	r0, [pc, #556]	@ (801113c <tcp_receive+0x260>)
 8010f0e:	f006 fcef 	bl	80178f0 <iprintf>

  if (flags & TCP_ACK) {
 8010f12:	4b8c      	ldr	r3, [pc, #560]	@ (8011144 <tcp_receive+0x268>)
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	f003 0310 	and.w	r3, r3, #16
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f000 8264 	beq.w	80113e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f26:	461a      	mov	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f2c:	4413      	add	r3, r2
 8010f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010f34:	4b84      	ldr	r3, [pc, #528]	@ (8011148 <tcp_receive+0x26c>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	1ad3      	subs	r3, r2, r3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	db1b      	blt.n	8010f76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010f42:	4b81      	ldr	r3, [pc, #516]	@ (8011148 <tcp_receive+0x26c>)
 8010f44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d106      	bne.n	8010f58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010f4e:	4b7f      	ldr	r3, [pc, #508]	@ (801114c <tcp_receive+0x270>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	db0e      	blt.n	8010f76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010f5c:	4b7b      	ldr	r3, [pc, #492]	@ (801114c <tcp_receive+0x270>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d125      	bne.n	8010fb0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f64:	4b7a      	ldr	r3, [pc, #488]	@ (8011150 <tcp_receive+0x274>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	89db      	ldrh	r3, [r3, #14]
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d91c      	bls.n	8010fb0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010f76:	4b76      	ldr	r3, [pc, #472]	@ (8011150 <tcp_receive+0x274>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	89db      	ldrh	r3, [r3, #14]
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d205      	bcs.n	8010fa0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010fa0:	4b69      	ldr	r3, [pc, #420]	@ (8011148 <tcp_receive+0x26c>)
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010fa8:	4b68      	ldr	r3, [pc, #416]	@ (801114c <tcp_receive+0x270>)
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010fb0:	4b66      	ldr	r3, [pc, #408]	@ (801114c <tcp_receive+0x270>)
 8010fb2:	681a      	ldr	r2, [r3, #0]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fb8:	1ad3      	subs	r3, r2, r3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	dc58      	bgt.n	8011070 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010fbe:	4b65      	ldr	r3, [pc, #404]	@ (8011154 <tcp_receive+0x278>)
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d14b      	bne.n	801105e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010fd0:	4413      	add	r3, r2
 8010fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d142      	bne.n	801105e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	db3d      	blt.n	801105e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010fe6:	4b59      	ldr	r3, [pc, #356]	@ (801114c <tcp_receive+0x270>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d137      	bne.n	801105e <tcp_receive+0x182>
              found_dupack = 1;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010ff8:	2bff      	cmp	r3, #255	@ 0xff
 8010ffa:	d007      	beq.n	801100c <tcp_receive+0x130>
                ++pcb->dupacks;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011002:	3301      	adds	r3, #1
 8011004:	b2da      	uxtb	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011012:	2b03      	cmp	r3, #3
 8011014:	d91b      	bls.n	801104e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011020:	4413      	add	r3, r2
 8011022:	b29a      	uxth	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801102a:	429a      	cmp	r2, r3
 801102c:	d30a      	bcc.n	8011044 <tcp_receive+0x168>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011038:	4413      	add	r3, r2
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011042:	e004      	b.n	801104e <tcp_receive+0x172>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801104a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011054:	2b02      	cmp	r3, #2
 8011056:	d902      	bls.n	801105e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f001 fefb 	bl	8012e54 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801105e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011060:	2b00      	cmp	r3, #0
 8011062:	f040 8161 	bne.w	8011328 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2200      	movs	r2, #0
 801106a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801106e:	e15b      	b.n	8011328 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011070:	4b36      	ldr	r3, [pc, #216]	@ (801114c <tcp_receive+0x270>)
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011078:	1ad3      	subs	r3, r2, r3
 801107a:	3b01      	subs	r3, #1
 801107c:	2b00      	cmp	r3, #0
 801107e:	f2c0 814e 	blt.w	801131e <tcp_receive+0x442>
 8011082:	4b32      	ldr	r3, [pc, #200]	@ (801114c <tcp_receive+0x270>)
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	2b00      	cmp	r3, #0
 801108e:	f300 8146 	bgt.w	801131e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	8b5b      	ldrh	r3, [r3, #26]
 8011096:	f003 0304 	and.w	r3, r3, #4
 801109a:	2b00      	cmp	r3, #0
 801109c:	d010      	beq.n	80110c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	8b5b      	ldrh	r3, [r3, #26]
 80110a2:	f023 0304 	bic.w	r3, r3, #4
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80110ce:	10db      	asrs	r3, r3, #3
 80110d0:	b21b      	sxth	r3, r3
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80110da:	b29b      	uxth	r3, r3
 80110dc:	4413      	add	r3, r2
 80110de:	b29b      	uxth	r3, r3
 80110e0:	b21a      	sxth	r2, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80110e8:	4b18      	ldr	r3, [pc, #96]	@ (801114c <tcp_receive+0x270>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011100:	4b12      	ldr	r3, [pc, #72]	@ (801114c <tcp_receive+0x270>)
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b03      	cmp	r3, #3
 801110e:	f240 8097 	bls.w	8011240 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801111e:	429a      	cmp	r2, r3
 8011120:	d245      	bcs.n	80111ae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	8b5b      	ldrh	r3, [r3, #26]
 8011126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801112a:	2b00      	cmp	r3, #0
 801112c:	d014      	beq.n	8011158 <tcp_receive+0x27c>
 801112e:	2301      	movs	r3, #1
 8011130:	e013      	b.n	801115a <tcp_receive+0x27e>
 8011132:	bf00      	nop
 8011134:	08019de8 	.word	0x08019de8
 8011138:	0801a118 	.word	0x0801a118
 801113c:	08019e34 	.word	0x08019e34
 8011140:	0801a134 	.word	0x0801a134
 8011144:	20008544 	.word	0x20008544
 8011148:	20008538 	.word	0x20008538
 801114c:	2000853c 	.word	0x2000853c
 8011150:	20008528 	.word	0x20008528
 8011154:	20008542 	.word	0x20008542
 8011158:	2302      	movs	r3, #2
 801115a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801115e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011162:	b29a      	uxth	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011168:	fb12 f303 	smulbb	r3, r2, r3
 801116c:	b29b      	uxth	r3, r3
 801116e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011170:	4293      	cmp	r3, r2
 8011172:	bf28      	it	cs
 8011174:	4613      	movcs	r3, r2
 8011176:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801117e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011180:	4413      	add	r3, r2
 8011182:	b29a      	uxth	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801118a:	429a      	cmp	r2, r3
 801118c:	d309      	bcc.n	80111a2 <tcp_receive+0x2c6>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011194:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011196:	4413      	add	r3, r2
 8011198:	b29a      	uxth	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80111a0:	e04e      	b.n	8011240 <tcp_receive+0x364>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80111a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80111ac:	e048      	b.n	8011240 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80111b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111b6:	4413      	add	r3, r2
 80111b8:	b29a      	uxth	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d309      	bcc.n	80111d8 <tcp_receive+0x2fc>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80111ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111cc:	4413      	add	r3, r2
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80111d6:	e004      	b.n	80111e2 <tcp_receive+0x306>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80111de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d326      	bcc.n	8011240 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	b29a      	uxth	r2, r3
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011212:	4413      	add	r3, r2
 8011214:	b29a      	uxth	r2, r3
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801121c:	429a      	cmp	r2, r3
 801121e:	d30a      	bcc.n	8011236 <tcp_receive+0x35a>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801122a:	4413      	add	r3, r2
 801122c:	b29a      	uxth	r2, r3
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011234:	e004      	b.n	8011240 <tcp_receive+0x364>
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801123c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011248:	4a98      	ldr	r2, [pc, #608]	@ (80114ac <tcp_receive+0x5d0>)
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f7ff fdca 	bl	8010de4 <tcp_free_acked_segments>
 8011250:	4602      	mov	r2, r0
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801125e:	4a94      	ldr	r2, [pc, #592]	@ (80114b0 <tcp_receive+0x5d4>)
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f7ff fdbf 	bl	8010de4 <tcp_free_acked_segments>
 8011266:	4602      	mov	r2, r0
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011270:	2b00      	cmp	r3, #0
 8011272:	d104      	bne.n	801127e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801127a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801127c:	e002      	b.n	8011284 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2200      	movs	r2, #0
 8011282:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2200      	movs	r2, #0
 8011288:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801128e:	2b00      	cmp	r3, #0
 8011290:	d103      	bne.n	801129a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80112a0:	4b84      	ldr	r3, [pc, #528]	@ (80114b4 <tcp_receive+0x5d8>)
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	4413      	add	r3, r2
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	8b5b      	ldrh	r3, [r3, #26]
 80112b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d035      	beq.n	8011326 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d118      	bne.n	80112f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d00c      	beq.n	80112e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112d2:	691b      	ldr	r3, [r3, #16]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fb f8ce 	bl	800c478 <lwip_htonl>
 80112dc:	4603      	mov	r3, r0
 80112de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	dc20      	bgt.n	8011326 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	8b5b      	ldrh	r3, [r3, #26]
 80112e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80112f2:	e018      	b.n	8011326 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112fc:	691b      	ldr	r3, [r3, #16]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	4618      	mov	r0, r3
 8011302:	f7fb f8b9 	bl	800c478 <lwip_htonl>
 8011306:	4603      	mov	r3, r0
 8011308:	1ae3      	subs	r3, r4, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	dc0b      	bgt.n	8011326 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	8b5b      	ldrh	r3, [r3, #26]
 8011312:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011316:	b29a      	uxth	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801131c:	e003      	b.n	8011326 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f001 ff84 	bl	801322c <tcp_send_empty_ack>
 8011324:	e000      	b.n	8011328 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011326:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801132c:	2b00      	cmp	r3, #0
 801132e:	d05b      	beq.n	80113e8 <tcp_receive+0x50c>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011334:	4b60      	ldr	r3, [pc, #384]	@ (80114b8 <tcp_receive+0x5dc>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	da54      	bge.n	80113e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801133e:	4b5f      	ldr	r3, [pc, #380]	@ (80114bc <tcp_receive+0x5e0>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	b29a      	uxth	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011348:	b29b      	uxth	r3, r3
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	b29b      	uxth	r3, r3
 801134e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011352:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801135c:	10db      	asrs	r3, r3, #3
 801135e:	b21b      	sxth	r3, r3
 8011360:	b29b      	uxth	r3, r3
 8011362:	1ad3      	subs	r3, r2, r3
 8011364:	b29b      	uxth	r3, r3
 8011366:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011370:	b29a      	uxth	r2, r3
 8011372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011376:	4413      	add	r3, r2
 8011378:	b29b      	uxth	r3, r3
 801137a:	b21a      	sxth	r2, r3
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011380:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011384:	2b00      	cmp	r3, #0
 8011386:	da05      	bge.n	8011394 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011388:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801138c:	425b      	negs	r3, r3
 801138e:	b29b      	uxth	r3, r3
 8011390:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011394:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801139e:	109b      	asrs	r3, r3, #2
 80113a0:	b21b      	sxth	r3, r3
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80113b8:	4413      	add	r3, r2
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	b21a      	sxth	r2, r3
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80113c8:	10db      	asrs	r3, r3, #3
 80113ca:	b21b      	sxth	r3, r3
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	4413      	add	r3, r2
 80113d8:	b29b      	uxth	r3, r3
 80113da:	b21a      	sxth	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2200      	movs	r2, #0
 80113e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80113e8:	4b35      	ldr	r3, [pc, #212]	@ (80114c0 <tcp_receive+0x5e4>)
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f000 84df 	beq.w	8011db0 <tcp_receive+0xed4>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	7d1b      	ldrb	r3, [r3, #20]
 80113f6:	2b06      	cmp	r3, #6
 80113f8:	f200 84da 	bhi.w	8011db0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011400:	4b30      	ldr	r3, [pc, #192]	@ (80114c4 <tcp_receive+0x5e8>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	1ad3      	subs	r3, r2, r3
 8011406:	3b01      	subs	r3, #1
 8011408:	2b00      	cmp	r3, #0
 801140a:	f2c0 808f 	blt.w	801152c <tcp_receive+0x650>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011412:	4b2b      	ldr	r3, [pc, #172]	@ (80114c0 <tcp_receive+0x5e4>)
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	4619      	mov	r1, r3
 8011418:	4b2a      	ldr	r3, [pc, #168]	@ (80114c4 <tcp_receive+0x5e8>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	440b      	add	r3, r1
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	3301      	adds	r3, #1
 8011422:	2b00      	cmp	r3, #0
 8011424:	f300 8082 	bgt.w	801152c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011428:	4b27      	ldr	r3, [pc, #156]	@ (80114c8 <tcp_receive+0x5ec>)
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011432:	4b24      	ldr	r3, [pc, #144]	@ (80114c4 <tcp_receive+0x5e8>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801143a:	4b23      	ldr	r3, [pc, #140]	@ (80114c8 <tcp_receive+0x5ec>)
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d106      	bne.n	8011450 <tcp_receive+0x574>
 8011442:	4b22      	ldr	r3, [pc, #136]	@ (80114cc <tcp_receive+0x5f0>)
 8011444:	f240 5294 	movw	r2, #1428	@ 0x594
 8011448:	4921      	ldr	r1, [pc, #132]	@ (80114d0 <tcp_receive+0x5f4>)
 801144a:	4822      	ldr	r0, [pc, #136]	@ (80114d4 <tcp_receive+0x5f8>)
 801144c:	f006 fa50 	bl	80178f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011452:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011456:	4293      	cmp	r3, r2
 8011458:	d906      	bls.n	8011468 <tcp_receive+0x58c>
 801145a:	4b1c      	ldr	r3, [pc, #112]	@ (80114cc <tcp_receive+0x5f0>)
 801145c:	f240 5295 	movw	r2, #1429	@ 0x595
 8011460:	491d      	ldr	r1, [pc, #116]	@ (80114d8 <tcp_receive+0x5fc>)
 8011462:	481c      	ldr	r0, [pc, #112]	@ (80114d4 <tcp_receive+0x5f8>)
 8011464:	f006 fa44 	bl	80178f0 <iprintf>
      off = (u16_t)off32;
 8011468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801146e:	4b16      	ldr	r3, [pc, #88]	@ (80114c8 <tcp_receive+0x5ec>)
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	891b      	ldrh	r3, [r3, #8]
 8011474:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011478:	429a      	cmp	r2, r3
 801147a:	d906      	bls.n	801148a <tcp_receive+0x5ae>
 801147c:	4b13      	ldr	r3, [pc, #76]	@ (80114cc <tcp_receive+0x5f0>)
 801147e:	f240 5297 	movw	r2, #1431	@ 0x597
 8011482:	4916      	ldr	r1, [pc, #88]	@ (80114dc <tcp_receive+0x600>)
 8011484:	4813      	ldr	r0, [pc, #76]	@ (80114d4 <tcp_receive+0x5f8>)
 8011486:	f006 fa33 	bl	80178f0 <iprintf>
      inseg.len -= off;
 801148a:	4b0f      	ldr	r3, [pc, #60]	@ (80114c8 <tcp_receive+0x5ec>)
 801148c:	891a      	ldrh	r2, [r3, #8]
 801148e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	b29a      	uxth	r2, r3
 8011496:	4b0c      	ldr	r3, [pc, #48]	@ (80114c8 <tcp_receive+0x5ec>)
 8011498:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801149a:	4b0b      	ldr	r3, [pc, #44]	@ (80114c8 <tcp_receive+0x5ec>)
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	891a      	ldrh	r2, [r3, #8]
 80114a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80114a8:	e02a      	b.n	8011500 <tcp_receive+0x624>
 80114aa:	bf00      	nop
 80114ac:	0801a150 	.word	0x0801a150
 80114b0:	0801a158 	.word	0x0801a158
 80114b4:	20008540 	.word	0x20008540
 80114b8:	2000853c 	.word	0x2000853c
 80114bc:	200084fc 	.word	0x200084fc
 80114c0:	20008542 	.word	0x20008542
 80114c4:	20008538 	.word	0x20008538
 80114c8:	20008514 	.word	0x20008514
 80114cc:	08019de8 	.word	0x08019de8
 80114d0:	0801a160 	.word	0x0801a160
 80114d4:	08019e34 	.word	0x08019e34
 80114d8:	0801a170 	.word	0x0801a170
 80114dc:	0801a180 	.word	0x0801a180
        off -= p->len;
 80114e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114e2:	895b      	ldrh	r3, [r3, #10]
 80114e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80114e8:	1ad3      	subs	r3, r2, r3
 80114ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80114ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80114f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80114f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114f6:	2200      	movs	r2, #0
 80114f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80114fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011502:	895b      	ldrh	r3, [r3, #10]
 8011504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011508:	429a      	cmp	r2, r3
 801150a:	d8e9      	bhi.n	80114e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801150c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011510:	4619      	mov	r1, r3
 8011512:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011514:	f7fc fb64 	bl	800dbe0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801151c:	4a90      	ldr	r2, [pc, #576]	@ (8011760 <tcp_receive+0x884>)
 801151e:	6013      	str	r3, [r2, #0]
 8011520:	4b90      	ldr	r3, [pc, #576]	@ (8011764 <tcp_receive+0x888>)
 8011522:	691b      	ldr	r3, [r3, #16]
 8011524:	4a8e      	ldr	r2, [pc, #568]	@ (8011760 <tcp_receive+0x884>)
 8011526:	6812      	ldr	r2, [r2, #0]
 8011528:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801152a:	e00d      	b.n	8011548 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801152c:	4b8c      	ldr	r3, [pc, #560]	@ (8011760 <tcp_receive+0x884>)
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	2b00      	cmp	r3, #0
 8011538:	da06      	bge.n	8011548 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	8b5b      	ldrh	r3, [r3, #26]
 801153e:	f043 0302 	orr.w	r3, r3, #2
 8011542:	b29a      	uxth	r2, r3
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011548:	4b85      	ldr	r3, [pc, #532]	@ (8011760 <tcp_receive+0x884>)
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	2b00      	cmp	r3, #0
 8011554:	f2c0 8427 	blt.w	8011da6 <tcp_receive+0xeca>
 8011558:	4b81      	ldr	r3, [pc, #516]	@ (8011760 <tcp_receive+0x884>)
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011560:	6879      	ldr	r1, [r7, #4]
 8011562:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011564:	440b      	add	r3, r1
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	3301      	adds	r3, #1
 801156a:	2b00      	cmp	r3, #0
 801156c:	f300 841b 	bgt.w	8011da6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011574:	4b7a      	ldr	r3, [pc, #488]	@ (8011760 <tcp_receive+0x884>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	429a      	cmp	r2, r3
 801157a:	f040 8298 	bne.w	8011aae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801157e:	4b79      	ldr	r3, [pc, #484]	@ (8011764 <tcp_receive+0x888>)
 8011580:	891c      	ldrh	r4, [r3, #8]
 8011582:	4b78      	ldr	r3, [pc, #480]	@ (8011764 <tcp_receive+0x888>)
 8011584:	691b      	ldr	r3, [r3, #16]
 8011586:	899b      	ldrh	r3, [r3, #12]
 8011588:	b29b      	uxth	r3, r3
 801158a:	4618      	mov	r0, r3
 801158c:	f7fa ff5e 	bl	800c44c <lwip_htons>
 8011590:	4603      	mov	r3, r0
 8011592:	b2db      	uxtb	r3, r3
 8011594:	f003 0303 	and.w	r3, r3, #3
 8011598:	2b00      	cmp	r3, #0
 801159a:	d001      	beq.n	80115a0 <tcp_receive+0x6c4>
 801159c:	2301      	movs	r3, #1
 801159e:	e000      	b.n	80115a2 <tcp_receive+0x6c6>
 80115a0:	2300      	movs	r3, #0
 80115a2:	4423      	add	r3, r4
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	4b70      	ldr	r3, [pc, #448]	@ (8011768 <tcp_receive+0x88c>)
 80115a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80115ae:	4b6e      	ldr	r3, [pc, #440]	@ (8011768 <tcp_receive+0x88c>)
 80115b0:	881b      	ldrh	r3, [r3, #0]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d274      	bcs.n	80116a0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80115b6:	4b6b      	ldr	r3, [pc, #428]	@ (8011764 <tcp_receive+0x888>)
 80115b8:	691b      	ldr	r3, [r3, #16]
 80115ba:	899b      	ldrh	r3, [r3, #12]
 80115bc:	b29b      	uxth	r3, r3
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fa ff44 	bl	800c44c <lwip_htons>
 80115c4:	4603      	mov	r3, r0
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d01e      	beq.n	801160e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80115d0:	4b64      	ldr	r3, [pc, #400]	@ (8011764 <tcp_receive+0x888>)
 80115d2:	691b      	ldr	r3, [r3, #16]
 80115d4:	899b      	ldrh	r3, [r3, #12]
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	b21b      	sxth	r3, r3
 80115da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80115de:	b21c      	sxth	r4, r3
 80115e0:	4b60      	ldr	r3, [pc, #384]	@ (8011764 <tcp_receive+0x888>)
 80115e2:	691b      	ldr	r3, [r3, #16]
 80115e4:	899b      	ldrh	r3, [r3, #12]
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fa ff2f 	bl	800c44c <lwip_htons>
 80115ee:	4603      	mov	r3, r0
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fa ff27 	bl	800c44c <lwip_htons>
 80115fe:	4603      	mov	r3, r0
 8011600:	b21b      	sxth	r3, r3
 8011602:	4323      	orrs	r3, r4
 8011604:	b21a      	sxth	r2, r3
 8011606:	4b57      	ldr	r3, [pc, #348]	@ (8011764 <tcp_receive+0x888>)
 8011608:	691b      	ldr	r3, [r3, #16]
 801160a:	b292      	uxth	r2, r2
 801160c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011612:	4b54      	ldr	r3, [pc, #336]	@ (8011764 <tcp_receive+0x888>)
 8011614:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011616:	4b53      	ldr	r3, [pc, #332]	@ (8011764 <tcp_receive+0x888>)
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	899b      	ldrh	r3, [r3, #12]
 801161c:	b29b      	uxth	r3, r3
 801161e:	4618      	mov	r0, r3
 8011620:	f7fa ff14 	bl	800c44c <lwip_htons>
 8011624:	4603      	mov	r3, r0
 8011626:	b2db      	uxtb	r3, r3
 8011628:	f003 0302 	and.w	r3, r3, #2
 801162c:	2b00      	cmp	r3, #0
 801162e:	d005      	beq.n	801163c <tcp_receive+0x760>
            inseg.len -= 1;
 8011630:	4b4c      	ldr	r3, [pc, #304]	@ (8011764 <tcp_receive+0x888>)
 8011632:	891b      	ldrh	r3, [r3, #8]
 8011634:	3b01      	subs	r3, #1
 8011636:	b29a      	uxth	r2, r3
 8011638:	4b4a      	ldr	r3, [pc, #296]	@ (8011764 <tcp_receive+0x888>)
 801163a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801163c:	4b49      	ldr	r3, [pc, #292]	@ (8011764 <tcp_receive+0x888>)
 801163e:	685b      	ldr	r3, [r3, #4]
 8011640:	4a48      	ldr	r2, [pc, #288]	@ (8011764 <tcp_receive+0x888>)
 8011642:	8912      	ldrh	r2, [r2, #8]
 8011644:	4611      	mov	r1, r2
 8011646:	4618      	mov	r0, r3
 8011648:	f7fc f9ca 	bl	800d9e0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801164c:	4b45      	ldr	r3, [pc, #276]	@ (8011764 <tcp_receive+0x888>)
 801164e:	891c      	ldrh	r4, [r3, #8]
 8011650:	4b44      	ldr	r3, [pc, #272]	@ (8011764 <tcp_receive+0x888>)
 8011652:	691b      	ldr	r3, [r3, #16]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	b29b      	uxth	r3, r3
 8011658:	4618      	mov	r0, r3
 801165a:	f7fa fef7 	bl	800c44c <lwip_htons>
 801165e:	4603      	mov	r3, r0
 8011660:	b2db      	uxtb	r3, r3
 8011662:	f003 0303 	and.w	r3, r3, #3
 8011666:	2b00      	cmp	r3, #0
 8011668:	d001      	beq.n	801166e <tcp_receive+0x792>
 801166a:	2301      	movs	r3, #1
 801166c:	e000      	b.n	8011670 <tcp_receive+0x794>
 801166e:	2300      	movs	r3, #0
 8011670:	4423      	add	r3, r4
 8011672:	b29a      	uxth	r2, r3
 8011674:	4b3c      	ldr	r3, [pc, #240]	@ (8011768 <tcp_receive+0x88c>)
 8011676:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011678:	4b3b      	ldr	r3, [pc, #236]	@ (8011768 <tcp_receive+0x88c>)
 801167a:	881b      	ldrh	r3, [r3, #0]
 801167c:	461a      	mov	r2, r3
 801167e:	4b38      	ldr	r3, [pc, #224]	@ (8011760 <tcp_receive+0x884>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	441a      	add	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801168c:	440b      	add	r3, r1
 801168e:	429a      	cmp	r2, r3
 8011690:	d006      	beq.n	80116a0 <tcp_receive+0x7c4>
 8011692:	4b36      	ldr	r3, [pc, #216]	@ (801176c <tcp_receive+0x890>)
 8011694:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011698:	4935      	ldr	r1, [pc, #212]	@ (8011770 <tcp_receive+0x894>)
 801169a:	4836      	ldr	r0, [pc, #216]	@ (8011774 <tcp_receive+0x898>)
 801169c:	f006 f928 	bl	80178f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f000 80e6 	beq.w	8011876 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116aa:	4b2e      	ldr	r3, [pc, #184]	@ (8011764 <tcp_receive+0x888>)
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	899b      	ldrh	r3, [r3, #12]
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fa feca 	bl	800c44c <lwip_htons>
 80116b8:	4603      	mov	r3, r0
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	f003 0301 	and.w	r3, r3, #1
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d010      	beq.n	80116e6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80116c4:	e00a      	b.n	80116dc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116ca:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80116d6:	68f8      	ldr	r0, [r7, #12]
 80116d8:	f7fd fd8d 	bl	800f1f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1f0      	bne.n	80116c6 <tcp_receive+0x7ea>
 80116e4:	e0c7      	b.n	8011876 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80116ec:	e051      	b.n	8011792 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80116ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	899b      	ldrh	r3, [r3, #12]
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fa fea8 	bl	800c44c <lwip_htons>
 80116fc:	4603      	mov	r3, r0
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	f003 0301 	and.w	r3, r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	d03c      	beq.n	8011782 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011708:	4b16      	ldr	r3, [pc, #88]	@ (8011764 <tcp_receive+0x888>)
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	899b      	ldrh	r3, [r3, #12]
 801170e:	b29b      	uxth	r3, r3
 8011710:	4618      	mov	r0, r3
 8011712:	f7fa fe9b 	bl	800c44c <lwip_htons>
 8011716:	4603      	mov	r3, r0
 8011718:	b2db      	uxtb	r3, r3
 801171a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801171e:	2b00      	cmp	r3, #0
 8011720:	d12f      	bne.n	8011782 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011722:	4b10      	ldr	r3, [pc, #64]	@ (8011764 <tcp_receive+0x888>)
 8011724:	691b      	ldr	r3, [r3, #16]
 8011726:	899b      	ldrh	r3, [r3, #12]
 8011728:	b29c      	uxth	r4, r3
 801172a:	2001      	movs	r0, #1
 801172c:	f7fa fe8e 	bl	800c44c <lwip_htons>
 8011730:	4603      	mov	r3, r0
 8011732:	461a      	mov	r2, r3
 8011734:	4b0b      	ldr	r3, [pc, #44]	@ (8011764 <tcp_receive+0x888>)
 8011736:	691b      	ldr	r3, [r3, #16]
 8011738:	4322      	orrs	r2, r4
 801173a:	b292      	uxth	r2, r2
 801173c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801173e:	4b09      	ldr	r3, [pc, #36]	@ (8011764 <tcp_receive+0x888>)
 8011740:	891c      	ldrh	r4, [r3, #8]
 8011742:	4b08      	ldr	r3, [pc, #32]	@ (8011764 <tcp_receive+0x888>)
 8011744:	691b      	ldr	r3, [r3, #16]
 8011746:	899b      	ldrh	r3, [r3, #12]
 8011748:	b29b      	uxth	r3, r3
 801174a:	4618      	mov	r0, r3
 801174c:	f7fa fe7e 	bl	800c44c <lwip_htons>
 8011750:	4603      	mov	r3, r0
 8011752:	b2db      	uxtb	r3, r3
 8011754:	f003 0303 	and.w	r3, r3, #3
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00d      	beq.n	8011778 <tcp_receive+0x89c>
 801175c:	2301      	movs	r3, #1
 801175e:	e00c      	b.n	801177a <tcp_receive+0x89e>
 8011760:	20008538 	.word	0x20008538
 8011764:	20008514 	.word	0x20008514
 8011768:	20008542 	.word	0x20008542
 801176c:	08019de8 	.word	0x08019de8
 8011770:	0801a190 	.word	0x0801a190
 8011774:	08019e34 	.word	0x08019e34
 8011778:	2300      	movs	r3, #0
 801177a:	4423      	add	r3, r4
 801177c:	b29a      	uxth	r2, r3
 801177e:	4b98      	ldr	r3, [pc, #608]	@ (80119e0 <tcp_receive+0xb04>)
 8011780:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011784:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801178c:	6938      	ldr	r0, [r7, #16]
 801178e:	f7fd fd32 	bl	800f1f6 <tcp_seg_free>
            while (next &&
 8011792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011794:	2b00      	cmp	r3, #0
 8011796:	d00e      	beq.n	80117b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011798:	4b91      	ldr	r3, [pc, #580]	@ (80119e0 <tcp_receive+0xb04>)
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	461a      	mov	r2, r3
 801179e:	4b91      	ldr	r3, [pc, #580]	@ (80119e4 <tcp_receive+0xb08>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	441a      	add	r2, r3
 80117a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117a6:	691b      	ldr	r3, [r3, #16]
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80117ac:	8909      	ldrh	r1, [r1, #8]
 80117ae:	440b      	add	r3, r1
 80117b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	da9b      	bge.n	80116ee <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80117b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d059      	beq.n	8011870 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80117bc:	4b88      	ldr	r3, [pc, #544]	@ (80119e0 <tcp_receive+0xb04>)
 80117be:	881b      	ldrh	r3, [r3, #0]
 80117c0:	461a      	mov	r2, r3
 80117c2:	4b88      	ldr	r3, [pc, #544]	@ (80119e4 <tcp_receive+0xb08>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	441a      	add	r2, r3
 80117c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117ca:	691b      	ldr	r3, [r3, #16]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	dd4d      	ble.n	8011870 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80117d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117d6:	691b      	ldr	r3, [r3, #16]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	b29a      	uxth	r2, r3
 80117dc:	4b81      	ldr	r3, [pc, #516]	@ (80119e4 <tcp_receive+0xb08>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	1ad3      	subs	r3, r2, r3
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	4b80      	ldr	r3, [pc, #512]	@ (80119e8 <tcp_receive+0xb0c>)
 80117e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80117ea:	4b7f      	ldr	r3, [pc, #508]	@ (80119e8 <tcp_receive+0xb0c>)
 80117ec:	691b      	ldr	r3, [r3, #16]
 80117ee:	899b      	ldrh	r3, [r3, #12]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fa fe2a 	bl	800c44c <lwip_htons>
 80117f8:	4603      	mov	r3, r0
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	f003 0302 	and.w	r3, r3, #2
 8011800:	2b00      	cmp	r3, #0
 8011802:	d005      	beq.n	8011810 <tcp_receive+0x934>
                inseg.len -= 1;
 8011804:	4b78      	ldr	r3, [pc, #480]	@ (80119e8 <tcp_receive+0xb0c>)
 8011806:	891b      	ldrh	r3, [r3, #8]
 8011808:	3b01      	subs	r3, #1
 801180a:	b29a      	uxth	r2, r3
 801180c:	4b76      	ldr	r3, [pc, #472]	@ (80119e8 <tcp_receive+0xb0c>)
 801180e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011810:	4b75      	ldr	r3, [pc, #468]	@ (80119e8 <tcp_receive+0xb0c>)
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	4a74      	ldr	r2, [pc, #464]	@ (80119e8 <tcp_receive+0xb0c>)
 8011816:	8912      	ldrh	r2, [r2, #8]
 8011818:	4611      	mov	r1, r2
 801181a:	4618      	mov	r0, r3
 801181c:	f7fc f8e0 	bl	800d9e0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011820:	4b71      	ldr	r3, [pc, #452]	@ (80119e8 <tcp_receive+0xb0c>)
 8011822:	891c      	ldrh	r4, [r3, #8]
 8011824:	4b70      	ldr	r3, [pc, #448]	@ (80119e8 <tcp_receive+0xb0c>)
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	899b      	ldrh	r3, [r3, #12]
 801182a:	b29b      	uxth	r3, r3
 801182c:	4618      	mov	r0, r3
 801182e:	f7fa fe0d 	bl	800c44c <lwip_htons>
 8011832:	4603      	mov	r3, r0
 8011834:	b2db      	uxtb	r3, r3
 8011836:	f003 0303 	and.w	r3, r3, #3
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <tcp_receive+0x966>
 801183e:	2301      	movs	r3, #1
 8011840:	e000      	b.n	8011844 <tcp_receive+0x968>
 8011842:	2300      	movs	r3, #0
 8011844:	4423      	add	r3, r4
 8011846:	b29a      	uxth	r2, r3
 8011848:	4b65      	ldr	r3, [pc, #404]	@ (80119e0 <tcp_receive+0xb04>)
 801184a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801184c:	4b64      	ldr	r3, [pc, #400]	@ (80119e0 <tcp_receive+0xb04>)
 801184e:	881b      	ldrh	r3, [r3, #0]
 8011850:	461a      	mov	r2, r3
 8011852:	4b64      	ldr	r3, [pc, #400]	@ (80119e4 <tcp_receive+0xb08>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	441a      	add	r2, r3
 8011858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	429a      	cmp	r2, r3
 8011860:	d006      	beq.n	8011870 <tcp_receive+0x994>
 8011862:	4b62      	ldr	r3, [pc, #392]	@ (80119ec <tcp_receive+0xb10>)
 8011864:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011868:	4961      	ldr	r1, [pc, #388]	@ (80119f0 <tcp_receive+0xb14>)
 801186a:	4862      	ldr	r0, [pc, #392]	@ (80119f4 <tcp_receive+0xb18>)
 801186c:	f006 f840 	bl	80178f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011874:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011876:	4b5a      	ldr	r3, [pc, #360]	@ (80119e0 <tcp_receive+0xb04>)
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	4b59      	ldr	r3, [pc, #356]	@ (80119e4 <tcp_receive+0xb08>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	441a      	add	r2, r3
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801188a:	4b55      	ldr	r3, [pc, #340]	@ (80119e0 <tcp_receive+0xb04>)
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	429a      	cmp	r2, r3
 8011890:	d206      	bcs.n	80118a0 <tcp_receive+0x9c4>
 8011892:	4b56      	ldr	r3, [pc, #344]	@ (80119ec <tcp_receive+0xb10>)
 8011894:	f240 6207 	movw	r2, #1543	@ 0x607
 8011898:	4957      	ldr	r1, [pc, #348]	@ (80119f8 <tcp_receive+0xb1c>)
 801189a:	4856      	ldr	r0, [pc, #344]	@ (80119f4 <tcp_receive+0xb18>)
 801189c:	f006 f828 	bl	80178f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80118a4:	4b4e      	ldr	r3, [pc, #312]	@ (80119e0 <tcp_receive+0xb04>)
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7fc ffbf 	bl	800e834 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80118b6:	4b4c      	ldr	r3, [pc, #304]	@ (80119e8 <tcp_receive+0xb0c>)
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	891b      	ldrh	r3, [r3, #8]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d006      	beq.n	80118ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80118c0:	4b49      	ldr	r3, [pc, #292]	@ (80119e8 <tcp_receive+0xb0c>)
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	4a4d      	ldr	r2, [pc, #308]	@ (80119fc <tcp_receive+0xb20>)
 80118c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80118c8:	4b47      	ldr	r3, [pc, #284]	@ (80119e8 <tcp_receive+0xb0c>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118ce:	4b46      	ldr	r3, [pc, #280]	@ (80119e8 <tcp_receive+0xb0c>)
 80118d0:	691b      	ldr	r3, [r3, #16]
 80118d2:	899b      	ldrh	r3, [r3, #12]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fa fdb8 	bl	800c44c <lwip_htons>
 80118dc:	4603      	mov	r3, r0
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	f003 0301 	and.w	r3, r3, #1
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f000 80b8 	beq.w	8011a5a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80118ea:	4b45      	ldr	r3, [pc, #276]	@ (8011a00 <tcp_receive+0xb24>)
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	f043 0320 	orr.w	r3, r3, #32
 80118f2:	b2da      	uxtb	r2, r3
 80118f4:	4b42      	ldr	r3, [pc, #264]	@ (8011a00 <tcp_receive+0xb24>)
 80118f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80118f8:	e0af      	b.n	8011a5a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011904:	691b      	ldr	r3, [r3, #16]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	4a36      	ldr	r2, [pc, #216]	@ (80119e4 <tcp_receive+0xb08>)
 801190a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	891b      	ldrh	r3, [r3, #8]
 8011910:	461c      	mov	r4, r3
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	691b      	ldr	r3, [r3, #16]
 8011916:	899b      	ldrh	r3, [r3, #12]
 8011918:	b29b      	uxth	r3, r3
 801191a:	4618      	mov	r0, r3
 801191c:	f7fa fd96 	bl	800c44c <lwip_htons>
 8011920:	4603      	mov	r3, r0
 8011922:	b2db      	uxtb	r3, r3
 8011924:	f003 0303 	and.w	r3, r3, #3
 8011928:	2b00      	cmp	r3, #0
 801192a:	d001      	beq.n	8011930 <tcp_receive+0xa54>
 801192c:	2301      	movs	r3, #1
 801192e:	e000      	b.n	8011932 <tcp_receive+0xa56>
 8011930:	2300      	movs	r3, #0
 8011932:	191a      	adds	r2, r3, r4
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011938:	441a      	add	r2, r3
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011942:	461c      	mov	r4, r3
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	891b      	ldrh	r3, [r3, #8]
 8011948:	461d      	mov	r5, r3
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	691b      	ldr	r3, [r3, #16]
 801194e:	899b      	ldrh	r3, [r3, #12]
 8011950:	b29b      	uxth	r3, r3
 8011952:	4618      	mov	r0, r3
 8011954:	f7fa fd7a 	bl	800c44c <lwip_htons>
 8011958:	4603      	mov	r3, r0
 801195a:	b2db      	uxtb	r3, r3
 801195c:	f003 0303 	and.w	r3, r3, #3
 8011960:	2b00      	cmp	r3, #0
 8011962:	d001      	beq.n	8011968 <tcp_receive+0xa8c>
 8011964:	2301      	movs	r3, #1
 8011966:	e000      	b.n	801196a <tcp_receive+0xa8e>
 8011968:	2300      	movs	r3, #0
 801196a:	442b      	add	r3, r5
 801196c:	429c      	cmp	r4, r3
 801196e:	d206      	bcs.n	801197e <tcp_receive+0xaa2>
 8011970:	4b1e      	ldr	r3, [pc, #120]	@ (80119ec <tcp_receive+0xb10>)
 8011972:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011976:	4923      	ldr	r1, [pc, #140]	@ (8011a04 <tcp_receive+0xb28>)
 8011978:	481e      	ldr	r0, [pc, #120]	@ (80119f4 <tcp_receive+0xb18>)
 801197a:	f005 ffb9 	bl	80178f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	891b      	ldrh	r3, [r3, #8]
 8011982:	461c      	mov	r4, r3
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	691b      	ldr	r3, [r3, #16]
 8011988:	899b      	ldrh	r3, [r3, #12]
 801198a:	b29b      	uxth	r3, r3
 801198c:	4618      	mov	r0, r3
 801198e:	f7fa fd5d 	bl	800c44c <lwip_htons>
 8011992:	4603      	mov	r3, r0
 8011994:	b2db      	uxtb	r3, r3
 8011996:	f003 0303 	and.w	r3, r3, #3
 801199a:	2b00      	cmp	r3, #0
 801199c:	d001      	beq.n	80119a2 <tcp_receive+0xac6>
 801199e:	2301      	movs	r3, #1
 80119a0:	e000      	b.n	80119a4 <tcp_receive+0xac8>
 80119a2:	2300      	movs	r3, #0
 80119a4:	1919      	adds	r1, r3, r4
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80119aa:	b28b      	uxth	r3, r1
 80119ac:	1ad3      	subs	r3, r2, r3
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7fc ff3d 	bl	800e834 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	891b      	ldrh	r3, [r3, #8]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d028      	beq.n	8011a16 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80119c4:	4b0d      	ldr	r3, [pc, #52]	@ (80119fc <tcp_receive+0xb20>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d01d      	beq.n	8011a08 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80119cc:	4b0b      	ldr	r3, [pc, #44]	@ (80119fc <tcp_receive+0xb20>)
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	4619      	mov	r1, r3
 80119d6:	4610      	mov	r0, r2
 80119d8:	f7fc fa4a 	bl	800de70 <pbuf_cat>
 80119dc:	e018      	b.n	8011a10 <tcp_receive+0xb34>
 80119de:	bf00      	nop
 80119e0:	20008542 	.word	0x20008542
 80119e4:	20008538 	.word	0x20008538
 80119e8:	20008514 	.word	0x20008514
 80119ec:	08019de8 	.word	0x08019de8
 80119f0:	0801a1c8 	.word	0x0801a1c8
 80119f4:	08019e34 	.word	0x08019e34
 80119f8:	0801a204 	.word	0x0801a204
 80119fc:	20008548 	.word	0x20008548
 8011a00:	20008545 	.word	0x20008545
 8011a04:	0801a224 	.word	0x0801a224
            } else {
              recv_data = cseg->p;
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	4a70      	ldr	r2, [pc, #448]	@ (8011bd0 <tcp_receive+0xcf4>)
 8011a0e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	2200      	movs	r2, #0
 8011a14:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	691b      	ldr	r3, [r3, #16]
 8011a1a:	899b      	ldrh	r3, [r3, #12]
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fa fd14 	bl	800c44c <lwip_htons>
 8011a24:	4603      	mov	r3, r0
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	f003 0301 	and.w	r3, r3, #1
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00d      	beq.n	8011a4c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011a30:	4b68      	ldr	r3, [pc, #416]	@ (8011bd4 <tcp_receive+0xcf8>)
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	f043 0320 	orr.w	r3, r3, #32
 8011a38:	b2da      	uxtb	r2, r3
 8011a3a:	4b66      	ldr	r3, [pc, #408]	@ (8011bd4 <tcp_receive+0xcf8>)
 8011a3c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	7d1b      	ldrb	r3, [r3, #20]
 8011a42:	2b04      	cmp	r3, #4
 8011a44:	d102      	bne.n	8011a4c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2207      	movs	r2, #7
 8011a4a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011a54:	68b8      	ldr	r0, [r7, #8]
 8011a56:	f7fd fbce 	bl	800f1f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d008      	beq.n	8011a74 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a66:	691b      	ldr	r3, [r3, #16]
 8011a68:	685a      	ldr	r2, [r3, #4]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	f43f af43 	beq.w	80118fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	8b5b      	ldrh	r3, [r3, #26]
 8011a78:	f003 0301 	and.w	r3, r3, #1
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00e      	beq.n	8011a9e <tcp_receive+0xbc2>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	8b5b      	ldrh	r3, [r3, #26]
 8011a84:	f023 0301 	bic.w	r3, r3, #1
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	835a      	strh	r2, [r3, #26]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	8b5b      	ldrh	r3, [r3, #26]
 8011a92:	f043 0302 	orr.w	r3, r3, #2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011a9c:	e187      	b.n	8011dae <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	8b5b      	ldrh	r3, [r3, #26]
 8011aa2:	f043 0301 	orr.w	r3, r3, #1
 8011aa6:	b29a      	uxth	r2, r3
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011aac:	e17f      	b.n	8011dae <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d106      	bne.n	8011ac4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011ab6:	4848      	ldr	r0, [pc, #288]	@ (8011bd8 <tcp_receive+0xcfc>)
 8011ab8:	f7fd fbb6 	bl	800f228 <tcp_seg_copy>
 8011abc:	4602      	mov	r2, r0
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	675a      	str	r2, [r3, #116]	@ 0x74
 8011ac2:	e16c      	b.n	8011d9e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011acc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ace:	e156      	b.n	8011d7e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad2:	691b      	ldr	r3, [r3, #16]
 8011ad4:	685a      	ldr	r2, [r3, #4]
 8011ad6:	4b41      	ldr	r3, [pc, #260]	@ (8011bdc <tcp_receive+0xd00>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d11d      	bne.n	8011b1a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011ade:	4b3e      	ldr	r3, [pc, #248]	@ (8011bd8 <tcp_receive+0xcfc>)
 8011ae0:	891a      	ldrh	r2, [r3, #8]
 8011ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae4:	891b      	ldrh	r3, [r3, #8]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	f240 814e 	bls.w	8011d88 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011aec:	483a      	ldr	r0, [pc, #232]	@ (8011bd8 <tcp_receive+0xcfc>)
 8011aee:	f7fd fb9b 	bl	800f228 <tcp_seg_copy>
 8011af2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	f000 8148 	beq.w	8011d8c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d003      	beq.n	8011b0a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b04:	697a      	ldr	r2, [r7, #20]
 8011b06:	601a      	str	r2, [r3, #0]
 8011b08:	e002      	b.n	8011b10 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	697a      	ldr	r2, [r7, #20]
 8011b0e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011b10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b12:	6978      	ldr	r0, [r7, #20]
 8011b14:	f7ff f8de 	bl	8010cd4 <tcp_oos_insert_segment>
                }
                break;
 8011b18:	e138      	b.n	8011d8c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d117      	bne.n	8011b50 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011b20:	4b2e      	ldr	r3, [pc, #184]	@ (8011bdc <tcp_receive+0xd00>)
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b26:	691b      	ldr	r3, [r3, #16]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	da57      	bge.n	8011be0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b30:	4829      	ldr	r0, [pc, #164]	@ (8011bd8 <tcp_receive+0xcfc>)
 8011b32:	f7fd fb79 	bl	800f228 <tcp_seg_copy>
 8011b36:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f000 8128 	beq.w	8011d90 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	69ba      	ldr	r2, [r7, #24]
 8011b44:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011b46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b48:	69b8      	ldr	r0, [r7, #24]
 8011b4a:	f7ff f8c3 	bl	8010cd4 <tcp_oos_insert_segment>
                  }
                  break;
 8011b4e:	e11f      	b.n	8011d90 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011b50:	4b22      	ldr	r3, [pc, #136]	@ (8011bdc <tcp_receive+0xd00>)
 8011b52:	681a      	ldr	r2, [r3, #0]
 8011b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b56:	691b      	ldr	r3, [r3, #16]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	1ad3      	subs	r3, r2, r3
 8011b5c:	3b01      	subs	r3, #1
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	db3e      	blt.n	8011be0 <tcp_receive+0xd04>
 8011b62:	4b1e      	ldr	r3, [pc, #120]	@ (8011bdc <tcp_receive+0xd00>)
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	1ad3      	subs	r3, r2, r3
 8011b6e:	3301      	adds	r3, #1
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	dc35      	bgt.n	8011be0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b74:	4818      	ldr	r0, [pc, #96]	@ (8011bd8 <tcp_receive+0xcfc>)
 8011b76:	f7fd fb57 	bl	800f228 <tcp_seg_copy>
 8011b7a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	f000 8108 	beq.w	8011d94 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b86:	691b      	ldr	r3, [r3, #16]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b8c:	8912      	ldrh	r2, [r2, #8]
 8011b8e:	441a      	add	r2, r3
 8011b90:	4b12      	ldr	r3, [pc, #72]	@ (8011bdc <tcp_receive+0xd00>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	dd12      	ble.n	8011bc0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011b9a:	4b10      	ldr	r3, [pc, #64]	@ (8011bdc <tcp_receive+0xd00>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ba2:	691b      	ldr	r3, [r3, #16]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	b29a      	uxth	r2, r3
 8011bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bb2:	685a      	ldr	r2, [r3, #4]
 8011bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bb6:	891b      	ldrh	r3, [r3, #8]
 8011bb8:	4619      	mov	r1, r3
 8011bba:	4610      	mov	r0, r2
 8011bbc:	f7fb ff10 	bl	800d9e0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bc2:	69fa      	ldr	r2, [r7, #28]
 8011bc4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011bc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011bc8:	69f8      	ldr	r0, [r7, #28]
 8011bca:	f7ff f883 	bl	8010cd4 <tcp_oos_insert_segment>
                  }
                  break;
 8011bce:	e0e1      	b.n	8011d94 <tcp_receive+0xeb8>
 8011bd0:	20008548 	.word	0x20008548
 8011bd4:	20008545 	.word	0x20008545
 8011bd8:	20008514 	.word	0x20008514
 8011bdc:	20008538 	.word	0x20008538
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	f040 80c5 	bne.w	8011d78 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011bee:	4b7f      	ldr	r3, [pc, #508]	@ (8011dec <tcp_receive+0xf10>)
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf4:	691b      	ldr	r3, [r3, #16]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	f340 80bc 	ble.w	8011d78 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c02:	691b      	ldr	r3, [r3, #16]
 8011c04:	899b      	ldrh	r3, [r3, #12]
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fa fc1f 	bl	800c44c <lwip_htons>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	f003 0301 	and.w	r3, r3, #1
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f040 80be 	bne.w	8011d98 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011c1c:	4874      	ldr	r0, [pc, #464]	@ (8011df0 <tcp_receive+0xf14>)
 8011c1e:	f7fd fb03 	bl	800f228 <tcp_seg_copy>
 8011c22:	4602      	mov	r2, r0
 8011c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f000 80b5 	beq.w	8011d9c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c34:	691b      	ldr	r3, [r3, #16]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c3a:	8912      	ldrh	r2, [r2, #8]
 8011c3c:	441a      	add	r2, r3
 8011c3e:	4b6b      	ldr	r3, [pc, #428]	@ (8011dec <tcp_receive+0xf10>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	dd12      	ble.n	8011c6e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011c48:	4b68      	ldr	r3, [pc, #416]	@ (8011dec <tcp_receive+0xf10>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	b29a      	uxth	r2, r3
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c50:	691b      	ldr	r3, [r3, #16]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c60:	685a      	ldr	r2, [r3, #4]
 8011c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c64:	891b      	ldrh	r3, [r3, #8]
 8011c66:	4619      	mov	r1, r3
 8011c68:	4610      	mov	r0, r2
 8011c6a:	f7fb feb9 	bl	800d9e0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011c6e:	4b61      	ldr	r3, [pc, #388]	@ (8011df4 <tcp_receive+0xf18>)
 8011c70:	881b      	ldrh	r3, [r3, #0]
 8011c72:	461a      	mov	r2, r3
 8011c74:	4b5d      	ldr	r3, [pc, #372]	@ (8011dec <tcp_receive+0xf10>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	441a      	add	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c7e:	6879      	ldr	r1, [r7, #4]
 8011c80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011c82:	440b      	add	r3, r1
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	f340 8088 	ble.w	8011d9c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	691b      	ldr	r3, [r3, #16]
 8011c92:	899b      	ldrh	r3, [r3, #12]
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fa fbd8 	bl	800c44c <lwip_htons>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	f003 0301 	and.w	r3, r3, #1
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d021      	beq.n	8011cec <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	691b      	ldr	r3, [r3, #16]
 8011cae:	899b      	ldrh	r3, [r3, #12]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	b21b      	sxth	r3, r3
 8011cb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011cb8:	b21c      	sxth	r4, r3
 8011cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	691b      	ldr	r3, [r3, #16]
 8011cc0:	899b      	ldrh	r3, [r3, #12]
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fa fbc1 	bl	800c44c <lwip_htons>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7fa fbb9 	bl	800c44c <lwip_htons>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	b21b      	sxth	r3, r3
 8011cde:	4323      	orrs	r3, r4
 8011ce0:	b21a      	sxth	r2, r3
 8011ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	691b      	ldr	r3, [r3, #16]
 8011ce8:	b292      	uxth	r2, r2
 8011cea:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cf0:	b29a      	uxth	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011cf6:	4413      	add	r3, r2
 8011cf8:	b299      	uxth	r1, r3
 8011cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8011dec <tcp_receive+0xf10>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	1a8a      	subs	r2, r1, r2
 8011d06:	b292      	uxth	r2, r2
 8011d08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	891b      	ldrh	r3, [r3, #8]
 8011d16:	4619      	mov	r1, r3
 8011d18:	4610      	mov	r0, r2
 8011d1a:	f7fb fe61 	bl	800d9e0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	891c      	ldrh	r4, [r3, #8]
 8011d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	691b      	ldr	r3, [r3, #16]
 8011d2a:	899b      	ldrh	r3, [r3, #12]
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fa fb8c 	bl	800c44c <lwip_htons>
 8011d34:	4603      	mov	r3, r0
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	f003 0303 	and.w	r3, r3, #3
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d001      	beq.n	8011d44 <tcp_receive+0xe68>
 8011d40:	2301      	movs	r3, #1
 8011d42:	e000      	b.n	8011d46 <tcp_receive+0xe6a>
 8011d44:	2300      	movs	r3, #0
 8011d46:	4423      	add	r3, r4
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8011df4 <tcp_receive+0xf18>)
 8011d4c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d4e:	4b29      	ldr	r3, [pc, #164]	@ (8011df4 <tcp_receive+0xf18>)
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	4b25      	ldr	r3, [pc, #148]	@ (8011dec <tcp_receive+0xf10>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	441a      	add	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011d62:	440b      	add	r3, r1
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d019      	beq.n	8011d9c <tcp_receive+0xec0>
 8011d68:	4b23      	ldr	r3, [pc, #140]	@ (8011df8 <tcp_receive+0xf1c>)
 8011d6a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011d6e:	4923      	ldr	r1, [pc, #140]	@ (8011dfc <tcp_receive+0xf20>)
 8011d70:	4823      	ldr	r0, [pc, #140]	@ (8011e00 <tcp_receive+0xf24>)
 8011d72:	f005 fdbd 	bl	80178f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011d76:	e011      	b.n	8011d9c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f47f aea5 	bne.w	8011ad0 <tcp_receive+0xbf4>
 8011d86:	e00a      	b.n	8011d9e <tcp_receive+0xec2>
                break;
 8011d88:	bf00      	nop
 8011d8a:	e008      	b.n	8011d9e <tcp_receive+0xec2>
                break;
 8011d8c:	bf00      	nop
 8011d8e:	e006      	b.n	8011d9e <tcp_receive+0xec2>
                  break;
 8011d90:	bf00      	nop
 8011d92:	e004      	b.n	8011d9e <tcp_receive+0xec2>
                  break;
 8011d94:	bf00      	nop
 8011d96:	e002      	b.n	8011d9e <tcp_receive+0xec2>
                  break;
 8011d98:	bf00      	nop
 8011d9a:	e000      	b.n	8011d9e <tcp_receive+0xec2>
                break;
 8011d9c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f001 fa44 	bl	801322c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011da4:	e003      	b.n	8011dae <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f001 fa40 	bl	801322c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011dac:	e01a      	b.n	8011de4 <tcp_receive+0xf08>
 8011dae:	e019      	b.n	8011de4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011db0:	4b0e      	ldr	r3, [pc, #56]	@ (8011dec <tcp_receive+0xf10>)
 8011db2:	681a      	ldr	r2, [r3, #0]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db8:	1ad3      	subs	r3, r2, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	db0a      	blt.n	8011dd4 <tcp_receive+0xef8>
 8011dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8011dec <tcp_receive+0xf10>)
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dc6:	6879      	ldr	r1, [r7, #4]
 8011dc8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011dca:	440b      	add	r3, r1
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	3301      	adds	r3, #1
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	dd07      	ble.n	8011de4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	8b5b      	ldrh	r3, [r3, #26]
 8011dd8:	f043 0302 	orr.w	r3, r3, #2
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011de2:	e7ff      	b.n	8011de4 <tcp_receive+0xf08>
 8011de4:	bf00      	nop
 8011de6:	3750      	adds	r7, #80	@ 0x50
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bdb0      	pop	{r4, r5, r7, pc}
 8011dec:	20008538 	.word	0x20008538
 8011df0:	20008514 	.word	0x20008514
 8011df4:	20008542 	.word	0x20008542
 8011df8:	08019de8 	.word	0x08019de8
 8011dfc:	0801a190 	.word	0x0801a190
 8011e00:	08019e34 	.word	0x08019e34

08011e04 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011e0a:	4b15      	ldr	r3, [pc, #84]	@ (8011e60 <tcp_get_next_optbyte+0x5c>)
 8011e0c:	881b      	ldrh	r3, [r3, #0]
 8011e0e:	1c5a      	adds	r2, r3, #1
 8011e10:	b291      	uxth	r1, r2
 8011e12:	4a13      	ldr	r2, [pc, #76]	@ (8011e60 <tcp_get_next_optbyte+0x5c>)
 8011e14:	8011      	strh	r1, [r2, #0]
 8011e16:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011e18:	4b12      	ldr	r3, [pc, #72]	@ (8011e64 <tcp_get_next_optbyte+0x60>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d004      	beq.n	8011e2a <tcp_get_next_optbyte+0x26>
 8011e20:	4b11      	ldr	r3, [pc, #68]	@ (8011e68 <tcp_get_next_optbyte+0x64>)
 8011e22:	881b      	ldrh	r3, [r3, #0]
 8011e24:	88fa      	ldrh	r2, [r7, #6]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d208      	bcs.n	8011e3c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011e2a:	4b10      	ldr	r3, [pc, #64]	@ (8011e6c <tcp_get_next_optbyte+0x68>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	3314      	adds	r3, #20
 8011e30:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011e32:	88fb      	ldrh	r3, [r7, #6]
 8011e34:	683a      	ldr	r2, [r7, #0]
 8011e36:	4413      	add	r3, r2
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	e00b      	b.n	8011e54 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011e3c:	88fb      	ldrh	r3, [r7, #6]
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	4b09      	ldr	r3, [pc, #36]	@ (8011e68 <tcp_get_next_optbyte+0x64>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011e4a:	4b06      	ldr	r3, [pc, #24]	@ (8011e64 <tcp_get_next_optbyte+0x60>)
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	797b      	ldrb	r3, [r7, #5]
 8011e50:	4413      	add	r3, r2
 8011e52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr
 8011e60:	20008534 	.word	0x20008534
 8011e64:	20008530 	.word	0x20008530
 8011e68:	2000852e 	.word	0x2000852e
 8011e6c:	20008528 	.word	0x20008528

08011e70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d106      	bne.n	8011e8c <tcp_parseopt+0x1c>
 8011e7e:	4b32      	ldr	r3, [pc, #200]	@ (8011f48 <tcp_parseopt+0xd8>)
 8011e80:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011e84:	4931      	ldr	r1, [pc, #196]	@ (8011f4c <tcp_parseopt+0xdc>)
 8011e86:	4832      	ldr	r0, [pc, #200]	@ (8011f50 <tcp_parseopt+0xe0>)
 8011e88:	f005 fd32 	bl	80178f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011e8c:	4b31      	ldr	r3, [pc, #196]	@ (8011f54 <tcp_parseopt+0xe4>)
 8011e8e:	881b      	ldrh	r3, [r3, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d056      	beq.n	8011f42 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011e94:	4b30      	ldr	r3, [pc, #192]	@ (8011f58 <tcp_parseopt+0xe8>)
 8011e96:	2200      	movs	r2, #0
 8011e98:	801a      	strh	r2, [r3, #0]
 8011e9a:	e046      	b.n	8011f2a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011e9c:	f7ff ffb2 	bl	8011e04 <tcp_get_next_optbyte>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011ea4:	7bfb      	ldrb	r3, [r7, #15]
 8011ea6:	2b02      	cmp	r3, #2
 8011ea8:	d006      	beq.n	8011eb8 <tcp_parseopt+0x48>
 8011eaa:	2b02      	cmp	r3, #2
 8011eac:	dc2a      	bgt.n	8011f04 <tcp_parseopt+0x94>
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d042      	beq.n	8011f38 <tcp_parseopt+0xc8>
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d038      	beq.n	8011f28 <tcp_parseopt+0xb8>
 8011eb6:	e025      	b.n	8011f04 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011eb8:	f7ff ffa4 	bl	8011e04 <tcp_get_next_optbyte>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b04      	cmp	r3, #4
 8011ec0:	d13c      	bne.n	8011f3c <tcp_parseopt+0xcc>
 8011ec2:	4b25      	ldr	r3, [pc, #148]	@ (8011f58 <tcp_parseopt+0xe8>)
 8011ec4:	881b      	ldrh	r3, [r3, #0]
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	4a22      	ldr	r2, [pc, #136]	@ (8011f54 <tcp_parseopt+0xe4>)
 8011eca:	8812      	ldrh	r2, [r2, #0]
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	da35      	bge.n	8011f3c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011ed0:	f7ff ff98 	bl	8011e04 <tcp_get_next_optbyte>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	021b      	lsls	r3, r3, #8
 8011ed8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011eda:	f7ff ff93 	bl	8011e04 <tcp_get_next_optbyte>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	89bb      	ldrh	r3, [r7, #12]
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011ee8:	89bb      	ldrh	r3, [r7, #12]
 8011eea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011eee:	d804      	bhi.n	8011efa <tcp_parseopt+0x8a>
 8011ef0:	89bb      	ldrh	r3, [r7, #12]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d001      	beq.n	8011efa <tcp_parseopt+0x8a>
 8011ef6:	89ba      	ldrh	r2, [r7, #12]
 8011ef8:	e001      	b.n	8011efe <tcp_parseopt+0x8e>
 8011efa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011f02:	e012      	b.n	8011f2a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011f04:	f7ff ff7e 	bl	8011e04 <tcp_get_next_optbyte>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011f0c:	7afb      	ldrb	r3, [r7, #11]
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d916      	bls.n	8011f40 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011f12:	7afb      	ldrb	r3, [r7, #11]
 8011f14:	b29a      	uxth	r2, r3
 8011f16:	4b10      	ldr	r3, [pc, #64]	@ (8011f58 <tcp_parseopt+0xe8>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	4413      	add	r3, r2
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	3b02      	subs	r3, #2
 8011f20:	b29a      	uxth	r2, r3
 8011f22:	4b0d      	ldr	r3, [pc, #52]	@ (8011f58 <tcp_parseopt+0xe8>)
 8011f24:	801a      	strh	r2, [r3, #0]
 8011f26:	e000      	b.n	8011f2a <tcp_parseopt+0xba>
          break;
 8011f28:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f58 <tcp_parseopt+0xe8>)
 8011f2c:	881a      	ldrh	r2, [r3, #0]
 8011f2e:	4b09      	ldr	r3, [pc, #36]	@ (8011f54 <tcp_parseopt+0xe4>)
 8011f30:	881b      	ldrh	r3, [r3, #0]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d3b2      	bcc.n	8011e9c <tcp_parseopt+0x2c>
 8011f36:	e004      	b.n	8011f42 <tcp_parseopt+0xd2>
          return;
 8011f38:	bf00      	nop
 8011f3a:	e002      	b.n	8011f42 <tcp_parseopt+0xd2>
            return;
 8011f3c:	bf00      	nop
 8011f3e:	e000      	b.n	8011f42 <tcp_parseopt+0xd2>
            return;
 8011f40:	bf00      	nop
      }
    }
  }
}
 8011f42:	3710      	adds	r7, #16
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	08019de8 	.word	0x08019de8
 8011f4c:	0801a24c 	.word	0x0801a24c
 8011f50:	08019e34 	.word	0x08019e34
 8011f54:	2000852c 	.word	0x2000852c
 8011f58:	20008534 	.word	0x20008534

08011f5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011f60:	4b05      	ldr	r3, [pc, #20]	@ (8011f78 <tcp_trigger_input_pcb_close+0x1c>)
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	f043 0310 	orr.w	r3, r3, #16
 8011f68:	b2da      	uxtb	r2, r3
 8011f6a:	4b03      	ldr	r3, [pc, #12]	@ (8011f78 <tcp_trigger_input_pcb_close+0x1c>)
 8011f6c:	701a      	strb	r2, [r3, #0]
}
 8011f6e:	bf00      	nop
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr
 8011f78:	20008545 	.word	0x20008545

08011f7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b084      	sub	sp, #16
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00a      	beq.n	8011fa4 <tcp_route+0x28>
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	7a1b      	ldrb	r3, [r3, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d006      	beq.n	8011fa4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	7a1b      	ldrb	r3, [r3, #8]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7fb fb46 	bl	800d62c <netif_get_by_index>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	e003      	b.n	8011fac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f003 fc0f 	bl	80157c8 <ip4_route>
 8011faa:	4603      	mov	r3, r0
  }
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011fb4:	b590      	push	{r4, r7, lr}
 8011fb6:	b087      	sub	sp, #28
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	60f8      	str	r0, [r7, #12]
 8011fbc:	60b9      	str	r1, [r7, #8]
 8011fbe:	603b      	str	r3, [r7, #0]
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d105      	bne.n	8011fd6 <tcp_create_segment+0x22>
 8011fca:	4b45      	ldr	r3, [pc, #276]	@ (80120e0 <tcp_create_segment+0x12c>)
 8011fcc:	22a3      	movs	r2, #163	@ 0xa3
 8011fce:	4945      	ldr	r1, [pc, #276]	@ (80120e4 <tcp_create_segment+0x130>)
 8011fd0:	4845      	ldr	r0, [pc, #276]	@ (80120e8 <tcp_create_segment+0x134>)
 8011fd2:	f005 fc8d 	bl	80178f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d105      	bne.n	8011fe8 <tcp_create_segment+0x34>
 8011fdc:	4b40      	ldr	r3, [pc, #256]	@ (80120e0 <tcp_create_segment+0x12c>)
 8011fde:	22a4      	movs	r2, #164	@ 0xa4
 8011fe0:	4942      	ldr	r1, [pc, #264]	@ (80120ec <tcp_create_segment+0x138>)
 8011fe2:	4841      	ldr	r0, [pc, #260]	@ (80120e8 <tcp_create_segment+0x134>)
 8011fe4:	f005 fc84 	bl	80178f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011fe8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	f003 0304 	and.w	r3, r3, #4
 8011ff4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011ff6:	2003      	movs	r0, #3
 8011ff8:	f7fa fe9c 	bl	800cd34 <memp_malloc>
 8011ffc:	6138      	str	r0, [r7, #16]
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d104      	bne.n	801200e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012004:	68b8      	ldr	r0, [r7, #8]
 8012006:	f7fb fe71 	bl	800dcec <pbuf_free>
    return NULL;
 801200a:	2300      	movs	r3, #0
 801200c:	e063      	b.n	80120d6 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 801200e:	693b      	ldr	r3, [r7, #16]
 8012010:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012014:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	2200      	movs	r2, #0
 801201a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	68ba      	ldr	r2, [r7, #8]
 8012020:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	891a      	ldrh	r2, [r3, #8]
 8012026:	7dfb      	ldrb	r3, [r7, #23]
 8012028:	b29b      	uxth	r3, r3
 801202a:	429a      	cmp	r2, r3
 801202c:	d205      	bcs.n	801203a <tcp_create_segment+0x86>
 801202e:	4b2c      	ldr	r3, [pc, #176]	@ (80120e0 <tcp_create_segment+0x12c>)
 8012030:	22b0      	movs	r2, #176	@ 0xb0
 8012032:	492f      	ldr	r1, [pc, #188]	@ (80120f0 <tcp_create_segment+0x13c>)
 8012034:	482c      	ldr	r0, [pc, #176]	@ (80120e8 <tcp_create_segment+0x134>)
 8012036:	f005 fc5b 	bl	80178f0 <iprintf>
  seg->len = p->tot_len - optlen;
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	891a      	ldrh	r2, [r3, #8]
 801203e:	7dfb      	ldrb	r3, [r7, #23]
 8012040:	b29b      	uxth	r3, r3
 8012042:	1ad3      	subs	r3, r2, r3
 8012044:	b29a      	uxth	r2, r3
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	2200      	movs	r2, #0
 801204e:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012050:	2114      	movs	r1, #20
 8012052:	68b8      	ldr	r0, [r7, #8]
 8012054:	f7fb fdb4 	bl	800dbc0 <pbuf_add_header>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d004      	beq.n	8012068 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801205e:	6938      	ldr	r0, [r7, #16]
 8012060:	f7fd f8c9 	bl	800f1f6 <tcp_seg_free>
    return NULL;
 8012064:	2300      	movs	r3, #0
 8012066:	e036      	b.n	80120d6 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	685a      	ldr	r2, [r3, #4]
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	8ada      	ldrh	r2, [r3, #22]
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	691c      	ldr	r4, [r3, #16]
 801207a:	4610      	mov	r0, r2
 801207c:	f7fa f9e6 	bl	800c44c <lwip_htons>
 8012080:	4603      	mov	r3, r0
 8012082:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	8b1a      	ldrh	r2, [r3, #24]
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	691c      	ldr	r4, [r3, #16]
 801208c:	4610      	mov	r0, r2
 801208e:	f7fa f9dd 	bl	800c44c <lwip_htons>
 8012092:	4603      	mov	r3, r0
 8012094:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	691c      	ldr	r4, [r3, #16]
 801209a:	6838      	ldr	r0, [r7, #0]
 801209c:	f7fa f9ec 	bl	800c478 <lwip_htonl>
 80120a0:	4603      	mov	r3, r0
 80120a2:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80120a4:	7dfb      	ldrb	r3, [r7, #23]
 80120a6:	089b      	lsrs	r3, r3, #2
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	3305      	adds	r3, #5
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	031b      	lsls	r3, r3, #12
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	79fb      	ldrb	r3, [r7, #7]
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	4313      	orrs	r3, r2
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	691c      	ldr	r4, [r3, #16]
 80120be:	4610      	mov	r0, r2
 80120c0:	f7fa f9c4 	bl	800c44c <lwip_htons>
 80120c4:	4603      	mov	r3, r0
 80120c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	2200      	movs	r2, #0
 80120ce:	749a      	strb	r2, [r3, #18]
 80120d0:	2200      	movs	r2, #0
 80120d2:	74da      	strb	r2, [r3, #19]
  return seg;
 80120d4:	693b      	ldr	r3, [r7, #16]
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	371c      	adds	r7, #28
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd90      	pop	{r4, r7, pc}
 80120de:	bf00      	nop
 80120e0:	0801a268 	.word	0x0801a268
 80120e4:	0801a29c 	.word	0x0801a29c
 80120e8:	0801a2bc 	.word	0x0801a2bc
 80120ec:	0801a2e4 	.word	0x0801a2e4
 80120f0:	0801a308 	.word	0x0801a308

080120f4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80120f4:	b590      	push	{r4, r7, lr}
 80120f6:	b08b      	sub	sp, #44	@ 0x2c
 80120f8:	af02      	add	r7, sp, #8
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	460b      	mov	r3, r1
 80120fe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012100:	2300      	movs	r3, #0
 8012102:	61bb      	str	r3, [r7, #24]
 8012104:	2300      	movs	r3, #0
 8012106:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012108:	2300      	movs	r3, #0
 801210a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <tcp_split_unsent_seg+0x2c>
 8012112:	4b97      	ldr	r3, [pc, #604]	@ (8012370 <tcp_split_unsent_seg+0x27c>)
 8012114:	f240 324b 	movw	r2, #843	@ 0x34b
 8012118:	4996      	ldr	r1, [pc, #600]	@ (8012374 <tcp_split_unsent_seg+0x280>)
 801211a:	4897      	ldr	r0, [pc, #604]	@ (8012378 <tcp_split_unsent_seg+0x284>)
 801211c:	f005 fbe8 	bl	80178f0 <iprintf>

  useg = pcb->unsent;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012124:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d102      	bne.n	8012132 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801212c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012130:	e119      	b.n	8012366 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8012132:	887b      	ldrh	r3, [r7, #2]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d109      	bne.n	801214c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012138:	4b8d      	ldr	r3, [pc, #564]	@ (8012370 <tcp_split_unsent_seg+0x27c>)
 801213a:	f240 3253 	movw	r2, #851	@ 0x353
 801213e:	498f      	ldr	r1, [pc, #572]	@ (801237c <tcp_split_unsent_seg+0x288>)
 8012140:	488d      	ldr	r0, [pc, #564]	@ (8012378 <tcp_split_unsent_seg+0x284>)
 8012142:	f005 fbd5 	bl	80178f0 <iprintf>
    return ERR_VAL;
 8012146:	f06f 0305 	mvn.w	r3, #5
 801214a:	e10c      	b.n	8012366 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	891b      	ldrh	r3, [r3, #8]
 8012150:	887a      	ldrh	r2, [r7, #2]
 8012152:	429a      	cmp	r2, r3
 8012154:	d301      	bcc.n	801215a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012156:	2300      	movs	r3, #0
 8012158:	e105      	b.n	8012366 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801215e:	887a      	ldrh	r2, [r7, #2]
 8012160:	429a      	cmp	r2, r3
 8012162:	d906      	bls.n	8012172 <tcp_split_unsent_seg+0x7e>
 8012164:	4b82      	ldr	r3, [pc, #520]	@ (8012370 <tcp_split_unsent_seg+0x27c>)
 8012166:	f240 325b 	movw	r2, #859	@ 0x35b
 801216a:	4985      	ldr	r1, [pc, #532]	@ (8012380 <tcp_split_unsent_seg+0x28c>)
 801216c:	4882      	ldr	r0, [pc, #520]	@ (8012378 <tcp_split_unsent_seg+0x284>)
 801216e:	f005 fbbf 	bl	80178f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	891b      	ldrh	r3, [r3, #8]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d106      	bne.n	8012188 <tcp_split_unsent_seg+0x94>
 801217a:	4b7d      	ldr	r3, [pc, #500]	@ (8012370 <tcp_split_unsent_seg+0x27c>)
 801217c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012180:	4980      	ldr	r1, [pc, #512]	@ (8012384 <tcp_split_unsent_seg+0x290>)
 8012182:	487d      	ldr	r0, [pc, #500]	@ (8012378 <tcp_split_unsent_seg+0x284>)
 8012184:	f005 fbb4 	bl	80178f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	7b1b      	ldrb	r3, [r3, #12]
 801218c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801218e:	7bfb      	ldrb	r3, [r7, #15]
 8012190:	009b      	lsls	r3, r3, #2
 8012192:	b2db      	uxtb	r3, r3
 8012194:	f003 0304 	and.w	r3, r3, #4
 8012198:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	891a      	ldrh	r2, [r3, #8]
 801219e:	887b      	ldrh	r3, [r7, #2]
 80121a0:	1ad3      	subs	r3, r2, r3
 80121a2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80121a4:	7bbb      	ldrb	r3, [r7, #14]
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	89bb      	ldrh	r3, [r7, #12]
 80121aa:	4413      	add	r3, r2
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80121b2:	4619      	mov	r1, r3
 80121b4:	2036      	movs	r0, #54	@ 0x36
 80121b6:	f7fb fab5 	bl	800d724 <pbuf_alloc>
 80121ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	f000 80ba 	beq.w	8012338 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	891a      	ldrh	r2, [r3, #8]
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	891b      	ldrh	r3, [r3, #8]
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	887b      	ldrh	r3, [r7, #2]
 80121d4:	4413      	add	r3, r2
 80121d6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	6858      	ldr	r0, [r3, #4]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	685a      	ldr	r2, [r3, #4]
 80121e0:	7bbb      	ldrb	r3, [r7, #14]
 80121e2:	18d1      	adds	r1, r2, r3
 80121e4:	897b      	ldrh	r3, [r7, #10]
 80121e6:	89ba      	ldrh	r2, [r7, #12]
 80121e8:	f7fb ff7a 	bl	800e0e0 <pbuf_copy_partial>
 80121ec:	4603      	mov	r3, r0
 80121ee:	461a      	mov	r2, r3
 80121f0:	89bb      	ldrh	r3, [r7, #12]
 80121f2:	4293      	cmp	r3, r2
 80121f4:	f040 80a2 	bne.w	801233c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	691b      	ldr	r3, [r3, #16]
 80121fc:	899b      	ldrh	r3, [r3, #12]
 80121fe:	b29b      	uxth	r3, r3
 8012200:	4618      	mov	r0, r3
 8012202:	f7fa f923 	bl	800c44c <lwip_htons>
 8012206:	4603      	mov	r3, r0
 8012208:	b2db      	uxtb	r3, r3
 801220a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801220e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012210:	2300      	movs	r3, #0
 8012212:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8012214:	7ffb      	ldrb	r3, [r7, #31]
 8012216:	f003 0308 	and.w	r3, r3, #8
 801221a:	2b00      	cmp	r3, #0
 801221c:	d007      	beq.n	801222e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801221e:	7ffb      	ldrb	r3, [r7, #31]
 8012220:	f023 0308 	bic.w	r3, r3, #8
 8012224:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8012226:	7fbb      	ldrb	r3, [r7, #30]
 8012228:	f043 0308 	orr.w	r3, r3, #8
 801222c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801222e:	7ffb      	ldrb	r3, [r7, #31]
 8012230:	f003 0301 	and.w	r3, r3, #1
 8012234:	2b00      	cmp	r3, #0
 8012236:	d007      	beq.n	8012248 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012238:	7ffb      	ldrb	r3, [r7, #31]
 801223a:	f023 0301 	bic.w	r3, r3, #1
 801223e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8012240:	7fbb      	ldrb	r3, [r7, #30]
 8012242:	f043 0301 	orr.w	r3, r3, #1
 8012246:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	691b      	ldr	r3, [r3, #16]
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	4618      	mov	r0, r3
 8012250:	f7fa f912 	bl	800c478 <lwip_htonl>
 8012254:	4602      	mov	r2, r0
 8012256:	887b      	ldrh	r3, [r7, #2]
 8012258:	18d1      	adds	r1, r2, r3
 801225a:	7fba      	ldrb	r2, [r7, #30]
 801225c:	7bfb      	ldrb	r3, [r7, #15]
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	460b      	mov	r3, r1
 8012262:	6939      	ldr	r1, [r7, #16]
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f7ff fea5 	bl	8011fb4 <tcp_create_segment>
 801226a:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d066      	beq.n	8012340 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	4618      	mov	r0, r3
 8012278:	f7fb fdc0 	bl	800ddfc <pbuf_clen>
 801227c:	4603      	mov	r3, r0
 801227e:	461a      	mov	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012286:	1a9b      	subs	r3, r3, r2
 8012288:	b29a      	uxth	r2, r3
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	6858      	ldr	r0, [r3, #4]
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	891a      	ldrh	r2, [r3, #8]
 801229a:	89bb      	ldrh	r3, [r7, #12]
 801229c:	1ad3      	subs	r3, r2, r3
 801229e:	b29b      	uxth	r3, r3
 80122a0:	4619      	mov	r1, r3
 80122a2:	f7fb fb9d 	bl	800d9e0 <pbuf_realloc>
  useg->len -= remainder;
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	891a      	ldrh	r2, [r3, #8]
 80122aa:	89bb      	ldrh	r3, [r7, #12]
 80122ac:	1ad3      	subs	r3, r2, r3
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	691b      	ldr	r3, [r3, #16]
 80122b8:	899b      	ldrh	r3, [r3, #12]
 80122ba:	b29c      	uxth	r4, r3
 80122bc:	7ffb      	ldrb	r3, [r7, #31]
 80122be:	b29b      	uxth	r3, r3
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7fa f8c3 	bl	800c44c <lwip_htons>
 80122c6:	4603      	mov	r3, r0
 80122c8:	461a      	mov	r2, r3
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	691b      	ldr	r3, [r3, #16]
 80122ce:	4322      	orrs	r2, r4
 80122d0:	b292      	uxth	r2, r2
 80122d2:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	2200      	movs	r2, #0
 80122d8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fb fd8c 	bl	800ddfc <pbuf_clen>
 80122e4:	4603      	mov	r3, r0
 80122e6:	461a      	mov	r2, r3
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80122ee:	4413      	add	r3, r2
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7fb fd7d 	bl	800ddfc <pbuf_clen>
 8012302:	4603      	mov	r3, r0
 8012304:	461a      	mov	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801230c:	4413      	add	r3, r2
 801230e:	b29a      	uxth	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	69bb      	ldr	r3, [r7, #24]
 801231c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	69ba      	ldr	r2, [r7, #24]
 8012322:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d103      	bne.n	8012334 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2200      	movs	r2, #0
 8012330:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012334:	2300      	movs	r3, #0
 8012336:	e016      	b.n	8012366 <tcp_split_unsent_seg+0x272>
    goto memerr;
 8012338:	bf00      	nop
 801233a:	e002      	b.n	8012342 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801233c:	bf00      	nop
 801233e:	e000      	b.n	8012342 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8012340:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d006      	beq.n	8012356 <tcp_split_unsent_seg+0x262>
 8012348:	4b09      	ldr	r3, [pc, #36]	@ (8012370 <tcp_split_unsent_seg+0x27c>)
 801234a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801234e:	490e      	ldr	r1, [pc, #56]	@ (8012388 <tcp_split_unsent_seg+0x294>)
 8012350:	4809      	ldr	r0, [pc, #36]	@ (8012378 <tcp_split_unsent_seg+0x284>)
 8012352:	f005 facd 	bl	80178f0 <iprintf>
  if (p != NULL) {
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801235c:	6938      	ldr	r0, [r7, #16]
 801235e:	f7fb fcc5 	bl	800dcec <pbuf_free>
  }

  return ERR_MEM;
 8012362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8012366:	4618      	mov	r0, r3
 8012368:	3724      	adds	r7, #36	@ 0x24
 801236a:	46bd      	mov	sp, r7
 801236c:	bd90      	pop	{r4, r7, pc}
 801236e:	bf00      	nop
 8012370:	0801a268 	.word	0x0801a268
 8012374:	0801a658 	.word	0x0801a658
 8012378:	0801a2bc 	.word	0x0801a2bc
 801237c:	0801a67c 	.word	0x0801a67c
 8012380:	0801a6a0 	.word	0x0801a6a0
 8012384:	0801a6b0 	.word	0x0801a6b0
 8012388:	0801a6c0 	.word	0x0801a6c0

0801238c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801238c:	b590      	push	{r4, r7, lr}
 801238e:	b085      	sub	sp, #20
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d106      	bne.n	80123a8 <tcp_send_fin+0x1c>
 801239a:	4b21      	ldr	r3, [pc, #132]	@ (8012420 <tcp_send_fin+0x94>)
 801239c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80123a0:	4920      	ldr	r1, [pc, #128]	@ (8012424 <tcp_send_fin+0x98>)
 80123a2:	4821      	ldr	r0, [pc, #132]	@ (8012428 <tcp_send_fin+0x9c>)
 80123a4:	f005 faa4 	bl	80178f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d02e      	beq.n	801240e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123b4:	60fb      	str	r3, [r7, #12]
 80123b6:	e002      	b.n	80123be <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1f8      	bne.n	80123b8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	691b      	ldr	r3, [r3, #16]
 80123ca:	899b      	ldrh	r3, [r3, #12]
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fa f83c 	bl	800c44c <lwip_htons>
 80123d4:	4603      	mov	r3, r0
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	f003 0307 	and.w	r3, r3, #7
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d116      	bne.n	801240e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	691b      	ldr	r3, [r3, #16]
 80123e4:	899b      	ldrh	r3, [r3, #12]
 80123e6:	b29c      	uxth	r4, r3
 80123e8:	2001      	movs	r0, #1
 80123ea:	f7fa f82f 	bl	800c44c <lwip_htons>
 80123ee:	4603      	mov	r3, r0
 80123f0:	461a      	mov	r2, r3
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	691b      	ldr	r3, [r3, #16]
 80123f6:	4322      	orrs	r2, r4
 80123f8:	b292      	uxth	r2, r2
 80123fa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	8b5b      	ldrh	r3, [r3, #26]
 8012400:	f043 0320 	orr.w	r3, r3, #32
 8012404:	b29a      	uxth	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801240a:	2300      	movs	r3, #0
 801240c:	e004      	b.n	8012418 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801240e:	2101      	movs	r1, #1
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f000 f80b 	bl	801242c <tcp_enqueue_flags>
 8012416:	4603      	mov	r3, r0
}
 8012418:	4618      	mov	r0, r3
 801241a:	3714      	adds	r7, #20
 801241c:	46bd      	mov	sp, r7
 801241e:	bd90      	pop	{r4, r7, pc}
 8012420:	0801a268 	.word	0x0801a268
 8012424:	0801a6cc 	.word	0x0801a6cc
 8012428:	0801a2bc 	.word	0x0801a2bc

0801242c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b088      	sub	sp, #32
 8012430:	af02      	add	r7, sp, #8
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	460b      	mov	r3, r1
 8012436:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012438:	2300      	movs	r3, #0
 801243a:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801243c:	2300      	movs	r3, #0
 801243e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012440:	78fb      	ldrb	r3, [r7, #3]
 8012442:	f003 0303 	and.w	r3, r3, #3
 8012446:	2b00      	cmp	r3, #0
 8012448:	d106      	bne.n	8012458 <tcp_enqueue_flags+0x2c>
 801244a:	4b67      	ldr	r3, [pc, #412]	@ (80125e8 <tcp_enqueue_flags+0x1bc>)
 801244c:	f240 4211 	movw	r2, #1041	@ 0x411
 8012450:	4966      	ldr	r1, [pc, #408]	@ (80125ec <tcp_enqueue_flags+0x1c0>)
 8012452:	4867      	ldr	r0, [pc, #412]	@ (80125f0 <tcp_enqueue_flags+0x1c4>)
 8012454:	f005 fa4c 	bl	80178f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d106      	bne.n	801246c <tcp_enqueue_flags+0x40>
 801245e:	4b62      	ldr	r3, [pc, #392]	@ (80125e8 <tcp_enqueue_flags+0x1bc>)
 8012460:	f240 4213 	movw	r2, #1043	@ 0x413
 8012464:	4963      	ldr	r1, [pc, #396]	@ (80125f4 <tcp_enqueue_flags+0x1c8>)
 8012466:	4862      	ldr	r0, [pc, #392]	@ (80125f0 <tcp_enqueue_flags+0x1c4>)
 8012468:	f005 fa42 	bl	80178f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801246c:	78fb      	ldrb	r3, [r7, #3]
 801246e:	f003 0302 	and.w	r3, r3, #2
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012476:	2301      	movs	r3, #1
 8012478:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801247a:	7dfb      	ldrb	r3, [r7, #23]
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	b2db      	uxtb	r3, r3
 8012480:	f003 0304 	and.w	r3, r3, #4
 8012484:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012486:	7dbb      	ldrb	r3, [r7, #22]
 8012488:	b29b      	uxth	r3, r3
 801248a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801248e:	4619      	mov	r1, r3
 8012490:	2036      	movs	r0, #54	@ 0x36
 8012492:	f7fb f947 	bl	800d724 <pbuf_alloc>
 8012496:	60f8      	str	r0, [r7, #12]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d109      	bne.n	80124b2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	8b5b      	ldrh	r3, [r3, #26]
 80124a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80124ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124b0:	e095      	b.n	80125de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	895a      	ldrh	r2, [r3, #10]
 80124b6:	7dbb      	ldrb	r3, [r7, #22]
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d206      	bcs.n	80124cc <tcp_enqueue_flags+0xa0>
 80124be:	4b4a      	ldr	r3, [pc, #296]	@ (80125e8 <tcp_enqueue_flags+0x1bc>)
 80124c0:	f240 4239 	movw	r2, #1081	@ 0x439
 80124c4:	494c      	ldr	r1, [pc, #304]	@ (80125f8 <tcp_enqueue_flags+0x1cc>)
 80124c6:	484a      	ldr	r0, [pc, #296]	@ (80125f0 <tcp_enqueue_flags+0x1c4>)
 80124c8:	f005 fa12 	bl	80178f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80124d0:	78fa      	ldrb	r2, [r7, #3]
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
 80124d4:	9300      	str	r3, [sp, #0]
 80124d6:	460b      	mov	r3, r1
 80124d8:	68f9      	ldr	r1, [r7, #12]
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f7ff fd6a 	bl	8011fb4 <tcp_create_segment>
 80124e0:	60b8      	str	r0, [r7, #8]
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d109      	bne.n	80124fc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	8b5b      	ldrh	r3, [r3, #26]
 80124ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80124f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124fa:	e070      	b.n	80125de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	691b      	ldr	r3, [r3, #16]
 8012500:	f003 0303 	and.w	r3, r3, #3
 8012504:	2b00      	cmp	r3, #0
 8012506:	d006      	beq.n	8012516 <tcp_enqueue_flags+0xea>
 8012508:	4b37      	ldr	r3, [pc, #220]	@ (80125e8 <tcp_enqueue_flags+0x1bc>)
 801250a:	f240 4242 	movw	r2, #1090	@ 0x442
 801250e:	493b      	ldr	r1, [pc, #236]	@ (80125fc <tcp_enqueue_flags+0x1d0>)
 8012510:	4837      	ldr	r0, [pc, #220]	@ (80125f0 <tcp_enqueue_flags+0x1c4>)
 8012512:	f005 f9ed 	bl	80178f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	891b      	ldrh	r3, [r3, #8]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d006      	beq.n	801252c <tcp_enqueue_flags+0x100>
 801251e:	4b32      	ldr	r3, [pc, #200]	@ (80125e8 <tcp_enqueue_flags+0x1bc>)
 8012520:	f240 4243 	movw	r2, #1091	@ 0x443
 8012524:	4936      	ldr	r1, [pc, #216]	@ (8012600 <tcp_enqueue_flags+0x1d4>)
 8012526:	4832      	ldr	r0, [pc, #200]	@ (80125f0 <tcp_enqueue_flags+0x1c4>)
 8012528:	f005 f9e2 	bl	80178f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012530:	2b00      	cmp	r3, #0
 8012532:	d103      	bne.n	801253c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	68ba      	ldr	r2, [r7, #8]
 8012538:	66da      	str	r2, [r3, #108]	@ 0x6c
 801253a:	e00d      	b.n	8012558 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012540:	613b      	str	r3, [r7, #16]
 8012542:	e002      	b.n	801254a <tcp_enqueue_flags+0x11e>
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	613b      	str	r3, [r7, #16]
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d1f8      	bne.n	8012544 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	68ba      	ldr	r2, [r7, #8]
 8012556:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2200      	movs	r2, #0
 801255c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012560:	78fb      	ldrb	r3, [r7, #3]
 8012562:	f003 0302 	and.w	r3, r3, #2
 8012566:	2b00      	cmp	r3, #0
 8012568:	d104      	bne.n	8012574 <tcp_enqueue_flags+0x148>
 801256a:	78fb      	ldrb	r3, [r7, #3]
 801256c:	f003 0301 	and.w	r3, r3, #1
 8012570:	2b00      	cmp	r3, #0
 8012572:	d004      	beq.n	801257e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012578:	1c5a      	adds	r2, r3, #1
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801257e:	78fb      	ldrb	r3, [r7, #3]
 8012580:	f003 0301 	and.w	r3, r3, #1
 8012584:	2b00      	cmp	r3, #0
 8012586:	d006      	beq.n	8012596 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	8b5b      	ldrh	r3, [r3, #26]
 801258c:	f043 0320 	orr.w	r3, r3, #32
 8012590:	b29a      	uxth	r2, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	4618      	mov	r0, r3
 801259c:	f7fb fc2e 	bl	800ddfc <pbuf_clen>
 80125a0:	4603      	mov	r3, r0
 80125a2:	461a      	mov	r2, r3
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125aa:	4413      	add	r3, r2
 80125ac:	b29a      	uxth	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d00e      	beq.n	80125dc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d10a      	bne.n	80125dc <tcp_enqueue_flags+0x1b0>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d106      	bne.n	80125dc <tcp_enqueue_flags+0x1b0>
 80125ce:	4b06      	ldr	r3, [pc, #24]	@ (80125e8 <tcp_enqueue_flags+0x1bc>)
 80125d0:	f240 4265 	movw	r2, #1125	@ 0x465
 80125d4:	490b      	ldr	r1, [pc, #44]	@ (8012604 <tcp_enqueue_flags+0x1d8>)
 80125d6:	4806      	ldr	r0, [pc, #24]	@ (80125f0 <tcp_enqueue_flags+0x1c4>)
 80125d8:	f005 f98a 	bl	80178f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80125dc:	2300      	movs	r3, #0
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3718      	adds	r7, #24
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	0801a268 	.word	0x0801a268
 80125ec:	0801a6e8 	.word	0x0801a6e8
 80125f0:	0801a2bc 	.word	0x0801a2bc
 80125f4:	0801a740 	.word	0x0801a740
 80125f8:	0801a760 	.word	0x0801a760
 80125fc:	0801a79c 	.word	0x0801a79c
 8012600:	0801a7b4 	.word	0x0801a7b4
 8012604:	0801a7e0 	.word	0x0801a7e0

08012608 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012608:	b5b0      	push	{r4, r5, r7, lr}
 801260a:	b08a      	sub	sp, #40	@ 0x28
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d106      	bne.n	8012624 <tcp_output+0x1c>
 8012616:	4b8a      	ldr	r3, [pc, #552]	@ (8012840 <tcp_output+0x238>)
 8012618:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801261c:	4989      	ldr	r1, [pc, #548]	@ (8012844 <tcp_output+0x23c>)
 801261e:	488a      	ldr	r0, [pc, #552]	@ (8012848 <tcp_output+0x240>)
 8012620:	f005 f966 	bl	80178f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	7d1b      	ldrb	r3, [r3, #20]
 8012628:	2b01      	cmp	r3, #1
 801262a:	d106      	bne.n	801263a <tcp_output+0x32>
 801262c:	4b84      	ldr	r3, [pc, #528]	@ (8012840 <tcp_output+0x238>)
 801262e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012632:	4986      	ldr	r1, [pc, #536]	@ (801284c <tcp_output+0x244>)
 8012634:	4884      	ldr	r0, [pc, #528]	@ (8012848 <tcp_output+0x240>)
 8012636:	f005 f95b 	bl	80178f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801263a:	4b85      	ldr	r3, [pc, #532]	@ (8012850 <tcp_output+0x248>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	429a      	cmp	r2, r3
 8012642:	d101      	bne.n	8012648 <tcp_output+0x40>
    return ERR_OK;
 8012644:	2300      	movs	r3, #0
 8012646:	e1d1      	b.n	80129ec <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012654:	4293      	cmp	r3, r2
 8012656:	bf28      	it	cs
 8012658:	4613      	movcs	r3, r2
 801265a:	b29b      	uxth	r3, r3
 801265c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012662:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012666:	2b00      	cmp	r3, #0
 8012668:	d10b      	bne.n	8012682 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	8b5b      	ldrh	r3, [r3, #26]
 801266e:	f003 0302 	and.w	r3, r3, #2
 8012672:	2b00      	cmp	r3, #0
 8012674:	f000 81ad 	beq.w	80129d2 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 fdd7 	bl	801322c <tcp_send_empty_ack>
 801267e:	4603      	mov	r3, r0
 8012680:	e1b4      	b.n	80129ec <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012682:	6879      	ldr	r1, [r7, #4]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	3304      	adds	r3, #4
 8012688:	461a      	mov	r2, r3
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7ff fc76 	bl	8011f7c <tcp_route>
 8012690:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d102      	bne.n	801269e <tcp_output+0x96>
    return ERR_RTE;
 8012698:	f06f 0303 	mvn.w	r3, #3
 801269c:	e1a6      	b.n	80129ec <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d003      	beq.n	80126ac <tcp_output+0xa4>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d111      	bne.n	80126d0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d002      	beq.n	80126b8 <tcp_output+0xb0>
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	3304      	adds	r3, #4
 80126b6:	e000      	b.n	80126ba <tcp_output+0xb2>
 80126b8:	2300      	movs	r3, #0
 80126ba:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d102      	bne.n	80126c8 <tcp_output+0xc0>
      return ERR_RTE;
 80126c2:	f06f 0303 	mvn.w	r3, #3
 80126c6:	e191      	b.n	80129ec <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80126d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d2:	691b      	ldr	r3, [r3, #16]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7f9 fece 	bl	800c478 <lwip_htonl>
 80126dc:	4602      	mov	r2, r0
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126e2:	1ad3      	subs	r3, r2, r3
 80126e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126e6:	8912      	ldrh	r2, [r2, #8]
 80126e8:	4413      	add	r3, r2
 80126ea:	69ba      	ldr	r2, [r7, #24]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d227      	bcs.n	8012740 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80126f6:	461a      	mov	r2, r3
 80126f8:	69bb      	ldr	r3, [r7, #24]
 80126fa:	4293      	cmp	r3, r2
 80126fc:	d114      	bne.n	8012728 <tcp_output+0x120>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012702:	2b00      	cmp	r3, #0
 8012704:	d110      	bne.n	8012728 <tcp_output+0x120>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801270c:	2b00      	cmp	r3, #0
 801270e:	d10b      	bne.n	8012728 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2200      	movs	r2, #0
 8012714:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2201      	movs	r2, #1
 801271c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2200      	movs	r2, #0
 8012724:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	8b5b      	ldrh	r3, [r3, #26]
 801272c:	f003 0302 	and.w	r3, r3, #2
 8012730:	2b00      	cmp	r3, #0
 8012732:	f000 8150 	beq.w	80129d6 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f000 fd78 	bl	801322c <tcp_send_empty_ack>
 801273c:	4603      	mov	r3, r0
 801273e:	e155      	b.n	80129ec <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2200      	movs	r2, #0
 8012744:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801274c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801274e:	6a3b      	ldr	r3, [r7, #32]
 8012750:	2b00      	cmp	r3, #0
 8012752:	f000 811f 	beq.w	8012994 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8012756:	e002      	b.n	801275e <tcp_output+0x156>
 8012758:	6a3b      	ldr	r3, [r7, #32]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	623b      	str	r3, [r7, #32]
 801275e:	6a3b      	ldr	r3, [r7, #32]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1f8      	bne.n	8012758 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012766:	e115      	b.n	8012994 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276a:	691b      	ldr	r3, [r3, #16]
 801276c:	899b      	ldrh	r3, [r3, #12]
 801276e:	b29b      	uxth	r3, r3
 8012770:	4618      	mov	r0, r3
 8012772:	f7f9 fe6b 	bl	800c44c <lwip_htons>
 8012776:	4603      	mov	r3, r0
 8012778:	b2db      	uxtb	r3, r3
 801277a:	f003 0304 	and.w	r3, r3, #4
 801277e:	2b00      	cmp	r3, #0
 8012780:	d006      	beq.n	8012790 <tcp_output+0x188>
 8012782:	4b2f      	ldr	r3, [pc, #188]	@ (8012840 <tcp_output+0x238>)
 8012784:	f240 5236 	movw	r2, #1334	@ 0x536
 8012788:	4932      	ldr	r1, [pc, #200]	@ (8012854 <tcp_output+0x24c>)
 801278a:	482f      	ldr	r0, [pc, #188]	@ (8012848 <tcp_output+0x240>)
 801278c:	f005 f8b0 	bl	80178f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012794:	2b00      	cmp	r3, #0
 8012796:	d01f      	beq.n	80127d8 <tcp_output+0x1d0>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	8b5b      	ldrh	r3, [r3, #26]
 801279c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d119      	bne.n	80127d8 <tcp_output+0x1d0>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d00b      	beq.n	80127c4 <tcp_output+0x1bc>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d110      	bne.n	80127d8 <tcp_output+0x1d0>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127ba:	891a      	ldrh	r2, [r3, #8]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d209      	bcs.n	80127d8 <tcp_output+0x1d0>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d004      	beq.n	80127d8 <tcp_output+0x1d0>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80127d4:	2b08      	cmp	r3, #8
 80127d6:	d901      	bls.n	80127dc <tcp_output+0x1d4>
 80127d8:	2301      	movs	r3, #1
 80127da:	e000      	b.n	80127de <tcp_output+0x1d6>
 80127dc:	2300      	movs	r3, #0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d106      	bne.n	80127f0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	8b5b      	ldrh	r3, [r3, #26]
 80127e6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f000 80e7 	beq.w	80129be <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	7d1b      	ldrb	r3, [r3, #20]
 80127f4:	2b02      	cmp	r3, #2
 80127f6:	d00d      	beq.n	8012814 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80127f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127fa:	691b      	ldr	r3, [r3, #16]
 80127fc:	899b      	ldrh	r3, [r3, #12]
 80127fe:	b29c      	uxth	r4, r3
 8012800:	2010      	movs	r0, #16
 8012802:	f7f9 fe23 	bl	800c44c <lwip_htons>
 8012806:	4603      	mov	r3, r0
 8012808:	461a      	mov	r2, r3
 801280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801280c:	691b      	ldr	r3, [r3, #16]
 801280e:	4322      	orrs	r2, r4
 8012810:	b292      	uxth	r2, r2
 8012812:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012814:	697a      	ldr	r2, [r7, #20]
 8012816:	6879      	ldr	r1, [r7, #4]
 8012818:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801281a:	f000 f90b 	bl	8012a34 <tcp_output_segment>
 801281e:	4603      	mov	r3, r0
 8012820:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d016      	beq.n	8012858 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	8b5b      	ldrh	r3, [r3, #26]
 801282e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012832:	b29a      	uxth	r2, r3
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	835a      	strh	r2, [r3, #26]
      return err;
 8012838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801283c:	e0d6      	b.n	80129ec <tcp_output+0x3e4>
 801283e:	bf00      	nop
 8012840:	0801a268 	.word	0x0801a268
 8012844:	0801a808 	.word	0x0801a808
 8012848:	0801a2bc 	.word	0x0801a2bc
 801284c:	0801a820 	.word	0x0801a820
 8012850:	2000854c 	.word	0x2000854c
 8012854:	0801a848 	.word	0x0801a848
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8012858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285a:	2200      	movs	r2, #0
 801285c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	7d1b      	ldrb	r3, [r3, #20]
 801286a:	2b02      	cmp	r3, #2
 801286c:	d006      	beq.n	801287c <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	8b5b      	ldrh	r3, [r3, #26]
 8012872:	f023 0303 	bic.w	r3, r3, #3
 8012876:	b29a      	uxth	r2, r3
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287e:	691b      	ldr	r3, [r3, #16]
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	4618      	mov	r0, r3
 8012884:	f7f9 fdf8 	bl	800c478 <lwip_htonl>
 8012888:	4604      	mov	r4, r0
 801288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801288c:	891b      	ldrh	r3, [r3, #8]
 801288e:	461d      	mov	r5, r3
 8012890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012892:	691b      	ldr	r3, [r3, #16]
 8012894:	899b      	ldrh	r3, [r3, #12]
 8012896:	b29b      	uxth	r3, r3
 8012898:	4618      	mov	r0, r3
 801289a:	f7f9 fdd7 	bl	800c44c <lwip_htons>
 801289e:	4603      	mov	r3, r0
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	f003 0303 	and.w	r3, r3, #3
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <tcp_output+0x2a6>
 80128aa:	2301      	movs	r3, #1
 80128ac:	e000      	b.n	80128b0 <tcp_output+0x2a8>
 80128ae:	2300      	movs	r3, #0
 80128b0:	442b      	add	r3, r5
 80128b2:	4423      	add	r3, r4
 80128b4:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	1ad3      	subs	r3, r2, r3
 80128be:	2b00      	cmp	r3, #0
 80128c0:	da02      	bge.n	80128c8 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	68ba      	ldr	r2, [r7, #8]
 80128c6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80128c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ca:	891b      	ldrh	r3, [r3, #8]
 80128cc:	461c      	mov	r4, r3
 80128ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128d0:	691b      	ldr	r3, [r3, #16]
 80128d2:	899b      	ldrh	r3, [r3, #12]
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7f9 fdb8 	bl	800c44c <lwip_htons>
 80128dc:	4603      	mov	r3, r0
 80128de:	b2db      	uxtb	r3, r3
 80128e0:	f003 0303 	and.w	r3, r3, #3
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d001      	beq.n	80128ec <tcp_output+0x2e4>
 80128e8:	2301      	movs	r3, #1
 80128ea:	e000      	b.n	80128ee <tcp_output+0x2e6>
 80128ec:	2300      	movs	r3, #0
 80128ee:	4423      	add	r3, r4
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d049      	beq.n	8012988 <tcp_output+0x380>
      seg->next = NULL;
 80128f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f6:	2200      	movs	r2, #0
 80128f8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d105      	bne.n	801290e <tcp_output+0x306>
        pcb->unacked = seg;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012906:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801290a:	623b      	str	r3, [r7, #32]
 801290c:	e03f      	b.n	801298e <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012910:	691b      	ldr	r3, [r3, #16]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	f7f9 fdaf 	bl	800c478 <lwip_htonl>
 801291a:	4604      	mov	r4, r0
 801291c:	6a3b      	ldr	r3, [r7, #32]
 801291e:	691b      	ldr	r3, [r3, #16]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	4618      	mov	r0, r3
 8012924:	f7f9 fda8 	bl	800c478 <lwip_htonl>
 8012928:	4603      	mov	r3, r0
 801292a:	1ae3      	subs	r3, r4, r3
 801292c:	2b00      	cmp	r3, #0
 801292e:	da24      	bge.n	801297a <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	3370      	adds	r3, #112	@ 0x70
 8012934:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012936:	e002      	b.n	801293e <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d011      	beq.n	801296a <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012946:	69fb      	ldr	r3, [r7, #28]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	691b      	ldr	r3, [r3, #16]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	4618      	mov	r0, r3
 8012950:	f7f9 fd92 	bl	800c478 <lwip_htonl>
 8012954:	4604      	mov	r4, r0
 8012956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012958:	691b      	ldr	r3, [r3, #16]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	4618      	mov	r0, r3
 801295e:	f7f9 fd8b 	bl	800c478 <lwip_htonl>
 8012962:	4603      	mov	r3, r0
 8012964:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012966:	2b00      	cmp	r3, #0
 8012968:	dbe6      	blt.n	8012938 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012970:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012976:	601a      	str	r2, [r3, #0]
 8012978:	e009      	b.n	801298e <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801297a:	6a3b      	ldr	r3, [r7, #32]
 801297c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801297e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012980:	6a3b      	ldr	r3, [r7, #32]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	623b      	str	r3, [r7, #32]
 8012986:	e002      	b.n	801298e <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012988:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801298a:	f7fc fc34 	bl	800f1f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012992:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012996:	2b00      	cmp	r3, #0
 8012998:	d012      	beq.n	80129c0 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801299c:	691b      	ldr	r3, [r3, #16]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7f9 fd69 	bl	800c478 <lwip_htonl>
 80129a6:	4602      	mov	r2, r0
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129ac:	1ad3      	subs	r3, r2, r3
 80129ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129b0:	8912      	ldrh	r2, [r2, #8]
 80129b2:	4413      	add	r3, r2
  while (seg != NULL &&
 80129b4:	69ba      	ldr	r2, [r7, #24]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	f4bf aed6 	bcs.w	8012768 <tcp_output+0x160>
 80129bc:	e000      	b.n	80129c0 <tcp_output+0x3b8>
      break;
 80129be:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d108      	bne.n	80129da <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2200      	movs	r2, #0
 80129cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80129d0:	e004      	b.n	80129dc <tcp_output+0x3d4>
    goto output_done;
 80129d2:	bf00      	nop
 80129d4:	e002      	b.n	80129dc <tcp_output+0x3d4>
    goto output_done;
 80129d6:	bf00      	nop
 80129d8:	e000      	b.n	80129dc <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80129da:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	8b5b      	ldrh	r3, [r3, #26]
 80129e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3728      	adds	r7, #40	@ 0x28
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bdb0      	pop	{r4, r5, r7, pc}

080129f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <tcp_output_segment_busy+0x1c>
 8012a02:	4b09      	ldr	r3, [pc, #36]	@ (8012a28 <tcp_output_segment_busy+0x34>)
 8012a04:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012a08:	4908      	ldr	r1, [pc, #32]	@ (8012a2c <tcp_output_segment_busy+0x38>)
 8012a0a:	4809      	ldr	r0, [pc, #36]	@ (8012a30 <tcp_output_segment_busy+0x3c>)
 8012a0c:	f004 ff70 	bl	80178f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	7b9b      	ldrb	r3, [r3, #14]
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d001      	beq.n	8012a1e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e000      	b.n	8012a20 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012a1e:	2300      	movs	r3, #0
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	0801a268 	.word	0x0801a268
 8012a2c:	0801a860 	.word	0x0801a860
 8012a30:	0801a2bc 	.word	0x0801a2bc

08012a34 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012a34:	b5b0      	push	{r4, r5, r7, lr}
 8012a36:	b08c      	sub	sp, #48	@ 0x30
 8012a38:	af04      	add	r7, sp, #16
 8012a3a:	60f8      	str	r0, [r7, #12]
 8012a3c:	60b9      	str	r1, [r7, #8]
 8012a3e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d106      	bne.n	8012a54 <tcp_output_segment+0x20>
 8012a46:	4b64      	ldr	r3, [pc, #400]	@ (8012bd8 <tcp_output_segment+0x1a4>)
 8012a48:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012a4c:	4963      	ldr	r1, [pc, #396]	@ (8012bdc <tcp_output_segment+0x1a8>)
 8012a4e:	4864      	ldr	r0, [pc, #400]	@ (8012be0 <tcp_output_segment+0x1ac>)
 8012a50:	f004 ff4e 	bl	80178f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d106      	bne.n	8012a68 <tcp_output_segment+0x34>
 8012a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8012bd8 <tcp_output_segment+0x1a4>)
 8012a5c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012a60:	4960      	ldr	r1, [pc, #384]	@ (8012be4 <tcp_output_segment+0x1b0>)
 8012a62:	485f      	ldr	r0, [pc, #380]	@ (8012be0 <tcp_output_segment+0x1ac>)
 8012a64:	f004 ff44 	bl	80178f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <tcp_output_segment+0x48>
 8012a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8012bd8 <tcp_output_segment+0x1a4>)
 8012a70:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012a74:	495c      	ldr	r1, [pc, #368]	@ (8012be8 <tcp_output_segment+0x1b4>)
 8012a76:	485a      	ldr	r0, [pc, #360]	@ (8012be0 <tcp_output_segment+0x1ac>)
 8012a78:	f004 ff3a 	bl	80178f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	f7ff ffb9 	bl	80129f4 <tcp_output_segment_busy>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d001      	beq.n	8012a8c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e0a1      	b.n	8012bd0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	691c      	ldr	r4, [r3, #16]
 8012a94:	4610      	mov	r0, r2
 8012a96:	f7f9 fcef 	bl	800c478 <lwip_htonl>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	691c      	ldr	r4, [r3, #16]
 8012aa6:	4610      	mov	r0, r2
 8012aa8:	f7f9 fcd0 	bl	800c44c <lwip_htons>
 8012aac:	4603      	mov	r3, r0
 8012aae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ab4:	68ba      	ldr	r2, [r7, #8]
 8012ab6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012ab8:	441a      	add	r2, r3
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	691b      	ldr	r3, [r3, #16]
 8012ac2:	3314      	adds	r3, #20
 8012ac4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	7b1b      	ldrb	r3, [r3, #12]
 8012aca:	f003 0301 	and.w	r3, r3, #1
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d015      	beq.n	8012afe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	3304      	adds	r3, #4
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	6879      	ldr	r1, [r7, #4]
 8012ada:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012ade:	f7fc fe81 	bl	800f7e4 <tcp_eff_send_mss_netif>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012ae6:	8b7b      	ldrh	r3, [r7, #26]
 8012ae8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7f9 fcc3 	bl	800c478 <lwip_htonl>
 8012af2:	4602      	mov	r2, r0
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012af8:	69fb      	ldr	r3, [r7, #28]
 8012afa:	3304      	adds	r3, #4
 8012afc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	da02      	bge.n	8012b0e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d10c      	bne.n	8012b30 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012b16:	4b35      	ldr	r3, [pc, #212]	@ (8012bec <tcp_output_segment+0x1b8>)
 8012b18:	681a      	ldr	r2, [r3, #0]
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	4618      	mov	r0, r3
 8012b26:	f7f9 fca7 	bl	800c478 <lwip_htonl>
 8012b2a:	4602      	mov	r2, r0
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	691a      	ldr	r2, [r3, #16]
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	1ad3      	subs	r3, r2, r3
 8012b3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	8959      	ldrh	r1, [r3, #10]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	8b3a      	ldrh	r2, [r7, #24]
 8012b4a:	1a8a      	subs	r2, r1, r2
 8012b4c:	b292      	uxth	r2, r2
 8012b4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	8919      	ldrh	r1, [r3, #8]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	8b3a      	ldrh	r2, [r7, #24]
 8012b5c:	1a8a      	subs	r2, r1, r2
 8012b5e:	b292      	uxth	r2, r2
 8012b60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	6912      	ldr	r2, [r2, #16]
 8012b6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	691b      	ldr	r3, [r3, #16]
 8012b70:	2200      	movs	r2, #0
 8012b72:	741a      	strb	r2, [r3, #16]
 8012b74:	2200      	movs	r2, #0
 8012b76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	691a      	ldr	r2, [r3, #16]
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	7b1b      	ldrb	r3, [r3, #12]
 8012b80:	f003 0301 	and.w	r3, r3, #1
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d001      	beq.n	8012b8c <tcp_output_segment+0x158>
 8012b88:	2318      	movs	r3, #24
 8012b8a:	e000      	b.n	8012b8e <tcp_output_segment+0x15a>
 8012b8c:	2314      	movs	r3, #20
 8012b8e:	4413      	add	r3, r2
 8012b90:	69fa      	ldr	r2, [r7, #28]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d006      	beq.n	8012ba4 <tcp_output_segment+0x170>
 8012b96:	4b10      	ldr	r3, [pc, #64]	@ (8012bd8 <tcp_output_segment+0x1a4>)
 8012b98:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012b9c:	4914      	ldr	r1, [pc, #80]	@ (8012bf0 <tcp_output_segment+0x1bc>)
 8012b9e:	4810      	ldr	r0, [pc, #64]	@ (8012be0 <tcp_output_segment+0x1ac>)
 8012ba0:	f004 fea6 	bl	80178f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	6858      	ldr	r0, [r3, #4]
 8012ba8:	68b9      	ldr	r1, [r7, #8]
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	1d1c      	adds	r4, r3, #4
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	7add      	ldrb	r5, [r3, #11]
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	7a9b      	ldrb	r3, [r3, #10]
 8012bb6:	687a      	ldr	r2, [r7, #4]
 8012bb8:	9202      	str	r2, [sp, #8]
 8012bba:	2206      	movs	r2, #6
 8012bbc:	9201      	str	r2, [sp, #4]
 8012bbe:	9300      	str	r3, [sp, #0]
 8012bc0:	462b      	mov	r3, r5
 8012bc2:	4622      	mov	r2, r4
 8012bc4:	f002 ffbe 	bl	8015b44 <ip4_output_if>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3720      	adds	r7, #32
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8012bd8:	0801a268 	.word	0x0801a268
 8012bdc:	0801a888 	.word	0x0801a888
 8012be0:	0801a2bc 	.word	0x0801a2bc
 8012be4:	0801a8a8 	.word	0x0801a8a8
 8012be8:	0801a8c8 	.word	0x0801a8c8
 8012bec:	200084fc 	.word	0x200084fc
 8012bf0:	0801a8ec 	.word	0x0801a8ec

08012bf4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012bf4:	b5b0      	push	{r4, r5, r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d106      	bne.n	8012c10 <tcp_rexmit_rto_prepare+0x1c>
 8012c02:	4b36      	ldr	r3, [pc, #216]	@ (8012cdc <tcp_rexmit_rto_prepare+0xe8>)
 8012c04:	f240 6263 	movw	r2, #1635	@ 0x663
 8012c08:	4935      	ldr	r1, [pc, #212]	@ (8012ce0 <tcp_rexmit_rto_prepare+0xec>)
 8012c0a:	4836      	ldr	r0, [pc, #216]	@ (8012ce4 <tcp_rexmit_rto_prepare+0xf0>)
 8012c0c:	f004 fe70 	bl	80178f0 <iprintf>

  if (pcb->unacked == NULL) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d102      	bne.n	8012c1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012c18:	f06f 0305 	mvn.w	r3, #5
 8012c1c:	e059      	b.n	8012cd2 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c22:	60fb      	str	r3, [r7, #12]
 8012c24:	e00b      	b.n	8012c3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012c26:	68f8      	ldr	r0, [r7, #12]
 8012c28:	f7ff fee4 	bl	80129f4 <tcp_output_segment_busy>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d002      	beq.n	8012c38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012c32:	f06f 0305 	mvn.w	r3, #5
 8012c36:	e04c      	b.n	8012cd2 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	60fb      	str	r3, [r7, #12]
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d1ef      	bne.n	8012c26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f7ff fed4 	bl	80129f4 <tcp_output_segment_busy>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d002      	beq.n	8012c58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012c52:	f06f 0305 	mvn.w	r3, #5
 8012c56:	e03c      	b.n	8012cd2 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d104      	bne.n	8012c72 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	895a      	ldrh	r2, [r3, #10]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	8b5b      	ldrh	r3, [r3, #26]
 8012c84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012c88:	b29a      	uxth	r2, r3
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	691b      	ldr	r3, [r3, #16]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7f9 fbef 	bl	800c478 <lwip_htonl>
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	891b      	ldrh	r3, [r3, #8]
 8012ca0:	461d      	mov	r5, r3
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	691b      	ldr	r3, [r3, #16]
 8012ca6:	899b      	ldrh	r3, [r3, #12]
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7f9 fbce 	bl	800c44c <lwip_htons>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	f003 0303 	and.w	r3, r3, #3
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d001      	beq.n	8012cc0 <tcp_rexmit_rto_prepare+0xcc>
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	e000      	b.n	8012cc2 <tcp_rexmit_rto_prepare+0xce>
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	442b      	add	r3, r5
 8012cc4:	18e2      	adds	r2, r4, r3
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3710      	adds	r7, #16
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	0801a268 	.word	0x0801a268
 8012ce0:	0801a900 	.word	0x0801a900
 8012ce4:	0801a2bc 	.word	0x0801a2bc

08012ce8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d106      	bne.n	8012d04 <tcp_rexmit_rto_commit+0x1c>
 8012cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8012d2c <tcp_rexmit_rto_commit+0x44>)
 8012cf8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012cfc:	490c      	ldr	r1, [pc, #48]	@ (8012d30 <tcp_rexmit_rto_commit+0x48>)
 8012cfe:	480d      	ldr	r0, [pc, #52]	@ (8012d34 <tcp_rexmit_rto_commit+0x4c>)
 8012d00:	f004 fdf6 	bl	80178f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d0a:	2bff      	cmp	r3, #255	@ 0xff
 8012d0c:	d007      	beq.n	8012d1e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d14:	3301      	adds	r3, #1
 8012d16:	b2da      	uxtb	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f7ff fc72 	bl	8012608 <tcp_output>
}
 8012d24:	bf00      	nop
 8012d26:	3708      	adds	r7, #8
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	0801a268 	.word	0x0801a268
 8012d30:	0801a924 	.word	0x0801a924
 8012d34:	0801a2bc 	.word	0x0801a2bc

08012d38 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d106      	bne.n	8012d54 <tcp_rexmit_rto+0x1c>
 8012d46:	4b0a      	ldr	r3, [pc, #40]	@ (8012d70 <tcp_rexmit_rto+0x38>)
 8012d48:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012d4c:	4909      	ldr	r1, [pc, #36]	@ (8012d74 <tcp_rexmit_rto+0x3c>)
 8012d4e:	480a      	ldr	r0, [pc, #40]	@ (8012d78 <tcp_rexmit_rto+0x40>)
 8012d50:	f004 fdce 	bl	80178f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f7ff ff4d 	bl	8012bf4 <tcp_rexmit_rto_prepare>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d102      	bne.n	8012d66 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7ff ffc1 	bl	8012ce8 <tcp_rexmit_rto_commit>
  }
}
 8012d66:	bf00      	nop
 8012d68:	3708      	adds	r7, #8
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	0801a268 	.word	0x0801a268
 8012d74:	0801a948 	.word	0x0801a948
 8012d78:	0801a2bc 	.word	0x0801a2bc

08012d7c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012d7c:	b590      	push	{r4, r7, lr}
 8012d7e:	b085      	sub	sp, #20
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d106      	bne.n	8012d98 <tcp_rexmit+0x1c>
 8012d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8012e48 <tcp_rexmit+0xcc>)
 8012d8c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012d90:	492e      	ldr	r1, [pc, #184]	@ (8012e4c <tcp_rexmit+0xd0>)
 8012d92:	482f      	ldr	r0, [pc, #188]	@ (8012e50 <tcp_rexmit+0xd4>)
 8012d94:	f004 fdac 	bl	80178f0 <iprintf>

  if (pcb->unacked == NULL) {
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d102      	bne.n	8012da6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012da0:	f06f 0305 	mvn.w	r3, #5
 8012da4:	e04c      	b.n	8012e40 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012daa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012dac:	68b8      	ldr	r0, [r7, #8]
 8012dae:	f7ff fe21 	bl	80129f4 <tcp_output_segment_busy>
 8012db2:	4603      	mov	r3, r0
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d002      	beq.n	8012dbe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012db8:	f06f 0305 	mvn.w	r3, #5
 8012dbc:	e040      	b.n	8012e40 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	336c      	adds	r3, #108	@ 0x6c
 8012dca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012dcc:	e002      	b.n	8012dd4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d011      	beq.n	8012e00 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	691b      	ldr	r3, [r3, #16]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7f9 fb47 	bl	800c478 <lwip_htonl>
 8012dea:	4604      	mov	r4, r0
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	691b      	ldr	r3, [r3, #16]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7f9 fb40 	bl	800c478 <lwip_htonl>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	dbe6      	blt.n	8012dce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	68ba      	ldr	r2, [r7, #8]
 8012e0c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d103      	bne.n	8012e1e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012e24:	2bff      	cmp	r3, #255	@ 0xff
 8012e26:	d007      	beq.n	8012e38 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012e2e:	3301      	adds	r3, #1
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012e3e:	2300      	movs	r3, #0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3714      	adds	r7, #20
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd90      	pop	{r4, r7, pc}
 8012e48:	0801a268 	.word	0x0801a268
 8012e4c:	0801a964 	.word	0x0801a964
 8012e50:	0801a2bc 	.word	0x0801a2bc

08012e54 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d106      	bne.n	8012e70 <tcp_rexmit_fast+0x1c>
 8012e62:	4b2a      	ldr	r3, [pc, #168]	@ (8012f0c <tcp_rexmit_fast+0xb8>)
 8012e64:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012e68:	4929      	ldr	r1, [pc, #164]	@ (8012f10 <tcp_rexmit_fast+0xbc>)
 8012e6a:	482a      	ldr	r0, [pc, #168]	@ (8012f14 <tcp_rexmit_fast+0xc0>)
 8012e6c:	f004 fd40 	bl	80178f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d045      	beq.n	8012f04 <tcp_rexmit_fast+0xb0>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	8b5b      	ldrh	r3, [r3, #26]
 8012e7c:	f003 0304 	and.w	r3, r3, #4
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d13f      	bne.n	8012f04 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7ff ff79 	bl	8012d7c <tcp_rexmit>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d139      	bne.n	8012f04 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	bf28      	it	cs
 8012ea0:	4613      	movcs	r3, r2
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	da00      	bge.n	8012eaa <tcp_rexmit_fast+0x56>
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	105b      	asrs	r3, r3, #1
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012eba:	461a      	mov	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ec0:	005b      	lsls	r3, r3, #1
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d206      	bcs.n	8012ed4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012eca:	005b      	lsls	r3, r3, #1
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ede:	4619      	mov	r1, r3
 8012ee0:	0049      	lsls	r1, r1, #1
 8012ee2:	440b      	add	r3, r1
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	4413      	add	r3, r2
 8012ee8:	b29a      	uxth	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	8b5b      	ldrh	r3, [r3, #26]
 8012ef4:	f043 0304 	orr.w	r3, r3, #4
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012f04:	bf00      	nop
 8012f06:	3708      	adds	r7, #8
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	0801a268 	.word	0x0801a268
 8012f10:	0801a97c 	.word	0x0801a97c
 8012f14:	0801a2bc 	.word	0x0801a2bc

08012f18 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b086      	sub	sp, #24
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	607b      	str	r3, [r7, #4]
 8012f22:	460b      	mov	r3, r1
 8012f24:	817b      	strh	r3, [r7, #10]
 8012f26:	4613      	mov	r3, r2
 8012f28:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012f2a:	897a      	ldrh	r2, [r7, #10]
 8012f2c:	893b      	ldrh	r3, [r7, #8]
 8012f2e:	4413      	add	r3, r2
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	3314      	adds	r3, #20
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	2022      	movs	r0, #34	@ 0x22
 8012f3e:	f7fa fbf1 	bl	800d724 <pbuf_alloc>
 8012f42:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d04d      	beq.n	8012fe6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012f4a:	897b      	ldrh	r3, [r7, #10]
 8012f4c:	3313      	adds	r3, #19
 8012f4e:	697a      	ldr	r2, [r7, #20]
 8012f50:	8952      	ldrh	r2, [r2, #10]
 8012f52:	4293      	cmp	r3, r2
 8012f54:	db06      	blt.n	8012f64 <tcp_output_alloc_header_common+0x4c>
 8012f56:	4b26      	ldr	r3, [pc, #152]	@ (8012ff0 <tcp_output_alloc_header_common+0xd8>)
 8012f58:	f240 7223 	movw	r2, #1827	@ 0x723
 8012f5c:	4925      	ldr	r1, [pc, #148]	@ (8012ff4 <tcp_output_alloc_header_common+0xdc>)
 8012f5e:	4826      	ldr	r0, [pc, #152]	@ (8012ff8 <tcp_output_alloc_header_common+0xe0>)
 8012f60:	f004 fcc6 	bl	80178f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012f6a:	8c3b      	ldrh	r3, [r7, #32]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f9 fa6d 	bl	800c44c <lwip_htons>
 8012f72:	4603      	mov	r3, r0
 8012f74:	461a      	mov	r2, r3
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7f9 fa65 	bl	800c44c <lwip_htons>
 8012f82:	4603      	mov	r3, r0
 8012f84:	461a      	mov	r2, r3
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f7f9 fa71 	bl	800c478 <lwip_htonl>
 8012f96:	4602      	mov	r2, r0
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012f9c:	897b      	ldrh	r3, [r7, #10]
 8012f9e:	089b      	lsrs	r3, r3, #2
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	3305      	adds	r3, #5
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	031b      	lsls	r3, r3, #12
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	4313      	orrs	r3, r2
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7f9 fa49 	bl	800c44c <lwip_htons>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012fc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7f9 fa41 	bl	800c44c <lwip_htons>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	461a      	mov	r2, r3
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	741a      	strb	r2, [r3, #16]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	749a      	strb	r2, [r3, #18]
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012fe6:	697b      	ldr	r3, [r7, #20]
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3718      	adds	r7, #24
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	0801a268 	.word	0x0801a268
 8012ff4:	0801a99c 	.word	0x0801a99c
 8012ff8:	0801a2bc 	.word	0x0801a2bc

08012ffc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012ffc:	b5b0      	push	{r4, r5, r7, lr}
 8012ffe:	b08a      	sub	sp, #40	@ 0x28
 8013000:	af04      	add	r7, sp, #16
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	607b      	str	r3, [r7, #4]
 8013006:	460b      	mov	r3, r1
 8013008:	817b      	strh	r3, [r7, #10]
 801300a:	4613      	mov	r3, r2
 801300c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d106      	bne.n	8013022 <tcp_output_alloc_header+0x26>
 8013014:	4b15      	ldr	r3, [pc, #84]	@ (801306c <tcp_output_alloc_header+0x70>)
 8013016:	f240 7242 	movw	r2, #1858	@ 0x742
 801301a:	4915      	ldr	r1, [pc, #84]	@ (8013070 <tcp_output_alloc_header+0x74>)
 801301c:	4815      	ldr	r0, [pc, #84]	@ (8013074 <tcp_output_alloc_header+0x78>)
 801301e:	f004 fc67 	bl	80178f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	8adb      	ldrh	r3, [r3, #22]
 801302a:	68fa      	ldr	r2, [r7, #12]
 801302c:	8b12      	ldrh	r2, [r2, #24]
 801302e:	68f9      	ldr	r1, [r7, #12]
 8013030:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013032:	893d      	ldrh	r5, [r7, #8]
 8013034:	897c      	ldrh	r4, [r7, #10]
 8013036:	9103      	str	r1, [sp, #12]
 8013038:	2110      	movs	r1, #16
 801303a:	9102      	str	r1, [sp, #8]
 801303c:	9201      	str	r2, [sp, #4]
 801303e:	9300      	str	r3, [sp, #0]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	462a      	mov	r2, r5
 8013044:	4621      	mov	r1, r4
 8013046:	f7ff ff67 	bl	8012f18 <tcp_output_alloc_header_common>
 801304a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d006      	beq.n	8013060 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013056:	68fa      	ldr	r2, [r7, #12]
 8013058:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801305a:	441a      	add	r2, r3
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013060:	697b      	ldr	r3, [r7, #20]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3718      	adds	r7, #24
 8013066:	46bd      	mov	sp, r7
 8013068:	bdb0      	pop	{r4, r5, r7, pc}
 801306a:	bf00      	nop
 801306c:	0801a268 	.word	0x0801a268
 8013070:	0801a9cc 	.word	0x0801a9cc
 8013074:	0801a2bc 	.word	0x0801a2bc

08013078 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b088      	sub	sp, #32
 801307c:	af00      	add	r7, sp, #0
 801307e:	60f8      	str	r0, [r7, #12]
 8013080:	60b9      	str	r1, [r7, #8]
 8013082:	4611      	mov	r1, r2
 8013084:	461a      	mov	r2, r3
 8013086:	460b      	mov	r3, r1
 8013088:	71fb      	strb	r3, [r7, #7]
 801308a:	4613      	mov	r3, r2
 801308c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801308e:	2300      	movs	r3, #0
 8013090:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d106      	bne.n	80130a6 <tcp_output_fill_options+0x2e>
 8013098:	4b12      	ldr	r3, [pc, #72]	@ (80130e4 <tcp_output_fill_options+0x6c>)
 801309a:	f240 7256 	movw	r2, #1878	@ 0x756
 801309e:	4912      	ldr	r1, [pc, #72]	@ (80130e8 <tcp_output_fill_options+0x70>)
 80130a0:	4812      	ldr	r0, [pc, #72]	@ (80130ec <tcp_output_fill_options+0x74>)
 80130a2:	f004 fc25 	bl	80178f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80130ac:	69bb      	ldr	r3, [r7, #24]
 80130ae:	3314      	adds	r3, #20
 80130b0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80130b2:	8bfb      	ldrh	r3, [r7, #30]
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	461a      	mov	r2, r3
 80130b8:	79fb      	ldrb	r3, [r7, #7]
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	f003 0304 	and.w	r3, r3, #4
 80130c0:	4413      	add	r3, r2
 80130c2:	3314      	adds	r3, #20
 80130c4:	69ba      	ldr	r2, [r7, #24]
 80130c6:	4413      	add	r3, r2
 80130c8:	697a      	ldr	r2, [r7, #20]
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d006      	beq.n	80130dc <tcp_output_fill_options+0x64>
 80130ce:	4b05      	ldr	r3, [pc, #20]	@ (80130e4 <tcp_output_fill_options+0x6c>)
 80130d0:	f240 7275 	movw	r2, #1909	@ 0x775
 80130d4:	4906      	ldr	r1, [pc, #24]	@ (80130f0 <tcp_output_fill_options+0x78>)
 80130d6:	4805      	ldr	r0, [pc, #20]	@ (80130ec <tcp_output_fill_options+0x74>)
 80130d8:	f004 fc0a 	bl	80178f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80130dc:	bf00      	nop
 80130de:	3720      	adds	r7, #32
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	0801a268 	.word	0x0801a268
 80130e8:	0801a9f4 	.word	0x0801a9f4
 80130ec:	0801a2bc 	.word	0x0801a2bc
 80130f0:	0801a8ec 	.word	0x0801a8ec

080130f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b08a      	sub	sp, #40	@ 0x28
 80130f8:	af04      	add	r7, sp, #16
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	607a      	str	r2, [r7, #4]
 8013100:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d106      	bne.n	8013116 <tcp_output_control_segment+0x22>
 8013108:	4b1c      	ldr	r3, [pc, #112]	@ (801317c <tcp_output_control_segment+0x88>)
 801310a:	f240 7287 	movw	r2, #1927	@ 0x787
 801310e:	491c      	ldr	r1, [pc, #112]	@ (8013180 <tcp_output_control_segment+0x8c>)
 8013110:	481c      	ldr	r0, [pc, #112]	@ (8013184 <tcp_output_control_segment+0x90>)
 8013112:	f004 fbed 	bl	80178f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013116:	683a      	ldr	r2, [r7, #0]
 8013118:	6879      	ldr	r1, [r7, #4]
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f7fe ff2e 	bl	8011f7c <tcp_route>
 8013120:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d102      	bne.n	801312e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013128:	23fc      	movs	r3, #252	@ 0xfc
 801312a:	75fb      	strb	r3, [r7, #23]
 801312c:	e01c      	b.n	8013168 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d006      	beq.n	8013142 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	7adb      	ldrb	r3, [r3, #11]
 8013138:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	7a9b      	ldrb	r3, [r3, #10]
 801313e:	757b      	strb	r3, [r7, #21]
 8013140:	e003      	b.n	801314a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013142:	23ff      	movs	r3, #255	@ 0xff
 8013144:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013146:	2300      	movs	r3, #0
 8013148:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801314a:	7dba      	ldrb	r2, [r7, #22]
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	9302      	str	r3, [sp, #8]
 8013150:	2306      	movs	r3, #6
 8013152:	9301      	str	r3, [sp, #4]
 8013154:	7d7b      	ldrb	r3, [r7, #21]
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	4613      	mov	r3, r2
 801315a:	683a      	ldr	r2, [r7, #0]
 801315c:	6879      	ldr	r1, [r7, #4]
 801315e:	68b8      	ldr	r0, [r7, #8]
 8013160:	f002 fcf0 	bl	8015b44 <ip4_output_if>
 8013164:	4603      	mov	r3, r0
 8013166:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013168:	68b8      	ldr	r0, [r7, #8]
 801316a:	f7fa fdbf 	bl	800dcec <pbuf_free>
  return err;
 801316e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013172:	4618      	mov	r0, r3
 8013174:	3718      	adds	r7, #24
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	0801a268 	.word	0x0801a268
 8013180:	0801aa1c 	.word	0x0801aa1c
 8013184:	0801a2bc 	.word	0x0801a2bc

08013188 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013188:	b590      	push	{r4, r7, lr}
 801318a:	b08b      	sub	sp, #44	@ 0x2c
 801318c:	af04      	add	r7, sp, #16
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	60b9      	str	r1, [r7, #8]
 8013192:	607a      	str	r2, [r7, #4]
 8013194:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d106      	bne.n	80131aa <tcp_rst+0x22>
 801319c:	4b1f      	ldr	r3, [pc, #124]	@ (801321c <tcp_rst+0x94>)
 801319e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80131a2:	491f      	ldr	r1, [pc, #124]	@ (8013220 <tcp_rst+0x98>)
 80131a4:	481f      	ldr	r0, [pc, #124]	@ (8013224 <tcp_rst+0x9c>)
 80131a6:	f004 fba3 	bl	80178f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80131aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d106      	bne.n	80131be <tcp_rst+0x36>
 80131b0:	4b1a      	ldr	r3, [pc, #104]	@ (801321c <tcp_rst+0x94>)
 80131b2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80131b6:	491c      	ldr	r1, [pc, #112]	@ (8013228 <tcp_rst+0xa0>)
 80131b8:	481a      	ldr	r0, [pc, #104]	@ (8013224 <tcp_rst+0x9c>)
 80131ba:	f004 fb99 	bl	80178f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80131be:	2300      	movs	r3, #0
 80131c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80131c2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80131c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80131c8:	7dfb      	ldrb	r3, [r7, #23]
 80131ca:	b29c      	uxth	r4, r3
 80131cc:	68b8      	ldr	r0, [r7, #8]
 80131ce:	f7f9 f953 	bl	800c478 <lwip_htonl>
 80131d2:	4602      	mov	r2, r0
 80131d4:	8abb      	ldrh	r3, [r7, #20]
 80131d6:	9303      	str	r3, [sp, #12]
 80131d8:	2314      	movs	r3, #20
 80131da:	9302      	str	r3, [sp, #8]
 80131dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80131de:	9301      	str	r3, [sp, #4]
 80131e0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	4613      	mov	r3, r2
 80131e6:	2200      	movs	r2, #0
 80131e8:	4621      	mov	r1, r4
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f7ff fe94 	bl	8012f18 <tcp_output_alloc_header_common>
 80131f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d00c      	beq.n	8013212 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	2200      	movs	r2, #0
 80131fc:	6939      	ldr	r1, [r7, #16]
 80131fe:	68f8      	ldr	r0, [r7, #12]
 8013200:	f7ff ff3a 	bl	8013078 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013206:	683a      	ldr	r2, [r7, #0]
 8013208:	6939      	ldr	r1, [r7, #16]
 801320a:	68f8      	ldr	r0, [r7, #12]
 801320c:	f7ff ff72 	bl	80130f4 <tcp_output_control_segment>
 8013210:	e000      	b.n	8013214 <tcp_rst+0x8c>
    return;
 8013212:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013214:	371c      	adds	r7, #28
 8013216:	46bd      	mov	sp, r7
 8013218:	bd90      	pop	{r4, r7, pc}
 801321a:	bf00      	nop
 801321c:	0801a268 	.word	0x0801a268
 8013220:	0801aa48 	.word	0x0801aa48
 8013224:	0801a2bc 	.word	0x0801a2bc
 8013228:	0801aa64 	.word	0x0801aa64

0801322c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801322c:	b590      	push	{r4, r7, lr}
 801322e:	b087      	sub	sp, #28
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013234:	2300      	movs	r3, #0
 8013236:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013238:	2300      	movs	r3, #0
 801323a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d106      	bne.n	8013250 <tcp_send_empty_ack+0x24>
 8013242:	4b28      	ldr	r3, [pc, #160]	@ (80132e4 <tcp_send_empty_ack+0xb8>)
 8013244:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013248:	4927      	ldr	r1, [pc, #156]	@ (80132e8 <tcp_send_empty_ack+0xbc>)
 801324a:	4828      	ldr	r0, [pc, #160]	@ (80132ec <tcp_send_empty_ack+0xc0>)
 801324c:	f004 fb50 	bl	80178f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013250:	7dfb      	ldrb	r3, [r7, #23]
 8013252:	009b      	lsls	r3, r3, #2
 8013254:	b2db      	uxtb	r3, r3
 8013256:	f003 0304 	and.w	r3, r3, #4
 801325a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801325c:	7d7b      	ldrb	r3, [r7, #21]
 801325e:	b29c      	uxth	r4, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013264:	4618      	mov	r0, r3
 8013266:	f7f9 f907 	bl	800c478 <lwip_htonl>
 801326a:	4603      	mov	r3, r0
 801326c:	2200      	movs	r2, #0
 801326e:	4621      	mov	r1, r4
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f7ff fec3 	bl	8012ffc <tcp_output_alloc_header>
 8013276:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d109      	bne.n	8013292 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	8b5b      	ldrh	r3, [r3, #26]
 8013282:	f043 0303 	orr.w	r3, r3, #3
 8013286:	b29a      	uxth	r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801328c:	f06f 0301 	mvn.w	r3, #1
 8013290:	e023      	b.n	80132da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013292:	7dbb      	ldrb	r3, [r7, #22]
 8013294:	7dfa      	ldrb	r2, [r7, #23]
 8013296:	6939      	ldr	r1, [r7, #16]
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7ff feed 	bl	8013078 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801329e:	687a      	ldr	r2, [r7, #4]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3304      	adds	r3, #4
 80132a4:	6939      	ldr	r1, [r7, #16]
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f7ff ff24 	bl	80130f4 <tcp_output_control_segment>
 80132ac:	4603      	mov	r3, r0
 80132ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80132b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d007      	beq.n	80132c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	8b5b      	ldrh	r3, [r3, #26]
 80132bc:	f043 0303 	orr.w	r3, r3, #3
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	835a      	strh	r2, [r3, #26]
 80132c6:	e006      	b.n	80132d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	8b5b      	ldrh	r3, [r3, #26]
 80132cc:	f023 0303 	bic.w	r3, r3, #3
 80132d0:	b29a      	uxth	r2, r3
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80132d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	371c      	adds	r7, #28
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd90      	pop	{r4, r7, pc}
 80132e2:	bf00      	nop
 80132e4:	0801a268 	.word	0x0801a268
 80132e8:	0801aa80 	.word	0x0801aa80
 80132ec:	0801a2bc 	.word	0x0801a2bc

080132f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80132f0:	b590      	push	{r4, r7, lr}
 80132f2:	b085      	sub	sp, #20
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132f8:	2300      	movs	r3, #0
 80132fa:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d106      	bne.n	8013310 <tcp_keepalive+0x20>
 8013302:	4b18      	ldr	r3, [pc, #96]	@ (8013364 <tcp_keepalive+0x74>)
 8013304:	f640 0224 	movw	r2, #2084	@ 0x824
 8013308:	4917      	ldr	r1, [pc, #92]	@ (8013368 <tcp_keepalive+0x78>)
 801330a:	4818      	ldr	r0, [pc, #96]	@ (801336c <tcp_keepalive+0x7c>)
 801330c:	f004 faf0 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013310:	7abb      	ldrb	r3, [r7, #10]
 8013312:	b29c      	uxth	r4, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013318:	3b01      	subs	r3, #1
 801331a:	4618      	mov	r0, r3
 801331c:	f7f9 f8ac 	bl	800c478 <lwip_htonl>
 8013320:	4603      	mov	r3, r0
 8013322:	2200      	movs	r2, #0
 8013324:	4621      	mov	r1, r4
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7ff fe68 	bl	8012ffc <tcp_output_alloc_header>
 801332c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d102      	bne.n	801333a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013338:	e010      	b.n	801335c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801333a:	7abb      	ldrb	r3, [r7, #10]
 801333c:	2200      	movs	r2, #0
 801333e:	68f9      	ldr	r1, [r7, #12]
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f7ff fe99 	bl	8013078 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	3304      	adds	r3, #4
 801334c:	68f9      	ldr	r1, [r7, #12]
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f7ff fed0 	bl	80130f4 <tcp_output_control_segment>
 8013354:	4603      	mov	r3, r0
 8013356:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013358:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801335c:	4618      	mov	r0, r3
 801335e:	3714      	adds	r7, #20
 8013360:	46bd      	mov	sp, r7
 8013362:	bd90      	pop	{r4, r7, pc}
 8013364:	0801a268 	.word	0x0801a268
 8013368:	0801aaa0 	.word	0x0801aaa0
 801336c:	0801a2bc 	.word	0x0801a2bc

08013370 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013370:	b590      	push	{r4, r7, lr}
 8013372:	b08b      	sub	sp, #44	@ 0x2c
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013378:	2300      	movs	r3, #0
 801337a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d106      	bne.n	8013390 <tcp_zero_window_probe+0x20>
 8013382:	4b4d      	ldr	r3, [pc, #308]	@ (80134b8 <tcp_zero_window_probe+0x148>)
 8013384:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013388:	494c      	ldr	r1, [pc, #304]	@ (80134bc <tcp_zero_window_probe+0x14c>)
 801338a:	484d      	ldr	r0, [pc, #308]	@ (80134c0 <tcp_zero_window_probe+0x150>)
 801338c:	f004 fab0 	bl	80178f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8013396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013398:	2b00      	cmp	r3, #0
 801339a:	d101      	bne.n	80133a0 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801339c:	2300      	movs	r3, #0
 801339e:	e087      	b.n	80134b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80133a6:	2bff      	cmp	r3, #255	@ 0xff
 80133a8:	d007      	beq.n	80133ba <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80133b0:	3301      	adds	r3, #1
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80133ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133bc:	691b      	ldr	r3, [r3, #16]
 80133be:	899b      	ldrh	r3, [r3, #12]
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7f9 f842 	bl	800c44c <lwip_htons>
 80133c8:	4603      	mov	r3, r0
 80133ca:	b2db      	uxtb	r3, r3
 80133cc:	f003 0301 	and.w	r3, r3, #1
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d005      	beq.n	80133e0 <tcp_zero_window_probe+0x70>
 80133d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133d6:	891b      	ldrh	r3, [r3, #8]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d101      	bne.n	80133e0 <tcp_zero_window_probe+0x70>
 80133dc:	2301      	movs	r3, #1
 80133de:	e000      	b.n	80133e2 <tcp_zero_window_probe+0x72>
 80133e0:	2300      	movs	r3, #0
 80133e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80133e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	bf0c      	ite	eq
 80133ee:	2301      	moveq	r3, #1
 80133f0:	2300      	movne	r3, #0
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80133f6:	7cfb      	ldrb	r3, [r7, #19]
 80133f8:	b299      	uxth	r1, r3
 80133fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133fc:	691b      	ldr	r3, [r3, #16]
 80133fe:	685b      	ldr	r3, [r3, #4]
 8013400:	8c3a      	ldrh	r2, [r7, #32]
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f7ff fdfa 	bl	8012ffc <tcp_output_alloc_header>
 8013408:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d102      	bne.n	8013416 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013414:	e04c      	b.n	80134b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801341c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013420:	2b00      	cmp	r3, #0
 8013422:	d011      	beq.n	8013448 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	899b      	ldrh	r3, [r3, #12]
 8013428:	b29b      	uxth	r3, r3
 801342a:	b21b      	sxth	r3, r3
 801342c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013430:	b21c      	sxth	r4, r3
 8013432:	2011      	movs	r0, #17
 8013434:	f7f9 f80a 	bl	800c44c <lwip_htons>
 8013438:	4603      	mov	r3, r0
 801343a:	b21b      	sxth	r3, r3
 801343c:	4323      	orrs	r3, r4
 801343e:	b21b      	sxth	r3, r3
 8013440:	b29a      	uxth	r2, r3
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	819a      	strh	r2, [r3, #12]
 8013446:	e010      	b.n	801346a <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	3314      	adds	r3, #20
 801344e:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013452:	6858      	ldr	r0, [r3, #4]
 8013454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013456:	685b      	ldr	r3, [r3, #4]
 8013458:	891a      	ldrh	r2, [r3, #8]
 801345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801345c:	891b      	ldrh	r3, [r3, #8]
 801345e:	1ad3      	subs	r3, r2, r3
 8013460:	b29b      	uxth	r3, r3
 8013462:	2201      	movs	r2, #1
 8013464:	6979      	ldr	r1, [r7, #20]
 8013466:	f7fa fe3b 	bl	800e0e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346c:	691b      	ldr	r3, [r3, #16]
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	f7f9 f801 	bl	800c478 <lwip_htonl>
 8013476:	4603      	mov	r3, r0
 8013478:	3301      	adds	r3, #1
 801347a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	1ad3      	subs	r3, r2, r3
 8013484:	2b00      	cmp	r3, #0
 8013486:	da02      	bge.n	801348e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801348e:	7cfb      	ldrb	r3, [r7, #19]
 8013490:	2200      	movs	r2, #0
 8013492:	69f9      	ldr	r1, [r7, #28]
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f7ff fdef 	bl	8013078 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	3304      	adds	r3, #4
 80134a0:	69f9      	ldr	r1, [r7, #28]
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f7ff fe26 	bl	80130f4 <tcp_output_control_segment>
 80134a8:	4603      	mov	r3, r0
 80134aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80134ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	372c      	adds	r7, #44	@ 0x2c
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd90      	pop	{r4, r7, pc}
 80134b8:	0801a268 	.word	0x0801a268
 80134bc:	0801aabc 	.word	0x0801aabc
 80134c0:	0801a2bc 	.word	0x0801a2bc

080134c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80134cc:	f7fa fef6 	bl	800e2bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80134d0:	4b0a      	ldr	r3, [pc, #40]	@ (80134fc <tcpip_tcp_timer+0x38>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d103      	bne.n	80134e0 <tcpip_tcp_timer+0x1c>
 80134d8:	4b09      	ldr	r3, [pc, #36]	@ (8013500 <tcpip_tcp_timer+0x3c>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d005      	beq.n	80134ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80134e0:	2200      	movs	r2, #0
 80134e2:	4908      	ldr	r1, [pc, #32]	@ (8013504 <tcpip_tcp_timer+0x40>)
 80134e4:	20fa      	movs	r0, #250	@ 0xfa
 80134e6:	f000 f8f3 	bl	80136d0 <sys_timeout>
 80134ea:	e003      	b.n	80134f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80134ec:	4b06      	ldr	r3, [pc, #24]	@ (8013508 <tcpip_tcp_timer+0x44>)
 80134ee:	2200      	movs	r2, #0
 80134f0:	601a      	str	r2, [r3, #0]
  }
}
 80134f2:	bf00      	nop
 80134f4:	bf00      	nop
 80134f6:	3708      	adds	r7, #8
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	20008508 	.word	0x20008508
 8013500:	2000850c 	.word	0x2000850c
 8013504:	080134c5 	.word	0x080134c5
 8013508:	20008558 	.word	0x20008558

0801350c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013510:	4b0a      	ldr	r3, [pc, #40]	@ (801353c <tcp_timer_needed+0x30>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d10f      	bne.n	8013538 <tcp_timer_needed+0x2c>
 8013518:	4b09      	ldr	r3, [pc, #36]	@ (8013540 <tcp_timer_needed+0x34>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d103      	bne.n	8013528 <tcp_timer_needed+0x1c>
 8013520:	4b08      	ldr	r3, [pc, #32]	@ (8013544 <tcp_timer_needed+0x38>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d007      	beq.n	8013538 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013528:	4b04      	ldr	r3, [pc, #16]	@ (801353c <tcp_timer_needed+0x30>)
 801352a:	2201      	movs	r2, #1
 801352c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801352e:	2200      	movs	r2, #0
 8013530:	4905      	ldr	r1, [pc, #20]	@ (8013548 <tcp_timer_needed+0x3c>)
 8013532:	20fa      	movs	r0, #250	@ 0xfa
 8013534:	f000 f8cc 	bl	80136d0 <sys_timeout>
  }
}
 8013538:	bf00      	nop
 801353a:	bd80      	pop	{r7, pc}
 801353c:	20008558 	.word	0x20008558
 8013540:	20008508 	.word	0x20008508
 8013544:	2000850c 	.word	0x2000850c
 8013548:	080134c5 	.word	0x080134c5

0801354c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b086      	sub	sp, #24
 8013550:	af00      	add	r7, sp, #0
 8013552:	60f8      	str	r0, [r7, #12]
 8013554:	60b9      	str	r1, [r7, #8]
 8013556:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013558:	2006      	movs	r0, #6
 801355a:	f7f9 fbeb 	bl	800cd34 <memp_malloc>
 801355e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d109      	bne.n	801357a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d151      	bne.n	8013610 <sys_timeout_abs+0xc4>
 801356c:	4b2a      	ldr	r3, [pc, #168]	@ (8013618 <sys_timeout_abs+0xcc>)
 801356e:	22be      	movs	r2, #190	@ 0xbe
 8013570:	492a      	ldr	r1, [pc, #168]	@ (801361c <sys_timeout_abs+0xd0>)
 8013572:	482b      	ldr	r0, [pc, #172]	@ (8013620 <sys_timeout_abs+0xd4>)
 8013574:	f004 f9bc 	bl	80178f0 <iprintf>
    return;
 8013578:	e04a      	b.n	8013610 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2200      	movs	r2, #0
 801357e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	68ba      	ldr	r2, [r7, #8]
 8013584:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	68fa      	ldr	r2, [r7, #12]
 8013590:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013592:	4b24      	ldr	r3, [pc, #144]	@ (8013624 <sys_timeout_abs+0xd8>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d103      	bne.n	80135a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801359a:	4a22      	ldr	r2, [pc, #136]	@ (8013624 <sys_timeout_abs+0xd8>)
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	6013      	str	r3, [r2, #0]
    return;
 80135a0:	e037      	b.n	8013612 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	685a      	ldr	r2, [r3, #4]
 80135a6:	4b1f      	ldr	r3, [pc, #124]	@ (8013624 <sys_timeout_abs+0xd8>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	685b      	ldr	r3, [r3, #4]
 80135ac:	1ad3      	subs	r3, r2, r3
 80135ae:	0fdb      	lsrs	r3, r3, #31
 80135b0:	f003 0301 	and.w	r3, r3, #1
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d007      	beq.n	80135ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80135ba:	4b1a      	ldr	r3, [pc, #104]	@ (8013624 <sys_timeout_abs+0xd8>)
 80135bc:	681a      	ldr	r2, [r3, #0]
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80135c2:	4a18      	ldr	r2, [pc, #96]	@ (8013624 <sys_timeout_abs+0xd8>)
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	6013      	str	r3, [r2, #0]
 80135c8:	e023      	b.n	8013612 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80135ca:	4b16      	ldr	r3, [pc, #88]	@ (8013624 <sys_timeout_abs+0xd8>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	617b      	str	r3, [r7, #20]
 80135d0:	e01a      	b.n	8013608 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00b      	beq.n	80135f2 <sys_timeout_abs+0xa6>
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	685a      	ldr	r2, [r3, #4]
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	1ad3      	subs	r3, r2, r3
 80135e6:	0fdb      	lsrs	r3, r3, #31
 80135e8:	f003 0301 	and.w	r3, r3, #1
 80135ec:	b2db      	uxtb	r3, r3
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d007      	beq.n	8013602 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	693a      	ldr	r2, [r7, #16]
 80135fe:	601a      	str	r2, [r3, #0]
        break;
 8013600:	e007      	b.n	8013612 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	617b      	str	r3, [r7, #20]
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d1e1      	bne.n	80135d2 <sys_timeout_abs+0x86>
 801360e:	e000      	b.n	8013612 <sys_timeout_abs+0xc6>
    return;
 8013610:	bf00      	nop
      }
    }
  }
}
 8013612:	3718      	adds	r7, #24
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	0801aae0 	.word	0x0801aae0
 801361c:	0801ab14 	.word	0x0801ab14
 8013620:	0801ab54 	.word	0x0801ab54
 8013624:	20008550 	.word	0x20008550

08013628 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b086      	sub	sp, #24
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013634:	697b      	ldr	r3, [r7, #20]
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	4798      	blx	r3

  now = sys_now();
 801363a:	f7f8 fccb 	bl	800bfd4 <sys_now>
 801363e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	4b0f      	ldr	r3, [pc, #60]	@ (8013684 <lwip_cyclic_timer+0x5c>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4413      	add	r3, r2
 801364a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	0fdb      	lsrs	r3, r3, #31
 8013654:	f003 0301 	and.w	r3, r3, #1
 8013658:	b2db      	uxtb	r3, r3
 801365a:	2b00      	cmp	r3, #0
 801365c:	d009      	beq.n	8013672 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	4413      	add	r3, r2
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	4907      	ldr	r1, [pc, #28]	@ (8013688 <lwip_cyclic_timer+0x60>)
 801366a:	4618      	mov	r0, r3
 801366c:	f7ff ff6e 	bl	801354c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013670:	e004      	b.n	801367c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	4904      	ldr	r1, [pc, #16]	@ (8013688 <lwip_cyclic_timer+0x60>)
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f7ff ff68 	bl	801354c <sys_timeout_abs>
}
 801367c:	bf00      	nop
 801367e:	3718      	adds	r7, #24
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}
 8013684:	20008554 	.word	0x20008554
 8013688:	08013629 	.word	0x08013629

0801368c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013692:	2301      	movs	r3, #1
 8013694:	607b      	str	r3, [r7, #4]
 8013696:	e00e      	b.n	80136b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013698:	4a0b      	ldr	r2, [pc, #44]	@ (80136c8 <sys_timeouts_init+0x3c>)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	00db      	lsls	r3, r3, #3
 80136a4:	4a08      	ldr	r2, [pc, #32]	@ (80136c8 <sys_timeouts_init+0x3c>)
 80136a6:	4413      	add	r3, r2
 80136a8:	461a      	mov	r2, r3
 80136aa:	4908      	ldr	r1, [pc, #32]	@ (80136cc <sys_timeouts_init+0x40>)
 80136ac:	f000 f810 	bl	80136d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	3301      	adds	r3, #1
 80136b4:	607b      	str	r3, [r7, #4]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b02      	cmp	r3, #2
 80136ba:	d9ed      	bls.n	8013698 <sys_timeouts_init+0xc>
  }
}
 80136bc:	bf00      	nop
 80136be:	bf00      	nop
 80136c0:	3708      	adds	r7, #8
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	0801bfc4 	.word	0x0801bfc4
 80136cc:	08013629 	.word	0x08013629

080136d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80136e2:	d306      	bcc.n	80136f2 <sys_timeout+0x22>
 80136e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013710 <sys_timeout+0x40>)
 80136e6:	f240 1229 	movw	r2, #297	@ 0x129
 80136ea:	490a      	ldr	r1, [pc, #40]	@ (8013714 <sys_timeout+0x44>)
 80136ec:	480a      	ldr	r0, [pc, #40]	@ (8013718 <sys_timeout+0x48>)
 80136ee:	f004 f8ff 	bl	80178f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80136f2:	f7f8 fc6f 	bl	800bfd4 <sys_now>
 80136f6:	4602      	mov	r2, r0
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	4413      	add	r3, r2
 80136fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	68b9      	ldr	r1, [r7, #8]
 8013702:	6978      	ldr	r0, [r7, #20]
 8013704:	f7ff ff22 	bl	801354c <sys_timeout_abs>
#endif
}
 8013708:	bf00      	nop
 801370a:	3718      	adds	r7, #24
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	0801aae0 	.word	0x0801aae0
 8013714:	0801ab7c 	.word	0x0801ab7c
 8013718:	0801ab54 	.word	0x0801ab54

0801371c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013722:	f7f8 fc57 	bl	800bfd4 <sys_now>
 8013726:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013728:	4b1a      	ldr	r3, [pc, #104]	@ (8013794 <sys_check_timeouts+0x78>)
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	b2db      	uxtb	r3, r3
 801372e:	2b00      	cmp	r3, #0
 8013730:	d001      	beq.n	8013736 <sys_check_timeouts+0x1a>
 8013732:	f7f9 ffa1 	bl	800d678 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013736:	4b18      	ldr	r3, [pc, #96]	@ (8013798 <sys_check_timeouts+0x7c>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d022      	beq.n	8013788 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	68fa      	ldr	r2, [r7, #12]
 8013748:	1ad3      	subs	r3, r2, r3
 801374a:	0fdb      	lsrs	r3, r3, #31
 801374c:	f003 0301 	and.w	r3, r3, #1
 8013750:	b2db      	uxtb	r3, r3
 8013752:	2b00      	cmp	r3, #0
 8013754:	d11a      	bne.n	801378c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	4a0f      	ldr	r2, [pc, #60]	@ (8013798 <sys_check_timeouts+0x7c>)
 801375c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	689b      	ldr	r3, [r3, #8]
 8013762:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	4a0b      	ldr	r2, [pc, #44]	@ (801379c <sys_check_timeouts+0x80>)
 8013770:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013772:	68b9      	ldr	r1, [r7, #8]
 8013774:	2006      	movs	r0, #6
 8013776:	f7f9 fb4d 	bl	800ce14 <memp_free>
    if (handler != NULL) {
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d0d3      	beq.n	8013728 <sys_check_timeouts+0xc>
      handler(arg);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6838      	ldr	r0, [r7, #0]
 8013784:	4798      	blx	r3
  do {
 8013786:	e7cf      	b.n	8013728 <sys_check_timeouts+0xc>
      return;
 8013788:	bf00      	nop
 801378a:	e000      	b.n	801378e <sys_check_timeouts+0x72>
      return;
 801378c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}
 8013794:	200084f9 	.word	0x200084f9
 8013798:	20008550 	.word	0x20008550
 801379c:	20008554 	.word	0x20008554

080137a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80137a4:	f003 ffa4 	bl	80176f0 <rand>
 80137a8:	4603      	mov	r3, r0
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	4b01      	ldr	r3, [pc, #4]	@ (80137c0 <udp_init+0x20>)
 80137ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80137bc:	bf00      	nop
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	2000006c 	.word	0x2000006c

080137c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80137ca:	2300      	movs	r3, #0
 80137cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80137ce:	4b17      	ldr	r3, [pc, #92]	@ (801382c <udp_new_port+0x68>)
 80137d0:	881b      	ldrh	r3, [r3, #0]
 80137d2:	1c5a      	adds	r2, r3, #1
 80137d4:	b291      	uxth	r1, r2
 80137d6:	4a15      	ldr	r2, [pc, #84]	@ (801382c <udp_new_port+0x68>)
 80137d8:	8011      	strh	r1, [r2, #0]
 80137da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80137de:	4293      	cmp	r3, r2
 80137e0:	d103      	bne.n	80137ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80137e2:	4b12      	ldr	r3, [pc, #72]	@ (801382c <udp_new_port+0x68>)
 80137e4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80137e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137ea:	4b11      	ldr	r3, [pc, #68]	@ (8013830 <udp_new_port+0x6c>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	603b      	str	r3, [r7, #0]
 80137f0:	e011      	b.n	8013816 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	8a5a      	ldrh	r2, [r3, #18]
 80137f6:	4b0d      	ldr	r3, [pc, #52]	@ (801382c <udp_new_port+0x68>)
 80137f8:	881b      	ldrh	r3, [r3, #0]
 80137fa:	429a      	cmp	r2, r3
 80137fc:	d108      	bne.n	8013810 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80137fe:	88fb      	ldrh	r3, [r7, #6]
 8013800:	3301      	adds	r3, #1
 8013802:	80fb      	strh	r3, [r7, #6]
 8013804:	88fb      	ldrh	r3, [r7, #6]
 8013806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801380a:	d3e0      	bcc.n	80137ce <udp_new_port+0xa>
        return 0;
 801380c:	2300      	movs	r3, #0
 801380e:	e007      	b.n	8013820 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	68db      	ldr	r3, [r3, #12]
 8013814:	603b      	str	r3, [r7, #0]
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d1ea      	bne.n	80137f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801381c:	4b03      	ldr	r3, [pc, #12]	@ (801382c <udp_new_port+0x68>)
 801381e:	881b      	ldrh	r3, [r3, #0]
}
 8013820:	4618      	mov	r0, r3
 8013822:	370c      	adds	r7, #12
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr
 801382c:	2000006c 	.word	0x2000006c
 8013830:	2000855c 	.word	0x2000855c

08013834 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b084      	sub	sp, #16
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	4613      	mov	r3, r2
 8013840:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d105      	bne.n	8013854 <udp_input_local_match+0x20>
 8013848:	4b27      	ldr	r3, [pc, #156]	@ (80138e8 <udp_input_local_match+0xb4>)
 801384a:	2287      	movs	r2, #135	@ 0x87
 801384c:	4927      	ldr	r1, [pc, #156]	@ (80138ec <udp_input_local_match+0xb8>)
 801384e:	4828      	ldr	r0, [pc, #160]	@ (80138f0 <udp_input_local_match+0xbc>)
 8013850:	f004 f84e 	bl	80178f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d105      	bne.n	8013866 <udp_input_local_match+0x32>
 801385a:	4b23      	ldr	r3, [pc, #140]	@ (80138e8 <udp_input_local_match+0xb4>)
 801385c:	2288      	movs	r2, #136	@ 0x88
 801385e:	4925      	ldr	r1, [pc, #148]	@ (80138f4 <udp_input_local_match+0xc0>)
 8013860:	4823      	ldr	r0, [pc, #140]	@ (80138f0 <udp_input_local_match+0xbc>)
 8013862:	f004 f845 	bl	80178f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	7a1b      	ldrb	r3, [r3, #8]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d00b      	beq.n	8013886 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	7a1a      	ldrb	r2, [r3, #8]
 8013872:	4b21      	ldr	r3, [pc, #132]	@ (80138f8 <udp_input_local_match+0xc4>)
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801387a:	3301      	adds	r3, #1
 801387c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801387e:	429a      	cmp	r2, r3
 8013880:	d001      	beq.n	8013886 <udp_input_local_match+0x52>
    return 0;
 8013882:	2300      	movs	r3, #0
 8013884:	e02b      	b.n	80138de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013886:	79fb      	ldrb	r3, [r7, #7]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d018      	beq.n	80138be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d013      	beq.n	80138ba <udp_input_local_match+0x86>
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00f      	beq.n	80138ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801389a:	4b17      	ldr	r3, [pc, #92]	@ (80138f8 <udp_input_local_match+0xc4>)
 801389c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801389e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138a2:	d00a      	beq.n	80138ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	4b13      	ldr	r3, [pc, #76]	@ (80138f8 <udp_input_local_match+0xc4>)
 80138aa:	695b      	ldr	r3, [r3, #20]
 80138ac:	405a      	eors	r2, r3
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	3308      	adds	r3, #8
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d110      	bne.n	80138dc <udp_input_local_match+0xa8>
          return 1;
 80138ba:	2301      	movs	r3, #1
 80138bc:	e00f      	b.n	80138de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d009      	beq.n	80138d8 <udp_input_local_match+0xa4>
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d005      	beq.n	80138d8 <udp_input_local_match+0xa4>
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	4b09      	ldr	r3, [pc, #36]	@ (80138f8 <udp_input_local_match+0xc4>)
 80138d2:	695b      	ldr	r3, [r3, #20]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d101      	bne.n	80138dc <udp_input_local_match+0xa8>
        return 1;
 80138d8:	2301      	movs	r3, #1
 80138da:	e000      	b.n	80138de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80138dc:	2300      	movs	r3, #0
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	0801abc8 	.word	0x0801abc8
 80138ec:	0801abf8 	.word	0x0801abf8
 80138f0:	0801ac1c 	.word	0x0801ac1c
 80138f4:	0801ac44 	.word	0x0801ac44
 80138f8:	200055a0 	.word	0x200055a0

080138fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80138fc:	b590      	push	{r4, r7, lr}
 80138fe:	b08d      	sub	sp, #52	@ 0x34
 8013900:	af02      	add	r7, sp, #8
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013906:	2300      	movs	r3, #0
 8013908:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d105      	bne.n	801391c <udp_input+0x20>
 8013910:	4b95      	ldr	r3, [pc, #596]	@ (8013b68 <udp_input+0x26c>)
 8013912:	22cf      	movs	r2, #207	@ 0xcf
 8013914:	4995      	ldr	r1, [pc, #596]	@ (8013b6c <udp_input+0x270>)
 8013916:	4896      	ldr	r0, [pc, #600]	@ (8013b70 <udp_input+0x274>)
 8013918:	f003 ffea 	bl	80178f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d105      	bne.n	801392e <udp_input+0x32>
 8013922:	4b91      	ldr	r3, [pc, #580]	@ (8013b68 <udp_input+0x26c>)
 8013924:	22d0      	movs	r2, #208	@ 0xd0
 8013926:	4993      	ldr	r1, [pc, #588]	@ (8013b74 <udp_input+0x278>)
 8013928:	4891      	ldr	r0, [pc, #580]	@ (8013b70 <udp_input+0x274>)
 801392a:	f003 ffe1 	bl	80178f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	895b      	ldrh	r3, [r3, #10]
 8013932:	2b07      	cmp	r3, #7
 8013934:	d809      	bhi.n	801394a <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	891b      	ldrh	r3, [r3, #8]
 801393a:	4619      	mov	r1, r3
 801393c:	488e      	ldr	r0, [pc, #568]	@ (8013b78 <udp_input+0x27c>)
 801393e:	f003 ffd7 	bl	80178f0 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f7fa f9d2 	bl	800dcec <pbuf_free>
    goto end;
 8013948:	e18d      	b.n	8013c66 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013950:	4b8a      	ldr	r3, [pc, #552]	@ (8013b7c <udp_input+0x280>)
 8013952:	695b      	ldr	r3, [r3, #20]
 8013954:	4a89      	ldr	r2, [pc, #548]	@ (8013b7c <udp_input+0x280>)
 8013956:	6812      	ldr	r2, [r2, #0]
 8013958:	4611      	mov	r1, r2
 801395a:	4618      	mov	r0, r3
 801395c:	f002 f9ca 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 8013960:	4603      	mov	r3, r0
 8013962:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	891b      	ldrh	r3, [r3, #8]
 8013968:	4619      	mov	r1, r3
 801396a:	4885      	ldr	r0, [pc, #532]	@ (8013b80 <udp_input+0x284>)
 801396c:	f003 ffc0 	bl	80178f0 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	881b      	ldrh	r3, [r3, #0]
 8013974:	b29b      	uxth	r3, r3
 8013976:	4618      	mov	r0, r3
 8013978:	f7f8 fd68 	bl	800c44c <lwip_htons>
 801397c:	4603      	mov	r3, r0
 801397e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	885b      	ldrh	r3, [r3, #2]
 8013984:	b29b      	uxth	r3, r3
 8013986:	4618      	mov	r0, r3
 8013988:	f7f8 fd60 	bl	800c44c <lwip_htons>
 801398c:	4603      	mov	r3, r0
 801398e:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8013990:	6978      	ldr	r0, [r7, #20]
 8013992:	f000 fd3b 	bl	801440c <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8013996:	487b      	ldr	r0, [pc, #492]	@ (8013b84 <udp_input+0x288>)
 8013998:	f003 ffaa 	bl	80178f0 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801399c:	4b77      	ldr	r3, [pc, #476]	@ (8013b7c <udp_input+0x280>)
 801399e:	695b      	ldr	r3, [r3, #20]
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	4619      	mov	r1, r3
 80139a4:	4b75      	ldr	r3, [pc, #468]	@ (8013b7c <udp_input+0x280>)
 80139a6:	695b      	ldr	r3, [r3, #20]
 80139a8:	0a1b      	lsrs	r3, r3, #8
 80139aa:	b2db      	uxtb	r3, r3
 80139ac:	461a      	mov	r2, r3
 80139ae:	4b73      	ldr	r3, [pc, #460]	@ (8013b7c <udp_input+0x280>)
 80139b0:	695b      	ldr	r3, [r3, #20]
 80139b2:	0c1b      	lsrs	r3, r3, #16
 80139b4:	b2db      	uxtb	r3, r3
 80139b6:	4618      	mov	r0, r3
 80139b8:	4b70      	ldr	r3, [pc, #448]	@ (8013b7c <udp_input+0x280>)
 80139ba:	695b      	ldr	r3, [r3, #20]
 80139bc:	0e1b      	lsrs	r3, r3, #24
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	9300      	str	r3, [sp, #0]
 80139c2:	4603      	mov	r3, r0
 80139c4:	4870      	ldr	r0, [pc, #448]	@ (8013b88 <udp_input+0x28c>)
 80139c6:	f003 ff93 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	885b      	ldrh	r3, [r3, #2]
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7f8 fd3b 	bl	800c44c <lwip_htons>
 80139d6:	4603      	mov	r3, r0
 80139d8:	4619      	mov	r1, r3
 80139da:	486c      	ldr	r0, [pc, #432]	@ (8013b8c <udp_input+0x290>)
 80139dc:	f003 ff88 	bl	80178f0 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 80139e0:	4b66      	ldr	r3, [pc, #408]	@ (8013b7c <udp_input+0x280>)
 80139e2:	691b      	ldr	r3, [r3, #16]
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	4619      	mov	r1, r3
 80139e8:	4b64      	ldr	r3, [pc, #400]	@ (8013b7c <udp_input+0x280>)
 80139ea:	691b      	ldr	r3, [r3, #16]
 80139ec:	0a1b      	lsrs	r3, r3, #8
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	461a      	mov	r2, r3
 80139f2:	4b62      	ldr	r3, [pc, #392]	@ (8013b7c <udp_input+0x280>)
 80139f4:	691b      	ldr	r3, [r3, #16]
 80139f6:	0c1b      	lsrs	r3, r3, #16
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	4618      	mov	r0, r3
 80139fc:	4b5f      	ldr	r3, [pc, #380]	@ (8013b7c <udp_input+0x280>)
 80139fe:	691b      	ldr	r3, [r3, #16]
 8013a00:	0e1b      	lsrs	r3, r3, #24
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	9300      	str	r3, [sp, #0]
 8013a06:	4603      	mov	r3, r0
 8013a08:	485f      	ldr	r0, [pc, #380]	@ (8013b88 <udp_input+0x28c>)
 8013a0a:	f003 ff71 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	881b      	ldrh	r3, [r3, #0]
 8013a12:	b29b      	uxth	r3, r3
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7f8 fd19 	bl	800c44c <lwip_htons>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	485c      	ldr	r0, [pc, #368]	@ (8013b90 <udp_input+0x294>)
 8013a20:	f003 ff66 	bl	80178f0 <iprintf>

  pcb = NULL;
 8013a24:	2300      	movs	r3, #0
 8013a26:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a30:	4b58      	ldr	r3, [pc, #352]	@ (8013b94 <udp_input+0x298>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a36:	e091      	b.n	8013b5c <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8013a38:	4857      	ldr	r0, [pc, #348]	@ (8013b98 <udp_input+0x29c>)
 8013a3a:	f003 ff59 	bl	80178f0 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8013a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	4619      	mov	r1, r3
 8013a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	0a1b      	lsrs	r3, r3, #8
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	461a      	mov	r2, r3
 8013a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	0c1b      	lsrs	r3, r3, #16
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	4618      	mov	r0, r3
 8013a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	0e1b      	lsrs	r3, r3, #24
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	4603      	mov	r3, r0
 8013a66:	4848      	ldr	r0, [pc, #288]	@ (8013b88 <udp_input+0x28c>)
 8013a68:	f003 ff42 	bl	80178f0 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8013a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a6e:	8a5b      	ldrh	r3, [r3, #18]
 8013a70:	4619      	mov	r1, r3
 8013a72:	4846      	ldr	r0, [pc, #280]	@ (8013b8c <udp_input+0x290>)
 8013a74:	f003 ff3c 	bl	80178f0 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8013a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	4619      	mov	r1, r3
 8013a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	0a1b      	lsrs	r3, r3, #8
 8013a86:	b2db      	uxtb	r3, r3
 8013a88:	461a      	mov	r2, r3
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	0c1b      	lsrs	r3, r3, #16
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	4618      	mov	r0, r3
 8013a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	0e1b      	lsrs	r3, r3, #24
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	9300      	str	r3, [sp, #0]
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	4839      	ldr	r0, [pc, #228]	@ (8013b88 <udp_input+0x28c>)
 8013aa2:	f003 ff25 	bl	80178f0 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8013aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa8:	8a9b      	ldrh	r3, [r3, #20]
 8013aaa:	4619      	mov	r1, r3
 8013aac:	4838      	ldr	r0, [pc, #224]	@ (8013b90 <udp_input+0x294>)
 8013aae:	f003 ff1f 	bl	80178f0 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ab4:	8a5b      	ldrh	r3, [r3, #18]
 8013ab6:	89fa      	ldrh	r2, [r7, #14]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d14a      	bne.n	8013b52 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013abc:	7cfb      	ldrb	r3, [r7, #19]
 8013abe:	461a      	mov	r2, r3
 8013ac0:	6839      	ldr	r1, [r7, #0]
 8013ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ac4:	f7ff feb6 	bl	8013834 <udp_input_local_match>
 8013ac8:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d041      	beq.n	8013b52 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad0:	7c1b      	ldrb	r3, [r3, #16]
 8013ad2:	f003 0304 	and.w	r3, r3, #4
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d11d      	bne.n	8013b16 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d102      	bne.n	8013ae6 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae2:	61fb      	str	r3, [r7, #28]
 8013ae4:	e017      	b.n	8013b16 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013ae6:	7cfb      	ldrb	r3, [r7, #19]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d014      	beq.n	8013b16 <udp_input+0x21a>
 8013aec:	4b23      	ldr	r3, [pc, #140]	@ (8013b7c <udp_input+0x280>)
 8013aee:	695b      	ldr	r3, [r3, #20]
 8013af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013af4:	d10f      	bne.n	8013b16 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	3304      	adds	r3, #4
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d008      	beq.n	8013b16 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d101      	bne.n	8013b16 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 8013b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b14:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b18:	8a9b      	ldrh	r3, [r3, #20]
 8013b1a:	8a3a      	ldrh	r2, [r7, #16]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d118      	bne.n	8013b52 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b22:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d005      	beq.n	8013b34 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b2a:	685a      	ldr	r2, [r3, #4]
 8013b2c:	4b13      	ldr	r3, [pc, #76]	@ (8013b7c <udp_input+0x280>)
 8013b2e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d10e      	bne.n	8013b52 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013b34:	6a3b      	ldr	r3, [r7, #32]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d030      	beq.n	8013b9c <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b3c:	68da      	ldr	r2, [r3, #12]
 8013b3e:	6a3b      	ldr	r3, [r7, #32]
 8013b40:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013b42:	4b14      	ldr	r3, [pc, #80]	@ (8013b94 <udp_input+0x298>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b48:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013b4a:	4a12      	ldr	r2, [pc, #72]	@ (8013b94 <udp_input+0x298>)
 8013b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013b50:	e024      	b.n	8013b9c <udp_input+0x2a0>
      }
    }

    prev = pcb;
 8013b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b54:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	f47f af6a 	bne.w	8013a38 <udp_input+0x13c>
 8013b64:	e01b      	b.n	8013b9e <udp_input+0x2a2>
 8013b66:	bf00      	nop
 8013b68:	0801abc8 	.word	0x0801abc8
 8013b6c:	0801ac6c 	.word	0x0801ac6c
 8013b70:	0801ac1c 	.word	0x0801ac1c
 8013b74:	0801ac84 	.word	0x0801ac84
 8013b78:	0801aca0 	.word	0x0801aca0
 8013b7c:	200055a0 	.word	0x200055a0
 8013b80:	0801acd8 	.word	0x0801acd8
 8013b84:	0801ad04 	.word	0x0801ad04
 8013b88:	0801ad0c 	.word	0x0801ad0c
 8013b8c:	0801ad1c 	.word	0x0801ad1c
 8013b90:	0801ad2c 	.word	0x0801ad2c
 8013b94:	2000855c 	.word	0x2000855c
 8013b98:	0801ad34 	.word	0x0801ad34
        break;
 8013b9c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d101      	bne.n	8013ba8 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d002      	beq.n	8013bb4 <udp_input+0x2b8>
    for_us = 1;
 8013bae:	2301      	movs	r3, #1
 8013bb0:	76fb      	strb	r3, [r7, #27]
 8013bb2:	e00a      	b.n	8013bca <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	3304      	adds	r3, #4
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	4b2d      	ldr	r3, [pc, #180]	@ (8013c70 <udp_input+0x374>)
 8013bbc:	695b      	ldr	r3, [r3, #20]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	bf0c      	ite	eq
 8013bc2:	2301      	moveq	r3, #1
 8013bc4:	2300      	movne	r3, #0
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013bca:	7efb      	ldrb	r3, [r7, #27]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d047      	beq.n	8013c60 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8013bd0:	4828      	ldr	r0, [pc, #160]	@ (8013c74 <udp_input+0x378>)
 8013bd2:	f003 fefd 	bl	80179d0 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013bd6:	2108      	movs	r1, #8
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f7fa f801 	bl	800dbe0 <pbuf_remove_header>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00a      	beq.n	8013bfa <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013be4:	4b24      	ldr	r3, [pc, #144]	@ (8013c78 <udp_input+0x37c>)
 8013be6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013bea:	4924      	ldr	r1, [pc, #144]	@ (8013c7c <udp_input+0x380>)
 8013bec:	4824      	ldr	r0, [pc, #144]	@ (8013c80 <udp_input+0x384>)
 8013bee:	f003 fe7f 	bl	80178f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7fa f87a 	bl	800dcec <pbuf_free>
      goto end;
 8013bf8:	e035      	b.n	8013c66 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d012      	beq.n	8013c26 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c02:	699b      	ldr	r3, [r3, #24]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d00a      	beq.n	8013c1e <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c0a:	699c      	ldr	r4, [r3, #24]
 8013c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c0e:	69d8      	ldr	r0, [r3, #28]
 8013c10:	8a3b      	ldrh	r3, [r7, #16]
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	4b1b      	ldr	r3, [pc, #108]	@ (8013c84 <udp_input+0x388>)
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c1a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013c1c:	e024      	b.n	8013c68 <udp_input+0x36c>
        pbuf_free(p);
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f7fa f864 	bl	800dcec <pbuf_free>
        goto end;
 8013c24:	e01f      	b.n	8013c66 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 8013c26:	4818      	ldr	r0, [pc, #96]	@ (8013c88 <udp_input+0x38c>)
 8013c28:	f003 fed2 	bl	80179d0 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c2c:	7cfb      	ldrb	r3, [r7, #19]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d112      	bne.n	8013c58 <udp_input+0x35c>
 8013c32:	4b0f      	ldr	r3, [pc, #60]	@ (8013c70 <udp_input+0x374>)
 8013c34:	695b      	ldr	r3, [r3, #20]
 8013c36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013c3a:	2be0      	cmp	r3, #224	@ 0xe0
 8013c3c:	d00c      	beq.n	8013c58 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8013c70 <udp_input+0x374>)
 8013c40:	899b      	ldrh	r3, [r3, #12]
 8013c42:	3308      	adds	r3, #8
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	b21b      	sxth	r3, r3
 8013c48:	4619      	mov	r1, r3
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7fa f83b 	bl	800dcc6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013c50:	2103      	movs	r1, #3
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f001 fcee 	bl	8015634 <icmp_dest_unreach>
      pbuf_free(p);
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7fa f847 	bl	800dcec <pbuf_free>
  return;
 8013c5e:	e003      	b.n	8013c68 <udp_input+0x36c>
    pbuf_free(p);
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f7fa f843 	bl	800dcec <pbuf_free>
  return;
 8013c66:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013c68:	372c      	adds	r7, #44	@ 0x2c
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd90      	pop	{r4, r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	200055a0 	.word	0x200055a0
 8013c74:	0801ad3c 	.word	0x0801ad3c
 8013c78:	0801abc8 	.word	0x0801abc8
 8013c7c:	0801ad5c 	.word	0x0801ad5c
 8013c80:	0801ac1c 	.word	0x0801ac1c
 8013c84:	200055b0 	.word	0x200055b0
 8013c88:	0801ad78 	.word	0x0801ad78

08013c8c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b088      	sub	sp, #32
 8013c90:	af02      	add	r7, sp, #8
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
 8013c98:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d109      	bne.n	8013cb4 <udp_sendto+0x28>
 8013ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8013d90 <udp_sendto+0x104>)
 8013ca2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013ca6:	493b      	ldr	r1, [pc, #236]	@ (8013d94 <udp_sendto+0x108>)
 8013ca8:	483b      	ldr	r0, [pc, #236]	@ (8013d98 <udp_sendto+0x10c>)
 8013caa:	f003 fe21 	bl	80178f0 <iprintf>
 8013cae:	f06f 030f 	mvn.w	r3, #15
 8013cb2:	e068      	b.n	8013d86 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d109      	bne.n	8013cce <udp_sendto+0x42>
 8013cba:	4b35      	ldr	r3, [pc, #212]	@ (8013d90 <udp_sendto+0x104>)
 8013cbc:	f240 2219 	movw	r2, #537	@ 0x219
 8013cc0:	4936      	ldr	r1, [pc, #216]	@ (8013d9c <udp_sendto+0x110>)
 8013cc2:	4835      	ldr	r0, [pc, #212]	@ (8013d98 <udp_sendto+0x10c>)
 8013cc4:	f003 fe14 	bl	80178f0 <iprintf>
 8013cc8:	f06f 030f 	mvn.w	r3, #15
 8013ccc:	e05b      	b.n	8013d86 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d109      	bne.n	8013ce8 <udp_sendto+0x5c>
 8013cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8013d90 <udp_sendto+0x104>)
 8013cd6:	f240 221a 	movw	r2, #538	@ 0x21a
 8013cda:	4931      	ldr	r1, [pc, #196]	@ (8013da0 <udp_sendto+0x114>)
 8013cdc:	482e      	ldr	r0, [pc, #184]	@ (8013d98 <udp_sendto+0x10c>)
 8013cde:	f003 fe07 	bl	80178f0 <iprintf>
 8013ce2:	f06f 030f 	mvn.w	r3, #15
 8013ce6:	e04e      	b.n	8013d86 <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 8013ce8:	482e      	ldr	r0, [pc, #184]	@ (8013da4 <udp_sendto+0x118>)
 8013cea:	f003 fe71 	bl	80179d0 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	7a1b      	ldrb	r3, [r3, #8]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d006      	beq.n	8013d04 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	7a1b      	ldrb	r3, [r3, #8]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7f9 fc96 	bl	800d62c <netif_get_by_index>
 8013d00:	6178      	str	r0, [r7, #20]
 8013d02:	e003      	b.n	8013d0c <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f001 fd5f 	bl	80157c8 <ip4_route>
 8013d0a:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d12f      	bne.n	8013d72 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 8013d12:	4825      	ldr	r0, [pc, #148]	@ (8013da8 <udp_sendto+0x11c>)
 8013d14:	f003 fdec 	bl	80178f0 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d003      	beq.n	8013d26 <udp_sendto+0x9a>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	4619      	mov	r1, r3
 8013d24:	e000      	b.n	8013d28 <udp_sendto+0x9c>
 8013d26:	2100      	movs	r1, #0
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d004      	beq.n	8013d38 <udp_sendto+0xac>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	3301      	adds	r3, #1
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	461a      	mov	r2, r3
 8013d36:	e000      	b.n	8013d3a <udp_sendto+0xae>
 8013d38:	2200      	movs	r2, #0
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d004      	beq.n	8013d4a <udp_sendto+0xbe>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	3302      	adds	r3, #2
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	4618      	mov	r0, r3
 8013d48:	e000      	b.n	8013d4c <udp_sendto+0xc0>
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d003      	beq.n	8013d5a <udp_sendto+0xce>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	3303      	adds	r3, #3
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	e000      	b.n	8013d5c <udp_sendto+0xd0>
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	9300      	str	r3, [sp, #0]
 8013d5e:	4603      	mov	r3, r0
 8013d60:	4812      	ldr	r0, [pc, #72]	@ (8013dac <udp_sendto+0x120>)
 8013d62:	f003 fdc5 	bl	80178f0 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 8013d66:	200a      	movs	r0, #10
 8013d68:	f003 fdd4 	bl	8017914 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013d6c:	f06f 0303 	mvn.w	r3, #3
 8013d70:	e009      	b.n	8013d86 <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013d72:	887a      	ldrh	r2, [r7, #2]
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	4613      	mov	r3, r2
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	68b9      	ldr	r1, [r7, #8]
 8013d7e:	68f8      	ldr	r0, [r7, #12]
 8013d80:	f000 f816 	bl	8013db0 <udp_sendto_if>
 8013d84:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3718      	adds	r7, #24
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}
 8013d8e:	bf00      	nop
 8013d90:	0801abc8 	.word	0x0801abc8
 8013d94:	0801adc0 	.word	0x0801adc0
 8013d98:	0801ac1c 	.word	0x0801ac1c
 8013d9c:	0801add8 	.word	0x0801add8
 8013da0:	0801adf4 	.word	0x0801adf4
 8013da4:	0801ae10 	.word	0x0801ae10
 8013da8:	0801ae1c 	.word	0x0801ae1c
 8013dac:	0801ad0c 	.word	0x0801ad0c

08013db0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b088      	sub	sp, #32
 8013db4:	af02      	add	r7, sp, #8
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	60b9      	str	r1, [r7, #8]
 8013dba:	607a      	str	r2, [r7, #4]
 8013dbc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d109      	bne.n	8013dd8 <udp_sendto_if+0x28>
 8013dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8013e80 <udp_sendto_if+0xd0>)
 8013dc6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013dca:	492e      	ldr	r1, [pc, #184]	@ (8013e84 <udp_sendto_if+0xd4>)
 8013dcc:	482e      	ldr	r0, [pc, #184]	@ (8013e88 <udp_sendto_if+0xd8>)
 8013dce:	f003 fd8f 	bl	80178f0 <iprintf>
 8013dd2:	f06f 030f 	mvn.w	r3, #15
 8013dd6:	e04f      	b.n	8013e78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d109      	bne.n	8013df2 <udp_sendto_if+0x42>
 8013dde:	4b28      	ldr	r3, [pc, #160]	@ (8013e80 <udp_sendto_if+0xd0>)
 8013de0:	f240 2281 	movw	r2, #641	@ 0x281
 8013de4:	4929      	ldr	r1, [pc, #164]	@ (8013e8c <udp_sendto_if+0xdc>)
 8013de6:	4828      	ldr	r0, [pc, #160]	@ (8013e88 <udp_sendto_if+0xd8>)
 8013de8:	f003 fd82 	bl	80178f0 <iprintf>
 8013dec:	f06f 030f 	mvn.w	r3, #15
 8013df0:	e042      	b.n	8013e78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d109      	bne.n	8013e0c <udp_sendto_if+0x5c>
 8013df8:	4b21      	ldr	r3, [pc, #132]	@ (8013e80 <udp_sendto_if+0xd0>)
 8013dfa:	f240 2282 	movw	r2, #642	@ 0x282
 8013dfe:	4924      	ldr	r1, [pc, #144]	@ (8013e90 <udp_sendto_if+0xe0>)
 8013e00:	4821      	ldr	r0, [pc, #132]	@ (8013e88 <udp_sendto_if+0xd8>)
 8013e02:	f003 fd75 	bl	80178f0 <iprintf>
 8013e06:	f06f 030f 	mvn.w	r3, #15
 8013e0a:	e035      	b.n	8013e78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013e0c:	6a3b      	ldr	r3, [r7, #32]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d109      	bne.n	8013e26 <udp_sendto_if+0x76>
 8013e12:	4b1b      	ldr	r3, [pc, #108]	@ (8013e80 <udp_sendto_if+0xd0>)
 8013e14:	f240 2283 	movw	r2, #643	@ 0x283
 8013e18:	491e      	ldr	r1, [pc, #120]	@ (8013e94 <udp_sendto_if+0xe4>)
 8013e1a:	481b      	ldr	r0, [pc, #108]	@ (8013e88 <udp_sendto_if+0xd8>)
 8013e1c:	f003 fd68 	bl	80178f0 <iprintf>
 8013e20:	f06f 030f 	mvn.w	r3, #15
 8013e24:	e028      	b.n	8013e78 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d009      	beq.n	8013e40 <udp_sendto_if+0x90>
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d005      	beq.n	8013e40 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013e3c:	2be0      	cmp	r3, #224	@ 0xe0
 8013e3e:	d103      	bne.n	8013e48 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013e40:	6a3b      	ldr	r3, [r7, #32]
 8013e42:	3304      	adds	r3, #4
 8013e44:	617b      	str	r3, [r7, #20]
 8013e46:	e00b      	b.n	8013e60 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	6a3b      	ldr	r3, [r7, #32]
 8013e4e:	3304      	adds	r3, #4
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d002      	beq.n	8013e5c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013e56:	f06f 0303 	mvn.w	r3, #3
 8013e5a:	e00d      	b.n	8013e78 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013e60:	887a      	ldrh	r2, [r7, #2]
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	9301      	str	r3, [sp, #4]
 8013e66:	6a3b      	ldr	r3, [r7, #32]
 8013e68:	9300      	str	r3, [sp, #0]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	68b9      	ldr	r1, [r7, #8]
 8013e70:	68f8      	ldr	r0, [r7, #12]
 8013e72:	f000 f811 	bl	8013e98 <udp_sendto_if_src>
 8013e76:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3718      	adds	r7, #24
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	0801abc8 	.word	0x0801abc8
 8013e84:	0801ae34 	.word	0x0801ae34
 8013e88:	0801ac1c 	.word	0x0801ac1c
 8013e8c:	0801ae50 	.word	0x0801ae50
 8013e90:	0801ae6c 	.word	0x0801ae6c
 8013e94:	0801ae8c 	.word	0x0801ae8c

08013e98 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b08c      	sub	sp, #48	@ 0x30
 8013e9c:	af04      	add	r7, sp, #16
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	607a      	str	r2, [r7, #4]
 8013ea4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d109      	bne.n	8013ec0 <udp_sendto_if_src+0x28>
 8013eac:	4b7a      	ldr	r3, [pc, #488]	@ (8014098 <udp_sendto_if_src+0x200>)
 8013eae:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013eb2:	497a      	ldr	r1, [pc, #488]	@ (801409c <udp_sendto_if_src+0x204>)
 8013eb4:	487a      	ldr	r0, [pc, #488]	@ (80140a0 <udp_sendto_if_src+0x208>)
 8013eb6:	f003 fd1b 	bl	80178f0 <iprintf>
 8013eba:	f06f 030f 	mvn.w	r3, #15
 8013ebe:	e0e6      	b.n	801408e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d109      	bne.n	8013eda <udp_sendto_if_src+0x42>
 8013ec6:	4b74      	ldr	r3, [pc, #464]	@ (8014098 <udp_sendto_if_src+0x200>)
 8013ec8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013ecc:	4975      	ldr	r1, [pc, #468]	@ (80140a4 <udp_sendto_if_src+0x20c>)
 8013ece:	4874      	ldr	r0, [pc, #464]	@ (80140a0 <udp_sendto_if_src+0x208>)
 8013ed0:	f003 fd0e 	bl	80178f0 <iprintf>
 8013ed4:	f06f 030f 	mvn.w	r3, #15
 8013ed8:	e0d9      	b.n	801408e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d109      	bne.n	8013ef4 <udp_sendto_if_src+0x5c>
 8013ee0:	4b6d      	ldr	r3, [pc, #436]	@ (8014098 <udp_sendto_if_src+0x200>)
 8013ee2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013ee6:	4970      	ldr	r1, [pc, #448]	@ (80140a8 <udp_sendto_if_src+0x210>)
 8013ee8:	486d      	ldr	r0, [pc, #436]	@ (80140a0 <udp_sendto_if_src+0x208>)
 8013eea:	f003 fd01 	bl	80178f0 <iprintf>
 8013eee:	f06f 030f 	mvn.w	r3, #15
 8013ef2:	e0cc      	b.n	801408e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d109      	bne.n	8013f0e <udp_sendto_if_src+0x76>
 8013efa:	4b67      	ldr	r3, [pc, #412]	@ (8014098 <udp_sendto_if_src+0x200>)
 8013efc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8013f00:	496a      	ldr	r1, [pc, #424]	@ (80140ac <udp_sendto_if_src+0x214>)
 8013f02:	4867      	ldr	r0, [pc, #412]	@ (80140a0 <udp_sendto_if_src+0x208>)
 8013f04:	f003 fcf4 	bl	80178f0 <iprintf>
 8013f08:	f06f 030f 	mvn.w	r3, #15
 8013f0c:	e0bf      	b.n	801408e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d109      	bne.n	8013f28 <udp_sendto_if_src+0x90>
 8013f14:	4b60      	ldr	r3, [pc, #384]	@ (8014098 <udp_sendto_if_src+0x200>)
 8013f16:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8013f1a:	4965      	ldr	r1, [pc, #404]	@ (80140b0 <udp_sendto_if_src+0x218>)
 8013f1c:	4860      	ldr	r0, [pc, #384]	@ (80140a0 <udp_sendto_if_src+0x208>)
 8013f1e:	f003 fce7 	bl	80178f0 <iprintf>
 8013f22:	f06f 030f 	mvn.w	r3, #15
 8013f26:	e0b2      	b.n	801408e <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	8a5b      	ldrh	r3, [r3, #18]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d115      	bne.n	8013f5c <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 8013f30:	4860      	ldr	r0, [pc, #384]	@ (80140b4 <udp_sendto_if_src+0x21c>)
 8013f32:	f003 fd4d 	bl	80179d0 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013f36:	68f9      	ldr	r1, [r7, #12]
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	8a5b      	ldrh	r3, [r3, #18]
 8013f3c:	461a      	mov	r2, r3
 8013f3e:	68f8      	ldr	r0, [r7, #12]
 8013f40:	f000 f8cc 	bl	80140dc <udp_bind>
 8013f44:	4603      	mov	r3, r0
 8013f46:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013f48:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d005      	beq.n	8013f5c <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 8013f50:	4859      	ldr	r0, [pc, #356]	@ (80140b8 <udp_sendto_if_src+0x220>)
 8013f52:	f003 fd3d 	bl	80179d0 <puts>
      return err;
 8013f56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013f5a:	e098      	b.n	801408e <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	891b      	ldrh	r3, [r3, #8]
 8013f60:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013f64:	4293      	cmp	r3, r2
 8013f66:	d902      	bls.n	8013f6e <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 8013f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f6c:	e08f      	b.n	801408e <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013f6e:	2108      	movs	r1, #8
 8013f70:	68b8      	ldr	r0, [r7, #8]
 8013f72:	f7f9 fe25 	bl	800dbc0 <pbuf_add_header>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d01d      	beq.n	8013fb8 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013f7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013f80:	2108      	movs	r1, #8
 8013f82:	2022      	movs	r0, #34	@ 0x22
 8013f84:	f7f9 fbce 	bl	800d724 <pbuf_alloc>
 8013f88:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013f8a:	69fb      	ldr	r3, [r7, #28]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d105      	bne.n	8013f9c <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 8013f90:	484a      	ldr	r0, [pc, #296]	@ (80140bc <udp_sendto_if_src+0x224>)
 8013f92:	f003 fd1d 	bl	80179d0 <puts>
      return ERR_MEM;
 8013f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f9a:	e078      	b.n	801408e <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	891b      	ldrh	r3, [r3, #8]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d003      	beq.n	8013fac <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013fa4:	68b9      	ldr	r1, [r7, #8]
 8013fa6:	69f8      	ldr	r0, [r7, #28]
 8013fa8:	f7f9 ffb8 	bl	800df1c <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 8013fac:	68ba      	ldr	r2, [r7, #8]
 8013fae:	69f9      	ldr	r1, [r7, #28]
 8013fb0:	4843      	ldr	r0, [pc, #268]	@ (80140c0 <udp_sendto_if_src+0x228>)
 8013fb2:	f003 fc9d 	bl	80178f0 <iprintf>
 8013fb6:	e005      	b.n	8013fc4 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 8013fbc:	68b9      	ldr	r1, [r7, #8]
 8013fbe:	4841      	ldr	r0, [pc, #260]	@ (80140c4 <udp_sendto_if_src+0x22c>)
 8013fc0:	f003 fc96 	bl	80178f0 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	895b      	ldrh	r3, [r3, #10]
 8013fc8:	2b07      	cmp	r3, #7
 8013fca:	d806      	bhi.n	8013fda <udp_sendto_if_src+0x142>
 8013fcc:	4b32      	ldr	r3, [pc, #200]	@ (8014098 <udp_sendto_if_src+0x200>)
 8013fce:	f240 320d 	movw	r2, #781	@ 0x30d
 8013fd2:	493d      	ldr	r1, [pc, #244]	@ (80140c8 <udp_sendto_if_src+0x230>)
 8013fd4:	4832      	ldr	r0, [pc, #200]	@ (80140a0 <udp_sendto_if_src+0x208>)
 8013fd6:	f003 fc8b 	bl	80178f0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	8a5b      	ldrh	r3, [r3, #18]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7f8 fa31 	bl	800c44c <lwip_htons>
 8013fea:	4603      	mov	r3, r0
 8013fec:	461a      	mov	r2, r3
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013ff2:	887b      	ldrh	r3, [r7, #2]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7f8 fa29 	bl	800c44c <lwip_htons>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	2200      	movs	r2, #0
 8014006:	719a      	strb	r2, [r3, #6]
 8014008:	2200      	movs	r2, #0
 801400a:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	891b      	ldrh	r3, [r3, #8]
 8014010:	4619      	mov	r1, r3
 8014012:	482e      	ldr	r0, [pc, #184]	@ (80140cc <udp_sendto_if_src+0x234>)
 8014014:	f003 fc6c 	bl	80178f0 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	891b      	ldrh	r3, [r3, #8]
 801401c:	4619      	mov	r1, r3
 801401e:	482c      	ldr	r0, [pc, #176]	@ (80140d0 <udp_sendto_if_src+0x238>)
 8014020:	f003 fc66 	bl	80178f0 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 8014024:	69fb      	ldr	r3, [r7, #28]
 8014026:	891b      	ldrh	r3, [r3, #8]
 8014028:	4618      	mov	r0, r3
 801402a:	f7f8 fa0f 	bl	800c44c <lwip_htons>
 801402e:	4603      	mov	r3, r0
 8014030:	461a      	mov	r2, r3
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014036:	2311      	movs	r3, #17
 8014038:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	7adb      	ldrb	r3, [r3, #11]
 801403e:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	88db      	ldrh	r3, [r3, #6]
 8014044:	b29b      	uxth	r3, r3
 8014046:	4619      	mov	r1, r3
 8014048:	4822      	ldr	r0, [pc, #136]	@ (80140d4 <udp_sendto_if_src+0x23c>)
 801404a:	f003 fc51 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801404e:	7cfb      	ldrb	r3, [r7, #19]
 8014050:	4619      	mov	r1, r3
 8014052:	4821      	ldr	r0, [pc, #132]	@ (80140d8 <udp_sendto_if_src+0x240>)
 8014054:	f003 fc4c 	bl	80178f0 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	7a9b      	ldrb	r3, [r3, #10]
 801405c:	7cb9      	ldrb	r1, [r7, #18]
 801405e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014060:	9202      	str	r2, [sp, #8]
 8014062:	7cfa      	ldrb	r2, [r7, #19]
 8014064:	9201      	str	r2, [sp, #4]
 8014066:	9300      	str	r3, [sp, #0]
 8014068:	460b      	mov	r3, r1
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801406e:	69f8      	ldr	r0, [r7, #28]
 8014070:	f001 fd92 	bl	8015b98 <ip4_output_if_src>
 8014074:	4603      	mov	r3, r0
 8014076:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014078:	69fa      	ldr	r2, [r7, #28]
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	429a      	cmp	r2, r3
 801407e:	d004      	beq.n	801408a <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 8014080:	69f8      	ldr	r0, [r7, #28]
 8014082:	f7f9 fe33 	bl	800dcec <pbuf_free>
    q = NULL;
 8014086:	2300      	movs	r3, #0
 8014088:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801408a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801408e:	4618      	mov	r0, r3
 8014090:	3720      	adds	r7, #32
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	0801abc8 	.word	0x0801abc8
 801409c:	0801aeac 	.word	0x0801aeac
 80140a0:	0801ac1c 	.word	0x0801ac1c
 80140a4:	0801aecc 	.word	0x0801aecc
 80140a8:	0801aeec 	.word	0x0801aeec
 80140ac:	0801af10 	.word	0x0801af10
 80140b0:	0801af34 	.word	0x0801af34
 80140b4:	0801af58 	.word	0x0801af58
 80140b8:	0801af88 	.word	0x0801af88
 80140bc:	0801afac 	.word	0x0801afac
 80140c0:	0801afd0 	.word	0x0801afd0
 80140c4:	0801b008 	.word	0x0801b008
 80140c8:	0801b034 	.word	0x0801b034
 80140cc:	0801b064 	.word	0x0801b064
 80140d0:	0801b090 	.word	0x0801b090
 80140d4:	0801b0b4 	.word	0x0801b0b4
 80140d8:	0801b0d4 	.word	0x0801b0d4

080140dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b088      	sub	sp, #32
 80140e0:	af02      	add	r7, sp, #8
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	4613      	mov	r3, r2
 80140e8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80140f0:	4b65      	ldr	r3, [pc, #404]	@ (8014288 <udp_bind+0x1ac>)
 80140f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d109      	bne.n	801410e <udp_bind+0x32>
 80140fa:	4b64      	ldr	r3, [pc, #400]	@ (801428c <udp_bind+0x1b0>)
 80140fc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014100:	4963      	ldr	r1, [pc, #396]	@ (8014290 <udp_bind+0x1b4>)
 8014102:	4864      	ldr	r0, [pc, #400]	@ (8014294 <udp_bind+0x1b8>)
 8014104:	f003 fbf4 	bl	80178f0 <iprintf>
 8014108:	f06f 030f 	mvn.w	r3, #15
 801410c:	e0b7      	b.n	801427e <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801410e:	4862      	ldr	r0, [pc, #392]	@ (8014298 <udp_bind+0x1bc>)
 8014110:	f003 fbee 	bl	80178f0 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d003      	beq.n	8014122 <udp_bind+0x46>
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	4619      	mov	r1, r3
 8014120:	e000      	b.n	8014124 <udp_bind+0x48>
 8014122:	2100      	movs	r1, #0
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d004      	beq.n	8014134 <udp_bind+0x58>
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	3301      	adds	r3, #1
 801412e:	781b      	ldrb	r3, [r3, #0]
 8014130:	461a      	mov	r2, r3
 8014132:	e000      	b.n	8014136 <udp_bind+0x5a>
 8014134:	2200      	movs	r2, #0
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d004      	beq.n	8014146 <udp_bind+0x6a>
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	3302      	adds	r3, #2
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	4618      	mov	r0, r3
 8014144:	e000      	b.n	8014148 <udp_bind+0x6c>
 8014146:	2000      	movs	r0, #0
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d003      	beq.n	8014156 <udp_bind+0x7a>
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	3303      	adds	r3, #3
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	e000      	b.n	8014158 <udp_bind+0x7c>
 8014156:	2300      	movs	r3, #0
 8014158:	9300      	str	r3, [sp, #0]
 801415a:	4603      	mov	r3, r0
 801415c:	484f      	ldr	r0, [pc, #316]	@ (801429c <udp_bind+0x1c0>)
 801415e:	f003 fbc7 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 8014162:	88fb      	ldrh	r3, [r7, #6]
 8014164:	4619      	mov	r1, r3
 8014166:	484e      	ldr	r0, [pc, #312]	@ (80142a0 <udp_bind+0x1c4>)
 8014168:	f003 fbc2 	bl	80178f0 <iprintf>

  rebind = 0;
 801416c:	2300      	movs	r3, #0
 801416e:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014170:	4b4c      	ldr	r3, [pc, #304]	@ (80142a4 <udp_bind+0x1c8>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	617b      	str	r3, [r7, #20]
 8014176:	e009      	b.n	801418c <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	429a      	cmp	r2, r3
 801417e:	d102      	bne.n	8014186 <udp_bind+0xaa>
      rebind = 1;
 8014180:	2301      	movs	r3, #1
 8014182:	74fb      	strb	r3, [r7, #19]
      break;
 8014184:	e005      	b.n	8014192 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	617b      	str	r3, [r7, #20]
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d1f2      	bne.n	8014178 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014192:	88fb      	ldrh	r3, [r7, #6]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10c      	bne.n	80141b2 <udp_bind+0xd6>
    port = udp_new_port();
 8014198:	f7ff fb14 	bl	80137c4 <udp_new_port>
 801419c:	4603      	mov	r3, r0
 801419e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80141a0:	88fb      	ldrh	r3, [r7, #6]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d134      	bne.n	8014210 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 80141a6:	4840      	ldr	r0, [pc, #256]	@ (80142a8 <udp_bind+0x1cc>)
 80141a8:	f003 fc12 	bl	80179d0 <puts>
      return ERR_USE;
 80141ac:	f06f 0307 	mvn.w	r3, #7
 80141b0:	e065      	b.n	801427e <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141b2:	4b3c      	ldr	r3, [pc, #240]	@ (80142a4 <udp_bind+0x1c8>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	617b      	str	r3, [r7, #20]
 80141b8:	e027      	b.n	801420a <udp_bind+0x12e>
      if (pcb != ipcb) {
 80141ba:	68fa      	ldr	r2, [r7, #12]
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	429a      	cmp	r2, r3
 80141c0:	d020      	beq.n	8014204 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	8a5b      	ldrh	r3, [r3, #18]
 80141c6:	88fa      	ldrh	r2, [r7, #6]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d11b      	bne.n	8014204 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d00d      	beq.n	80141f4 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d00a      	beq.n	80141f4 <udp_bind+0x118>
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d006      	beq.n	80141f4 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 80141e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d003      	beq.n	80141f4 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d107      	bne.n	8014204 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 80141f4:	88fb      	ldrh	r3, [r7, #6]
 80141f6:	4619      	mov	r1, r3
 80141f8:	482c      	ldr	r0, [pc, #176]	@ (80142ac <udp_bind+0x1d0>)
 80141fa:	f003 fb79 	bl	80178f0 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80141fe:	f06f 0307 	mvn.w	r3, #7
 8014202:	e03c      	b.n	801427e <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	617b      	str	r3, [r7, #20]
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d1d4      	bne.n	80141ba <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d002      	beq.n	801421c <udp_bind+0x140>
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	e000      	b.n	801421e <udp_bind+0x142>
 801421c:	2300      	movs	r3, #0
 801421e:	68fa      	ldr	r2, [r7, #12]
 8014220:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	88fa      	ldrh	r2, [r7, #6]
 8014226:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014228:	7cfb      	ldrb	r3, [r7, #19]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d106      	bne.n	801423c <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801422e:	4b1d      	ldr	r3, [pc, #116]	@ (80142a4 <udp_bind+0x1c8>)
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014236:	4a1b      	ldr	r2, [pc, #108]	@ (80142a4 <udp_bind+0x1c8>)
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801423c:	481c      	ldr	r0, [pc, #112]	@ (80142b0 <udp_bind+0x1d4>)
 801423e:	f003 fb57 	bl	80178f0 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	b2db      	uxtb	r3, r3
 8014248:	4619      	mov	r1, r3
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	0a1b      	lsrs	r3, r3, #8
 8014250:	b2db      	uxtb	r3, r3
 8014252:	461a      	mov	r2, r3
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	0c1b      	lsrs	r3, r3, #16
 801425a:	b2db      	uxtb	r3, r3
 801425c:	4618      	mov	r0, r3
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	0e1b      	lsrs	r3, r3, #24
 8014264:	b2db      	uxtb	r3, r3
 8014266:	9300      	str	r3, [sp, #0]
 8014268:	4603      	mov	r3, r0
 801426a:	480c      	ldr	r0, [pc, #48]	@ (801429c <udp_bind+0x1c0>)
 801426c:	f003 fb40 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	8a5b      	ldrh	r3, [r3, #18]
 8014274:	4619      	mov	r1, r3
 8014276:	480f      	ldr	r0, [pc, #60]	@ (80142b4 <udp_bind+0x1d8>)
 8014278:	f003 fb3a 	bl	80178f0 <iprintf>
  return ERR_OK;
 801427c:	2300      	movs	r3, #0
}
 801427e:	4618      	mov	r0, r3
 8014280:	3718      	adds	r7, #24
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	0801bfdc 	.word	0x0801bfdc
 801428c:	0801abc8 	.word	0x0801abc8
 8014290:	0801b0fc 	.word	0x0801b0fc
 8014294:	0801ac1c 	.word	0x0801ac1c
 8014298:	0801b114 	.word	0x0801b114
 801429c:	0801ad0c 	.word	0x0801ad0c
 80142a0:	0801b128 	.word	0x0801b128
 80142a4:	2000855c 	.word	0x2000855c
 80142a8:	0801b138 	.word	0x0801b138
 80142ac:	0801b158 	.word	0x0801b158
 80142b0:	0801b190 	.word	0x0801b190
 80142b4:	0801b1a4 	.word	0x0801b1a4

080142b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b084      	sub	sp, #16
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d107      	bne.n	80142da <udp_recv+0x22>
 80142ca:	4b08      	ldr	r3, [pc, #32]	@ (80142ec <udp_recv+0x34>)
 80142cc:	f240 428a 	movw	r2, #1162	@ 0x48a
 80142d0:	4907      	ldr	r1, [pc, #28]	@ (80142f0 <udp_recv+0x38>)
 80142d2:	4808      	ldr	r0, [pc, #32]	@ (80142f4 <udp_recv+0x3c>)
 80142d4:	f003 fb0c 	bl	80178f0 <iprintf>
 80142d8:	e005      	b.n	80142e6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	68ba      	ldr	r2, [r7, #8]
 80142de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	687a      	ldr	r2, [r7, #4]
 80142e4:	61da      	str	r2, [r3, #28]
}
 80142e6:	3710      	adds	r7, #16
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}
 80142ec:	0801abc8 	.word	0x0801abc8
 80142f0:	0801b224 	.word	0x0801b224
 80142f4:	0801ac1c 	.word	0x0801ac1c

080142f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b084      	sub	sp, #16
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d107      	bne.n	8014316 <udp_remove+0x1e>
 8014306:	4b19      	ldr	r3, [pc, #100]	@ (801436c <udp_remove+0x74>)
 8014308:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801430c:	4918      	ldr	r1, [pc, #96]	@ (8014370 <udp_remove+0x78>)
 801430e:	4819      	ldr	r0, [pc, #100]	@ (8014374 <udp_remove+0x7c>)
 8014310:	f003 faee 	bl	80178f0 <iprintf>
 8014314:	e026      	b.n	8014364 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014316:	4b18      	ldr	r3, [pc, #96]	@ (8014378 <udp_remove+0x80>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	429a      	cmp	r2, r3
 801431e:	d105      	bne.n	801432c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014320:	4b15      	ldr	r3, [pc, #84]	@ (8014378 <udp_remove+0x80>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	68db      	ldr	r3, [r3, #12]
 8014326:	4a14      	ldr	r2, [pc, #80]	@ (8014378 <udp_remove+0x80>)
 8014328:	6013      	str	r3, [r2, #0]
 801432a:	e017      	b.n	801435c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801432c:	4b12      	ldr	r3, [pc, #72]	@ (8014378 <udp_remove+0x80>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	60fb      	str	r3, [r7, #12]
 8014332:	e010      	b.n	8014356 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d009      	beq.n	8014350 <udp_remove+0x58>
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	687a      	ldr	r2, [r7, #4]
 8014342:	429a      	cmp	r2, r3
 8014344:	d104      	bne.n	8014350 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	68da      	ldr	r2, [r3, #12]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	60da      	str	r2, [r3, #12]
        break;
 801434e:	e005      	b.n	801435c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	60fb      	str	r3, [r7, #12]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d1eb      	bne.n	8014334 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801435c:	6879      	ldr	r1, [r7, #4]
 801435e:	2000      	movs	r0, #0
 8014360:	f7f8 fd58 	bl	800ce14 <memp_free>
}
 8014364:	3710      	adds	r7, #16
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	0801abc8 	.word	0x0801abc8
 8014370:	0801b23c 	.word	0x0801b23c
 8014374:	0801ac1c 	.word	0x0801ac1c
 8014378:	2000855c 	.word	0x2000855c

0801437c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014382:	2000      	movs	r0, #0
 8014384:	f7f8 fcd6 	bl	800cd34 <memp_malloc>
 8014388:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d007      	beq.n	80143a0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014390:	2220      	movs	r2, #32
 8014392:	2100      	movs	r1, #0
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f003 fc0b 	bl	8017bb0 <memset>
    pcb->ttl = UDP_TTL;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	22ff      	movs	r2, #255	@ 0xff
 801439e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80143a0:	687b      	ldr	r3, [r7, #4]
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3708      	adds	r7, #8
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
	...

080143ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b085      	sub	sp, #20
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d01e      	beq.n	80143fa <udp_netif_ip_addr_changed+0x4e>
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d01a      	beq.n	80143fa <udp_netif_ip_addr_changed+0x4e>
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d017      	beq.n	80143fa <udp_netif_ip_addr_changed+0x4e>
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d013      	beq.n	80143fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80143d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014408 <udp_netif_ip_addr_changed+0x5c>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	60fb      	str	r3, [r7, #12]
 80143d8:	e00c      	b.n	80143f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d103      	bne.n	80143ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	681a      	ldr	r2, [r3, #0]
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	68db      	ldr	r3, [r3, #12]
 80143f2:	60fb      	str	r3, [r7, #12]
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d1ef      	bne.n	80143da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80143fa:	bf00      	nop
 80143fc:	3714      	adds	r7, #20
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr
 8014406:	bf00      	nop
 8014408:	2000855c 	.word	0x2000855c

0801440c <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801440c:	b590      	push	{r4, r7, lr}
 801440e:	b083      	sub	sp, #12
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8014414:	481b      	ldr	r0, [pc, #108]	@ (8014484 <udp_debug_print+0x78>)
 8014416:	f003 fadb 	bl	80179d0 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801441a:	481b      	ldr	r0, [pc, #108]	@ (8014488 <udp_debug_print+0x7c>)
 801441c:	f003 fad8 	bl	80179d0 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	881b      	ldrh	r3, [r3, #0]
 8014424:	b29b      	uxth	r3, r3
 8014426:	4618      	mov	r0, r3
 8014428:	f7f8 f810 	bl	800c44c <lwip_htons>
 801442c:	4603      	mov	r3, r0
 801442e:	461c      	mov	r4, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	885b      	ldrh	r3, [r3, #2]
 8014434:	b29b      	uxth	r3, r3
 8014436:	4618      	mov	r0, r3
 8014438:	f7f8 f808 	bl	800c44c <lwip_htons>
 801443c:	4603      	mov	r3, r0
 801443e:	461a      	mov	r2, r3
 8014440:	4621      	mov	r1, r4
 8014442:	4812      	ldr	r0, [pc, #72]	@ (801448c <udp_debug_print+0x80>)
 8014444:	f003 fa54 	bl	80178f0 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8014448:	480f      	ldr	r0, [pc, #60]	@ (8014488 <udp_debug_print+0x7c>)
 801444a:	f003 fac1 	bl	80179d0 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	889b      	ldrh	r3, [r3, #4]
 8014452:	b29b      	uxth	r3, r3
 8014454:	4618      	mov	r0, r3
 8014456:	f7f7 fff9 	bl	800c44c <lwip_htons>
 801445a:	4603      	mov	r3, r0
 801445c:	461c      	mov	r4, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	88db      	ldrh	r3, [r3, #6]
 8014462:	b29b      	uxth	r3, r3
 8014464:	4618      	mov	r0, r3
 8014466:	f7f7 fff1 	bl	800c44c <lwip_htons>
 801446a:	4603      	mov	r3, r0
 801446c:	461a      	mov	r2, r3
 801446e:	4621      	mov	r1, r4
 8014470:	4807      	ldr	r0, [pc, #28]	@ (8014490 <udp_debug_print+0x84>)
 8014472:	f003 fa3d 	bl	80178f0 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8014476:	4804      	ldr	r0, [pc, #16]	@ (8014488 <udp_debug_print+0x7c>)
 8014478:	f003 faaa 	bl	80179d0 <puts>
}
 801447c:	bf00      	nop
 801447e:	370c      	adds	r7, #12
 8014480:	46bd      	mov	sp, r7
 8014482:	bd90      	pop	{r4, r7, pc}
 8014484:	0801b254 	.word	0x0801b254
 8014488:	0801b260 	.word	0x0801b260
 801448c:	0801b284 	.word	0x0801b284
 8014490:	0801b2bc 	.word	0x0801b2bc

08014494 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801449c:	492b      	ldr	r1, [pc, #172]	@ (801454c <etharp_free_entry+0xb8>)
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	440b      	add	r3, r1
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d013      	beq.n	80144d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80144b0:	4926      	ldr	r1, [pc, #152]	@ (801454c <etharp_free_entry+0xb8>)
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	4613      	mov	r3, r2
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	00db      	lsls	r3, r3, #3
 80144bc:	440b      	add	r3, r1
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f9 fc13 	bl	800dcec <pbuf_free>
    arp_table[i].q = NULL;
 80144c6:	4921      	ldr	r1, [pc, #132]	@ (801454c <etharp_free_entry+0xb8>)
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	2200      	movs	r2, #0
 80144d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80144d8:	491c      	ldr	r1, [pc, #112]	@ (801454c <etharp_free_entry+0xb8>)
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	4613      	mov	r3, r2
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	4413      	add	r3, r2
 80144e2:	00db      	lsls	r3, r3, #3
 80144e4:	440b      	add	r3, r1
 80144e6:	3314      	adds	r3, #20
 80144e8:	2200      	movs	r2, #0
 80144ea:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 80144ec:	4917      	ldr	r1, [pc, #92]	@ (801454c <etharp_free_entry+0xb8>)
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	4613      	mov	r3, r2
 80144f2:	005b      	lsls	r3, r3, #1
 80144f4:	4413      	add	r3, r2
 80144f6:	00db      	lsls	r3, r3, #3
 80144f8:	440b      	add	r3, r1
 80144fa:	3312      	adds	r3, #18
 80144fc:	2200      	movs	r2, #0
 80144fe:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8014500:	4912      	ldr	r1, [pc, #72]	@ (801454c <etharp_free_entry+0xb8>)
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	4613      	mov	r3, r2
 8014506:	005b      	lsls	r3, r3, #1
 8014508:	4413      	add	r3, r2
 801450a:	00db      	lsls	r3, r3, #3
 801450c:	440b      	add	r3, r1
 801450e:	3308      	adds	r3, #8
 8014510:	2200      	movs	r2, #0
 8014512:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8014514:	490d      	ldr	r1, [pc, #52]	@ (801454c <etharp_free_entry+0xb8>)
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	4613      	mov	r3, r2
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	4413      	add	r3, r2
 801451e:	00db      	lsls	r3, r3, #3
 8014520:	440b      	add	r3, r1
 8014522:	3304      	adds	r3, #4
 8014524:	2200      	movs	r2, #0
 8014526:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8014528:	4908      	ldr	r1, [pc, #32]	@ (801454c <etharp_free_entry+0xb8>)
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	4613      	mov	r3, r2
 801452e:	005b      	lsls	r3, r3, #1
 8014530:	4413      	add	r3, r2
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	440b      	add	r3, r1
 8014536:	3308      	adds	r3, #8
 8014538:	4a05      	ldr	r2, [pc, #20]	@ (8014550 <etharp_free_entry+0xbc>)
 801453a:	3304      	adds	r3, #4
 801453c:	6810      	ldr	r0, [r2, #0]
 801453e:	6018      	str	r0, [r3, #0]
 8014540:	8892      	ldrh	r2, [r2, #4]
 8014542:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8014544:	bf00      	nop
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	20008560 	.word	0x20008560
 8014550:	0801bfe8 	.word	0x0801bfe8

08014554 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801455a:	2300      	movs	r3, #0
 801455c:	607b      	str	r3, [r7, #4]
 801455e:	e096      	b.n	801468e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014560:	494f      	ldr	r1, [pc, #316]	@ (80146a0 <etharp_tmr+0x14c>)
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	4613      	mov	r3, r2
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	4413      	add	r3, r2
 801456a:	00db      	lsls	r3, r3, #3
 801456c:	440b      	add	r3, r1
 801456e:	3314      	adds	r3, #20
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014574:	78fb      	ldrb	r3, [r7, #3]
 8014576:	2b00      	cmp	r3, #0
 8014578:	f000 8086 	beq.w	8014688 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801457c:	4948      	ldr	r1, [pc, #288]	@ (80146a0 <etharp_tmr+0x14c>)
 801457e:	687a      	ldr	r2, [r7, #4]
 8014580:	4613      	mov	r3, r2
 8014582:	005b      	lsls	r3, r3, #1
 8014584:	4413      	add	r3, r2
 8014586:	00db      	lsls	r3, r3, #3
 8014588:	440b      	add	r3, r1
 801458a:	3312      	adds	r3, #18
 801458c:	881b      	ldrh	r3, [r3, #0]
 801458e:	3301      	adds	r3, #1
 8014590:	b298      	uxth	r0, r3
 8014592:	4943      	ldr	r1, [pc, #268]	@ (80146a0 <etharp_tmr+0x14c>)
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	4613      	mov	r3, r2
 8014598:	005b      	lsls	r3, r3, #1
 801459a:	4413      	add	r3, r2
 801459c:	00db      	lsls	r3, r3, #3
 801459e:	440b      	add	r3, r1
 80145a0:	3312      	adds	r3, #18
 80145a2:	4602      	mov	r2, r0
 80145a4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80145a6:	493e      	ldr	r1, [pc, #248]	@ (80146a0 <etharp_tmr+0x14c>)
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	4613      	mov	r3, r2
 80145ac:	005b      	lsls	r3, r3, #1
 80145ae:	4413      	add	r3, r2
 80145b0:	00db      	lsls	r3, r3, #3
 80145b2:	440b      	add	r3, r1
 80145b4:	3312      	adds	r3, #18
 80145b6:	881b      	ldrh	r3, [r3, #0]
 80145b8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80145bc:	d215      	bcs.n	80145ea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80145be:	4938      	ldr	r1, [pc, #224]	@ (80146a0 <etharp_tmr+0x14c>)
 80145c0:	687a      	ldr	r2, [r7, #4]
 80145c2:	4613      	mov	r3, r2
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	4413      	add	r3, r2
 80145c8:	00db      	lsls	r3, r3, #3
 80145ca:	440b      	add	r3, r1
 80145cc:	3314      	adds	r3, #20
 80145ce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d10e      	bne.n	80145f2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80145d4:	4932      	ldr	r1, [pc, #200]	@ (80146a0 <etharp_tmr+0x14c>)
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	4613      	mov	r3, r2
 80145da:	005b      	lsls	r3, r3, #1
 80145dc:	4413      	add	r3, r2
 80145de:	00db      	lsls	r3, r3, #3
 80145e0:	440b      	add	r3, r1
 80145e2:	3312      	adds	r3, #18
 80145e4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80145e6:	2b04      	cmp	r3, #4
 80145e8:	d903      	bls.n	80145f2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f7ff ff52 	bl	8014494 <etharp_free_entry>
 80145f0:	e04a      	b.n	8014688 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80145f2:	492b      	ldr	r1, [pc, #172]	@ (80146a0 <etharp_tmr+0x14c>)
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	4613      	mov	r3, r2
 80145f8:	005b      	lsls	r3, r3, #1
 80145fa:	4413      	add	r3, r2
 80145fc:	00db      	lsls	r3, r3, #3
 80145fe:	440b      	add	r3, r1
 8014600:	3314      	adds	r3, #20
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	2b03      	cmp	r3, #3
 8014606:	d10a      	bne.n	801461e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014608:	4925      	ldr	r1, [pc, #148]	@ (80146a0 <etharp_tmr+0x14c>)
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	4613      	mov	r3, r2
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	4413      	add	r3, r2
 8014612:	00db      	lsls	r3, r3, #3
 8014614:	440b      	add	r3, r1
 8014616:	3314      	adds	r3, #20
 8014618:	2204      	movs	r2, #4
 801461a:	701a      	strb	r2, [r3, #0]
 801461c:	e034      	b.n	8014688 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801461e:	4920      	ldr	r1, [pc, #128]	@ (80146a0 <etharp_tmr+0x14c>)
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	4613      	mov	r3, r2
 8014624:	005b      	lsls	r3, r3, #1
 8014626:	4413      	add	r3, r2
 8014628:	00db      	lsls	r3, r3, #3
 801462a:	440b      	add	r3, r1
 801462c:	3314      	adds	r3, #20
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	2b04      	cmp	r3, #4
 8014632:	d10a      	bne.n	801464a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014634:	491a      	ldr	r1, [pc, #104]	@ (80146a0 <etharp_tmr+0x14c>)
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	4613      	mov	r3, r2
 801463a:	005b      	lsls	r3, r3, #1
 801463c:	4413      	add	r3, r2
 801463e:	00db      	lsls	r3, r3, #3
 8014640:	440b      	add	r3, r1
 8014642:	3314      	adds	r3, #20
 8014644:	2202      	movs	r2, #2
 8014646:	701a      	strb	r2, [r3, #0]
 8014648:	e01e      	b.n	8014688 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801464a:	4915      	ldr	r1, [pc, #84]	@ (80146a0 <etharp_tmr+0x14c>)
 801464c:	687a      	ldr	r2, [r7, #4]
 801464e:	4613      	mov	r3, r2
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	4413      	add	r3, r2
 8014654:	00db      	lsls	r3, r3, #3
 8014656:	440b      	add	r3, r1
 8014658:	3314      	adds	r3, #20
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	2b01      	cmp	r3, #1
 801465e:	d113      	bne.n	8014688 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014660:	490f      	ldr	r1, [pc, #60]	@ (80146a0 <etharp_tmr+0x14c>)
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	4613      	mov	r3, r2
 8014666:	005b      	lsls	r3, r3, #1
 8014668:	4413      	add	r3, r2
 801466a:	00db      	lsls	r3, r3, #3
 801466c:	440b      	add	r3, r1
 801466e:	3308      	adds	r3, #8
 8014670:	6818      	ldr	r0, [r3, #0]
 8014672:	687a      	ldr	r2, [r7, #4]
 8014674:	4613      	mov	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	4413      	add	r3, r2
 801467a:	00db      	lsls	r3, r3, #3
 801467c:	4a08      	ldr	r2, [pc, #32]	@ (80146a0 <etharp_tmr+0x14c>)
 801467e:	4413      	add	r3, r2
 8014680:	3304      	adds	r3, #4
 8014682:	4619      	mov	r1, r3
 8014684:	f000 fe6e 	bl	8015364 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	3301      	adds	r3, #1
 801468c:	607b      	str	r3, [r7, #4]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2b09      	cmp	r3, #9
 8014692:	f77f af65 	ble.w	8014560 <etharp_tmr+0xc>
      }
    }
  }
}
 8014696:	bf00      	nop
 8014698:	bf00      	nop
 801469a:	3708      	adds	r7, #8
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	20008560 	.word	0x20008560

080146a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b08a      	sub	sp, #40	@ 0x28
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	460b      	mov	r3, r1
 80146ae:	607a      	str	r2, [r7, #4]
 80146b0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80146b2:	230a      	movs	r3, #10
 80146b4:	843b      	strh	r3, [r7, #32]
 80146b6:	230a      	movs	r3, #10
 80146b8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80146ba:	230a      	movs	r3, #10
 80146bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 80146be:	2300      	movs	r3, #0
 80146c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80146c2:	230a      	movs	r3, #10
 80146c4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80146c6:	2300      	movs	r3, #0
 80146c8:	83bb      	strh	r3, [r7, #28]
 80146ca:	2300      	movs	r3, #0
 80146cc:	837b      	strh	r3, [r7, #26]
 80146ce:	2300      	movs	r3, #0
 80146d0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146d2:	2300      	movs	r3, #0
 80146d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80146d6:	e0ae      	b.n	8014836 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80146d8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80146dc:	49a6      	ldr	r1, [pc, #664]	@ (8014978 <etharp_find_entry+0x2d4>)
 80146de:	4613      	mov	r3, r2
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	4413      	add	r3, r2
 80146e4:	00db      	lsls	r3, r3, #3
 80146e6:	440b      	add	r3, r1
 80146e8:	3314      	adds	r3, #20
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80146ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80146f2:	2b0a      	cmp	r3, #10
 80146f4:	d105      	bne.n	8014702 <etharp_find_entry+0x5e>
 80146f6:	7dfb      	ldrb	r3, [r7, #23]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d102      	bne.n	8014702 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80146fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80146fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014700:	e095      	b.n	801482e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014702:	7dfb      	ldrb	r3, [r7, #23]
 8014704:	2b00      	cmp	r3, #0
 8014706:	f000 8092 	beq.w	801482e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801470a:	7dfb      	ldrb	r3, [r7, #23]
 801470c:	2b01      	cmp	r3, #1
 801470e:	d009      	beq.n	8014724 <etharp_find_entry+0x80>
 8014710:	7dfb      	ldrb	r3, [r7, #23]
 8014712:	2b01      	cmp	r3, #1
 8014714:	d806      	bhi.n	8014724 <etharp_find_entry+0x80>
 8014716:	4b99      	ldr	r3, [pc, #612]	@ (801497c <etharp_find_entry+0x2d8>)
 8014718:	f240 1223 	movw	r2, #291	@ 0x123
 801471c:	4998      	ldr	r1, [pc, #608]	@ (8014980 <etharp_find_entry+0x2dc>)
 801471e:	4899      	ldr	r0, [pc, #612]	@ (8014984 <etharp_find_entry+0x2e0>)
 8014720:	f003 f8e6 	bl	80178f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d020      	beq.n	801476c <etharp_find_entry+0xc8>
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	6819      	ldr	r1, [r3, #0]
 801472e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014732:	4891      	ldr	r0, [pc, #580]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014734:	4613      	mov	r3, r2
 8014736:	005b      	lsls	r3, r3, #1
 8014738:	4413      	add	r3, r2
 801473a:	00db      	lsls	r3, r3, #3
 801473c:	4403      	add	r3, r0
 801473e:	3304      	adds	r3, #4
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	4299      	cmp	r1, r3
 8014744:	d112      	bne.n	801476c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00c      	beq.n	8014766 <etharp_find_entry+0xc2>
 801474c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014750:	4989      	ldr	r1, [pc, #548]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014752:	4613      	mov	r3, r2
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	4413      	add	r3, r2
 8014758:	00db      	lsls	r3, r3, #3
 801475a:	440b      	add	r3, r1
 801475c:	3308      	adds	r3, #8
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	687a      	ldr	r2, [r7, #4]
 8014762:	429a      	cmp	r2, r3
 8014764:	d102      	bne.n	801476c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014766:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801476a:	e100      	b.n	801496e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801476c:	7dfb      	ldrb	r3, [r7, #23]
 801476e:	2b01      	cmp	r3, #1
 8014770:	d140      	bne.n	80147f4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014772:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014776:	4980      	ldr	r1, [pc, #512]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014778:	4613      	mov	r3, r2
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	4413      	add	r3, r2
 801477e:	00db      	lsls	r3, r3, #3
 8014780:	440b      	add	r3, r1
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d01a      	beq.n	80147be <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014788:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801478c:	497a      	ldr	r1, [pc, #488]	@ (8014978 <etharp_find_entry+0x2d4>)
 801478e:	4613      	mov	r3, r2
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	4413      	add	r3, r2
 8014794:	00db      	lsls	r3, r3, #3
 8014796:	440b      	add	r3, r1
 8014798:	3312      	adds	r3, #18
 801479a:	881b      	ldrh	r3, [r3, #0]
 801479c:	8bba      	ldrh	r2, [r7, #28]
 801479e:	429a      	cmp	r2, r3
 80147a0:	d845      	bhi.n	801482e <etharp_find_entry+0x18a>
            old_queue = i;
 80147a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80147a4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80147a6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80147aa:	4973      	ldr	r1, [pc, #460]	@ (8014978 <etharp_find_entry+0x2d4>)
 80147ac:	4613      	mov	r3, r2
 80147ae:	005b      	lsls	r3, r3, #1
 80147b0:	4413      	add	r3, r2
 80147b2:	00db      	lsls	r3, r3, #3
 80147b4:	440b      	add	r3, r1
 80147b6:	3312      	adds	r3, #18
 80147b8:	881b      	ldrh	r3, [r3, #0]
 80147ba:	83bb      	strh	r3, [r7, #28]
 80147bc:	e037      	b.n	801482e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80147be:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80147c2:	496d      	ldr	r1, [pc, #436]	@ (8014978 <etharp_find_entry+0x2d4>)
 80147c4:	4613      	mov	r3, r2
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	4413      	add	r3, r2
 80147ca:	00db      	lsls	r3, r3, #3
 80147cc:	440b      	add	r3, r1
 80147ce:	3312      	adds	r3, #18
 80147d0:	881b      	ldrh	r3, [r3, #0]
 80147d2:	8b7a      	ldrh	r2, [r7, #26]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d82a      	bhi.n	801482e <etharp_find_entry+0x18a>
            old_pending = i;
 80147d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80147da:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 80147dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80147e0:	4965      	ldr	r1, [pc, #404]	@ (8014978 <etharp_find_entry+0x2d4>)
 80147e2:	4613      	mov	r3, r2
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	4413      	add	r3, r2
 80147e8:	00db      	lsls	r3, r3, #3
 80147ea:	440b      	add	r3, r1
 80147ec:	3312      	adds	r3, #18
 80147ee:	881b      	ldrh	r3, [r3, #0]
 80147f0:	837b      	strh	r3, [r7, #26]
 80147f2:	e01c      	b.n	801482e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80147f4:	7dfb      	ldrb	r3, [r7, #23]
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d919      	bls.n	801482e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80147fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80147fe:	495e      	ldr	r1, [pc, #376]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014800:	4613      	mov	r3, r2
 8014802:	005b      	lsls	r3, r3, #1
 8014804:	4413      	add	r3, r2
 8014806:	00db      	lsls	r3, r3, #3
 8014808:	440b      	add	r3, r1
 801480a:	3312      	adds	r3, #18
 801480c:	881b      	ldrh	r3, [r3, #0]
 801480e:	8b3a      	ldrh	r2, [r7, #24]
 8014810:	429a      	cmp	r2, r3
 8014812:	d80c      	bhi.n	801482e <etharp_find_entry+0x18a>
            old_stable = i;
 8014814:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014816:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8014818:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801481c:	4956      	ldr	r1, [pc, #344]	@ (8014978 <etharp_find_entry+0x2d4>)
 801481e:	4613      	mov	r3, r2
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	4413      	add	r3, r2
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	440b      	add	r3, r1
 8014828:	3312      	adds	r3, #18
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801482e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014830:	3301      	adds	r3, #1
 8014832:	b29b      	uxth	r3, r3
 8014834:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014836:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801483a:	2b09      	cmp	r3, #9
 801483c:	f77f af4c 	ble.w	80146d8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014840:	7afb      	ldrb	r3, [r7, #11]
 8014842:	f003 0302 	and.w	r3, r3, #2
 8014846:	2b00      	cmp	r3, #0
 8014848:	d108      	bne.n	801485c <etharp_find_entry+0x1b8>
 801484a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801484e:	2b0a      	cmp	r3, #10
 8014850:	d107      	bne.n	8014862 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014852:	7afb      	ldrb	r3, [r7, #11]
 8014854:	f003 0301 	and.w	r3, r3, #1
 8014858:	2b00      	cmp	r3, #0
 801485a:	d102      	bne.n	8014862 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801485c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014860:	e085      	b.n	801496e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014862:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014866:	2b09      	cmp	r3, #9
 8014868:	dc02      	bgt.n	8014870 <etharp_find_entry+0x1cc>
    i = empty;
 801486a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801486c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801486e:	e039      	b.n	80148e4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014870:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014874:	2b09      	cmp	r3, #9
 8014876:	dc14      	bgt.n	80148a2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014878:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801487a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801487c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014880:	493d      	ldr	r1, [pc, #244]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014882:	4613      	mov	r3, r2
 8014884:	005b      	lsls	r3, r3, #1
 8014886:	4413      	add	r3, r2
 8014888:	00db      	lsls	r3, r3, #3
 801488a:	440b      	add	r3, r1
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d018      	beq.n	80148c4 <etharp_find_entry+0x220>
 8014892:	4b3a      	ldr	r3, [pc, #232]	@ (801497c <etharp_find_entry+0x2d8>)
 8014894:	f240 126d 	movw	r2, #365	@ 0x16d
 8014898:	493b      	ldr	r1, [pc, #236]	@ (8014988 <etharp_find_entry+0x2e4>)
 801489a:	483a      	ldr	r0, [pc, #232]	@ (8014984 <etharp_find_entry+0x2e0>)
 801489c:	f003 f828 	bl	80178f0 <iprintf>
 80148a0:	e010      	b.n	80148c4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80148a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148a6:	2b09      	cmp	r3, #9
 80148a8:	dc02      	bgt.n	80148b0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80148aa:	8c3b      	ldrh	r3, [r7, #32]
 80148ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80148ae:	e009      	b.n	80148c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80148b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80148b4:	2b09      	cmp	r3, #9
 80148b6:	dc02      	bgt.n	80148be <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80148b8:	8bfb      	ldrh	r3, [r7, #30]
 80148ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80148bc:	e002      	b.n	80148c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80148be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80148c2:	e054      	b.n	801496e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80148c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80148c8:	2b09      	cmp	r3, #9
 80148ca:	dd06      	ble.n	80148da <etharp_find_entry+0x236>
 80148cc:	4b2b      	ldr	r3, [pc, #172]	@ (801497c <etharp_find_entry+0x2d8>)
 80148ce:	f240 127f 	movw	r2, #383	@ 0x17f
 80148d2:	492e      	ldr	r1, [pc, #184]	@ (801498c <etharp_find_entry+0x2e8>)
 80148d4:	482b      	ldr	r0, [pc, #172]	@ (8014984 <etharp_find_entry+0x2e0>)
 80148d6:	f003 f80b 	bl	80178f0 <iprintf>
    etharp_free_entry(i);
 80148da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80148de:	4618      	mov	r0, r3
 80148e0:	f7ff fdd8 	bl	8014494 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80148e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80148e8:	2b09      	cmp	r3, #9
 80148ea:	dd06      	ble.n	80148fa <etharp_find_entry+0x256>
 80148ec:	4b23      	ldr	r3, [pc, #140]	@ (801497c <etharp_find_entry+0x2d8>)
 80148ee:	f240 1283 	movw	r2, #387	@ 0x183
 80148f2:	4926      	ldr	r1, [pc, #152]	@ (801498c <etharp_find_entry+0x2e8>)
 80148f4:	4823      	ldr	r0, [pc, #140]	@ (8014984 <etharp_find_entry+0x2e0>)
 80148f6:	f002 fffb 	bl	80178f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80148fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80148fe:	491e      	ldr	r1, [pc, #120]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014900:	4613      	mov	r3, r2
 8014902:	005b      	lsls	r3, r3, #1
 8014904:	4413      	add	r3, r2
 8014906:	00db      	lsls	r3, r3, #3
 8014908:	440b      	add	r3, r1
 801490a:	3314      	adds	r3, #20
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d006      	beq.n	8014920 <etharp_find_entry+0x27c>
 8014912:	4b1a      	ldr	r3, [pc, #104]	@ (801497c <etharp_find_entry+0x2d8>)
 8014914:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014918:	491d      	ldr	r1, [pc, #116]	@ (8014990 <etharp_find_entry+0x2ec>)
 801491a:	481a      	ldr	r0, [pc, #104]	@ (8014984 <etharp_find_entry+0x2e0>)
 801491c:	f002 ffe8 	bl	80178f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d00b      	beq.n	801493e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014926:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6819      	ldr	r1, [r3, #0]
 801492e:	4812      	ldr	r0, [pc, #72]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014930:	4613      	mov	r3, r2
 8014932:	005b      	lsls	r3, r3, #1
 8014934:	4413      	add	r3, r2
 8014936:	00db      	lsls	r3, r3, #3
 8014938:	4403      	add	r3, r0
 801493a:	3304      	adds	r3, #4
 801493c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801493e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014942:	490d      	ldr	r1, [pc, #52]	@ (8014978 <etharp_find_entry+0x2d4>)
 8014944:	4613      	mov	r3, r2
 8014946:	005b      	lsls	r3, r3, #1
 8014948:	4413      	add	r3, r2
 801494a:	00db      	lsls	r3, r3, #3
 801494c:	440b      	add	r3, r1
 801494e:	3312      	adds	r3, #18
 8014950:	2200      	movs	r2, #0
 8014952:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014954:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014958:	4907      	ldr	r1, [pc, #28]	@ (8014978 <etharp_find_entry+0x2d4>)
 801495a:	4613      	mov	r3, r2
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	4413      	add	r3, r2
 8014960:	00db      	lsls	r3, r3, #3
 8014962:	440b      	add	r3, r1
 8014964:	3308      	adds	r3, #8
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801496a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801496e:	4618      	mov	r0, r3
 8014970:	3728      	adds	r7, #40	@ 0x28
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
 8014976:	bf00      	nop
 8014978:	20008560 	.word	0x20008560
 801497c:	0801b2f0 	.word	0x0801b2f0
 8014980:	0801b328 	.word	0x0801b328
 8014984:	0801b368 	.word	0x0801b368
 8014988:	0801b390 	.word	0x0801b390
 801498c:	0801b3a8 	.word	0x0801b3a8
 8014990:	0801b3bc 	.word	0x0801b3bc

08014994 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b088      	sub	sp, #32
 8014998:	af02      	add	r7, sp, #8
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	607a      	str	r2, [r7, #4]
 80149a0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80149a8:	2b06      	cmp	r3, #6
 80149aa:	d006      	beq.n	80149ba <etharp_update_arp_entry+0x26>
 80149ac:	4b48      	ldr	r3, [pc, #288]	@ (8014ad0 <etharp_update_arp_entry+0x13c>)
 80149ae:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80149b2:	4948      	ldr	r1, [pc, #288]	@ (8014ad4 <etharp_update_arp_entry+0x140>)
 80149b4:	4848      	ldr	r0, [pc, #288]	@ (8014ad8 <etharp_update_arp_entry+0x144>)
 80149b6:	f002 ff9b 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d012      	beq.n	80149e6 <etharp_update_arp_entry+0x52>
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d00e      	beq.n	80149e6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	68f9      	ldr	r1, [r7, #12]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f001 f990 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 80149d4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d105      	bne.n	80149e6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80149e2:	2be0      	cmp	r3, #224	@ 0xe0
 80149e4:	d102      	bne.n	80149ec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80149e6:	f06f 030f 	mvn.w	r3, #15
 80149ea:	e06c      	b.n	8014ac6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80149ec:	78fb      	ldrb	r3, [r7, #3]
 80149ee:	68fa      	ldr	r2, [r7, #12]
 80149f0:	4619      	mov	r1, r3
 80149f2:	68b8      	ldr	r0, [r7, #8]
 80149f4:	f7ff fe56 	bl	80146a4 <etharp_find_entry>
 80149f8:	4603      	mov	r3, r0
 80149fa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80149fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	da02      	bge.n	8014a0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014a04:	8afb      	ldrh	r3, [r7, #22]
 8014a06:	b25b      	sxtb	r3, r3
 8014a08:	e05d      	b.n	8014ac6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014a0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a0e:	4933      	ldr	r1, [pc, #204]	@ (8014adc <etharp_update_arp_entry+0x148>)
 8014a10:	4613      	mov	r3, r2
 8014a12:	005b      	lsls	r3, r3, #1
 8014a14:	4413      	add	r3, r2
 8014a16:	00db      	lsls	r3, r3, #3
 8014a18:	440b      	add	r3, r1
 8014a1a:	3314      	adds	r3, #20
 8014a1c:	2202      	movs	r2, #2
 8014a1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014a20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a24:	492d      	ldr	r1, [pc, #180]	@ (8014adc <etharp_update_arp_entry+0x148>)
 8014a26:	4613      	mov	r3, r2
 8014a28:	005b      	lsls	r3, r3, #1
 8014a2a:	4413      	add	r3, r2
 8014a2c:	00db      	lsls	r3, r3, #3
 8014a2e:	440b      	add	r3, r1
 8014a30:	3308      	adds	r3, #8
 8014a32:	68fa      	ldr	r2, [r7, #12]
 8014a34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014a36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a3a:	4613      	mov	r3, r2
 8014a3c:	005b      	lsls	r3, r3, #1
 8014a3e:	4413      	add	r3, r2
 8014a40:	00db      	lsls	r3, r3, #3
 8014a42:	3308      	adds	r3, #8
 8014a44:	4a25      	ldr	r2, [pc, #148]	@ (8014adc <etharp_update_arp_entry+0x148>)
 8014a46:	4413      	add	r3, r2
 8014a48:	3304      	adds	r3, #4
 8014a4a:	2206      	movs	r2, #6
 8014a4c:	6879      	ldr	r1, [r7, #4]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f003 f923 	bl	8017c9a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014a54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a58:	4920      	ldr	r1, [pc, #128]	@ (8014adc <etharp_update_arp_entry+0x148>)
 8014a5a:	4613      	mov	r3, r2
 8014a5c:	005b      	lsls	r3, r3, #1
 8014a5e:	4413      	add	r3, r2
 8014a60:	00db      	lsls	r3, r3, #3
 8014a62:	440b      	add	r3, r1
 8014a64:	3312      	adds	r3, #18
 8014a66:	2200      	movs	r2, #0
 8014a68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014a6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a6e:	491b      	ldr	r1, [pc, #108]	@ (8014adc <etharp_update_arp_entry+0x148>)
 8014a70:	4613      	mov	r3, r2
 8014a72:	005b      	lsls	r3, r3, #1
 8014a74:	4413      	add	r3, r2
 8014a76:	00db      	lsls	r3, r3, #3
 8014a78:	440b      	add	r3, r1
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d021      	beq.n	8014ac4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014a80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a84:	4915      	ldr	r1, [pc, #84]	@ (8014adc <etharp_update_arp_entry+0x148>)
 8014a86:	4613      	mov	r3, r2
 8014a88:	005b      	lsls	r3, r3, #1
 8014a8a:	4413      	add	r3, r2
 8014a8c:	00db      	lsls	r3, r3, #3
 8014a8e:	440b      	add	r3, r1
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014a94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a98:	4910      	ldr	r1, [pc, #64]	@ (8014adc <etharp_update_arp_entry+0x148>)
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	005b      	lsls	r3, r3, #1
 8014a9e:	4413      	add	r3, r2
 8014aa0:	00db      	lsls	r3, r3, #3
 8014aa2:	440b      	add	r3, r1
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014aae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014ab2:	9300      	str	r3, [sp, #0]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6939      	ldr	r1, [r7, #16]
 8014ab8:	68f8      	ldr	r0, [r7, #12]
 8014aba:	f002 f829 	bl	8016b10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014abe:	6938      	ldr	r0, [r7, #16]
 8014ac0:	f7f9 f914 	bl	800dcec <pbuf_free>
  }
  return ERR_OK;
 8014ac4:	2300      	movs	r3, #0
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3718      	adds	r7, #24
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	0801b2f0 	.word	0x0801b2f0
 8014ad4:	0801b3e8 	.word	0x0801b3e8
 8014ad8:	0801b368 	.word	0x0801b368
 8014adc:	20008560 	.word	0x20008560

08014ae0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b084      	sub	sp, #16
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ae8:	2300      	movs	r3, #0
 8014aea:	60fb      	str	r3, [r7, #12]
 8014aec:	e01e      	b.n	8014b2c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014aee:	4913      	ldr	r1, [pc, #76]	@ (8014b3c <etharp_cleanup_netif+0x5c>)
 8014af0:	68fa      	ldr	r2, [r7, #12]
 8014af2:	4613      	mov	r3, r2
 8014af4:	005b      	lsls	r3, r3, #1
 8014af6:	4413      	add	r3, r2
 8014af8:	00db      	lsls	r3, r3, #3
 8014afa:	440b      	add	r3, r1
 8014afc:	3314      	adds	r3, #20
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014b02:	7afb      	ldrb	r3, [r7, #11]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d00e      	beq.n	8014b26 <etharp_cleanup_netif+0x46>
 8014b08:	490c      	ldr	r1, [pc, #48]	@ (8014b3c <etharp_cleanup_netif+0x5c>)
 8014b0a:	68fa      	ldr	r2, [r7, #12]
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4413      	add	r3, r2
 8014b12:	00db      	lsls	r3, r3, #3
 8014b14:	440b      	add	r3, r1
 8014b16:	3308      	adds	r3, #8
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d102      	bne.n	8014b26 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014b20:	68f8      	ldr	r0, [r7, #12]
 8014b22:	f7ff fcb7 	bl	8014494 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	60fb      	str	r3, [r7, #12]
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2b09      	cmp	r3, #9
 8014b30:	dddd      	ble.n	8014aee <etharp_cleanup_netif+0xe>
    }
  }
}
 8014b32:	bf00      	nop
 8014b34:	bf00      	nop
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	20008560 	.word	0x20008560

08014b40 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014b40:	b5b0      	push	{r4, r5, r7, lr}
 8014b42:	b08a      	sub	sp, #40	@ 0x28
 8014b44:	af04      	add	r7, sp, #16
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d107      	bne.n	8014b60 <etharp_input+0x20>
 8014b50:	4b3d      	ldr	r3, [pc, #244]	@ (8014c48 <etharp_input+0x108>)
 8014b52:	f240 228a 	movw	r2, #650	@ 0x28a
 8014b56:	493d      	ldr	r1, [pc, #244]	@ (8014c4c <etharp_input+0x10c>)
 8014b58:	483d      	ldr	r0, [pc, #244]	@ (8014c50 <etharp_input+0x110>)
 8014b5a:	f002 fec9 	bl	80178f0 <iprintf>
 8014b5e:	e06f      	b.n	8014c40 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014b70:	d10c      	bne.n	8014b8c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b76:	2b06      	cmp	r3, #6
 8014b78:	d108      	bne.n	8014b8c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b7e:	2b04      	cmp	r3, #4
 8014b80:	d104      	bne.n	8014b8c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	885b      	ldrh	r3, [r3, #2]
 8014b86:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b88:	2b08      	cmp	r3, #8
 8014b8a:	d003      	beq.n	8014b94 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f7f9 f8ad 	bl	800dcec <pbuf_free>
    return;
 8014b92:	e055      	b.n	8014c40 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	330e      	adds	r3, #14
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	3318      	adds	r3, #24
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	3304      	adds	r3, #4
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d102      	bne.n	8014bb4 <etharp_input+0x74>
    for_us = 0;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	74fb      	strb	r3, [r7, #19]
 8014bb2:	e009      	b.n	8014bc8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014bb4:	68ba      	ldr	r2, [r7, #8]
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	3304      	adds	r3, #4
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	bf0c      	ite	eq
 8014bc0:	2301      	moveq	r3, #1
 8014bc2:	2300      	movne	r3, #0
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	f103 0208 	add.w	r2, r3, #8
 8014bce:	7cfb      	ldrb	r3, [r7, #19]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d001      	beq.n	8014bd8 <etharp_input+0x98>
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e000      	b.n	8014bda <etharp_input+0x9a>
 8014bd8:	2302      	movs	r3, #2
 8014bda:	f107 010c 	add.w	r1, r7, #12
 8014bde:	6838      	ldr	r0, [r7, #0]
 8014be0:	f7ff fed8 	bl	8014994 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	88db      	ldrh	r3, [r3, #6]
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014bee:	d003      	beq.n	8014bf8 <etharp_input+0xb8>
 8014bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bf4:	d01e      	beq.n	8014c34 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014bf6:	e020      	b.n	8014c3a <etharp_input+0xfa>
      if (for_us) {
 8014bf8:	7cfb      	ldrb	r3, [r7, #19]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d01c      	beq.n	8014c38 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014c14:	697a      	ldr	r2, [r7, #20]
 8014c16:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014c18:	2102      	movs	r1, #2
 8014c1a:	9103      	str	r1, [sp, #12]
 8014c1c:	f107 010c 	add.w	r1, r7, #12
 8014c20:	9102      	str	r1, [sp, #8]
 8014c22:	9201      	str	r2, [sp, #4]
 8014c24:	9300      	str	r3, [sp, #0]
 8014c26:	462b      	mov	r3, r5
 8014c28:	4622      	mov	r2, r4
 8014c2a:	4601      	mov	r1, r0
 8014c2c:	6838      	ldr	r0, [r7, #0]
 8014c2e:	f000 faeb 	bl	8015208 <etharp_raw>
      break;
 8014c32:	e001      	b.n	8014c38 <etharp_input+0xf8>
      break;
 8014c34:	bf00      	nop
 8014c36:	e000      	b.n	8014c3a <etharp_input+0xfa>
      break;
 8014c38:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7f9 f856 	bl	800dcec <pbuf_free>
}
 8014c40:	3718      	adds	r7, #24
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bdb0      	pop	{r4, r5, r7, pc}
 8014c46:	bf00      	nop
 8014c48:	0801b2f0 	.word	0x0801b2f0
 8014c4c:	0801b440 	.word	0x0801b440
 8014c50:	0801b368 	.word	0x0801b368

08014c54 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b086      	sub	sp, #24
 8014c58:	af02      	add	r7, sp, #8
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	60b9      	str	r1, [r7, #8]
 8014c5e:	4613      	mov	r3, r2
 8014c60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014c62:	79fa      	ldrb	r2, [r7, #7]
 8014c64:	4944      	ldr	r1, [pc, #272]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014c66:	4613      	mov	r3, r2
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	4413      	add	r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	440b      	add	r3, r1
 8014c70:	3314      	adds	r3, #20
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	d806      	bhi.n	8014c86 <etharp_output_to_arp_index+0x32>
 8014c78:	4b40      	ldr	r3, [pc, #256]	@ (8014d7c <etharp_output_to_arp_index+0x128>)
 8014c7a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014c7e:	4940      	ldr	r1, [pc, #256]	@ (8014d80 <etharp_output_to_arp_index+0x12c>)
 8014c80:	4840      	ldr	r0, [pc, #256]	@ (8014d84 <etharp_output_to_arp_index+0x130>)
 8014c82:	f002 fe35 	bl	80178f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014c86:	79fa      	ldrb	r2, [r7, #7]
 8014c88:	493b      	ldr	r1, [pc, #236]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	4413      	add	r3, r2
 8014c90:	00db      	lsls	r3, r3, #3
 8014c92:	440b      	add	r3, r1
 8014c94:	3314      	adds	r3, #20
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	2b02      	cmp	r3, #2
 8014c9a:	d153      	bne.n	8014d44 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014c9c:	79fa      	ldrb	r2, [r7, #7]
 8014c9e:	4936      	ldr	r1, [pc, #216]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	005b      	lsls	r3, r3, #1
 8014ca4:	4413      	add	r3, r2
 8014ca6:	00db      	lsls	r3, r3, #3
 8014ca8:	440b      	add	r3, r1
 8014caa:	3312      	adds	r3, #18
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014cb2:	d919      	bls.n	8014ce8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014cb4:	79fa      	ldrb	r2, [r7, #7]
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	4413      	add	r3, r2
 8014cbc:	00db      	lsls	r3, r3, #3
 8014cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014cc0:	4413      	add	r3, r2
 8014cc2:	3304      	adds	r3, #4
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	f000 fb4c 	bl	8015364 <etharp_request>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d138      	bne.n	8014d44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014cd2:	79fa      	ldrb	r2, [r7, #7]
 8014cd4:	4928      	ldr	r1, [pc, #160]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	4413      	add	r3, r2
 8014cdc:	00db      	lsls	r3, r3, #3
 8014cde:	440b      	add	r3, r1
 8014ce0:	3314      	adds	r3, #20
 8014ce2:	2203      	movs	r2, #3
 8014ce4:	701a      	strb	r2, [r3, #0]
 8014ce6:	e02d      	b.n	8014d44 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014ce8:	79fa      	ldrb	r2, [r7, #7]
 8014cea:	4923      	ldr	r1, [pc, #140]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014cec:	4613      	mov	r3, r2
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	4413      	add	r3, r2
 8014cf2:	00db      	lsls	r3, r3, #3
 8014cf4:	440b      	add	r3, r1
 8014cf6:	3312      	adds	r3, #18
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014cfe:	d321      	bcc.n	8014d44 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014d00:	79fa      	ldrb	r2, [r7, #7]
 8014d02:	4613      	mov	r3, r2
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	4413      	add	r3, r2
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d0c:	4413      	add	r3, r2
 8014d0e:	1d19      	adds	r1, r3, #4
 8014d10:	79fa      	ldrb	r2, [r7, #7]
 8014d12:	4613      	mov	r3, r2
 8014d14:	005b      	lsls	r3, r3, #1
 8014d16:	4413      	add	r3, r2
 8014d18:	00db      	lsls	r3, r3, #3
 8014d1a:	3308      	adds	r3, #8
 8014d1c:	4a16      	ldr	r2, [pc, #88]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d1e:	4413      	add	r3, r2
 8014d20:	3304      	adds	r3, #4
 8014d22:	461a      	mov	r2, r3
 8014d24:	68f8      	ldr	r0, [r7, #12]
 8014d26:	f000 fafb 	bl	8015320 <etharp_request_dst>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d109      	bne.n	8014d44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014d30:	79fa      	ldrb	r2, [r7, #7]
 8014d32:	4911      	ldr	r1, [pc, #68]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d34:	4613      	mov	r3, r2
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	4413      	add	r3, r2
 8014d3a:	00db      	lsls	r3, r3, #3
 8014d3c:	440b      	add	r3, r1
 8014d3e:	3314      	adds	r3, #20
 8014d40:	2203      	movs	r2, #3
 8014d42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014d4a:	79fa      	ldrb	r2, [r7, #7]
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	005b      	lsls	r3, r3, #1
 8014d50:	4413      	add	r3, r2
 8014d52:	00db      	lsls	r3, r3, #3
 8014d54:	3308      	adds	r3, #8
 8014d56:	4a08      	ldr	r2, [pc, #32]	@ (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d58:	4413      	add	r3, r2
 8014d5a:	3304      	adds	r3, #4
 8014d5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014d60:	9200      	str	r2, [sp, #0]
 8014d62:	460a      	mov	r2, r1
 8014d64:	68b9      	ldr	r1, [r7, #8]
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f001 fed2 	bl	8016b10 <ethernet_output>
 8014d6c:	4603      	mov	r3, r0
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3710      	adds	r7, #16
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	20008560 	.word	0x20008560
 8014d7c:	0801b2f0 	.word	0x0801b2f0
 8014d80:	0801b460 	.word	0x0801b460
 8014d84:	0801b368 	.word	0x0801b368

08014d88 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b08a      	sub	sp, #40	@ 0x28
 8014d8c:	af02      	add	r7, sp, #8
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	60b9      	str	r1, [r7, #8]
 8014d92:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d106      	bne.n	8014dac <etharp_output+0x24>
 8014d9e:	4b73      	ldr	r3, [pc, #460]	@ (8014f6c <etharp_output+0x1e4>)
 8014da0:	f240 321e 	movw	r2, #798	@ 0x31e
 8014da4:	4972      	ldr	r1, [pc, #456]	@ (8014f70 <etharp_output+0x1e8>)
 8014da6:	4873      	ldr	r0, [pc, #460]	@ (8014f74 <etharp_output+0x1ec>)
 8014da8:	f002 fda2 	bl	80178f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <etharp_output+0x38>
 8014db2:	4b6e      	ldr	r3, [pc, #440]	@ (8014f6c <etharp_output+0x1e4>)
 8014db4:	f240 321f 	movw	r2, #799	@ 0x31f
 8014db8:	496f      	ldr	r1, [pc, #444]	@ (8014f78 <etharp_output+0x1f0>)
 8014dba:	486e      	ldr	r0, [pc, #440]	@ (8014f74 <etharp_output+0x1ec>)
 8014dbc:	f002 fd98 	bl	80178f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d106      	bne.n	8014dd4 <etharp_output+0x4c>
 8014dc6:	4b69      	ldr	r3, [pc, #420]	@ (8014f6c <etharp_output+0x1e4>)
 8014dc8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014dcc:	496b      	ldr	r1, [pc, #428]	@ (8014f7c <etharp_output+0x1f4>)
 8014dce:	4869      	ldr	r0, [pc, #420]	@ (8014f74 <etharp_output+0x1ec>)
 8014dd0:	f002 fd8e 	bl	80178f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	68f9      	ldr	r1, [r7, #12]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f000 ff8a 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 8014de0:	4603      	mov	r3, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d002      	beq.n	8014dec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014de6:	4b66      	ldr	r3, [pc, #408]	@ (8014f80 <etharp_output+0x1f8>)
 8014de8:	61fb      	str	r3, [r7, #28]
 8014dea:	e0af      	b.n	8014f4c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014df4:	2be0      	cmp	r3, #224	@ 0xe0
 8014df6:	d118      	bne.n	8014e2a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014e00:	235e      	movs	r3, #94	@ 0x5e
 8014e02:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	3301      	adds	r3, #1
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	3302      	adds	r3, #2
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	3303      	adds	r3, #3
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014e22:	f107 0310 	add.w	r3, r7, #16
 8014e26:	61fb      	str	r3, [r7, #28]
 8014e28:	e090      	b.n	8014f4c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681a      	ldr	r2, [r3, #0]
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	3304      	adds	r3, #4
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	405a      	eors	r2, r3
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	3308      	adds	r3, #8
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	4013      	ands	r3, r2
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d012      	beq.n	8014e68 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014e48:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	d00b      	beq.n	8014e68 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	330c      	adds	r3, #12
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d003      	beq.n	8014e62 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	330c      	adds	r3, #12
 8014e5e:	61bb      	str	r3, [r7, #24]
 8014e60:	e002      	b.n	8014e68 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014e62:	f06f 0303 	mvn.w	r3, #3
 8014e66:	e07d      	b.n	8014f64 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e68:	4b46      	ldr	r3, [pc, #280]	@ (8014f84 <etharp_output+0x1fc>)
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	4619      	mov	r1, r3
 8014e6e:	4a46      	ldr	r2, [pc, #280]	@ (8014f88 <etharp_output+0x200>)
 8014e70:	460b      	mov	r3, r1
 8014e72:	005b      	lsls	r3, r3, #1
 8014e74:	440b      	add	r3, r1
 8014e76:	00db      	lsls	r3, r3, #3
 8014e78:	4413      	add	r3, r2
 8014e7a:	3314      	adds	r3, #20
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	2b01      	cmp	r3, #1
 8014e80:	d925      	bls.n	8014ece <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014e82:	4b40      	ldr	r3, [pc, #256]	@ (8014f84 <etharp_output+0x1fc>)
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	4619      	mov	r1, r3
 8014e88:	4a3f      	ldr	r2, [pc, #252]	@ (8014f88 <etharp_output+0x200>)
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	005b      	lsls	r3, r3, #1
 8014e8e:	440b      	add	r3, r1
 8014e90:	00db      	lsls	r3, r3, #3
 8014e92:	4413      	add	r3, r2
 8014e94:	3308      	adds	r3, #8
 8014e96:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e98:	68fa      	ldr	r2, [r7, #12]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d117      	bne.n	8014ece <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014e9e:	69bb      	ldr	r3, [r7, #24]
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	4b38      	ldr	r3, [pc, #224]	@ (8014f84 <etharp_output+0x1fc>)
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	4937      	ldr	r1, [pc, #220]	@ (8014f88 <etharp_output+0x200>)
 8014eaa:	4603      	mov	r3, r0
 8014eac:	005b      	lsls	r3, r3, #1
 8014eae:	4403      	add	r3, r0
 8014eb0:	00db      	lsls	r3, r3, #3
 8014eb2:	440b      	add	r3, r1
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d108      	bne.n	8014ece <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014ebc:	4b31      	ldr	r3, [pc, #196]	@ (8014f84 <etharp_output+0x1fc>)
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	68b9      	ldr	r1, [r7, #8]
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f7ff fec5 	bl	8014c54 <etharp_output_to_arp_index>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	e04a      	b.n	8014f64 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014ece:	2300      	movs	r3, #0
 8014ed0:	75fb      	strb	r3, [r7, #23]
 8014ed2:	e031      	b.n	8014f38 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ed4:	7dfa      	ldrb	r2, [r7, #23]
 8014ed6:	492c      	ldr	r1, [pc, #176]	@ (8014f88 <etharp_output+0x200>)
 8014ed8:	4613      	mov	r3, r2
 8014eda:	005b      	lsls	r3, r3, #1
 8014edc:	4413      	add	r3, r2
 8014ede:	00db      	lsls	r3, r3, #3
 8014ee0:	440b      	add	r3, r1
 8014ee2:	3314      	adds	r3, #20
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d923      	bls.n	8014f32 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014eea:	7dfa      	ldrb	r2, [r7, #23]
 8014eec:	4926      	ldr	r1, [pc, #152]	@ (8014f88 <etharp_output+0x200>)
 8014eee:	4613      	mov	r3, r2
 8014ef0:	005b      	lsls	r3, r3, #1
 8014ef2:	4413      	add	r3, r2
 8014ef4:	00db      	lsls	r3, r3, #3
 8014ef6:	440b      	add	r3, r1
 8014ef8:	3308      	adds	r3, #8
 8014efa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014efc:	68fa      	ldr	r2, [r7, #12]
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d117      	bne.n	8014f32 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014f02:	69bb      	ldr	r3, [r7, #24]
 8014f04:	6819      	ldr	r1, [r3, #0]
 8014f06:	7dfa      	ldrb	r2, [r7, #23]
 8014f08:	481f      	ldr	r0, [pc, #124]	@ (8014f88 <etharp_output+0x200>)
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	005b      	lsls	r3, r3, #1
 8014f0e:	4413      	add	r3, r2
 8014f10:	00db      	lsls	r3, r3, #3
 8014f12:	4403      	add	r3, r0
 8014f14:	3304      	adds	r3, #4
 8014f16:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014f18:	4299      	cmp	r1, r3
 8014f1a:	d10a      	bne.n	8014f32 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014f1c:	4a19      	ldr	r2, [pc, #100]	@ (8014f84 <etharp_output+0x1fc>)
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014f22:	7dfb      	ldrb	r3, [r7, #23]
 8014f24:	461a      	mov	r2, r3
 8014f26:	68b9      	ldr	r1, [r7, #8]
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f7ff fe93 	bl	8014c54 <etharp_output_to_arp_index>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	e018      	b.n	8014f64 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014f32:	7dfb      	ldrb	r3, [r7, #23]
 8014f34:	3301      	adds	r3, #1
 8014f36:	75fb      	strb	r3, [r7, #23]
 8014f38:	7dfb      	ldrb	r3, [r7, #23]
 8014f3a:	2b09      	cmp	r3, #9
 8014f3c:	d9ca      	bls.n	8014ed4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	69b9      	ldr	r1, [r7, #24]
 8014f42:	68f8      	ldr	r0, [r7, #12]
 8014f44:	f000 f822 	bl	8014f8c <etharp_query>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	e00b      	b.n	8014f64 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014f52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014f56:	9300      	str	r3, [sp, #0]
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	68b9      	ldr	r1, [r7, #8]
 8014f5c:	68f8      	ldr	r0, [r7, #12]
 8014f5e:	f001 fdd7 	bl	8016b10 <ethernet_output>
 8014f62:	4603      	mov	r3, r0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3720      	adds	r7, #32
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}
 8014f6c:	0801b2f0 	.word	0x0801b2f0
 8014f70:	0801b440 	.word	0x0801b440
 8014f74:	0801b368 	.word	0x0801b368
 8014f78:	0801b490 	.word	0x0801b490
 8014f7c:	0801b430 	.word	0x0801b430
 8014f80:	0801bfe0 	.word	0x0801bfe0
 8014f84:	20008650 	.word	0x20008650
 8014f88:	20008560 	.word	0x20008560

08014f8c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b08c      	sub	sp, #48	@ 0x30
 8014f90:	af02      	add	r7, sp, #8
 8014f92:	60f8      	str	r0, [r7, #12]
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	3326      	adds	r3, #38	@ 0x26
 8014f9c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014f9e:	23ff      	movs	r3, #255	@ 0xff
 8014fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	68f9      	ldr	r1, [r7, #12]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f000 fea0 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d10c      	bne.n	8014fd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fc2:	2be0      	cmp	r3, #224	@ 0xe0
 8014fc4:	d006      	beq.n	8014fd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d003      	beq.n	8014fd4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d102      	bne.n	8014fda <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014fd4:	f06f 030f 	mvn.w	r3, #15
 8014fd8:	e101      	b.n	80151de <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014fda:	68fa      	ldr	r2, [r7, #12]
 8014fdc:	2101      	movs	r1, #1
 8014fde:	68b8      	ldr	r0, [r7, #8]
 8014fe0:	f7ff fb60 	bl	80146a4 <etharp_find_entry>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	da02      	bge.n	8014ff6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014ff0:	8a7b      	ldrh	r3, [r7, #18]
 8014ff2:	b25b      	sxtb	r3, r3
 8014ff4:	e0f3      	b.n	80151de <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014ff6:	8a7b      	ldrh	r3, [r7, #18]
 8014ff8:	2b7e      	cmp	r3, #126	@ 0x7e
 8014ffa:	d906      	bls.n	801500a <etharp_query+0x7e>
 8014ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80151e8 <etharp_query+0x25c>)
 8014ffe:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015002:	497a      	ldr	r1, [pc, #488]	@ (80151ec <etharp_query+0x260>)
 8015004:	487a      	ldr	r0, [pc, #488]	@ (80151f0 <etharp_query+0x264>)
 8015006:	f002 fc73 	bl	80178f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801500a:	8a7b      	ldrh	r3, [r7, #18]
 801500c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801500e:	7c7a      	ldrb	r2, [r7, #17]
 8015010:	4978      	ldr	r1, [pc, #480]	@ (80151f4 <etharp_query+0x268>)
 8015012:	4613      	mov	r3, r2
 8015014:	005b      	lsls	r3, r3, #1
 8015016:	4413      	add	r3, r2
 8015018:	00db      	lsls	r3, r3, #3
 801501a:	440b      	add	r3, r1
 801501c:	3314      	adds	r3, #20
 801501e:	781b      	ldrb	r3, [r3, #0]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d115      	bne.n	8015050 <etharp_query+0xc4>
    is_new_entry = 1;
 8015024:	2301      	movs	r3, #1
 8015026:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015028:	7c7a      	ldrb	r2, [r7, #17]
 801502a:	4972      	ldr	r1, [pc, #456]	@ (80151f4 <etharp_query+0x268>)
 801502c:	4613      	mov	r3, r2
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	4413      	add	r3, r2
 8015032:	00db      	lsls	r3, r3, #3
 8015034:	440b      	add	r3, r1
 8015036:	3314      	adds	r3, #20
 8015038:	2201      	movs	r2, #1
 801503a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801503c:	7c7a      	ldrb	r2, [r7, #17]
 801503e:	496d      	ldr	r1, [pc, #436]	@ (80151f4 <etharp_query+0x268>)
 8015040:	4613      	mov	r3, r2
 8015042:	005b      	lsls	r3, r3, #1
 8015044:	4413      	add	r3, r2
 8015046:	00db      	lsls	r3, r3, #3
 8015048:	440b      	add	r3, r1
 801504a:	3308      	adds	r3, #8
 801504c:	68fa      	ldr	r2, [r7, #12]
 801504e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015050:	7c7a      	ldrb	r2, [r7, #17]
 8015052:	4968      	ldr	r1, [pc, #416]	@ (80151f4 <etharp_query+0x268>)
 8015054:	4613      	mov	r3, r2
 8015056:	005b      	lsls	r3, r3, #1
 8015058:	4413      	add	r3, r2
 801505a:	00db      	lsls	r3, r3, #3
 801505c:	440b      	add	r3, r1
 801505e:	3314      	adds	r3, #20
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	2b01      	cmp	r3, #1
 8015064:	d011      	beq.n	801508a <etharp_query+0xfe>
 8015066:	7c7a      	ldrb	r2, [r7, #17]
 8015068:	4962      	ldr	r1, [pc, #392]	@ (80151f4 <etharp_query+0x268>)
 801506a:	4613      	mov	r3, r2
 801506c:	005b      	lsls	r3, r3, #1
 801506e:	4413      	add	r3, r2
 8015070:	00db      	lsls	r3, r3, #3
 8015072:	440b      	add	r3, r1
 8015074:	3314      	adds	r3, #20
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	2b01      	cmp	r3, #1
 801507a:	d806      	bhi.n	801508a <etharp_query+0xfe>
 801507c:	4b5a      	ldr	r3, [pc, #360]	@ (80151e8 <etharp_query+0x25c>)
 801507e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015082:	495d      	ldr	r1, [pc, #372]	@ (80151f8 <etharp_query+0x26c>)
 8015084:	485a      	ldr	r0, [pc, #360]	@ (80151f0 <etharp_query+0x264>)
 8015086:	f002 fc33 	bl	80178f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801508a:	6a3b      	ldr	r3, [r7, #32]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d102      	bne.n	8015096 <etharp_query+0x10a>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d10c      	bne.n	80150b0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015096:	68b9      	ldr	r1, [r7, #8]
 8015098:	68f8      	ldr	r0, [r7, #12]
 801509a:	f000 f963 	bl	8015364 <etharp_request>
 801509e:	4603      	mov	r3, r0
 80150a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d102      	bne.n	80150b0 <etharp_query+0x124>
      return result;
 80150aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80150ae:	e096      	b.n	80151de <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d106      	bne.n	80150c4 <etharp_query+0x138>
 80150b6:	4b4c      	ldr	r3, [pc, #304]	@ (80151e8 <etharp_query+0x25c>)
 80150b8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80150bc:	494f      	ldr	r1, [pc, #316]	@ (80151fc <etharp_query+0x270>)
 80150be:	484c      	ldr	r0, [pc, #304]	@ (80151f0 <etharp_query+0x264>)
 80150c0:	f002 fc16 	bl	80178f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80150c4:	7c7a      	ldrb	r2, [r7, #17]
 80150c6:	494b      	ldr	r1, [pc, #300]	@ (80151f4 <etharp_query+0x268>)
 80150c8:	4613      	mov	r3, r2
 80150ca:	005b      	lsls	r3, r3, #1
 80150cc:	4413      	add	r3, r2
 80150ce:	00db      	lsls	r3, r3, #3
 80150d0:	440b      	add	r3, r1
 80150d2:	3314      	adds	r3, #20
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d917      	bls.n	801510a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80150da:	4a49      	ldr	r2, [pc, #292]	@ (8015200 <etharp_query+0x274>)
 80150dc:	7c7b      	ldrb	r3, [r7, #17]
 80150de:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80150e0:	7c7a      	ldrb	r2, [r7, #17]
 80150e2:	4613      	mov	r3, r2
 80150e4:	005b      	lsls	r3, r3, #1
 80150e6:	4413      	add	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	3308      	adds	r3, #8
 80150ec:	4a41      	ldr	r2, [pc, #260]	@ (80151f4 <etharp_query+0x268>)
 80150ee:	4413      	add	r3, r2
 80150f0:	3304      	adds	r3, #4
 80150f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80150f6:	9200      	str	r2, [sp, #0]
 80150f8:	697a      	ldr	r2, [r7, #20]
 80150fa:	6879      	ldr	r1, [r7, #4]
 80150fc:	68f8      	ldr	r0, [r7, #12]
 80150fe:	f001 fd07 	bl	8016b10 <ethernet_output>
 8015102:	4603      	mov	r3, r0
 8015104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015108:	e067      	b.n	80151da <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801510a:	7c7a      	ldrb	r2, [r7, #17]
 801510c:	4939      	ldr	r1, [pc, #228]	@ (80151f4 <etharp_query+0x268>)
 801510e:	4613      	mov	r3, r2
 8015110:	005b      	lsls	r3, r3, #1
 8015112:	4413      	add	r3, r2
 8015114:	00db      	lsls	r3, r3, #3
 8015116:	440b      	add	r3, r1
 8015118:	3314      	adds	r3, #20
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	2b01      	cmp	r3, #1
 801511e:	d15c      	bne.n	80151da <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015120:	2300      	movs	r3, #0
 8015122:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015128:	e01c      	b.n	8015164 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801512a:	69fb      	ldr	r3, [r7, #28]
 801512c:	895a      	ldrh	r2, [r3, #10]
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	891b      	ldrh	r3, [r3, #8]
 8015132:	429a      	cmp	r2, r3
 8015134:	d10a      	bne.n	801514c <etharp_query+0x1c0>
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d006      	beq.n	801514c <etharp_query+0x1c0>
 801513e:	4b2a      	ldr	r3, [pc, #168]	@ (80151e8 <etharp_query+0x25c>)
 8015140:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015144:	492f      	ldr	r1, [pc, #188]	@ (8015204 <etharp_query+0x278>)
 8015146:	482a      	ldr	r0, [pc, #168]	@ (80151f0 <etharp_query+0x264>)
 8015148:	f002 fbd2 	bl	80178f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801514c:	69fb      	ldr	r3, [r7, #28]
 801514e:	7b1b      	ldrb	r3, [r3, #12]
 8015150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015154:	2b00      	cmp	r3, #0
 8015156:	d002      	beq.n	801515e <etharp_query+0x1d2>
        copy_needed = 1;
 8015158:	2301      	movs	r3, #1
 801515a:	61bb      	str	r3, [r7, #24]
        break;
 801515c:	e005      	b.n	801516a <etharp_query+0x1de>
      }
      p = p->next;
 801515e:	69fb      	ldr	r3, [r7, #28]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1df      	bne.n	801512a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d007      	beq.n	8015180 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015176:	200e      	movs	r0, #14
 8015178:	f7f9 f824 	bl	800e1c4 <pbuf_clone>
 801517c:	61f8      	str	r0, [r7, #28]
 801517e:	e004      	b.n	801518a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015184:	69f8      	ldr	r0, [r7, #28]
 8015186:	f7f8 fe51 	bl	800de2c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d021      	beq.n	80151d4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015190:	7c7a      	ldrb	r2, [r7, #17]
 8015192:	4918      	ldr	r1, [pc, #96]	@ (80151f4 <etharp_query+0x268>)
 8015194:	4613      	mov	r3, r2
 8015196:	005b      	lsls	r3, r3, #1
 8015198:	4413      	add	r3, r2
 801519a:	00db      	lsls	r3, r3, #3
 801519c:	440b      	add	r3, r1
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d00a      	beq.n	80151ba <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80151a4:	7c7a      	ldrb	r2, [r7, #17]
 80151a6:	4913      	ldr	r1, [pc, #76]	@ (80151f4 <etharp_query+0x268>)
 80151a8:	4613      	mov	r3, r2
 80151aa:	005b      	lsls	r3, r3, #1
 80151ac:	4413      	add	r3, r2
 80151ae:	00db      	lsls	r3, r3, #3
 80151b0:	440b      	add	r3, r1
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7f8 fd99 	bl	800dcec <pbuf_free>
      }
      arp_table[i].q = p;
 80151ba:	7c7a      	ldrb	r2, [r7, #17]
 80151bc:	490d      	ldr	r1, [pc, #52]	@ (80151f4 <etharp_query+0x268>)
 80151be:	4613      	mov	r3, r2
 80151c0:	005b      	lsls	r3, r3, #1
 80151c2:	4413      	add	r3, r2
 80151c4:	00db      	lsls	r3, r3, #3
 80151c6:	440b      	add	r3, r1
 80151c8:	69fa      	ldr	r2, [r7, #28]
 80151ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80151cc:	2300      	movs	r3, #0
 80151ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80151d2:	e002      	b.n	80151da <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80151d4:	23ff      	movs	r3, #255	@ 0xff
 80151d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80151da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3728      	adds	r7, #40	@ 0x28
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
 80151e6:	bf00      	nop
 80151e8:	0801b2f0 	.word	0x0801b2f0
 80151ec:	0801b49c 	.word	0x0801b49c
 80151f0:	0801b368 	.word	0x0801b368
 80151f4:	20008560 	.word	0x20008560
 80151f8:	0801b4ac 	.word	0x0801b4ac
 80151fc:	0801b490 	.word	0x0801b490
 8015200:	20008650 	.word	0x20008650
 8015204:	0801b4d4 	.word	0x0801b4d4

08015208 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b08a      	sub	sp, #40	@ 0x28
 801520c:	af02      	add	r7, sp, #8
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	607a      	str	r2, [r7, #4]
 8015214:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015216:	2300      	movs	r3, #0
 8015218:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d106      	bne.n	801522e <etharp_raw+0x26>
 8015220:	4b3a      	ldr	r3, [pc, #232]	@ (801530c <etharp_raw+0x104>)
 8015222:	f240 4257 	movw	r2, #1111	@ 0x457
 8015226:	493a      	ldr	r1, [pc, #232]	@ (8015310 <etharp_raw+0x108>)
 8015228:	483a      	ldr	r0, [pc, #232]	@ (8015314 <etharp_raw+0x10c>)
 801522a:	f002 fb61 	bl	80178f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801522e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015232:	211c      	movs	r1, #28
 8015234:	200e      	movs	r0, #14
 8015236:	f7f8 fa75 	bl	800d724 <pbuf_alloc>
 801523a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d102      	bne.n	8015248 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015246:	e05d      	b.n	8015304 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	895b      	ldrh	r3, [r3, #10]
 801524c:	2b1b      	cmp	r3, #27
 801524e:	d806      	bhi.n	801525e <etharp_raw+0x56>
 8015250:	4b2e      	ldr	r3, [pc, #184]	@ (801530c <etharp_raw+0x104>)
 8015252:	f240 4262 	movw	r2, #1122	@ 0x462
 8015256:	4930      	ldr	r1, [pc, #192]	@ (8015318 <etharp_raw+0x110>)
 8015258:	482e      	ldr	r0, [pc, #184]	@ (8015314 <etharp_raw+0x10c>)
 801525a:	f002 fb49 	bl	80178f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015264:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015266:	4618      	mov	r0, r3
 8015268:	f7f7 f8f0 	bl	800c44c <lwip_htons>
 801526c:	4603      	mov	r3, r0
 801526e:	461a      	mov	r2, r3
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801527a:	2b06      	cmp	r3, #6
 801527c:	d006      	beq.n	801528c <etharp_raw+0x84>
 801527e:	4b23      	ldr	r3, [pc, #140]	@ (801530c <etharp_raw+0x104>)
 8015280:	f240 4269 	movw	r2, #1129	@ 0x469
 8015284:	4925      	ldr	r1, [pc, #148]	@ (801531c <etharp_raw+0x114>)
 8015286:	4823      	ldr	r0, [pc, #140]	@ (8015314 <etharp_raw+0x10c>)
 8015288:	f002 fb32 	bl	80178f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	3308      	adds	r3, #8
 8015290:	2206      	movs	r2, #6
 8015292:	6839      	ldr	r1, [r7, #0]
 8015294:	4618      	mov	r0, r3
 8015296:	f002 fd00 	bl	8017c9a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	3312      	adds	r3, #18
 801529e:	2206      	movs	r2, #6
 80152a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80152a2:	4618      	mov	r0, r3
 80152a4:	f002 fcf9 	bl	8017c9a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	330e      	adds	r3, #14
 80152ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152ae:	6812      	ldr	r2, [r2, #0]
 80152b0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	3318      	adds	r3, #24
 80152b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80152b8:	6812      	ldr	r2, [r2, #0]
 80152ba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	2200      	movs	r2, #0
 80152c0:	701a      	strb	r2, [r3, #0]
 80152c2:	2200      	movs	r2, #0
 80152c4:	f042 0201 	orr.w	r2, r2, #1
 80152c8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2200      	movs	r2, #0
 80152ce:	f042 0208 	orr.w	r2, r2, #8
 80152d2:	709a      	strb	r2, [r3, #2]
 80152d4:	2200      	movs	r2, #0
 80152d6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	2206      	movs	r2, #6
 80152dc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	2204      	movs	r2, #4
 80152e2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80152e4:	f640 0306 	movw	r3, #2054	@ 0x806
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	68ba      	ldr	r2, [r7, #8]
 80152ee:	69b9      	ldr	r1, [r7, #24]
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f001 fc0d 	bl	8016b10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80152f6:	69b8      	ldr	r0, [r7, #24]
 80152f8:	f7f8 fcf8 	bl	800dcec <pbuf_free>
  p = NULL;
 80152fc:	2300      	movs	r3, #0
 80152fe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015300:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015304:	4618      	mov	r0, r3
 8015306:	3720      	adds	r7, #32
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	0801b2f0 	.word	0x0801b2f0
 8015310:	0801b440 	.word	0x0801b440
 8015314:	0801b368 	.word	0x0801b368
 8015318:	0801b4f0 	.word	0x0801b4f0
 801531c:	0801b524 	.word	0x0801b524

08015320 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b088      	sub	sp, #32
 8015324:	af04      	add	r7, sp, #16
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801533c:	2201      	movs	r2, #1
 801533e:	9203      	str	r2, [sp, #12]
 8015340:	68ba      	ldr	r2, [r7, #8]
 8015342:	9202      	str	r2, [sp, #8]
 8015344:	4a06      	ldr	r2, [pc, #24]	@ (8015360 <etharp_request_dst+0x40>)
 8015346:	9201      	str	r2, [sp, #4]
 8015348:	9300      	str	r3, [sp, #0]
 801534a:	4603      	mov	r3, r0
 801534c:	687a      	ldr	r2, [r7, #4]
 801534e:	68f8      	ldr	r0, [r7, #12]
 8015350:	f7ff ff5a 	bl	8015208 <etharp_raw>
 8015354:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015356:	4618      	mov	r0, r3
 8015358:	3710      	adds	r7, #16
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	0801bfe8 	.word	0x0801bfe8

08015364 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801536e:	4a05      	ldr	r2, [pc, #20]	@ (8015384 <etharp_request+0x20>)
 8015370:	6839      	ldr	r1, [r7, #0]
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7ff ffd4 	bl	8015320 <etharp_request_dst>
 8015378:	4603      	mov	r3, r0
}
 801537a:	4618      	mov	r0, r3
 801537c:	3708      	adds	r7, #8
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
 8015382:	bf00      	nop
 8015384:	0801bfe0 	.word	0x0801bfe0

08015388 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b08e      	sub	sp, #56	@ 0x38
 801538c:	af04      	add	r7, sp, #16
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015392:	4b95      	ldr	r3, [pc, #596]	@ (80155e8 <icmp_input+0x260>)
 8015394:	689b      	ldr	r3, [r3, #8]
 8015396:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	f003 030f 	and.w	r3, r3, #15
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	009b      	lsls	r3, r3, #2
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80153a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80153aa:	2b13      	cmp	r3, #19
 80153ac:	d805      	bhi.n	80153ba <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 80153ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80153b0:	4619      	mov	r1, r3
 80153b2:	488e      	ldr	r0, [pc, #568]	@ (80155ec <icmp_input+0x264>)
 80153b4:	f002 fa9c 	bl	80178f0 <iprintf>
    goto lenerr;
 80153b8:	e10a      	b.n	80155d0 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	895b      	ldrh	r3, [r3, #10]
 80153be:	2b03      	cmp	r3, #3
 80153c0:	d806      	bhi.n	80153d0 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	891b      	ldrh	r3, [r3, #8]
 80153c6:	4619      	mov	r1, r3
 80153c8:	4889      	ldr	r0, [pc, #548]	@ (80155f0 <icmp_input+0x268>)
 80153ca:	f002 fa91 	bl	80178f0 <iprintf>
    goto lenerr;
 80153ce:	e0ff      	b.n	80155d0 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	785b      	ldrb	r3, [r3, #1]
 80153e0:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80153e4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	f000 80ea 	beq.w	80155c2 <icmp_input+0x23a>
 80153ee:	2b08      	cmp	r3, #8
 80153f0:	f040 80de 	bne.w	80155b0 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80153f4:	4b7f      	ldr	r3, [pc, #508]	@ (80155f4 <icmp_input+0x26c>)
 80153f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153f8:	4b7b      	ldr	r3, [pc, #492]	@ (80155e8 <icmp_input+0x260>)
 80153fa:	695b      	ldr	r3, [r3, #20]
 80153fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015400:	2be0      	cmp	r3, #224	@ 0xe0
 8015402:	d103      	bne.n	801540c <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 8015404:	487c      	ldr	r0, [pc, #496]	@ (80155f8 <icmp_input+0x270>)
 8015406:	f002 fae3 	bl	80179d0 <puts>
        goto icmperr;
 801540a:	e0e5      	b.n	80155d8 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801540c:	4b76      	ldr	r3, [pc, #472]	@ (80155e8 <icmp_input+0x260>)
 801540e:	695b      	ldr	r3, [r3, #20]
 8015410:	4a75      	ldr	r2, [pc, #468]	@ (80155e8 <icmp_input+0x260>)
 8015412:	6812      	ldr	r2, [r2, #0]
 8015414:	4611      	mov	r1, r2
 8015416:	4618      	mov	r0, r3
 8015418:	f000 fc6c 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 801541c:	4603      	mov	r3, r0
 801541e:	2b00      	cmp	r3, #0
 8015420:	d003      	beq.n	801542a <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 8015422:	4876      	ldr	r0, [pc, #472]	@ (80155fc <icmp_input+0x274>)
 8015424:	f002 fad4 	bl	80179d0 <puts>
        goto icmperr;
 8015428:	e0d6      	b.n	80155d8 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801542a:	4875      	ldr	r0, [pc, #468]	@ (8015600 <icmp_input+0x278>)
 801542c:	f002 fad0 	bl	80179d0 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	891b      	ldrh	r3, [r3, #8]
 8015434:	2b07      	cmp	r3, #7
 8015436:	d803      	bhi.n	8015440 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 8015438:	4872      	ldr	r0, [pc, #456]	@ (8015604 <icmp_input+0x27c>)
 801543a:	f002 fac9 	bl	80179d0 <puts>
        goto lenerr;
 801543e:	e0c7      	b.n	80155d0 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015440:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015442:	330e      	adds	r3, #14
 8015444:	4619      	mov	r1, r3
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f7f8 fbba 	bl	800dbc0 <pbuf_add_header>
 801544c:	4603      	mov	r3, r0
 801544e:	2b00      	cmp	r3, #0
 8015450:	d057      	beq.n	8015502 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	891a      	ldrh	r2, [r3, #8]
 8015456:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015458:	4413      	add	r3, r2
 801545a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	891b      	ldrh	r3, [r3, #8]
 8015460:	8b7a      	ldrh	r2, [r7, #26]
 8015462:	429a      	cmp	r2, r3
 8015464:	d203      	bcs.n	801546e <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 8015466:	4868      	ldr	r0, [pc, #416]	@ (8015608 <icmp_input+0x280>)
 8015468:	f002 fab2 	bl	80179d0 <puts>
          goto icmperr;
 801546c:	e0b4      	b.n	80155d8 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801546e:	8b7b      	ldrh	r3, [r7, #26]
 8015470:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015474:	4619      	mov	r1, r3
 8015476:	200e      	movs	r0, #14
 8015478:	f7f8 f954 	bl	800d724 <pbuf_alloc>
 801547c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d103      	bne.n	801548c <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 8015484:	4861      	ldr	r0, [pc, #388]	@ (801560c <icmp_input+0x284>)
 8015486:	f002 faa3 	bl	80179d0 <puts>
          goto icmperr;
 801548a:	e0a5      	b.n	80155d8 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	895b      	ldrh	r3, [r3, #10]
 8015490:	461a      	mov	r2, r3
 8015492:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015494:	3308      	adds	r3, #8
 8015496:	429a      	cmp	r2, r3
 8015498:	d206      	bcs.n	80154a8 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801549a:	485d      	ldr	r0, [pc, #372]	@ (8015610 <icmp_input+0x288>)
 801549c:	f002 fa28 	bl	80178f0 <iprintf>
          pbuf_free(r);
 80154a0:	6978      	ldr	r0, [r7, #20]
 80154a2:	f7f8 fc23 	bl	800dcec <pbuf_free>
          goto icmperr;
 80154a6:	e097      	b.n	80155d8 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80154ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154b0:	4618      	mov	r0, r3
 80154b2:	f002 fbf2 	bl	8017c9a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80154b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80154b8:	4619      	mov	r1, r3
 80154ba:	6978      	ldr	r0, [r7, #20]
 80154bc:	f7f8 fb90 	bl	800dbe0 <pbuf_remove_header>
 80154c0:	4603      	mov	r3, r0
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d009      	beq.n	80154da <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80154c6:	4b53      	ldr	r3, [pc, #332]	@ (8015614 <icmp_input+0x28c>)
 80154c8:	22b6      	movs	r2, #182	@ 0xb6
 80154ca:	4953      	ldr	r1, [pc, #332]	@ (8015618 <icmp_input+0x290>)
 80154cc:	4853      	ldr	r0, [pc, #332]	@ (801561c <icmp_input+0x294>)
 80154ce:	f002 fa0f 	bl	80178f0 <iprintf>
          pbuf_free(r);
 80154d2:	6978      	ldr	r0, [r7, #20]
 80154d4:	f7f8 fc0a 	bl	800dcec <pbuf_free>
          goto icmperr;
 80154d8:	e07e      	b.n	80155d8 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80154da:	6879      	ldr	r1, [r7, #4]
 80154dc:	6978      	ldr	r0, [r7, #20]
 80154de:	f7f8 fd2d 	bl	800df3c <pbuf_copy>
 80154e2:	4603      	mov	r3, r0
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d006      	beq.n	80154f6 <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 80154e8:	484d      	ldr	r0, [pc, #308]	@ (8015620 <icmp_input+0x298>)
 80154ea:	f002 fa01 	bl	80178f0 <iprintf>
          pbuf_free(r);
 80154ee:	6978      	ldr	r0, [r7, #20]
 80154f0:	f7f8 fbfc 	bl	800dcec <pbuf_free>
          goto icmperr;
 80154f4:	e070      	b.n	80155d8 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f7f8 fbf8 	bl	800dcec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	607b      	str	r3, [r7, #4]
 8015500:	e00f      	b.n	8015522 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015504:	330e      	adds	r3, #14
 8015506:	4619      	mov	r1, r3
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f7f8 fb69 	bl	800dbe0 <pbuf_remove_header>
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	d006      	beq.n	8015522 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015514:	4b3f      	ldr	r3, [pc, #252]	@ (8015614 <icmp_input+0x28c>)
 8015516:	22c7      	movs	r2, #199	@ 0xc7
 8015518:	4942      	ldr	r1, [pc, #264]	@ (8015624 <icmp_input+0x29c>)
 801551a:	4840      	ldr	r0, [pc, #256]	@ (801561c <icmp_input+0x294>)
 801551c:	f002 f9e8 	bl	80178f0 <iprintf>
          goto icmperr;
 8015520:	e05a      	b.n	80155d8 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	685b      	ldr	r3, [r3, #4]
 8015526:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015528:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801552a:	4619      	mov	r1, r3
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7f8 fb47 	bl	800dbc0 <pbuf_add_header>
 8015532:	4603      	mov	r3, r0
 8015534:	2b00      	cmp	r3, #0
 8015536:	d003      	beq.n	8015540 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 8015538:	483b      	ldr	r0, [pc, #236]	@ (8015628 <icmp_input+0x2a0>)
 801553a:	f002 f9d9 	bl	80178f0 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801553e:	e042      	b.n	80155c6 <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	685b      	ldr	r3, [r3, #4]
 8015544:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801554e:	4b26      	ldr	r3, [pc, #152]	@ (80155e8 <icmp_input+0x260>)
 8015550:	691a      	ldr	r2, [r3, #16]
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	2200      	movs	r2, #0
 801555a:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	2200      	movs	r2, #0
 8015560:	709a      	strb	r2, [r3, #2]
 8015562:	2200      	movs	r2, #0
 8015564:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	22ff      	movs	r2, #255	@ 0xff
 801556a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2200      	movs	r2, #0
 8015570:	729a      	strb	r2, [r3, #10]
 8015572:	2200      	movs	r2, #0
 8015574:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	9302      	str	r3, [sp, #8]
 801557a:	2301      	movs	r3, #1
 801557c:	9301      	str	r3, [sp, #4]
 801557e:	2300      	movs	r3, #0
 8015580:	9300      	str	r3, [sp, #0]
 8015582:	23ff      	movs	r3, #255	@ 0xff
 8015584:	2200      	movs	r2, #0
 8015586:	69f9      	ldr	r1, [r7, #28]
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f000 fadb 	bl	8015b44 <ip4_output_if>
 801558e:	4603      	mov	r3, r0
 8015590:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 8015592:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d015      	beq.n	80155c6 <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801559a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801559e:	4618      	mov	r0, r3
 80155a0:	f7f6 ff34 	bl	800c40c <lwip_strerr>
 80155a4:	4603      	mov	r3, r0
 80155a6:	4619      	mov	r1, r3
 80155a8:	4820      	ldr	r0, [pc, #128]	@ (801562c <icmp_input+0x2a4>)
 80155aa:	f002 f9a1 	bl	80178f0 <iprintf>
      break;
 80155ae:	e00a      	b.n	80155c6 <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 80155b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80155b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80155b8:	4619      	mov	r1, r3
 80155ba:	481d      	ldr	r0, [pc, #116]	@ (8015630 <icmp_input+0x2a8>)
 80155bc:	f002 f998 	bl	80178f0 <iprintf>
 80155c0:	e002      	b.n	80155c8 <icmp_input+0x240>
      break;
 80155c2:	bf00      	nop
 80155c4:	e000      	b.n	80155c8 <icmp_input+0x240>
      break;
 80155c6:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f7f8 fb8f 	bl	800dcec <pbuf_free>
  return;
 80155ce:	e007      	b.n	80155e0 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f7f8 fb8b 	bl	800dcec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80155d6:	e003      	b.n	80155e0 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f7f8 fb87 	bl	800dcec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80155de:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80155e0:	3728      	adds	r7, #40	@ 0x28
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}
 80155e6:	bf00      	nop
 80155e8:	200055a0 	.word	0x200055a0
 80155ec:	0801b568 	.word	0x0801b568
 80155f0:	0801b59c 	.word	0x0801b59c
 80155f4:	200055b4 	.word	0x200055b4
 80155f8:	0801b5cc 	.word	0x0801b5cc
 80155fc:	0801b5f8 	.word	0x0801b5f8
 8015600:	0801b624 	.word	0x0801b624
 8015604:	0801b638 	.word	0x0801b638
 8015608:	0801b65c 	.word	0x0801b65c
 801560c:	0801b698 	.word	0x0801b698
 8015610:	0801b6c0 	.word	0x0801b6c0
 8015614:	0801b6e8 	.word	0x0801b6e8
 8015618:	0801b720 	.word	0x0801b720
 801561c:	0801b758 	.word	0x0801b758
 8015620:	0801b780 	.word	0x0801b780
 8015624:	0801b7a8 	.word	0x0801b7a8
 8015628:	0801b7dc 	.word	0x0801b7dc
 801562c:	0801b800 	.word	0x0801b800
 8015630:	0801b830 	.word	0x0801b830

08015634 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	460b      	mov	r3, r1
 801563e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015640:	78fb      	ldrb	r3, [r7, #3]
 8015642:	461a      	mov	r2, r3
 8015644:	2103      	movs	r1, #3
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f000 f814 	bl	8015674 <icmp_send_response>
}
 801564c:	bf00      	nop
 801564e:	3708      	adds	r7, #8
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	460b      	mov	r3, r1
 801565e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015660:	78fb      	ldrb	r3, [r7, #3]
 8015662:	461a      	mov	r2, r3
 8015664:	210b      	movs	r1, #11
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f000 f804 	bl	8015674 <icmp_send_response>
}
 801566c:	bf00      	nop
 801566e:	3708      	adds	r7, #8
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b08c      	sub	sp, #48	@ 0x30
 8015678:	af04      	add	r7, sp, #16
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	460b      	mov	r3, r1
 801567e:	70fb      	strb	r3, [r7, #3]
 8015680:	4613      	mov	r3, r2
 8015682:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015684:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015688:	2124      	movs	r1, #36	@ 0x24
 801568a:	2022      	movs	r0, #34	@ 0x22
 801568c:	f7f8 f84a 	bl	800d724 <pbuf_alloc>
 8015690:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d103      	bne.n	80156a0 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 8015698:	4844      	ldr	r0, [pc, #272]	@ (80157ac <icmp_send_response+0x138>)
 801569a:	f002 f999 	bl	80179d0 <puts>
 801569e:	e082      	b.n	80157a6 <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80156a0:	69fb      	ldr	r3, [r7, #28]
 80156a2:	895b      	ldrh	r3, [r3, #10]
 80156a4:	2b23      	cmp	r3, #35	@ 0x23
 80156a6:	d806      	bhi.n	80156b6 <icmp_send_response+0x42>
 80156a8:	4b41      	ldr	r3, [pc, #260]	@ (80157b0 <icmp_send_response+0x13c>)
 80156aa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80156ae:	4941      	ldr	r1, [pc, #260]	@ (80157b4 <icmp_send_response+0x140>)
 80156b0:	4841      	ldr	r0, [pc, #260]	@ (80157b8 <icmp_send_response+0x144>)
 80156b2:	f002 f91d 	bl	80178f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 80156bc:	483f      	ldr	r0, [pc, #252]	@ (80157bc <icmp_send_response+0x148>)
 80156be:	f002 f917 	bl	80178f0 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	68db      	ldr	r3, [r3, #12]
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	4619      	mov	r1, r3
 80156ca:	69bb      	ldr	r3, [r7, #24]
 80156cc:	68db      	ldr	r3, [r3, #12]
 80156ce:	0a1b      	lsrs	r3, r3, #8
 80156d0:	b2db      	uxtb	r3, r3
 80156d2:	461a      	mov	r2, r3
 80156d4:	69bb      	ldr	r3, [r7, #24]
 80156d6:	68db      	ldr	r3, [r3, #12]
 80156d8:	0c1b      	lsrs	r3, r3, #16
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	4618      	mov	r0, r3
 80156de:	69bb      	ldr	r3, [r7, #24]
 80156e0:	68db      	ldr	r3, [r3, #12]
 80156e2:	0e1b      	lsrs	r3, r3, #24
 80156e4:	b2db      	uxtb	r3, r3
 80156e6:	9300      	str	r3, [sp, #0]
 80156e8:	4603      	mov	r3, r0
 80156ea:	4835      	ldr	r0, [pc, #212]	@ (80157c0 <icmp_send_response+0x14c>)
 80156ec:	f002 f900 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 80156f0:	4834      	ldr	r0, [pc, #208]	@ (80157c4 <icmp_send_response+0x150>)
 80156f2:	f002 f8fd 	bl	80178f0 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 80156f6:	69bb      	ldr	r3, [r7, #24]
 80156f8:	691b      	ldr	r3, [r3, #16]
 80156fa:	b2db      	uxtb	r3, r3
 80156fc:	4619      	mov	r1, r3
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	691b      	ldr	r3, [r3, #16]
 8015702:	0a1b      	lsrs	r3, r3, #8
 8015704:	b2db      	uxtb	r3, r3
 8015706:	461a      	mov	r2, r3
 8015708:	69bb      	ldr	r3, [r7, #24]
 801570a:	691b      	ldr	r3, [r3, #16]
 801570c:	0c1b      	lsrs	r3, r3, #16
 801570e:	b2db      	uxtb	r3, r3
 8015710:	4618      	mov	r0, r3
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	691b      	ldr	r3, [r3, #16]
 8015716:	0e1b      	lsrs	r3, r3, #24
 8015718:	b2db      	uxtb	r3, r3
 801571a:	9300      	str	r3, [sp, #0]
 801571c:	4603      	mov	r3, r0
 801571e:	4828      	ldr	r0, [pc, #160]	@ (80157c0 <icmp_send_response+0x14c>)
 8015720:	f002 f8e6 	bl	80178f0 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 8015724:	200a      	movs	r0, #10
 8015726:	f002 f8f5 	bl	8017914 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801572a:	69fb      	ldr	r3, [r7, #28]
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	78fa      	ldrb	r2, [r7, #3]
 8015734:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	78ba      	ldrb	r2, [r7, #2]
 801573a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	2200      	movs	r2, #0
 8015740:	711a      	strb	r2, [r3, #4]
 8015742:	2200      	movs	r2, #0
 8015744:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	2200      	movs	r2, #0
 801574a:	719a      	strb	r2, [r3, #6]
 801574c:	2200      	movs	r2, #0
 801574e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	685b      	ldr	r3, [r3, #4]
 8015754:	f103 0008 	add.w	r0, r3, #8
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	685b      	ldr	r3, [r3, #4]
 801575c:	221c      	movs	r2, #28
 801575e:	4619      	mov	r1, r3
 8015760:	f002 fa9b 	bl	8017c9a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015764:	69bb      	ldr	r3, [r7, #24]
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801576a:	f107 030c 	add.w	r3, r7, #12
 801576e:	4618      	mov	r0, r3
 8015770:	f000 f82a 	bl	80157c8 <ip4_route>
 8015774:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d011      	beq.n	80157a0 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	2200      	movs	r2, #0
 8015780:	709a      	strb	r2, [r3, #2]
 8015782:	2200      	movs	r2, #0
 8015784:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015786:	f107 020c 	add.w	r2, r7, #12
 801578a:	693b      	ldr	r3, [r7, #16]
 801578c:	9302      	str	r3, [sp, #8]
 801578e:	2301      	movs	r3, #1
 8015790:	9301      	str	r3, [sp, #4]
 8015792:	2300      	movs	r3, #0
 8015794:	9300      	str	r3, [sp, #0]
 8015796:	23ff      	movs	r3, #255	@ 0xff
 8015798:	2100      	movs	r1, #0
 801579a:	69f8      	ldr	r0, [r7, #28]
 801579c:	f000 f9d2 	bl	8015b44 <ip4_output_if>
  }
  pbuf_free(q);
 80157a0:	69f8      	ldr	r0, [r7, #28]
 80157a2:	f7f8 faa3 	bl	800dcec <pbuf_free>
}
 80157a6:	3720      	adds	r7, #32
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	0801b864 	.word	0x0801b864
 80157b0:	0801b6e8 	.word	0x0801b6e8
 80157b4:	0801b8a4 	.word	0x0801b8a4
 80157b8:	0801b758 	.word	0x0801b758
 80157bc:	0801b8d0 	.word	0x0801b8d0
 80157c0:	0801b8ec 	.word	0x0801b8ec
 80157c4:	0801b8fc 	.word	0x0801b8fc

080157c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80157c8:	b480      	push	{r7}
 80157ca:	b085      	sub	sp, #20
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80157d0:	4b33      	ldr	r3, [pc, #204]	@ (80158a0 <ip4_route+0xd8>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	60fb      	str	r3, [r7, #12]
 80157d6:	e036      	b.n	8015846 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80157de:	f003 0301 	and.w	r3, r3, #1
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d02b      	beq.n	8015840 <ip4_route+0x78>
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80157ee:	089b      	lsrs	r3, r3, #2
 80157f0:	f003 0301 	and.w	r3, r3, #1
 80157f4:	b2db      	uxtb	r3, r3
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d022      	beq.n	8015840 <ip4_route+0x78>
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	3304      	adds	r3, #4
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d01d      	beq.n	8015840 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681a      	ldr	r2, [r3, #0]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	3304      	adds	r3, #4
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	405a      	eors	r2, r3
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	3308      	adds	r3, #8
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	4013      	ands	r3, r2
 8015818:	2b00      	cmp	r3, #0
 801581a:	d101      	bne.n	8015820 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	e038      	b.n	8015892 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015826:	f003 0302 	and.w	r3, r3, #2
 801582a:	2b00      	cmp	r3, #0
 801582c:	d108      	bne.n	8015840 <ip4_route+0x78>
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	330c      	adds	r3, #12
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	429a      	cmp	r2, r3
 801583a:	d101      	bne.n	8015840 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	e028      	b.n	8015892 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	60fb      	str	r3, [r7, #12]
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d1c5      	bne.n	80157d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801584c:	4b15      	ldr	r3, [pc, #84]	@ (80158a4 <ip4_route+0xdc>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d01a      	beq.n	801588a <ip4_route+0xc2>
 8015854:	4b13      	ldr	r3, [pc, #76]	@ (80158a4 <ip4_route+0xdc>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801585c:	f003 0301 	and.w	r3, r3, #1
 8015860:	2b00      	cmp	r3, #0
 8015862:	d012      	beq.n	801588a <ip4_route+0xc2>
 8015864:	4b0f      	ldr	r3, [pc, #60]	@ (80158a4 <ip4_route+0xdc>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801586c:	f003 0304 	and.w	r3, r3, #4
 8015870:	2b00      	cmp	r3, #0
 8015872:	d00a      	beq.n	801588a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015874:	4b0b      	ldr	r3, [pc, #44]	@ (80158a4 <ip4_route+0xdc>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	3304      	adds	r3, #4
 801587a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801587c:	2b00      	cmp	r3, #0
 801587e:	d004      	beq.n	801588a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	b2db      	uxtb	r3, r3
 8015886:	2b7f      	cmp	r3, #127	@ 0x7f
 8015888:	d101      	bne.n	801588e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801588a:	2300      	movs	r3, #0
 801588c:	e001      	b.n	8015892 <ip4_route+0xca>
  }

  return netif_default;
 801588e:	4b05      	ldr	r3, [pc, #20]	@ (80158a4 <ip4_route+0xdc>)
 8015890:	681b      	ldr	r3, [r3, #0]
}
 8015892:	4618      	mov	r0, r3
 8015894:	3714      	adds	r7, #20
 8015896:	46bd      	mov	sp, r7
 8015898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589c:	4770      	bx	lr
 801589e:	bf00      	nop
 80158a0:	200084f0 	.word	0x200084f0
 80158a4:	200084f4 	.word	0x200084f4

080158a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80158b6:	f003 0301 	and.w	r3, r3, #1
 80158ba:	b2db      	uxtb	r3, r3
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d016      	beq.n	80158ee <ip4_input_accept+0x46>
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	3304      	adds	r3, #4
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d011      	beq.n	80158ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80158ca:	4b0b      	ldr	r3, [pc, #44]	@ (80158f8 <ip4_input_accept+0x50>)
 80158cc:	695a      	ldr	r2, [r3, #20]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	3304      	adds	r3, #4
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d008      	beq.n	80158ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80158d8:	4b07      	ldr	r3, [pc, #28]	@ (80158f8 <ip4_input_accept+0x50>)
 80158da:	695b      	ldr	r3, [r3, #20]
 80158dc:	6879      	ldr	r1, [r7, #4]
 80158de:	4618      	mov	r0, r3
 80158e0:	f000 fa08 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 80158e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d001      	beq.n	80158ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80158ea:	2301      	movs	r3, #1
 80158ec:	e000      	b.n	80158f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80158ee:	2300      	movs	r3, #0
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3708      	adds	r7, #8
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	200055a0 	.word	0x200055a0

080158fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b086      	sub	sp, #24
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	091b      	lsrs	r3, r3, #4
 8015912:	b2db      	uxtb	r3, r3
 8015914:	2b04      	cmp	r3, #4
 8015916:	d004      	beq.n	8015922 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f7f8 f9e7 	bl	800dcec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801591e:	2300      	movs	r3, #0
 8015920:	e107      	b.n	8015b32 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	f003 030f 	and.w	r3, r3, #15
 801592a:	b2db      	uxtb	r3, r3
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	b2db      	uxtb	r3, r3
 8015930:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	885b      	ldrh	r3, [r3, #2]
 8015936:	b29b      	uxth	r3, r3
 8015938:	4618      	mov	r0, r3
 801593a:	f7f6 fd87 	bl	800c44c <lwip_htons>
 801593e:	4603      	mov	r3, r0
 8015940:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	891b      	ldrh	r3, [r3, #8]
 8015946:	89ba      	ldrh	r2, [r7, #12]
 8015948:	429a      	cmp	r2, r3
 801594a:	d204      	bcs.n	8015956 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801594c:	89bb      	ldrh	r3, [r7, #12]
 801594e:	4619      	mov	r1, r3
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f7f8 f845 	bl	800d9e0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	895b      	ldrh	r3, [r3, #10]
 801595a:	89fa      	ldrh	r2, [r7, #14]
 801595c:	429a      	cmp	r2, r3
 801595e:	d807      	bhi.n	8015970 <ip4_input+0x74>
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	891b      	ldrh	r3, [r3, #8]
 8015964:	89ba      	ldrh	r2, [r7, #12]
 8015966:	429a      	cmp	r2, r3
 8015968:	d802      	bhi.n	8015970 <ip4_input+0x74>
 801596a:	89fb      	ldrh	r3, [r7, #14]
 801596c:	2b13      	cmp	r3, #19
 801596e:	d804      	bhi.n	801597a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f7f8 f9bb 	bl	800dcec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015976:	2300      	movs	r3, #0
 8015978:	e0db      	b.n	8015b32 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	691b      	ldr	r3, [r3, #16]
 801597e:	4a6f      	ldr	r2, [pc, #444]	@ (8015b3c <ip4_input+0x240>)
 8015980:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	4a6d      	ldr	r2, [pc, #436]	@ (8015b3c <ip4_input+0x240>)
 8015988:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801598a:	4b6c      	ldr	r3, [pc, #432]	@ (8015b3c <ip4_input+0x240>)
 801598c:	695b      	ldr	r3, [r3, #20]
 801598e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015992:	2be0      	cmp	r3, #224	@ 0xe0
 8015994:	d112      	bne.n	80159bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801599c:	f003 0301 	and.w	r3, r3, #1
 80159a0:	b2db      	uxtb	r3, r3
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d007      	beq.n	80159b6 <ip4_input+0xba>
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	3304      	adds	r3, #4
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d002      	beq.n	80159b6 <ip4_input+0xba>
      netif = inp;
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	617b      	str	r3, [r7, #20]
 80159b4:	e02a      	b.n	8015a0c <ip4_input+0x110>
    } else {
      netif = NULL;
 80159b6:	2300      	movs	r3, #0
 80159b8:	617b      	str	r3, [r7, #20]
 80159ba:	e027      	b.n	8015a0c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80159bc:	6838      	ldr	r0, [r7, #0]
 80159be:	f7ff ff73 	bl	80158a8 <ip4_input_accept>
 80159c2:	4603      	mov	r3, r0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d002      	beq.n	80159ce <ip4_input+0xd2>
      netif = inp;
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	617b      	str	r3, [r7, #20]
 80159cc:	e01e      	b.n	8015a0c <ip4_input+0x110>
    } else {
      netif = NULL;
 80159ce:	2300      	movs	r3, #0
 80159d0:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80159d2:	4b5a      	ldr	r3, [pc, #360]	@ (8015b3c <ip4_input+0x240>)
 80159d4:	695b      	ldr	r3, [r3, #20]
 80159d6:	b2db      	uxtb	r3, r3
 80159d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80159da:	d017      	beq.n	8015a0c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80159dc:	4b58      	ldr	r3, [pc, #352]	@ (8015b40 <ip4_input+0x244>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	617b      	str	r3, [r7, #20]
 80159e2:	e00e      	b.n	8015a02 <ip4_input+0x106>
          if (netif == inp) {
 80159e4:	697a      	ldr	r2, [r7, #20]
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d006      	beq.n	80159fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80159ec:	6978      	ldr	r0, [r7, #20]
 80159ee:	f7ff ff5b 	bl	80158a8 <ip4_input_accept>
 80159f2:	4603      	mov	r3, r0
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d108      	bne.n	8015a0a <ip4_input+0x10e>
 80159f8:	e000      	b.n	80159fc <ip4_input+0x100>
            continue;
 80159fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80159fc:	697b      	ldr	r3, [r7, #20]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	617b      	str	r3, [r7, #20]
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d1ed      	bne.n	80159e4 <ip4_input+0xe8>
 8015a08:	e000      	b.n	8015a0c <ip4_input+0x110>
            break;
 8015a0a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8015b3c <ip4_input+0x240>)
 8015a0e:	691b      	ldr	r3, [r3, #16]
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	4618      	mov	r0, r3
 8015a14:	f000 f96e 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d105      	bne.n	8015a2a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015a1e:	4b47      	ldr	r3, [pc, #284]	@ (8015b3c <ip4_input+0x240>)
 8015a20:	691b      	ldr	r3, [r3, #16]
 8015a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a26:	2be0      	cmp	r3, #224	@ 0xe0
 8015a28:	d104      	bne.n	8015a34 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f7f8 f95e 	bl	800dcec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015a30:	2300      	movs	r3, #0
 8015a32:	e07e      	b.n	8015b32 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d104      	bne.n	8015a44 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f7f8 f956 	bl	800dcec <pbuf_free>
    return ERR_OK;
 8015a40:	2300      	movs	r3, #0
 8015a42:	e076      	b.n	8015b32 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	88db      	ldrh	r3, [r3, #6]
 8015a48:	b29b      	uxth	r3, r3
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015a50:	4013      	ands	r3, r2
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d00b      	beq.n	8015a6e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	f000 fc92 	bl	8016380 <ip4_reass>
 8015a5c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d101      	bne.n	8015a68 <ip4_input+0x16c>
      return ERR_OK;
 8015a64:	2300      	movs	r3, #0
 8015a66:	e064      	b.n	8015b32 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	685b      	ldr	r3, [r3, #4]
 8015a6c:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015a6e:	4a33      	ldr	r2, [pc, #204]	@ (8015b3c <ip4_input+0x240>)
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015a74:	4a31      	ldr	r2, [pc, #196]	@ (8015b3c <ip4_input+0x240>)
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015a7a:	4a30      	ldr	r2, [pc, #192]	@ (8015b3c <ip4_input+0x240>)
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	f003 030f 	and.w	r3, r3, #15
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	009b      	lsls	r3, r3, #2
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	461a      	mov	r2, r3
 8015a90:	4b2a      	ldr	r3, [pc, #168]	@ (8015b3c <ip4_input+0x240>)
 8015a92:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015a94:	89fb      	ldrh	r3, [r7, #14]
 8015a96:	4619      	mov	r1, r3
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f7f8 f8a1 	bl	800dbe0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	7a5b      	ldrb	r3, [r3, #9]
 8015aa2:	2b11      	cmp	r3, #17
 8015aa4:	d006      	beq.n	8015ab4 <ip4_input+0x1b8>
 8015aa6:	2b11      	cmp	r3, #17
 8015aa8:	dc13      	bgt.n	8015ad2 <ip4_input+0x1d6>
 8015aaa:	2b01      	cmp	r3, #1
 8015aac:	d00c      	beq.n	8015ac8 <ip4_input+0x1cc>
 8015aae:	2b06      	cmp	r3, #6
 8015ab0:	d005      	beq.n	8015abe <ip4_input+0x1c2>
 8015ab2:	e00e      	b.n	8015ad2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015ab4:	6839      	ldr	r1, [r7, #0]
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f7fd ff20 	bl	80138fc <udp_input>
        break;
 8015abc:	e026      	b.n	8015b0c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015abe:	6839      	ldr	r1, [r7, #0]
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f7f9 ff53 	bl	800f96c <tcp_input>
        break;
 8015ac6:	e021      	b.n	8015b0c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f7ff fc5c 	bl	8015388 <icmp_input>
        break;
 8015ad0:	e01c      	b.n	8015b0c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8015b3c <ip4_input+0x240>)
 8015ad4:	695b      	ldr	r3, [r3, #20]
 8015ad6:	6979      	ldr	r1, [r7, #20]
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f000 f90b 	bl	8015cf4 <ip4_addr_isbroadcast_u32>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d10f      	bne.n	8015b04 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ae4:	4b15      	ldr	r3, [pc, #84]	@ (8015b3c <ip4_input+0x240>)
 8015ae6:	695b      	ldr	r3, [r3, #20]
 8015ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015aec:	2be0      	cmp	r3, #224	@ 0xe0
 8015aee:	d009      	beq.n	8015b04 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015af4:	4619      	mov	r1, r3
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7f8 f8e5 	bl	800dcc6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015afc:	2102      	movs	r1, #2
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7ff fd98 	bl	8015634 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f7f8 f8f1 	bl	800dcec <pbuf_free>
        break;
 8015b0a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8015b3c <ip4_input+0x240>)
 8015b0e:	2200      	movs	r2, #0
 8015b10:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015b12:	4b0a      	ldr	r3, [pc, #40]	@ (8015b3c <ip4_input+0x240>)
 8015b14:	2200      	movs	r2, #0
 8015b16:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015b18:	4b08      	ldr	r3, [pc, #32]	@ (8015b3c <ip4_input+0x240>)
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015b1e:	4b07      	ldr	r3, [pc, #28]	@ (8015b3c <ip4_input+0x240>)
 8015b20:	2200      	movs	r2, #0
 8015b22:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015b24:	4b05      	ldr	r3, [pc, #20]	@ (8015b3c <ip4_input+0x240>)
 8015b26:	2200      	movs	r2, #0
 8015b28:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015b2a:	4b04      	ldr	r3, [pc, #16]	@ (8015b3c <ip4_input+0x240>)
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015b30:	2300      	movs	r3, #0
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3718      	adds	r7, #24
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop
 8015b3c:	200055a0 	.word	0x200055a0
 8015b40:	200084f0 	.word	0x200084f0

08015b44 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b08a      	sub	sp, #40	@ 0x28
 8015b48:	af04      	add	r7, sp, #16
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	60b9      	str	r1, [r7, #8]
 8015b4e:	607a      	str	r2, [r7, #4]
 8015b50:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d009      	beq.n	8015b70 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d003      	beq.n	8015b6a <ip4_output_if+0x26>
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d102      	bne.n	8015b70 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b6c:	3304      	adds	r3, #4
 8015b6e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015b70:	78fa      	ldrb	r2, [r7, #3]
 8015b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b74:	9302      	str	r3, [sp, #8]
 8015b76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015b7a:	9301      	str	r3, [sp, #4]
 8015b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b80:	9300      	str	r3, [sp, #0]
 8015b82:	4613      	mov	r3, r2
 8015b84:	687a      	ldr	r2, [r7, #4]
 8015b86:	6979      	ldr	r1, [r7, #20]
 8015b88:	68f8      	ldr	r0, [r7, #12]
 8015b8a:	f000 f805 	bl	8015b98 <ip4_output_if_src>
 8015b8e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	3718      	adds	r7, #24
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}

08015b98 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b088      	sub	sp, #32
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	60f8      	str	r0, [r7, #12]
 8015ba0:	60b9      	str	r1, [r7, #8]
 8015ba2:	607a      	str	r2, [r7, #4]
 8015ba4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	7b9b      	ldrb	r3, [r3, #14]
 8015baa:	2b01      	cmp	r3, #1
 8015bac:	d006      	beq.n	8015bbc <ip4_output_if_src+0x24>
 8015bae:	4b4b      	ldr	r3, [pc, #300]	@ (8015cdc <ip4_output_if_src+0x144>)
 8015bb0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015bb4:	494a      	ldr	r1, [pc, #296]	@ (8015ce0 <ip4_output_if_src+0x148>)
 8015bb6:	484b      	ldr	r0, [pc, #300]	@ (8015ce4 <ip4_output_if_src+0x14c>)
 8015bb8:	f001 fe9a 	bl	80178f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d060      	beq.n	8015c84 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015bc2:	2314      	movs	r3, #20
 8015bc4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015bc6:	2114      	movs	r1, #20
 8015bc8:	68f8      	ldr	r0, [r7, #12]
 8015bca:	f7f7 fff9 	bl	800dbc0 <pbuf_add_header>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d002      	beq.n	8015bda <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015bd4:	f06f 0301 	mvn.w	r3, #1
 8015bd8:	e07c      	b.n	8015cd4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	895b      	ldrh	r3, [r3, #10]
 8015be4:	2b13      	cmp	r3, #19
 8015be6:	d806      	bhi.n	8015bf6 <ip4_output_if_src+0x5e>
 8015be8:	4b3c      	ldr	r3, [pc, #240]	@ (8015cdc <ip4_output_if_src+0x144>)
 8015bea:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015bee:	493e      	ldr	r1, [pc, #248]	@ (8015ce8 <ip4_output_if_src+0x150>)
 8015bf0:	483c      	ldr	r0, [pc, #240]	@ (8015ce4 <ip4_output_if_src+0x14c>)
 8015bf2:	f001 fe7d 	bl	80178f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015bf6:	69fb      	ldr	r3, [r7, #28]
 8015bf8:	78fa      	ldrb	r2, [r7, #3]
 8015bfa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015bfc:	69fb      	ldr	r3, [r7, #28]
 8015bfe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015c02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015c0c:	8b7b      	ldrh	r3, [r7, #26]
 8015c0e:	089b      	lsrs	r3, r3, #2
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	b2db      	uxtb	r3, r3
 8015c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c18:	b2da      	uxtb	r2, r3
 8015c1a:	69fb      	ldr	r3, [r7, #28]
 8015c1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015c1e:	69fb      	ldr	r3, [r7, #28]
 8015c20:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015c24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	891b      	ldrh	r3, [r3, #8]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7f6 fc0e 	bl	800c44c <lwip_htons>
 8015c30:	4603      	mov	r3, r0
 8015c32:	461a      	mov	r2, r3
 8015c34:	69fb      	ldr	r3, [r7, #28]
 8015c36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015c38:	69fb      	ldr	r3, [r7, #28]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	719a      	strb	r2, [r3, #6]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015c42:	4b2a      	ldr	r3, [pc, #168]	@ (8015cec <ip4_output_if_src+0x154>)
 8015c44:	881b      	ldrh	r3, [r3, #0]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7f6 fc00 	bl	800c44c <lwip_htons>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	461a      	mov	r2, r3
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015c54:	4b25      	ldr	r3, [pc, #148]	@ (8015cec <ip4_output_if_src+0x154>)
 8015c56:	881b      	ldrh	r3, [r3, #0]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	4b23      	ldr	r3, [pc, #140]	@ (8015cec <ip4_output_if_src+0x154>)
 8015c5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d104      	bne.n	8015c70 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015c66:	4b22      	ldr	r3, [pc, #136]	@ (8015cf0 <ip4_output_if_src+0x158>)
 8015c68:	681a      	ldr	r2, [r3, #0]
 8015c6a:	69fb      	ldr	r3, [r7, #28]
 8015c6c:	60da      	str	r2, [r3, #12]
 8015c6e:	e003      	b.n	8015c78 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	69fb      	ldr	r3, [r7, #28]
 8015c76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015c78:	69fb      	ldr	r3, [r7, #28]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	729a      	strb	r2, [r3, #10]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	72da      	strb	r2, [r3, #11]
 8015c82:	e00f      	b.n	8015ca4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	895b      	ldrh	r3, [r3, #10]
 8015c88:	2b13      	cmp	r3, #19
 8015c8a:	d802      	bhi.n	8015c92 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015c8c:	f06f 0301 	mvn.w	r3, #1
 8015c90:	e020      	b.n	8015cd4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	685b      	ldr	r3, [r3, #4]
 8015c96:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	691b      	ldr	r3, [r3, #16]
 8015c9c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015c9e:	f107 0314 	add.w	r3, r7, #20
 8015ca2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ca6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d00c      	beq.n	8015cc6 <ip4_output_if_src+0x12e>
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	891a      	ldrh	r2, [r3, #8]
 8015cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d906      	bls.n	8015cc6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015cbc:	68f8      	ldr	r0, [r7, #12]
 8015cbe:	f000 fd53 	bl	8016768 <ip4_frag>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	e006      	b.n	8015cd4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cc8:	695b      	ldr	r3, [r3, #20]
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	68f9      	ldr	r1, [r7, #12]
 8015cce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015cd0:	4798      	blx	r3
 8015cd2:	4603      	mov	r3, r0
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3720      	adds	r7, #32
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	0801b904 	.word	0x0801b904
 8015ce0:	0801b938 	.word	0x0801b938
 8015ce4:	0801b944 	.word	0x0801b944
 8015ce8:	0801b96c 	.word	0x0801b96c
 8015cec:	20008652 	.word	0x20008652
 8015cf0:	0801bfdc 	.word	0x0801bfdc

08015cf4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b085      	sub	sp, #20
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015d08:	d002      	beq.n	8015d10 <ip4_addr_isbroadcast_u32+0x1c>
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d101      	bne.n	8015d14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015d10:	2301      	movs	r3, #1
 8015d12:	e02a      	b.n	8015d6a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015d1a:	f003 0302 	and.w	r3, r3, #2
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d101      	bne.n	8015d26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015d22:	2300      	movs	r3, #0
 8015d24:	e021      	b.n	8015d6a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	3304      	adds	r3, #4
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	429a      	cmp	r2, r3
 8015d30:	d101      	bne.n	8015d36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015d32:	2300      	movs	r3, #0
 8015d34:	e019      	b.n	8015d6a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015d36:	68fa      	ldr	r2, [r7, #12]
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	3304      	adds	r3, #4
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	405a      	eors	r2, r3
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	3308      	adds	r3, #8
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	4013      	ands	r3, r2
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d10d      	bne.n	8015d68 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	3308      	adds	r3, #8
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	43da      	mvns	r2, r3
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	3308      	adds	r3, #8
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d101      	bne.n	8015d68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015d64:	2301      	movs	r3, #1
 8015d66:	e000      	b.n	8015d6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015d68:	2300      	movs	r3, #0
  }
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3714      	adds	r7, #20
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d74:	4770      	bx	lr
	...

08015d78 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b084      	sub	sp, #16
 8015d7c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015d82:	4b12      	ldr	r3, [pc, #72]	@ (8015dcc <ip_reass_tmr+0x54>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015d88:	e018      	b.n	8015dbc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	7fdb      	ldrb	r3, [r3, #31]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d00b      	beq.n	8015daa <ip_reass_tmr+0x32>
      r->timer--;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	7fdb      	ldrb	r3, [r3, #31]
 8015d96:	3b01      	subs	r3, #1
 8015d98:	b2da      	uxtb	r2, r3
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	60fb      	str	r3, [r7, #12]
 8015da8:	e008      	b.n	8015dbc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015db4:	68b9      	ldr	r1, [r7, #8]
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 f80a 	bl	8015dd0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d1e3      	bne.n	8015d8a <ip_reass_tmr+0x12>
    }
  }
}
 8015dc2:	bf00      	nop
 8015dc4:	bf00      	nop
 8015dc6:	3710      	adds	r7, #16
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	20008654 	.word	0x20008654

08015dd0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b088      	sub	sp, #32
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015dde:	683a      	ldr	r2, [r7, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d105      	bne.n	8015df2 <ip_reass_free_complete_datagram+0x22>
 8015de6:	4b45      	ldr	r3, [pc, #276]	@ (8015efc <ip_reass_free_complete_datagram+0x12c>)
 8015de8:	22ab      	movs	r2, #171	@ 0xab
 8015dea:	4945      	ldr	r1, [pc, #276]	@ (8015f00 <ip_reass_free_complete_datagram+0x130>)
 8015dec:	4845      	ldr	r0, [pc, #276]	@ (8015f04 <ip_reass_free_complete_datagram+0x134>)
 8015dee:	f001 fd7f 	bl	80178f0 <iprintf>
  if (prev != NULL) {
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d00a      	beq.n	8015e0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	687a      	ldr	r2, [r7, #4]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d005      	beq.n	8015e0e <ip_reass_free_complete_datagram+0x3e>
 8015e02:	4b3e      	ldr	r3, [pc, #248]	@ (8015efc <ip_reass_free_complete_datagram+0x12c>)
 8015e04:	22ad      	movs	r2, #173	@ 0xad
 8015e06:	4940      	ldr	r1, [pc, #256]	@ (8015f08 <ip_reass_free_complete_datagram+0x138>)
 8015e08:	483e      	ldr	r0, [pc, #248]	@ (8015f04 <ip_reass_free_complete_datagram+0x134>)
 8015e0a:	f001 fd71 	bl	80178f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	685b      	ldr	r3, [r3, #4]
 8015e14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015e16:	697b      	ldr	r3, [r7, #20]
 8015e18:	889b      	ldrh	r3, [r3, #4]
 8015e1a:	b29b      	uxth	r3, r3
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d12a      	bne.n	8015e76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	681a      	ldr	r2, [r3, #0]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015e2e:	69bb      	ldr	r3, [r7, #24]
 8015e30:	6858      	ldr	r0, [r3, #4]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	3308      	adds	r3, #8
 8015e36:	2214      	movs	r2, #20
 8015e38:	4619      	mov	r1, r3
 8015e3a:	f001 ff2e 	bl	8017c9a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015e3e:	2101      	movs	r1, #1
 8015e40:	69b8      	ldr	r0, [r7, #24]
 8015e42:	f7ff fc07 	bl	8015654 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015e46:	69b8      	ldr	r0, [r7, #24]
 8015e48:	f7f7 ffd8 	bl	800ddfc <pbuf_clen>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e50:	8bfa      	ldrh	r2, [r7, #30]
 8015e52:	8a7b      	ldrh	r3, [r7, #18]
 8015e54:	4413      	add	r3, r2
 8015e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015e5a:	db05      	blt.n	8015e68 <ip_reass_free_complete_datagram+0x98>
 8015e5c:	4b27      	ldr	r3, [pc, #156]	@ (8015efc <ip_reass_free_complete_datagram+0x12c>)
 8015e5e:	22bc      	movs	r2, #188	@ 0xbc
 8015e60:	492a      	ldr	r1, [pc, #168]	@ (8015f0c <ip_reass_free_complete_datagram+0x13c>)
 8015e62:	4828      	ldr	r0, [pc, #160]	@ (8015f04 <ip_reass_free_complete_datagram+0x134>)
 8015e64:	f001 fd44 	bl	80178f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e68:	8bfa      	ldrh	r2, [r7, #30]
 8015e6a:	8a7b      	ldrh	r3, [r7, #18]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015e70:	69b8      	ldr	r0, [r7, #24]
 8015e72:	f7f7 ff3b 	bl	800dcec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	685b      	ldr	r3, [r3, #4]
 8015e7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015e7c:	e01f      	b.n	8015ebe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015e7e:	69bb      	ldr	r3, [r7, #24]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015e84:	69bb      	ldr	r3, [r7, #24]
 8015e86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	f7f7 ffb4 	bl	800ddfc <pbuf_clen>
 8015e94:	4603      	mov	r3, r0
 8015e96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e98:	8bfa      	ldrh	r2, [r7, #30]
 8015e9a:	8a7b      	ldrh	r3, [r7, #18]
 8015e9c:	4413      	add	r3, r2
 8015e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015ea2:	db05      	blt.n	8015eb0 <ip_reass_free_complete_datagram+0xe0>
 8015ea4:	4b15      	ldr	r3, [pc, #84]	@ (8015efc <ip_reass_free_complete_datagram+0x12c>)
 8015ea6:	22cc      	movs	r2, #204	@ 0xcc
 8015ea8:	4918      	ldr	r1, [pc, #96]	@ (8015f0c <ip_reass_free_complete_datagram+0x13c>)
 8015eaa:	4816      	ldr	r0, [pc, #88]	@ (8015f04 <ip_reass_free_complete_datagram+0x134>)
 8015eac:	f001 fd20 	bl	80178f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015eb0:	8bfa      	ldrh	r2, [r7, #30]
 8015eb2:	8a7b      	ldrh	r3, [r7, #18]
 8015eb4:	4413      	add	r3, r2
 8015eb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015eb8:	68f8      	ldr	r0, [r7, #12]
 8015eba:	f7f7 ff17 	bl	800dcec <pbuf_free>
  while (p != NULL) {
 8015ebe:	69bb      	ldr	r3, [r7, #24]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d1dc      	bne.n	8015e7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015ec4:	6839      	ldr	r1, [r7, #0]
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f000 f8c2 	bl	8016050 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015ecc:	4b10      	ldr	r3, [pc, #64]	@ (8015f10 <ip_reass_free_complete_datagram+0x140>)
 8015ece:	881b      	ldrh	r3, [r3, #0]
 8015ed0:	8bfa      	ldrh	r2, [r7, #30]
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d905      	bls.n	8015ee2 <ip_reass_free_complete_datagram+0x112>
 8015ed6:	4b09      	ldr	r3, [pc, #36]	@ (8015efc <ip_reass_free_complete_datagram+0x12c>)
 8015ed8:	22d2      	movs	r2, #210	@ 0xd2
 8015eda:	490e      	ldr	r1, [pc, #56]	@ (8015f14 <ip_reass_free_complete_datagram+0x144>)
 8015edc:	4809      	ldr	r0, [pc, #36]	@ (8015f04 <ip_reass_free_complete_datagram+0x134>)
 8015ede:	f001 fd07 	bl	80178f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8015f10 <ip_reass_free_complete_datagram+0x140>)
 8015ee4:	881a      	ldrh	r2, [r3, #0]
 8015ee6:	8bfb      	ldrh	r3, [r7, #30]
 8015ee8:	1ad3      	subs	r3, r2, r3
 8015eea:	b29a      	uxth	r2, r3
 8015eec:	4b08      	ldr	r3, [pc, #32]	@ (8015f10 <ip_reass_free_complete_datagram+0x140>)
 8015eee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015ef0:	8bfb      	ldrh	r3, [r7, #30]
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3720      	adds	r7, #32
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	0801b99c 	.word	0x0801b99c
 8015f00:	0801b9d8 	.word	0x0801b9d8
 8015f04:	0801b9e4 	.word	0x0801b9e4
 8015f08:	0801ba0c 	.word	0x0801ba0c
 8015f0c:	0801ba20 	.word	0x0801ba20
 8015f10:	20008658 	.word	0x20008658
 8015f14:	0801ba40 	.word	0x0801ba40

08015f18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b08a      	sub	sp, #40	@ 0x28
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015f22:	2300      	movs	r3, #0
 8015f24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015f26:	2300      	movs	r3, #0
 8015f28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015f32:	2300      	movs	r3, #0
 8015f34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015f36:	4b28      	ldr	r3, [pc, #160]	@ (8015fd8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015f3c:	e030      	b.n	8015fa0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f40:	695a      	ldr	r2, [r3, #20]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	68db      	ldr	r3, [r3, #12]
 8015f46:	429a      	cmp	r2, r3
 8015f48:	d10c      	bne.n	8015f64 <ip_reass_remove_oldest_datagram+0x4c>
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f4c:	699a      	ldr	r2, [r3, #24]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	691b      	ldr	r3, [r3, #16]
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d106      	bne.n	8015f64 <ip_reass_remove_oldest_datagram+0x4c>
 8015f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f58:	899a      	ldrh	r2, [r3, #12]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	889b      	ldrh	r3, [r3, #4]
 8015f5e:	b29b      	uxth	r3, r3
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d014      	beq.n	8015f8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	3301      	adds	r3, #1
 8015f68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015f6a:	6a3b      	ldr	r3, [r7, #32]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d104      	bne.n	8015f7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	61bb      	str	r3, [r7, #24]
 8015f78:	e009      	b.n	8015f8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f7c:	7fda      	ldrb	r2, [r3, #31]
 8015f7e:	6a3b      	ldr	r3, [r7, #32]
 8015f80:	7fdb      	ldrb	r3, [r3, #31]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d803      	bhi.n	8015f8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d001      	beq.n	8015f9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d1cb      	bne.n	8015f3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015fa6:	6a3b      	ldr	r3, [r7, #32]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d008      	beq.n	8015fbe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015fac:	69b9      	ldr	r1, [r7, #24]
 8015fae:	6a38      	ldr	r0, [r7, #32]
 8015fb0:	f7ff ff0e 	bl	8015dd0 <ip_reass_free_complete_datagram>
 8015fb4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015fb6:	697a      	ldr	r2, [r7, #20]
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	4413      	add	r3, r2
 8015fbc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015fbe:	697a      	ldr	r2, [r7, #20]
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	da02      	bge.n	8015fcc <ip_reass_remove_oldest_datagram+0xb4>
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	2b01      	cmp	r3, #1
 8015fca:	dcac      	bgt.n	8015f26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015fcc:	697b      	ldr	r3, [r7, #20]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3728      	adds	r7, #40	@ 0x28
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	20008654 	.word	0x20008654

08015fdc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015fe6:	2004      	movs	r0, #4
 8015fe8:	f7f6 fea4 	bl	800cd34 <memp_malloc>
 8015fec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d110      	bne.n	8016016 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015ff4:	6839      	ldr	r1, [r7, #0]
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f7ff ff8e 	bl	8015f18 <ip_reass_remove_oldest_datagram>
 8015ffc:	4602      	mov	r2, r0
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	4293      	cmp	r3, r2
 8016002:	dc03      	bgt.n	801600c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016004:	2004      	movs	r0, #4
 8016006:	f7f6 fe95 	bl	800cd34 <memp_malloc>
 801600a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d101      	bne.n	8016016 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016012:	2300      	movs	r3, #0
 8016014:	e016      	b.n	8016044 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016016:	2220      	movs	r2, #32
 8016018:	2100      	movs	r1, #0
 801601a:	68f8      	ldr	r0, [r7, #12]
 801601c:	f001 fdc8 	bl	8017bb0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	220f      	movs	r2, #15
 8016024:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016026:	4b09      	ldr	r3, [pc, #36]	@ (801604c <ip_reass_enqueue_new_datagram+0x70>)
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801602e:	4a07      	ldr	r2, [pc, #28]	@ (801604c <ip_reass_enqueue_new_datagram+0x70>)
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	3308      	adds	r3, #8
 8016038:	2214      	movs	r2, #20
 801603a:	6879      	ldr	r1, [r7, #4]
 801603c:	4618      	mov	r0, r3
 801603e:	f001 fe2c 	bl	8017c9a <memcpy>
  return ipr;
 8016042:	68fb      	ldr	r3, [r7, #12]
}
 8016044:	4618      	mov	r0, r3
 8016046:	3710      	adds	r7, #16
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}
 801604c:	20008654 	.word	0x20008654

08016050 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801605a:	4b10      	ldr	r3, [pc, #64]	@ (801609c <ip_reass_dequeue_datagram+0x4c>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	429a      	cmp	r2, r3
 8016062:	d104      	bne.n	801606e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4a0c      	ldr	r2, [pc, #48]	@ (801609c <ip_reass_dequeue_datagram+0x4c>)
 801606a:	6013      	str	r3, [r2, #0]
 801606c:	e00d      	b.n	801608a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d106      	bne.n	8016082 <ip_reass_dequeue_datagram+0x32>
 8016074:	4b0a      	ldr	r3, [pc, #40]	@ (80160a0 <ip_reass_dequeue_datagram+0x50>)
 8016076:	f240 1245 	movw	r2, #325	@ 0x145
 801607a:	490a      	ldr	r1, [pc, #40]	@ (80160a4 <ip_reass_dequeue_datagram+0x54>)
 801607c:	480a      	ldr	r0, [pc, #40]	@ (80160a8 <ip_reass_dequeue_datagram+0x58>)
 801607e:	f001 fc37 	bl	80178f0 <iprintf>
    prev->next = ipr->next;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801608a:	6879      	ldr	r1, [r7, #4]
 801608c:	2004      	movs	r0, #4
 801608e:	f7f6 fec1 	bl	800ce14 <memp_free>
}
 8016092:	bf00      	nop
 8016094:	3708      	adds	r7, #8
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	20008654 	.word	0x20008654
 80160a0:	0801b99c 	.word	0x0801b99c
 80160a4:	0801ba64 	.word	0x0801ba64
 80160a8:	0801b9e4 	.word	0x0801b9e4

080160ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b08c      	sub	sp, #48	@ 0x30
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80160b8:	2300      	movs	r3, #0
 80160ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80160bc:	2301      	movs	r3, #1
 80160be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80160c6:	69fb      	ldr	r3, [r7, #28]
 80160c8:	885b      	ldrh	r3, [r3, #2]
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	4618      	mov	r0, r3
 80160ce:	f7f6 f9bd 	bl	800c44c <lwip_htons>
 80160d2:	4603      	mov	r3, r0
 80160d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80160d6:	69fb      	ldr	r3, [r7, #28]
 80160d8:	781b      	ldrb	r3, [r3, #0]
 80160da:	f003 030f 	and.w	r3, r3, #15
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	009b      	lsls	r3, r3, #2
 80160e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80160e4:	7e7b      	ldrb	r3, [r7, #25]
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	8b7a      	ldrh	r2, [r7, #26]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	d202      	bcs.n	80160f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80160f2:	e135      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80160f4:	7e7b      	ldrb	r3, [r7, #25]
 80160f6:	b29b      	uxth	r3, r3
 80160f8:	8b7a      	ldrh	r2, [r7, #26]
 80160fa:	1ad3      	subs	r3, r2, r3
 80160fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80160fe:	69fb      	ldr	r3, [r7, #28]
 8016100:	88db      	ldrh	r3, [r3, #6]
 8016102:	b29b      	uxth	r3, r3
 8016104:	4618      	mov	r0, r3
 8016106:	f7f6 f9a1 	bl	800c44c <lwip_htons>
 801610a:	4603      	mov	r3, r0
 801610c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016110:	b29b      	uxth	r3, r3
 8016112:	00db      	lsls	r3, r3, #3
 8016114:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801611e:	2200      	movs	r2, #0
 8016120:	701a      	strb	r2, [r3, #0]
 8016122:	2200      	movs	r2, #0
 8016124:	705a      	strb	r2, [r3, #1]
 8016126:	2200      	movs	r2, #0
 8016128:	709a      	strb	r2, [r3, #2]
 801612a:	2200      	movs	r2, #0
 801612c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801612e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016130:	8afa      	ldrh	r2, [r7, #22]
 8016132:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016134:	8afa      	ldrh	r2, [r7, #22]
 8016136:	8b7b      	ldrh	r3, [r7, #26]
 8016138:	4413      	add	r3, r2
 801613a:	b29a      	uxth	r2, r3
 801613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801613e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016142:	88db      	ldrh	r3, [r3, #6]
 8016144:	b29b      	uxth	r3, r3
 8016146:	8afa      	ldrh	r2, [r7, #22]
 8016148:	429a      	cmp	r2, r3
 801614a:	d902      	bls.n	8016152 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801614c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016150:	e106      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	685b      	ldr	r3, [r3, #4]
 8016156:	627b      	str	r3, [r7, #36]	@ 0x24
 8016158:	e068      	b.n	801622c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016162:	889b      	ldrh	r3, [r3, #4]
 8016164:	b29a      	uxth	r2, r3
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	889b      	ldrh	r3, [r3, #4]
 801616a:	b29b      	uxth	r3, r3
 801616c:	429a      	cmp	r2, r3
 801616e:	d235      	bcs.n	80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016174:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016178:	2b00      	cmp	r3, #0
 801617a:	d020      	beq.n	80161be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801617c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801617e:	889b      	ldrh	r3, [r3, #4]
 8016180:	b29a      	uxth	r2, r3
 8016182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016184:	88db      	ldrh	r3, [r3, #6]
 8016186:	b29b      	uxth	r3, r3
 8016188:	429a      	cmp	r2, r3
 801618a:	d307      	bcc.n	801619c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801618e:	88db      	ldrh	r3, [r3, #6]
 8016190:	b29a      	uxth	r2, r3
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	889b      	ldrh	r3, [r3, #4]
 8016196:	b29b      	uxth	r3, r3
 8016198:	429a      	cmp	r2, r3
 801619a:	d902      	bls.n	80161a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801619c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161a0:	e0de      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80161a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161a4:	68ba      	ldr	r2, [r7, #8]
 80161a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80161a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161aa:	88db      	ldrh	r3, [r3, #6]
 80161ac:	b29a      	uxth	r2, r3
 80161ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161b0:	889b      	ldrh	r3, [r3, #4]
 80161b2:	b29b      	uxth	r3, r3
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d03d      	beq.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80161b8:	2300      	movs	r3, #0
 80161ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80161bc:	e03a      	b.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80161be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161c0:	88db      	ldrh	r3, [r3, #6]
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	889b      	ldrh	r3, [r3, #4]
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d902      	bls.n	80161d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161d2:	e0c5      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	68ba      	ldr	r2, [r7, #8]
 80161d8:	605a      	str	r2, [r3, #4]
      break;
 80161da:	e02b      	b.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80161dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161de:	889b      	ldrh	r3, [r3, #4]
 80161e0:	b29a      	uxth	r2, r3
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	889b      	ldrh	r3, [r3, #4]
 80161e6:	b29b      	uxth	r3, r3
 80161e8:	429a      	cmp	r2, r3
 80161ea:	d102      	bne.n	80161f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161f0:	e0b6      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80161f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f4:	889b      	ldrh	r3, [r3, #4]
 80161f6:	b29a      	uxth	r2, r3
 80161f8:	693b      	ldr	r3, [r7, #16]
 80161fa:	88db      	ldrh	r3, [r3, #6]
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	429a      	cmp	r2, r3
 8016200:	d202      	bcs.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016206:	e0ab      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801620a:	2b00      	cmp	r3, #0
 801620c:	d009      	beq.n	8016222 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016210:	88db      	ldrh	r3, [r3, #6]
 8016212:	b29a      	uxth	r2, r3
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	889b      	ldrh	r3, [r3, #4]
 8016218:	b29b      	uxth	r3, r3
 801621a:	429a      	cmp	r2, r3
 801621c:	d001      	beq.n	8016222 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801621e:	2300      	movs	r3, #0
 8016220:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801622e:	2b00      	cmp	r3, #0
 8016230:	d193      	bne.n	801615a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016232:	e000      	b.n	8016236 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016234:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016238:	2b00      	cmp	r3, #0
 801623a:	d12d      	bne.n	8016298 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801623e:	2b00      	cmp	r3, #0
 8016240:	d01c      	beq.n	801627c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016244:	88db      	ldrh	r3, [r3, #6]
 8016246:	b29a      	uxth	r2, r3
 8016248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801624a:	889b      	ldrh	r3, [r3, #4]
 801624c:	b29b      	uxth	r3, r3
 801624e:	429a      	cmp	r2, r3
 8016250:	d906      	bls.n	8016260 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016252:	4b45      	ldr	r3, [pc, #276]	@ (8016368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016254:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016258:	4944      	ldr	r1, [pc, #272]	@ (801636c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801625a:	4845      	ldr	r0, [pc, #276]	@ (8016370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801625c:	f001 fb48 	bl	80178f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016262:	68ba      	ldr	r2, [r7, #8]
 8016264:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016268:	88db      	ldrh	r3, [r3, #6]
 801626a:	b29a      	uxth	r2, r3
 801626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801626e:	889b      	ldrh	r3, [r3, #4]
 8016270:	b29b      	uxth	r3, r3
 8016272:	429a      	cmp	r2, r3
 8016274:	d010      	beq.n	8016298 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016276:	2300      	movs	r3, #0
 8016278:	623b      	str	r3, [r7, #32]
 801627a:	e00d      	b.n	8016298 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d006      	beq.n	8016292 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016284:	4b38      	ldr	r3, [pc, #224]	@ (8016368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016286:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801628a:	493a      	ldr	r1, [pc, #232]	@ (8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801628c:	4838      	ldr	r0, [pc, #224]	@ (8016370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801628e:	f001 fb2f 	bl	80178f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	68ba      	ldr	r2, [r7, #8]
 8016296:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d105      	bne.n	80162aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	7f9b      	ldrb	r3, [r3, #30]
 80162a2:	f003 0301 	and.w	r3, r3, #1
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d059      	beq.n	801635e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80162aa:	6a3b      	ldr	r3, [r7, #32]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d04f      	beq.n	8016350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	685b      	ldr	r3, [r3, #4]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d006      	beq.n	80162c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	685b      	ldr	r3, [r3, #4]
 80162be:	889b      	ldrh	r3, [r3, #4]
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d002      	beq.n	80162cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	623b      	str	r3, [r7, #32]
 80162ca:	e041      	b.n	8016350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80162cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80162d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80162d6:	e012      	b.n	80162fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80162d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80162de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162e0:	88db      	ldrh	r3, [r3, #6]
 80162e2:	b29a      	uxth	r2, r3
 80162e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e6:	889b      	ldrh	r3, [r3, #4]
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d002      	beq.n	80162f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80162ee:	2300      	movs	r3, #0
 80162f0:	623b      	str	r3, [r7, #32]
            break;
 80162f2:	e007      	b.n	8016304 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80162f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162f6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80162f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80162fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016300:	2b00      	cmp	r3, #0
 8016302:	d1e9      	bne.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016304:	6a3b      	ldr	r3, [r7, #32]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d022      	beq.n	8016350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d106      	bne.n	8016320 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016312:	4b15      	ldr	r3, [pc, #84]	@ (8016368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016314:	f240 12df 	movw	r2, #479	@ 0x1df
 8016318:	4917      	ldr	r1, [pc, #92]	@ (8016378 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801631a:	4815      	ldr	r0, [pc, #84]	@ (8016370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801631c:	f001 fae8 	bl	80178f0 <iprintf>
          LWIP_ASSERT("sanity check",
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	685b      	ldr	r3, [r3, #4]
 8016326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016328:	429a      	cmp	r2, r3
 801632a:	d106      	bne.n	801633a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801632c:	4b0e      	ldr	r3, [pc, #56]	@ (8016368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801632e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016332:	4911      	ldr	r1, [pc, #68]	@ (8016378 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016334:	480e      	ldr	r0, [pc, #56]	@ (8016370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016336:	f001 fadb 	bl	80178f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801633a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d006      	beq.n	8016350 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016342:	4b09      	ldr	r3, [pc, #36]	@ (8016368 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016344:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016348:	490c      	ldr	r1, [pc, #48]	@ (801637c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801634a:	4809      	ldr	r0, [pc, #36]	@ (8016370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801634c:	f001 fad0 	bl	80178f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016350:	6a3b      	ldr	r3, [r7, #32]
 8016352:	2b00      	cmp	r3, #0
 8016354:	bf14      	ite	ne
 8016356:	2301      	movne	r3, #1
 8016358:	2300      	moveq	r3, #0
 801635a:	b2db      	uxtb	r3, r3
 801635c:	e000      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801635e:	2300      	movs	r3, #0
}
 8016360:	4618      	mov	r0, r3
 8016362:	3730      	adds	r7, #48	@ 0x30
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	0801b99c 	.word	0x0801b99c
 801636c:	0801ba80 	.word	0x0801ba80
 8016370:	0801b9e4 	.word	0x0801b9e4
 8016374:	0801baa0 	.word	0x0801baa0
 8016378:	0801bad8 	.word	0x0801bad8
 801637c:	0801bae8 	.word	0x0801bae8

08016380 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b08e      	sub	sp, #56	@ 0x38
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	f003 030f 	and.w	r3, r3, #15
 8016396:	b2db      	uxtb	r3, r3
 8016398:	009b      	lsls	r3, r3, #2
 801639a:	b2db      	uxtb	r3, r3
 801639c:	2b14      	cmp	r3, #20
 801639e:	f040 8171 	bne.w	8016684 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80163a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163a4:	88db      	ldrh	r3, [r3, #6]
 80163a6:	b29b      	uxth	r3, r3
 80163a8:	4618      	mov	r0, r3
 80163aa:	f7f6 f84f 	bl	800c44c <lwip_htons>
 80163ae:	4603      	mov	r3, r0
 80163b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163b4:	b29b      	uxth	r3, r3
 80163b6:	00db      	lsls	r3, r3, #3
 80163b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80163ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163bc:	885b      	ldrh	r3, [r3, #2]
 80163be:	b29b      	uxth	r3, r3
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7f6 f843 	bl	800c44c <lwip_htons>
 80163c6:	4603      	mov	r3, r0
 80163c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80163ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163cc:	781b      	ldrb	r3, [r3, #0]
 80163ce:	f003 030f 	and.w	r3, r3, #15
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	009b      	lsls	r3, r3, #2
 80163d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80163da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80163de:	b29b      	uxth	r3, r3
 80163e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80163e2:	429a      	cmp	r2, r3
 80163e4:	f0c0 8150 	bcc.w	8016688 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80163e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80163ec:	b29b      	uxth	r3, r3
 80163ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80163f0:	1ad3      	subs	r3, r2, r3
 80163f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f7f7 fd01 	bl	800ddfc <pbuf_clen>
 80163fa:	4603      	mov	r3, r0
 80163fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80163fe:	4b8c      	ldr	r3, [pc, #560]	@ (8016630 <ip4_reass+0x2b0>)
 8016400:	881b      	ldrh	r3, [r3, #0]
 8016402:	461a      	mov	r2, r3
 8016404:	8c3b      	ldrh	r3, [r7, #32]
 8016406:	4413      	add	r3, r2
 8016408:	2b0a      	cmp	r3, #10
 801640a:	dd10      	ble.n	801642e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801640c:	8c3b      	ldrh	r3, [r7, #32]
 801640e:	4619      	mov	r1, r3
 8016410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016412:	f7ff fd81 	bl	8015f18 <ip_reass_remove_oldest_datagram>
 8016416:	4603      	mov	r3, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	f000 8137 	beq.w	801668c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801641e:	4b84      	ldr	r3, [pc, #528]	@ (8016630 <ip4_reass+0x2b0>)
 8016420:	881b      	ldrh	r3, [r3, #0]
 8016422:	461a      	mov	r2, r3
 8016424:	8c3b      	ldrh	r3, [r7, #32]
 8016426:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016428:	2b0a      	cmp	r3, #10
 801642a:	f300 812f 	bgt.w	801668c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801642e:	4b81      	ldr	r3, [pc, #516]	@ (8016634 <ip4_reass+0x2b4>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	633b      	str	r3, [r7, #48]	@ 0x30
 8016434:	e015      	b.n	8016462 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016438:	695a      	ldr	r2, [r3, #20]
 801643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801643c:	68db      	ldr	r3, [r3, #12]
 801643e:	429a      	cmp	r2, r3
 8016440:	d10c      	bne.n	801645c <ip4_reass+0xdc>
 8016442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016444:	699a      	ldr	r2, [r3, #24]
 8016446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016448:	691b      	ldr	r3, [r3, #16]
 801644a:	429a      	cmp	r2, r3
 801644c:	d106      	bne.n	801645c <ip4_reass+0xdc>
 801644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016450:	899a      	ldrh	r2, [r3, #12]
 8016452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016454:	889b      	ldrh	r3, [r3, #4]
 8016456:	b29b      	uxth	r3, r3
 8016458:	429a      	cmp	r2, r3
 801645a:	d006      	beq.n	801646a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	633b      	str	r3, [r7, #48]	@ 0x30
 8016462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1e6      	bne.n	8016436 <ip4_reass+0xb6>
 8016468:	e000      	b.n	801646c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801646a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801646e:	2b00      	cmp	r3, #0
 8016470:	d109      	bne.n	8016486 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016472:	8c3b      	ldrh	r3, [r7, #32]
 8016474:	4619      	mov	r1, r3
 8016476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016478:	f7ff fdb0 	bl	8015fdc <ip_reass_enqueue_new_datagram>
 801647c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016480:	2b00      	cmp	r3, #0
 8016482:	d11c      	bne.n	80164be <ip4_reass+0x13e>
      goto nullreturn;
 8016484:	e105      	b.n	8016692 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016488:	88db      	ldrh	r3, [r3, #6]
 801648a:	b29b      	uxth	r3, r3
 801648c:	4618      	mov	r0, r3
 801648e:	f7f5 ffdd 	bl	800c44c <lwip_htons>
 8016492:	4603      	mov	r3, r0
 8016494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016498:	2b00      	cmp	r3, #0
 801649a:	d110      	bne.n	80164be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801649e:	89db      	ldrh	r3, [r3, #14]
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7f5 ffd3 	bl	800c44c <lwip_htons>
 80164a6:	4603      	mov	r3, r0
 80164a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d006      	beq.n	80164be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80164b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164b2:	3308      	adds	r3, #8
 80164b4:	2214      	movs	r2, #20
 80164b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80164b8:	4618      	mov	r0, r3
 80164ba:	f001 fbee 	bl	8017c9a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80164be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164c0:	88db      	ldrh	r3, [r3, #6]
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	f003 0320 	and.w	r3, r3, #32
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	bf0c      	ite	eq
 80164cc:	2301      	moveq	r3, #1
 80164ce:	2300      	movne	r3, #0
 80164d0:	b2db      	uxtb	r3, r3
 80164d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80164d4:	69fb      	ldr	r3, [r7, #28]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00e      	beq.n	80164f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80164da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80164dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80164de:	4413      	add	r3, r2
 80164e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80164e2:	8b7a      	ldrh	r2, [r7, #26]
 80164e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80164e6:	429a      	cmp	r2, r3
 80164e8:	f0c0 80a0 	bcc.w	801662c <ip4_reass+0x2ac>
 80164ec:	8b7b      	ldrh	r3, [r7, #26]
 80164ee:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80164f2:	4293      	cmp	r3, r2
 80164f4:	f200 809a 	bhi.w	801662c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80164f8:	69fa      	ldr	r2, [r7, #28]
 80164fa:	6879      	ldr	r1, [r7, #4]
 80164fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80164fe:	f7ff fdd5 	bl	80160ac <ip_reass_chain_frag_into_datagram_and_validate>
 8016502:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801650a:	f000 809b 	beq.w	8016644 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801650e:	4b48      	ldr	r3, [pc, #288]	@ (8016630 <ip4_reass+0x2b0>)
 8016510:	881a      	ldrh	r2, [r3, #0]
 8016512:	8c3b      	ldrh	r3, [r7, #32]
 8016514:	4413      	add	r3, r2
 8016516:	b29a      	uxth	r2, r3
 8016518:	4b45      	ldr	r3, [pc, #276]	@ (8016630 <ip4_reass+0x2b0>)
 801651a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801651c:	69fb      	ldr	r3, [r7, #28]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d00d      	beq.n	801653e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016522:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016526:	4413      	add	r3, r2
 8016528:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801652c:	8a7a      	ldrh	r2, [r7, #18]
 801652e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016532:	7f9b      	ldrb	r3, [r3, #30]
 8016534:	f043 0301 	orr.w	r3, r3, #1
 8016538:	b2da      	uxtb	r2, r3
 801653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801653c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	2b01      	cmp	r3, #1
 8016542:	d171      	bne.n	8016628 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016546:	8b9b      	ldrh	r3, [r3, #28]
 8016548:	3314      	adds	r3, #20
 801654a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	685b      	ldr	r3, [r3, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016558:	685b      	ldr	r3, [r3, #4]
 801655a:	685b      	ldr	r3, [r3, #4]
 801655c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016560:	3308      	adds	r3, #8
 8016562:	2214      	movs	r2, #20
 8016564:	4619      	mov	r1, r3
 8016566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016568:	f001 fb97 	bl	8017c9a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801656c:	8a3b      	ldrh	r3, [r7, #16]
 801656e:	4618      	mov	r0, r3
 8016570:	f7f5 ff6c 	bl	800c44c <lwip_htons>
 8016574:	4603      	mov	r3, r0
 8016576:	461a      	mov	r2, r3
 8016578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801657a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801657e:	2200      	movs	r2, #0
 8016580:	719a      	strb	r2, [r3, #6]
 8016582:	2200      	movs	r2, #0
 8016584:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016588:	2200      	movs	r2, #0
 801658a:	729a      	strb	r2, [r3, #10]
 801658c:	2200      	movs	r2, #0
 801658e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016596:	e00d      	b.n	80165b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801659e:	2114      	movs	r1, #20
 80165a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80165a2:	f7f7 fb1d 	bl	800dbe0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80165a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	f7f7 fc61 	bl	800de70 <pbuf_cat>
      r = iprh->next_pbuf;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 80165b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d1ee      	bne.n	8016598 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80165ba:	4b1e      	ldr	r3, [pc, #120]	@ (8016634 <ip4_reass+0x2b4>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d102      	bne.n	80165ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80165c4:	2300      	movs	r3, #0
 80165c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80165c8:	e010      	b.n	80165ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80165ca:	4b1a      	ldr	r3, [pc, #104]	@ (8016634 <ip4_reass+0x2b4>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80165d0:	e007      	b.n	80165e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80165d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80165d8:	429a      	cmp	r2, r3
 80165da:	d006      	beq.n	80165ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80165dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80165e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d1f4      	bne.n	80165d2 <ip4_reass+0x252>
 80165e8:	e000      	b.n	80165ec <ip4_reass+0x26c>
          break;
 80165ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80165ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80165ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80165f0:	f7ff fd2e 	bl	8016050 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80165f4:	6878      	ldr	r0, [r7, #4]
 80165f6:	f7f7 fc01 	bl	800ddfc <pbuf_clen>
 80165fa:	4603      	mov	r3, r0
 80165fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80165fe:	4b0c      	ldr	r3, [pc, #48]	@ (8016630 <ip4_reass+0x2b0>)
 8016600:	881b      	ldrh	r3, [r3, #0]
 8016602:	8c3a      	ldrh	r2, [r7, #32]
 8016604:	429a      	cmp	r2, r3
 8016606:	d906      	bls.n	8016616 <ip4_reass+0x296>
 8016608:	4b0b      	ldr	r3, [pc, #44]	@ (8016638 <ip4_reass+0x2b8>)
 801660a:	f240 229b 	movw	r2, #667	@ 0x29b
 801660e:	490b      	ldr	r1, [pc, #44]	@ (801663c <ip4_reass+0x2bc>)
 8016610:	480b      	ldr	r0, [pc, #44]	@ (8016640 <ip4_reass+0x2c0>)
 8016612:	f001 f96d 	bl	80178f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016616:	4b06      	ldr	r3, [pc, #24]	@ (8016630 <ip4_reass+0x2b0>)
 8016618:	881a      	ldrh	r2, [r3, #0]
 801661a:	8c3b      	ldrh	r3, [r7, #32]
 801661c:	1ad3      	subs	r3, r2, r3
 801661e:	b29a      	uxth	r2, r3
 8016620:	4b03      	ldr	r3, [pc, #12]	@ (8016630 <ip4_reass+0x2b0>)
 8016622:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	e038      	b.n	801669a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016628:	2300      	movs	r3, #0
 801662a:	e036      	b.n	801669a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801662c:	bf00      	nop
 801662e:	e00a      	b.n	8016646 <ip4_reass+0x2c6>
 8016630:	20008658 	.word	0x20008658
 8016634:	20008654 	.word	0x20008654
 8016638:	0801b99c 	.word	0x0801b99c
 801663c:	0801bb0c 	.word	0x0801bb0c
 8016640:	0801b9e4 	.word	0x0801b9e4
    goto nullreturn_ipr;
 8016644:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016648:	2b00      	cmp	r3, #0
 801664a:	d106      	bne.n	801665a <ip4_reass+0x2da>
 801664c:	4b15      	ldr	r3, [pc, #84]	@ (80166a4 <ip4_reass+0x324>)
 801664e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016652:	4915      	ldr	r1, [pc, #84]	@ (80166a8 <ip4_reass+0x328>)
 8016654:	4815      	ldr	r0, [pc, #84]	@ (80166ac <ip4_reass+0x32c>)
 8016656:	f001 f94b 	bl	80178f0 <iprintf>
  if (ipr->p == NULL) {
 801665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d116      	bne.n	8016690 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016662:	4b13      	ldr	r3, [pc, #76]	@ (80166b0 <ip4_reass+0x330>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016668:	429a      	cmp	r2, r3
 801666a:	d006      	beq.n	801667a <ip4_reass+0x2fa>
 801666c:	4b0d      	ldr	r3, [pc, #52]	@ (80166a4 <ip4_reass+0x324>)
 801666e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016672:	4910      	ldr	r1, [pc, #64]	@ (80166b4 <ip4_reass+0x334>)
 8016674:	480d      	ldr	r0, [pc, #52]	@ (80166ac <ip4_reass+0x32c>)
 8016676:	f001 f93b 	bl	80178f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801667a:	2100      	movs	r1, #0
 801667c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801667e:	f7ff fce7 	bl	8016050 <ip_reass_dequeue_datagram>
 8016682:	e006      	b.n	8016692 <ip4_reass+0x312>
    goto nullreturn;
 8016684:	bf00      	nop
 8016686:	e004      	b.n	8016692 <ip4_reass+0x312>
    goto nullreturn;
 8016688:	bf00      	nop
 801668a:	e002      	b.n	8016692 <ip4_reass+0x312>
      goto nullreturn;
 801668c:	bf00      	nop
 801668e:	e000      	b.n	8016692 <ip4_reass+0x312>
  }

nullreturn:
 8016690:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f7f7 fb2a 	bl	800dcec <pbuf_free>
  return NULL;
 8016698:	2300      	movs	r3, #0
}
 801669a:	4618      	mov	r0, r3
 801669c:	3738      	adds	r7, #56	@ 0x38
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	0801b99c 	.word	0x0801b99c
 80166a8:	0801bb28 	.word	0x0801bb28
 80166ac:	0801b9e4 	.word	0x0801b9e4
 80166b0:	20008654 	.word	0x20008654
 80166b4:	0801bb34 	.word	0x0801bb34

080166b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80166bc:	2005      	movs	r0, #5
 80166be:	f7f6 fb39 	bl	800cd34 <memp_malloc>
 80166c2:	4603      	mov	r3, r0
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d106      	bne.n	80166e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80166d6:	4b07      	ldr	r3, [pc, #28]	@ (80166f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80166d8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80166dc:	4906      	ldr	r1, [pc, #24]	@ (80166f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80166de:	4807      	ldr	r0, [pc, #28]	@ (80166fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80166e0:	f001 f906 	bl	80178f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80166e4:	6879      	ldr	r1, [r7, #4]
 80166e6:	2005      	movs	r0, #5
 80166e8:	f7f6 fb94 	bl	800ce14 <memp_free>
}
 80166ec:	bf00      	nop
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	0801b99c 	.word	0x0801b99c
 80166f8:	0801bb54 	.word	0x0801bb54
 80166fc:	0801b9e4 	.word	0x0801b9e4

08016700 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d106      	bne.n	8016720 <ipfrag_free_pbuf_custom+0x20>
 8016712:	4b11      	ldr	r3, [pc, #68]	@ (8016758 <ipfrag_free_pbuf_custom+0x58>)
 8016714:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016718:	4910      	ldr	r1, [pc, #64]	@ (801675c <ipfrag_free_pbuf_custom+0x5c>)
 801671a:	4811      	ldr	r0, [pc, #68]	@ (8016760 <ipfrag_free_pbuf_custom+0x60>)
 801671c:	f001 f8e8 	bl	80178f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	429a      	cmp	r2, r3
 8016726:	d006      	beq.n	8016736 <ipfrag_free_pbuf_custom+0x36>
 8016728:	4b0b      	ldr	r3, [pc, #44]	@ (8016758 <ipfrag_free_pbuf_custom+0x58>)
 801672a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801672e:	490d      	ldr	r1, [pc, #52]	@ (8016764 <ipfrag_free_pbuf_custom+0x64>)
 8016730:	480b      	ldr	r0, [pc, #44]	@ (8016760 <ipfrag_free_pbuf_custom+0x60>)
 8016732:	f001 f8dd 	bl	80178f0 <iprintf>
  if (pcr->original != NULL) {
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	695b      	ldr	r3, [r3, #20]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d004      	beq.n	8016748 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	695b      	ldr	r3, [r3, #20]
 8016742:	4618      	mov	r0, r3
 8016744:	f7f7 fad2 	bl	800dcec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016748:	68f8      	ldr	r0, [r7, #12]
 801674a:	f7ff ffbd 	bl	80166c8 <ip_frag_free_pbuf_custom_ref>
}
 801674e:	bf00      	nop
 8016750:	3710      	adds	r7, #16
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}
 8016756:	bf00      	nop
 8016758:	0801b99c 	.word	0x0801b99c
 801675c:	0801bb60 	.word	0x0801bb60
 8016760:	0801b9e4 	.word	0x0801b9e4
 8016764:	0801bb6c 	.word	0x0801bb6c

08016768 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b094      	sub	sp, #80	@ 0x50
 801676c:	af02      	add	r7, sp, #8
 801676e:	60f8      	str	r0, [r7, #12]
 8016770:	60b9      	str	r1, [r7, #8]
 8016772:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016774:	2300      	movs	r3, #0
 8016776:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801677a:	68bb      	ldr	r3, [r7, #8]
 801677c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801677e:	3b14      	subs	r3, #20
 8016780:	2b00      	cmp	r3, #0
 8016782:	da00      	bge.n	8016786 <ip4_frag+0x1e>
 8016784:	3307      	adds	r3, #7
 8016786:	10db      	asrs	r3, r3, #3
 8016788:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801678a:	2314      	movs	r3, #20
 801678c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016796:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	f003 030f 	and.w	r3, r3, #15
 80167a0:	b2db      	uxtb	r3, r3
 80167a2:	009b      	lsls	r3, r3, #2
 80167a4:	b2db      	uxtb	r3, r3
 80167a6:	2b14      	cmp	r3, #20
 80167a8:	d002      	beq.n	80167b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80167aa:	f06f 0305 	mvn.w	r3, #5
 80167ae:	e110      	b.n	80169d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	895b      	ldrh	r3, [r3, #10]
 80167b4:	2b13      	cmp	r3, #19
 80167b6:	d809      	bhi.n	80167cc <ip4_frag+0x64>
 80167b8:	4b88      	ldr	r3, [pc, #544]	@ (80169dc <ip4_frag+0x274>)
 80167ba:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80167be:	4988      	ldr	r1, [pc, #544]	@ (80169e0 <ip4_frag+0x278>)
 80167c0:	4888      	ldr	r0, [pc, #544]	@ (80169e4 <ip4_frag+0x27c>)
 80167c2:	f001 f895 	bl	80178f0 <iprintf>
 80167c6:	f06f 0305 	mvn.w	r3, #5
 80167ca:	e102      	b.n	80169d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80167cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167ce:	88db      	ldrh	r3, [r3, #6]
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7f5 fe3a 	bl	800c44c <lwip_htons>
 80167d8:	4603      	mov	r3, r0
 80167da:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80167dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80167de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80167e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80167e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80167e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80167ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	891b      	ldrh	r3, [r3, #8]
 80167f2:	3b14      	subs	r3, #20
 80167f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80167f8:	e0e1      	b.n	80169be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80167fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80167fc:	00db      	lsls	r3, r3, #3
 80167fe:	b29b      	uxth	r3, r3
 8016800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016804:	4293      	cmp	r3, r2
 8016806:	bf28      	it	cs
 8016808:	4613      	movcs	r3, r2
 801680a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801680c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016810:	2114      	movs	r1, #20
 8016812:	200e      	movs	r0, #14
 8016814:	f7f6 ff86 	bl	800d724 <pbuf_alloc>
 8016818:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801681c:	2b00      	cmp	r3, #0
 801681e:	f000 80d5 	beq.w	80169cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016824:	895b      	ldrh	r3, [r3, #10]
 8016826:	2b13      	cmp	r3, #19
 8016828:	d806      	bhi.n	8016838 <ip4_frag+0xd0>
 801682a:	4b6c      	ldr	r3, [pc, #432]	@ (80169dc <ip4_frag+0x274>)
 801682c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016830:	496d      	ldr	r1, [pc, #436]	@ (80169e8 <ip4_frag+0x280>)
 8016832:	486c      	ldr	r0, [pc, #432]	@ (80169e4 <ip4_frag+0x27c>)
 8016834:	f001 f85c 	bl	80178f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	2214      	movs	r2, #20
 801683e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016840:	4618      	mov	r0, r3
 8016842:	f001 fa2a 	bl	8017c9a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016848:	685b      	ldr	r3, [r3, #4]
 801684a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801684c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801684e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016852:	e064      	b.n	801691e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	895a      	ldrh	r2, [r3, #10]
 8016858:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801685a:	1ad3      	subs	r3, r2, r3
 801685c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	895b      	ldrh	r3, [r3, #10]
 8016862:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016864:	429a      	cmp	r2, r3
 8016866:	d906      	bls.n	8016876 <ip4_frag+0x10e>
 8016868:	4b5c      	ldr	r3, [pc, #368]	@ (80169dc <ip4_frag+0x274>)
 801686a:	f240 322d 	movw	r2, #813	@ 0x32d
 801686e:	495f      	ldr	r1, [pc, #380]	@ (80169ec <ip4_frag+0x284>)
 8016870:	485c      	ldr	r0, [pc, #368]	@ (80169e4 <ip4_frag+0x27c>)
 8016872:	f001 f83d 	bl	80178f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016876:	8bfa      	ldrh	r2, [r7, #30]
 8016878:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801687c:	4293      	cmp	r3, r2
 801687e:	bf28      	it	cs
 8016880:	4613      	movcs	r3, r2
 8016882:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016886:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801688a:	2b00      	cmp	r3, #0
 801688c:	d105      	bne.n	801689a <ip4_frag+0x132>
        poff = 0;
 801688e:	2300      	movs	r3, #0
 8016890:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	60fb      	str	r3, [r7, #12]
        continue;
 8016898:	e041      	b.n	801691e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801689a:	f7ff ff0d 	bl	80166b8 <ip_frag_alloc_pbuf_custom_ref>
 801689e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80168a0:	69bb      	ldr	r3, [r7, #24]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d103      	bne.n	80168ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80168a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80168a8:	f7f7 fa20 	bl	800dcec <pbuf_free>
        goto memerr;
 80168ac:	e08f      	b.n	80169ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80168ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80168b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80168b6:	4413      	add	r3, r2
 80168b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80168bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80168c0:	9201      	str	r2, [sp, #4]
 80168c2:	9300      	str	r3, [sp, #0]
 80168c4:	4603      	mov	r3, r0
 80168c6:	2241      	movs	r2, #65	@ 0x41
 80168c8:	2000      	movs	r0, #0
 80168ca:	f7f7 f855 	bl	800d978 <pbuf_alloced_custom>
 80168ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d106      	bne.n	80168e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80168d6:	69b8      	ldr	r0, [r7, #24]
 80168d8:	f7ff fef6 	bl	80166c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80168dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80168de:	f7f7 fa05 	bl	800dcec <pbuf_free>
        goto memerr;
 80168e2:	e074      	b.n	80169ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80168e4:	68f8      	ldr	r0, [r7, #12]
 80168e6:	f7f7 faa1 	bl	800de2c <pbuf_ref>
      pcr->original = p;
 80168ea:	69bb      	ldr	r3, [r7, #24]
 80168ec:	68fa      	ldr	r2, [r7, #12]
 80168ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80168f0:	69bb      	ldr	r3, [r7, #24]
 80168f2:	4a3f      	ldr	r2, [pc, #252]	@ (80169f0 <ip4_frag+0x288>)
 80168f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80168f6:	6979      	ldr	r1, [r7, #20]
 80168f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80168fa:	f7f7 fab9 	bl	800de70 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80168fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016906:	1ad3      	subs	r3, r2, r3
 8016908:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801690c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016910:	2b00      	cmp	r3, #0
 8016912:	d004      	beq.n	801691e <ip4_frag+0x1b6>
        poff = 0;
 8016914:	2300      	movs	r3, #0
 8016916:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801691e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016922:	2b00      	cmp	r3, #0
 8016924:	d196      	bne.n	8016854 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016926:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016928:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801692c:	4413      	add	r3, r2
 801692e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016934:	f1a3 0213 	sub.w	r2, r3, #19
 8016938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801693c:	429a      	cmp	r2, r3
 801693e:	bfcc      	ite	gt
 8016940:	2301      	movgt	r3, #1
 8016942:	2300      	movle	r3, #0
 8016944:	b2db      	uxtb	r3, r3
 8016946:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016948:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801694c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016950:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016952:	6a3b      	ldr	r3, [r7, #32]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <ip4_frag+0x1f6>
 8016958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801695a:	2b00      	cmp	r3, #0
 801695c:	d003      	beq.n	8016966 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801695e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016960:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016964:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016966:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016968:	4618      	mov	r0, r3
 801696a:	f7f5 fd6f 	bl	800c44c <lwip_htons>
 801696e:	4603      	mov	r3, r0
 8016970:	461a      	mov	r2, r3
 8016972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016974:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016976:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016978:	3314      	adds	r3, #20
 801697a:	b29b      	uxth	r3, r3
 801697c:	4618      	mov	r0, r3
 801697e:	f7f5 fd65 	bl	800c44c <lwip_htons>
 8016982:	4603      	mov	r3, r0
 8016984:	461a      	mov	r2, r3
 8016986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016988:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801698c:	2200      	movs	r2, #0
 801698e:	729a      	strb	r2, [r3, #10]
 8016990:	2200      	movs	r2, #0
 8016992:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	695b      	ldr	r3, [r3, #20]
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801699c:	68b8      	ldr	r0, [r7, #8]
 801699e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80169a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80169a2:	f7f7 f9a3 	bl	800dcec <pbuf_free>
    left = (u16_t)(left - fragsize);
 80169a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80169aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80169ac:	1ad3      	subs	r3, r2, r3
 80169ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80169b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80169b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80169b8:	4413      	add	r3, r2
 80169ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80169be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	f47f af19 	bne.w	80167fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80169c8:	2300      	movs	r3, #0
 80169ca:	e002      	b.n	80169d2 <ip4_frag+0x26a>
      goto memerr;
 80169cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80169ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3748      	adds	r7, #72	@ 0x48
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop
 80169dc:	0801b99c 	.word	0x0801b99c
 80169e0:	0801bb78 	.word	0x0801bb78
 80169e4:	0801b9e4 	.word	0x0801b9e4
 80169e8:	0801bb94 	.word	0x0801bb94
 80169ec:	0801bbb4 	.word	0x0801bbb4
 80169f0:	08016701 	.word	0x08016701

080169f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b086      	sub	sp, #24
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
 80169fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80169fe:	230e      	movs	r3, #14
 8016a00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	895b      	ldrh	r3, [r3, #10]
 8016a06:	2b0e      	cmp	r3, #14
 8016a08:	d96e      	bls.n	8016ae8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	7bdb      	ldrb	r3, [r3, #15]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d106      	bne.n	8016a20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016a18:	3301      	adds	r3, #1
 8016a1a:	b2da      	uxtb	r2, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	7b1a      	ldrb	r2, [r3, #12]
 8016a2a:	7b5b      	ldrb	r3, [r3, #13]
 8016a2c:	021b      	lsls	r3, r3, #8
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	f003 0301 	and.w	r3, r3, #1
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d023      	beq.n	8016a86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016a3e:	693b      	ldr	r3, [r7, #16]
 8016a40:	781b      	ldrb	r3, [r3, #0]
 8016a42:	2b01      	cmp	r3, #1
 8016a44:	d10f      	bne.n	8016a66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a46:	693b      	ldr	r3, [r7, #16]
 8016a48:	785b      	ldrb	r3, [r3, #1]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d11b      	bne.n	8016a86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a52:	2b5e      	cmp	r3, #94	@ 0x5e
 8016a54:	d117      	bne.n	8016a86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	7b5b      	ldrb	r3, [r3, #13]
 8016a5a:	f043 0310 	orr.w	r3, r3, #16
 8016a5e:	b2da      	uxtb	r2, r3
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	735a      	strb	r2, [r3, #13]
 8016a64:	e00f      	b.n	8016a86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	2206      	movs	r2, #6
 8016a6a:	4928      	ldr	r1, [pc, #160]	@ (8016b0c <ethernet_input+0x118>)
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f001 f88f 	bl	8017b90 <memcmp>
 8016a72:	4603      	mov	r3, r0
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d106      	bne.n	8016a86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	7b5b      	ldrb	r3, [r3, #13]
 8016a7c:	f043 0308 	orr.w	r3, r3, #8
 8016a80:	b2da      	uxtb	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016a86:	89fb      	ldrh	r3, [r7, #14]
 8016a88:	2b08      	cmp	r3, #8
 8016a8a:	d003      	beq.n	8016a94 <ethernet_input+0xa0>
 8016a8c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016a90:	d014      	beq.n	8016abc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016a92:	e032      	b.n	8016afa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016a9a:	f003 0308 	and.w	r3, r3, #8
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d024      	beq.n	8016aec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016aa2:	8afb      	ldrh	r3, [r7, #22]
 8016aa4:	4619      	mov	r1, r3
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f7f7 f89a 	bl	800dbe0 <pbuf_remove_header>
 8016aac:	4603      	mov	r3, r0
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d11e      	bne.n	8016af0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016ab2:	6839      	ldr	r1, [r7, #0]
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f7fe ff21 	bl	80158fc <ip4_input>
      break;
 8016aba:	e013      	b.n	8016ae4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016ac2:	f003 0308 	and.w	r3, r3, #8
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d014      	beq.n	8016af4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016aca:	8afb      	ldrh	r3, [r7, #22]
 8016acc:	4619      	mov	r1, r3
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f7f7 f886 	bl	800dbe0 <pbuf_remove_header>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d10e      	bne.n	8016af8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016ada:	6839      	ldr	r1, [r7, #0]
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f7fe f82f 	bl	8014b40 <etharp_input>
      break;
 8016ae2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	e00c      	b.n	8016b02 <ethernet_input+0x10e>
    goto free_and_return;
 8016ae8:	bf00      	nop
 8016aea:	e006      	b.n	8016afa <ethernet_input+0x106>
        goto free_and_return;
 8016aec:	bf00      	nop
 8016aee:	e004      	b.n	8016afa <ethernet_input+0x106>
        goto free_and_return;
 8016af0:	bf00      	nop
 8016af2:	e002      	b.n	8016afa <ethernet_input+0x106>
        goto free_and_return;
 8016af4:	bf00      	nop
 8016af6:	e000      	b.n	8016afa <ethernet_input+0x106>
        goto free_and_return;
 8016af8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016afa:	6878      	ldr	r0, [r7, #4]
 8016afc:	f7f7 f8f6 	bl	800dcec <pbuf_free>
  return ERR_OK;
 8016b00:	2300      	movs	r3, #0
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3718      	adds	r7, #24
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
 8016b0a:	bf00      	nop
 8016b0c:	0801bfe0 	.word	0x0801bfe0

08016b10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b086      	sub	sp, #24
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	607a      	str	r2, [r7, #4]
 8016b1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016b1e:	8c3b      	ldrh	r3, [r7, #32]
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7f5 fc93 	bl	800c44c <lwip_htons>
 8016b26:	4603      	mov	r3, r0
 8016b28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016b2a:	210e      	movs	r1, #14
 8016b2c:	68b8      	ldr	r0, [r7, #8]
 8016b2e:	f7f7 f847 	bl	800dbc0 <pbuf_add_header>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d125      	bne.n	8016b84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	685b      	ldr	r3, [r3, #4]
 8016b3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	8afa      	ldrh	r2, [r7, #22]
 8016b42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	2206      	movs	r2, #6
 8016b48:	6839      	ldr	r1, [r7, #0]
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f001 f8a5 	bl	8017c9a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	3306      	adds	r3, #6
 8016b54:	2206      	movs	r2, #6
 8016b56:	6879      	ldr	r1, [r7, #4]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f001 f89e 	bl	8017c9a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016b64:	2b06      	cmp	r3, #6
 8016b66:	d006      	beq.n	8016b76 <ethernet_output+0x66>
 8016b68:	4b0a      	ldr	r3, [pc, #40]	@ (8016b94 <ethernet_output+0x84>)
 8016b6a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016b6e:	490a      	ldr	r1, [pc, #40]	@ (8016b98 <ethernet_output+0x88>)
 8016b70:	480a      	ldr	r0, [pc, #40]	@ (8016b9c <ethernet_output+0x8c>)
 8016b72:	f000 febd 	bl	80178f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	699b      	ldr	r3, [r3, #24]
 8016b7a:	68b9      	ldr	r1, [r7, #8]
 8016b7c:	68f8      	ldr	r0, [r7, #12]
 8016b7e:	4798      	blx	r3
 8016b80:	4603      	mov	r3, r0
 8016b82:	e002      	b.n	8016b8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016b84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016b86:	f06f 0301 	mvn.w	r3, #1
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3718      	adds	r7, #24
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	0801bbc4 	.word	0x0801bbc4
 8016b98:	0801bbfc 	.word	0x0801bbfc
 8016b9c:	0801bc30 	.word	0x0801bc30

08016ba0 <ADC_Test_Perform>:

uint16_t adc_buf[MAX_BUF];
int adc_ready = 0;

uint8_t ADC_Test_Perform(void)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing adc test\n");
 8016ba6:	4816      	ldr	r0, [pc, #88]	@ (8016c00 <ADC_Test_Perform+0x60>)
 8016ba8:	f000 ff12 	bl	80179d0 <puts>
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 8016bac:	2201      	movs	r2, #1
 8016bae:	4915      	ldr	r1, [pc, #84]	@ (8016c04 <ADC_Test_Perform+0x64>)
 8016bb0:	4815      	ldr	r0, [pc, #84]	@ (8016c08 <ADC_Test_Perform+0x68>)
 8016bb2:	f7eb faa5 	bl	8002100 <HAL_ADC_Start_DMA>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8016bba:	79fb      	ldrb	r3, [r7, #7]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d004      	beq.n	8016bca <ADC_Test_Perform+0x2a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
 8016bc0:	4812      	ldr	r0, [pc, #72]	@ (8016c0c <ADC_Test_Perform+0x6c>)
 8016bc2:	f000 ff05 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8016bc6:	23ff      	movs	r3, #255	@ 0xff
 8016bc8:	e015      	b.n	8016bf6 <ADC_Test_Perform+0x56>
	}

	while (!adc_ready);
 8016bca:	bf00      	nop
 8016bcc:	4b10      	ldr	r3, [pc, #64]	@ (8016c10 <ADC_Test_Perform+0x70>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d0fb      	beq.n	8016bcc <ADC_Test_Perform+0x2c>
	adc_ready=0;
 8016bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8016c10 <ADC_Test_Perform+0x70>)
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	601a      	str	r2, [r3, #0]

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
 8016bda:	4b0a      	ldr	r3, [pc, #40]	@ (8016c04 <ADC_Test_Perform+0x64>)
 8016bdc:	881b      	ldrh	r3, [r3, #0]
 8016bde:	4619      	mov	r1, r3
 8016be0:	480c      	ldr	r0, [pc, #48]	@ (8016c14 <ADC_Test_Perform+0x74>)
 8016be2:	f000 fe85 	bl	80178f0 <iprintf>
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 8016be6:	4b07      	ldr	r3, [pc, #28]	@ (8016c04 <ADC_Test_Perform+0x64>)
 8016be8:	881b      	ldrh	r3, [r3, #0]
 8016bea:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8016bee:	d301      	bcc.n	8016bf4 <ADC_Test_Perform+0x54>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	e000      	b.n	8016bf6 <ADC_Test_Perform+0x56>

	return TEST_FAILED;
 8016bf4:	23ff      	movs	r3, #255	@ 0xff
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3708      	adds	r7, #8
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	0801bc58 	.word	0x0801bc58
 8016c04:	2000865c 	.word	0x2000865c
 8016c08:	20000228 	.word	0x20000228
 8016c0c:	0801bc6c 	.word	0x0801bc6c
 8016c10:	2000885c 	.word	0x2000885c
 8016c14:	0801bc84 	.word	0x0801bc84

08016c18 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
	adc_ready=1;
 8016c20:	4b08      	ldr	r3, [pc, #32]	@ (8016c44 <HAL_ADC_ConvCpltCallback+0x2c>)
 8016c22:	2201      	movs	r2, #1
 8016c24:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8016c26:	4808      	ldr	r0, [pc, #32]	@ (8016c48 <HAL_ADC_ConvCpltCallback+0x30>)
 8016c28:	f7eb fb68 	bl	80022fc <HAL_ADC_Stop_DMA>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d004      	beq.n	8016c3c <HAL_ADC_ConvCpltCallback+0x24>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
 8016c32:	4806      	ldr	r0, [pc, #24]	@ (8016c4c <HAL_ADC_ConvCpltCallback+0x34>)
 8016c34:	f000 fecc 	bl	80179d0 <puts>
#endif
		Error_Handler();
 8016c38:	f7ea f974 	bl	8000f24 <Error_Handler>
	}
}
 8016c3c:	bf00      	nop
 8016c3e:	3708      	adds	r7, #8
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bd80      	pop	{r7, pc}
 8016c44:	2000885c 	.word	0x2000885c
 8016c48:	20000228 	.word	0x20000228
 8016c4c:	0801bc94 	.word	0x0801bc94

08016c50 <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 8016c54:	f000 f82a 	bl	8016cac <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 8016c58:	f7f4 ffd4 	bl	800bc04 <MX_LWIP_Process>
 8016c5c:	e7fc      	b.n	8016c58 <HW_Verification_Proccess+0x8>
	...

08016c60 <Match_CRC>:
 */
#include "crc.h"
#include "hw_verif_crc.h"

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b086      	sub	sp, #24
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	607a      	str	r2, [r7, #4]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	72fb      	strb	r3, [r7, #11]
 8016c70:	4613      	mov	r3, r2
 8016c72:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 8016c74:	7afb      	ldrb	r3, [r7, #11]
 8016c76:	461a      	mov	r2, r3
 8016c78:	68f9      	ldr	r1, [r7, #12]
 8016c7a:	480b      	ldr	r0, [pc, #44]	@ (8016ca8 <Match_CRC+0x48>)
 8016c7c:	f7eb fff8 	bl	8002c70 <HAL_CRC_Calculate>
 8016c80:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 8016c82:	7abb      	ldrb	r3, [r7, #10]
 8016c84:	461a      	mov	r2, r3
 8016c86:	6879      	ldr	r1, [r7, #4]
 8016c88:	4807      	ldr	r0, [pc, #28]	@ (8016ca8 <Match_CRC+0x48>)
 8016c8a:	f7eb fff1 	bl	8002c70 <HAL_CRC_Calculate>
 8016c8e:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 8016c90:	697a      	ldr	r2, [r7, #20]
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d101      	bne.n	8016c9c <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 8016c98:	2301      	movs	r3, #1
 8016c9a:	e000      	b.n	8016c9e <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8016c9c:	2300      	movs	r3, #0
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	3718      	adds	r7, #24
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}
 8016ca6:	bf00      	nop
 8016ca8:	200002d0 	.word	0x200002d0

08016cac <UDP_Server_Init>:

uint8_t perform_test();
void send_result(uint8_t result);

void UDP_Server_Init(void)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8016cb2:	f7fd fb63 	bl	801437c <udp_new>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	4a12      	ldr	r2, [pc, #72]	@ (8016d04 <UDP_Server_Init+0x58>)
 8016cba:	6013      	str	r3, [r2, #0]

	if (upcb)
 8016cbc:	4b11      	ldr	r3, [pc, #68]	@ (8016d04 <UDP_Server_Init+0x58>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d01a      	beq.n	8016cfa <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 8016cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8016d04 <UDP_Server_Init+0x58>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	f24d 4231 	movw	r2, #54321	@ 0xd431
 8016ccc:	490e      	ldr	r1, [pc, #56]	@ (8016d08 <UDP_Server_Init+0x5c>)
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7fd fa04 	bl	80140dc <udp_bind>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 8016cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d107      	bne.n	8016cf0 <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 8016ce0:	4b08      	ldr	r3, [pc, #32]	@ (8016d04 <UDP_Server_Init+0x58>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	4909      	ldr	r1, [pc, #36]	@ (8016d0c <UDP_Server_Init+0x60>)
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f7fd fae5 	bl	80142b8 <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 8016cee:	e004      	b.n	8016cfa <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 8016cf0:	4b04      	ldr	r3, [pc, #16]	@ (8016d04 <UDP_Server_Init+0x58>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7fd faff 	bl	80142f8 <udp_remove>
}
 8016cfa:	bf00      	nop
 8016cfc:	3708      	adds	r7, #8
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	20008860 	.word	0x20008860
 8016d08:	0801bfdc 	.word	0x0801bfdc
 8016d0c:	08016d11 	.word	0x08016d11

08016d10 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b086      	sub	sp, #24
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	60f8      	str	r0, [r7, #12]
 8016d18:	60b9      	str	r1, [r7, #8]
 8016d1a:	607a      	str	r2, [r7, #4]
 8016d1c:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 8016d1e:	4a24      	ldr	r2, [pc, #144]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 8016d24:	4a22      	ldr	r2, [pc, #136]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d26:	683b      	ldr	r3, [r7, #0]
 8016d28:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 8016d2a:	4a21      	ldr	r2, [pc, #132]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d2c:	8c3b      	ldrh	r3, [r7, #32]
 8016d2e:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 8016d30:	2300      	movs	r3, #0
 8016d32:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	685b      	ldr	r3, [r3, #4]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	461a      	mov	r2, r3
 8016d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d3e:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	3304      	adds	r3, #4
 8016d44:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	685a      	ldr	r2, [r3, #4]
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	1c59      	adds	r1, r3, #1
 8016d4e:	6179      	str	r1, [r7, #20]
 8016d50:	4413      	add	r3, r2
 8016d52:	781a      	ldrb	r2, [r3, #0]
 8016d54:	4b16      	ldr	r3, [pc, #88]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d56:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	685a      	ldr	r2, [r3, #4]
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	1c59      	adds	r1, r3, #1
 8016d60:	6179      	str	r1, [r7, #20]
 8016d62:	4413      	add	r3, r2
 8016d64:	781a      	ldrb	r2, [r3, #0]
 8016d66:	4b12      	ldr	r3, [pc, #72]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d68:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	685a      	ldr	r2, [r3, #4]
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	1c59      	adds	r1, r3, #1
 8016d72:	6179      	str	r1, [r7, #20]
 8016d74:	4413      	add	r3, r2
 8016d76:	781a      	ldrb	r2, [r3, #0]
 8016d78:	4b0d      	ldr	r3, [pc, #52]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d7a:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	685a      	ldr	r2, [r3, #4]
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	4413      	add	r3, r2
 8016d84:	4a0a      	ldr	r2, [pc, #40]	@ (8016db0 <UDP_Recv_Callback+0xa0>)
 8016d86:	7c92      	ldrb	r2, [r2, #18]
 8016d88:	4619      	mov	r1, r3
 8016d8a:	480a      	ldr	r0, [pc, #40]	@ (8016db4 <UDP_Recv_Callback+0xa4>)
 8016d8c:	f000 ff85 	bl	8017c9a <memcpy>

	uint8_t result = perform_test();
 8016d90:	f000 f812 	bl	8016db8 <perform_test>
 8016d94:	4603      	mov	r3, r0
 8016d96:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 8016d98:	7cfb      	ldrb	r3, [r7, #19]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f000 f88e 	bl	8016ebc <send_result>

	// Free the p buffer
	pbuf_free(p);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f7f6 ffa3 	bl	800dcec <pbuf_free>
}
 8016da6:	bf00      	nop
 8016da8:	3718      	adds	r7, #24
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}
 8016dae:	bf00      	nop
 8016db0:	20008864 	.word	0x20008864
 8016db4:	20008877 	.word	0x20008877

08016db8 <perform_test>:

uint8_t perform_test()
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b082      	sub	sp, #8
 8016dbc:	af02      	add	r7, sp, #8
	switch (in_msg.peripheral) {
 8016dbe:	4b33      	ldr	r3, [pc, #204]	@ (8016e8c <perform_test+0xd4>)
 8016dc0:	7c1b      	ldrb	r3, [r3, #16]
 8016dc2:	3b01      	subs	r3, #1
 8016dc4:	2b0f      	cmp	r3, #15
 8016dc6:	d85c      	bhi.n	8016e82 <perform_test+0xca>
 8016dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8016dd0 <perform_test+0x18>)
 8016dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dce:	bf00      	nop
 8016dd0:	08016e11 	.word	0x08016e11
 8016dd4:	08016e23 	.word	0x08016e23
 8016dd8:	08016e83 	.word	0x08016e83
 8016ddc:	08016e3d 	.word	0x08016e3d
 8016de0:	08016e83 	.word	0x08016e83
 8016de4:	08016e83 	.word	0x08016e83
 8016de8:	08016e83 	.word	0x08016e83
 8016dec:	08016e57 	.word	0x08016e57
 8016df0:	08016e83 	.word	0x08016e83
 8016df4:	08016e83 	.word	0x08016e83
 8016df8:	08016e83 	.word	0x08016e83
 8016dfc:	08016e83 	.word	0x08016e83
 8016e00:	08016e83 	.word	0x08016e83
 8016e04:	08016e83 	.word	0x08016e83
 8016e08:	08016e83 	.word	0x08016e83
 8016e0c:	08016e71 	.word	0x08016e71
		case TEST_TIM:
			return Test_N_Perform("TIMER", TIM_Test_Perform, in_msg.n_iter);
 8016e10:	4b1e      	ldr	r3, [pc, #120]	@ (8016e8c <perform_test+0xd4>)
 8016e12:	7c5b      	ldrb	r3, [r3, #17]
 8016e14:	461a      	mov	r2, r3
 8016e16:	491e      	ldr	r1, [pc, #120]	@ (8016e90 <perform_test+0xd8>)
 8016e18:	481e      	ldr	r0, [pc, #120]	@ (8016e94 <perform_test+0xdc>)
 8016e1a:	f000 fab5 	bl	8017388 <Test_N_Perform>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	e030      	b.n	8016e84 <perform_test+0xcc>
			break;
		case TEST_UART:
			return Test_N_Perform_Msg("UART", UART_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8016e22:	4b1a      	ldr	r3, [pc, #104]	@ (8016e8c <perform_test+0xd4>)
 8016e24:	7c9a      	ldrb	r2, [r3, #18]
 8016e26:	4b19      	ldr	r3, [pc, #100]	@ (8016e8c <perform_test+0xd4>)
 8016e28:	7c5b      	ldrb	r3, [r3, #17]
 8016e2a:	9300      	str	r3, [sp, #0]
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8016e98 <perform_test+0xe0>)
 8016e30:	491a      	ldr	r1, [pc, #104]	@ (8016e9c <perform_test+0xe4>)
 8016e32:	481b      	ldr	r0, [pc, #108]	@ (8016ea0 <perform_test+0xe8>)
 8016e34:	f000 fad8 	bl	80173e8 <Test_N_Perform_Msg>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	e023      	b.n	8016e84 <perform_test+0xcc>
			break;
		case TEST_SPI:
			return Test_N_Perform_Msg("SPI", SPI_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);;
 8016e3c:	4b13      	ldr	r3, [pc, #76]	@ (8016e8c <perform_test+0xd4>)
 8016e3e:	7c9a      	ldrb	r2, [r3, #18]
 8016e40:	4b12      	ldr	r3, [pc, #72]	@ (8016e8c <perform_test+0xd4>)
 8016e42:	7c5b      	ldrb	r3, [r3, #17]
 8016e44:	9300      	str	r3, [sp, #0]
 8016e46:	4613      	mov	r3, r2
 8016e48:	4a13      	ldr	r2, [pc, #76]	@ (8016e98 <perform_test+0xe0>)
 8016e4a:	4916      	ldr	r1, [pc, #88]	@ (8016ea4 <perform_test+0xec>)
 8016e4c:	4816      	ldr	r0, [pc, #88]	@ (8016ea8 <perform_test+0xf0>)
 8016e4e:	f000 facb 	bl	80173e8 <Test_N_Perform_Msg>
 8016e52:	4603      	mov	r3, r0
 8016e54:	e016      	b.n	8016e84 <perform_test+0xcc>
			break;
		case TEST_I2C:
			return Test_N_Perform_Msg("I2C", I2C_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8016e56:	4b0d      	ldr	r3, [pc, #52]	@ (8016e8c <perform_test+0xd4>)
 8016e58:	7c9a      	ldrb	r2, [r3, #18]
 8016e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8016e8c <perform_test+0xd4>)
 8016e5c:	7c5b      	ldrb	r3, [r3, #17]
 8016e5e:	9300      	str	r3, [sp, #0]
 8016e60:	4613      	mov	r3, r2
 8016e62:	4a0d      	ldr	r2, [pc, #52]	@ (8016e98 <perform_test+0xe0>)
 8016e64:	4911      	ldr	r1, [pc, #68]	@ (8016eac <perform_test+0xf4>)
 8016e66:	4812      	ldr	r0, [pc, #72]	@ (8016eb0 <perform_test+0xf8>)
 8016e68:	f000 fabe 	bl	80173e8 <Test_N_Perform_Msg>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	e009      	b.n	8016e84 <perform_test+0xcc>
			break;
		case TEST_ADC:
			return Test_N_Perform("ADC", ADC_Test_Perform, in_msg.n_iter);
 8016e70:	4b06      	ldr	r3, [pc, #24]	@ (8016e8c <perform_test+0xd4>)
 8016e72:	7c5b      	ldrb	r3, [r3, #17]
 8016e74:	461a      	mov	r2, r3
 8016e76:	490f      	ldr	r1, [pc, #60]	@ (8016eb4 <perform_test+0xfc>)
 8016e78:	480f      	ldr	r0, [pc, #60]	@ (8016eb8 <perform_test+0x100>)
 8016e7a:	f000 fa85 	bl	8017388 <Test_N_Perform>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	e000      	b.n	8016e84 <perform_test+0xcc>
			break;
		default:
			return TEST_FAILED;
 8016e82:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bd80      	pop	{r7, pc}
 8016e8a:	bf00      	nop
 8016e8c:	20008864 	.word	0x20008864
 8016e90:	08017451 	.word	0x08017451
 8016e94:	0801bca8 	.word	0x0801bca8
 8016e98:	20008877 	.word	0x20008877
 8016e9c:	0801755d 	.word	0x0801755d
 8016ea0:	0801bcb0 	.word	0x0801bcb0
 8016ea4:	0801716d 	.word	0x0801716d
 8016ea8:	0801bcb8 	.word	0x0801bcb8
 8016eac:	08016f1d 	.word	0x08016f1d
 8016eb0:	0801bcbc 	.word	0x0801bcbc
 8016eb4:	08016ba1 	.word	0x08016ba1
 8016eb8:	0801bcc0 	.word	0x0801bcc0

08016ebc <send_result>:

void send_result(uint8_t result)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b086      	sub	sp, #24
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 8016ec6:	4b14      	ldr	r3, [pc, #80]	@ (8016f18 <send_result+0x5c>)
 8016ec8:	68db      	ldr	r3, [r3, #12]
 8016eca:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 8016ecc:	79fb      	ldrb	r3, [r7, #7]
 8016ece:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 8016ed0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016ed4:	2105      	movs	r1, #5
 8016ed6:	2036      	movs	r0, #54	@ 0x36
 8016ed8:	f7f6 fc24 	bl	800d724 <pbuf_alloc>
 8016edc:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d014      	beq.n	8016f0e <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 8016ee4:	697b      	ldr	r3, [r7, #20]
 8016ee6:	685b      	ldr	r3, [r3, #4]
 8016ee8:	461a      	mov	r2, r3
 8016eea:	f107 030c 	add.w	r3, r7, #12
 8016eee:	6818      	ldr	r0, [r3, #0]
 8016ef0:	6010      	str	r0, [r2, #0]
 8016ef2:	791b      	ldrb	r3, [r3, #4]
 8016ef4:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 8016ef6:	4b08      	ldr	r3, [pc, #32]	@ (8016f18 <send_result+0x5c>)
 8016ef8:	6818      	ldr	r0, [r3, #0]
 8016efa:	4b07      	ldr	r3, [pc, #28]	@ (8016f18 <send_result+0x5c>)
 8016efc:	685a      	ldr	r2, [r3, #4]
 8016efe:	4b06      	ldr	r3, [pc, #24]	@ (8016f18 <send_result+0x5c>)
 8016f00:	891b      	ldrh	r3, [r3, #8]
 8016f02:	6979      	ldr	r1, [r7, #20]
 8016f04:	f7fc fec2 	bl	8013c8c <udp_sendto>
	    pbuf_free(resp_buf);
 8016f08:	6978      	ldr	r0, [r7, #20]
 8016f0a:	f7f6 feef 	bl	800dcec <pbuf_free>
	}
}
 8016f0e:	bf00      	nop
 8016f10:	3718      	adds	r7, #24
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	20008864 	.word	0x20008864

08016f1c <I2C_Test_Perform>:
volatile uint8_t i2c1_rx_done;
volatile uint8_t i2c2_tx_done;
volatile uint8_t i2c2_rx_done;

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8016f1c:	b590      	push	{r4, r7, lr}
 8016f1e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016f28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016f2c:	6018      	str	r0, [r3, #0]
 8016f2e:	460a      	mov	r2, r1
 8016f30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016f34:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016f38:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing i2c test\n");
 8016f3a:	4855      	ldr	r0, [pc, #340]	@ (8017090 <I2C_Test_Perform+0x174>)
 8016f3c:	f000 fd48 	bl	80179d0 <puts>
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 8016f40:	4b54      	ldr	r3, [pc, #336]	@ (8017094 <I2C_Test_Perform+0x178>)
 8016f42:	2200      	movs	r2, #0
 8016f44:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 8016f46:	4b54      	ldr	r3, [pc, #336]	@ (8017098 <I2C_Test_Perform+0x17c>)
 8016f48:	2200      	movs	r2, #0
 8016f4a:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 8016f4c:	4b53      	ldr	r3, [pc, #332]	@ (801709c <I2C_Test_Perform+0x180>)
 8016f4e:	2200      	movs	r2, #0
 8016f50:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 8016f52:	4b53      	ldr	r3, [pc, #332]	@ (80170a0 <I2C_Test_Perform+0x184>)
 8016f54:	2200      	movs	r2, #0
 8016f56:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 8016f58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016f5c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016f60:	781b      	ldrb	r3, [r3, #0]
 8016f62:	b29a      	uxth	r2, r3
 8016f64:	f107 0308 	add.w	r3, r7, #8
 8016f68:	4619      	mov	r1, r3
 8016f6a:	484e      	ldr	r0, [pc, #312]	@ (80170a4 <I2C_Test_Perform+0x188>)
 8016f6c:	f7ee fbd0 	bl	8005710 <HAL_I2C_Slave_Receive_DMA>
 8016f70:	4603      	mov	r3, r0
 8016f72:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016f76:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d004      	beq.n	8016f88 <I2C_Test_Perform+0x6c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
 8016f7e:	484a      	ldr	r0, [pc, #296]	@ (80170a8 <I2C_Test_Perform+0x18c>)
 8016f80:	f000 fd26 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8016f84:	23ff      	movs	r3, #255	@ 0xff
 8016f86:	e07d      	b.n	8017084 <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 8016f88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016f8c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016f90:	781b      	ldrb	r3, [r3, #0]
 8016f92:	b29b      	uxth	r3, r3
 8016f94:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8016f98:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8016f9c:	6812      	ldr	r2, [r2, #0]
 8016f9e:	2114      	movs	r1, #20
 8016fa0:	4842      	ldr	r0, [pc, #264]	@ (80170ac <I2C_Test_Perform+0x190>)
 8016fa2:	f7ee f8c5 	bl	8005130 <HAL_I2C_Master_Transmit_DMA>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016fac:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d004      	beq.n	8016fbe <I2C_Test_Perform+0xa2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
 8016fb4:	483e      	ldr	r0, [pc, #248]	@ (80170b0 <I2C_Test_Perform+0x194>)
 8016fb6:	f000 fd0b 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8016fba:	23ff      	movs	r3, #255	@ 0xff
 8016fbc:	e062      	b.n	8017084 <I2C_Test_Perform+0x168>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 8016fbe:	bf00      	nop
 8016fc0:	4b37      	ldr	r3, [pc, #220]	@ (80170a0 <I2C_Test_Perform+0x184>)
 8016fc2:	781b      	ldrb	r3, [r3, #0]
 8016fc4:	b2db      	uxtb	r3, r3
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d0fa      	beq.n	8016fc0 <I2C_Test_Perform+0xa4>
 8016fca:	4b32      	ldr	r3, [pc, #200]	@ (8017094 <I2C_Test_Perform+0x178>)
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	b2db      	uxtb	r3, r3
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d0f5      	beq.n	8016fc0 <I2C_Test_Perform+0xa4>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 8016fd4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016fd8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8016fe4:	2114      	movs	r1, #20
 8016fe6:	4831      	ldr	r0, [pc, #196]	@ (80170ac <I2C_Test_Perform+0x190>)
 8016fe8:	f7ee f9b6 	bl	8005358 <HAL_I2C_Master_Receive_DMA>
 8016fec:	4603      	mov	r3, r0
 8016fee:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016ff2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d004      	beq.n	8017004 <I2C_Test_Perform+0xe8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
 8016ffa:	482e      	ldr	r0, [pc, #184]	@ (80170b4 <I2C_Test_Perform+0x198>)
 8016ffc:	f000 fce8 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8017000:	23ff      	movs	r3, #255	@ 0xff
 8017002:	e03f      	b.n	8017084 <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 8017004:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017008:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	b29a      	uxth	r2, r3
 8017010:	f107 0308 	add.w	r3, r7, #8
 8017014:	4619      	mov	r1, r3
 8017016:	4823      	ldr	r0, [pc, #140]	@ (80170a4 <I2C_Test_Perform+0x188>)
 8017018:	f7ee fa8e 	bl	8005538 <HAL_I2C_Slave_Transmit_DMA>
 801701c:	4603      	mov	r3, r0
 801701e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8017022:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8017026:	2b00      	cmp	r3, #0
 8017028:	d004      	beq.n	8017034 <I2C_Test_Perform+0x118>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
 801702a:	4823      	ldr	r0, [pc, #140]	@ (80170b8 <I2C_Test_Perform+0x19c>)
 801702c:	f000 fcd0 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8017030:	23ff      	movs	r3, #255	@ 0xff
 8017032:	e027      	b.n	8017084 <I2C_Test_Perform+0x168>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 8017034:	bf00      	nop
 8017036:	4b18      	ldr	r3, [pc, #96]	@ (8017098 <I2C_Test_Perform+0x17c>)
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	b2db      	uxtb	r3, r3
 801703c:	2b00      	cmp	r3, #0
 801703e:	d0fa      	beq.n	8017036 <I2C_Test_Perform+0x11a>
 8017040:	4b16      	ldr	r3, [pc, #88]	@ (801709c <I2C_Test_Perform+0x180>)
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	b2db      	uxtb	r3, r3
 8017046:	2b00      	cmp	r3, #0
 8017048:	d0f5      	beq.n	8017036 <I2C_Test_Perform+0x11a>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801704a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801704e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8017052:	781c      	ldrb	r4, [r3, #0]
 8017054:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8017058:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801705c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8017060:	7819      	ldrb	r1, [r3, #0]
 8017062:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017066:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801706a:	4623      	mov	r3, r4
 801706c:	6800      	ldr	r0, [r0, #0]
 801706e:	f7ff fdf7 	bl	8016c60 <Match_CRC>
 8017072:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8017076:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801707a:	2b01      	cmp	r3, #1
 801707c:	d101      	bne.n	8017082 <I2C_Test_Perform+0x166>
 801707e:	2301      	movs	r3, #1
 8017080:	e000      	b.n	8017084 <I2C_Test_Perform+0x168>

	return TEST_FAILED;
 8017082:	23ff      	movs	r3, #255	@ 0xff
}
 8017084:	4618      	mov	r0, r3
 8017086:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801708a:	46bd      	mov	sp, r7
 801708c:	bd90      	pop	{r4, r7, pc}
 801708e:	bf00      	nop
 8017090:	0801bcc4 	.word	0x0801bcc4
 8017094:	20008978 	.word	0x20008978
 8017098:	20008979 	.word	0x20008979
 801709c:	2000897a 	.word	0x2000897a
 80170a0:	2000897b 	.word	0x2000897b
 80170a4:	20000348 	.word	0x20000348
 80170a8:	0801bcd8 	.word	0x0801bcd8
 80170ac:	200002f4 	.word	0x200002f4
 80170b0:	0801bcf0 	.word	0x0801bcf0
 80170b4:	0801bd08 	.word	0x0801bd08
 80170b8:	0801bd20 	.word	0x0801bd20

080170bc <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80170bc:	b480      	push	{r7}
 80170be:	b083      	sub	sp, #12
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	4a06      	ldr	r2, [pc, #24]	@ (80170e0 <HAL_I2C_MasterTxCpltCallback+0x24>)
 80170c8:	4293      	cmp	r3, r2
 80170ca:	d102      	bne.n	80170d2 <HAL_I2C_MasterTxCpltCallback+0x16>
 80170cc:	4b05      	ldr	r3, [pc, #20]	@ (80170e4 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80170ce:	2201      	movs	r2, #1
 80170d0:	701a      	strb	r2, [r3, #0]
}
 80170d2:	bf00      	nop
 80170d4:	370c      	adds	r7, #12
 80170d6:	46bd      	mov	sp, r7
 80170d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170dc:	4770      	bx	lr
 80170de:	bf00      	nop
 80170e0:	200002f4 	.word	0x200002f4
 80170e4:	20008978 	.word	0x20008978

080170e8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80170e8:	b480      	push	{r7}
 80170ea:	b083      	sub	sp, #12
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	4a06      	ldr	r2, [pc, #24]	@ (801710c <HAL_I2C_MasterRxCpltCallback+0x24>)
 80170f4:	4293      	cmp	r3, r2
 80170f6:	d102      	bne.n	80170fe <HAL_I2C_MasterRxCpltCallback+0x16>
 80170f8:	4b05      	ldr	r3, [pc, #20]	@ (8017110 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80170fa:	2201      	movs	r2, #1
 80170fc:	701a      	strb	r2, [r3, #0]
}
 80170fe:	bf00      	nop
 8017100:	370c      	adds	r7, #12
 8017102:	46bd      	mov	sp, r7
 8017104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017108:	4770      	bx	lr
 801710a:	bf00      	nop
 801710c:	200002f4 	.word	0x200002f4
 8017110:	20008979 	.word	0x20008979

08017114 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017114:	b480      	push	{r7}
 8017116:	b083      	sub	sp, #12
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	4a06      	ldr	r2, [pc, #24]	@ (8017138 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8017120:	4293      	cmp	r3, r2
 8017122:	d102      	bne.n	801712a <HAL_I2C_SlaveTxCpltCallback+0x16>
 8017124:	4b05      	ldr	r3, [pc, #20]	@ (801713c <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8017126:	2201      	movs	r2, #1
 8017128:	701a      	strb	r2, [r3, #0]
}
 801712a:	bf00      	nop
 801712c:	370c      	adds	r7, #12
 801712e:	46bd      	mov	sp, r7
 8017130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017134:	4770      	bx	lr
 8017136:	bf00      	nop
 8017138:	20000348 	.word	0x20000348
 801713c:	2000897a 	.word	0x2000897a

08017140 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017140:	b480      	push	{r7}
 8017142:	b083      	sub	sp, #12
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	4a06      	ldr	r2, [pc, #24]	@ (8017164 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d102      	bne.n	8017156 <HAL_I2C_SlaveRxCpltCallback+0x16>
 8017150:	4b05      	ldr	r3, [pc, #20]	@ (8017168 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8017152:	2201      	movs	r2, #1
 8017154:	701a      	strb	r2, [r3, #0]
}
 8017156:	bf00      	nop
 8017158:	370c      	adds	r7, #12
 801715a:	46bd      	mov	sp, r7
 801715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017160:	4770      	bx	lr
 8017162:	bf00      	nop
 8017164:	20000348 	.word	0x20000348
 8017168:	2000897b 	.word	0x2000897b

0801716c <SPI_Test_Perform>:
volatile uint8_t spi1_rx_done;
volatile uint8_t spi4_tx_done;
volatile uint8_t spi4_rx_done;

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801716c:	b590      	push	{r4, r7, lr}
 801716e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8017172:	af00      	add	r7, sp, #0
 8017174:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017178:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801717c:	6018      	str	r0, [r3, #0]
 801717e:	460a      	mov	r2, r1
 8017180:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017184:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8017188:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing SPI test\n");
 801718a:	4854      	ldr	r0, [pc, #336]	@ (80172dc <SPI_Test_Perform+0x170>)
 801718c:	f000 fc20 	bl	80179d0 <puts>
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 8017190:	4b53      	ldr	r3, [pc, #332]	@ (80172e0 <SPI_Test_Perform+0x174>)
 8017192:	2200      	movs	r2, #0
 8017194:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 8017196:	4b53      	ldr	r3, [pc, #332]	@ (80172e4 <SPI_Test_Perform+0x178>)
 8017198:	2200      	movs	r2, #0
 801719a:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 801719c:	4b52      	ldr	r3, [pc, #328]	@ (80172e8 <SPI_Test_Perform+0x17c>)
 801719e:	2200      	movs	r2, #0
 80171a0:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 80171a2:	4b52      	ldr	r3, [pc, #328]	@ (80172ec <SPI_Test_Perform+0x180>)
 80171a4:	2200      	movs	r2, #0
 80171a6:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 80171a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80171ac:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	b29a      	uxth	r2, r3
 80171b4:	f107 0308 	add.w	r3, r7, #8
 80171b8:	4619      	mov	r1, r3
 80171ba:	484d      	ldr	r0, [pc, #308]	@ (80172f0 <SPI_Test_Perform+0x184>)
 80171bc:	f7f1 fbc4 	bl	8008948 <HAL_SPI_Receive_DMA>
 80171c0:	4603      	mov	r3, r0
 80171c2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80171c6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d004      	beq.n	80171d8 <SPI_Test_Perform+0x6c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
 80171ce:	4849      	ldr	r0, [pc, #292]	@ (80172f4 <SPI_Test_Perform+0x188>)
 80171d0:	f000 fbfe 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 80171d4:	23ff      	movs	r3, #255	@ 0xff
 80171d6:	e07c      	b.n	80172d2 <SPI_Test_Perform+0x166>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 80171d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80171dc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	b29a      	uxth	r2, r3
 80171e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80171e8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80171ec:	6819      	ldr	r1, [r3, #0]
 80171ee:	4842      	ldr	r0, [pc, #264]	@ (80172f8 <SPI_Test_Perform+0x18c>)
 80171f0:	f7f1 fabc 	bl	800876c <HAL_SPI_Transmit_DMA>
 80171f4:	4603      	mov	r3, r0
 80171f6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80171fa:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d004      	beq.n	801720c <SPI_Test_Perform+0xa0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
 8017202:	483e      	ldr	r0, [pc, #248]	@ (80172fc <SPI_Test_Perform+0x190>)
 8017204:	f000 fbe4 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8017208:	23ff      	movs	r3, #255	@ 0xff
 801720a:	e062      	b.n	80172d2 <SPI_Test_Perform+0x166>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 801720c:	bf00      	nop
 801720e:	4b37      	ldr	r3, [pc, #220]	@ (80172ec <SPI_Test_Perform+0x180>)
 8017210:	781b      	ldrb	r3, [r3, #0]
 8017212:	b2db      	uxtb	r3, r3
 8017214:	2b00      	cmp	r3, #0
 8017216:	d0fa      	beq.n	801720e <SPI_Test_Perform+0xa2>
 8017218:	4b31      	ldr	r3, [pc, #196]	@ (80172e0 <SPI_Test_Perform+0x174>)
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	b2db      	uxtb	r3, r3
 801721e:	2b00      	cmp	r3, #0
 8017220:	d0f5      	beq.n	801720e <SPI_Test_Perform+0xa2>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 8017222:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017226:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	b29a      	uxth	r2, r3
 801722e:	f107 0308 	add.w	r3, r7, #8
 8017232:	4619      	mov	r1, r3
 8017234:	482e      	ldr	r0, [pc, #184]	@ (80172f0 <SPI_Test_Perform+0x184>)
 8017236:	f7f1 fa99 	bl	800876c <HAL_SPI_Transmit_DMA>
 801723a:	4603      	mov	r3, r0
 801723c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8017240:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8017244:	2b00      	cmp	r3, #0
 8017246:	d004      	beq.n	8017252 <SPI_Test_Perform+0xe6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
 8017248:	482d      	ldr	r0, [pc, #180]	@ (8017300 <SPI_Test_Perform+0x194>)
 801724a:	f000 fbc1 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 801724e:	23ff      	movs	r3, #255	@ 0xff
 8017250:	e03f      	b.n	80172d2 <SPI_Test_Perform+0x166>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 8017252:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017256:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801725a:	781b      	ldrb	r3, [r3, #0]
 801725c:	b29a      	uxth	r2, r3
 801725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017262:	4619      	mov	r1, r3
 8017264:	4824      	ldr	r0, [pc, #144]	@ (80172f8 <SPI_Test_Perform+0x18c>)
 8017266:	f7f1 fb6f 	bl	8008948 <HAL_SPI_Receive_DMA>
 801726a:	4603      	mov	r3, r0
 801726c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8017270:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8017274:	2b00      	cmp	r3, #0
 8017276:	d004      	beq.n	8017282 <SPI_Test_Perform+0x116>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
 8017278:	4822      	ldr	r0, [pc, #136]	@ (8017304 <SPI_Test_Perform+0x198>)
 801727a:	f000 fba9 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 801727e:	23ff      	movs	r3, #255	@ 0xff
 8017280:	e027      	b.n	80172d2 <SPI_Test_Perform+0x166>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 8017282:	bf00      	nop
 8017284:	4b17      	ldr	r3, [pc, #92]	@ (80172e4 <SPI_Test_Perform+0x178>)
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	b2db      	uxtb	r3, r3
 801728a:	2b00      	cmp	r3, #0
 801728c:	d0fa      	beq.n	8017284 <SPI_Test_Perform+0x118>
 801728e:	4b16      	ldr	r3, [pc, #88]	@ (80172e8 <SPI_Test_Perform+0x17c>)
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	b2db      	uxtb	r3, r3
 8017294:	2b00      	cmp	r3, #0
 8017296:	d0f5      	beq.n	8017284 <SPI_Test_Perform+0x118>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 8017298:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801729c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80172a0:	781c      	ldrb	r4, [r3, #0]
 80172a2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80172a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80172aa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80172ae:	7819      	ldrb	r1, [r3, #0]
 80172b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80172b4:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80172b8:	4623      	mov	r3, r4
 80172ba:	6800      	ldr	r0, [r0, #0]
 80172bc:	f7ff fcd0 	bl	8016c60 <Match_CRC>
 80172c0:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80172c4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80172c8:	2b01      	cmp	r3, #1
 80172ca:	d101      	bne.n	80172d0 <SPI_Test_Perform+0x164>
 80172cc:	2301      	movs	r3, #1
 80172ce:	e000      	b.n	80172d2 <SPI_Test_Perform+0x166>

	return TEST_FAILED;
 80172d0:	23ff      	movs	r3, #255	@ 0xff
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd90      	pop	{r4, r7, pc}
 80172dc:	0801bd38 	.word	0x0801bd38
 80172e0:	2000897c 	.word	0x2000897c
 80172e4:	2000897d 	.word	0x2000897d
 80172e8:	2000897e 	.word	0x2000897e
 80172ec:	2000897f 	.word	0x2000897f
 80172f0:	20000580 	.word	0x20000580
 80172f4:	0801bd4c 	.word	0x0801bd4c
 80172f8:	2000051c 	.word	0x2000051c
 80172fc:	0801bd64 	.word	0x0801bd64
 8017300:	0801bd7c 	.word	0x0801bd7c
 8017304:	0801bd94 	.word	0x0801bd94

08017308 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8017308:	b480      	push	{r7}
 801730a:	b083      	sub	sp, #12
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	4a09      	ldr	r2, [pc, #36]	@ (8017338 <HAL_SPI_TxCpltCallback+0x30>)
 8017314:	4293      	cmp	r3, r2
 8017316:	d102      	bne.n	801731e <HAL_SPI_TxCpltCallback+0x16>
 8017318:	4b08      	ldr	r3, [pc, #32]	@ (801733c <HAL_SPI_TxCpltCallback+0x34>)
 801731a:	2201      	movs	r2, #1
 801731c:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4a07      	ldr	r2, [pc, #28]	@ (8017340 <HAL_SPI_TxCpltCallback+0x38>)
 8017322:	4293      	cmp	r3, r2
 8017324:	d102      	bne.n	801732c <HAL_SPI_TxCpltCallback+0x24>
 8017326:	4b07      	ldr	r3, [pc, #28]	@ (8017344 <HAL_SPI_TxCpltCallback+0x3c>)
 8017328:	2201      	movs	r2, #1
 801732a:	701a      	strb	r2, [r3, #0]
}
 801732c:	bf00      	nop
 801732e:	370c      	adds	r7, #12
 8017330:	46bd      	mov	sp, r7
 8017332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017336:	4770      	bx	lr
 8017338:	2000051c 	.word	0x2000051c
 801733c:	2000897c 	.word	0x2000897c
 8017340:	20000580 	.word	0x20000580
 8017344:	2000897e 	.word	0x2000897e

08017348 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8017348:	b480      	push	{r7}
 801734a:	b083      	sub	sp, #12
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	4a09      	ldr	r2, [pc, #36]	@ (8017378 <HAL_SPI_RxCpltCallback+0x30>)
 8017354:	4293      	cmp	r3, r2
 8017356:	d102      	bne.n	801735e <HAL_SPI_RxCpltCallback+0x16>
 8017358:	4b08      	ldr	r3, [pc, #32]	@ (801737c <HAL_SPI_RxCpltCallback+0x34>)
 801735a:	2201      	movs	r2, #1
 801735c:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	4a07      	ldr	r2, [pc, #28]	@ (8017380 <HAL_SPI_RxCpltCallback+0x38>)
 8017362:	4293      	cmp	r3, r2
 8017364:	d102      	bne.n	801736c <HAL_SPI_RxCpltCallback+0x24>
 8017366:	4b07      	ldr	r3, [pc, #28]	@ (8017384 <HAL_SPI_RxCpltCallback+0x3c>)
 8017368:	2201      	movs	r2, #1
 801736a:	701a      	strb	r2, [r3, #0]
}
 801736c:	bf00      	nop
 801736e:	370c      	adds	r7, #12
 8017370:	46bd      	mov	sp, r7
 8017372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017376:	4770      	bx	lr
 8017378:	2000051c 	.word	0x2000051c
 801737c:	2000897d 	.word	0x2000897d
 8017380:	20000580 	.word	0x20000580
 8017384:	2000897f 	.word	0x2000897f

08017388 <Test_N_Perform>:

#include "tests.h"
#include <stdio.h>

uint8_t Test_N_Perform(const char *test_name, TestFunction test_func, uint8_t n)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af00      	add	r7, sp, #0
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	4613      	mov	r3, r2
 8017394:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < n; i++)
 8017396:	2300      	movs	r3, #0
 8017398:	617b      	str	r3, [r7, #20]
 801739a:	e017      	b.n	80173cc <Test_N_Perform+0x44>
	{
		if (test_func() == TEST_FAILED)
 801739c:	68bb      	ldr	r3, [r7, #8]
 801739e:	4798      	blx	r3
 80173a0:	4603      	mov	r3, r0
 80173a2:	2bff      	cmp	r3, #255	@ 0xff
 80173a4:	d108      	bne.n	80173b8 <Test_N_Perform+0x30>
		{
#ifdef PRINT_TESTS_DEBUG
			printf("TEST %d: %s test failed\n", i + 1, test_name);
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	3301      	adds	r3, #1
 80173aa:	68fa      	ldr	r2, [r7, #12]
 80173ac:	4619      	mov	r1, r3
 80173ae:	480c      	ldr	r0, [pc, #48]	@ (80173e0 <Test_N_Perform+0x58>)
 80173b0:	f000 fa9e 	bl	80178f0 <iprintf>
#endif
			return TEST_FAILED;
 80173b4:	23ff      	movs	r3, #255	@ 0xff
 80173b6:	e00e      	b.n	80173d6 <Test_N_Perform+0x4e>
		}
#ifdef PRINT_TESTS_DEBUG
		else
		{
			printf("TEST %d: %s test success\n", i + 1, test_name);
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	3301      	adds	r3, #1
 80173bc:	68fa      	ldr	r2, [r7, #12]
 80173be:	4619      	mov	r1, r3
 80173c0:	4808      	ldr	r0, [pc, #32]	@ (80173e4 <Test_N_Perform+0x5c>)
 80173c2:	f000 fa95 	bl	80178f0 <iprintf>
	for (int i = 0; i < n; i++)
 80173c6:	697b      	ldr	r3, [r7, #20]
 80173c8:	3301      	adds	r3, #1
 80173ca:	617b      	str	r3, [r7, #20]
 80173cc:	79fb      	ldrb	r3, [r7, #7]
 80173ce:	697a      	ldr	r2, [r7, #20]
 80173d0:	429a      	cmp	r2, r3
 80173d2:	dbe3      	blt.n	801739c <Test_N_Perform+0x14>
		}
#endif
	}

	return TEST_SUCCESS;
 80173d4:	2301      	movs	r3, #1
}
 80173d6:	4618      	mov	r0, r3
 80173d8:	3718      	adds	r7, #24
 80173da:	46bd      	mov	sp, r7
 80173dc:	bd80      	pop	{r7, pc}
 80173de:	bf00      	nop
 80173e0:	0801bdac 	.word	0x0801bdac
 80173e4:	0801bdc8 	.word	0x0801bdc8

080173e8 <Test_N_Perform_Msg>:

uint8_t Test_N_Perform_Msg(const char *test_name, MsgTestFunction test_func, uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b086      	sub	sp, #24
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	60f8      	str	r0, [r7, #12]
 80173f0:	60b9      	str	r1, [r7, #8]
 80173f2:	607a      	str	r2, [r7, #4]
 80173f4:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < n; i++)
 80173f6:	2300      	movs	r3, #0
 80173f8:	617b      	str	r3, [r7, #20]
 80173fa:	e01a      	b.n	8017432 <Test_N_Perform_Msg+0x4a>
	{
		if (test_func(msg, msg_len) == TEST_FAILED)
 80173fc:	78fa      	ldrb	r2, [r7, #3]
 80173fe:	68bb      	ldr	r3, [r7, #8]
 8017400:	4611      	mov	r1, r2
 8017402:	6878      	ldr	r0, [r7, #4]
 8017404:	4798      	blx	r3
 8017406:	4603      	mov	r3, r0
 8017408:	2bff      	cmp	r3, #255	@ 0xff
 801740a:	d108      	bne.n	801741e <Test_N_Perform_Msg+0x36>
		{
#ifdef PRINT_TESTS_DEBUG
			printf("TEST %d: %s test failed\n", i + 1, test_name);
 801740c:	697b      	ldr	r3, [r7, #20]
 801740e:	3301      	adds	r3, #1
 8017410:	68fa      	ldr	r2, [r7, #12]
 8017412:	4619      	mov	r1, r3
 8017414:	480c      	ldr	r0, [pc, #48]	@ (8017448 <Test_N_Perform_Msg+0x60>)
 8017416:	f000 fa6b 	bl	80178f0 <iprintf>
#endif
			return TEST_FAILED;
 801741a:	23ff      	movs	r3, #255	@ 0xff
 801741c:	e00f      	b.n	801743e <Test_N_Perform_Msg+0x56>
		}
#ifdef PRINT_TESTS_DEBUG
		else
		{
			printf("TEST %d: %s test success\n", i + 1, test_name);
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	3301      	adds	r3, #1
 8017422:	68fa      	ldr	r2, [r7, #12]
 8017424:	4619      	mov	r1, r3
 8017426:	4809      	ldr	r0, [pc, #36]	@ (801744c <Test_N_Perform_Msg+0x64>)
 8017428:	f000 fa62 	bl	80178f0 <iprintf>
	for (int i = 0; i < n; i++)
 801742c:	697b      	ldr	r3, [r7, #20]
 801742e:	3301      	adds	r3, #1
 8017430:	617b      	str	r3, [r7, #20]
 8017432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017436:	697a      	ldr	r2, [r7, #20]
 8017438:	429a      	cmp	r2, r3
 801743a:	dbdf      	blt.n	80173fc <Test_N_Perform_Msg+0x14>
		}
#endif
	}

	return TEST_SUCCESS;
 801743c:	2301      	movs	r3, #1
}
 801743e:	4618      	mov	r0, r3
 8017440:	3718      	adds	r7, #24
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	0801bdac 	.word	0x0801bdac
 801744c:	0801bdc8 	.word	0x0801bdc8

08017450 <TIM_Test_Perform>:
 * TIM6 is configured to reset every 100 ms, then TIM2
 * count will be written to DMA buffer. The difference
 * between every sample of TIM2 should be exactly 5400000.
 */
uint8_t TIM_Test_Perform(void)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
 8017456:	482c      	ldr	r0, [pc, #176]	@ (8017508 <TIM_Test_Perform+0xb8>)
 8017458:	f000 faba 	bl	80179d0 <puts>
#endif

	tim6_count = 0;
 801745c:	4b2b      	ldr	r3, [pc, #172]	@ (801750c <TIM_Test_Perform+0xbc>)
 801745e:	2200      	movs	r2, #0
 8017460:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8017462:	482b      	ldr	r0, [pc, #172]	@ (8017510 <TIM_Test_Perform+0xc0>)
 8017464:	f7f2 fa8e 	bl	8009984 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8017468:	4b29      	ldr	r3, [pc, #164]	@ (8017510 <TIM_Test_Perform+0xc0>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	68da      	ldr	r2, [r3, #12]
 801746e:	4b28      	ldr	r3, [pc, #160]	@ (8017510 <TIM_Test_Perform+0xc0>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017476:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(&htim2);
 8017478:	4826      	ldr	r0, [pc, #152]	@ (8017514 <TIM_Test_Perform+0xc4>)
 801747a:	f7f2 f9eb 	bl	8009854 <HAL_TIM_Base_Start>

	HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 801747e:	4b25      	ldr	r3, [pc, #148]	@ (8017514 <TIM_Test_Perform+0xc4>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	3324      	adds	r3, #36	@ 0x24
 8017484:	4619      	mov	r1, r3
 8017486:	4a24      	ldr	r2, [pc, #144]	@ (8017518 <TIM_Test_Perform+0xc8>)
 8017488:	2305      	movs	r3, #5
 801748a:	4824      	ldr	r0, [pc, #144]	@ (801751c <TIM_Test_Perform+0xcc>)
 801748c:	f7eb fe44 	bl	8003118 <HAL_DMA_Start_IT>
			         (uint32_t)tim2_samples, N_SAMPLES);

	while(tim6_count < N_SAMPLES);
 8017490:	bf00      	nop
 8017492:	4b1e      	ldr	r3, [pc, #120]	@ (801750c <TIM_Test_Perform+0xbc>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	2b04      	cmp	r3, #4
 8017498:	ddfb      	ble.n	8017492 <TIM_Test_Perform+0x42>

	HAL_TIM_Base_Stop(&htim2);
 801749a:	481e      	ldr	r0, [pc, #120]	@ (8017514 <TIM_Test_Perform+0xc4>)
 801749c:	f7f2 fa4a 	bl	8009934 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim6);
 80174a0:	481b      	ldr	r0, [pc, #108]	@ (8017510 <TIM_Test_Perform+0xc0>)
 80174a2:	f7f2 fa47 	bl	8009934 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
 80174a6:	481e      	ldr	r0, [pc, #120]	@ (8017520 <TIM_Test_Perform+0xd0>)
 80174a8:	f000 fa92 	bl	80179d0 <puts>
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 80174ac:	2301      	movs	r3, #1
 80174ae:	607b      	str	r3, [r7, #4]
 80174b0:	e022      	b.n	80174f8 <TIM_Test_Perform+0xa8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	1e59      	subs	r1, r3, #1
			   tim2_samples[i] - tim2_samples[i-1]);
 80174b6:	4a18      	ldr	r2, [pc, #96]	@ (8017518 <TIM_Test_Perform+0xc8>)
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	3b01      	subs	r3, #1
 80174c2:	4815      	ldr	r0, [pc, #84]	@ (8017518 <TIM_Test_Perform+0xc8>)
 80174c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
 80174c8:	1ad3      	subs	r3, r2, r3
 80174ca:	460a      	mov	r2, r1
 80174cc:	6879      	ldr	r1, [r7, #4]
 80174ce:	4815      	ldr	r0, [pc, #84]	@ (8017524 <TIM_Test_Perform+0xd4>)
 80174d0:	f000 fa0e 	bl	80178f0 <iprintf>
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != 5400000)
 80174d4:	4a10      	ldr	r2, [pc, #64]	@ (8017518 <TIM_Test_Perform+0xc8>)
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	3b01      	subs	r3, #1
 80174e0:	490d      	ldr	r1, [pc, #52]	@ (8017518 <TIM_Test_Perform+0xc8>)
 80174e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80174e6:	1ad3      	subs	r3, r2, r3
 80174e8:	4a0f      	ldr	r2, [pc, #60]	@ (8017528 <TIM_Test_Perform+0xd8>)
 80174ea:	4293      	cmp	r3, r2
 80174ec:	d001      	beq.n	80174f2 <TIM_Test_Perform+0xa2>
			return TEST_FAILED;
 80174ee:	23ff      	movs	r3, #255	@ 0xff
 80174f0:	e006      	b.n	8017500 <TIM_Test_Perform+0xb0>
	for (int i = 1; i < N_SAMPLES; i++)
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	3301      	adds	r3, #1
 80174f6:	607b      	str	r3, [r7, #4]
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2b04      	cmp	r3, #4
 80174fc:	ddd9      	ble.n	80174b2 <TIM_Test_Perform+0x62>
	}

	return TEST_SUCCESS;
 80174fe:	2301      	movs	r3, #1
}
 8017500:	4618      	mov	r0, r3
 8017502:	3708      	adds	r7, #8
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}
 8017508:	0801bde4 	.word	0x0801bde4
 801750c:	20008980 	.word	0x20008980
 8017510:	200007b4 	.word	0x200007b4
 8017514:	20000768 	.word	0x20000768
 8017518:	20008984 	.word	0x20008984
 801751c:	20000800 	.word	0x20000800
 8017520:	0801bdfc 	.word	0x0801bdfc
 8017524:	0801be10 	.word	0x0801be10
 8017528:	005265c0 	.word	0x005265c0

0801752c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801752c:	b480      	push	{r7}
 801752e:	b083      	sub	sp, #12
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) tim6_count++;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	4a07      	ldr	r2, [pc, #28]	@ (8017554 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8017538:	4293      	cmp	r3, r2
 801753a:	d104      	bne.n	8017546 <HAL_TIM_PeriodElapsedCallback+0x1a>
 801753c:	4b06      	ldr	r3, [pc, #24]	@ (8017558 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	3301      	adds	r3, #1
 8017542:	4a05      	ldr	r2, [pc, #20]	@ (8017558 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8017544:	6013      	str	r3, [r2, #0]
}
 8017546:	bf00      	nop
 8017548:	370c      	adds	r7, #12
 801754a:	46bd      	mov	sp, r7
 801754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017550:	4770      	bx	lr
 8017552:	bf00      	nop
 8017554:	200007b4 	.word	0x200007b4
 8017558:	20008980 	.word	0x20008980

0801755c <UART_Test_Perform>:
// DMA synchronization
volatile uint8_t uart4_rx_done;
volatile uint8_t uart5_rx_done;

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801755c:	b590      	push	{r4, r7, lr}
 801755e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8017562:	af00      	add	r7, sp, #0
 8017564:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017568:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801756c:	6018      	str	r0, [r3, #0]
 801756e:	460a      	mov	r2, r1
 8017570:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017574:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8017578:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
 801757a:	4844      	ldr	r0, [pc, #272]	@ (801768c <UART_Test_Perform+0x130>)
 801757c:	f000 fa28 	bl	80179d0 <puts>
#endif

	uart4_rx_done = 0;
 8017580:	4b43      	ldr	r3, [pc, #268]	@ (8017690 <UART_Test_Perform+0x134>)
 8017582:	2200      	movs	r2, #0
 8017584:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 8017586:	4b43      	ldr	r3, [pc, #268]	@ (8017694 <UART_Test_Perform+0x138>)
 8017588:	2200      	movs	r2, #0
 801758a:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 801758c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017590:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	b29a      	uxth	r2, r3
 8017598:	f107 030c 	add.w	r3, r7, #12
 801759c:	4619      	mov	r1, r3
 801759e:	483e      	ldr	r0, [pc, #248]	@ (8017698 <UART_Test_Perform+0x13c>)
 80175a0:	f7f2 ff84 	bl	800a4ac <HAL_UART_Receive_DMA>
 80175a4:	4603      	mov	r3, r0
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d004      	beq.n	80175b4 <UART_Test_Perform+0x58>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
 80175aa:	483c      	ldr	r0, [pc, #240]	@ (801769c <UART_Test_Perform+0x140>)
 80175ac:	f000 fa10 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 80175b0:	23ff      	movs	r3, #255	@ 0xff
 80175b2:	e066      	b.n	8017682 <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 80175b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80175b8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	b29a      	uxth	r2, r3
 80175c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80175c4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80175c8:	6819      	ldr	r1, [r3, #0]
 80175ca:	4835      	ldr	r0, [pc, #212]	@ (80176a0 <UART_Test_Perform+0x144>)
 80175cc:	f7f2 ff10 	bl	800a3f0 <HAL_UART_Transmit_IT>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d004      	beq.n	80175e0 <UART_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
 80175d6:	4833      	ldr	r0, [pc, #204]	@ (80176a4 <UART_Test_Perform+0x148>)
 80175d8:	f000 f9fa 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 80175dc:	23ff      	movs	r3, #255	@ 0xff
 80175de:	e050      	b.n	8017682 <UART_Test_Perform+0x126>
	}
	while (!uart5_rx_done);
 80175e0:	bf00      	nop
 80175e2:	4b2c      	ldr	r3, [pc, #176]	@ (8017694 <UART_Test_Perform+0x138>)
 80175e4:	781b      	ldrb	r3, [r3, #0]
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d0fa      	beq.n	80175e2 <UART_Test_Perform+0x86>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 80175ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80175f0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80175f4:	781b      	ldrb	r3, [r3, #0]
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80175fc:	4619      	mov	r1, r3
 80175fe:	4828      	ldr	r0, [pc, #160]	@ (80176a0 <UART_Test_Perform+0x144>)
 8017600:	f7f2 ff54 	bl	800a4ac <HAL_UART_Receive_DMA>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d004      	beq.n	8017614 <UART_Test_Perform+0xb8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
 801760a:	4827      	ldr	r0, [pc, #156]	@ (80176a8 <UART_Test_Perform+0x14c>)
 801760c:	f000 f9e0 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8017610:	23ff      	movs	r3, #255	@ 0xff
 8017612:	e036      	b.n	8017682 <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8017614:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017618:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	b29a      	uxth	r2, r3
 8017620:	f107 030c 	add.w	r3, r7, #12
 8017624:	4619      	mov	r1, r3
 8017626:	481c      	ldr	r0, [pc, #112]	@ (8017698 <UART_Test_Perform+0x13c>)
 8017628:	f7f2 fee2 	bl	800a3f0 <HAL_UART_Transmit_IT>
 801762c:	4603      	mov	r3, r0
 801762e:	2b00      	cmp	r3, #0
 8017630:	d004      	beq.n	801763c <UART_Test_Perform+0xe0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
 8017632:	481e      	ldr	r0, [pc, #120]	@ (80176ac <UART_Test_Perform+0x150>)
 8017634:	f000 f9cc 	bl	80179d0 <puts>
#endif
		return TEST_FAILED;
 8017638:	23ff      	movs	r3, #255	@ 0xff
 801763a:	e022      	b.n	8017682 <UART_Test_Perform+0x126>
	}
	while (!uart4_rx_done);
 801763c:	bf00      	nop
 801763e:	4b14      	ldr	r3, [pc, #80]	@ (8017690 <UART_Test_Perform+0x134>)
 8017640:	781b      	ldrb	r3, [r3, #0]
 8017642:	b2db      	uxtb	r3, r3
 8017644:	2b00      	cmp	r3, #0
 8017646:	d0fa      	beq.n	801763e <UART_Test_Perform+0xe2>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8017648:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801764c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8017650:	781c      	ldrb	r4, [r3, #0]
 8017652:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8017656:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801765a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801765e:	7819      	ldrb	r1, [r3, #0]
 8017660:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8017664:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8017668:	4623      	mov	r3, r4
 801766a:	6800      	ldr	r0, [r0, #0]
 801766c:	f7ff faf8 	bl	8016c60 <Match_CRC>
 8017670:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8017674:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017678:	2b01      	cmp	r3, #1
 801767a:	d101      	bne.n	8017680 <UART_Test_Perform+0x124>
 801767c:	2301      	movs	r3, #1
 801767e:	e000      	b.n	8017682 <UART_Test_Perform+0x126>

	return TEST_FAILED;
 8017680:	23ff      	movs	r3, #255	@ 0xff
}
 8017682:	4618      	mov	r0, r3
 8017684:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8017688:	46bd      	mov	sp, r7
 801768a:	bd90      	pop	{r4, r7, pc}
 801768c:	0801be30 	.word	0x0801be30
 8017690:	20008998 	.word	0x20008998
 8017694:	20008999 	.word	0x20008999
 8017698:	200008e8 	.word	0x200008e8
 801769c:	0801be48 	.word	0x0801be48
 80176a0:	20000860 	.word	0x20000860
 80176a4:	0801be64 	.word	0x0801be64
 80176a8:	0801be80 	.word	0x0801be80
 80176ac:	0801be9c 	.word	0x0801be9c

080176b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80176b0:	b480      	push	{r7}
 80176b2:	b083      	sub	sp, #12
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	4a09      	ldr	r2, [pc, #36]	@ (80176e0 <HAL_UART_RxCpltCallback+0x30>)
 80176bc:	4293      	cmp	r3, r2
 80176be:	d102      	bne.n	80176c6 <HAL_UART_RxCpltCallback+0x16>
 80176c0:	4b08      	ldr	r3, [pc, #32]	@ (80176e4 <HAL_UART_RxCpltCallback+0x34>)
 80176c2:	2201      	movs	r2, #1
 80176c4:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	4a07      	ldr	r2, [pc, #28]	@ (80176e8 <HAL_UART_RxCpltCallback+0x38>)
 80176ca:	4293      	cmp	r3, r2
 80176cc:	d102      	bne.n	80176d4 <HAL_UART_RxCpltCallback+0x24>
 80176ce:	4b07      	ldr	r3, [pc, #28]	@ (80176ec <HAL_UART_RxCpltCallback+0x3c>)
 80176d0:	2201      	movs	r2, #1
 80176d2:	701a      	strb	r2, [r3, #0]
}
 80176d4:	bf00      	nop
 80176d6:	370c      	adds	r7, #12
 80176d8:	46bd      	mov	sp, r7
 80176da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176de:	4770      	bx	lr
 80176e0:	20000860 	.word	0x20000860
 80176e4:	20008998 	.word	0x20008998
 80176e8:	200008e8 	.word	0x200008e8
 80176ec:	20008999 	.word	0x20008999

080176f0 <rand>:
 80176f0:	4b16      	ldr	r3, [pc, #88]	@ (801774c <rand+0x5c>)
 80176f2:	b510      	push	{r4, lr}
 80176f4:	681c      	ldr	r4, [r3, #0]
 80176f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176f8:	b9b3      	cbnz	r3, 8017728 <rand+0x38>
 80176fa:	2018      	movs	r0, #24
 80176fc:	f000 fb44 	bl	8017d88 <malloc>
 8017700:	4602      	mov	r2, r0
 8017702:	6320      	str	r0, [r4, #48]	@ 0x30
 8017704:	b920      	cbnz	r0, 8017710 <rand+0x20>
 8017706:	4b12      	ldr	r3, [pc, #72]	@ (8017750 <rand+0x60>)
 8017708:	4812      	ldr	r0, [pc, #72]	@ (8017754 <rand+0x64>)
 801770a:	2152      	movs	r1, #82	@ 0x52
 801770c:	f000 fad4 	bl	8017cb8 <__assert_func>
 8017710:	4911      	ldr	r1, [pc, #68]	@ (8017758 <rand+0x68>)
 8017712:	4b12      	ldr	r3, [pc, #72]	@ (801775c <rand+0x6c>)
 8017714:	e9c0 1300 	strd	r1, r3, [r0]
 8017718:	4b11      	ldr	r3, [pc, #68]	@ (8017760 <rand+0x70>)
 801771a:	6083      	str	r3, [r0, #8]
 801771c:	230b      	movs	r3, #11
 801771e:	8183      	strh	r3, [r0, #12]
 8017720:	2100      	movs	r1, #0
 8017722:	2001      	movs	r0, #1
 8017724:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017728:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801772a:	480e      	ldr	r0, [pc, #56]	@ (8017764 <rand+0x74>)
 801772c:	690b      	ldr	r3, [r1, #16]
 801772e:	694c      	ldr	r4, [r1, #20]
 8017730:	4a0d      	ldr	r2, [pc, #52]	@ (8017768 <rand+0x78>)
 8017732:	4358      	muls	r0, r3
 8017734:	fb02 0004 	mla	r0, r2, r4, r0
 8017738:	fba3 3202 	umull	r3, r2, r3, r2
 801773c:	3301      	adds	r3, #1
 801773e:	eb40 0002 	adc.w	r0, r0, r2
 8017742:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017746:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801774a:	bd10      	pop	{r4, pc}
 801774c:	2000007c 	.word	0x2000007c
 8017750:	0801bfee 	.word	0x0801bfee
 8017754:	0801c005 	.word	0x0801c005
 8017758:	abcd330e 	.word	0xabcd330e
 801775c:	e66d1234 	.word	0xe66d1234
 8017760:	0005deec 	.word	0x0005deec
 8017764:	5851f42d 	.word	0x5851f42d
 8017768:	4c957f2d 	.word	0x4c957f2d

0801776c <std>:
 801776c:	2300      	movs	r3, #0
 801776e:	b510      	push	{r4, lr}
 8017770:	4604      	mov	r4, r0
 8017772:	e9c0 3300 	strd	r3, r3, [r0]
 8017776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801777a:	6083      	str	r3, [r0, #8]
 801777c:	8181      	strh	r1, [r0, #12]
 801777e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017780:	81c2      	strh	r2, [r0, #14]
 8017782:	6183      	str	r3, [r0, #24]
 8017784:	4619      	mov	r1, r3
 8017786:	2208      	movs	r2, #8
 8017788:	305c      	adds	r0, #92	@ 0x5c
 801778a:	f000 fa11 	bl	8017bb0 <memset>
 801778e:	4b0d      	ldr	r3, [pc, #52]	@ (80177c4 <std+0x58>)
 8017790:	6263      	str	r3, [r4, #36]	@ 0x24
 8017792:	4b0d      	ldr	r3, [pc, #52]	@ (80177c8 <std+0x5c>)
 8017794:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017796:	4b0d      	ldr	r3, [pc, #52]	@ (80177cc <std+0x60>)
 8017798:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801779a:	4b0d      	ldr	r3, [pc, #52]	@ (80177d0 <std+0x64>)
 801779c:	6323      	str	r3, [r4, #48]	@ 0x30
 801779e:	4b0d      	ldr	r3, [pc, #52]	@ (80177d4 <std+0x68>)
 80177a0:	6224      	str	r4, [r4, #32]
 80177a2:	429c      	cmp	r4, r3
 80177a4:	d006      	beq.n	80177b4 <std+0x48>
 80177a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80177aa:	4294      	cmp	r4, r2
 80177ac:	d002      	beq.n	80177b4 <std+0x48>
 80177ae:	33d0      	adds	r3, #208	@ 0xd0
 80177b0:	429c      	cmp	r4, r3
 80177b2:	d105      	bne.n	80177c0 <std+0x54>
 80177b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80177b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177bc:	f000 ba6a 	b.w	8017c94 <__retarget_lock_init_recursive>
 80177c0:	bd10      	pop	{r4, pc}
 80177c2:	bf00      	nop
 80177c4:	080179e1 	.word	0x080179e1
 80177c8:	08017a03 	.word	0x08017a03
 80177cc:	08017a3b 	.word	0x08017a3b
 80177d0:	08017a5f 	.word	0x08017a5f
 80177d4:	2000899c 	.word	0x2000899c

080177d8 <stdio_exit_handler>:
 80177d8:	4a02      	ldr	r2, [pc, #8]	@ (80177e4 <stdio_exit_handler+0xc>)
 80177da:	4903      	ldr	r1, [pc, #12]	@ (80177e8 <stdio_exit_handler+0x10>)
 80177dc:	4803      	ldr	r0, [pc, #12]	@ (80177ec <stdio_exit_handler+0x14>)
 80177de:	f000 b869 	b.w	80178b4 <_fwalk_sglue>
 80177e2:	bf00      	nop
 80177e4:	20000070 	.word	0x20000070
 80177e8:	08018599 	.word	0x08018599
 80177ec:	20000080 	.word	0x20000080

080177f0 <cleanup_stdio>:
 80177f0:	6841      	ldr	r1, [r0, #4]
 80177f2:	4b0c      	ldr	r3, [pc, #48]	@ (8017824 <cleanup_stdio+0x34>)
 80177f4:	4299      	cmp	r1, r3
 80177f6:	b510      	push	{r4, lr}
 80177f8:	4604      	mov	r4, r0
 80177fa:	d001      	beq.n	8017800 <cleanup_stdio+0x10>
 80177fc:	f000 fecc 	bl	8018598 <_fflush_r>
 8017800:	68a1      	ldr	r1, [r4, #8]
 8017802:	4b09      	ldr	r3, [pc, #36]	@ (8017828 <cleanup_stdio+0x38>)
 8017804:	4299      	cmp	r1, r3
 8017806:	d002      	beq.n	801780e <cleanup_stdio+0x1e>
 8017808:	4620      	mov	r0, r4
 801780a:	f000 fec5 	bl	8018598 <_fflush_r>
 801780e:	68e1      	ldr	r1, [r4, #12]
 8017810:	4b06      	ldr	r3, [pc, #24]	@ (801782c <cleanup_stdio+0x3c>)
 8017812:	4299      	cmp	r1, r3
 8017814:	d004      	beq.n	8017820 <cleanup_stdio+0x30>
 8017816:	4620      	mov	r0, r4
 8017818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801781c:	f000 bebc 	b.w	8018598 <_fflush_r>
 8017820:	bd10      	pop	{r4, pc}
 8017822:	bf00      	nop
 8017824:	2000899c 	.word	0x2000899c
 8017828:	20008a04 	.word	0x20008a04
 801782c:	20008a6c 	.word	0x20008a6c

08017830 <global_stdio_init.part.0>:
 8017830:	b510      	push	{r4, lr}
 8017832:	4b0b      	ldr	r3, [pc, #44]	@ (8017860 <global_stdio_init.part.0+0x30>)
 8017834:	4c0b      	ldr	r4, [pc, #44]	@ (8017864 <global_stdio_init.part.0+0x34>)
 8017836:	4a0c      	ldr	r2, [pc, #48]	@ (8017868 <global_stdio_init.part.0+0x38>)
 8017838:	601a      	str	r2, [r3, #0]
 801783a:	4620      	mov	r0, r4
 801783c:	2200      	movs	r2, #0
 801783e:	2104      	movs	r1, #4
 8017840:	f7ff ff94 	bl	801776c <std>
 8017844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017848:	2201      	movs	r2, #1
 801784a:	2109      	movs	r1, #9
 801784c:	f7ff ff8e 	bl	801776c <std>
 8017850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017854:	2202      	movs	r2, #2
 8017856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801785a:	2112      	movs	r1, #18
 801785c:	f7ff bf86 	b.w	801776c <std>
 8017860:	20008ad4 	.word	0x20008ad4
 8017864:	2000899c 	.word	0x2000899c
 8017868:	080177d9 	.word	0x080177d9

0801786c <__sfp_lock_acquire>:
 801786c:	4801      	ldr	r0, [pc, #4]	@ (8017874 <__sfp_lock_acquire+0x8>)
 801786e:	f000 ba12 	b.w	8017c96 <__retarget_lock_acquire_recursive>
 8017872:	bf00      	nop
 8017874:	20008add 	.word	0x20008add

08017878 <__sfp_lock_release>:
 8017878:	4801      	ldr	r0, [pc, #4]	@ (8017880 <__sfp_lock_release+0x8>)
 801787a:	f000 ba0d 	b.w	8017c98 <__retarget_lock_release_recursive>
 801787e:	bf00      	nop
 8017880:	20008add 	.word	0x20008add

08017884 <__sinit>:
 8017884:	b510      	push	{r4, lr}
 8017886:	4604      	mov	r4, r0
 8017888:	f7ff fff0 	bl	801786c <__sfp_lock_acquire>
 801788c:	6a23      	ldr	r3, [r4, #32]
 801788e:	b11b      	cbz	r3, 8017898 <__sinit+0x14>
 8017890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017894:	f7ff bff0 	b.w	8017878 <__sfp_lock_release>
 8017898:	4b04      	ldr	r3, [pc, #16]	@ (80178ac <__sinit+0x28>)
 801789a:	6223      	str	r3, [r4, #32]
 801789c:	4b04      	ldr	r3, [pc, #16]	@ (80178b0 <__sinit+0x2c>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1f5      	bne.n	8017890 <__sinit+0xc>
 80178a4:	f7ff ffc4 	bl	8017830 <global_stdio_init.part.0>
 80178a8:	e7f2      	b.n	8017890 <__sinit+0xc>
 80178aa:	bf00      	nop
 80178ac:	080177f1 	.word	0x080177f1
 80178b0:	20008ad4 	.word	0x20008ad4

080178b4 <_fwalk_sglue>:
 80178b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178b8:	4607      	mov	r7, r0
 80178ba:	4688      	mov	r8, r1
 80178bc:	4614      	mov	r4, r2
 80178be:	2600      	movs	r6, #0
 80178c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178c4:	f1b9 0901 	subs.w	r9, r9, #1
 80178c8:	d505      	bpl.n	80178d6 <_fwalk_sglue+0x22>
 80178ca:	6824      	ldr	r4, [r4, #0]
 80178cc:	2c00      	cmp	r4, #0
 80178ce:	d1f7      	bne.n	80178c0 <_fwalk_sglue+0xc>
 80178d0:	4630      	mov	r0, r6
 80178d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178d6:	89ab      	ldrh	r3, [r5, #12]
 80178d8:	2b01      	cmp	r3, #1
 80178da:	d907      	bls.n	80178ec <_fwalk_sglue+0x38>
 80178dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178e0:	3301      	adds	r3, #1
 80178e2:	d003      	beq.n	80178ec <_fwalk_sglue+0x38>
 80178e4:	4629      	mov	r1, r5
 80178e6:	4638      	mov	r0, r7
 80178e8:	47c0      	blx	r8
 80178ea:	4306      	orrs	r6, r0
 80178ec:	3568      	adds	r5, #104	@ 0x68
 80178ee:	e7e9      	b.n	80178c4 <_fwalk_sglue+0x10>

080178f0 <iprintf>:
 80178f0:	b40f      	push	{r0, r1, r2, r3}
 80178f2:	b507      	push	{r0, r1, r2, lr}
 80178f4:	4906      	ldr	r1, [pc, #24]	@ (8017910 <iprintf+0x20>)
 80178f6:	ab04      	add	r3, sp, #16
 80178f8:	6808      	ldr	r0, [r1, #0]
 80178fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80178fe:	6881      	ldr	r1, [r0, #8]
 8017900:	9301      	str	r3, [sp, #4]
 8017902:	f000 fb21 	bl	8017f48 <_vfiprintf_r>
 8017906:	b003      	add	sp, #12
 8017908:	f85d eb04 	ldr.w	lr, [sp], #4
 801790c:	b004      	add	sp, #16
 801790e:	4770      	bx	lr
 8017910:	2000007c 	.word	0x2000007c

08017914 <putchar>:
 8017914:	4b02      	ldr	r3, [pc, #8]	@ (8017920 <putchar+0xc>)
 8017916:	4601      	mov	r1, r0
 8017918:	6818      	ldr	r0, [r3, #0]
 801791a:	6882      	ldr	r2, [r0, #8]
 801791c:	f000 bed8 	b.w	80186d0 <_putc_r>
 8017920:	2000007c 	.word	0x2000007c

08017924 <_puts_r>:
 8017924:	6a03      	ldr	r3, [r0, #32]
 8017926:	b570      	push	{r4, r5, r6, lr}
 8017928:	6884      	ldr	r4, [r0, #8]
 801792a:	4605      	mov	r5, r0
 801792c:	460e      	mov	r6, r1
 801792e:	b90b      	cbnz	r3, 8017934 <_puts_r+0x10>
 8017930:	f7ff ffa8 	bl	8017884 <__sinit>
 8017934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017936:	07db      	lsls	r3, r3, #31
 8017938:	d405      	bmi.n	8017946 <_puts_r+0x22>
 801793a:	89a3      	ldrh	r3, [r4, #12]
 801793c:	0598      	lsls	r0, r3, #22
 801793e:	d402      	bmi.n	8017946 <_puts_r+0x22>
 8017940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017942:	f000 f9a8 	bl	8017c96 <__retarget_lock_acquire_recursive>
 8017946:	89a3      	ldrh	r3, [r4, #12]
 8017948:	0719      	lsls	r1, r3, #28
 801794a:	d502      	bpl.n	8017952 <_puts_r+0x2e>
 801794c:	6923      	ldr	r3, [r4, #16]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d135      	bne.n	80179be <_puts_r+0x9a>
 8017952:	4621      	mov	r1, r4
 8017954:	4628      	mov	r0, r5
 8017956:	f000 f8c5 	bl	8017ae4 <__swsetup_r>
 801795a:	b380      	cbz	r0, 80179be <_puts_r+0x9a>
 801795c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8017960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017962:	07da      	lsls	r2, r3, #31
 8017964:	d405      	bmi.n	8017972 <_puts_r+0x4e>
 8017966:	89a3      	ldrh	r3, [r4, #12]
 8017968:	059b      	lsls	r3, r3, #22
 801796a:	d402      	bmi.n	8017972 <_puts_r+0x4e>
 801796c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801796e:	f000 f993 	bl	8017c98 <__retarget_lock_release_recursive>
 8017972:	4628      	mov	r0, r5
 8017974:	bd70      	pop	{r4, r5, r6, pc}
 8017976:	2b00      	cmp	r3, #0
 8017978:	da04      	bge.n	8017984 <_puts_r+0x60>
 801797a:	69a2      	ldr	r2, [r4, #24]
 801797c:	429a      	cmp	r2, r3
 801797e:	dc17      	bgt.n	80179b0 <_puts_r+0x8c>
 8017980:	290a      	cmp	r1, #10
 8017982:	d015      	beq.n	80179b0 <_puts_r+0x8c>
 8017984:	6823      	ldr	r3, [r4, #0]
 8017986:	1c5a      	adds	r2, r3, #1
 8017988:	6022      	str	r2, [r4, #0]
 801798a:	7019      	strb	r1, [r3, #0]
 801798c:	68a3      	ldr	r3, [r4, #8]
 801798e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017992:	3b01      	subs	r3, #1
 8017994:	60a3      	str	r3, [r4, #8]
 8017996:	2900      	cmp	r1, #0
 8017998:	d1ed      	bne.n	8017976 <_puts_r+0x52>
 801799a:	2b00      	cmp	r3, #0
 801799c:	da11      	bge.n	80179c2 <_puts_r+0x9e>
 801799e:	4622      	mov	r2, r4
 80179a0:	210a      	movs	r1, #10
 80179a2:	4628      	mov	r0, r5
 80179a4:	f000 f85f 	bl	8017a66 <__swbuf_r>
 80179a8:	3001      	adds	r0, #1
 80179aa:	d0d7      	beq.n	801795c <_puts_r+0x38>
 80179ac:	250a      	movs	r5, #10
 80179ae:	e7d7      	b.n	8017960 <_puts_r+0x3c>
 80179b0:	4622      	mov	r2, r4
 80179b2:	4628      	mov	r0, r5
 80179b4:	f000 f857 	bl	8017a66 <__swbuf_r>
 80179b8:	3001      	adds	r0, #1
 80179ba:	d1e7      	bne.n	801798c <_puts_r+0x68>
 80179bc:	e7ce      	b.n	801795c <_puts_r+0x38>
 80179be:	3e01      	subs	r6, #1
 80179c0:	e7e4      	b.n	801798c <_puts_r+0x68>
 80179c2:	6823      	ldr	r3, [r4, #0]
 80179c4:	1c5a      	adds	r2, r3, #1
 80179c6:	6022      	str	r2, [r4, #0]
 80179c8:	220a      	movs	r2, #10
 80179ca:	701a      	strb	r2, [r3, #0]
 80179cc:	e7ee      	b.n	80179ac <_puts_r+0x88>
	...

080179d0 <puts>:
 80179d0:	4b02      	ldr	r3, [pc, #8]	@ (80179dc <puts+0xc>)
 80179d2:	4601      	mov	r1, r0
 80179d4:	6818      	ldr	r0, [r3, #0]
 80179d6:	f7ff bfa5 	b.w	8017924 <_puts_r>
 80179da:	bf00      	nop
 80179dc:	2000007c 	.word	0x2000007c

080179e0 <__sread>:
 80179e0:	b510      	push	{r4, lr}
 80179e2:	460c      	mov	r4, r1
 80179e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179e8:	f000 f90c 	bl	8017c04 <_read_r>
 80179ec:	2800      	cmp	r0, #0
 80179ee:	bfab      	itete	ge
 80179f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80179f2:	89a3      	ldrhlt	r3, [r4, #12]
 80179f4:	181b      	addge	r3, r3, r0
 80179f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80179fa:	bfac      	ite	ge
 80179fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80179fe:	81a3      	strhlt	r3, [r4, #12]
 8017a00:	bd10      	pop	{r4, pc}

08017a02 <__swrite>:
 8017a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a06:	461f      	mov	r7, r3
 8017a08:	898b      	ldrh	r3, [r1, #12]
 8017a0a:	05db      	lsls	r3, r3, #23
 8017a0c:	4605      	mov	r5, r0
 8017a0e:	460c      	mov	r4, r1
 8017a10:	4616      	mov	r6, r2
 8017a12:	d505      	bpl.n	8017a20 <__swrite+0x1e>
 8017a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a18:	2302      	movs	r3, #2
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	f000 f8e0 	bl	8017be0 <_lseek_r>
 8017a20:	89a3      	ldrh	r3, [r4, #12]
 8017a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017a2a:	81a3      	strh	r3, [r4, #12]
 8017a2c:	4632      	mov	r2, r6
 8017a2e:	463b      	mov	r3, r7
 8017a30:	4628      	mov	r0, r5
 8017a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a36:	f000 b8f7 	b.w	8017c28 <_write_r>

08017a3a <__sseek>:
 8017a3a:	b510      	push	{r4, lr}
 8017a3c:	460c      	mov	r4, r1
 8017a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a42:	f000 f8cd 	bl	8017be0 <_lseek_r>
 8017a46:	1c43      	adds	r3, r0, #1
 8017a48:	89a3      	ldrh	r3, [r4, #12]
 8017a4a:	bf15      	itete	ne
 8017a4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017a56:	81a3      	strheq	r3, [r4, #12]
 8017a58:	bf18      	it	ne
 8017a5a:	81a3      	strhne	r3, [r4, #12]
 8017a5c:	bd10      	pop	{r4, pc}

08017a5e <__sclose>:
 8017a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a62:	f000 b8ad 	b.w	8017bc0 <_close_r>

08017a66 <__swbuf_r>:
 8017a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a68:	460e      	mov	r6, r1
 8017a6a:	4614      	mov	r4, r2
 8017a6c:	4605      	mov	r5, r0
 8017a6e:	b118      	cbz	r0, 8017a78 <__swbuf_r+0x12>
 8017a70:	6a03      	ldr	r3, [r0, #32]
 8017a72:	b90b      	cbnz	r3, 8017a78 <__swbuf_r+0x12>
 8017a74:	f7ff ff06 	bl	8017884 <__sinit>
 8017a78:	69a3      	ldr	r3, [r4, #24]
 8017a7a:	60a3      	str	r3, [r4, #8]
 8017a7c:	89a3      	ldrh	r3, [r4, #12]
 8017a7e:	071a      	lsls	r2, r3, #28
 8017a80:	d501      	bpl.n	8017a86 <__swbuf_r+0x20>
 8017a82:	6923      	ldr	r3, [r4, #16]
 8017a84:	b943      	cbnz	r3, 8017a98 <__swbuf_r+0x32>
 8017a86:	4621      	mov	r1, r4
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f000 f82b 	bl	8017ae4 <__swsetup_r>
 8017a8e:	b118      	cbz	r0, 8017a98 <__swbuf_r+0x32>
 8017a90:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017a94:	4638      	mov	r0, r7
 8017a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a98:	6823      	ldr	r3, [r4, #0]
 8017a9a:	6922      	ldr	r2, [r4, #16]
 8017a9c:	1a98      	subs	r0, r3, r2
 8017a9e:	6963      	ldr	r3, [r4, #20]
 8017aa0:	b2f6      	uxtb	r6, r6
 8017aa2:	4283      	cmp	r3, r0
 8017aa4:	4637      	mov	r7, r6
 8017aa6:	dc05      	bgt.n	8017ab4 <__swbuf_r+0x4e>
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	4628      	mov	r0, r5
 8017aac:	f000 fd74 	bl	8018598 <_fflush_r>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d1ed      	bne.n	8017a90 <__swbuf_r+0x2a>
 8017ab4:	68a3      	ldr	r3, [r4, #8]
 8017ab6:	3b01      	subs	r3, #1
 8017ab8:	60a3      	str	r3, [r4, #8]
 8017aba:	6823      	ldr	r3, [r4, #0]
 8017abc:	1c5a      	adds	r2, r3, #1
 8017abe:	6022      	str	r2, [r4, #0]
 8017ac0:	701e      	strb	r6, [r3, #0]
 8017ac2:	6962      	ldr	r2, [r4, #20]
 8017ac4:	1c43      	adds	r3, r0, #1
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	d004      	beq.n	8017ad4 <__swbuf_r+0x6e>
 8017aca:	89a3      	ldrh	r3, [r4, #12]
 8017acc:	07db      	lsls	r3, r3, #31
 8017ace:	d5e1      	bpl.n	8017a94 <__swbuf_r+0x2e>
 8017ad0:	2e0a      	cmp	r6, #10
 8017ad2:	d1df      	bne.n	8017a94 <__swbuf_r+0x2e>
 8017ad4:	4621      	mov	r1, r4
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	f000 fd5e 	bl	8018598 <_fflush_r>
 8017adc:	2800      	cmp	r0, #0
 8017ade:	d0d9      	beq.n	8017a94 <__swbuf_r+0x2e>
 8017ae0:	e7d6      	b.n	8017a90 <__swbuf_r+0x2a>
	...

08017ae4 <__swsetup_r>:
 8017ae4:	b538      	push	{r3, r4, r5, lr}
 8017ae6:	4b29      	ldr	r3, [pc, #164]	@ (8017b8c <__swsetup_r+0xa8>)
 8017ae8:	4605      	mov	r5, r0
 8017aea:	6818      	ldr	r0, [r3, #0]
 8017aec:	460c      	mov	r4, r1
 8017aee:	b118      	cbz	r0, 8017af8 <__swsetup_r+0x14>
 8017af0:	6a03      	ldr	r3, [r0, #32]
 8017af2:	b90b      	cbnz	r3, 8017af8 <__swsetup_r+0x14>
 8017af4:	f7ff fec6 	bl	8017884 <__sinit>
 8017af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017afc:	0719      	lsls	r1, r3, #28
 8017afe:	d422      	bmi.n	8017b46 <__swsetup_r+0x62>
 8017b00:	06da      	lsls	r2, r3, #27
 8017b02:	d407      	bmi.n	8017b14 <__swsetup_r+0x30>
 8017b04:	2209      	movs	r2, #9
 8017b06:	602a      	str	r2, [r5, #0]
 8017b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b0c:	81a3      	strh	r3, [r4, #12]
 8017b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b12:	e033      	b.n	8017b7c <__swsetup_r+0x98>
 8017b14:	0758      	lsls	r0, r3, #29
 8017b16:	d512      	bpl.n	8017b3e <__swsetup_r+0x5a>
 8017b18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b1a:	b141      	cbz	r1, 8017b2e <__swsetup_r+0x4a>
 8017b1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b20:	4299      	cmp	r1, r3
 8017b22:	d002      	beq.n	8017b2a <__swsetup_r+0x46>
 8017b24:	4628      	mov	r0, r5
 8017b26:	f000 f8e5 	bl	8017cf4 <_free_r>
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b2e:	89a3      	ldrh	r3, [r4, #12]
 8017b30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017b34:	81a3      	strh	r3, [r4, #12]
 8017b36:	2300      	movs	r3, #0
 8017b38:	6063      	str	r3, [r4, #4]
 8017b3a:	6923      	ldr	r3, [r4, #16]
 8017b3c:	6023      	str	r3, [r4, #0]
 8017b3e:	89a3      	ldrh	r3, [r4, #12]
 8017b40:	f043 0308 	orr.w	r3, r3, #8
 8017b44:	81a3      	strh	r3, [r4, #12]
 8017b46:	6923      	ldr	r3, [r4, #16]
 8017b48:	b94b      	cbnz	r3, 8017b5e <__swsetup_r+0x7a>
 8017b4a:	89a3      	ldrh	r3, [r4, #12]
 8017b4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017b54:	d003      	beq.n	8017b5e <__swsetup_r+0x7a>
 8017b56:	4621      	mov	r1, r4
 8017b58:	4628      	mov	r0, r5
 8017b5a:	f000 fd7d 	bl	8018658 <__smakebuf_r>
 8017b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b62:	f013 0201 	ands.w	r2, r3, #1
 8017b66:	d00a      	beq.n	8017b7e <__swsetup_r+0x9a>
 8017b68:	2200      	movs	r2, #0
 8017b6a:	60a2      	str	r2, [r4, #8]
 8017b6c:	6962      	ldr	r2, [r4, #20]
 8017b6e:	4252      	negs	r2, r2
 8017b70:	61a2      	str	r2, [r4, #24]
 8017b72:	6922      	ldr	r2, [r4, #16]
 8017b74:	b942      	cbnz	r2, 8017b88 <__swsetup_r+0xa4>
 8017b76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017b7a:	d1c5      	bne.n	8017b08 <__swsetup_r+0x24>
 8017b7c:	bd38      	pop	{r3, r4, r5, pc}
 8017b7e:	0799      	lsls	r1, r3, #30
 8017b80:	bf58      	it	pl
 8017b82:	6962      	ldrpl	r2, [r4, #20]
 8017b84:	60a2      	str	r2, [r4, #8]
 8017b86:	e7f4      	b.n	8017b72 <__swsetup_r+0x8e>
 8017b88:	2000      	movs	r0, #0
 8017b8a:	e7f7      	b.n	8017b7c <__swsetup_r+0x98>
 8017b8c:	2000007c 	.word	0x2000007c

08017b90 <memcmp>:
 8017b90:	b510      	push	{r4, lr}
 8017b92:	3901      	subs	r1, #1
 8017b94:	4402      	add	r2, r0
 8017b96:	4290      	cmp	r0, r2
 8017b98:	d101      	bne.n	8017b9e <memcmp+0xe>
 8017b9a:	2000      	movs	r0, #0
 8017b9c:	e005      	b.n	8017baa <memcmp+0x1a>
 8017b9e:	7803      	ldrb	r3, [r0, #0]
 8017ba0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017ba4:	42a3      	cmp	r3, r4
 8017ba6:	d001      	beq.n	8017bac <memcmp+0x1c>
 8017ba8:	1b18      	subs	r0, r3, r4
 8017baa:	bd10      	pop	{r4, pc}
 8017bac:	3001      	adds	r0, #1
 8017bae:	e7f2      	b.n	8017b96 <memcmp+0x6>

08017bb0 <memset>:
 8017bb0:	4402      	add	r2, r0
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	4293      	cmp	r3, r2
 8017bb6:	d100      	bne.n	8017bba <memset+0xa>
 8017bb8:	4770      	bx	lr
 8017bba:	f803 1b01 	strb.w	r1, [r3], #1
 8017bbe:	e7f9      	b.n	8017bb4 <memset+0x4>

08017bc0 <_close_r>:
 8017bc0:	b538      	push	{r3, r4, r5, lr}
 8017bc2:	4d06      	ldr	r5, [pc, #24]	@ (8017bdc <_close_r+0x1c>)
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	4604      	mov	r4, r0
 8017bc8:	4608      	mov	r0, r1
 8017bca:	602b      	str	r3, [r5, #0]
 8017bcc:	f7e9 fd1a 	bl	8001604 <_close>
 8017bd0:	1c43      	adds	r3, r0, #1
 8017bd2:	d102      	bne.n	8017bda <_close_r+0x1a>
 8017bd4:	682b      	ldr	r3, [r5, #0]
 8017bd6:	b103      	cbz	r3, 8017bda <_close_r+0x1a>
 8017bd8:	6023      	str	r3, [r4, #0]
 8017bda:	bd38      	pop	{r3, r4, r5, pc}
 8017bdc:	20008ad8 	.word	0x20008ad8

08017be0 <_lseek_r>:
 8017be0:	b538      	push	{r3, r4, r5, lr}
 8017be2:	4d07      	ldr	r5, [pc, #28]	@ (8017c00 <_lseek_r+0x20>)
 8017be4:	4604      	mov	r4, r0
 8017be6:	4608      	mov	r0, r1
 8017be8:	4611      	mov	r1, r2
 8017bea:	2200      	movs	r2, #0
 8017bec:	602a      	str	r2, [r5, #0]
 8017bee:	461a      	mov	r2, r3
 8017bf0:	f7e9 fd2f 	bl	8001652 <_lseek>
 8017bf4:	1c43      	adds	r3, r0, #1
 8017bf6:	d102      	bne.n	8017bfe <_lseek_r+0x1e>
 8017bf8:	682b      	ldr	r3, [r5, #0]
 8017bfa:	b103      	cbz	r3, 8017bfe <_lseek_r+0x1e>
 8017bfc:	6023      	str	r3, [r4, #0]
 8017bfe:	bd38      	pop	{r3, r4, r5, pc}
 8017c00:	20008ad8 	.word	0x20008ad8

08017c04 <_read_r>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	4d07      	ldr	r5, [pc, #28]	@ (8017c24 <_read_r+0x20>)
 8017c08:	4604      	mov	r4, r0
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	4611      	mov	r1, r2
 8017c0e:	2200      	movs	r2, #0
 8017c10:	602a      	str	r2, [r5, #0]
 8017c12:	461a      	mov	r2, r3
 8017c14:	f7e9 fcd9 	bl	80015ca <_read>
 8017c18:	1c43      	adds	r3, r0, #1
 8017c1a:	d102      	bne.n	8017c22 <_read_r+0x1e>
 8017c1c:	682b      	ldr	r3, [r5, #0]
 8017c1e:	b103      	cbz	r3, 8017c22 <_read_r+0x1e>
 8017c20:	6023      	str	r3, [r4, #0]
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	20008ad8 	.word	0x20008ad8

08017c28 <_write_r>:
 8017c28:	b538      	push	{r3, r4, r5, lr}
 8017c2a:	4d07      	ldr	r5, [pc, #28]	@ (8017c48 <_write_r+0x20>)
 8017c2c:	4604      	mov	r4, r0
 8017c2e:	4608      	mov	r0, r1
 8017c30:	4611      	mov	r1, r2
 8017c32:	2200      	movs	r2, #0
 8017c34:	602a      	str	r2, [r5, #0]
 8017c36:	461a      	mov	r2, r3
 8017c38:	f7e9 f8c0 	bl	8000dbc <_write>
 8017c3c:	1c43      	adds	r3, r0, #1
 8017c3e:	d102      	bne.n	8017c46 <_write_r+0x1e>
 8017c40:	682b      	ldr	r3, [r5, #0]
 8017c42:	b103      	cbz	r3, 8017c46 <_write_r+0x1e>
 8017c44:	6023      	str	r3, [r4, #0]
 8017c46:	bd38      	pop	{r3, r4, r5, pc}
 8017c48:	20008ad8 	.word	0x20008ad8

08017c4c <__libc_init_array>:
 8017c4c:	b570      	push	{r4, r5, r6, lr}
 8017c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8017c84 <__libc_init_array+0x38>)
 8017c50:	4c0d      	ldr	r4, [pc, #52]	@ (8017c88 <__libc_init_array+0x3c>)
 8017c52:	1b64      	subs	r4, r4, r5
 8017c54:	10a4      	asrs	r4, r4, #2
 8017c56:	2600      	movs	r6, #0
 8017c58:	42a6      	cmp	r6, r4
 8017c5a:	d109      	bne.n	8017c70 <__libc_init_array+0x24>
 8017c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8017c8c <__libc_init_array+0x40>)
 8017c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8017c90 <__libc_init_array+0x44>)
 8017c60:	f000 fde8 	bl	8018834 <_init>
 8017c64:	1b64      	subs	r4, r4, r5
 8017c66:	10a4      	asrs	r4, r4, #2
 8017c68:	2600      	movs	r6, #0
 8017c6a:	42a6      	cmp	r6, r4
 8017c6c:	d105      	bne.n	8017c7a <__libc_init_array+0x2e>
 8017c6e:	bd70      	pop	{r4, r5, r6, pc}
 8017c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c74:	4798      	blx	r3
 8017c76:	3601      	adds	r6, #1
 8017c78:	e7ee      	b.n	8017c58 <__libc_init_array+0xc>
 8017c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c7e:	4798      	blx	r3
 8017c80:	3601      	adds	r6, #1
 8017c82:	e7f2      	b.n	8017c6a <__libc_init_array+0x1e>
 8017c84:	0801c0d4 	.word	0x0801c0d4
 8017c88:	0801c0d4 	.word	0x0801c0d4
 8017c8c:	0801c0d4 	.word	0x0801c0d4
 8017c90:	0801c0d8 	.word	0x0801c0d8

08017c94 <__retarget_lock_init_recursive>:
 8017c94:	4770      	bx	lr

08017c96 <__retarget_lock_acquire_recursive>:
 8017c96:	4770      	bx	lr

08017c98 <__retarget_lock_release_recursive>:
 8017c98:	4770      	bx	lr

08017c9a <memcpy>:
 8017c9a:	440a      	add	r2, r1
 8017c9c:	4291      	cmp	r1, r2
 8017c9e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017ca2:	d100      	bne.n	8017ca6 <memcpy+0xc>
 8017ca4:	4770      	bx	lr
 8017ca6:	b510      	push	{r4, lr}
 8017ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017cb0:	4291      	cmp	r1, r2
 8017cb2:	d1f9      	bne.n	8017ca8 <memcpy+0xe>
 8017cb4:	bd10      	pop	{r4, pc}
	...

08017cb8 <__assert_func>:
 8017cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017cba:	4614      	mov	r4, r2
 8017cbc:	461a      	mov	r2, r3
 8017cbe:	4b09      	ldr	r3, [pc, #36]	@ (8017ce4 <__assert_func+0x2c>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	4605      	mov	r5, r0
 8017cc4:	68d8      	ldr	r0, [r3, #12]
 8017cc6:	b14c      	cbz	r4, 8017cdc <__assert_func+0x24>
 8017cc8:	4b07      	ldr	r3, [pc, #28]	@ (8017ce8 <__assert_func+0x30>)
 8017cca:	9100      	str	r1, [sp, #0]
 8017ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017cd0:	4906      	ldr	r1, [pc, #24]	@ (8017cec <__assert_func+0x34>)
 8017cd2:	462b      	mov	r3, r5
 8017cd4:	f000 fc88 	bl	80185e8 <fiprintf>
 8017cd8:	f000 fd60 	bl	801879c <abort>
 8017cdc:	4b04      	ldr	r3, [pc, #16]	@ (8017cf0 <__assert_func+0x38>)
 8017cde:	461c      	mov	r4, r3
 8017ce0:	e7f3      	b.n	8017cca <__assert_func+0x12>
 8017ce2:	bf00      	nop
 8017ce4:	2000007c 	.word	0x2000007c
 8017ce8:	0801c05d 	.word	0x0801c05d
 8017cec:	0801c06a 	.word	0x0801c06a
 8017cf0:	0801c098 	.word	0x0801c098

08017cf4 <_free_r>:
 8017cf4:	b538      	push	{r3, r4, r5, lr}
 8017cf6:	4605      	mov	r5, r0
 8017cf8:	2900      	cmp	r1, #0
 8017cfa:	d041      	beq.n	8017d80 <_free_r+0x8c>
 8017cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d00:	1f0c      	subs	r4, r1, #4
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	bfb8      	it	lt
 8017d06:	18e4      	addlt	r4, r4, r3
 8017d08:	f000 f8e8 	bl	8017edc <__malloc_lock>
 8017d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8017d84 <_free_r+0x90>)
 8017d0e:	6813      	ldr	r3, [r2, #0]
 8017d10:	b933      	cbnz	r3, 8017d20 <_free_r+0x2c>
 8017d12:	6063      	str	r3, [r4, #4]
 8017d14:	6014      	str	r4, [r2, #0]
 8017d16:	4628      	mov	r0, r5
 8017d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d1c:	f000 b8e4 	b.w	8017ee8 <__malloc_unlock>
 8017d20:	42a3      	cmp	r3, r4
 8017d22:	d908      	bls.n	8017d36 <_free_r+0x42>
 8017d24:	6820      	ldr	r0, [r4, #0]
 8017d26:	1821      	adds	r1, r4, r0
 8017d28:	428b      	cmp	r3, r1
 8017d2a:	bf01      	itttt	eq
 8017d2c:	6819      	ldreq	r1, [r3, #0]
 8017d2e:	685b      	ldreq	r3, [r3, #4]
 8017d30:	1809      	addeq	r1, r1, r0
 8017d32:	6021      	streq	r1, [r4, #0]
 8017d34:	e7ed      	b.n	8017d12 <_free_r+0x1e>
 8017d36:	461a      	mov	r2, r3
 8017d38:	685b      	ldr	r3, [r3, #4]
 8017d3a:	b10b      	cbz	r3, 8017d40 <_free_r+0x4c>
 8017d3c:	42a3      	cmp	r3, r4
 8017d3e:	d9fa      	bls.n	8017d36 <_free_r+0x42>
 8017d40:	6811      	ldr	r1, [r2, #0]
 8017d42:	1850      	adds	r0, r2, r1
 8017d44:	42a0      	cmp	r0, r4
 8017d46:	d10b      	bne.n	8017d60 <_free_r+0x6c>
 8017d48:	6820      	ldr	r0, [r4, #0]
 8017d4a:	4401      	add	r1, r0
 8017d4c:	1850      	adds	r0, r2, r1
 8017d4e:	4283      	cmp	r3, r0
 8017d50:	6011      	str	r1, [r2, #0]
 8017d52:	d1e0      	bne.n	8017d16 <_free_r+0x22>
 8017d54:	6818      	ldr	r0, [r3, #0]
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	6053      	str	r3, [r2, #4]
 8017d5a:	4408      	add	r0, r1
 8017d5c:	6010      	str	r0, [r2, #0]
 8017d5e:	e7da      	b.n	8017d16 <_free_r+0x22>
 8017d60:	d902      	bls.n	8017d68 <_free_r+0x74>
 8017d62:	230c      	movs	r3, #12
 8017d64:	602b      	str	r3, [r5, #0]
 8017d66:	e7d6      	b.n	8017d16 <_free_r+0x22>
 8017d68:	6820      	ldr	r0, [r4, #0]
 8017d6a:	1821      	adds	r1, r4, r0
 8017d6c:	428b      	cmp	r3, r1
 8017d6e:	bf04      	itt	eq
 8017d70:	6819      	ldreq	r1, [r3, #0]
 8017d72:	685b      	ldreq	r3, [r3, #4]
 8017d74:	6063      	str	r3, [r4, #4]
 8017d76:	bf04      	itt	eq
 8017d78:	1809      	addeq	r1, r1, r0
 8017d7a:	6021      	streq	r1, [r4, #0]
 8017d7c:	6054      	str	r4, [r2, #4]
 8017d7e:	e7ca      	b.n	8017d16 <_free_r+0x22>
 8017d80:	bd38      	pop	{r3, r4, r5, pc}
 8017d82:	bf00      	nop
 8017d84:	20008ae4 	.word	0x20008ae4

08017d88 <malloc>:
 8017d88:	4b02      	ldr	r3, [pc, #8]	@ (8017d94 <malloc+0xc>)
 8017d8a:	4601      	mov	r1, r0
 8017d8c:	6818      	ldr	r0, [r3, #0]
 8017d8e:	f000 b825 	b.w	8017ddc <_malloc_r>
 8017d92:	bf00      	nop
 8017d94:	2000007c 	.word	0x2000007c

08017d98 <sbrk_aligned>:
 8017d98:	b570      	push	{r4, r5, r6, lr}
 8017d9a:	4e0f      	ldr	r6, [pc, #60]	@ (8017dd8 <sbrk_aligned+0x40>)
 8017d9c:	460c      	mov	r4, r1
 8017d9e:	6831      	ldr	r1, [r6, #0]
 8017da0:	4605      	mov	r5, r0
 8017da2:	b911      	cbnz	r1, 8017daa <sbrk_aligned+0x12>
 8017da4:	f000 fcea 	bl	801877c <_sbrk_r>
 8017da8:	6030      	str	r0, [r6, #0]
 8017daa:	4621      	mov	r1, r4
 8017dac:	4628      	mov	r0, r5
 8017dae:	f000 fce5 	bl	801877c <_sbrk_r>
 8017db2:	1c43      	adds	r3, r0, #1
 8017db4:	d103      	bne.n	8017dbe <sbrk_aligned+0x26>
 8017db6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017dba:	4620      	mov	r0, r4
 8017dbc:	bd70      	pop	{r4, r5, r6, pc}
 8017dbe:	1cc4      	adds	r4, r0, #3
 8017dc0:	f024 0403 	bic.w	r4, r4, #3
 8017dc4:	42a0      	cmp	r0, r4
 8017dc6:	d0f8      	beq.n	8017dba <sbrk_aligned+0x22>
 8017dc8:	1a21      	subs	r1, r4, r0
 8017dca:	4628      	mov	r0, r5
 8017dcc:	f000 fcd6 	bl	801877c <_sbrk_r>
 8017dd0:	3001      	adds	r0, #1
 8017dd2:	d1f2      	bne.n	8017dba <sbrk_aligned+0x22>
 8017dd4:	e7ef      	b.n	8017db6 <sbrk_aligned+0x1e>
 8017dd6:	bf00      	nop
 8017dd8:	20008ae0 	.word	0x20008ae0

08017ddc <_malloc_r>:
 8017ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017de0:	1ccd      	adds	r5, r1, #3
 8017de2:	f025 0503 	bic.w	r5, r5, #3
 8017de6:	3508      	adds	r5, #8
 8017de8:	2d0c      	cmp	r5, #12
 8017dea:	bf38      	it	cc
 8017dec:	250c      	movcc	r5, #12
 8017dee:	2d00      	cmp	r5, #0
 8017df0:	4606      	mov	r6, r0
 8017df2:	db01      	blt.n	8017df8 <_malloc_r+0x1c>
 8017df4:	42a9      	cmp	r1, r5
 8017df6:	d904      	bls.n	8017e02 <_malloc_r+0x26>
 8017df8:	230c      	movs	r3, #12
 8017dfa:	6033      	str	r3, [r6, #0]
 8017dfc:	2000      	movs	r0, #0
 8017dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017ed8 <_malloc_r+0xfc>
 8017e06:	f000 f869 	bl	8017edc <__malloc_lock>
 8017e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8017e0e:	461c      	mov	r4, r3
 8017e10:	bb44      	cbnz	r4, 8017e64 <_malloc_r+0x88>
 8017e12:	4629      	mov	r1, r5
 8017e14:	4630      	mov	r0, r6
 8017e16:	f7ff ffbf 	bl	8017d98 <sbrk_aligned>
 8017e1a:	1c43      	adds	r3, r0, #1
 8017e1c:	4604      	mov	r4, r0
 8017e1e:	d158      	bne.n	8017ed2 <_malloc_r+0xf6>
 8017e20:	f8d8 4000 	ldr.w	r4, [r8]
 8017e24:	4627      	mov	r7, r4
 8017e26:	2f00      	cmp	r7, #0
 8017e28:	d143      	bne.n	8017eb2 <_malloc_r+0xd6>
 8017e2a:	2c00      	cmp	r4, #0
 8017e2c:	d04b      	beq.n	8017ec6 <_malloc_r+0xea>
 8017e2e:	6823      	ldr	r3, [r4, #0]
 8017e30:	4639      	mov	r1, r7
 8017e32:	4630      	mov	r0, r6
 8017e34:	eb04 0903 	add.w	r9, r4, r3
 8017e38:	f000 fca0 	bl	801877c <_sbrk_r>
 8017e3c:	4581      	cmp	r9, r0
 8017e3e:	d142      	bne.n	8017ec6 <_malloc_r+0xea>
 8017e40:	6821      	ldr	r1, [r4, #0]
 8017e42:	1a6d      	subs	r5, r5, r1
 8017e44:	4629      	mov	r1, r5
 8017e46:	4630      	mov	r0, r6
 8017e48:	f7ff ffa6 	bl	8017d98 <sbrk_aligned>
 8017e4c:	3001      	adds	r0, #1
 8017e4e:	d03a      	beq.n	8017ec6 <_malloc_r+0xea>
 8017e50:	6823      	ldr	r3, [r4, #0]
 8017e52:	442b      	add	r3, r5
 8017e54:	6023      	str	r3, [r4, #0]
 8017e56:	f8d8 3000 	ldr.w	r3, [r8]
 8017e5a:	685a      	ldr	r2, [r3, #4]
 8017e5c:	bb62      	cbnz	r2, 8017eb8 <_malloc_r+0xdc>
 8017e5e:	f8c8 7000 	str.w	r7, [r8]
 8017e62:	e00f      	b.n	8017e84 <_malloc_r+0xa8>
 8017e64:	6822      	ldr	r2, [r4, #0]
 8017e66:	1b52      	subs	r2, r2, r5
 8017e68:	d420      	bmi.n	8017eac <_malloc_r+0xd0>
 8017e6a:	2a0b      	cmp	r2, #11
 8017e6c:	d917      	bls.n	8017e9e <_malloc_r+0xc2>
 8017e6e:	1961      	adds	r1, r4, r5
 8017e70:	42a3      	cmp	r3, r4
 8017e72:	6025      	str	r5, [r4, #0]
 8017e74:	bf18      	it	ne
 8017e76:	6059      	strne	r1, [r3, #4]
 8017e78:	6863      	ldr	r3, [r4, #4]
 8017e7a:	bf08      	it	eq
 8017e7c:	f8c8 1000 	streq.w	r1, [r8]
 8017e80:	5162      	str	r2, [r4, r5]
 8017e82:	604b      	str	r3, [r1, #4]
 8017e84:	4630      	mov	r0, r6
 8017e86:	f000 f82f 	bl	8017ee8 <__malloc_unlock>
 8017e8a:	f104 000b 	add.w	r0, r4, #11
 8017e8e:	1d23      	adds	r3, r4, #4
 8017e90:	f020 0007 	bic.w	r0, r0, #7
 8017e94:	1ac2      	subs	r2, r0, r3
 8017e96:	bf1c      	itt	ne
 8017e98:	1a1b      	subne	r3, r3, r0
 8017e9a:	50a3      	strne	r3, [r4, r2]
 8017e9c:	e7af      	b.n	8017dfe <_malloc_r+0x22>
 8017e9e:	6862      	ldr	r2, [r4, #4]
 8017ea0:	42a3      	cmp	r3, r4
 8017ea2:	bf0c      	ite	eq
 8017ea4:	f8c8 2000 	streq.w	r2, [r8]
 8017ea8:	605a      	strne	r2, [r3, #4]
 8017eaa:	e7eb      	b.n	8017e84 <_malloc_r+0xa8>
 8017eac:	4623      	mov	r3, r4
 8017eae:	6864      	ldr	r4, [r4, #4]
 8017eb0:	e7ae      	b.n	8017e10 <_malloc_r+0x34>
 8017eb2:	463c      	mov	r4, r7
 8017eb4:	687f      	ldr	r7, [r7, #4]
 8017eb6:	e7b6      	b.n	8017e26 <_malloc_r+0x4a>
 8017eb8:	461a      	mov	r2, r3
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	42a3      	cmp	r3, r4
 8017ebe:	d1fb      	bne.n	8017eb8 <_malloc_r+0xdc>
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	6053      	str	r3, [r2, #4]
 8017ec4:	e7de      	b.n	8017e84 <_malloc_r+0xa8>
 8017ec6:	230c      	movs	r3, #12
 8017ec8:	6033      	str	r3, [r6, #0]
 8017eca:	4630      	mov	r0, r6
 8017ecc:	f000 f80c 	bl	8017ee8 <__malloc_unlock>
 8017ed0:	e794      	b.n	8017dfc <_malloc_r+0x20>
 8017ed2:	6005      	str	r5, [r0, #0]
 8017ed4:	e7d6      	b.n	8017e84 <_malloc_r+0xa8>
 8017ed6:	bf00      	nop
 8017ed8:	20008ae4 	.word	0x20008ae4

08017edc <__malloc_lock>:
 8017edc:	4801      	ldr	r0, [pc, #4]	@ (8017ee4 <__malloc_lock+0x8>)
 8017ede:	f7ff beda 	b.w	8017c96 <__retarget_lock_acquire_recursive>
 8017ee2:	bf00      	nop
 8017ee4:	20008adc 	.word	0x20008adc

08017ee8 <__malloc_unlock>:
 8017ee8:	4801      	ldr	r0, [pc, #4]	@ (8017ef0 <__malloc_unlock+0x8>)
 8017eea:	f7ff bed5 	b.w	8017c98 <__retarget_lock_release_recursive>
 8017eee:	bf00      	nop
 8017ef0:	20008adc 	.word	0x20008adc

08017ef4 <__sfputc_r>:
 8017ef4:	6893      	ldr	r3, [r2, #8]
 8017ef6:	3b01      	subs	r3, #1
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	b410      	push	{r4}
 8017efc:	6093      	str	r3, [r2, #8]
 8017efe:	da08      	bge.n	8017f12 <__sfputc_r+0x1e>
 8017f00:	6994      	ldr	r4, [r2, #24]
 8017f02:	42a3      	cmp	r3, r4
 8017f04:	db01      	blt.n	8017f0a <__sfputc_r+0x16>
 8017f06:	290a      	cmp	r1, #10
 8017f08:	d103      	bne.n	8017f12 <__sfputc_r+0x1e>
 8017f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f0e:	f7ff bdaa 	b.w	8017a66 <__swbuf_r>
 8017f12:	6813      	ldr	r3, [r2, #0]
 8017f14:	1c58      	adds	r0, r3, #1
 8017f16:	6010      	str	r0, [r2, #0]
 8017f18:	7019      	strb	r1, [r3, #0]
 8017f1a:	4608      	mov	r0, r1
 8017f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f20:	4770      	bx	lr

08017f22 <__sfputs_r>:
 8017f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f24:	4606      	mov	r6, r0
 8017f26:	460f      	mov	r7, r1
 8017f28:	4614      	mov	r4, r2
 8017f2a:	18d5      	adds	r5, r2, r3
 8017f2c:	42ac      	cmp	r4, r5
 8017f2e:	d101      	bne.n	8017f34 <__sfputs_r+0x12>
 8017f30:	2000      	movs	r0, #0
 8017f32:	e007      	b.n	8017f44 <__sfputs_r+0x22>
 8017f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f38:	463a      	mov	r2, r7
 8017f3a:	4630      	mov	r0, r6
 8017f3c:	f7ff ffda 	bl	8017ef4 <__sfputc_r>
 8017f40:	1c43      	adds	r3, r0, #1
 8017f42:	d1f3      	bne.n	8017f2c <__sfputs_r+0xa>
 8017f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017f48 <_vfiprintf_r>:
 8017f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f4c:	460d      	mov	r5, r1
 8017f4e:	b09d      	sub	sp, #116	@ 0x74
 8017f50:	4614      	mov	r4, r2
 8017f52:	4698      	mov	r8, r3
 8017f54:	4606      	mov	r6, r0
 8017f56:	b118      	cbz	r0, 8017f60 <_vfiprintf_r+0x18>
 8017f58:	6a03      	ldr	r3, [r0, #32]
 8017f5a:	b90b      	cbnz	r3, 8017f60 <_vfiprintf_r+0x18>
 8017f5c:	f7ff fc92 	bl	8017884 <__sinit>
 8017f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f62:	07d9      	lsls	r1, r3, #31
 8017f64:	d405      	bmi.n	8017f72 <_vfiprintf_r+0x2a>
 8017f66:	89ab      	ldrh	r3, [r5, #12]
 8017f68:	059a      	lsls	r2, r3, #22
 8017f6a:	d402      	bmi.n	8017f72 <_vfiprintf_r+0x2a>
 8017f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f6e:	f7ff fe92 	bl	8017c96 <__retarget_lock_acquire_recursive>
 8017f72:	89ab      	ldrh	r3, [r5, #12]
 8017f74:	071b      	lsls	r3, r3, #28
 8017f76:	d501      	bpl.n	8017f7c <_vfiprintf_r+0x34>
 8017f78:	692b      	ldr	r3, [r5, #16]
 8017f7a:	b99b      	cbnz	r3, 8017fa4 <_vfiprintf_r+0x5c>
 8017f7c:	4629      	mov	r1, r5
 8017f7e:	4630      	mov	r0, r6
 8017f80:	f7ff fdb0 	bl	8017ae4 <__swsetup_r>
 8017f84:	b170      	cbz	r0, 8017fa4 <_vfiprintf_r+0x5c>
 8017f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f88:	07dc      	lsls	r4, r3, #31
 8017f8a:	d504      	bpl.n	8017f96 <_vfiprintf_r+0x4e>
 8017f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f90:	b01d      	add	sp, #116	@ 0x74
 8017f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f96:	89ab      	ldrh	r3, [r5, #12]
 8017f98:	0598      	lsls	r0, r3, #22
 8017f9a:	d4f7      	bmi.n	8017f8c <_vfiprintf_r+0x44>
 8017f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f9e:	f7ff fe7b 	bl	8017c98 <__retarget_lock_release_recursive>
 8017fa2:	e7f3      	b.n	8017f8c <_vfiprintf_r+0x44>
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fa8:	2320      	movs	r3, #32
 8017faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8017fb2:	2330      	movs	r3, #48	@ 0x30
 8017fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018164 <_vfiprintf_r+0x21c>
 8017fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017fbc:	f04f 0901 	mov.w	r9, #1
 8017fc0:	4623      	mov	r3, r4
 8017fc2:	469a      	mov	sl, r3
 8017fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fc8:	b10a      	cbz	r2, 8017fce <_vfiprintf_r+0x86>
 8017fca:	2a25      	cmp	r2, #37	@ 0x25
 8017fcc:	d1f9      	bne.n	8017fc2 <_vfiprintf_r+0x7a>
 8017fce:	ebba 0b04 	subs.w	fp, sl, r4
 8017fd2:	d00b      	beq.n	8017fec <_vfiprintf_r+0xa4>
 8017fd4:	465b      	mov	r3, fp
 8017fd6:	4622      	mov	r2, r4
 8017fd8:	4629      	mov	r1, r5
 8017fda:	4630      	mov	r0, r6
 8017fdc:	f7ff ffa1 	bl	8017f22 <__sfputs_r>
 8017fe0:	3001      	adds	r0, #1
 8017fe2:	f000 80a7 	beq.w	8018134 <_vfiprintf_r+0x1ec>
 8017fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017fe8:	445a      	add	r2, fp
 8017fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8017fec:	f89a 3000 	ldrb.w	r3, [sl]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	f000 809f 	beq.w	8018134 <_vfiprintf_r+0x1ec>
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018000:	f10a 0a01 	add.w	sl, sl, #1
 8018004:	9304      	str	r3, [sp, #16]
 8018006:	9307      	str	r3, [sp, #28]
 8018008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801800c:	931a      	str	r3, [sp, #104]	@ 0x68
 801800e:	4654      	mov	r4, sl
 8018010:	2205      	movs	r2, #5
 8018012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018016:	4853      	ldr	r0, [pc, #332]	@ (8018164 <_vfiprintf_r+0x21c>)
 8018018:	f7e8 f8fa 	bl	8000210 <memchr>
 801801c:	9a04      	ldr	r2, [sp, #16]
 801801e:	b9d8      	cbnz	r0, 8018058 <_vfiprintf_r+0x110>
 8018020:	06d1      	lsls	r1, r2, #27
 8018022:	bf44      	itt	mi
 8018024:	2320      	movmi	r3, #32
 8018026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801802a:	0713      	lsls	r3, r2, #28
 801802c:	bf44      	itt	mi
 801802e:	232b      	movmi	r3, #43	@ 0x2b
 8018030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018034:	f89a 3000 	ldrb.w	r3, [sl]
 8018038:	2b2a      	cmp	r3, #42	@ 0x2a
 801803a:	d015      	beq.n	8018068 <_vfiprintf_r+0x120>
 801803c:	9a07      	ldr	r2, [sp, #28]
 801803e:	4654      	mov	r4, sl
 8018040:	2000      	movs	r0, #0
 8018042:	f04f 0c0a 	mov.w	ip, #10
 8018046:	4621      	mov	r1, r4
 8018048:	f811 3b01 	ldrb.w	r3, [r1], #1
 801804c:	3b30      	subs	r3, #48	@ 0x30
 801804e:	2b09      	cmp	r3, #9
 8018050:	d94b      	bls.n	80180ea <_vfiprintf_r+0x1a2>
 8018052:	b1b0      	cbz	r0, 8018082 <_vfiprintf_r+0x13a>
 8018054:	9207      	str	r2, [sp, #28]
 8018056:	e014      	b.n	8018082 <_vfiprintf_r+0x13a>
 8018058:	eba0 0308 	sub.w	r3, r0, r8
 801805c:	fa09 f303 	lsl.w	r3, r9, r3
 8018060:	4313      	orrs	r3, r2
 8018062:	9304      	str	r3, [sp, #16]
 8018064:	46a2      	mov	sl, r4
 8018066:	e7d2      	b.n	801800e <_vfiprintf_r+0xc6>
 8018068:	9b03      	ldr	r3, [sp, #12]
 801806a:	1d19      	adds	r1, r3, #4
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	9103      	str	r1, [sp, #12]
 8018070:	2b00      	cmp	r3, #0
 8018072:	bfbb      	ittet	lt
 8018074:	425b      	neglt	r3, r3
 8018076:	f042 0202 	orrlt.w	r2, r2, #2
 801807a:	9307      	strge	r3, [sp, #28]
 801807c:	9307      	strlt	r3, [sp, #28]
 801807e:	bfb8      	it	lt
 8018080:	9204      	strlt	r2, [sp, #16]
 8018082:	7823      	ldrb	r3, [r4, #0]
 8018084:	2b2e      	cmp	r3, #46	@ 0x2e
 8018086:	d10a      	bne.n	801809e <_vfiprintf_r+0x156>
 8018088:	7863      	ldrb	r3, [r4, #1]
 801808a:	2b2a      	cmp	r3, #42	@ 0x2a
 801808c:	d132      	bne.n	80180f4 <_vfiprintf_r+0x1ac>
 801808e:	9b03      	ldr	r3, [sp, #12]
 8018090:	1d1a      	adds	r2, r3, #4
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	9203      	str	r2, [sp, #12]
 8018096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801809a:	3402      	adds	r4, #2
 801809c:	9305      	str	r3, [sp, #20]
 801809e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018174 <_vfiprintf_r+0x22c>
 80180a2:	7821      	ldrb	r1, [r4, #0]
 80180a4:	2203      	movs	r2, #3
 80180a6:	4650      	mov	r0, sl
 80180a8:	f7e8 f8b2 	bl	8000210 <memchr>
 80180ac:	b138      	cbz	r0, 80180be <_vfiprintf_r+0x176>
 80180ae:	9b04      	ldr	r3, [sp, #16]
 80180b0:	eba0 000a 	sub.w	r0, r0, sl
 80180b4:	2240      	movs	r2, #64	@ 0x40
 80180b6:	4082      	lsls	r2, r0
 80180b8:	4313      	orrs	r3, r2
 80180ba:	3401      	adds	r4, #1
 80180bc:	9304      	str	r3, [sp, #16]
 80180be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180c2:	4829      	ldr	r0, [pc, #164]	@ (8018168 <_vfiprintf_r+0x220>)
 80180c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80180c8:	2206      	movs	r2, #6
 80180ca:	f7e8 f8a1 	bl	8000210 <memchr>
 80180ce:	2800      	cmp	r0, #0
 80180d0:	d03f      	beq.n	8018152 <_vfiprintf_r+0x20a>
 80180d2:	4b26      	ldr	r3, [pc, #152]	@ (801816c <_vfiprintf_r+0x224>)
 80180d4:	bb1b      	cbnz	r3, 801811e <_vfiprintf_r+0x1d6>
 80180d6:	9b03      	ldr	r3, [sp, #12]
 80180d8:	3307      	adds	r3, #7
 80180da:	f023 0307 	bic.w	r3, r3, #7
 80180de:	3308      	adds	r3, #8
 80180e0:	9303      	str	r3, [sp, #12]
 80180e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180e4:	443b      	add	r3, r7
 80180e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80180e8:	e76a      	b.n	8017fc0 <_vfiprintf_r+0x78>
 80180ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80180ee:	460c      	mov	r4, r1
 80180f0:	2001      	movs	r0, #1
 80180f2:	e7a8      	b.n	8018046 <_vfiprintf_r+0xfe>
 80180f4:	2300      	movs	r3, #0
 80180f6:	3401      	adds	r4, #1
 80180f8:	9305      	str	r3, [sp, #20]
 80180fa:	4619      	mov	r1, r3
 80180fc:	f04f 0c0a 	mov.w	ip, #10
 8018100:	4620      	mov	r0, r4
 8018102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018106:	3a30      	subs	r2, #48	@ 0x30
 8018108:	2a09      	cmp	r2, #9
 801810a:	d903      	bls.n	8018114 <_vfiprintf_r+0x1cc>
 801810c:	2b00      	cmp	r3, #0
 801810e:	d0c6      	beq.n	801809e <_vfiprintf_r+0x156>
 8018110:	9105      	str	r1, [sp, #20]
 8018112:	e7c4      	b.n	801809e <_vfiprintf_r+0x156>
 8018114:	fb0c 2101 	mla	r1, ip, r1, r2
 8018118:	4604      	mov	r4, r0
 801811a:	2301      	movs	r3, #1
 801811c:	e7f0      	b.n	8018100 <_vfiprintf_r+0x1b8>
 801811e:	ab03      	add	r3, sp, #12
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	462a      	mov	r2, r5
 8018124:	4b12      	ldr	r3, [pc, #72]	@ (8018170 <_vfiprintf_r+0x228>)
 8018126:	a904      	add	r1, sp, #16
 8018128:	4630      	mov	r0, r6
 801812a:	f3af 8000 	nop.w
 801812e:	4607      	mov	r7, r0
 8018130:	1c78      	adds	r0, r7, #1
 8018132:	d1d6      	bne.n	80180e2 <_vfiprintf_r+0x19a>
 8018134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018136:	07d9      	lsls	r1, r3, #31
 8018138:	d405      	bmi.n	8018146 <_vfiprintf_r+0x1fe>
 801813a:	89ab      	ldrh	r3, [r5, #12]
 801813c:	059a      	lsls	r2, r3, #22
 801813e:	d402      	bmi.n	8018146 <_vfiprintf_r+0x1fe>
 8018140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018142:	f7ff fda9 	bl	8017c98 <__retarget_lock_release_recursive>
 8018146:	89ab      	ldrh	r3, [r5, #12]
 8018148:	065b      	lsls	r3, r3, #25
 801814a:	f53f af1f 	bmi.w	8017f8c <_vfiprintf_r+0x44>
 801814e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018150:	e71e      	b.n	8017f90 <_vfiprintf_r+0x48>
 8018152:	ab03      	add	r3, sp, #12
 8018154:	9300      	str	r3, [sp, #0]
 8018156:	462a      	mov	r2, r5
 8018158:	4b05      	ldr	r3, [pc, #20]	@ (8018170 <_vfiprintf_r+0x228>)
 801815a:	a904      	add	r1, sp, #16
 801815c:	4630      	mov	r0, r6
 801815e:	f000 f879 	bl	8018254 <_printf_i>
 8018162:	e7e4      	b.n	801812e <_vfiprintf_r+0x1e6>
 8018164:	0801c099 	.word	0x0801c099
 8018168:	0801c0a3 	.word	0x0801c0a3
 801816c:	00000000 	.word	0x00000000
 8018170:	08017f23 	.word	0x08017f23
 8018174:	0801c09f 	.word	0x0801c09f

08018178 <_printf_common>:
 8018178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801817c:	4616      	mov	r6, r2
 801817e:	4698      	mov	r8, r3
 8018180:	688a      	ldr	r2, [r1, #8]
 8018182:	690b      	ldr	r3, [r1, #16]
 8018184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018188:	4293      	cmp	r3, r2
 801818a:	bfb8      	it	lt
 801818c:	4613      	movlt	r3, r2
 801818e:	6033      	str	r3, [r6, #0]
 8018190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018194:	4607      	mov	r7, r0
 8018196:	460c      	mov	r4, r1
 8018198:	b10a      	cbz	r2, 801819e <_printf_common+0x26>
 801819a:	3301      	adds	r3, #1
 801819c:	6033      	str	r3, [r6, #0]
 801819e:	6823      	ldr	r3, [r4, #0]
 80181a0:	0699      	lsls	r1, r3, #26
 80181a2:	bf42      	ittt	mi
 80181a4:	6833      	ldrmi	r3, [r6, #0]
 80181a6:	3302      	addmi	r3, #2
 80181a8:	6033      	strmi	r3, [r6, #0]
 80181aa:	6825      	ldr	r5, [r4, #0]
 80181ac:	f015 0506 	ands.w	r5, r5, #6
 80181b0:	d106      	bne.n	80181c0 <_printf_common+0x48>
 80181b2:	f104 0a19 	add.w	sl, r4, #25
 80181b6:	68e3      	ldr	r3, [r4, #12]
 80181b8:	6832      	ldr	r2, [r6, #0]
 80181ba:	1a9b      	subs	r3, r3, r2
 80181bc:	42ab      	cmp	r3, r5
 80181be:	dc26      	bgt.n	801820e <_printf_common+0x96>
 80181c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80181c4:	6822      	ldr	r2, [r4, #0]
 80181c6:	3b00      	subs	r3, #0
 80181c8:	bf18      	it	ne
 80181ca:	2301      	movne	r3, #1
 80181cc:	0692      	lsls	r2, r2, #26
 80181ce:	d42b      	bmi.n	8018228 <_printf_common+0xb0>
 80181d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80181d4:	4641      	mov	r1, r8
 80181d6:	4638      	mov	r0, r7
 80181d8:	47c8      	blx	r9
 80181da:	3001      	adds	r0, #1
 80181dc:	d01e      	beq.n	801821c <_printf_common+0xa4>
 80181de:	6823      	ldr	r3, [r4, #0]
 80181e0:	6922      	ldr	r2, [r4, #16]
 80181e2:	f003 0306 	and.w	r3, r3, #6
 80181e6:	2b04      	cmp	r3, #4
 80181e8:	bf02      	ittt	eq
 80181ea:	68e5      	ldreq	r5, [r4, #12]
 80181ec:	6833      	ldreq	r3, [r6, #0]
 80181ee:	1aed      	subeq	r5, r5, r3
 80181f0:	68a3      	ldr	r3, [r4, #8]
 80181f2:	bf0c      	ite	eq
 80181f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80181f8:	2500      	movne	r5, #0
 80181fa:	4293      	cmp	r3, r2
 80181fc:	bfc4      	itt	gt
 80181fe:	1a9b      	subgt	r3, r3, r2
 8018200:	18ed      	addgt	r5, r5, r3
 8018202:	2600      	movs	r6, #0
 8018204:	341a      	adds	r4, #26
 8018206:	42b5      	cmp	r5, r6
 8018208:	d11a      	bne.n	8018240 <_printf_common+0xc8>
 801820a:	2000      	movs	r0, #0
 801820c:	e008      	b.n	8018220 <_printf_common+0xa8>
 801820e:	2301      	movs	r3, #1
 8018210:	4652      	mov	r2, sl
 8018212:	4641      	mov	r1, r8
 8018214:	4638      	mov	r0, r7
 8018216:	47c8      	blx	r9
 8018218:	3001      	adds	r0, #1
 801821a:	d103      	bne.n	8018224 <_printf_common+0xac>
 801821c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018224:	3501      	adds	r5, #1
 8018226:	e7c6      	b.n	80181b6 <_printf_common+0x3e>
 8018228:	18e1      	adds	r1, r4, r3
 801822a:	1c5a      	adds	r2, r3, #1
 801822c:	2030      	movs	r0, #48	@ 0x30
 801822e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018232:	4422      	add	r2, r4
 8018234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801823c:	3302      	adds	r3, #2
 801823e:	e7c7      	b.n	80181d0 <_printf_common+0x58>
 8018240:	2301      	movs	r3, #1
 8018242:	4622      	mov	r2, r4
 8018244:	4641      	mov	r1, r8
 8018246:	4638      	mov	r0, r7
 8018248:	47c8      	blx	r9
 801824a:	3001      	adds	r0, #1
 801824c:	d0e6      	beq.n	801821c <_printf_common+0xa4>
 801824e:	3601      	adds	r6, #1
 8018250:	e7d9      	b.n	8018206 <_printf_common+0x8e>
	...

08018254 <_printf_i>:
 8018254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018258:	7e0f      	ldrb	r7, [r1, #24]
 801825a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801825c:	2f78      	cmp	r7, #120	@ 0x78
 801825e:	4691      	mov	r9, r2
 8018260:	4680      	mov	r8, r0
 8018262:	460c      	mov	r4, r1
 8018264:	469a      	mov	sl, r3
 8018266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801826a:	d807      	bhi.n	801827c <_printf_i+0x28>
 801826c:	2f62      	cmp	r7, #98	@ 0x62
 801826e:	d80a      	bhi.n	8018286 <_printf_i+0x32>
 8018270:	2f00      	cmp	r7, #0
 8018272:	f000 80d1 	beq.w	8018418 <_printf_i+0x1c4>
 8018276:	2f58      	cmp	r7, #88	@ 0x58
 8018278:	f000 80b8 	beq.w	80183ec <_printf_i+0x198>
 801827c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018284:	e03a      	b.n	80182fc <_printf_i+0xa8>
 8018286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801828a:	2b15      	cmp	r3, #21
 801828c:	d8f6      	bhi.n	801827c <_printf_i+0x28>
 801828e:	a101      	add	r1, pc, #4	@ (adr r1, 8018294 <_printf_i+0x40>)
 8018290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018294:	080182ed 	.word	0x080182ed
 8018298:	08018301 	.word	0x08018301
 801829c:	0801827d 	.word	0x0801827d
 80182a0:	0801827d 	.word	0x0801827d
 80182a4:	0801827d 	.word	0x0801827d
 80182a8:	0801827d 	.word	0x0801827d
 80182ac:	08018301 	.word	0x08018301
 80182b0:	0801827d 	.word	0x0801827d
 80182b4:	0801827d 	.word	0x0801827d
 80182b8:	0801827d 	.word	0x0801827d
 80182bc:	0801827d 	.word	0x0801827d
 80182c0:	080183ff 	.word	0x080183ff
 80182c4:	0801832b 	.word	0x0801832b
 80182c8:	080183b9 	.word	0x080183b9
 80182cc:	0801827d 	.word	0x0801827d
 80182d0:	0801827d 	.word	0x0801827d
 80182d4:	08018421 	.word	0x08018421
 80182d8:	0801827d 	.word	0x0801827d
 80182dc:	0801832b 	.word	0x0801832b
 80182e0:	0801827d 	.word	0x0801827d
 80182e4:	0801827d 	.word	0x0801827d
 80182e8:	080183c1 	.word	0x080183c1
 80182ec:	6833      	ldr	r3, [r6, #0]
 80182ee:	1d1a      	adds	r2, r3, #4
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	6032      	str	r2, [r6, #0]
 80182f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80182f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80182fc:	2301      	movs	r3, #1
 80182fe:	e09c      	b.n	801843a <_printf_i+0x1e6>
 8018300:	6833      	ldr	r3, [r6, #0]
 8018302:	6820      	ldr	r0, [r4, #0]
 8018304:	1d19      	adds	r1, r3, #4
 8018306:	6031      	str	r1, [r6, #0]
 8018308:	0606      	lsls	r6, r0, #24
 801830a:	d501      	bpl.n	8018310 <_printf_i+0xbc>
 801830c:	681d      	ldr	r5, [r3, #0]
 801830e:	e003      	b.n	8018318 <_printf_i+0xc4>
 8018310:	0645      	lsls	r5, r0, #25
 8018312:	d5fb      	bpl.n	801830c <_printf_i+0xb8>
 8018314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018318:	2d00      	cmp	r5, #0
 801831a:	da03      	bge.n	8018324 <_printf_i+0xd0>
 801831c:	232d      	movs	r3, #45	@ 0x2d
 801831e:	426d      	negs	r5, r5
 8018320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018324:	4858      	ldr	r0, [pc, #352]	@ (8018488 <_printf_i+0x234>)
 8018326:	230a      	movs	r3, #10
 8018328:	e011      	b.n	801834e <_printf_i+0xfa>
 801832a:	6821      	ldr	r1, [r4, #0]
 801832c:	6833      	ldr	r3, [r6, #0]
 801832e:	0608      	lsls	r0, r1, #24
 8018330:	f853 5b04 	ldr.w	r5, [r3], #4
 8018334:	d402      	bmi.n	801833c <_printf_i+0xe8>
 8018336:	0649      	lsls	r1, r1, #25
 8018338:	bf48      	it	mi
 801833a:	b2ad      	uxthmi	r5, r5
 801833c:	2f6f      	cmp	r7, #111	@ 0x6f
 801833e:	4852      	ldr	r0, [pc, #328]	@ (8018488 <_printf_i+0x234>)
 8018340:	6033      	str	r3, [r6, #0]
 8018342:	bf14      	ite	ne
 8018344:	230a      	movne	r3, #10
 8018346:	2308      	moveq	r3, #8
 8018348:	2100      	movs	r1, #0
 801834a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801834e:	6866      	ldr	r6, [r4, #4]
 8018350:	60a6      	str	r6, [r4, #8]
 8018352:	2e00      	cmp	r6, #0
 8018354:	db05      	blt.n	8018362 <_printf_i+0x10e>
 8018356:	6821      	ldr	r1, [r4, #0]
 8018358:	432e      	orrs	r6, r5
 801835a:	f021 0104 	bic.w	r1, r1, #4
 801835e:	6021      	str	r1, [r4, #0]
 8018360:	d04b      	beq.n	80183fa <_printf_i+0x1a6>
 8018362:	4616      	mov	r6, r2
 8018364:	fbb5 f1f3 	udiv	r1, r5, r3
 8018368:	fb03 5711 	mls	r7, r3, r1, r5
 801836c:	5dc7      	ldrb	r7, [r0, r7]
 801836e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018372:	462f      	mov	r7, r5
 8018374:	42bb      	cmp	r3, r7
 8018376:	460d      	mov	r5, r1
 8018378:	d9f4      	bls.n	8018364 <_printf_i+0x110>
 801837a:	2b08      	cmp	r3, #8
 801837c:	d10b      	bne.n	8018396 <_printf_i+0x142>
 801837e:	6823      	ldr	r3, [r4, #0]
 8018380:	07df      	lsls	r7, r3, #31
 8018382:	d508      	bpl.n	8018396 <_printf_i+0x142>
 8018384:	6923      	ldr	r3, [r4, #16]
 8018386:	6861      	ldr	r1, [r4, #4]
 8018388:	4299      	cmp	r1, r3
 801838a:	bfde      	ittt	le
 801838c:	2330      	movle	r3, #48	@ 0x30
 801838e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018392:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018396:	1b92      	subs	r2, r2, r6
 8018398:	6122      	str	r2, [r4, #16]
 801839a:	f8cd a000 	str.w	sl, [sp]
 801839e:	464b      	mov	r3, r9
 80183a0:	aa03      	add	r2, sp, #12
 80183a2:	4621      	mov	r1, r4
 80183a4:	4640      	mov	r0, r8
 80183a6:	f7ff fee7 	bl	8018178 <_printf_common>
 80183aa:	3001      	adds	r0, #1
 80183ac:	d14a      	bne.n	8018444 <_printf_i+0x1f0>
 80183ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183b2:	b004      	add	sp, #16
 80183b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	f043 0320 	orr.w	r3, r3, #32
 80183be:	6023      	str	r3, [r4, #0]
 80183c0:	4832      	ldr	r0, [pc, #200]	@ (801848c <_printf_i+0x238>)
 80183c2:	2778      	movs	r7, #120	@ 0x78
 80183c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80183c8:	6823      	ldr	r3, [r4, #0]
 80183ca:	6831      	ldr	r1, [r6, #0]
 80183cc:	061f      	lsls	r7, r3, #24
 80183ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80183d2:	d402      	bmi.n	80183da <_printf_i+0x186>
 80183d4:	065f      	lsls	r7, r3, #25
 80183d6:	bf48      	it	mi
 80183d8:	b2ad      	uxthmi	r5, r5
 80183da:	6031      	str	r1, [r6, #0]
 80183dc:	07d9      	lsls	r1, r3, #31
 80183de:	bf44      	itt	mi
 80183e0:	f043 0320 	orrmi.w	r3, r3, #32
 80183e4:	6023      	strmi	r3, [r4, #0]
 80183e6:	b11d      	cbz	r5, 80183f0 <_printf_i+0x19c>
 80183e8:	2310      	movs	r3, #16
 80183ea:	e7ad      	b.n	8018348 <_printf_i+0xf4>
 80183ec:	4826      	ldr	r0, [pc, #152]	@ (8018488 <_printf_i+0x234>)
 80183ee:	e7e9      	b.n	80183c4 <_printf_i+0x170>
 80183f0:	6823      	ldr	r3, [r4, #0]
 80183f2:	f023 0320 	bic.w	r3, r3, #32
 80183f6:	6023      	str	r3, [r4, #0]
 80183f8:	e7f6      	b.n	80183e8 <_printf_i+0x194>
 80183fa:	4616      	mov	r6, r2
 80183fc:	e7bd      	b.n	801837a <_printf_i+0x126>
 80183fe:	6833      	ldr	r3, [r6, #0]
 8018400:	6825      	ldr	r5, [r4, #0]
 8018402:	6961      	ldr	r1, [r4, #20]
 8018404:	1d18      	adds	r0, r3, #4
 8018406:	6030      	str	r0, [r6, #0]
 8018408:	062e      	lsls	r6, r5, #24
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	d501      	bpl.n	8018412 <_printf_i+0x1be>
 801840e:	6019      	str	r1, [r3, #0]
 8018410:	e002      	b.n	8018418 <_printf_i+0x1c4>
 8018412:	0668      	lsls	r0, r5, #25
 8018414:	d5fb      	bpl.n	801840e <_printf_i+0x1ba>
 8018416:	8019      	strh	r1, [r3, #0]
 8018418:	2300      	movs	r3, #0
 801841a:	6123      	str	r3, [r4, #16]
 801841c:	4616      	mov	r6, r2
 801841e:	e7bc      	b.n	801839a <_printf_i+0x146>
 8018420:	6833      	ldr	r3, [r6, #0]
 8018422:	1d1a      	adds	r2, r3, #4
 8018424:	6032      	str	r2, [r6, #0]
 8018426:	681e      	ldr	r6, [r3, #0]
 8018428:	6862      	ldr	r2, [r4, #4]
 801842a:	2100      	movs	r1, #0
 801842c:	4630      	mov	r0, r6
 801842e:	f7e7 feef 	bl	8000210 <memchr>
 8018432:	b108      	cbz	r0, 8018438 <_printf_i+0x1e4>
 8018434:	1b80      	subs	r0, r0, r6
 8018436:	6060      	str	r0, [r4, #4]
 8018438:	6863      	ldr	r3, [r4, #4]
 801843a:	6123      	str	r3, [r4, #16]
 801843c:	2300      	movs	r3, #0
 801843e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018442:	e7aa      	b.n	801839a <_printf_i+0x146>
 8018444:	6923      	ldr	r3, [r4, #16]
 8018446:	4632      	mov	r2, r6
 8018448:	4649      	mov	r1, r9
 801844a:	4640      	mov	r0, r8
 801844c:	47d0      	blx	sl
 801844e:	3001      	adds	r0, #1
 8018450:	d0ad      	beq.n	80183ae <_printf_i+0x15a>
 8018452:	6823      	ldr	r3, [r4, #0]
 8018454:	079b      	lsls	r3, r3, #30
 8018456:	d413      	bmi.n	8018480 <_printf_i+0x22c>
 8018458:	68e0      	ldr	r0, [r4, #12]
 801845a:	9b03      	ldr	r3, [sp, #12]
 801845c:	4298      	cmp	r0, r3
 801845e:	bfb8      	it	lt
 8018460:	4618      	movlt	r0, r3
 8018462:	e7a6      	b.n	80183b2 <_printf_i+0x15e>
 8018464:	2301      	movs	r3, #1
 8018466:	4632      	mov	r2, r6
 8018468:	4649      	mov	r1, r9
 801846a:	4640      	mov	r0, r8
 801846c:	47d0      	blx	sl
 801846e:	3001      	adds	r0, #1
 8018470:	d09d      	beq.n	80183ae <_printf_i+0x15a>
 8018472:	3501      	adds	r5, #1
 8018474:	68e3      	ldr	r3, [r4, #12]
 8018476:	9903      	ldr	r1, [sp, #12]
 8018478:	1a5b      	subs	r3, r3, r1
 801847a:	42ab      	cmp	r3, r5
 801847c:	dcf2      	bgt.n	8018464 <_printf_i+0x210>
 801847e:	e7eb      	b.n	8018458 <_printf_i+0x204>
 8018480:	2500      	movs	r5, #0
 8018482:	f104 0619 	add.w	r6, r4, #25
 8018486:	e7f5      	b.n	8018474 <_printf_i+0x220>
 8018488:	0801c0aa 	.word	0x0801c0aa
 801848c:	0801c0bb 	.word	0x0801c0bb

08018490 <__sflush_r>:
 8018490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018498:	0716      	lsls	r6, r2, #28
 801849a:	4605      	mov	r5, r0
 801849c:	460c      	mov	r4, r1
 801849e:	d454      	bmi.n	801854a <__sflush_r+0xba>
 80184a0:	684b      	ldr	r3, [r1, #4]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	dc02      	bgt.n	80184ac <__sflush_r+0x1c>
 80184a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	dd48      	ble.n	801853e <__sflush_r+0xae>
 80184ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80184ae:	2e00      	cmp	r6, #0
 80184b0:	d045      	beq.n	801853e <__sflush_r+0xae>
 80184b2:	2300      	movs	r3, #0
 80184b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80184b8:	682f      	ldr	r7, [r5, #0]
 80184ba:	6a21      	ldr	r1, [r4, #32]
 80184bc:	602b      	str	r3, [r5, #0]
 80184be:	d030      	beq.n	8018522 <__sflush_r+0x92>
 80184c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80184c2:	89a3      	ldrh	r3, [r4, #12]
 80184c4:	0759      	lsls	r1, r3, #29
 80184c6:	d505      	bpl.n	80184d4 <__sflush_r+0x44>
 80184c8:	6863      	ldr	r3, [r4, #4]
 80184ca:	1ad2      	subs	r2, r2, r3
 80184cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80184ce:	b10b      	cbz	r3, 80184d4 <__sflush_r+0x44>
 80184d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80184d2:	1ad2      	subs	r2, r2, r3
 80184d4:	2300      	movs	r3, #0
 80184d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80184d8:	6a21      	ldr	r1, [r4, #32]
 80184da:	4628      	mov	r0, r5
 80184dc:	47b0      	blx	r6
 80184de:	1c43      	adds	r3, r0, #1
 80184e0:	89a3      	ldrh	r3, [r4, #12]
 80184e2:	d106      	bne.n	80184f2 <__sflush_r+0x62>
 80184e4:	6829      	ldr	r1, [r5, #0]
 80184e6:	291d      	cmp	r1, #29
 80184e8:	d82b      	bhi.n	8018542 <__sflush_r+0xb2>
 80184ea:	4a2a      	ldr	r2, [pc, #168]	@ (8018594 <__sflush_r+0x104>)
 80184ec:	40ca      	lsrs	r2, r1
 80184ee:	07d6      	lsls	r6, r2, #31
 80184f0:	d527      	bpl.n	8018542 <__sflush_r+0xb2>
 80184f2:	2200      	movs	r2, #0
 80184f4:	6062      	str	r2, [r4, #4]
 80184f6:	04d9      	lsls	r1, r3, #19
 80184f8:	6922      	ldr	r2, [r4, #16]
 80184fa:	6022      	str	r2, [r4, #0]
 80184fc:	d504      	bpl.n	8018508 <__sflush_r+0x78>
 80184fe:	1c42      	adds	r2, r0, #1
 8018500:	d101      	bne.n	8018506 <__sflush_r+0x76>
 8018502:	682b      	ldr	r3, [r5, #0]
 8018504:	b903      	cbnz	r3, 8018508 <__sflush_r+0x78>
 8018506:	6560      	str	r0, [r4, #84]	@ 0x54
 8018508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801850a:	602f      	str	r7, [r5, #0]
 801850c:	b1b9      	cbz	r1, 801853e <__sflush_r+0xae>
 801850e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018512:	4299      	cmp	r1, r3
 8018514:	d002      	beq.n	801851c <__sflush_r+0x8c>
 8018516:	4628      	mov	r0, r5
 8018518:	f7ff fbec 	bl	8017cf4 <_free_r>
 801851c:	2300      	movs	r3, #0
 801851e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018520:	e00d      	b.n	801853e <__sflush_r+0xae>
 8018522:	2301      	movs	r3, #1
 8018524:	4628      	mov	r0, r5
 8018526:	47b0      	blx	r6
 8018528:	4602      	mov	r2, r0
 801852a:	1c50      	adds	r0, r2, #1
 801852c:	d1c9      	bne.n	80184c2 <__sflush_r+0x32>
 801852e:	682b      	ldr	r3, [r5, #0]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d0c6      	beq.n	80184c2 <__sflush_r+0x32>
 8018534:	2b1d      	cmp	r3, #29
 8018536:	d001      	beq.n	801853c <__sflush_r+0xac>
 8018538:	2b16      	cmp	r3, #22
 801853a:	d11e      	bne.n	801857a <__sflush_r+0xea>
 801853c:	602f      	str	r7, [r5, #0]
 801853e:	2000      	movs	r0, #0
 8018540:	e022      	b.n	8018588 <__sflush_r+0xf8>
 8018542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018546:	b21b      	sxth	r3, r3
 8018548:	e01b      	b.n	8018582 <__sflush_r+0xf2>
 801854a:	690f      	ldr	r7, [r1, #16]
 801854c:	2f00      	cmp	r7, #0
 801854e:	d0f6      	beq.n	801853e <__sflush_r+0xae>
 8018550:	0793      	lsls	r3, r2, #30
 8018552:	680e      	ldr	r6, [r1, #0]
 8018554:	bf08      	it	eq
 8018556:	694b      	ldreq	r3, [r1, #20]
 8018558:	600f      	str	r7, [r1, #0]
 801855a:	bf18      	it	ne
 801855c:	2300      	movne	r3, #0
 801855e:	eba6 0807 	sub.w	r8, r6, r7
 8018562:	608b      	str	r3, [r1, #8]
 8018564:	f1b8 0f00 	cmp.w	r8, #0
 8018568:	dde9      	ble.n	801853e <__sflush_r+0xae>
 801856a:	6a21      	ldr	r1, [r4, #32]
 801856c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801856e:	4643      	mov	r3, r8
 8018570:	463a      	mov	r2, r7
 8018572:	4628      	mov	r0, r5
 8018574:	47b0      	blx	r6
 8018576:	2800      	cmp	r0, #0
 8018578:	dc08      	bgt.n	801858c <__sflush_r+0xfc>
 801857a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801857e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018582:	81a3      	strh	r3, [r4, #12]
 8018584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801858c:	4407      	add	r7, r0
 801858e:	eba8 0800 	sub.w	r8, r8, r0
 8018592:	e7e7      	b.n	8018564 <__sflush_r+0xd4>
 8018594:	20400001 	.word	0x20400001

08018598 <_fflush_r>:
 8018598:	b538      	push	{r3, r4, r5, lr}
 801859a:	690b      	ldr	r3, [r1, #16]
 801859c:	4605      	mov	r5, r0
 801859e:	460c      	mov	r4, r1
 80185a0:	b913      	cbnz	r3, 80185a8 <_fflush_r+0x10>
 80185a2:	2500      	movs	r5, #0
 80185a4:	4628      	mov	r0, r5
 80185a6:	bd38      	pop	{r3, r4, r5, pc}
 80185a8:	b118      	cbz	r0, 80185b2 <_fflush_r+0x1a>
 80185aa:	6a03      	ldr	r3, [r0, #32]
 80185ac:	b90b      	cbnz	r3, 80185b2 <_fflush_r+0x1a>
 80185ae:	f7ff f969 	bl	8017884 <__sinit>
 80185b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d0f3      	beq.n	80185a2 <_fflush_r+0xa>
 80185ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80185bc:	07d0      	lsls	r0, r2, #31
 80185be:	d404      	bmi.n	80185ca <_fflush_r+0x32>
 80185c0:	0599      	lsls	r1, r3, #22
 80185c2:	d402      	bmi.n	80185ca <_fflush_r+0x32>
 80185c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185c6:	f7ff fb66 	bl	8017c96 <__retarget_lock_acquire_recursive>
 80185ca:	4628      	mov	r0, r5
 80185cc:	4621      	mov	r1, r4
 80185ce:	f7ff ff5f 	bl	8018490 <__sflush_r>
 80185d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80185d4:	07da      	lsls	r2, r3, #31
 80185d6:	4605      	mov	r5, r0
 80185d8:	d4e4      	bmi.n	80185a4 <_fflush_r+0xc>
 80185da:	89a3      	ldrh	r3, [r4, #12]
 80185dc:	059b      	lsls	r3, r3, #22
 80185de:	d4e1      	bmi.n	80185a4 <_fflush_r+0xc>
 80185e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185e2:	f7ff fb59 	bl	8017c98 <__retarget_lock_release_recursive>
 80185e6:	e7dd      	b.n	80185a4 <_fflush_r+0xc>

080185e8 <fiprintf>:
 80185e8:	b40e      	push	{r1, r2, r3}
 80185ea:	b503      	push	{r0, r1, lr}
 80185ec:	4601      	mov	r1, r0
 80185ee:	ab03      	add	r3, sp, #12
 80185f0:	4805      	ldr	r0, [pc, #20]	@ (8018608 <fiprintf+0x20>)
 80185f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80185f6:	6800      	ldr	r0, [r0, #0]
 80185f8:	9301      	str	r3, [sp, #4]
 80185fa:	f7ff fca5 	bl	8017f48 <_vfiprintf_r>
 80185fe:	b002      	add	sp, #8
 8018600:	f85d eb04 	ldr.w	lr, [sp], #4
 8018604:	b003      	add	sp, #12
 8018606:	4770      	bx	lr
 8018608:	2000007c 	.word	0x2000007c

0801860c <__swhatbuf_r>:
 801860c:	b570      	push	{r4, r5, r6, lr}
 801860e:	460c      	mov	r4, r1
 8018610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018614:	2900      	cmp	r1, #0
 8018616:	b096      	sub	sp, #88	@ 0x58
 8018618:	4615      	mov	r5, r2
 801861a:	461e      	mov	r6, r3
 801861c:	da0d      	bge.n	801863a <__swhatbuf_r+0x2e>
 801861e:	89a3      	ldrh	r3, [r4, #12]
 8018620:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018624:	f04f 0100 	mov.w	r1, #0
 8018628:	bf14      	ite	ne
 801862a:	2340      	movne	r3, #64	@ 0x40
 801862c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018630:	2000      	movs	r0, #0
 8018632:	6031      	str	r1, [r6, #0]
 8018634:	602b      	str	r3, [r5, #0]
 8018636:	b016      	add	sp, #88	@ 0x58
 8018638:	bd70      	pop	{r4, r5, r6, pc}
 801863a:	466a      	mov	r2, sp
 801863c:	f000 f87c 	bl	8018738 <_fstat_r>
 8018640:	2800      	cmp	r0, #0
 8018642:	dbec      	blt.n	801861e <__swhatbuf_r+0x12>
 8018644:	9901      	ldr	r1, [sp, #4]
 8018646:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801864a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801864e:	4259      	negs	r1, r3
 8018650:	4159      	adcs	r1, r3
 8018652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018656:	e7eb      	b.n	8018630 <__swhatbuf_r+0x24>

08018658 <__smakebuf_r>:
 8018658:	898b      	ldrh	r3, [r1, #12]
 801865a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801865c:	079d      	lsls	r5, r3, #30
 801865e:	4606      	mov	r6, r0
 8018660:	460c      	mov	r4, r1
 8018662:	d507      	bpl.n	8018674 <__smakebuf_r+0x1c>
 8018664:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018668:	6023      	str	r3, [r4, #0]
 801866a:	6123      	str	r3, [r4, #16]
 801866c:	2301      	movs	r3, #1
 801866e:	6163      	str	r3, [r4, #20]
 8018670:	b003      	add	sp, #12
 8018672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018674:	ab01      	add	r3, sp, #4
 8018676:	466a      	mov	r2, sp
 8018678:	f7ff ffc8 	bl	801860c <__swhatbuf_r>
 801867c:	9f00      	ldr	r7, [sp, #0]
 801867e:	4605      	mov	r5, r0
 8018680:	4639      	mov	r1, r7
 8018682:	4630      	mov	r0, r6
 8018684:	f7ff fbaa 	bl	8017ddc <_malloc_r>
 8018688:	b948      	cbnz	r0, 801869e <__smakebuf_r+0x46>
 801868a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801868e:	059a      	lsls	r2, r3, #22
 8018690:	d4ee      	bmi.n	8018670 <__smakebuf_r+0x18>
 8018692:	f023 0303 	bic.w	r3, r3, #3
 8018696:	f043 0302 	orr.w	r3, r3, #2
 801869a:	81a3      	strh	r3, [r4, #12]
 801869c:	e7e2      	b.n	8018664 <__smakebuf_r+0xc>
 801869e:	89a3      	ldrh	r3, [r4, #12]
 80186a0:	6020      	str	r0, [r4, #0]
 80186a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80186a6:	81a3      	strh	r3, [r4, #12]
 80186a8:	9b01      	ldr	r3, [sp, #4]
 80186aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80186ae:	b15b      	cbz	r3, 80186c8 <__smakebuf_r+0x70>
 80186b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80186b4:	4630      	mov	r0, r6
 80186b6:	f000 f851 	bl	801875c <_isatty_r>
 80186ba:	b128      	cbz	r0, 80186c8 <__smakebuf_r+0x70>
 80186bc:	89a3      	ldrh	r3, [r4, #12]
 80186be:	f023 0303 	bic.w	r3, r3, #3
 80186c2:	f043 0301 	orr.w	r3, r3, #1
 80186c6:	81a3      	strh	r3, [r4, #12]
 80186c8:	89a3      	ldrh	r3, [r4, #12]
 80186ca:	431d      	orrs	r5, r3
 80186cc:	81a5      	strh	r5, [r4, #12]
 80186ce:	e7cf      	b.n	8018670 <__smakebuf_r+0x18>

080186d0 <_putc_r>:
 80186d0:	b570      	push	{r4, r5, r6, lr}
 80186d2:	460d      	mov	r5, r1
 80186d4:	4614      	mov	r4, r2
 80186d6:	4606      	mov	r6, r0
 80186d8:	b118      	cbz	r0, 80186e2 <_putc_r+0x12>
 80186da:	6a03      	ldr	r3, [r0, #32]
 80186dc:	b90b      	cbnz	r3, 80186e2 <_putc_r+0x12>
 80186de:	f7ff f8d1 	bl	8017884 <__sinit>
 80186e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80186e4:	07d8      	lsls	r0, r3, #31
 80186e6:	d405      	bmi.n	80186f4 <_putc_r+0x24>
 80186e8:	89a3      	ldrh	r3, [r4, #12]
 80186ea:	0599      	lsls	r1, r3, #22
 80186ec:	d402      	bmi.n	80186f4 <_putc_r+0x24>
 80186ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80186f0:	f7ff fad1 	bl	8017c96 <__retarget_lock_acquire_recursive>
 80186f4:	68a3      	ldr	r3, [r4, #8]
 80186f6:	3b01      	subs	r3, #1
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	60a3      	str	r3, [r4, #8]
 80186fc:	da05      	bge.n	801870a <_putc_r+0x3a>
 80186fe:	69a2      	ldr	r2, [r4, #24]
 8018700:	4293      	cmp	r3, r2
 8018702:	db12      	blt.n	801872a <_putc_r+0x5a>
 8018704:	b2eb      	uxtb	r3, r5
 8018706:	2b0a      	cmp	r3, #10
 8018708:	d00f      	beq.n	801872a <_putc_r+0x5a>
 801870a:	6823      	ldr	r3, [r4, #0]
 801870c:	1c5a      	adds	r2, r3, #1
 801870e:	6022      	str	r2, [r4, #0]
 8018710:	701d      	strb	r5, [r3, #0]
 8018712:	b2ed      	uxtb	r5, r5
 8018714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018716:	07da      	lsls	r2, r3, #31
 8018718:	d405      	bmi.n	8018726 <_putc_r+0x56>
 801871a:	89a3      	ldrh	r3, [r4, #12]
 801871c:	059b      	lsls	r3, r3, #22
 801871e:	d402      	bmi.n	8018726 <_putc_r+0x56>
 8018720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018722:	f7ff fab9 	bl	8017c98 <__retarget_lock_release_recursive>
 8018726:	4628      	mov	r0, r5
 8018728:	bd70      	pop	{r4, r5, r6, pc}
 801872a:	4629      	mov	r1, r5
 801872c:	4622      	mov	r2, r4
 801872e:	4630      	mov	r0, r6
 8018730:	f7ff f999 	bl	8017a66 <__swbuf_r>
 8018734:	4605      	mov	r5, r0
 8018736:	e7ed      	b.n	8018714 <_putc_r+0x44>

08018738 <_fstat_r>:
 8018738:	b538      	push	{r3, r4, r5, lr}
 801873a:	4d07      	ldr	r5, [pc, #28]	@ (8018758 <_fstat_r+0x20>)
 801873c:	2300      	movs	r3, #0
 801873e:	4604      	mov	r4, r0
 8018740:	4608      	mov	r0, r1
 8018742:	4611      	mov	r1, r2
 8018744:	602b      	str	r3, [r5, #0]
 8018746:	f7e8 ff69 	bl	800161c <_fstat>
 801874a:	1c43      	adds	r3, r0, #1
 801874c:	d102      	bne.n	8018754 <_fstat_r+0x1c>
 801874e:	682b      	ldr	r3, [r5, #0]
 8018750:	b103      	cbz	r3, 8018754 <_fstat_r+0x1c>
 8018752:	6023      	str	r3, [r4, #0]
 8018754:	bd38      	pop	{r3, r4, r5, pc}
 8018756:	bf00      	nop
 8018758:	20008ad8 	.word	0x20008ad8

0801875c <_isatty_r>:
 801875c:	b538      	push	{r3, r4, r5, lr}
 801875e:	4d06      	ldr	r5, [pc, #24]	@ (8018778 <_isatty_r+0x1c>)
 8018760:	2300      	movs	r3, #0
 8018762:	4604      	mov	r4, r0
 8018764:	4608      	mov	r0, r1
 8018766:	602b      	str	r3, [r5, #0]
 8018768:	f7e8 ff68 	bl	800163c <_isatty>
 801876c:	1c43      	adds	r3, r0, #1
 801876e:	d102      	bne.n	8018776 <_isatty_r+0x1a>
 8018770:	682b      	ldr	r3, [r5, #0]
 8018772:	b103      	cbz	r3, 8018776 <_isatty_r+0x1a>
 8018774:	6023      	str	r3, [r4, #0]
 8018776:	bd38      	pop	{r3, r4, r5, pc}
 8018778:	20008ad8 	.word	0x20008ad8

0801877c <_sbrk_r>:
 801877c:	b538      	push	{r3, r4, r5, lr}
 801877e:	4d06      	ldr	r5, [pc, #24]	@ (8018798 <_sbrk_r+0x1c>)
 8018780:	2300      	movs	r3, #0
 8018782:	4604      	mov	r4, r0
 8018784:	4608      	mov	r0, r1
 8018786:	602b      	str	r3, [r5, #0]
 8018788:	f7e8 ff70 	bl	800166c <_sbrk>
 801878c:	1c43      	adds	r3, r0, #1
 801878e:	d102      	bne.n	8018796 <_sbrk_r+0x1a>
 8018790:	682b      	ldr	r3, [r5, #0]
 8018792:	b103      	cbz	r3, 8018796 <_sbrk_r+0x1a>
 8018794:	6023      	str	r3, [r4, #0]
 8018796:	bd38      	pop	{r3, r4, r5, pc}
 8018798:	20008ad8 	.word	0x20008ad8

0801879c <abort>:
 801879c:	b508      	push	{r3, lr}
 801879e:	2006      	movs	r0, #6
 80187a0:	f000 f82c 	bl	80187fc <raise>
 80187a4:	2001      	movs	r0, #1
 80187a6:	f7e8 ff05 	bl	80015b4 <_exit>

080187aa <_raise_r>:
 80187aa:	291f      	cmp	r1, #31
 80187ac:	b538      	push	{r3, r4, r5, lr}
 80187ae:	4605      	mov	r5, r0
 80187b0:	460c      	mov	r4, r1
 80187b2:	d904      	bls.n	80187be <_raise_r+0x14>
 80187b4:	2316      	movs	r3, #22
 80187b6:	6003      	str	r3, [r0, #0]
 80187b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187bc:	bd38      	pop	{r3, r4, r5, pc}
 80187be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80187c0:	b112      	cbz	r2, 80187c8 <_raise_r+0x1e>
 80187c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80187c6:	b94b      	cbnz	r3, 80187dc <_raise_r+0x32>
 80187c8:	4628      	mov	r0, r5
 80187ca:	f000 f831 	bl	8018830 <_getpid_r>
 80187ce:	4622      	mov	r2, r4
 80187d0:	4601      	mov	r1, r0
 80187d2:	4628      	mov	r0, r5
 80187d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187d8:	f000 b818 	b.w	801880c <_kill_r>
 80187dc:	2b01      	cmp	r3, #1
 80187de:	d00a      	beq.n	80187f6 <_raise_r+0x4c>
 80187e0:	1c59      	adds	r1, r3, #1
 80187e2:	d103      	bne.n	80187ec <_raise_r+0x42>
 80187e4:	2316      	movs	r3, #22
 80187e6:	6003      	str	r3, [r0, #0]
 80187e8:	2001      	movs	r0, #1
 80187ea:	e7e7      	b.n	80187bc <_raise_r+0x12>
 80187ec:	2100      	movs	r1, #0
 80187ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80187f2:	4620      	mov	r0, r4
 80187f4:	4798      	blx	r3
 80187f6:	2000      	movs	r0, #0
 80187f8:	e7e0      	b.n	80187bc <_raise_r+0x12>
	...

080187fc <raise>:
 80187fc:	4b02      	ldr	r3, [pc, #8]	@ (8018808 <raise+0xc>)
 80187fe:	4601      	mov	r1, r0
 8018800:	6818      	ldr	r0, [r3, #0]
 8018802:	f7ff bfd2 	b.w	80187aa <_raise_r>
 8018806:	bf00      	nop
 8018808:	2000007c 	.word	0x2000007c

0801880c <_kill_r>:
 801880c:	b538      	push	{r3, r4, r5, lr}
 801880e:	4d07      	ldr	r5, [pc, #28]	@ (801882c <_kill_r+0x20>)
 8018810:	2300      	movs	r3, #0
 8018812:	4604      	mov	r4, r0
 8018814:	4608      	mov	r0, r1
 8018816:	4611      	mov	r1, r2
 8018818:	602b      	str	r3, [r5, #0]
 801881a:	f7e8 feb9 	bl	8001590 <_kill>
 801881e:	1c43      	adds	r3, r0, #1
 8018820:	d102      	bne.n	8018828 <_kill_r+0x1c>
 8018822:	682b      	ldr	r3, [r5, #0]
 8018824:	b103      	cbz	r3, 8018828 <_kill_r+0x1c>
 8018826:	6023      	str	r3, [r4, #0]
 8018828:	bd38      	pop	{r3, r4, r5, pc}
 801882a:	bf00      	nop
 801882c:	20008ad8 	.word	0x20008ad8

08018830 <_getpid_r>:
 8018830:	f7e8 bea6 	b.w	8001580 <_getpid>

08018834 <_init>:
 8018834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018836:	bf00      	nop
 8018838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801883a:	bc08      	pop	{r3}
 801883c:	469e      	mov	lr, r3
 801883e:	4770      	bx	lr

08018840 <_fini>:
 8018840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018842:	bf00      	nop
 8018844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018846:	bc08      	pop	{r3}
 8018848:	469e      	mov	lr, r3
 801884a:	4770      	bx	lr
