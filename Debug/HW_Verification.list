
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003618  08011060  08011060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014678  08014678  0001620c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014678  08014678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014680  08014680  0001620c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014680  08014680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014684  08014684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08014688  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  08014754  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  080147f4  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d9c  2000020c  08014894  0001620c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007fa8  08014894  00016fa8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001620c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f409  00000000  00000000  0001623c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005910  00000000  00000000  00035645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d8  00000000  00000000  0003af58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001157  00000000  00000000  0003c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033b2d  00000000  00000000  0003d687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026adb  00000000  00000000  000711b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001018de  00000000  00000000  00097c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0019956d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005fb4  00000000  00000000  001995b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0019f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011048 	.word	0x08011048

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08011048 	.word	0x08011048

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_GPIO_Init+0x8c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

}
 800065a:	bf00      	nop
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <_write+0x3c>)
 800067a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	b29a      	uxth	r2, r3
 8000680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	4809      	ldr	r0, [pc, #36]	@ (80006ac <_write+0x40>)
 8000688:	f003 fac4 	bl	8003c14 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 800068c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000690:	2201      	movs	r2, #1
 8000692:	6979      	ldr	r1, [r7, #20]
 8000694:	4805      	ldr	r0, [pc, #20]	@ (80006ac <_write+0x40>)
 8000696:	f003 fabd 	bl	8003c14 <HAL_UART_Transmit>
	return len + 1;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	08011060 	.word	0x08011060
 80006ac:	2000022c 	.word	0x2000022c

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fb77 	bl	8000da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f80a 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f7ff ff8e 	bl	80005dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 f9aa 	bl	8000a18 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80006c4:	f004 faa6 	bl	8004c14 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 80006c8:	f00f fbb2 	bl	800fe30 <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0x1c>

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	@ 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00f fe70 	bl	80103c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a29      	ldr	r2, [pc, #164]	@ (80007a0 <SystemClock_Config+0xd0>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a24      	ldr	r2, [pc, #144]	@ (80007a4 <SystemClock_Config+0xd4>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800073c:	23d8      	movs	r3, #216	@ 0xd8
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f999 	bl	8002a84 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000758:	f000 f826 	bl	80007a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800075c:	f002 f942 	bl	80029e4 <HAL_PWREx_EnableOverDrive>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000766:	f000 f81f 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2107      	movs	r1, #7
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fc1f 	bl	8002fcc <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000794:	f000 f808 	bl	80007a8 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	@ 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <Error_Handler+0x8>

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x4>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 fae5 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <USART3_IRQHandler+0x10>)
 8000862:	f003 fa61 	bl	8003d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000022c 	.word	0x2000022c

08000870 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <ETH_IRQHandler+0x10>)
 8000876:	f001 f81d 	bl	80018b4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20004c94 	.word	0x20004c94

08000884 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <ETH_WKUP_IRQHandler+0x10>)
 800088a:	f001 f813 	bl	80018b4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20004c94 	.word	0x20004c94

08000898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return 1;
 800089c:	2301      	movs	r3, #1
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_kill>:

int _kill(int pid, int sig)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <_kill+0x20>)
 80008b4:	2216      	movs	r2, #22
 80008b6:	601a      	str	r2, [r3, #0]
  return -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20007f98 	.word	0x20007f98

080008cc <_exit>:

void _exit (int status)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ffe5 	bl	80008a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <_exit+0x12>

080008e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e00a      	b.n	800090a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f4:	f3af 8000 	nop.w
 80008f8:	4601      	mov	r1, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	60ba      	str	r2, [r7, #8]
 8000900:	b2ca      	uxtb	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbf0      	blt.n	80008f4 <_read+0x12>
  }

  return len;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_close>:
  }
  return len;
}

int _close(int file)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000944:	605a      	str	r2, [r3, #4]
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_isatty>:

int _isatty(int file)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095c:	2301      	movs	r3, #1
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d205      	bcs.n	80009c0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <_sbrk+0x6c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009be:	e009      	b.n	80009d4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20050000 	.word	0x20050000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	20000228 	.word	0x20000228
 80009ec:	20007fa8 	.word	0x20007fa8
 80009f0:	20007f98 	.word	0x20007f98

080009f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <MX_USART3_UART_Init+0x5c>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a5c:	f003 f88c 	bl	8003b78 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a66:	f7ff fe9f 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000022c 	.word	0x2000022c
 8000a74:	40004800 	.word	0x40004800

08000a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0aa      	sub	sp, #168	@ 0xa8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2284      	movs	r2, #132	@ 0x84
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00f fc93 	bl	80103c4 <memset>
  if(uartHandle->Instance==USART3)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a26      	ldr	r2, [pc, #152]	@ (8000b3c <HAL_UART_MspInit+0xc4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d144      	bne.n	8000b32 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fc6e 	bl	8003398 <HAL_RCCEx_PeriphCLKConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ac2:	f7ff fe71 	bl	80007a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <HAL_UART_MspInit+0xc8>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a1d      	ldr	r2, [pc, #116]	@ (8000b40 <HAL_UART_MspInit+0xc8>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <HAL_UART_MspInit+0xc8>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0xc8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_UART_MspInit+0xc8>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_UART_MspInit+0xc8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <HAL_UART_MspInit+0xcc>)
 8000b1e:	f001 fdb5 	bl	800268c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2027      	movs	r0, #39	@ 0x27
 8000b28:	f000 fa99 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b2c:	2027      	movs	r0, #39	@ 0x27
 8000b2e:	f000 fab2 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b32:	bf00      	nop
 8000b34:	37a8      	adds	r7, #168	@ 0xa8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004800 	.word	0x40004800
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4c:	f7ff ff52 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000b76:	f00f fc73 	bl	8010460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fd99 	bl	80006b0 <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000b8c:	08014688 	.word	0x08014688
  ldr r2, =_sbss
 8000b90:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000b94:	20007fa8 	.word	0x20007fa8

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>

08000b9a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00b      	beq.n	8000bc2 <LAN8742_RegisterBusIO+0x28>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d007      	beq.n	8000bc2 <LAN8742_RegisterBusIO+0x28>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <LAN8742_RegisterBusIO+0x28>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc6:	e014      	b.n	8000bf2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d139      	bne.n	8000c8e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e01c      	b.n	8000c6e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f107 020c 	add.w	r2, r7, #12
 8000c3c:	2112      	movs	r1, #18
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	4798      	blx	r3
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	da03      	bge.n	8000c50 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000c48:	f06f 0304 	mvn.w	r3, #4
 8000c4c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000c4e:	e00b      	b.n	8000c68 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 031f 	and.w	r3, r3, #31
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d105      	bne.n	8000c68 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
         break;
 8000c66:	e005      	b.n	8000c74 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b1f      	cmp	r3, #31
 8000c72:	d9df      	bls.n	8000c34 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b1f      	cmp	r3, #31
 8000c7a:	d902      	bls.n	8000c82 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c7c:	f06f 0302 	mvn.w	r3, #2
 8000c80:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000c8e:	693b      	ldr	r3, [r7, #16]
 }
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6810      	ldr	r0, [r2, #0]
 8000cac:	f107 020c 	add.w	r2, r7, #12
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4798      	blx	r3
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da02      	bge.n	8000cc0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cba:	f06f 0304 	mvn.w	r3, #4
 8000cbe:	e06e      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	6810      	ldr	r0, [r2, #0]
 8000cc8:	f107 020c 	add.w	r2, r7, #12
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4798      	blx	r3
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da02      	bge.n	8000cdc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cd6:	f06f 0304 	mvn.w	r3, #4
 8000cda:	e060      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e059      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6810      	ldr	r0, [r2, #0]
 8000cf2:	f107 020c 	add.w	r2, r7, #12
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4798      	blx	r3
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da02      	bge.n	8000d06 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d00:	f06f 0304 	mvn.w	r3, #4
 8000d04:	e04b      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11b      	bne.n	8000d48 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <LAN8742_GetLinkState+0x90>
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d24:	2302      	movs	r3, #2
 8000d26:	e03a      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e033      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d40:	2304      	movs	r3, #4
 8000d42:	e02c      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d44:	2305      	movs	r3, #5
 8000d46:	e02a      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6810      	ldr	r0, [r2, #0]
 8000d50:	f107 020c 	add.w	r2, r7, #12
 8000d54:	211f      	movs	r1, #31
 8000d56:	4798      	blx	r3
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	da02      	bge.n	8000d64 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d5e:	f06f 0304 	mvn.w	r3, #4
 8000d62:	e01c      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	e015      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f003 031c 	and.w	r3, r3, #28
 8000d78:	2b18      	cmp	r3, #24
 8000d7a:	d101      	bne.n	8000d80 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e00e      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 031c 	and.w	r3, r3, #28
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d101      	bne.n	8000d8e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e007      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f003 031c 	and.w	r3, r3, #28
 8000d94:	2b14      	cmp	r3, #20
 8000d96:	d101      	bne.n	8000d9c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e000      	b.n	8000d9e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d9c:	2305      	movs	r3, #5
    }
  }
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 f94c 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db0:	200f      	movs	r0, #15
 8000db2:	f000 f805 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db6:	f7ff fcfd 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f967 	bl	80010b2 <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dfc:	f000 f92f 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200002b4 	.word	0x200002b4

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200002b4 	.word	0x200002b4

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	05fa0000 	.word	0x05fa0000

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff29 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff3e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff31 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff feb6 	bl	8000e48 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d008      	beq.n	80010fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2280      	movs	r2, #128	@ 0x80
 80010ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e052      	b.n	80011a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0216 	bic.w	r2, r2, #22
 800110a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800111a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <HAL_DMA_Abort+0x62>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0208 	bic.w	r2, r2, #8
 800113a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800114c:	e013      	b.n	8001176 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800114e:	f7ff fe7b 	bl	8000e48 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b05      	cmp	r3, #5
 800115a:	d90c      	bls.n	8001176 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2220      	movs	r2, #32
 8001160:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e015      	b.n	80011a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1e4      	bne.n	800114e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001188:	223f      	movs	r2, #63	@ 0x3f
 800118a:	409a      	lsls	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d004      	beq.n	80011c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e00c      	b.n	80011e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2205      	movs	r2, #5
 80011cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e086      	b.n	8001310 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001208:	2b00      	cmp	r3, #0
 800120a:	d106      	bne.n	800121a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f004 f82d 	bl	8005274 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b3f      	ldr	r3, [pc, #252]	@ (8001318 <HAL_ETH_Init+0x128>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a3e      	ldr	r2, [pc, #248]	@ (8001318 <HAL_ETH_Init+0x128>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b3c      	ldr	r3, [pc, #240]	@ (8001318 <HAL_ETH_Init+0x128>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001232:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <HAL_ETH_Init+0x12c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a39      	ldr	r2, [pc, #228]	@ (800131c <HAL_ETH_Init+0x12c>)
 8001238:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800123c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800123e:	4b37      	ldr	r3, [pc, #220]	@ (800131c <HAL_ETH_Init+0x12c>)
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4935      	ldr	r1, [pc, #212]	@ (800131c <HAL_ETH_Init+0x12c>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800124c:	4b33      	ldr	r3, [pc, #204]	@ (800131c <HAL_ETH_Init+0x12c>)
 800124e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001266:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001268:	f7ff fdee 	bl	8000e48 <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800126e:	e011      	b.n	8001294 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001270:	f7ff fdea 	bl	8000e48 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800127e:	d909      	bls.n	8001294 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2204      	movs	r2, #4
 8001284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	22e0      	movs	r2, #224	@ 0xe0
 800128c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e03d      	b.n	8001310 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1e4      	bne.n	8001270 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 ff34 	bl	8002114 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 ffdf 	bl	8002270 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f001 f835 	bl	8002322 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	461a      	mov	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 ff9d 	bl	8002200 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_ETH_Init+0x130>)
 80012e4:	430b      	orrs	r3, r1
 80012e6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012fa:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2210      	movs	r2, #16
 800130a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	00020060 	.word	0x00020060

08001324 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001332:	2b10      	cmp	r3, #16
 8001334:	d15f      	bne.n	80013f6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2220      	movs	r2, #32
 800133a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fa2e 	bl	80017ac <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fd81 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800137c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001394:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fd58 	bl	8001e4c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0208 	orr.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fd53 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013da:	69d9      	ldr	r1, [r3, #28]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_ETH_Start_IT+0xdc>)
 80013e2:	430b      	orrs	r3, r1
 80013e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013e8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2240      	movs	r2, #64	@ 0x40
 80013ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
  }
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	0001a0c1 	.word	0x0001a0c1

08001404 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001412:	2b40      	cmp	r3, #64	@ 0x40
 8001414:	d16e      	bne.n	80014f4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2220      	movs	r2, #32
 800141a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001426:	69d9      	ldr	r1, [r3, #28]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_ETH_Stop_IT+0xfc>)
 800142e:	400b      	ands	r3, r1
 8001430:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001434:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001448:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800144c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	f023 0302 	bic.w	r3, r3, #2
 8001460:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001464:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0204 	bic.w	r2, r2, #4
 8001474:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fcee 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fcdd 	bl	8001e4c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0208 	bic.w	r2, r2, #8
 80014a0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff fcd8 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e00e      	b.n	80014dc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	3212      	adds	r2, #18
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d9ed      	bls.n	80014be <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2210      	movs	r2, #16
 80014ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e000      	b.n	80014f6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
  }
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	fffe5f3e 	.word	0xfffe5f3e

08001504 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07c      	b.n	8001624 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001530:	2b40      	cmp	r3, #64	@ 0x40
 8001532:	d176      	bne.n	8001622 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001534:	2200      	movs	r2, #0
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 ff61 	bl	8002400 <ETH_Prepare_Tx_Descriptors>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d009      	beq.n	8001558 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154a:	f043 0202 	orr.w	r2, r3, #2
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e065      	b.n	8001624 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001558:	f3bf 8f4f 	dsb	sy
}
 800155c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3206      	adds	r2, #6
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	629a      	str	r2, [r3, #40]	@ 0x28
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	2b03      	cmp	r3, #3
 800157c:	d904      	bls.n	8001588 <HAL_ETH_Transmit+0x84>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001582:	1f1a      	subs	r2, r3, #4
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3106      	adds	r1, #6
 8001594:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001598:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800159c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800159e:	f7ff fc53 	bl	8000e48 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015a4:	e037      	b.n	8001616 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d011      	beq.n	80015dc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	f043 0208 	orr.w	r2, r3, #8
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e023      	b.n	8001624 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015e2:	d018      	beq.n	8001616 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015e4:	f7ff fc30 	bl	8000e48 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d302      	bcc.n	80015fa <HAL_ETH_Transmit+0xf6>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001610:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e006      	b.n	8001624 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	dbc3      	blt.n	80015a6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0a4      	b.n	80017a2 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800165e:	2b40      	cmp	r3, #64	@ 0x40
 8001660:	d001      	beq.n	8001666 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e09d      	b.n	80017a2 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	3212      	adds	r2, #18
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800167c:	f1c3 0304 	rsb	r3, r3, #4
 8001680:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001682:	e066      	b.n	8001752 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d103      	bne.n	80016b4 <HAL_ETH_ReadData+0x88>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03c      	beq.n	800172e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0c1b      	lsrs	r3, r3, #16
 80016d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016d6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	b29b      	uxth	r3, r3
 800170e:	f003 ff83 	bl	8005618 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	441a      	add	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d902      	bls.n	8001740 <HAL_ETH_ReadData+0x114>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b04      	subs	r3, #4
 800173e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	3212      	adds	r2, #18
 8001746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001756:	2b00      	cmp	r3, #0
 8001758:	db06      	blt.n	8001768 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	429a      	cmp	r2, r3
 8001760:	d202      	bcs.n	8001768 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001762:	7cfb      	ldrb	r3, [r7, #19]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d08d      	beq.n	8001684 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	441a      	add	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f815 	bl	80017ac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001788:	7cfb      	ldrb	r3, [r7, #19]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	e000      	b.n	80017a2 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017b8:	2301      	movs	r3, #1
 80017ba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	3212      	adds	r2, #18
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017d2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017d4:	e042      	b.n	800185c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d112      	bne.n	8001804 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fee8 	bl	80055b8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	74fb      	strb	r3, [r7, #19]
 80017f2:	e007      	b.n	8001804 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	461a      	mov	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	461a      	mov	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001804:	7cfb      	ldrb	r3, [r7, #19]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d028      	beq.n	800185c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <ETH_UpdateDescriptor+0x104>)
 8001818:	4313      	orrs	r3, r2
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	6053      	str	r3, [r2, #4]
 800181e:	e005      	b.n	800182c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d902      	bls.n	800184a <ETH_UpdateDescriptor+0x9e>
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	3b04      	subs	r3, #4
 8001848:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	3212      	adds	r2, #18
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	617b      	str	r3, [r7, #20]
      desccount--;
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	3b01      	subs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <ETH_UpdateDescriptor+0xbc>
 8001862:	7cfb      	ldrb	r3, [r7, #19]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1b6      	bne.n	80017d6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	429a      	cmp	r2, r3
 8001870:	d01a      	beq.n	80018a8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3303      	adds	r3, #3
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800187c:	f3bf 8f5f 	dmb	sy
}
 8001880:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	18ca      	adds	r2, r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	80004000 	.word	0x80004000

080018b4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018dc:	4b4b      	ldr	r3, [pc, #300]	@ (8001a0c <HAL_ETH_IRQHandler+0x158>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <HAL_ETH_IRQHandler+0x56>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fe:	461a      	mov	r2, r3
 8001900:	4b43      	ldr	r3, [pc, #268]	@ (8001a10 <HAL_ETH_IRQHandler+0x15c>)
 8001902:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f891 	bl	8001a2c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00f      	beq.n	8001934 <HAL_ETH_IRQHandler+0x80>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001926:	461a      	mov	r2, r3
 8001928:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800192c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f872 	bl	8001a18 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d042      	beq.n	80019c4 <HAL_ETH_IRQHandler+0x110>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03d      	beq.n	80019c4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	f043 0208 	orr.w	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01a      	beq.n	8001998 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <HAL_ETH_IRQHandler+0x160>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001988:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800198c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	22e0      	movs	r2, #224	@ 0xe0
 8001992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001996:	e012      	b.n	80019be <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019a6:	4013      	ands	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b6:	461a      	mov	r2, r3
 80019b8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f83e 	bl	8001a40 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00e      	beq.n	80019ec <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f838 	bl	8001a54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_ETH_IRQHandler+0x158>)
 80019f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019fc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f832 	bl	8001a68 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40013c00 	.word	0x40013c00
 8001a10:	00010040 	.word	0x00010040
 8001a14:	007e2000 	.word	0x007e2000

08001a18 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	02db      	lsls	r3, r3, #11
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	019b      	lsls	r3, r3, #6
 8001aaa:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001acc:	f7ff f9bc 	bl	8000e48 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad2:	e00d      	b.n	8001af0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ad4:	f7ff f9b8 	bl	8000e48 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae2:	d301      	bcc.n	8001ae8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e010      	b.n	8001b0a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ec      	bne.n	8001ad4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 031c 	and.w	r3, r3, #28
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff f96c 	bl	8000e48 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b72:	e00d      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b74:	f7ff f968 	bl	8000e48 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b82:	d301      	bcc.n	8001b88 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e009      	b.n	8001b9c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ec      	bne.n	8001b74 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0e6      	b.n	8001d86 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00b      	b.n	8001dbe <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d105      	bne.n	8001dbc <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f870 	bl	8001e98 <ETH_SetMACConfig>

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 031c 	bic.w	r3, r3, #28
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001de0:	f001 faa6 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8001de4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d804      	bhi.n	8001df8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e019      	b.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d204      	bcs.n	8001e0a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f043 030c 	orr.w	r3, r3, #12
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e010      	b.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d90c      	bls.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4a0c      	ldr	r2, [pc, #48]	@ (8001e48 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d804      	bhi.n	8001e24 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e003      	b.n	8001e2c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	611a      	str	r2, [r3, #16]
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	02160ebf 	.word	0x02160ebf
 8001e40:	03938700 	.word	0x03938700
 8001e44:	05f5e0ff 	.word	0x05f5e0ff
 8001e48:	08f0d17f 	.word	0x08f0d17f

08001e4c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e6e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7fe ffef 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e8c:	6193      	str	r3, [r2, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <ETH_SetMACConfig+0x164>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	7b9b      	ldrb	r3, [r3, #14]
 8001eb6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	7c12      	ldrb	r2, [r2, #16]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d102      	bne.n	8001ec6 <ETH_SetMACConfig+0x2e>
 8001ec0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ec4:	e000      	b.n	8001ec8 <ETH_SetMACConfig+0x30>
 8001ec6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ec8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	7c52      	ldrb	r2, [r2, #17]
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	d102      	bne.n	8001ed8 <ETH_SetMACConfig+0x40>
 8001ed2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ed6:	e000      	b.n	8001eda <ETH_SetMACConfig+0x42>
 8001ed8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	7fdb      	ldrb	r3, [r3, #31]
 8001ee6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ee8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	7f92      	ldrb	r2, [r2, #30]
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	d102      	bne.n	8001efe <ETH_SetMACConfig+0x66>
 8001ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001efc:	e000      	b.n	8001f00 <ETH_SetMACConfig+0x68>
 8001efe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7f1b      	ldrb	r3, [r3, #28]
 8001f06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	791b      	ldrb	r3, [r3, #4]
 8001f14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d102      	bne.n	8001f28 <ETH_SetMACConfig+0x90>
 8001f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f26:	e000      	b.n	8001f2a <ETH_SetMACConfig+0x92>
 8001f28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	7bdb      	ldrb	r3, [r3, #15]
 8001f30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f42:	4313      	orrs	r3, r2
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7fe ff80 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d101      	bne.n	8001f8e <ETH_SetMACConfig+0xf6>
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	e000      	b.n	8001f90 <ETH_SetMACConfig+0xf8>
 8001f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f90:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f9e:	2a01      	cmp	r2, #1
 8001fa0:	d101      	bne.n	8001fa6 <ETH_SetMACConfig+0x10e>
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	e000      	b.n	8001fa8 <ETH_SetMACConfig+0x110>
 8001fa6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fa8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001fb0:	2a01      	cmp	r2, #1
 8001fb2:	d101      	bne.n	8001fb8 <ETH_SetMACConfig+0x120>
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	e000      	b.n	8001fba <ETH_SetMACConfig+0x122>
 8001fb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001fc2:	2a01      	cmp	r2, #1
 8001fc4:	d101      	bne.n	8001fca <ETH_SetMACConfig+0x132>
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	e000      	b.n	8001fcc <ETH_SetMACConfig+0x134>
 8001fca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe ff3b 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	fd20810f 	.word	0xfd20810f

08002000 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <ETH_SetDMAConfig+0x110>)
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7b1b      	ldrb	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <ETH_SetDMAConfig+0x2c>
 8002026:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800202a:	e000      	b.n	800202e <ETH_SetDMAConfig+0x2e>
 800202c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	7b5b      	ldrb	r3, [r3, #13]
 8002032:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002034:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	7f52      	ldrb	r2, [r2, #29]
 800203a:	2a00      	cmp	r2, #0
 800203c:	d102      	bne.n	8002044 <ETH_SetDMAConfig+0x44>
 800203e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002042:	e000      	b.n	8002046 <ETH_SetDMAConfig+0x46>
 8002044:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002046:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	7b9b      	ldrb	r3, [r3, #14]
 800204c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800204e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002054:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	7f1b      	ldrb	r3, [r3, #28]
 800205a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800205c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	7f9b      	ldrb	r3, [r3, #30]
 8002062:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002064:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800206a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002072:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002074:	4313      	orrs	r3, r2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002084:	461a      	mov	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002096:	2001      	movs	r0, #1
 8002098:	f7fe fee2 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a4:	461a      	mov	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	791b      	ldrb	r3, [r3, #4]
 80020ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7fe feb3 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	f8de3f23 	.word	0xf8de3f23

08002114 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0a6      	sub	sp, #152	@ 0x98
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002128:	2300      	movs	r3, #0
 800212a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800213e:	2301      	movs	r3, #1
 8002140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002144:	2301      	movs	r3, #1
 8002146:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002156:	2300      	movs	r3, #0
 8002158:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002160:	2300      	movs	r3, #0
 8002162:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800217c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002180:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800218e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fe7f 	bl	8001e98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021bc:	2300      	movs	r3, #0
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021d4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021da:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff05 	bl	8002000 <ETH_SetDMAConfig>
}
 80021f6:	bf00      	nop
 80021f8:	3798      	adds	r7, #152	@ 0x98
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3305      	adds	r3, #5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	3204      	adds	r2, #4
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <ETH_MACAddressConfig+0x68>)
 8002222:	4413      	add	r3, r2
 8002224:	461a      	mov	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3303      	adds	r3, #3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	061a      	lsls	r2, r3, #24
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3302      	adds	r3, #2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3301      	adds	r3, #1
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	4313      	orrs	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <ETH_MACAddressConfig+0x6c>)
 8002252:	4413      	add	r3, r2
 8002254:	461a      	mov	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	6013      	str	r3, [r2, #0]
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40028040 	.word	0x40028040
 800226c:	40028044 	.word	0x40028044

08002270 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e03e      	b.n	80022fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68d9      	ldr	r1, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	3206      	adds	r2, #6
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d80c      	bhi.n	80022e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68d9      	ldr	r1, [r3, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	e004      	b.n	80022ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3301      	adds	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d9bd      	bls.n	800227e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002314:	611a      	str	r2, [r3, #16]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	e048      	b.n	80023c2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6919      	ldr	r1, [r3, #16]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800236c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	3212      	adds	r2, #18
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d80c      	bhi.n	80023b2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	e004      	b.n	80023bc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d9b3      	bls.n	8002330 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f2:	60da      	str	r2, [r3, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002400:	b480      	push	{r7}
 8002402:	b091      	sub	sp, #68	@ 0x44
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3318      	adds	r3, #24
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800243e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002442:	d007      	beq.n	8002454 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002448:	3304      	adds	r3, #4
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	e111      	b.n	800267c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245a:	3301      	adds	r3, #1
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800245e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4b86      	ldr	r3, [pc, #536]	@ (8002688 <ETH_Prepare_Tx_Descriptors+0x288>)
 800246e:	4013      	ands	r3, r2
 8002470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002472:	6852      	ldr	r2, [r2, #4]
 8002474:	431a      	orrs	r2, r3
 8002476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002478:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	431a      	orrs	r2, r3
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80024a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024da:	e082      	b.n	80025e2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e005      	b.n	8002508 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002506:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250a:	3301      	adds	r3, #1
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800250e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002510:	2b03      	cmp	r3, #3
 8002512:	d902      	bls.n	800251a <ETH_Prepare_Tx_Descriptors+0x11a>
 8002514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002516:	3b04      	subs	r3, #4
 8002518:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800251e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800252c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002530:	d007      	beq.n	8002542 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002536:	3304      	adds	r3, #4
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d029      	beq.n	8002596 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800254a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002550:	2300      	movs	r3, #0
 8002552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002554:	e019      	b.n	800258a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002556:	f3bf 8f5f 	dmb	sy
}
 800255a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800255c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	3301      	adds	r3, #1
 800256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002570:	2b03      	cmp	r3, #3
 8002572:	d902      	bls.n	800257a <ETH_Prepare_Tx_Descriptors+0x17a>
 8002574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002576:	3b04      	subs	r3, #4
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800257e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002586:	3301      	adds	r3, #1
 8002588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800258a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800258c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258e:	429a      	cmp	r2, r3
 8002590:	d3e1      	bcc.n	8002556 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002592:	2302      	movs	r3, #2
 8002594:	e072      	b.n	800267c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80025a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a4:	3301      	adds	r3, #1
 80025a6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4b32      	ldr	r3, [pc, #200]	@ (8002688 <ETH_Prepare_Tx_Descriptors+0x288>)
 80025be:	4013      	ands	r3, r2
 80025c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025c2:	6852      	ldr	r2, [r2, #4]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025cc:	3301      	adds	r3, #1
 80025ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80025d0:	f3bf 8f5f 	dmb	sy
}
 80025d4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f47f af78 	bne.w	80024dc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e005      	b.n	800260c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	6a3a      	ldr	r2, [r7, #32]
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002622:	f3bf 8f5f 	dmb	sy
}
 8002626:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800263a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263c:	3304      	adds	r3, #4
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002648:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264a:	f3ef 8310 	mrs	r3, PRIMASK
 800264e:	613b      	str	r3, [r7, #16]
  return(result);
 8002650:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	2301      	movs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f383 8810 	msr	PRIMASK, r3
}
 800265e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	4413      	add	r3, r2
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f383 8810 	msr	PRIMASK, r3
}
 8002678:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3744      	adds	r7, #68	@ 0x44
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	ffffe000 	.word	0xffffe000

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e175      	b.n	8002998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8164 	bne.w	8002992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d005      	beq.n	80026e2 <HAL_GPIO_Init+0x56>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d017      	beq.n	8002780 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80be 	beq.w	8002992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002820:	6453      	str	r3, [r2, #68]	@ 0x44
 8002822:	4b63      	ldr	r3, [pc, #396]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800282e:	4a61      	ldr	r2, [pc, #388]	@ (80029b4 <HAL_GPIO_Init+0x328>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <HAL_GPIO_Init+0x32c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d037      	beq.n	80028ca <HAL_GPIO_Init+0x23e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_GPIO_Init+0x330>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_GPIO_Init+0x23a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a56      	ldr	r2, [pc, #344]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d02b      	beq.n	80028c2 <HAL_GPIO_Init+0x236>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a55      	ldr	r2, [pc, #340]	@ (80029c4 <HAL_GPIO_Init+0x338>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x232>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a54      	ldr	r2, [pc, #336]	@ (80029c8 <HAL_GPIO_Init+0x33c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x22e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a53      	ldr	r2, [pc, #332]	@ (80029cc <HAL_GPIO_Init+0x340>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x22a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <HAL_GPIO_Init+0x344>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a51      	ldr	r2, [pc, #324]	@ (80029d4 <HAL_GPIO_Init+0x348>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x222>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a50      	ldr	r2, [pc, #320]	@ (80029d8 <HAL_GPIO_Init+0x34c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x21e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4f      	ldr	r2, [pc, #316]	@ (80029dc <HAL_GPIO_Init+0x350>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x21a>
 80028a2:	2309      	movs	r3, #9
 80028a4:	e012      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028a6:	230a      	movs	r3, #10
 80028a8:	e010      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028aa:	2308      	movs	r3, #8
 80028ac:	e00e      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00c      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028b2:	2306      	movs	r3, #6
 80028b4:	e00a      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x240>
 80028ca:	2300      	movs	r3, #0
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028dc:	4935      	ldr	r1, [pc, #212]	@ (80029b4 <HAL_GPIO_Init+0x328>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ea:	4b3d      	ldr	r3, [pc, #244]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290e:	4a34      	ldr	r2, [pc, #208]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002914:	4b32      	ldr	r3, [pc, #200]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002938:	4a29      	ldr	r2, [pc, #164]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293e:	4b28      	ldr	r3, [pc, #160]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002962:	4a1f      	ldr	r2, [pc, #124]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002968:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298c:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <HAL_GPIO_Init+0x354>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	f67f ae86 	bls.w	80026ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40021800 	.word	0x40021800
 80029d4:	40021c00 	.word	0x40021c00
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40022400 	.word	0x40022400
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <HAL_PWREx_EnableOverDrive+0x98>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a22      	ldr	r2, [pc, #136]	@ (8002a7c <HAL_PWREx_EnableOverDrive+0x98>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_PWREx_EnableOverDrive+0x98>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a12:	f7fe fa19 	bl	8000e48 <HAL_GetTick>
 8002a16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a18:	e009      	b.n	8002a2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a1a:	f7fe fa15 	bl	8000e48 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a28:	d901      	bls.n	8002a2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e022      	b.n	8002a74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a2e:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a3c:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0f      	ldr	r2, [pc, #60]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a48:	f7fe f9fe 	bl	8000e48 <HAL_GetTick>
 8002a4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a4e:	e009      	b.n	8002a64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a50:	f7fe f9fa 	bl	8000e48 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a5e:	d901      	bls.n	8002a64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e007      	b.n	8002a74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a70:	d1ee      	bne.n	8002a50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e291      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8087 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa8:	4b96      	ldr	r3, [pc, #600]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d00c      	beq.n	8002ace <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab4:	4b93      	ldr	r3, [pc, #588]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d112      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62>
 8002ac0:	4b90      	ldr	r3, [pc, #576]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002acc:	d10b      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ace:	4b8d      	ldr	r3, [pc, #564]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d06c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x130>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d168      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e26b      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x7a>
 8002af0:	4b84      	ldr	r3, [pc, #528]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a83      	ldr	r2, [pc, #524]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e02e      	b.n	8002b5c <HAL_RCC_OscConfig+0xd8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x9c>
 8002b06:	4b7f      	ldr	r3, [pc, #508]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b7c      	ldr	r3, [pc, #496]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7b      	ldr	r2, [pc, #492]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01d      	b.n	8002b5c <HAL_RCC_OscConfig+0xd8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0xc0>
 8002b2a:	4b76      	ldr	r3, [pc, #472]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b73      	ldr	r3, [pc, #460]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a72      	ldr	r2, [pc, #456]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xd8>
 8002b44:	4b6f      	ldr	r3, [pc, #444]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6e      	ldr	r2, [pc, #440]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b6c      	ldr	r3, [pc, #432]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6b      	ldr	r2, [pc, #428]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe f970 	bl	8000e48 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe f96c 	bl	8000e48 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e21f      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b61      	ldr	r3, [pc, #388]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0xe8>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe f95c 	bl	8000e48 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe f958 	bl	8000e48 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e20b      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b57      	ldr	r3, [pc, #348]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x110>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d069      	beq.n	8002c96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc2:	4b50      	ldr	r3, [pc, #320]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b4d      	ldr	r3, [pc, #308]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x190>
 8002bda:	4b4a      	ldr	r3, [pc, #296]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	4b47      	ldr	r3, [pc, #284]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x17a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1df      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b41      	ldr	r3, [pc, #260]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	493d      	ldr	r1, [pc, #244]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	e040      	b.n	8002c96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d023      	beq.n	8002c64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a38      	ldr	r2, [pc, #224]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe f90e 	bl	8000e48 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c30:	f7fe f90a 	bl	8000e48 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1bd      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b30      	ldr	r3, [pc, #192]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4929      	ldr	r1, [pc, #164]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
 8002c62:	e018      	b.n	8002c96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a26      	ldr	r2, [pc, #152]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f8ea 	bl	8000e48 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fe f8e6 	bl	8000e48 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e199      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d038      	beq.n	8002d14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d019      	beq.n	8002cde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cae:	4a15      	ldr	r2, [pc, #84]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe f8c7 	bl	8000e48 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe f8c3 	bl	8000e48 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e176      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x23a>
 8002cdc:	e01a      	b.n	8002d14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce2:	4a08      	ldr	r2, [pc, #32]	@ (8002d04 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe f8ad 	bl	8000e48 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe f8a9 	bl	8000e48 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d903      	bls.n	8002d08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e15c      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
 8002d04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d08:	4b91      	ldr	r3, [pc, #580]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80a4 	beq.w	8002e6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d22:	4b8b      	ldr	r3, [pc, #556]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b88      	ldr	r3, [pc, #544]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a87      	ldr	r2, [pc, #540]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	4b85      	ldr	r3, [pc, #532]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4a:	4b82      	ldr	r3, [pc, #520]	@ (8002f54 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d56:	4b7f      	ldr	r3, [pc, #508]	@ (8002f54 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f54 <HAL_RCC_OscConfig+0x4d0>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7fe f871 	bl	8000e48 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7fe f86d 	bl	8000e48 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	@ 0x64
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e120      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7c:	4b75      	ldr	r3, [pc, #468]	@ (8002f54 <HAL_RCC_OscConfig+0x4d0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x31a>
 8002d90:	4b6f      	ldr	r3, [pc, #444]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4a6e      	ldr	r2, [pc, #440]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9c:	e02d      	b.n	8002dfa <HAL_RCC_OscConfig+0x376>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x33c>
 8002da6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a69      	ldr	r2, [pc, #420]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db2:	4b67      	ldr	r3, [pc, #412]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	4a66      	ldr	r2, [pc, #408]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbe:	e01c      	b.n	8002dfa <HAL_RCC_OscConfig+0x376>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d10c      	bne.n	8002de2 <HAL_RCC_OscConfig+0x35e>
 8002dc8:	4b61      	ldr	r3, [pc, #388]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a60      	ldr	r2, [pc, #384]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de0:	e00b      	b.n	8002dfa <HAL_RCC_OscConfig+0x376>
 8002de2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	4a5a      	ldr	r2, [pc, #360]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dee:	4b58      	ldr	r3, [pc, #352]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	4a57      	ldr	r2, [pc, #348]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d015      	beq.n	8002e2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe f821 	bl	8000e48 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe f81d 	bl	8000e48 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0ce      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	4b4b      	ldr	r3, [pc, #300]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ee      	beq.n	8002e0a <HAL_RCC_OscConfig+0x386>
 8002e2c:	e014      	b.n	8002e58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe f80b 	bl	8000e48 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe f807 	bl	8000e48 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0b8      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4c:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ee      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d105      	bne.n	8002e6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	4a3b      	ldr	r2, [pc, #236]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80a4 	beq.w	8002fbc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e74:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d06b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d149      	bne.n	8002f1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b31      	ldr	r3, [pc, #196]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a30      	ldr	r2, [pc, #192]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fd ffd8 	bl	8000e48 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fd ffd4 	bl	8000e48 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e087      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b28      	ldr	r3, [pc, #160]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	019b      	lsls	r3, r3, #6
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ee6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b19      	ldr	r3, [pc, #100]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fd ffa8 	bl	8000e48 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fd ffa4 	bl	8000e48 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e057      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x478>
 8002f1a:	e04f      	b.n	8002fbc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0b      	ldr	r2, [pc, #44]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fd ff8e 	bl	8000e48 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fd ff8a 	bl	8000e48 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e03d      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4ac>
 8002f4e:	e035      	b.n	8002fbc <HAL_RCC_OscConfig+0x538>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <HAL_RCC_OscConfig+0x544>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d028      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0d0      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b67      	ldr	r3, [pc, #412]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 020f 	bic.w	r2, r3, #15
 8002ffa:	4965      	ldr	r1, [pc, #404]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a58      	ldr	r2, [pc, #352]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003032:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003036:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a52      	ldr	r2, [pc, #328]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800304e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d040      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b41      	ldr	r3, [pc, #260]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e073      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3d      	ldr	r3, [pc, #244]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06b      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4936      	ldr	r1, [pc, #216]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fd fec2 	bl	8000e48 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fd febe 	bl	8000e48 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e053      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2d      	ldr	r3, [pc, #180]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d210      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 020f 	bic.w	r2, r3, #15
 8003106:	4922      	ldr	r1, [pc, #136]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800314a:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f821 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003162:	4602      	mov	r2, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	490a      	ldr	r1, [pc, #40]	@ (8003198 <HAL_RCC_ClockConfig+0x1cc>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	@ (800319c <HAL_RCC_ClockConfig+0x1d0>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_RCC_ClockConfig+0x1d4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fe1e 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023c00 	.word	0x40023c00
 8003194:	40023800 	.word	0x40023800
 8003198:	0801446c 	.word	0x0801446c
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b090      	sub	sp, #64	@ 0x40
 80031aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b0:	2300      	movs	r3, #0
 80031b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031b4:	2300      	movs	r3, #0
 80031b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031bc:	4b59      	ldr	r3, [pc, #356]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x180>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d00d      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x40>
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	f200 80a1 	bhi.w	8003310 <HAL_RCC_GetSysClockFreq+0x16c>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x34>
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d003      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x3a>
 80031d6:	e09b      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x184>)
 80031da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031dc:	e09b      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031de:	4b53      	ldr	r3, [pc, #332]	@ (800332c <HAL_RCC_GetSysClockFreq+0x188>)
 80031e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031e2:	e098      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x180>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d028      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	2200      	movs	r2, #0
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	627a      	str	r2, [r7, #36]	@ 0x24
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800320c:	2100      	movs	r1, #0
 800320e:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_RCC_GetSysClockFreq+0x188>)
 8003210:	fb03 f201 	mul.w	r2, r3, r1
 8003214:	2300      	movs	r3, #0
 8003216:	fb00 f303 	mul.w	r3, r0, r3
 800321a:	4413      	add	r3, r2
 800321c:	4a43      	ldr	r2, [pc, #268]	@ (800332c <HAL_RCC_GetSysClockFreq+0x188>)
 800321e:	fba0 1202 	umull	r1, r2, r0, r2
 8003222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003224:	460a      	mov	r2, r1
 8003226:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800322a:	4413      	add	r3, r2
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	2200      	movs	r2, #0
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	61fa      	str	r2, [r7, #28]
 8003236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800323e:	f7fd f837 	bl	80002b0 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4613      	mov	r3, r2
 8003248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800324a:	e053      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324c:	4b35      	ldr	r3, [pc, #212]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x180>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	2200      	movs	r2, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	617a      	str	r2, [r7, #20]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800325e:	f04f 0b00 	mov.w	fp, #0
 8003262:	4652      	mov	r2, sl
 8003264:	465b      	mov	r3, fp
 8003266:	f04f 0000 	mov.w	r0, #0
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	0159      	lsls	r1, r3, #5
 8003270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003274:	0150      	lsls	r0, r2, #5
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	ebb2 080a 	subs.w	r8, r2, sl
 800327e:	eb63 090b 	sbc.w	r9, r3, fp
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800328e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003292:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003296:	ebb2 0408 	subs.w	r4, r2, r8
 800329a:	eb63 0509 	sbc.w	r5, r3, r9
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	00eb      	lsls	r3, r5, #3
 80032a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ac:	00e2      	lsls	r2, r4, #3
 80032ae:	4614      	mov	r4, r2
 80032b0:	461d      	mov	r5, r3
 80032b2:	eb14 030a 	adds.w	r3, r4, sl
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	eb45 030b 	adc.w	r3, r5, fp
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ca:	4629      	mov	r1, r5
 80032cc:	028b      	lsls	r3, r1, #10
 80032ce:	4621      	mov	r1, r4
 80032d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d4:	4621      	mov	r1, r4
 80032d6:	028a      	lsls	r2, r1, #10
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	2200      	movs	r2, #0
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	60fa      	str	r2, [r7, #12]
 80032e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e8:	f7fc ffe2 	bl	80002b0 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	3301      	adds	r3, #1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x184>)
 8003312:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003318:	4618      	mov	r0, r3
 800331a:	3740      	adds	r7, #64	@ 0x40
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	00f42400 	.word	0x00f42400
 800332c:	017d7840 	.word	0x017d7840

08003330 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <HAL_RCC_GetHCLKFreq+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000000 	.word	0x20000000

08003348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800334c:	f7ff fff0 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	0a9b      	lsrs	r3, r3, #10
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	@ (800336c <HAL_RCC_GetPCLK1Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	0801447c 	.word	0x0801447c

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003374:	f7ff ffdc 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0b5b      	lsrs	r3, r3, #13
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	@ (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	0801447c 	.word	0x0801447c

08003398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d012      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033c0:	4b69      	ldr	r3, [pc, #420]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a68      	ldr	r2, [pc, #416]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033ca:	6093      	str	r3, [r2, #8]
 80033cc:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d4:	4964      	ldr	r1, [pc, #400]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d017      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	4959      	ldr	r1, [pc, #356]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800341e:	2301      	movs	r3, #1
 8003420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d017      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800342e:	4b4e      	ldr	r3, [pc, #312]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003434:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	494a      	ldr	r1, [pc, #296]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800344c:	d101      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800344e:	2301      	movs	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800345a:	2301      	movs	r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800346a:	2301      	movs	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 808b 	beq.w	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800347c:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	4a39      	ldr	r2, [pc, #228]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003486:	6413      	str	r3, [r2, #64]	@ 0x40
 8003488:	4b37      	ldr	r3, [pc, #220]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003494:	4b35      	ldr	r3, [pc, #212]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a34      	ldr	r2, [pc, #208]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fd fcd2 	bl	8000e48 <HAL_GetTick>
 80034a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a8:	f7fd fcce 	bl	8000e48 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	@ 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e357      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ba:	4b2c      	ldr	r3, [pc, #176]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034c6:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d035      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d02e      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e4:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003504:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003506:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800350c:	4b16      	ldr	r3, [pc, #88]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d114      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fc96 	bl	8000e48 <HAL_GetTick>
 800351c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fd fc92 	bl	8000e48 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e319      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800354e:	d111      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800355e:	400b      	ands	r3, r1
 8003560:	4901      	ldr	r1, [pc, #4]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
 8003566:	e00b      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003568:	40023800 	.word	0x40023800
 800356c:	40007000 	.word	0x40007000
 8003570:	0ffffcff 	.word	0x0ffffcff
 8003574:	4baa      	ldr	r3, [pc, #680]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4aa9      	ldr	r2, [pc, #676]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800357e:	6093      	str	r3, [r2, #8]
 8003580:	4ba7      	ldr	r3, [pc, #668]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	49a4      	ldr	r1, [pc, #656]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358e:	4313      	orrs	r3, r2
 8003590:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800359e:	4ba0      	ldr	r3, [pc, #640]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a4:	4a9e      	ldr	r2, [pc, #632]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	4999      	ldr	r1, [pc, #612]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035cc:	4b94      	ldr	r3, [pc, #592]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035da:	4991      	ldr	r1, [pc, #580]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035fc:	4988      	ldr	r1, [pc, #544]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003610:	4b83      	ldr	r3, [pc, #524]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003616:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800361e:	4980      	ldr	r1, [pc, #512]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003632:	4b7b      	ldr	r3, [pc, #492]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003638:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	4977      	ldr	r1, [pc, #476]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003654:	4b72      	ldr	r3, [pc, #456]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	496f      	ldr	r1, [pc, #444]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003676:	4b6a      	ldr	r3, [pc, #424]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367c:	f023 020c 	bic.w	r2, r3, #12
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003684:	4966      	ldr	r1, [pc, #408]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003698:	4b61      	ldr	r3, [pc, #388]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a6:	495e      	ldr	r1, [pc, #376]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ba:	4b59      	ldr	r3, [pc, #356]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c8:	4955      	ldr	r1, [pc, #340]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036dc:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	494d      	ldr	r1, [pc, #308]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036fe:	4b48      	ldr	r3, [pc, #288]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003704:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	4944      	ldr	r1, [pc, #272]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003720:	4b3f      	ldr	r3, [pc, #252]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003726:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372e:	493c      	ldr	r1, [pc, #240]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003742:	4b37      	ldr	r3, [pc, #220]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003748:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003750:	4933      	ldr	r1, [pc, #204]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003764:	4b2e      	ldr	r3, [pc, #184]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003772:	492b      	ldr	r1, [pc, #172]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d011      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003786:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003794:	4922      	ldr	r1, [pc, #136]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037c6:	4b16      	ldr	r3, [pc, #88]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d4:	4912      	ldr	r1, [pc, #72]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f8:	4909      	ldr	r1, [pc, #36]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d006      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80d9 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003814:	4b02      	ldr	r3, [pc, #8]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a01      	ldr	r2, [pc, #4]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800381e:	e001      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003820:	40023800 	.word	0x40023800
 8003824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003826:	f7fd fb0f 	bl	8000e48 <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800382e:	f7fd fb0b 	bl	8000e48 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b64      	cmp	r3, #100	@ 0x64
 800383a:	d901      	bls.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e194      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003840:	4b6c      	ldr	r3, [pc, #432]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d021      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385c:	2b00      	cmp	r3, #0
 800385e:	d11d      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003860:	4b64      	ldr	r3, [pc, #400]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003866:	0c1b      	lsrs	r3, r3, #16
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800386e:	4b61      	ldr	r3, [pc, #388]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003874:	0e1b      	lsrs	r3, r3, #24
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	019a      	lsls	r2, r3, #6
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	061b      	lsls	r3, r3, #24
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	071b      	lsls	r3, r3, #28
 8003894:	4957      	ldr	r1, [pc, #348]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02e      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c6:	d129      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038c8:	4b4a      	ldr	r3, [pc, #296]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038d6:	4b47      	ldr	r3, [pc, #284]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038dc:	0f1b      	lsrs	r3, r3, #28
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	019a      	lsls	r2, r3, #6
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	071b      	lsls	r3, r3, #28
 80038fc:	493d      	ldr	r1, [pc, #244]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800390a:	f023 021f 	bic.w	r2, r3, #31
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	3b01      	subs	r3, #1
 8003914:	4937      	ldr	r1, [pc, #220]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01d      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003928:	4b32      	ldr	r3, [pc, #200]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392e:	0e1b      	lsrs	r3, r3, #24
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003936:	4b2f      	ldr	r3, [pc, #188]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800393c:	0f1b      	lsrs	r3, r3, #28
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	019a      	lsls	r2, r3, #6
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	431a      	orrs	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	431a      	orrs	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	071b      	lsls	r3, r3, #28
 800395c:	4925      	ldr	r1, [pc, #148]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d011      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	019a      	lsls	r2, r3, #6
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	4919      	ldr	r1, [pc, #100]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003994:	4b17      	ldr	r3, [pc, #92]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fd fa52 	bl	8000e48 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039a8:	f7fd fa4e 	bl	8000e48 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0d7      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ba:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 80cd 	bne.w	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a08      	ldr	r2, [pc, #32]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039da:	f7fd fa35 	bl	8000e48 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039e2:	f7fd fa31 	bl	8000e48 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	@ 0x64
 80039ee:	d903      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0ba      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80039f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a04:	d0ed      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02e      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d12a      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a2e:	4b51      	ldr	r3, [pc, #324]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	0f1b      	lsrs	r3, r3, #28
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	019a      	lsls	r2, r3, #6
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	071b      	lsls	r3, r3, #28
 8003a62:	4944      	ldr	r1, [pc, #272]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a6a:	4b42      	ldr	r3, [pc, #264]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a70:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	493d      	ldr	r1, [pc, #244]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a98:	d11d      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a9a:	4b36      	ldr	r3, [pc, #216]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003aa8:	4b32      	ldr	r3, [pc, #200]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	0f1b      	lsrs	r3, r3, #28
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	019a      	lsls	r2, r3, #6
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	061b      	lsls	r3, r3, #24
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	071b      	lsls	r3, r3, #28
 8003ace:	4929      	ldr	r1, [pc, #164]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	0e1b      	lsrs	r3, r3, #24
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003af0:	4b20      	ldr	r3, [pc, #128]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	019a      	lsls	r2, r3, #6
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	071b      	lsls	r3, r3, #28
 8003b16:	4917      	ldr	r1, [pc, #92]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b1e:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	4911      	ldr	r1, [pc, #68]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b34:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0e      	ldr	r2, [pc, #56]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b40:	f7fd f982 	bl	8000e48 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b48:	f7fd f97e 	bl	8000e48 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	@ 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e007      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b66:	d1ef      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800

08003b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e040      	b.n	8003c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fc ff6c 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	@ 0x24
 8003ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fe22 	bl	8004808 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fbbb 	bl	8004340 <UART_SetConfig>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e01b      	b.n	8003c0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fea1 	bl	800494c <UART_CheckIdleState>
 8003c0a:	4603      	mov	r3, r0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d177      	bne.n	8003d1c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Transmit+0x24>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e070      	b.n	8003d1e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2221      	movs	r2, #33	@ 0x21
 8003c48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c4a:	f7fd f8fd 	bl	8000e48 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c68:	d108      	bne.n	8003c7c <HAL_UART_Transmit+0x68>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e003      	b.n	8003c84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c84:	e02f      	b.n	8003ce6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	@ 0x80
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 feb2 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e03b      	b.n	8003d1e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e007      	b.n	8003cd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1c9      	bne.n	8003c86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2140      	movs	r1, #64	@ 0x40
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fe7c 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e005      	b.n	8003d1e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d52:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003d56:	4013      	ands	r3, r2
 8003d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d115      	bne.n	8003d90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00f      	beq.n	8003d90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 82b1 	beq.w	80042e8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	4798      	blx	r3
      }
      return;
 8003d8e:	e2ab      	b.n	80042e8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8117 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003da6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003daa:	4b85      	ldr	r3, [pc, #532]	@ (8003fc0 <HAL_UART_IRQHandler+0x298>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 810a 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d011      	beq.n	8003de4 <HAL_UART_IRQHandler+0xbc>
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d011      	beq.n	8003e14 <HAL_UART_IRQHandler+0xec>
 8003df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00b      	beq.n	8003e14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2202      	movs	r2, #2
 8003e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d011      	beq.n	8003e44 <HAL_UART_IRQHandler+0x11c>
 8003e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2204      	movs	r2, #4
 8003e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d017      	beq.n	8003e80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x18a>
 8003e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00c      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8217 	beq.w	80042ec <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efa:	2b40      	cmp	r3, #64	@ 0x40
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04f      	beq.n	8003faa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fde2 	bl	8004ad4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b40      	cmp	r3, #64	@ 0x40
 8003f1c:	d141      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3308      	adds	r3, #8
 8003f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1d9      	bne.n	8003f1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d013      	beq.n	8003f9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	4a13      	ldr	r2, [pc, #76]	@ (8003fc4 <HAL_UART_IRQHandler+0x29c>)
 8003f78:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd f913 	bl	80011aa <HAL_DMA_Abort_IT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d017      	beq.n	8003fba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f94:	4610      	mov	r0, r2
 8003f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e00f      	b.n	8003fba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f9ba 	bl	8004314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00b      	b.n	8003fba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f9b6 	bl	8004314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e007      	b.n	8003fba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9b2 	bl	8004314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003fb8:	e198      	b.n	80042ec <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fba:	bf00      	nop
    return;
 8003fbc:	e196      	b.n	80042ec <HAL_UART_IRQHandler+0x5c4>
 8003fbe:	bf00      	nop
 8003fc0:	04000120 	.word	0x04000120
 8003fc4:	08004b9d 	.word	0x08004b9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	f040 8166 	bne.w	800429e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 815f 	beq.w	800429e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8158 	beq.w	800429e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004000:	2b40      	cmp	r3, #64	@ 0x40
 8004002:	f040 80d0 	bne.w	80041a6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004012:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80ab 	beq.w	8004172 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004026:	429a      	cmp	r2, r3
 8004028:	f080 80a3 	bcs.w	8004172 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004032:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004040:	f000 8086 	beq.w	8004150 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004058:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800406e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004072:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800407a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1da      	bne.n	8004044 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3308      	adds	r3, #8
 8004094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800409e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e1      	bne.n	800408e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e3      	bne.n	80040ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004120:	f023 0310 	bic.w	r3, r3, #16
 8004124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004132:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004134:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004138:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e4      	bne.n	8004110 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc ffbd 	bl	80010ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004162:	b29b      	uxth	r3, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8dc 	bl	8004328 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004170:	e0be      	b.n	80042f0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800417c:	429a      	cmp	r2, r3
 800417e:	f040 80b7 	bne.w	80042f0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800418c:	f040 80b0 	bne.w	80042f0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8c2 	bl	8004328 <HAL_UARTEx_RxEventCallback>
      return;
 80041a4:	e0a4      	b.n	80042f0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8096 	beq.w	80042f4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 80041c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8091 	beq.w	80042f4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e4      	bne.n	80041d2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	623b      	str	r3, [r7, #32]
   return(result);
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800422c:	633a      	str	r2, [r7, #48]	@ 0x30
 800422e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	60fb      	str	r3, [r7, #12]
   return(result);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 0310 	bic.w	r3, r3, #16
 8004268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	69b9      	ldr	r1, [r7, #24]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	617b      	str	r3, [r7, #20]
   return(result);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e4      	bne.n	8004254 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f846 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800429c:	e02a      	b.n	80042f4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00e      	beq.n	80042c8 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01c      	beq.n	80042f8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
    }
    return;
 80042c6:	e017      	b.n	80042f8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <HAL_UART_IRQHandler+0x5d2>
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00c      	beq.n	80042fa <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fc6d 	bl	8004bc0 <UART_EndTransmit_IT>
    return;
 80042e6:	e008      	b.n	80042fa <HAL_UART_IRQHandler+0x5d2>
      return;
 80042e8:	bf00      	nop
 80042ea:	e006      	b.n	80042fa <HAL_UART_IRQHandler+0x5d2>
    return;
 80042ec:	bf00      	nop
 80042ee:	e004      	b.n	80042fa <HAL_UART_IRQHandler+0x5d2>
      return;
 80042f0:	bf00      	nop
 80042f2:	e002      	b.n	80042fa <HAL_UART_IRQHandler+0x5d2>
      return;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <HAL_UART_IRQHandler+0x5d2>
    return;
 80042f8:	bf00      	nop
  }

}
 80042fa:	37e8      	adds	r7, #232	@ 0xe8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4ba6      	ldr	r3, [pc, #664]	@ (8004604 <UART_SetConfig+0x2c4>)
 800436c:	4013      	ands	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	430b      	orrs	r3, r1
 8004376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a94      	ldr	r2, [pc, #592]	@ (8004608 <UART_SetConfig+0x2c8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d120      	bne.n	80043fe <UART_SetConfig+0xbe>
 80043bc:	4b93      	ldr	r3, [pc, #588]	@ (800460c <UART_SetConfig+0x2cc>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d816      	bhi.n	80043f8 <UART_SetConfig+0xb8>
 80043ca:	a201      	add	r2, pc, #4	@ (adr r2, 80043d0 <UART_SetConfig+0x90>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	080043e1 	.word	0x080043e1
 80043d4:	080043ed 	.word	0x080043ed
 80043d8:	080043e7 	.word	0x080043e7
 80043dc:	080043f3 	.word	0x080043f3
 80043e0:	2301      	movs	r3, #1
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e150      	b.n	8004688 <UART_SetConfig+0x348>
 80043e6:	2302      	movs	r3, #2
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e14d      	b.n	8004688 <UART_SetConfig+0x348>
 80043ec:	2304      	movs	r3, #4
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e14a      	b.n	8004688 <UART_SetConfig+0x348>
 80043f2:	2308      	movs	r3, #8
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e147      	b.n	8004688 <UART_SetConfig+0x348>
 80043f8:	2310      	movs	r3, #16
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e144      	b.n	8004688 <UART_SetConfig+0x348>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a83      	ldr	r2, [pc, #524]	@ (8004610 <UART_SetConfig+0x2d0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d132      	bne.n	800446e <UART_SetConfig+0x12e>
 8004408:	4b80      	ldr	r3, [pc, #512]	@ (800460c <UART_SetConfig+0x2cc>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d828      	bhi.n	8004468 <UART_SetConfig+0x128>
 8004416:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <UART_SetConfig+0xdc>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004451 	.word	0x08004451
 8004420:	08004469 	.word	0x08004469
 8004424:	08004469 	.word	0x08004469
 8004428:	08004469 	.word	0x08004469
 800442c:	0800445d 	.word	0x0800445d
 8004430:	08004469 	.word	0x08004469
 8004434:	08004469 	.word	0x08004469
 8004438:	08004469 	.word	0x08004469
 800443c:	08004457 	.word	0x08004457
 8004440:	08004469 	.word	0x08004469
 8004444:	08004469 	.word	0x08004469
 8004448:	08004469 	.word	0x08004469
 800444c:	08004463 	.word	0x08004463
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e118      	b.n	8004688 <UART_SetConfig+0x348>
 8004456:	2302      	movs	r3, #2
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e115      	b.n	8004688 <UART_SetConfig+0x348>
 800445c:	2304      	movs	r3, #4
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e112      	b.n	8004688 <UART_SetConfig+0x348>
 8004462:	2308      	movs	r3, #8
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e10f      	b.n	8004688 <UART_SetConfig+0x348>
 8004468:	2310      	movs	r3, #16
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e10c      	b.n	8004688 <UART_SetConfig+0x348>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a68      	ldr	r2, [pc, #416]	@ (8004614 <UART_SetConfig+0x2d4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d120      	bne.n	80044ba <UART_SetConfig+0x17a>
 8004478:	4b64      	ldr	r3, [pc, #400]	@ (800460c <UART_SetConfig+0x2cc>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004482:	2b30      	cmp	r3, #48	@ 0x30
 8004484:	d013      	beq.n	80044ae <UART_SetConfig+0x16e>
 8004486:	2b30      	cmp	r3, #48	@ 0x30
 8004488:	d814      	bhi.n	80044b4 <UART_SetConfig+0x174>
 800448a:	2b20      	cmp	r3, #32
 800448c:	d009      	beq.n	80044a2 <UART_SetConfig+0x162>
 800448e:	2b20      	cmp	r3, #32
 8004490:	d810      	bhi.n	80044b4 <UART_SetConfig+0x174>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <UART_SetConfig+0x15c>
 8004496:	2b10      	cmp	r3, #16
 8004498:	d006      	beq.n	80044a8 <UART_SetConfig+0x168>
 800449a:	e00b      	b.n	80044b4 <UART_SetConfig+0x174>
 800449c:	2300      	movs	r3, #0
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e0f2      	b.n	8004688 <UART_SetConfig+0x348>
 80044a2:	2302      	movs	r3, #2
 80044a4:	77fb      	strb	r3, [r7, #31]
 80044a6:	e0ef      	b.n	8004688 <UART_SetConfig+0x348>
 80044a8:	2304      	movs	r3, #4
 80044aa:	77fb      	strb	r3, [r7, #31]
 80044ac:	e0ec      	b.n	8004688 <UART_SetConfig+0x348>
 80044ae:	2308      	movs	r3, #8
 80044b0:	77fb      	strb	r3, [r7, #31]
 80044b2:	e0e9      	b.n	8004688 <UART_SetConfig+0x348>
 80044b4:	2310      	movs	r3, #16
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e0e6      	b.n	8004688 <UART_SetConfig+0x348>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a56      	ldr	r2, [pc, #344]	@ (8004618 <UART_SetConfig+0x2d8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d120      	bne.n	8004506 <UART_SetConfig+0x1c6>
 80044c4:	4b51      	ldr	r3, [pc, #324]	@ (800460c <UART_SetConfig+0x2cc>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d0:	d013      	beq.n	80044fa <UART_SetConfig+0x1ba>
 80044d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d4:	d814      	bhi.n	8004500 <UART_SetConfig+0x1c0>
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d009      	beq.n	80044ee <UART_SetConfig+0x1ae>
 80044da:	2b80      	cmp	r3, #128	@ 0x80
 80044dc:	d810      	bhi.n	8004500 <UART_SetConfig+0x1c0>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <UART_SetConfig+0x1a8>
 80044e2:	2b40      	cmp	r3, #64	@ 0x40
 80044e4:	d006      	beq.n	80044f4 <UART_SetConfig+0x1b4>
 80044e6:	e00b      	b.n	8004500 <UART_SetConfig+0x1c0>
 80044e8:	2300      	movs	r3, #0
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e0cc      	b.n	8004688 <UART_SetConfig+0x348>
 80044ee:	2302      	movs	r3, #2
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e0c9      	b.n	8004688 <UART_SetConfig+0x348>
 80044f4:	2304      	movs	r3, #4
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e0c6      	b.n	8004688 <UART_SetConfig+0x348>
 80044fa:	2308      	movs	r3, #8
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e0c3      	b.n	8004688 <UART_SetConfig+0x348>
 8004500:	2310      	movs	r3, #16
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e0c0      	b.n	8004688 <UART_SetConfig+0x348>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a44      	ldr	r2, [pc, #272]	@ (800461c <UART_SetConfig+0x2dc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d125      	bne.n	800455c <UART_SetConfig+0x21c>
 8004510:	4b3e      	ldr	r3, [pc, #248]	@ (800460c <UART_SetConfig+0x2cc>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800451a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800451e:	d017      	beq.n	8004550 <UART_SetConfig+0x210>
 8004520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004524:	d817      	bhi.n	8004556 <UART_SetConfig+0x216>
 8004526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452a:	d00b      	beq.n	8004544 <UART_SetConfig+0x204>
 800452c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004530:	d811      	bhi.n	8004556 <UART_SetConfig+0x216>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <UART_SetConfig+0x1fe>
 8004536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453a:	d006      	beq.n	800454a <UART_SetConfig+0x20a>
 800453c:	e00b      	b.n	8004556 <UART_SetConfig+0x216>
 800453e:	2300      	movs	r3, #0
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e0a1      	b.n	8004688 <UART_SetConfig+0x348>
 8004544:	2302      	movs	r3, #2
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e09e      	b.n	8004688 <UART_SetConfig+0x348>
 800454a:	2304      	movs	r3, #4
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e09b      	b.n	8004688 <UART_SetConfig+0x348>
 8004550:	2308      	movs	r3, #8
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e098      	b.n	8004688 <UART_SetConfig+0x348>
 8004556:	2310      	movs	r3, #16
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e095      	b.n	8004688 <UART_SetConfig+0x348>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2f      	ldr	r2, [pc, #188]	@ (8004620 <UART_SetConfig+0x2e0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d125      	bne.n	80045b2 <UART_SetConfig+0x272>
 8004566:	4b29      	ldr	r3, [pc, #164]	@ (800460c <UART_SetConfig+0x2cc>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004570:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004574:	d017      	beq.n	80045a6 <UART_SetConfig+0x266>
 8004576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800457a:	d817      	bhi.n	80045ac <UART_SetConfig+0x26c>
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004580:	d00b      	beq.n	800459a <UART_SetConfig+0x25a>
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004586:	d811      	bhi.n	80045ac <UART_SetConfig+0x26c>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <UART_SetConfig+0x254>
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004590:	d006      	beq.n	80045a0 <UART_SetConfig+0x260>
 8004592:	e00b      	b.n	80045ac <UART_SetConfig+0x26c>
 8004594:	2301      	movs	r3, #1
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e076      	b.n	8004688 <UART_SetConfig+0x348>
 800459a:	2302      	movs	r3, #2
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	e073      	b.n	8004688 <UART_SetConfig+0x348>
 80045a0:	2304      	movs	r3, #4
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e070      	b.n	8004688 <UART_SetConfig+0x348>
 80045a6:	2308      	movs	r3, #8
 80045a8:	77fb      	strb	r3, [r7, #31]
 80045aa:	e06d      	b.n	8004688 <UART_SetConfig+0x348>
 80045ac:	2310      	movs	r3, #16
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e06a      	b.n	8004688 <UART_SetConfig+0x348>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004624 <UART_SetConfig+0x2e4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d138      	bne.n	800462e <UART_SetConfig+0x2ee>
 80045bc:	4b13      	ldr	r3, [pc, #76]	@ (800460c <UART_SetConfig+0x2cc>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80045c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045ca:	d017      	beq.n	80045fc <UART_SetConfig+0x2bc>
 80045cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045d0:	d82a      	bhi.n	8004628 <UART_SetConfig+0x2e8>
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d6:	d00b      	beq.n	80045f0 <UART_SetConfig+0x2b0>
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045dc:	d824      	bhi.n	8004628 <UART_SetConfig+0x2e8>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <UART_SetConfig+0x2aa>
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e6:	d006      	beq.n	80045f6 <UART_SetConfig+0x2b6>
 80045e8:	e01e      	b.n	8004628 <UART_SetConfig+0x2e8>
 80045ea:	2300      	movs	r3, #0
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e04b      	b.n	8004688 <UART_SetConfig+0x348>
 80045f0:	2302      	movs	r3, #2
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e048      	b.n	8004688 <UART_SetConfig+0x348>
 80045f6:	2304      	movs	r3, #4
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e045      	b.n	8004688 <UART_SetConfig+0x348>
 80045fc:	2308      	movs	r3, #8
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e042      	b.n	8004688 <UART_SetConfig+0x348>
 8004602:	bf00      	nop
 8004604:	efff69f3 	.word	0xefff69f3
 8004608:	40011000 	.word	0x40011000
 800460c:	40023800 	.word	0x40023800
 8004610:	40004400 	.word	0x40004400
 8004614:	40004800 	.word	0x40004800
 8004618:	40004c00 	.word	0x40004c00
 800461c:	40005000 	.word	0x40005000
 8004620:	40011400 	.word	0x40011400
 8004624:	40007800 	.word	0x40007800
 8004628:	2310      	movs	r3, #16
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e02c      	b.n	8004688 <UART_SetConfig+0x348>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a72      	ldr	r2, [pc, #456]	@ (80047fc <UART_SetConfig+0x4bc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d125      	bne.n	8004684 <UART_SetConfig+0x344>
 8004638:	4b71      	ldr	r3, [pc, #452]	@ (8004800 <UART_SetConfig+0x4c0>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004642:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004646:	d017      	beq.n	8004678 <UART_SetConfig+0x338>
 8004648:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800464c:	d817      	bhi.n	800467e <UART_SetConfig+0x33e>
 800464e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004652:	d00b      	beq.n	800466c <UART_SetConfig+0x32c>
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d811      	bhi.n	800467e <UART_SetConfig+0x33e>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <UART_SetConfig+0x326>
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004662:	d006      	beq.n	8004672 <UART_SetConfig+0x332>
 8004664:	e00b      	b.n	800467e <UART_SetConfig+0x33e>
 8004666:	2300      	movs	r3, #0
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e00d      	b.n	8004688 <UART_SetConfig+0x348>
 800466c:	2302      	movs	r3, #2
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e00a      	b.n	8004688 <UART_SetConfig+0x348>
 8004672:	2304      	movs	r3, #4
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e007      	b.n	8004688 <UART_SetConfig+0x348>
 8004678:	2308      	movs	r3, #8
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e004      	b.n	8004688 <UART_SetConfig+0x348>
 800467e:	2310      	movs	r3, #16
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e001      	b.n	8004688 <UART_SetConfig+0x348>
 8004684:	2310      	movs	r3, #16
 8004686:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004690:	d15b      	bne.n	800474a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004692:	7ffb      	ldrb	r3, [r7, #31]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d828      	bhi.n	80046ea <UART_SetConfig+0x3aa>
 8004698:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <UART_SetConfig+0x360>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7fe fe40 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 80046c8:	61b8      	str	r0, [r7, #24]
        break;
 80046ca:	e013      	b.n	80046f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7fe fe50 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 80046d0:	61b8      	str	r0, [r7, #24]
        break;
 80046d2:	e00f      	b.n	80046f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004804 <UART_SetConfig+0x4c4>)
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e00c      	b.n	80046f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fe fd63 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 80046de:	61b8      	str	r0, [r7, #24]
        break;
 80046e0:	e008      	b.n	80046f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e6:	61bb      	str	r3, [r7, #24]
        break;
 80046e8:	e004      	b.n	80046f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	77bb      	strb	r3, [r7, #30]
        break;
 80046f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d074      	beq.n	80047e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	005a      	lsls	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	d916      	bls.n	8004744 <UART_SetConfig+0x404>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471c:	d212      	bcs.n	8004744 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f023 030f 	bic.w	r3, r3, #15
 8004726:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	b29b      	uxth	r3, r3
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	b29a      	uxth	r2, r3
 8004734:	89fb      	ldrh	r3, [r7, #14]
 8004736:	4313      	orrs	r3, r2
 8004738:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	89fa      	ldrh	r2, [r7, #14]
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	e04f      	b.n	80047e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	77bb      	strb	r3, [r7, #30]
 8004748:	e04c      	b.n	80047e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800474a:	7ffb      	ldrb	r3, [r7, #31]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d828      	bhi.n	80047a2 <UART_SetConfig+0x462>
 8004750:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <UART_SetConfig+0x418>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800477d 	.word	0x0800477d
 800475c:	08004785 	.word	0x08004785
 8004760:	0800478d 	.word	0x0800478d
 8004764:	080047a3 	.word	0x080047a3
 8004768:	08004793 	.word	0x08004793
 800476c:	080047a3 	.word	0x080047a3
 8004770:	080047a3 	.word	0x080047a3
 8004774:	080047a3 	.word	0x080047a3
 8004778:	0800479b 	.word	0x0800479b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe fde4 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8004780:	61b8      	str	r0, [r7, #24]
        break;
 8004782:	e013      	b.n	80047ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004784:	f7fe fdf4 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8004788:	61b8      	str	r0, [r7, #24]
        break;
 800478a:	e00f      	b.n	80047ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800478c:	4b1d      	ldr	r3, [pc, #116]	@ (8004804 <UART_SetConfig+0x4c4>)
 800478e:	61bb      	str	r3, [r7, #24]
        break;
 8004790:	e00c      	b.n	80047ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004792:	f7fe fd07 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8004796:	61b8      	str	r0, [r7, #24]
        break;
 8004798:	e008      	b.n	80047ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800479e:	61bb      	str	r3, [r7, #24]
        break;
 80047a0:	e004      	b.n	80047ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	77bb      	strb	r3, [r7, #30]
        break;
 80047aa:	bf00      	nop
    }

    if (pclk != 0U)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	085a      	lsrs	r2, r3, #1
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	441a      	add	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b0f      	cmp	r3, #15
 80047ca:	d909      	bls.n	80047e0 <UART_SetConfig+0x4a0>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d2:	d205      	bcs.n	80047e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	e001      	b.n	80047e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40007c00 	.word	0x40007c00
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400

08004808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01a      	beq.n	800491e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004906:	d10a      	bne.n	800491e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
  }
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	@ 0x30
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800495c:	f7fc fa74 	bl	8000e48 <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d12e      	bne.n	80049ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004970:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	2200      	movs	r2, #0
 800497a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f83b 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d021      	beq.n	80049ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	60fb      	str	r3, [r7, #12]
   return(result);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800499e:	623b      	str	r3, [r7, #32]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	617b      	str	r3, [r7, #20]
   return(result);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e6      	bne.n	800498a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e011      	b.n	80049f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	@ 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0a:	e04f      	b.n	8004aac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a12:	d04b      	beq.n	8004aac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fc fa18 	bl	8000e48 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e04e      	b.n	8004acc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d037      	beq.n	8004aac <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b80      	cmp	r3, #128	@ 0x80
 8004a40:	d034      	beq.n	8004aac <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d031      	beq.n	8004aac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d110      	bne.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f838 	bl	8004ad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2208      	movs	r2, #8
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e029      	b.n	8004acc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a86:	d111      	bne.n	8004aac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f81e 	bl	8004ad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e00f      	b.n	8004acc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d0a0      	beq.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b095      	sub	sp, #84	@ 0x54
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004afc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3308      	adds	r3, #8
 8004b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e5      	bne.n	8004b0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d118      	bne.n	8004b7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0310 	bic.w	r3, r3, #16
 8004b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6979      	ldr	r1, [r7, #20]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	613b      	str	r3, [r7, #16]
   return(result);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b90:	bf00      	nop
 8004b92:	3754      	adds	r7, #84	@ 0x54
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fbae 	bl	8004314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6979      	ldr	r1, [r7, #20]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e6      	bne.n	8004bc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fb7a 	bl	8004300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c0c:	bf00      	nop
 8004c0e:	3720      	adds	r7, #32
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004c1a:	4b87      	ldr	r3, [pc, #540]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004c20:	4b85      	ldr	r3, [pc, #532]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004c26:	4b84      	ldr	r3, [pc, #528]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8004c2c:	4b82      	ldr	r3, [pc, #520]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c2e:	2264      	movs	r2, #100	@ 0x64
 8004c30:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004c32:	4b82      	ldr	r3, [pc, #520]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004c34:	22ff      	movs	r2, #255	@ 0xff
 8004c36:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004c38:	4b80      	ldr	r3, [pc, #512]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004c3a:	22ff      	movs	r2, #255	@ 0xff
 8004c3c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004c40:	22ff      	movs	r2, #255	@ 0xff
 8004c42:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004c44:	4b7d      	ldr	r3, [pc, #500]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004c4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004c4c:	220a      	movs	r2, #10
 8004c4e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004c50:	4b7b      	ldr	r3, [pc, #492]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004c56:	4b7a      	ldr	r3, [pc, #488]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 8004c5c:	4b78      	ldr	r3, [pc, #480]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004c5e:	2265      	movs	r2, #101	@ 0x65
 8004c60:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004c62:	f000 fd6a 	bl	800573a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004c66:	4b74      	ldr	r3, [pc, #464]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	061a      	lsls	r2, r3, #24
 8004c6c:	4b72      	ldr	r3, [pc, #456]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	431a      	orrs	r2, r3
 8004c74:	4b70      	ldr	r3, [pc, #448]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c76:	789b      	ldrb	r3, [r3, #2]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c7e:	78d2      	ldrb	r2, [r2, #3]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	061a      	lsls	r2, r3, #24
 8004c84:	4b6c      	ldr	r3, [pc, #432]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	0619      	lsls	r1, r3, #24
 8004c8a:	4b6b      	ldr	r3, [pc, #428]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	4319      	orrs	r1, r3
 8004c92:	4b69      	ldr	r3, [pc, #420]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c94:	789b      	ldrb	r3, [r3, #2]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	4967      	ldr	r1, [pc, #412]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004c9c:	78c9      	ldrb	r1, [r1, #3]
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	4b63      	ldr	r3, [pc, #396]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	0619      	lsls	r1, r3, #24
 8004cae:	4b62      	ldr	r3, [pc, #392]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	4319      	orrs	r1, r3
 8004cb6:	4b60      	ldr	r3, [pc, #384]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004cb8:	789b      	ldrb	r3, [r3, #2]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	495e      	ldr	r1, [pc, #376]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004cc0:	78c9      	ldrb	r1, [r1, #3]
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	0619      	lsls	r1, r3, #24
 8004cd2:	4b59      	ldr	r3, [pc, #356]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	4319      	orrs	r1, r3
 8004cda:	4b57      	ldr	r3, [pc, #348]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004cdc:	789b      	ldrb	r3, [r3, #2]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	4955      	ldr	r1, [pc, #340]	@ (8004e38 <MX_LWIP_Init+0x224>)
 8004ce4:	78c9      	ldrb	r1, [r1, #3]
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	4313      	orrs	r3, r2
 8004cec:	4a55      	ldr	r2, [pc, #340]	@ (8004e44 <MX_LWIP_Init+0x230>)
 8004cee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004cf0:	4b52      	ldr	r3, [pc, #328]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	061a      	lsls	r2, r3, #24
 8004cf6:	4b51      	ldr	r3, [pc, #324]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d00:	789b      	ldrb	r3, [r3, #2]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	4313      	orrs	r3, r2
 8004d06:	4a4d      	ldr	r2, [pc, #308]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d08:	78d2      	ldrb	r2, [r2, #3]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	061a      	lsls	r2, r3, #24
 8004d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	0619      	lsls	r1, r3, #24
 8004d14:	4b49      	ldr	r3, [pc, #292]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	4319      	orrs	r1, r3
 8004d1c:	4b47      	ldr	r3, [pc, #284]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d1e:	789b      	ldrb	r3, [r3, #2]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	430b      	orrs	r3, r1
 8004d24:	4945      	ldr	r1, [pc, #276]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d26:	78c9      	ldrb	r1, [r1, #3]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d30:	431a      	orrs	r2, r3
 8004d32:	4b42      	ldr	r3, [pc, #264]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	0619      	lsls	r1, r3, #24
 8004d38:	4b40      	ldr	r3, [pc, #256]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	4319      	orrs	r1, r3
 8004d40:	4b3e      	ldr	r3, [pc, #248]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d42:	789b      	ldrb	r3, [r3, #2]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	430b      	orrs	r3, r1
 8004d48:	493c      	ldr	r1, [pc, #240]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d4a:	78c9      	ldrb	r1, [r1, #3]
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004d54:	431a      	orrs	r2, r3
 8004d56:	4b39      	ldr	r3, [pc, #228]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	0619      	lsls	r1, r3, #24
 8004d5c:	4b37      	ldr	r3, [pc, #220]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	4319      	orrs	r1, r3
 8004d64:	4b35      	ldr	r3, [pc, #212]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d66:	789b      	ldrb	r3, [r3, #2]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	4933      	ldr	r1, [pc, #204]	@ (8004e3c <MX_LWIP_Init+0x228>)
 8004d6e:	78c9      	ldrb	r1, [r1, #3]
 8004d70:	430b      	orrs	r3, r1
 8004d72:	0e1b      	lsrs	r3, r3, #24
 8004d74:	4313      	orrs	r3, r2
 8004d76:	4a34      	ldr	r2, [pc, #208]	@ (8004e48 <MX_LWIP_Init+0x234>)
 8004d78:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004d7a:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	061a      	lsls	r2, r3, #24
 8004d80:	4b2f      	ldr	r3, [pc, #188]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	431a      	orrs	r2, r3
 8004d88:	4b2d      	ldr	r3, [pc, #180]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004d8a:	789b      	ldrb	r3, [r3, #2]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	4a2b      	ldr	r2, [pc, #172]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004d92:	78d2      	ldrb	r2, [r2, #3]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	061a      	lsls	r2, r3, #24
 8004d98:	4b29      	ldr	r3, [pc, #164]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	0619      	lsls	r1, r3, #24
 8004d9e:	4b28      	ldr	r3, [pc, #160]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	4319      	orrs	r1, r3
 8004da6:	4b26      	ldr	r3, [pc, #152]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004da8:	789b      	ldrb	r3, [r3, #2]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	430b      	orrs	r3, r1
 8004dae:	4924      	ldr	r1, [pc, #144]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004db0:	78c9      	ldrb	r1, [r1, #3]
 8004db2:	430b      	orrs	r3, r1
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	4b20      	ldr	r3, [pc, #128]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	0619      	lsls	r1, r3, #24
 8004dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	4319      	orrs	r1, r3
 8004dca:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004dcc:	789b      	ldrb	r3, [r3, #2]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	491b      	ldr	r1, [pc, #108]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004dd4:	78c9      	ldrb	r1, [r1, #3]
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004dde:	431a      	orrs	r2, r3
 8004de0:	4b17      	ldr	r3, [pc, #92]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	0619      	lsls	r1, r3, #24
 8004de6:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	4319      	orrs	r1, r3
 8004dee:	4b14      	ldr	r3, [pc, #80]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004df0:	789b      	ldrb	r3, [r3, #2]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	430b      	orrs	r3, r1
 8004df6:	4912      	ldr	r1, [pc, #72]	@ (8004e40 <MX_LWIP_Init+0x22c>)
 8004df8:	78c9      	ldrb	r1, [r1, #3]
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	4a12      	ldr	r2, [pc, #72]	@ (8004e4c <MX_LWIP_Init+0x238>)
 8004e02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004e04:	4b12      	ldr	r3, [pc, #72]	@ (8004e50 <MX_LWIP_Init+0x23c>)
 8004e06:	9302      	str	r3, [sp, #8]
 8004e08:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <MX_LWIP_Init+0x240>)
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4b0e      	ldr	r3, [pc, #56]	@ (8004e4c <MX_LWIP_Init+0x238>)
 8004e12:	4a0d      	ldr	r2, [pc, #52]	@ (8004e48 <MX_LWIP_Init+0x234>)
 8004e14:	490b      	ldr	r1, [pc, #44]	@ (8004e44 <MX_LWIP_Init+0x230>)
 8004e16:	4810      	ldr	r0, [pc, #64]	@ (8004e58 <MX_LWIP_Init+0x244>)
 8004e18:	f001 f976 	bl	8006108 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004e1c:	480e      	ldr	r0, [pc, #56]	@ (8004e58 <MX_LWIP_Init+0x244>)
 8004e1e:	f001 fc07 	bl	8006630 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004e22:	480d      	ldr	r0, [pc, #52]	@ (8004e58 <MX_LWIP_Init+0x244>)
 8004e24:	f001 fc28 	bl	8006678 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004e28:	490c      	ldr	r1, [pc, #48]	@ (8004e5c <MX_LWIP_Init+0x248>)
 8004e2a:	480b      	ldr	r0, [pc, #44]	@ (8004e58 <MX_LWIP_Init+0x244>)
 8004e2c:	f001 fd26 	bl	800687c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200002fc 	.word	0x200002fc
 8004e3c:	20000300 	.word	0x20000300
 8004e40:	20000304 	.word	0x20000304
 8004e44:	200002f0 	.word	0x200002f0
 8004e48:	200002f4 	.word	0x200002f4
 8004e4c:	200002f8 	.word	0x200002f8
 8004e50:	0800fc85 	.word	0x0800fc85
 8004e54:	080051d5 	.word	0x080051d5
 8004e58:	200002bc 	.word	0x200002bc
 8004e5c:	08004eb1 	.word	0x08004eb1

08004e60 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004e68:	f7fb ffee 	bl	8000e48 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <Ethernet_Link_Periodic_Handle+0x30>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b63      	cmp	r3, #99	@ 0x63
 8004e76:	d907      	bls.n	8004e88 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004e78:	f7fb ffe6 	bl	8000e48 <HAL_GetTick>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4a04      	ldr	r2, [pc, #16]	@ (8004e90 <Ethernet_Link_Periodic_Handle+0x30>)
 8004e80:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fb0c 	bl	80054a0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200002b8 	.word	0x200002b8

08004e94 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004e98:	4804      	ldr	r0, [pc, #16]	@ (8004eac <MX_LWIP_Process+0x18>)
 8004e9a:	f000 f97b 	bl	8005194 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004e9e:	f007 fd85 	bl	800c9ac <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004ea2:	4802      	ldr	r0, [pc, #8]	@ (8004eac <MX_LWIP_Process+0x18>)
 8004ea4:	f7ff ffdc 	bl	8004e60 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	200002bc 	.word	0x200002bc

08004eb0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <SCB_InvalidateDCache_by_Addr>:
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004ed6:	2320      	movs	r3, #32
 8004ed8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004eda:	f3bf 8f4f 	dsb	sy
}
 8004ede:	bf00      	nop
    while (op_size > 0) {
 8004ee0:	e00b      	b.n	8004efa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4413      	add	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dcf0      	bgt.n	8004ee2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004f00:	f3bf 8f4f 	dsb	sy
}
 8004f04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f06:	f3bf 8f6f 	isb	sy
}
 8004f0a:	bf00      	nop
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004f28:	4b44      	ldr	r3, [pc, #272]	@ (800503c <low_level_init+0x120>)
 8004f2a:	4a45      	ldr	r2, [pc, #276]	@ (8005040 <low_level_init+0x124>)
 8004f2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004f36:	23e1      	movs	r3, #225	@ 0xe1
 8004f38:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004f42:	2300      	movs	r3, #0
 8004f44:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004f46:	4a3d      	ldr	r2, [pc, #244]	@ (800503c <low_level_init+0x120>)
 8004f48:	f107 0308 	add.w	r3, r7, #8
 8004f4c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800503c <low_level_init+0x120>)
 8004f50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f54:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004f56:	4b39      	ldr	r3, [pc, #228]	@ (800503c <low_level_init+0x120>)
 8004f58:	4a3a      	ldr	r2, [pc, #232]	@ (8005044 <low_level_init+0x128>)
 8004f5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004f5c:	4b37      	ldr	r3, [pc, #220]	@ (800503c <low_level_init+0x120>)
 8004f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8005048 <low_level_init+0x12c>)
 8004f60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004f62:	4b36      	ldr	r3, [pc, #216]	@ (800503c <low_level_init+0x120>)
 8004f64:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004f68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004f6a:	4834      	ldr	r0, [pc, #208]	@ (800503c <low_level_init+0x120>)
 8004f6c:	f7fc f940 	bl	80011f0 <HAL_ETH_Init>
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004f74:	2238      	movs	r2, #56	@ 0x38
 8004f76:	2100      	movs	r1, #0
 8004f78:	4834      	ldr	r0, [pc, #208]	@ (800504c <low_level_init+0x130>)
 8004f7a:	f00b fa23 	bl	80103c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004f7e:	4b33      	ldr	r3, [pc, #204]	@ (800504c <low_level_init+0x130>)
 8004f80:	2221      	movs	r2, #33	@ 0x21
 8004f82:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004f84:	4b31      	ldr	r3, [pc, #196]	@ (800504c <low_level_init+0x130>)
 8004f86:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004f8a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800504c <low_level_init+0x130>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004f92:	482f      	ldr	r0, [pc, #188]	@ (8005050 <low_level_init+0x134>)
 8004f94:	f000 ff80 	bl	8005e98 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2206      	movs	r2, #6
 8004f9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004fa0:	4b26      	ldr	r3, [pc, #152]	@ (800503c <low_level_init+0x120>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	781a      	ldrb	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004fac:	4b23      	ldr	r3, [pc, #140]	@ (800503c <low_level_init+0x120>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	785a      	ldrb	r2, [r3, #1]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004fb8:	4b20      	ldr	r3, [pc, #128]	@ (800503c <low_level_init+0x120>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	789a      	ldrb	r2, [r3, #2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800503c <low_level_init+0x120>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	78da      	ldrb	r2, [r3, #3]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800503c <low_level_init+0x120>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	791a      	ldrb	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004fdc:	4b17      	ldr	r3, [pc, #92]	@ (800503c <low_level_init+0x120>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	795a      	ldrb	r2, [r3, #5]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004fee:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ff6:	f043 030a 	orr.w	r3, r3, #10
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005002:	4914      	ldr	r1, [pc, #80]	@ (8005054 <low_level_init+0x138>)
 8005004:	4814      	ldr	r0, [pc, #80]	@ (8005058 <low_level_init+0x13c>)
 8005006:	f7fb fdc8 	bl	8000b9a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800500a:	4813      	ldr	r0, [pc, #76]	@ (8005058 <low_level_init+0x13c>)
 800500c:	f7fb fdf7 	bl	8000bfe <LAN8742_Init>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 fc00 	bl	800681c <netif_set_link_down>
    netif_set_down(netif);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 fb97 	bl	8006750 <netif_set_down>
 8005022:	e008      	b.n	8005036 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa38 	bl	80054a0 <ethernet_link_check_state>
 8005030:	e001      	b.n	8005036 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8005032:	f7fb fbb9 	bl	80007a8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20004c94 	.word	0x20004c94
 8005040:	40028000 	.word	0x40028000
 8005044:	2000016c 	.word	0x2000016c
 8005048:	200000cc 	.word	0x200000cc
 800504c:	20004d44 	.word	0x20004d44
 8005050:	08014484 	.word	0x08014484
 8005054:	2000000c 	.word	0x2000000c
 8005058:	20004d7c 	.word	0x20004d7c

0800505c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b092      	sub	sp, #72	@ 0x48
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005074:	f107 030c 	add.w	r3, r7, #12
 8005078:	2230      	movs	r2, #48	@ 0x30
 800507a:	2100      	movs	r1, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f00b f9a1 	bl	80103c4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005082:	f107 030c 	add.w	r3, r7, #12
 8005086:	2230      	movs	r2, #48	@ 0x30
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f00b f99a 	bl	80103c4 <memset>

  for(q = p; q != NULL; q = q->next)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	643b      	str	r3, [r7, #64]	@ 0x40
 8005094:	e045      	b.n	8005122 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005098:	2b03      	cmp	r3, #3
 800509a:	d902      	bls.n	80050a2 <low_level_output+0x46>
      return ERR_IF;
 800509c:	f06f 030b 	mvn.w	r3, #11
 80050a0:	e055      	b.n	800514e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80050a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	3348      	adds	r3, #72	@ 0x48
 80050b2:	443b      	add	r3, r7
 80050b4:	3b3c      	subs	r3, #60	@ 0x3c
 80050b6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80050b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ba:	895b      	ldrh	r3, [r3, #10]
 80050bc:	4619      	mov	r1, r3
 80050be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	3348      	adds	r3, #72	@ 0x48
 80050ca:	443b      	add	r3, r7
 80050cc:	3b38      	subs	r3, #56	@ 0x38
 80050ce:	6019      	str	r1, [r3, #0]

    if(i>0)
 80050d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d011      	beq.n	80050fa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80050d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	f107 000c 	add.w	r0, r7, #12
 80050de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050e0:	460b      	mov	r3, r1
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	440b      	add	r3, r1
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	18c1      	adds	r1, r0, r3
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	3348      	adds	r3, #72	@ 0x48
 80050f4:	443b      	add	r3, r7
 80050f6:	3b34      	subs	r3, #52	@ 0x34
 80050f8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80050fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	3348      	adds	r3, #72	@ 0x48
 800510e:	443b      	add	r3, r7
 8005110:	3b34      	subs	r3, #52	@ 0x34
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005118:	3301      	adds	r3, #1
 800511a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800511c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	643b      	str	r3, [r7, #64]	@ 0x40
 8005122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1b6      	bne.n	8005096 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	891b      	ldrh	r3, [r3, #8]
 800512c:	461a      	mov	r2, r3
 800512e:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <low_level_output+0xfc>)
 8005130:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005132:	4a09      	ldr	r2, [pc, #36]	@ (8005158 <low_level_output+0xfc>)
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800513a:	4a07      	ldr	r2, [pc, #28]	@ (8005158 <low_level_output+0xfc>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005140:	2214      	movs	r2, #20
 8005142:	4905      	ldr	r1, [pc, #20]	@ (8005158 <low_level_output+0xfc>)
 8005144:	4805      	ldr	r0, [pc, #20]	@ (800515c <low_level_output+0x100>)
 8005146:	f7fc f9dd 	bl	8001504 <HAL_ETH_Transmit>

  return errval;
 800514a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800514e:	4618      	mov	r0, r3
 8005150:	3748      	adds	r7, #72	@ 0x48
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20004d44 	.word	0x20004d44
 800515c:	20004c94 	.word	0x20004c94

08005160 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800516c:	4b07      	ldr	r3, [pc, #28]	@ (800518c <low_level_input+0x2c>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	4619      	mov	r1, r3
 800517a:	4805      	ldr	r0, [pc, #20]	@ (8005190 <low_level_input+0x30>)
 800517c:	f7fc fa56 	bl	800162c <HAL_ETH_ReadData>
  }

  return p;
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20004c90 	.word	0x20004c90
 8005190:	20004c94 	.word	0x20004c94

08005194 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ffdd 	bl	8005160 <low_level_input>
 80051a6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	4798      	blx	r3
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f001 fedc 	bl	8006f7c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ea      	bne.n	80051a0 <ethernetif_input+0xc>
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <ethernetif_init+0x1c>
 80051e2:	4b0e      	ldr	r3, [pc, #56]	@ (800521c <ethernetif_init+0x48>)
 80051e4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80051e8:	490d      	ldr	r1, [pc, #52]	@ (8005220 <ethernetif_init+0x4c>)
 80051ea:	480e      	ldr	r0, [pc, #56]	@ (8005224 <ethernetif_init+0x50>)
 80051ec:	f00a ff8a 	bl	8010104 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2273      	movs	r2, #115	@ 0x73
 80051f4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2274      	movs	r2, #116	@ 0x74
 80051fc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <ethernetif_init+0x54>)
 8005204:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a08      	ldr	r2, [pc, #32]	@ (800522c <ethernetif_init+0x58>)
 800520a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fe85 	bl	8004f1c <low_level_init>

  return ERR_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	0801107c 	.word	0x0801107c
 8005220:	08011098 	.word	0x08011098
 8005224:	080110a8 	.word	0x080110a8
 8005228:	0800e019 	.word	0x0800e019
 800522c:	0800505d 	.word	0x0800505d

08005230 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	4807      	ldr	r0, [pc, #28]	@ (800525c <pbuf_free_custom+0x2c>)
 8005240:	f000 ff0c 	bl	800605c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <pbuf_free_custom+0x30>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d102      	bne.n	8005252 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800524c:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <pbuf_free_custom+0x30>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
  }
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	08014484 	.word	0x08014484
 8005260:	20004c90 	.word	0x20004c90

08005264 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005268:	f7fb fdee 	bl	8000e48 <HAL_GetTick>
 800526c:	4603      	mov	r3, r0
}
 800526e:	4618      	mov	r0, r3
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	@ 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a56      	ldr	r2, [pc, #344]	@ (80053ec <HAL_ETH_MspInit+0x178>)
 8005292:	4293      	cmp	r3, r2
 8005294:	f040 80a6 	bne.w	80053e4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005298:	4b55      	ldr	r3, [pc, #340]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529c:	4a54      	ldr	r2, [pc, #336]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 800529e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80052a4:	4b52      	ldr	r3, [pc, #328]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	4b4f      	ldr	r3, [pc, #316]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	4a4e      	ldr	r2, [pc, #312]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80052bc:	4b4c      	ldr	r3, [pc, #304]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4b49      	ldr	r3, [pc, #292]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	4a48      	ldr	r2, [pc, #288]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80052d4:	4b46      	ldr	r3, [pc, #280]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e0:	4b43      	ldr	r3, [pc, #268]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e4:	4a42      	ldr	r2, [pc, #264]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80052ec:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f8:	4b3d      	ldr	r3, [pc, #244]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fc:	4a3c      	ldr	r2, [pc, #240]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6313      	str	r3, [r2, #48]	@ 0x30
 8005304:	4b3a      	ldr	r3, [pc, #232]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 8005306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005310:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	4a36      	ldr	r2, [pc, #216]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 8005316:	f043 0302 	orr.w	r3, r3, #2
 800531a:	6313      	str	r3, [r2, #48]	@ 0x30
 800531c:	4b34      	ldr	r3, [pc, #208]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005328:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 800532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532c:	4a30      	ldr	r2, [pc, #192]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 800532e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005332:	6313      	str	r3, [r2, #48]	@ 0x30
 8005334:	4b2e      	ldr	r3, [pc, #184]	@ (80053f0 <HAL_ETH_MspInit+0x17c>)
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005340:	2332      	movs	r3, #50	@ 0x32
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534c:	2303      	movs	r3, #3
 800534e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005350:	230b      	movs	r3, #11
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005358:	4619      	mov	r1, r3
 800535a:	4826      	ldr	r0, [pc, #152]	@ (80053f4 <HAL_ETH_MspInit+0x180>)
 800535c:	f7fd f996 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005360:	2386      	movs	r3, #134	@ 0x86
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005364:	2302      	movs	r3, #2
 8005366:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005368:	2300      	movs	r3, #0
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536c:	2303      	movs	r3, #3
 800536e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005370:	230b      	movs	r3, #11
 8005372:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005378:	4619      	mov	r1, r3
 800537a:	481f      	ldr	r0, [pc, #124]	@ (80053f8 <HAL_ETH_MspInit+0x184>)
 800537c:	f7fd f986 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005380:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005386:	2302      	movs	r3, #2
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538a:	2300      	movs	r3, #0
 800538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538e:	2303      	movs	r3, #3
 8005390:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005392:	230b      	movs	r3, #11
 8005394:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800539a:	4619      	mov	r1, r3
 800539c:	4817      	ldr	r0, [pc, #92]	@ (80053fc <HAL_ETH_MspInit+0x188>)
 800539e:	f7fd f975 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80053a2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a8:	2302      	movs	r3, #2
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b0:	2303      	movs	r3, #3
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053b4:	230b      	movs	r3, #11
 80053b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053bc:	4619      	mov	r1, r3
 80053be:	4810      	ldr	r0, [pc, #64]	@ (8005400 <HAL_ETH_MspInit+0x18c>)
 80053c0:	f7fd f964 	bl	800268c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80053c4:	2200      	movs	r2, #0
 80053c6:	2100      	movs	r1, #0
 80053c8:	203d      	movs	r0, #61	@ 0x3d
 80053ca:	f7fb fe48 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80053ce:	203d      	movs	r0, #61	@ 0x3d
 80053d0:	f7fb fe61 	bl	8001096 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2100      	movs	r1, #0
 80053d8:	203e      	movs	r0, #62	@ 0x3e
 80053da:	f7fb fe40 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80053de:	203e      	movs	r0, #62	@ 0x3e
 80053e0:	f7fb fe59 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80053e4:	bf00      	nop
 80053e6:	3738      	adds	r7, #56	@ 0x38
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40028000 	.word	0x40028000
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40020800 	.word	0x40020800
 80053f8:	40020000 	.word	0x40020000
 80053fc:	40020400 	.word	0x40020400
 8005400:	40021800 	.word	0x40021800

08005404 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005408:	4802      	ldr	r0, [pc, #8]	@ (8005414 <ETH_PHY_IO_Init+0x10>)
 800540a:	f7fc fcdd 	bl	8001dc8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20004c94 	.word	0x20004c94

08005418 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return 0;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	4807      	ldr	r0, [pc, #28]	@ (8005458 <ETH_PHY_IO_ReadReg+0x30>)
 800543c:	f7fc fb1e 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800544a:	e000      	b.n	800544e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20004c94 	.word	0x20004c94

0800545c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	4807      	ldr	r0, [pc, #28]	@ (800548c <ETH_PHY_IO_WriteReg+0x30>)
 8005470:	f7fc fb4f 	bl	8001b12 <HAL_ETH_WritePHYRegister>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800547e:	e000      	b.n	8005482 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20004c94 	.word	0x20004c94

08005490 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005494:	f7fb fcd8 	bl	8000e48 <HAL_GetTick>
 8005498:	4603      	mov	r3, r0
}
 800549a:	4618      	mov	r0, r3
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b0a0      	sub	sp, #128	@ 0x80
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80054a8:	f107 030c 	add.w	r3, r7, #12
 80054ac:	2264      	movs	r2, #100	@ 0x64
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f00a ff87 	bl	80103c4 <memset>
  int32_t PHYLinkState = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054be:	2300      	movs	r3, #0
 80054c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054c2:	2300      	movs	r3, #0
 80054c4:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80054c6:	483a      	ldr	r0, [pc, #232]	@ (80055b0 <ethernet_link_check_state+0x110>)
 80054c8:	f7fb fbe6 	bl	8000c98 <LAN8742_GetLinkState>
 80054cc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80054d4:	089b      	lsrs	r3, r3, #2
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <ethernet_link_check_state+0x5a>
 80054e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	dc09      	bgt.n	80054fa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 80054e6:	4833      	ldr	r0, [pc, #204]	@ (80055b4 <ethernet_link_check_state+0x114>)
 80054e8:	f7fb ff8c 	bl	8001404 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 f92f 	bl	8006750 <netif_set_down>
    netif_set_link_down(netif);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 f992 	bl	800681c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80054f8:	e055      	b.n	80055a6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d14e      	bne.n	80055a6 <ethernet_link_check_state+0x106>
 8005508:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800550a:	2b01      	cmp	r3, #1
 800550c:	dd4b      	ble.n	80055a6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800550e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005510:	3b02      	subs	r3, #2
 8005512:	2b03      	cmp	r3, #3
 8005514:	d82a      	bhi.n	800556c <ethernet_link_check_state+0xcc>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <ethernet_link_check_state+0x7c>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	0800552d 	.word	0x0800552d
 8005520:	0800553f 	.word	0x0800553f
 8005524:	0800554f 	.word	0x0800554f
 8005528:	0800555f 	.word	0x0800555f
      duplex = ETH_FULLDUPLEX_MODE;
 800552c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005530:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005532:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005536:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005538:	2301      	movs	r3, #1
 800553a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800553c:	e017      	b.n	800556e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800553e:	2300      	movs	r3, #0
 8005540:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005542:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005546:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005548:	2301      	movs	r3, #1
 800554a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800554c:	e00f      	b.n	800556e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800554e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005552:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005554:	2300      	movs	r3, #0
 8005556:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005558:	2301      	movs	r3, #1
 800555a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800555c:	e007      	b.n	800556e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800555e:	2300      	movs	r3, #0
 8005560:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005562:	2300      	movs	r3, #0
 8005564:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005566:	2301      	movs	r3, #1
 8005568:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800556a:	e000      	b.n	800556e <ethernet_link_check_state+0xce>
      break;
 800556c:	bf00      	nop
    if(linkchanged)
 800556e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d018      	beq.n	80055a6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	4619      	mov	r1, r3
 800557a:	480e      	ldr	r0, [pc, #56]	@ (80055b4 <ethernet_link_check_state+0x114>)
 800557c:	f7fc fb12 	bl	8001ba4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005580:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005586:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005588:	f107 030c 	add.w	r3, r7, #12
 800558c:	4619      	mov	r1, r3
 800558e:	4809      	ldr	r0, [pc, #36]	@ (80055b4 <ethernet_link_check_state+0x114>)
 8005590:	f7fc fbff 	bl	8001d92 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005594:	4807      	ldr	r0, [pc, #28]	@ (80055b4 <ethernet_link_check_state+0x114>)
 8005596:	f7fb fec5 	bl	8001324 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 f86c 	bl	8006678 <netif_set_up>
      netif_set_link_up(netif);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 f907 	bl	80067b4 <netif_set_link_up>
}
 80055a6:	bf00      	nop
 80055a8:	3780      	adds	r7, #128	@ 0x80
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20004d7c 	.word	0x20004d7c
 80055b4:	20004c94 	.word	0x20004c94

080055b8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80055c0:	4812      	ldr	r0, [pc, #72]	@ (800560c <HAL_ETH_RxAllocateCallback+0x54>)
 80055c2:	f000 fcdd 	bl	8005f80 <memp_malloc_pool>
 80055c6:	60f8      	str	r0, [r7, #12]
  if (p)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d014      	beq.n	80055f8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f103 0220 	add.w	r2, r3, #32
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a0d      	ldr	r2, [pc, #52]	@ (8005610 <HAL_ETH_RxAllocateCallback+0x58>)
 80055dc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80055e6:	9201      	str	r2, [sp, #4]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2241      	movs	r2, #65	@ 0x41
 80055ee:	2100      	movs	r1, #0
 80055f0:	2000      	movs	r0, #0
 80055f2:	f001 fb09 	bl	8006c08 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80055f6:	e005      	b.n	8005604 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80055f8:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_ETH_RxAllocateCallback+0x5c>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	08014484 	.word	0x08014484
 8005610:	08005231 	.word	0x08005231
 8005614:	20004c90 	.word	0x20004c90

08005618 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3b20      	subs	r3, #32
 8005636:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	2200      	movs	r2, #0
 8005642:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	887a      	ldrh	r2, [r7, #2]
 8005648:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e003      	b.n	8005662 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e009      	b.n	8005684 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	891a      	ldrh	r2, [r3, #8]
 8005674:	887b      	ldrh	r3, [r7, #2]
 8005676:	4413      	add	r3, r2
 8005678:	b29a      	uxth	r2, r3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f2      	bne.n	8005670 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fc18 	bl	8004ec4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005694:	bf00      	nop
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dc04      	bgt.n	80056b8 <lwip_strerr+0x1c>
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	f113 0f10 	cmn.w	r3, #16
 80056b6:	da01      	bge.n	80056bc <lwip_strerr+0x20>
    return "Unknown error.";
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <lwip_strerr+0x38>)
 80056ba:	e005      	b.n	80056c8 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 80056bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c0:	425b      	negs	r3, r3
 80056c2:	4a05      	ldr	r2, [pc, #20]	@ (80056d8 <lwip_strerr+0x3c>)
 80056c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	0801120c 	.word	0x0801120c
 80056d8:	20000020 	.word	0x20000020

080056dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80056e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	b21a      	sxth	r2, r3
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	0a1b      	lsrs	r3, r3, #8
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	b21b      	sxth	r3, r3
 80056f6:	4313      	orrs	r3, r2
 80056f8:	b21b      	sxth	r3, r3
 80056fa:	b29b      	uxth	r3, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	061a      	lsls	r2, r3, #24
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0e1b      	lsrs	r3, r3, #24
 800572c:	4313      	orrs	r3, r2
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005744:	f000 f8d4 	bl	80058f0 <mem_init>
  memp_init();
 8005748:	f000 fbd6 	bl	8005ef8 <memp_init>
  pbuf_init();
  netif_init();
 800574c:	f000 fcd4 	bl	80060f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005750:	f007 f96e 	bl	800ca30 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005754:	f001 feb0 	bl	80074b8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005758:	f007 f8e0 	bl	800c91c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800576e:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <ptr_to_mem+0x20>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	4413      	add	r3, r2
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20004db4 	.word	0x20004db4

08005788 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <mem_to_ptr+0x20>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	b29b      	uxth	r3, r3
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20004db4 	.word	0x20004db4

080057ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80057b4:	4b45      	ldr	r3, [pc, #276]	@ (80058cc <plug_holes+0x120>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d206      	bcs.n	80057cc <plug_holes+0x20>
 80057be:	4b44      	ldr	r3, [pc, #272]	@ (80058d0 <plug_holes+0x124>)
 80057c0:	f240 12df 	movw	r2, #479	@ 0x1df
 80057c4:	4943      	ldr	r1, [pc, #268]	@ (80058d4 <plug_holes+0x128>)
 80057c6:	4844      	ldr	r0, [pc, #272]	@ (80058d8 <plug_holes+0x12c>)
 80057c8:	f00a fc9c 	bl	8010104 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80057cc:	4b43      	ldr	r3, [pc, #268]	@ (80058dc <plug_holes+0x130>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d306      	bcc.n	80057e4 <plug_holes+0x38>
 80057d6:	4b3e      	ldr	r3, [pc, #248]	@ (80058d0 <plug_holes+0x124>)
 80057d8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80057dc:	4940      	ldr	r1, [pc, #256]	@ (80058e0 <plug_holes+0x134>)
 80057de:	483e      	ldr	r0, [pc, #248]	@ (80058d8 <plug_holes+0x12c>)
 80057e0:	f00a fc90 	bl	8010104 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	791b      	ldrb	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d006      	beq.n	80057fa <plug_holes+0x4e>
 80057ec:	4b38      	ldr	r3, [pc, #224]	@ (80058d0 <plug_holes+0x124>)
 80057ee:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80057f2:	493c      	ldr	r1, [pc, #240]	@ (80058e4 <plug_holes+0x138>)
 80057f4:	4838      	ldr	r0, [pc, #224]	@ (80058d8 <plug_holes+0x12c>)
 80057f6:	f00a fc85 	bl	8010104 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005802:	d906      	bls.n	8005812 <plug_holes+0x66>
 8005804:	4b32      	ldr	r3, [pc, #200]	@ (80058d0 <plug_holes+0x124>)
 8005806:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800580a:	4937      	ldr	r1, [pc, #220]	@ (80058e8 <plug_holes+0x13c>)
 800580c:	4832      	ldr	r0, [pc, #200]	@ (80058d8 <plug_holes+0x12c>)
 800580e:	f00a fc79 	bl	8010104 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff ffa4 	bl	8005764 <ptr_to_mem>
 800581c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	429a      	cmp	r2, r3
 8005824:	d024      	beq.n	8005870 <plug_holes+0xc4>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d120      	bne.n	8005870 <plug_holes+0xc4>
 800582e:	4b2b      	ldr	r3, [pc, #172]	@ (80058dc <plug_holes+0x130>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	429a      	cmp	r2, r3
 8005836:	d01b      	beq.n	8005870 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005838:	4b2c      	ldr	r3, [pc, #176]	@ (80058ec <plug_holes+0x140>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	429a      	cmp	r2, r3
 8005840:	d102      	bne.n	8005848 <plug_holes+0x9c>
      lfree = mem;
 8005842:	4a2a      	ldr	r2, [pc, #168]	@ (80058ec <plug_holes+0x140>)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005858:	d00a      	beq.n	8005870 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff ff80 	bl	8005764 <ptr_to_mem>
 8005864:	4604      	mov	r4, r0
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ff8e 	bl	8005788 <mem_to_ptr>
 800586c:	4603      	mov	r3, r0
 800586e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	885b      	ldrh	r3, [r3, #2]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff ff75 	bl	8005764 <ptr_to_mem>
 800587a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	d01f      	beq.n	80058c4 <plug_holes+0x118>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	791b      	ldrb	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11b      	bne.n	80058c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800588c:	4b17      	ldr	r3, [pc, #92]	@ (80058ec <plug_holes+0x140>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d102      	bne.n	800589c <plug_holes+0xf0>
      lfree = pmem;
 8005896:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <plug_holes+0x140>)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	881a      	ldrh	r2, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80058ac:	d00a      	beq.n	80058c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ff56 	bl	8005764 <ptr_to_mem>
 80058b8:	4604      	mov	r4, r0
 80058ba:	68b8      	ldr	r0, [r7, #8]
 80058bc:	f7ff ff64 	bl	8005788 <mem_to_ptr>
 80058c0:	4603      	mov	r3, r0
 80058c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd90      	pop	{r4, r7, pc}
 80058cc:	20004db4 	.word	0x20004db4
 80058d0:	0801121c 	.word	0x0801121c
 80058d4:	0801124c 	.word	0x0801124c
 80058d8:	08011264 	.word	0x08011264
 80058dc:	20004db8 	.word	0x20004db8
 80058e0:	0801128c 	.word	0x0801128c
 80058e4:	080112a8 	.word	0x080112a8
 80058e8:	080112c4 	.word	0x080112c4
 80058ec:	20004dbc 	.word	0x20004dbc

080058f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80058f6:	4b16      	ldr	r3, [pc, #88]	@ (8005950 <mem_init+0x60>)
 80058f8:	4a16      	ldr	r2, [pc, #88]	@ (8005954 <mem_init+0x64>)
 80058fa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80058fc:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <mem_init+0x60>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005908:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005916:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800591a:	f7ff ff23 	bl	8005764 <ptr_to_mem>
 800591e:	4603      	mov	r3, r0
 8005920:	4a0d      	ldr	r2, [pc, #52]	@ (8005958 <mem_init+0x68>)
 8005922:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005924:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <mem_init+0x68>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2201      	movs	r2, #1
 800592a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <mem_init+0x68>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005934:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <mem_init+0x68>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800593e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005940:	4b03      	ldr	r3, [pc, #12]	@ (8005950 <mem_init+0x60>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a05      	ldr	r2, [pc, #20]	@ (800595c <mem_init+0x6c>)
 8005946:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20004db4 	.word	0x20004db4
 8005954:	20048000 	.word	0x20048000
 8005958:	20004db8 	.word	0x20004db8
 800595c:	20004dbc 	.word	0x20004dbc

08005960 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff0d 	bl	8005788 <mem_to_ptr>
 800596e:	4603      	mov	r3, r0
 8005970:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fef4 	bl	8005764 <ptr_to_mem>
 800597c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff feee 	bl	8005764 <ptr_to_mem>
 8005988:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005992:	d818      	bhi.n	80059c6 <mem_link_valid+0x66>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	885b      	ldrh	r3, [r3, #2]
 8005998:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800599c:	d813      	bhi.n	80059c6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80059a2:	8afa      	ldrh	r2, [r7, #22]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d004      	beq.n	80059b2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	8afa      	ldrh	r2, [r7, #22]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d109      	bne.n	80059c6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059b2:	4b08      	ldr	r3, [pc, #32]	@ (80059d4 <mem_link_valid+0x74>)
 80059b4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d006      	beq.n	80059ca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	885b      	ldrh	r3, [r3, #2]
 80059c0:	8afa      	ldrh	r2, [r7, #22]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d001      	beq.n	80059ca <mem_link_valid+0x6a>
    return 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <mem_link_valid+0x6c>
  }
  return 1;
 80059ca:	2301      	movs	r3, #1
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20004db8 	.word	0x20004db8

080059d8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d04c      	beq.n	8005a80 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80059f0:	4b25      	ldr	r3, [pc, #148]	@ (8005a88 <mem_free+0xb0>)
 80059f2:	f240 2273 	movw	r2, #627	@ 0x273
 80059f6:	4925      	ldr	r1, [pc, #148]	@ (8005a8c <mem_free+0xb4>)
 80059f8:	4825      	ldr	r0, [pc, #148]	@ (8005a90 <mem_free+0xb8>)
 80059fa:	f00a fb83 	bl	8010104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80059fe:	e040      	b.n	8005a82 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3b08      	subs	r3, #8
 8005a04:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005a06:	4b23      	ldr	r3, [pc, #140]	@ (8005a94 <mem_free+0xbc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d306      	bcc.n	8005a1e <mem_free+0x46>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f103 020c 	add.w	r2, r3, #12
 8005a16:	4b20      	ldr	r3, [pc, #128]	@ (8005a98 <mem_free+0xc0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d907      	bls.n	8005a2e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a88 <mem_free+0xb0>)
 8005a20:	f240 227f 	movw	r2, #639	@ 0x27f
 8005a24:	491d      	ldr	r1, [pc, #116]	@ (8005a9c <mem_free+0xc4>)
 8005a26:	481a      	ldr	r0, [pc, #104]	@ (8005a90 <mem_free+0xb8>)
 8005a28:	f00a fb6c 	bl	8010104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a2c:	e029      	b.n	8005a82 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	791b      	ldrb	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d107      	bne.n	8005a46 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005a36:	4b14      	ldr	r3, [pc, #80]	@ (8005a88 <mem_free+0xb0>)
 8005a38:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8005a3c:	4918      	ldr	r1, [pc, #96]	@ (8005aa0 <mem_free+0xc8>)
 8005a3e:	4814      	ldr	r0, [pc, #80]	@ (8005a90 <mem_free+0xb8>)
 8005a40:	f00a fb60 	bl	8010104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a44:	e01d      	b.n	8005a82 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff ff8a 	bl	8005960 <mem_link_valid>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <mem_free+0xb0>)
 8005a54:	f240 2295 	movw	r2, #661	@ 0x295
 8005a58:	4912      	ldr	r1, [pc, #72]	@ (8005aa4 <mem_free+0xcc>)
 8005a5a:	480d      	ldr	r0, [pc, #52]	@ (8005a90 <mem_free+0xb8>)
 8005a5c:	f00a fb52 	bl	8010104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a60:	e00f      	b.n	8005a82 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005a68:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa8 <mem_free+0xd0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d202      	bcs.n	8005a78 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005a72:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa8 <mem_free+0xd0>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff fe97 	bl	80057ac <plug_holes>
 8005a7e:	e000      	b.n	8005a82 <mem_free+0xaa>
    return;
 8005a80:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	0801121c 	.word	0x0801121c
 8005a8c:	080112f0 	.word	0x080112f0
 8005a90:	08011264 	.word	0x08011264
 8005a94:	20004db4 	.word	0x20004db4
 8005a98:	20004db8 	.word	0x20004db8
 8005a9c:	08011314 	.word	0x08011314
 8005aa0:	08011330 	.word	0x08011330
 8005aa4:	08011358 	.word	0x08011358
 8005aa8:	20004dbc 	.word	0x20004dbc

08005aac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005ab8:	887b      	ldrh	r3, [r7, #2]
 8005aba:	3303      	adds	r3, #3
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005ac4:	8bfb      	ldrh	r3, [r7, #30]
 8005ac6:	2b0b      	cmp	r3, #11
 8005ac8:	d801      	bhi.n	8005ace <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005aca:	230c      	movs	r3, #12
 8005acc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005ace:	8bfb      	ldrh	r3, [r7, #30]
 8005ad0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005ad4:	d803      	bhi.n	8005ade <mem_trim+0x32>
 8005ad6:	8bfa      	ldrh	r2, [r7, #30]
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d201      	bcs.n	8005ae2 <mem_trim+0x36>
    return NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e0cc      	b.n	8005c7c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005ae2:	4b68      	ldr	r3, [pc, #416]	@ (8005c84 <mem_trim+0x1d8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d304      	bcc.n	8005af6 <mem_trim+0x4a>
 8005aec:	4b66      	ldr	r3, [pc, #408]	@ (8005c88 <mem_trim+0x1dc>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d306      	bcc.n	8005b04 <mem_trim+0x58>
 8005af6:	4b65      	ldr	r3, [pc, #404]	@ (8005c8c <mem_trim+0x1e0>)
 8005af8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005afc:	4964      	ldr	r1, [pc, #400]	@ (8005c90 <mem_trim+0x1e4>)
 8005afe:	4865      	ldr	r0, [pc, #404]	@ (8005c94 <mem_trim+0x1e8>)
 8005b00:	f00a fb00 	bl	8010104 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005b04:	4b5f      	ldr	r3, [pc, #380]	@ (8005c84 <mem_trim+0x1d8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d304      	bcc.n	8005b18 <mem_trim+0x6c>
 8005b0e:	4b5e      	ldr	r3, [pc, #376]	@ (8005c88 <mem_trim+0x1dc>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d301      	bcc.n	8005b1c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	e0af      	b.n	8005c7c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3b08      	subs	r3, #8
 8005b20:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005b22:	69b8      	ldr	r0, [r7, #24]
 8005b24:	f7ff fe30 	bl	8005788 <mem_to_ptr>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	8afb      	ldrh	r3, [r7, #22]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b08      	subs	r3, #8
 8005b38:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005b3a:	8bfa      	ldrh	r2, [r7, #30]
 8005b3c:	8abb      	ldrh	r3, [r7, #20]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d906      	bls.n	8005b50 <mem_trim+0xa4>
 8005b42:	4b52      	ldr	r3, [pc, #328]	@ (8005c8c <mem_trim+0x1e0>)
 8005b44:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005b48:	4953      	ldr	r1, [pc, #332]	@ (8005c98 <mem_trim+0x1ec>)
 8005b4a:	4852      	ldr	r0, [pc, #328]	@ (8005c94 <mem_trim+0x1e8>)
 8005b4c:	f00a fada 	bl	8010104 <iprintf>
  if (newsize > size) {
 8005b50:	8bfa      	ldrh	r2, [r7, #30]
 8005b52:	8abb      	ldrh	r3, [r7, #20]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d901      	bls.n	8005b5c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e08f      	b.n	8005c7c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005b5c:	8bfa      	ldrh	r2, [r7, #30]
 8005b5e:	8abb      	ldrh	r3, [r7, #20]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d101      	bne.n	8005b68 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	e089      	b.n	8005c7c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff fdf9 	bl	8005764 <ptr_to_mem>
 8005b72:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	791b      	ldrb	r3, [r3, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d13f      	bne.n	8005bfc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005b84:	d106      	bne.n	8005b94 <mem_trim+0xe8>
 8005b86:	4b41      	ldr	r3, [pc, #260]	@ (8005c8c <mem_trim+0x1e0>)
 8005b88:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005b8c:	4943      	ldr	r1, [pc, #268]	@ (8005c9c <mem_trim+0x1f0>)
 8005b8e:	4841      	ldr	r0, [pc, #260]	@ (8005c94 <mem_trim+0x1e8>)
 8005b90:	f00a fab8 	bl	8010104 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005b9a:	8afa      	ldrh	r2, [r7, #22]
 8005b9c:	8bfb      	ldrh	r3, [r7, #30]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca0 <mem_trim+0x1f4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d106      	bne.n	8005bbe <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fdd6 	bl	8005764 <ptr_to_mem>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4a39      	ldr	r2, [pc, #228]	@ (8005ca0 <mem_trim+0x1f4>)
 8005bbc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005bbe:	89fb      	ldrh	r3, [r7, #14]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fdcf 	bl	8005764 <ptr_to_mem>
 8005bc6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	89ba      	ldrh	r2, [r7, #12]
 8005bd2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	8afa      	ldrh	r2, [r7, #22]
 8005bd8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	89fa      	ldrh	r2, [r7, #14]
 8005bde:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005be8:	d047      	beq.n	8005c7a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fdb8 	bl	8005764 <ptr_to_mem>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	89fb      	ldrh	r3, [r7, #14]
 8005bf8:	8053      	strh	r3, [r2, #2]
 8005bfa:	e03e      	b.n	8005c7a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005bfc:	8bfb      	ldrh	r3, [r7, #30]
 8005bfe:	f103 0214 	add.w	r2, r3, #20
 8005c02:	8abb      	ldrh	r3, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d838      	bhi.n	8005c7a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c08:	8afa      	ldrh	r2, [r7, #22]
 8005c0a:	8bfb      	ldrh	r3, [r7, #30]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3308      	adds	r3, #8
 8005c12:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c1c:	d106      	bne.n	8005c2c <mem_trim+0x180>
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <mem_trim+0x1e0>)
 8005c20:	f240 3216 	movw	r2, #790	@ 0x316
 8005c24:	491d      	ldr	r1, [pc, #116]	@ (8005c9c <mem_trim+0x1f0>)
 8005c26:	481b      	ldr	r0, [pc, #108]	@ (8005c94 <mem_trim+0x1e8>)
 8005c28:	f00a fa6c 	bl	8010104 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fd98 	bl	8005764 <ptr_to_mem>
 8005c34:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005c36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca0 <mem_trim+0x1f4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d202      	bcs.n	8005c46 <mem_trim+0x19a>
      lfree = mem2;
 8005c40:	4a17      	ldr	r2, [pc, #92]	@ (8005ca0 <mem_trim+0x1f4>)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	8afa      	ldrh	r2, [r7, #22]
 8005c58:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	89fa      	ldrh	r2, [r7, #14]
 8005c5e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c68:	d007      	beq.n	8005c7a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fd78 	bl	8005764 <ptr_to_mem>
 8005c74:	4602      	mov	r2, r0
 8005c76:	89fb      	ldrh	r3, [r7, #14]
 8005c78:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005c7a:	687b      	ldr	r3, [r7, #4]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20004db4 	.word	0x20004db4
 8005c88:	20004db8 	.word	0x20004db8
 8005c8c:	0801121c 	.word	0x0801121c
 8005c90:	0801138c 	.word	0x0801138c
 8005c94:	08011264 	.word	0x08011264
 8005c98:	080113a4 	.word	0x080113a4
 8005c9c:	080113c4 	.word	0x080113c4
 8005ca0:	20004dbc 	.word	0x20004dbc

08005ca4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <mem_malloc+0x14>
    return NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e0d9      	b.n	8005e6c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	3303      	adds	r3, #3
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005cc4:	8bbb      	ldrh	r3, [r7, #28]
 8005cc6:	2b0b      	cmp	r3, #11
 8005cc8:	d801      	bhi.n	8005cce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005cca:	230c      	movs	r3, #12
 8005ccc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005cce:	8bbb      	ldrh	r3, [r7, #28]
 8005cd0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005cd4:	d803      	bhi.n	8005cde <mem_malloc+0x3a>
 8005cd6:	8bba      	ldrh	r2, [r7, #28]
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d201      	bcs.n	8005ce2 <mem_malloc+0x3e>
    return NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e0c4      	b.n	8005e6c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005ce2:	4b64      	ldr	r3, [pc, #400]	@ (8005e74 <mem_malloc+0x1d0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fd4e 	bl	8005788 <mem_to_ptr>
 8005cec:	4603      	mov	r3, r0
 8005cee:	83fb      	strh	r3, [r7, #30]
 8005cf0:	e0b4      	b.n	8005e5c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005cf2:	8bfb      	ldrh	r3, [r7, #30]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fd35 	bl	8005764 <ptr_to_mem>
 8005cfa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	791b      	ldrb	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f040 80a4 	bne.w	8005e4e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	8bfb      	ldrh	r3, [r7, #30]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	f1a3 0208 	sub.w	r2, r3, #8
 8005d14:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f0c0 8099 	bcc.w	8005e4e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	8bfb      	ldrh	r3, [r7, #30]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f1a3 0208 	sub.w	r2, r3, #8
 8005d2a:	8bbb      	ldrh	r3, [r7, #28]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d333      	bcc.n	8005d9a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005d32:	8bfa      	ldrh	r2, [r7, #30]
 8005d34:	8bbb      	ldrh	r3, [r7, #28]
 8005d36:	4413      	add	r3, r2
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005d3e:	8a7b      	ldrh	r3, [r7, #18]
 8005d40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d44:	d106      	bne.n	8005d54 <mem_malloc+0xb0>
 8005d46:	4b4c      	ldr	r3, [pc, #304]	@ (8005e78 <mem_malloc+0x1d4>)
 8005d48:	f240 3287 	movw	r2, #903	@ 0x387
 8005d4c:	494b      	ldr	r1, [pc, #300]	@ (8005e7c <mem_malloc+0x1d8>)
 8005d4e:	484c      	ldr	r0, [pc, #304]	@ (8005e80 <mem_malloc+0x1dc>)
 8005d50:	f00a f9d8 	bl	8010104 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005d54:	8a7b      	ldrh	r3, [r7, #18]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fd04 	bl	8005764 <ptr_to_mem>
 8005d5c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	881a      	ldrh	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8bfa      	ldrh	r2, [r7, #30]
 8005d70:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	8a7a      	ldrh	r2, [r7, #18]
 8005d76:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005d86:	d00b      	beq.n	8005da0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fce9 	bl	8005764 <ptr_to_mem>
 8005d92:	4602      	mov	r2, r0
 8005d94:	8a7b      	ldrh	r3, [r7, #18]
 8005d96:	8053      	strh	r3, [r2, #2]
 8005d98:	e002      	b.n	8005da0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005da0:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <mem_malloc+0x1d0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d127      	bne.n	8005dfa <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005daa:	4b32      	ldr	r3, [pc, #200]	@ (8005e74 <mem_malloc+0x1d0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005db0:	e005      	b.n	8005dbe <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fcd4 	bl	8005764 <ptr_to_mem>
 8005dbc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	791b      	ldrb	r3, [r3, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <mem_malloc+0x12c>
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e84 <mem_malloc+0x1e0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d1f0      	bne.n	8005db2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005dd0:	4a28      	ldr	r2, [pc, #160]	@ (8005e74 <mem_malloc+0x1d0>)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005dd6:	4b27      	ldr	r3, [pc, #156]	@ (8005e74 <mem_malloc+0x1d0>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b2a      	ldr	r3, [pc, #168]	@ (8005e84 <mem_malloc+0x1e0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d00b      	beq.n	8005dfa <mem_malloc+0x156>
 8005de2:	4b24      	ldr	r3, [pc, #144]	@ (8005e74 <mem_malloc+0x1d0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	791b      	ldrb	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d006      	beq.n	8005dfa <mem_malloc+0x156>
 8005dec:	4b22      	ldr	r3, [pc, #136]	@ (8005e78 <mem_malloc+0x1d4>)
 8005dee:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8005df2:	4925      	ldr	r1, [pc, #148]	@ (8005e88 <mem_malloc+0x1e4>)
 8005df4:	4822      	ldr	r0, [pc, #136]	@ (8005e80 <mem_malloc+0x1dc>)
 8005df6:	f00a f985 	bl	8010104 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005dfa:	8bba      	ldrh	r2, [r7, #28]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	4413      	add	r3, r2
 8005e00:	3308      	adds	r3, #8
 8005e02:	4a20      	ldr	r2, [pc, #128]	@ (8005e84 <mem_malloc+0x1e0>)
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d906      	bls.n	8005e18 <mem_malloc+0x174>
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <mem_malloc+0x1d4>)
 8005e0c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005e10:	491e      	ldr	r1, [pc, #120]	@ (8005e8c <mem_malloc+0x1e8>)
 8005e12:	481b      	ldr	r0, [pc, #108]	@ (8005e80 <mem_malloc+0x1dc>)
 8005e14:	f00a f976 	bl	8010104 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <mem_malloc+0x18c>
 8005e22:	4b15      	ldr	r3, [pc, #84]	@ (8005e78 <mem_malloc+0x1d4>)
 8005e24:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005e28:	4919      	ldr	r1, [pc, #100]	@ (8005e90 <mem_malloc+0x1ec>)
 8005e2a:	4815      	ldr	r0, [pc, #84]	@ (8005e80 <mem_malloc+0x1dc>)
 8005e2c:	f00a f96a 	bl	8010104 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d006      	beq.n	8005e48 <mem_malloc+0x1a4>
 8005e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e78 <mem_malloc+0x1d4>)
 8005e3c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005e40:	4914      	ldr	r1, [pc, #80]	@ (8005e94 <mem_malloc+0x1f0>)
 8005e42:	480f      	ldr	r0, [pc, #60]	@ (8005e80 <mem_malloc+0x1dc>)
 8005e44:	f00a f95e 	bl	8010104 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	e00e      	b.n	8005e6c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005e4e:	8bfb      	ldrh	r3, [r7, #30]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff fc87 	bl	8005764 <ptr_to_mem>
 8005e56:	4603      	mov	r3, r0
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005e5c:	8bfa      	ldrh	r2, [r7, #30]
 8005e5e:	8bbb      	ldrh	r3, [r7, #28]
 8005e60:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005e64:	429a      	cmp	r2, r3
 8005e66:	f4ff af44 	bcc.w	8005cf2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20004dbc 	.word	0x20004dbc
 8005e78:	0801121c 	.word	0x0801121c
 8005e7c:	080113c4 	.word	0x080113c4
 8005e80:	08011264 	.word	0x08011264
 8005e84:	20004db8 	.word	0x20004db8
 8005e88:	080113d8 	.word	0x080113d8
 8005e8c:	080113f4 	.word	0x080113f4
 8005e90:	08011424 	.word	0x08011424
 8005e94:	08011454 	.word	0x08011454

08005e98 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	3303      	adds	r3, #3
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e011      	b.n	8005ede <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	889b      	ldrh	r3, [r3, #4]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	88db      	ldrh	r3, [r3, #6]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	dbe7      	blt.n	8005eba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005efe:	2300      	movs	r3, #0
 8005f00:	80fb      	strh	r3, [r7, #6]
 8005f02:	e009      	b.n	8005f18 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	4a08      	ldr	r2, [pc, #32]	@ (8005f28 <memp_init+0x30>)
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ffc3 	bl	8005e98 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	3301      	adds	r3, #1
 8005f16:	80fb      	strh	r3, [r7, #6]
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d9f2      	bls.n	8005f04 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	08014524 	.word	0x08014524

08005f2c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d012      	beq.n	8005f68 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <do_memp_malloc_pool+0x38>
 8005f56:	4b07      	ldr	r3, [pc, #28]	@ (8005f74 <do_memp_malloc_pool+0x48>)
 8005f58:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005f5c:	4906      	ldr	r1, [pc, #24]	@ (8005f78 <do_memp_malloc_pool+0x4c>)
 8005f5e:	4807      	ldr	r0, [pc, #28]	@ (8005f7c <do_memp_malloc_pool+0x50>)
 8005f60:	f00a f8d0 	bl	8010104 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	e000      	b.n	8005f6a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	080114e0 	.word	0x080114e0
 8005f78:	08011510 	.word	0x08011510
 8005f7c:	08011534 	.word	0x08011534

08005f80 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <memp_malloc_pool+0x1c>
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <memp_malloc_pool+0x38>)
 8005f90:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005f94:	4909      	ldr	r1, [pc, #36]	@ (8005fbc <memp_malloc_pool+0x3c>)
 8005f96:	480a      	ldr	r0, [pc, #40]	@ (8005fc0 <memp_malloc_pool+0x40>)
 8005f98:	f00a f8b4 	bl	8010104 <iprintf>
  if (desc == NULL) {
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <memp_malloc_pool+0x26>
    return NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e003      	b.n	8005fae <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff ffc0 	bl	8005f2c <do_memp_malloc_pool>
 8005fac:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	080114e0 	.word	0x080114e0
 8005fbc:	0801155c 	.word	0x0801155c
 8005fc0:	08011534 	.word	0x08011534

08005fc4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d908      	bls.n	8005fe6 <memp_malloc+0x22>
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006000 <memp_malloc+0x3c>)
 8005fd6:	f240 1257 	movw	r2, #343	@ 0x157
 8005fda:	490a      	ldr	r1, [pc, #40]	@ (8006004 <memp_malloc+0x40>)
 8005fdc:	480a      	ldr	r0, [pc, #40]	@ (8006008 <memp_malloc+0x44>)
 8005fde:	f00a f891 	bl	8010104 <iprintf>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e008      	b.n	8005ff8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	4a08      	ldr	r2, [pc, #32]	@ (800600c <memp_malloc+0x48>)
 8005fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff ff9c 	bl	8005f2c <do_memp_malloc_pool>
 8005ff4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	080114e0 	.word	0x080114e0
 8006004:	08011570 	.word	0x08011570
 8006008:	08011534 	.word	0x08011534
 800600c:	08014524 	.word	0x08014524

08006010 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d006      	beq.n	8006032 <do_memp_free_pool+0x22>
 8006024:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <do_memp_free_pool+0x40>)
 8006026:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800602a:	490a      	ldr	r1, [pc, #40]	@ (8006054 <do_memp_free_pool+0x44>)
 800602c:	480a      	ldr	r0, [pc, #40]	@ (8006058 <do_memp_free_pool+0x48>)
 800602e:	f00a f869 	bl	8010104 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	080114e0 	.word	0x080114e0
 8006054:	08011590 	.word	0x08011590
 8006058:	08011534 	.word	0x08011534

0800605c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <memp_free_pool+0x1e>
 800606c:	4b0a      	ldr	r3, [pc, #40]	@ (8006098 <memp_free_pool+0x3c>)
 800606e:	f240 1295 	movw	r2, #405	@ 0x195
 8006072:	490a      	ldr	r1, [pc, #40]	@ (800609c <memp_free_pool+0x40>)
 8006074:	480a      	ldr	r0, [pc, #40]	@ (80060a0 <memp_free_pool+0x44>)
 8006076:	f00a f845 	bl	8010104 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <memp_free_pool+0x34>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d004      	beq.n	8006090 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff ffc1 	bl	8006010 <do_memp_free_pool>
 800608e:	e000      	b.n	8006092 <memp_free_pool+0x36>
    return;
 8006090:	bf00      	nop
}
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	080114e0 	.word	0x080114e0
 800609c:	0801155c 	.word	0x0801155c
 80060a0:	08011534 	.word	0x08011534

080060a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	6039      	str	r1, [r7, #0]
 80060ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d907      	bls.n	80060c6 <memp_free+0x22>
 80060b6:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <memp_free+0x44>)
 80060b8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80060bc:	490b      	ldr	r1, [pc, #44]	@ (80060ec <memp_free+0x48>)
 80060be:	480c      	ldr	r0, [pc, #48]	@ (80060f0 <memp_free+0x4c>)
 80060c0:	f00a f820 	bl	8010104 <iprintf>
 80060c4:	e00c      	b.n	80060e0 <memp_free+0x3c>

  if (mem == NULL) {
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	4a09      	ldr	r2, [pc, #36]	@ (80060f4 <memp_free+0x50>)
 80060d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff ff9a 	bl	8006010 <do_memp_free_pool>
 80060dc:	e000      	b.n	80060e0 <memp_free+0x3c>
    return;
 80060de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	080114e0 	.word	0x080114e0
 80060ec:	080115b0 	.word	0x080115b0
 80060f0:	08011534 	.word	0x08011534
 80060f4:	08014524 	.word	0x08014524

080060f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <netif_add+0x26>
 800611c:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <netif_add+0x270>)
 800611e:	f240 1227 	movw	r2, #295	@ 0x127
 8006122:	4996      	ldr	r1, [pc, #600]	@ (800637c <netif_add+0x274>)
 8006124:	4896      	ldr	r0, [pc, #600]	@ (8006380 <netif_add+0x278>)
 8006126:	f009 ffed 	bl	8010104 <iprintf>
 800612a:	2300      	movs	r3, #0
 800612c:	e14c      	b.n	80063c8 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <netif_add+0x3e>
 8006134:	4b90      	ldr	r3, [pc, #576]	@ (8006378 <netif_add+0x270>)
 8006136:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800613a:	4992      	ldr	r1, [pc, #584]	@ (8006384 <netif_add+0x27c>)
 800613c:	4890      	ldr	r0, [pc, #576]	@ (8006380 <netif_add+0x278>)
 800613e:	f009 ffe1 	bl	8010104 <iprintf>
 8006142:	2300      	movs	r3, #0
 8006144:	e140      	b.n	80063c8 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800614c:	4b8e      	ldr	r3, [pc, #568]	@ (8006388 <netif_add+0x280>)
 800614e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006156:	4b8c      	ldr	r3, [pc, #560]	@ (8006388 <netif_add+0x280>)
 8006158:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006160:	4b89      	ldr	r3, [pc, #548]	@ (8006388 <netif_add+0x280>)
 8006162:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a84      	ldr	r2, [pc, #528]	@ (800638c <netif_add+0x284>)
 800617a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006196:	4b7e      	ldr	r3, [pc, #504]	@ (8006390 <netif_add+0x288>)
 8006198:	781a      	ldrb	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f9f5 	bl	800659c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	4798      	blx	r3
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <netif_add+0xba>
    return NULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	e102      	b.n	80063c8 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061c8:	2bff      	cmp	r3, #255	@ 0xff
 80061ca:	d103      	bne.n	80061d4 <netif_add+0xcc>
        netif->num = 0;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80061d8:	4b6e      	ldr	r3, [pc, #440]	@ (8006394 <netif_add+0x28c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e02b      	b.n	8006238 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d106      	bne.n	80061f6 <netif_add+0xee>
 80061e8:	4b63      	ldr	r3, [pc, #396]	@ (8006378 <netif_add+0x270>)
 80061ea:	f240 128b 	movw	r2, #395	@ 0x18b
 80061ee:	496a      	ldr	r1, [pc, #424]	@ (8006398 <netif_add+0x290>)
 80061f0:	4863      	ldr	r0, [pc, #396]	@ (8006380 <netif_add+0x278>)
 80061f2:	f009 ff87 	bl	8010104 <iprintf>
        num_netifs++;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3301      	adds	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2bff      	cmp	r3, #255	@ 0xff
 8006200:	dd06      	ble.n	8006210 <netif_add+0x108>
 8006202:	4b5d      	ldr	r3, [pc, #372]	@ (8006378 <netif_add+0x270>)
 8006204:	f240 128d 	movw	r2, #397	@ 0x18d
 8006208:	4964      	ldr	r1, [pc, #400]	@ (800639c <netif_add+0x294>)
 800620a:	485d      	ldr	r0, [pc, #372]	@ (8006380 <netif_add+0x278>)
 800620c:	f009 ff7a 	bl	8010104 <iprintf>
        if (netif2->num == netif->num) {
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800621c:	429a      	cmp	r2, r3
 800621e:	d108      	bne.n	8006232 <netif_add+0x12a>
          netif->num++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006226:	3301      	adds	r3, #1
 8006228:	b2da      	uxtb	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006230:	e005      	b.n	800623e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1d0      	bne.n	80061e0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1be      	bne.n	80061c2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800624a:	2bfe      	cmp	r3, #254	@ 0xfe
 800624c:	d103      	bne.n	8006256 <netif_add+0x14e>
    netif_num = 0;
 800624e:	4b50      	ldr	r3, [pc, #320]	@ (8006390 <netif_add+0x288>)
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e006      	b.n	8006264 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800625c:	3301      	adds	r3, #1
 800625e:	b2da      	uxtb	r2, r3
 8006260:	4b4b      	ldr	r3, [pc, #300]	@ (8006390 <netif_add+0x288>)
 8006262:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006264:	4b4b      	ldr	r3, [pc, #300]	@ (8006394 <netif_add+0x28c>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800626c:	4a49      	ldr	r2, [pc, #292]	@ (8006394 <netif_add+0x28c>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006278:	4619      	mov	r1, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006280:	461a      	mov	r2, r3
 8006282:	4847      	ldr	r0, [pc, #284]	@ (80063a0 <netif_add+0x298>)
 8006284:	f009 ff3e 	bl	8010104 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8006288:	4846      	ldr	r0, [pc, #280]	@ (80063a4 <netif_add+0x29c>)
 800628a:	f009 ff3b 	bl	8010104 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <netif_add+0x194>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	4619      	mov	r1, r3
 800629a:	e000      	b.n	800629e <netif_add+0x196>
 800629c:	2100      	movs	r1, #0
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <netif_add+0x1a6>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	3301      	adds	r3, #1
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	e000      	b.n	80062b0 <netif_add+0x1a8>
 80062ae:	2200      	movs	r2, #0
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <netif_add+0x1b8>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	3302      	adds	r3, #2
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	e000      	b.n	80062c2 <netif_add+0x1ba>
 80062c0:	2000      	movs	r0, #0
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <netif_add+0x1c8>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3303      	adds	r3, #3
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	e000      	b.n	80062d2 <netif_add+0x1ca>
 80062d0:	2300      	movs	r3, #0
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	4603      	mov	r3, r0
 80062d6:	4834      	ldr	r0, [pc, #208]	@ (80063a8 <netif_add+0x2a0>)
 80062d8:	f009 ff14 	bl	8010104 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 80062dc:	4833      	ldr	r0, [pc, #204]	@ (80063ac <netif_add+0x2a4>)
 80062de:	f009 ff11 	bl	8010104 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <netif_add+0x1e8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	e000      	b.n	80062f2 <netif_add+0x1ea>
 80062f0:	2100      	movs	r1, #0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <netif_add+0x1fa>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3301      	adds	r3, #1
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	e000      	b.n	8006304 <netif_add+0x1fc>
 8006302:	2200      	movs	r2, #0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <netif_add+0x20c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3302      	adds	r3, #2
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	e000      	b.n	8006316 <netif_add+0x20e>
 8006314:	2000      	movs	r0, #0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <netif_add+0x21c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3303      	adds	r3, #3
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	e000      	b.n	8006326 <netif_add+0x21e>
 8006324:	2300      	movs	r3, #0
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	481f      	ldr	r0, [pc, #124]	@ (80063a8 <netif_add+0x2a0>)
 800632c:	f009 feea 	bl	8010104 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8006330:	481f      	ldr	r0, [pc, #124]	@ (80063b0 <netif_add+0x2a8>)
 8006332:	f009 fee7 	bl	8010104 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <netif_add+0x23c>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	e000      	b.n	8006346 <netif_add+0x23e>
 8006344:	2100      	movs	r1, #0
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <netif_add+0x24e>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	e000      	b.n	8006358 <netif_add+0x250>
 8006356:	2200      	movs	r2, #0
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <netif_add+0x260>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	3302      	adds	r3, #2
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	e000      	b.n	800636a <netif_add+0x262>
 8006368:	2000      	movs	r0, #0
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d021      	beq.n	80063b4 <netif_add+0x2ac>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	3303      	adds	r3, #3
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	e01e      	b.n	80063b6 <netif_add+0x2ae>
 8006378:	080115cc 	.word	0x080115cc
 800637c:	08011660 	.word	0x08011660
 8006380:	0801161c 	.word	0x0801161c
 8006384:	0801167c 	.word	0x0801167c
 8006388:	08014588 	.word	0x08014588
 800638c:	0800689f 	.word	0x0800689f
 8006390:	20007cf4 	.word	0x20007cf4
 8006394:	20007cec 	.word	0x20007cec
 8006398:	080116a0 	.word	0x080116a0
 800639c:	080116b4 	.word	0x080116b4
 80063a0:	080116e4 	.word	0x080116e4
 80063a4:	08011704 	.word	0x08011704
 80063a8:	0801170c 	.word	0x0801170c
 80063ac:	0801171c 	.word	0x0801171c
 80063b0:	08011728 	.word	0x08011728
 80063b4:	2300      	movs	r3, #0
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	4603      	mov	r3, r0
 80063ba:	4805      	ldr	r0, [pc, #20]	@ (80063d0 <netif_add+0x2c8>)
 80063bc:	f009 fea2 	bl	8010104 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 80063c0:	200a      	movs	r0, #10
 80063c2:	f009 feb1 	bl	8010128 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	0801170c 	.word	0x0801170c

080063d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f002 fbb9 	bl	8008b58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f007 f927 	bl	800d63c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <netif_do_set_ipaddr+0x20>
 800640a:	4b1e      	ldr	r3, [pc, #120]	@ (8006484 <netif_do_set_ipaddr+0x8c>)
 800640c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006410:	491d      	ldr	r1, [pc, #116]	@ (8006488 <netif_do_set_ipaddr+0x90>)
 8006412:	481e      	ldr	r0, [pc, #120]	@ (800648c <netif_do_set_ipaddr+0x94>)
 8006414:	f009 fe76 	bl	8010104 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <netif_do_set_ipaddr+0x34>
 800641e:	4b19      	ldr	r3, [pc, #100]	@ (8006484 <netif_do_set_ipaddr+0x8c>)
 8006420:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006424:	4918      	ldr	r1, [pc, #96]	@ (8006488 <netif_do_set_ipaddr+0x90>)
 8006426:	4819      	ldr	r0, [pc, #100]	@ (800648c <netif_do_set_ipaddr+0x94>)
 8006428:	f009 fe6c 	bl	8010104 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3304      	adds	r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d01f      	beq.n	800647a <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3304      	adds	r3, #4
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800644a:	4811      	ldr	r0, [pc, #68]	@ (8006490 <netif_do_set_ipaddr+0x98>)
 800644c:	f009 feca 	bl	80101e4 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006450:	f107 0314 	add.w	r3, r7, #20
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff ffbc 	bl	80063d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <netif_do_set_ipaddr+0x70>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	e000      	b.n	800646a <netif_do_set_ipaddr+0x72>
 8006468:	2300      	movs	r3, #0
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800646e:	2101      	movs	r1, #1
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f92d 	bl	80066d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	080115cc 	.word	0x080115cc
 8006488:	08011730 	.word	0x08011730
 800648c:	0801161c 	.word	0x0801161c
 8006490:	08011740 	.word	0x08011740

08006494 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af04      	add	r7, sp, #16
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3308      	adds	r3, #8
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d02d      	beq.n	800650a <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <netif_do_set_netmask+0x26>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	e000      	b.n	80064bc <netif_do_set_netmask+0x28>
 80064ba:	2300      	movs	r3, #0
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80064c6:	4618      	mov	r0, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80064ce:	461c      	mov	r4, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3308      	adds	r3, #8
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	461d      	mov	r5, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3308      	adds	r3, #8
 80064dc:	3301      	adds	r3, #1
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3308      	adds	r3, #8
 80064e6:	3302      	adds	r3, #2
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3308      	adds	r3, #8
 80064f0:	3303      	adds	r3, #3
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	9302      	str	r3, [sp, #8]
 80064f6:	9101      	str	r1, [sp, #4]
 80064f8:	9200      	str	r2, [sp, #0]
 80064fa:	462b      	mov	r3, r5
 80064fc:	4622      	mov	r2, r4
 80064fe:	4601      	mov	r1, r0
 8006500:	4804      	ldr	r0, [pc, #16]	@ (8006514 <netif_do_set_netmask+0x80>)
 8006502:	f009 fdff 	bl	8010104 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bdb0      	pop	{r4, r5, r7, pc}
 8006514:	08011790 	.word	0x08011790

08006518 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006518:	b5b0      	push	{r4, r5, r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af04      	add	r7, sp, #16
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	330c      	adds	r3, #12
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d02d      	beq.n	800658e <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <netif_do_set_gw+0x26>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	e000      	b.n	8006540 <netif_do_set_gw+0x28>
 800653e:	2300      	movs	r3, #0
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800654a:	4618      	mov	r0, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006552:	461c      	mov	r4, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	330c      	adds	r3, #12
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	461d      	mov	r5, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	330c      	adds	r3, #12
 8006560:	3301      	adds	r3, #1
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	330c      	adds	r3, #12
 800656a:	3302      	adds	r3, #2
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	4619      	mov	r1, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	330c      	adds	r3, #12
 8006574:	3303      	adds	r3, #3
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	9302      	str	r3, [sp, #8]
 800657a:	9101      	str	r1, [sp, #4]
 800657c:	9200      	str	r2, [sp, #0]
 800657e:	462b      	mov	r3, r5
 8006580:	4622      	mov	r2, r4
 8006582:	4601      	mov	r1, r0
 8006584:	4804      	ldr	r0, [pc, #16]	@ (8006598 <netif_do_set_gw+0x80>)
 8006586:	f009 fdbd 	bl	8010104 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bdb0      	pop	{r4, r5, r7, pc}
 8006598:	080117f0 	.word	0x080117f0

0800659c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80065b8:	4b1c      	ldr	r3, [pc, #112]	@ (800662c <netif_set_addr+0x90>)
 80065ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80065c2:	4b1a      	ldr	r3, [pc, #104]	@ (800662c <netif_set_addr+0x90>)
 80065c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80065cc:	4b17      	ldr	r3, [pc, #92]	@ (800662c <netif_set_addr+0x90>)
 80065ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <netif_set_addr+0x42>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <netif_set_addr+0x46>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <netif_set_addr+0x48>
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80065ec:	f107 0310 	add.w	r3, r7, #16
 80065f0:	461a      	mov	r2, r3
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff feff 	bl	80063f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff ff48 	bl	8006494 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff ff85 	bl	8006518 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006614:	f107 0310 	add.w	r3, r7, #16
 8006618:	461a      	mov	r2, r3
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff feeb 	bl	80063f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006622:	bf00      	nop
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	08014588 	.word	0x08014588

08006630 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006638:	4a0d      	ldr	r2, [pc, #52]	@ (8006670 <netif_set_default+0x40>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <netif_set_default+0x1e>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800664a:	4619      	mov	r1, r3
 800664c:	e000      	b.n	8006650 <netif_set_default+0x20>
 800664e:	2127      	movs	r1, #39	@ 0x27
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <netif_set_default+0x2e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800665c:	e000      	b.n	8006660 <netif_set_default+0x30>
 800665e:	2327      	movs	r3, #39	@ 0x27
 8006660:	461a      	mov	r2, r3
 8006662:	4804      	ldr	r0, [pc, #16]	@ (8006674 <netif_set_default+0x44>)
 8006664:	f009 fd4e 	bl	8010104 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20007cf0 	.word	0x20007cf0
 8006674:	08011864 	.word	0x08011864

08006678 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d107      	bne.n	8006696 <netif_set_up+0x1e>
 8006686:	4b0f      	ldr	r3, [pc, #60]	@ (80066c4 <netif_set_up+0x4c>)
 8006688:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800668c:	490e      	ldr	r1, [pc, #56]	@ (80066c8 <netif_set_up+0x50>)
 800668e:	480f      	ldr	r0, [pc, #60]	@ (80066cc <netif_set_up+0x54>)
 8006690:	f009 fd38 	bl	8010104 <iprintf>
 8006694:	e013      	b.n	80066be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10c      	bne.n	80066be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80066b6:	2103      	movs	r1, #3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f809 	bl	80066d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	080115cc 	.word	0x080115cc
 80066c8:	0801188c 	.word	0x0801188c
 80066cc:	0801161c 	.word	0x0801161c

080066d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <netif_issue_reports+0x20>
 80066e2:	4b18      	ldr	r3, [pc, #96]	@ (8006744 <netif_issue_reports+0x74>)
 80066e4:	f240 326d 	movw	r2, #877	@ 0x36d
 80066e8:	4917      	ldr	r1, [pc, #92]	@ (8006748 <netif_issue_reports+0x78>)
 80066ea:	4818      	ldr	r0, [pc, #96]	@ (800674c <netif_issue_reports+0x7c>)
 80066ec:	f009 fd0a 	bl	8010104 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01e      	beq.n	800673c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006704:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006708:	2b00      	cmp	r3, #0
 800670a:	d017      	beq.n	800673c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3304      	adds	r3, #4
 800671a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f007 ff5d 	bl	800e5f4 <etharp_request>
 800673a:	e000      	b.n	800673e <netif_issue_reports+0x6e>
    return;
 800673c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	080115cc 	.word	0x080115cc
 8006748:	080118a8 	.word	0x080118a8
 800674c:	0801161c 	.word	0x0801161c

08006750 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <netif_set_down+0x1e>
 800675e:	4b12      	ldr	r3, [pc, #72]	@ (80067a8 <netif_set_down+0x58>)
 8006760:	f240 329b 	movw	r2, #923	@ 0x39b
 8006764:	4911      	ldr	r1, [pc, #68]	@ (80067ac <netif_set_down+0x5c>)
 8006766:	4812      	ldr	r0, [pc, #72]	@ (80067b0 <netif_set_down+0x60>)
 8006768:	f009 fccc 	bl	8010104 <iprintf>
 800676c:	e019      	b.n	80067a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d012      	beq.n	80067a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f007 fae7 	bl	800dd70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	080115cc 	.word	0x080115cc
 80067ac:	080118cc 	.word	0x080118cc
 80067b0:	0801161c 	.word	0x0801161c

080067b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <netif_set_link_up+0x1e>
 80067c2:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <netif_set_link_up+0x5c>)
 80067c4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80067c8:	4912      	ldr	r1, [pc, #72]	@ (8006814 <netif_set_link_up+0x60>)
 80067ca:	4813      	ldr	r0, [pc, #76]	@ (8006818 <netif_set_link_up+0x64>)
 80067cc:	f009 fc9a 	bl	8010104 <iprintf>
 80067d0:	e01b      	b.n	800680a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d114      	bne.n	800680a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80067e6:	f043 0304 	orr.w	r3, r3, #4
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80067f2:	2103      	movs	r1, #3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff6b 	bl	80066d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <netif_set_link_up+0x56>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	080115cc 	.word	0x080115cc
 8006814:	080118ec 	.word	0x080118ec
 8006818:	0801161c 	.word	0x0801161c

0800681c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <netif_set_link_down+0x1e>
 800682a:	4b11      	ldr	r3, [pc, #68]	@ (8006870 <netif_set_link_down+0x54>)
 800682c:	f240 4206 	movw	r2, #1030	@ 0x406
 8006830:	4910      	ldr	r1, [pc, #64]	@ (8006874 <netif_set_link_down+0x58>)
 8006832:	4811      	ldr	r0, [pc, #68]	@ (8006878 <netif_set_link_down+0x5c>)
 8006834:	f009 fc66 	bl	8010104 <iprintf>
 8006838:	e017      	b.n	800686a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	d010      	beq.n	800686a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800684e:	f023 0304 	bic.w	r3, r3, #4
 8006852:	b2da      	uxtb	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <netif_set_link_down+0x4e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	080115cc 	.word	0x080115cc
 8006874:	08011910 	.word	0x08011910
 8006878:	0801161c 	.word	0x0801161c

0800687c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	61da      	str	r2, [r3, #28]
  }
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80068aa:	f06f 030b 	mvn.w	r3, #11
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d013      	beq.n	80068f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80068cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <netif_get_by_index+0x48>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e00c      	b.n	80068ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068da:	3301      	adds	r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	79fa      	ldrb	r2, [r7, #7]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d101      	bne.n	80068e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	e006      	b.n	80068f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1ef      	bne.n	80068d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20007cec 	.word	0x20007cec

08006908 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800690e:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <pbuf_free_ooseq+0x38>)
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006914:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <pbuf_free_ooseq+0x3c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	607b      	str	r3, [r7, #4]
 800691a:	e00a      	b.n	8006932 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f002 f955 	bl	8008bd4 <tcp_free_ooseq>
      return;
 800692a:	e005      	b.n	8006938 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f1      	bne.n	800691c <pbuf_free_ooseq+0x14>
    }
  }
}
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20007cf5 	.word	0x20007cf5
 8006944:	20007d04 	.word	0x20007d04

08006948 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800694c:	4b03      	ldr	r3, [pc, #12]	@ (800695c <pbuf_pool_is_empty+0x14>)
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006952:	bf00      	nop
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20007cf5 	.word	0x20007cf5

08006960 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4611      	mov	r1, r2
 800696c:	461a      	mov	r2, r3
 800696e:	460b      	mov	r3, r1
 8006970:	80fb      	strh	r3, [r7, #6]
 8006972:	4613      	mov	r3, r2
 8006974:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88ba      	ldrh	r2, [r7, #4]
 800698c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800698e:	8b3b      	ldrh	r3, [r7, #24]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	7f3a      	ldrb	r2, [r7, #28]
 800699a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	73da      	strb	r2, [r3, #15]
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08c      	sub	sp, #48	@ 0x30
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	4603      	mov	r3, r0
 80069bc:	71fb      	strb	r3, [r7, #7]
 80069be:	460b      	mov	r3, r1
 80069c0:	80bb      	strh	r3, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80069ca:	887b      	ldrh	r3, [r7, #2]
 80069cc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80069d0:	d07f      	beq.n	8006ad2 <pbuf_alloc+0x11e>
 80069d2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80069d6:	f300 80c8 	bgt.w	8006b6a <pbuf_alloc+0x1b6>
 80069da:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80069de:	d010      	beq.n	8006a02 <pbuf_alloc+0x4e>
 80069e0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80069e4:	f300 80c1 	bgt.w	8006b6a <pbuf_alloc+0x1b6>
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d002      	beq.n	80069f2 <pbuf_alloc+0x3e>
 80069ec:	2b41      	cmp	r3, #65	@ 0x41
 80069ee:	f040 80bc 	bne.w	8006b6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	88bb      	ldrh	r3, [r7, #4]
 80069f6:	4619      	mov	r1, r3
 80069f8:	2000      	movs	r0, #0
 80069fa:	f000 f8d1 	bl	8006ba0 <pbuf_alloc_reference>
 80069fe:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006a00:	e0bd      	b.n	8006b7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006a0a:	88bb      	ldrh	r3, [r7, #4]
 8006a0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006a0e:	2008      	movs	r0, #8
 8006a10:	f7ff fad8 	bl	8005fc4 <memp_malloc>
 8006a14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006a1c:	f7ff ff94 	bl	8006948 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <pbuf_alloc+0x78>
            pbuf_free(p);
 8006a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a28:	f000 faa8 	bl	8006f7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e0a7      	b.n	8006b80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006a30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a32:	3303      	adds	r3, #3
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8b7a      	ldrh	r2, [r7, #26]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	bf28      	it	cs
 8006a48:	4613      	movcs	r3, r2
 8006a4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006a4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a4e:	3310      	adds	r3, #16
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	3303      	adds	r3, #3
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	89f9      	ldrh	r1, [r7, #14]
 8006a5e:	8b7a      	ldrh	r2, [r7, #26]
 8006a60:	2300      	movs	r3, #0
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	6938      	ldr	r0, [r7, #16]
 8006a6e:	f7ff ff77 	bl	8006960 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d006      	beq.n	8006a8c <pbuf_alloc+0xd8>
 8006a7e:	4b42      	ldr	r3, [pc, #264]	@ (8006b88 <pbuf_alloc+0x1d4>)
 8006a80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a84:	4941      	ldr	r1, [pc, #260]	@ (8006b8c <pbuf_alloc+0x1d8>)
 8006a86:	4842      	ldr	r0, [pc, #264]	@ (8006b90 <pbuf_alloc+0x1dc>)
 8006a88:	f009 fb3c 	bl	8010104 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006a8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a8e:	3303      	adds	r3, #3
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006a98:	d106      	bne.n	8006aa8 <pbuf_alloc+0xf4>
 8006a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b88 <pbuf_alloc+0x1d4>)
 8006a9c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006aa0:	493c      	ldr	r1, [pc, #240]	@ (8006b94 <pbuf_alloc+0x1e0>)
 8006aa2:	483b      	ldr	r0, [pc, #236]	@ (8006b90 <pbuf_alloc+0x1dc>)
 8006aa4:	f009 fb2e 	bl	8010104 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d102      	bne.n	8006ab4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab2:	e002      	b.n	8006aba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006abe:	8b7a      	ldrh	r2, [r7, #26]
 8006ac0:	89fb      	ldrh	r3, [r7, #14]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006aca:	8b7b      	ldrh	r3, [r7, #26]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d19e      	bne.n	8006a0e <pbuf_alloc+0x5a>
      break;
 8006ad0:	e055      	b.n	8006b7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006ad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ad4:	3303      	adds	r3, #3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f023 0303 	bic.w	r3, r3, #3
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	88bb      	ldrh	r3, [r7, #4]
 8006ae0:	3303      	adds	r3, #3
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	f023 0303 	bic.w	r3, r3, #3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006aee:	8b3b      	ldrh	r3, [r7, #24]
 8006af0:	3310      	adds	r3, #16
 8006af2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006af4:	8b3a      	ldrh	r2, [r7, #24]
 8006af6:	88bb      	ldrh	r3, [r7, #4]
 8006af8:	3303      	adds	r3, #3
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d306      	bcc.n	8006b10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006b02:	8afa      	ldrh	r2, [r7, #22]
 8006b04:	88bb      	ldrh	r3, [r7, #4]
 8006b06:	3303      	adds	r3, #3
 8006b08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d201      	bcs.n	8006b14 <pbuf_alloc+0x160>
        return NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e035      	b.n	8006b80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006b14:	8afb      	ldrh	r3, [r7, #22]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff f8c4 	bl	8005ca4 <mem_malloc>
 8006b1c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <pbuf_alloc+0x174>
        return NULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e02b      	b.n	8006b80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006b28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b2a:	3310      	adds	r3, #16
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2e:	4413      	add	r3, r2
 8006b30:	3303      	adds	r3, #3
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	4618      	mov	r0, r3
 8006b38:	88b9      	ldrh	r1, [r7, #4]
 8006b3a:	88ba      	ldrh	r2, [r7, #4]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	460b      	mov	r3, r1
 8006b46:	4601      	mov	r1, r0
 8006b48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b4a:	f7ff ff09 	bl	8006960 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d010      	beq.n	8006b7c <pbuf_alloc+0x1c8>
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <pbuf_alloc+0x1d4>)
 8006b5c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006b60:	490d      	ldr	r1, [pc, #52]	@ (8006b98 <pbuf_alloc+0x1e4>)
 8006b62:	480b      	ldr	r0, [pc, #44]	@ (8006b90 <pbuf_alloc+0x1dc>)
 8006b64:	f009 face 	bl	8010104 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006b68:	e008      	b.n	8006b7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006b6a:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <pbuf_alloc+0x1d4>)
 8006b6c:	f240 1227 	movw	r2, #295	@ 0x127
 8006b70:	490a      	ldr	r1, [pc, #40]	@ (8006b9c <pbuf_alloc+0x1e8>)
 8006b72:	4807      	ldr	r0, [pc, #28]	@ (8006b90 <pbuf_alloc+0x1dc>)
 8006b74:	f009 fac6 	bl	8010104 <iprintf>
      return NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e001      	b.n	8006b80 <pbuf_alloc+0x1cc>
      break;
 8006b7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3728      	adds	r7, #40	@ 0x28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	0801196c 	.word	0x0801196c
 8006b8c:	0801199c 	.word	0x0801199c
 8006b90:	080119cc 	.word	0x080119cc
 8006b94:	080119f4 	.word	0x080119f4
 8006b98:	08011a28 	.word	0x08011a28
 8006b9c:	08011a54 	.word	0x08011a54

08006ba0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	807b      	strh	r3, [r7, #2]
 8006bac:	4613      	mov	r3, r2
 8006bae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006bb0:	883b      	ldrh	r3, [r7, #0]
 8006bb2:	2b41      	cmp	r3, #65	@ 0x41
 8006bb4:	d009      	beq.n	8006bca <pbuf_alloc_reference+0x2a>
 8006bb6:	883b      	ldrh	r3, [r7, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d006      	beq.n	8006bca <pbuf_alloc_reference+0x2a>
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006bfc <pbuf_alloc_reference+0x5c>)
 8006bbe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006bc2:	490f      	ldr	r1, [pc, #60]	@ (8006c00 <pbuf_alloc_reference+0x60>)
 8006bc4:	480f      	ldr	r0, [pc, #60]	@ (8006c04 <pbuf_alloc_reference+0x64>)
 8006bc6:	f009 fa9d 	bl	8010104 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006bca:	2007      	movs	r0, #7
 8006bcc:	f7ff f9fa 	bl	8005fc4 <memp_malloc>
 8006bd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e00b      	b.n	8006bf4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006bdc:	8879      	ldrh	r1, [r7, #2]
 8006bde:	887a      	ldrh	r2, [r7, #2]
 8006be0:	2300      	movs	r3, #0
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	883b      	ldrh	r3, [r7, #0]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	460b      	mov	r3, r1
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff feb7 	bl	8006960 <pbuf_init_alloced_pbuf>
  return p;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	0801196c 	.word	0x0801196c
 8006c00:	08011a70 	.word	0x08011a70
 8006c04:	080119cc 	.word	0x080119cc

08006c08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	607b      	str	r3, [r7, #4]
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
 8006c14:	460b      	mov	r3, r1
 8006c16:	81bb      	strh	r3, [r7, #12]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006c20:	8a7b      	ldrh	r3, [r7, #18]
 8006c22:	3303      	adds	r3, #3
 8006c24:	f023 0203 	bic.w	r2, r3, #3
 8006c28:	89bb      	ldrh	r3, [r7, #12]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d901      	bls.n	8006c36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e018      	b.n	8006c68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006c3c:	8a7b      	ldrh	r3, [r7, #18]
 8006c3e:	3303      	adds	r3, #3
 8006c40:	f023 0303 	bic.w	r3, r3, #3
 8006c44:	6a3a      	ldr	r2, [r7, #32]
 8006c46:	4413      	add	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	e001      	b.n	8006c50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	89b9      	ldrh	r1, [r7, #12]
 8006c54:	89ba      	ldrh	r2, [r7, #12]
 8006c56:	2302      	movs	r3, #2
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	897b      	ldrh	r3, [r7, #10]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	f7ff fe7d 	bl	8006960 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006c66:	687b      	ldr	r3, [r7, #4]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <pbuf_realloc+0x20>
 8006c82:	4b3a      	ldr	r3, [pc, #232]	@ (8006d6c <pbuf_realloc+0xfc>)
 8006c84:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006c88:	4939      	ldr	r1, [pc, #228]	@ (8006d70 <pbuf_realloc+0x100>)
 8006c8a:	483a      	ldr	r0, [pc, #232]	@ (8006d74 <pbuf_realloc+0x104>)
 8006c8c:	f009 fa3a 	bl	8010104 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	891b      	ldrh	r3, [r3, #8]
 8006c94:	887a      	ldrh	r2, [r7, #2]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d263      	bcs.n	8006d62 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	891a      	ldrh	r2, [r3, #8]
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006ca4:	887b      	ldrh	r3, [r7, #2]
 8006ca6:	817b      	strh	r3, [r7, #10]
  q = p;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006cac:	e018      	b.n	8006ce0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	895b      	ldrh	r3, [r3, #10]
 8006cb2:	897a      	ldrh	r2, [r7, #10]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	891a      	ldrh	r2, [r3, #8]
 8006cbc:	893b      	ldrh	r3, [r7, #8]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <pbuf_realloc+0x70>
 8006cd2:	4b26      	ldr	r3, [pc, #152]	@ (8006d6c <pbuf_realloc+0xfc>)
 8006cd4:	f240 12af 	movw	r2, #431	@ 0x1af
 8006cd8:	4927      	ldr	r1, [pc, #156]	@ (8006d78 <pbuf_realloc+0x108>)
 8006cda:	4826      	ldr	r0, [pc, #152]	@ (8006d74 <pbuf_realloc+0x104>)
 8006cdc:	f009 fa12 	bl	8010104 <iprintf>
  while (rem_len > q->len) {
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	895b      	ldrh	r3, [r3, #10]
 8006ce4:	897a      	ldrh	r2, [r7, #10]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d8e1      	bhi.n	8006cae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	7b1b      	ldrb	r3, [r3, #12]
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d121      	bne.n	8006d3a <pbuf_realloc+0xca>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	895b      	ldrh	r3, [r3, #10]
 8006cfa:	897a      	ldrh	r2, [r7, #10]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d01c      	beq.n	8006d3a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	7b5b      	ldrb	r3, [r3, #13]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d116      	bne.n	8006d3a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	897b      	ldrh	r3, [r7, #10]
 8006d18:	4413      	add	r3, r2
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7fe fec4 	bl	8005aac <mem_trim>
 8006d24:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <pbuf_realloc+0xca>
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d6c <pbuf_realloc+0xfc>)
 8006d2e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8006d32:	4912      	ldr	r1, [pc, #72]	@ (8006d7c <pbuf_realloc+0x10c>)
 8006d34:	480f      	ldr	r0, [pc, #60]	@ (8006d74 <pbuf_realloc+0x104>)
 8006d36:	f009 f9e5 	bl	8010104 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	897a      	ldrh	r2, [r7, #10]
 8006d3e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	895a      	ldrh	r2, [r3, #10]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f911 	bl	8006f7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e000      	b.n	8006d64 <pbuf_realloc+0xf4>
    return;
 8006d62:	bf00      	nop

}
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	0801196c 	.word	0x0801196c
 8006d70:	08011a84 	.word	0x08011a84
 8006d74:	080119cc 	.word	0x080119cc
 8006d78:	08011a9c 	.word	0x08011a9c
 8006d7c:	08011ab4 	.word	0x08011ab4

08006d80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <pbuf_add_header_impl+0x22>
 8006d94:	4b2b      	ldr	r3, [pc, #172]	@ (8006e44 <pbuf_add_header_impl+0xc4>)
 8006d96:	f240 12df 	movw	r2, #479	@ 0x1df
 8006d9a:	492b      	ldr	r1, [pc, #172]	@ (8006e48 <pbuf_add_header_impl+0xc8>)
 8006d9c:	482b      	ldr	r0, [pc, #172]	@ (8006e4c <pbuf_add_header_impl+0xcc>)
 8006d9e:	f009 f9b1 	bl	8010104 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <pbuf_add_header_impl+0x30>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dae:	d301      	bcc.n	8006db4 <pbuf_add_header_impl+0x34>
    return 1;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e043      	b.n	8006e3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <pbuf_add_header_impl+0x3e>
    return 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e03e      	b.n	8006e3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	891a      	ldrh	r2, [r3, #8]
 8006dc6:	8a7b      	ldrh	r3, [r7, #18]
 8006dc8:	4413      	add	r3, r2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8a7a      	ldrh	r2, [r7, #18]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d901      	bls.n	8006dd6 <pbuf_add_header_impl+0x56>
    return 1;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e032      	b.n	8006e3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006ddc:	8a3b      	ldrh	r3, [r7, #16]
 8006dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00c      	beq.n	8006e00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	425b      	negs	r3, r3
 8006dee:	4413      	add	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3310      	adds	r3, #16
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d20d      	bcs.n	8006e18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e01d      	b.n	8006e3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	4413      	add	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e001      	b.n	8006e18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e011      	b.n	8006e3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	895a      	ldrh	r2, [r3, #10]
 8006e22:	8a7b      	ldrh	r3, [r7, #18]
 8006e24:	4413      	add	r3, r2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	891a      	ldrh	r2, [r3, #8]
 8006e30:	8a7b      	ldrh	r3, [r7, #18]
 8006e32:	4413      	add	r3, r2
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	811a      	strh	r2, [r3, #8]


  return 0;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	0801196c 	.word	0x0801196c
 8006e48:	08011ad0 	.word	0x08011ad0
 8006e4c:	080119cc 	.word	0x080119cc

08006e50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff ff8e 	bl	8006d80 <pbuf_add_header_impl>
 8006e64:	4603      	mov	r3, r0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <pbuf_remove_header+0x1e>
 8006e80:	4b20      	ldr	r3, [pc, #128]	@ (8006f04 <pbuf_remove_header+0x94>)
 8006e82:	f240 224b 	movw	r2, #587	@ 0x24b
 8006e86:	4920      	ldr	r1, [pc, #128]	@ (8006f08 <pbuf_remove_header+0x98>)
 8006e88:	4820      	ldr	r0, [pc, #128]	@ (8006f0c <pbuf_remove_header+0x9c>)
 8006e8a:	f009 f93b 	bl	8010104 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <pbuf_remove_header+0x2c>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e9a:	d301      	bcc.n	8006ea0 <pbuf_remove_header+0x30>
    return 1;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e02c      	b.n	8006efa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <pbuf_remove_header+0x3a>
    return 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e027      	b.n	8006efa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	895b      	ldrh	r3, [r3, #10]
 8006eb2:	89fa      	ldrh	r2, [r7, #14]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d908      	bls.n	8006eca <pbuf_remove_header+0x5a>
 8006eb8:	4b12      	ldr	r3, [pc, #72]	@ (8006f04 <pbuf_remove_header+0x94>)
 8006eba:	f240 2255 	movw	r2, #597	@ 0x255
 8006ebe:	4914      	ldr	r1, [pc, #80]	@ (8006f10 <pbuf_remove_header+0xa0>)
 8006ec0:	4812      	ldr	r0, [pc, #72]	@ (8006f0c <pbuf_remove_header+0x9c>)
 8006ec2:	f009 f91f 	bl	8010104 <iprintf>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e017      	b.n	8006efa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	895a      	ldrh	r2, [r3, #10]
 8006ee0:	89fb      	ldrh	r3, [r7, #14]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	891a      	ldrh	r2, [r3, #8]
 8006eee:	89fb      	ldrh	r3, [r7, #14]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	0801196c 	.word	0x0801196c
 8006f08:	08011ad0 	.word	0x08011ad0
 8006f0c:	080119cc 	.word	0x080119cc
 8006f10:	08011adc 	.word	0x08011adc

08006f14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
 8006f20:	4613      	mov	r3, r2
 8006f22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006f24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	da08      	bge.n	8006f3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006f2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f30:	425b      	negs	r3, r3
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ff9b 	bl	8006e70 <pbuf_remove_header>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	e007      	b.n	8006f4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006f3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f42:	787a      	ldrb	r2, [r7, #1]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff ff1a 	bl	8006d80 <pbuf_add_header_impl>
 8006f4c:	4603      	mov	r3, r0
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006f62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f66:	2201      	movs	r2, #1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff ffd2 	bl	8006f14 <pbuf_header_impl>
 8006f70:	4603      	mov	r3, r0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <pbuf_free+0x22>
 8006f90:	4b38      	ldr	r3, [pc, #224]	@ (8007074 <pbuf_free+0xf8>)
 8006f92:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006f96:	4938      	ldr	r1, [pc, #224]	@ (8007078 <pbuf_free+0xfc>)
 8006f98:	4838      	ldr	r0, [pc, #224]	@ (800707c <pbuf_free+0x100>)
 8006f9a:	f009 f8b3 	bl	8010104 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e063      	b.n	800706a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006fa6:	e05c      	b.n	8007062 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	7b9b      	ldrb	r3, [r3, #14]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <pbuf_free+0x42>
 8006fb0:	4b30      	ldr	r3, [pc, #192]	@ (8007074 <pbuf_free+0xf8>)
 8006fb2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006fb6:	4932      	ldr	r1, [pc, #200]	@ (8007080 <pbuf_free+0x104>)
 8006fb8:	4830      	ldr	r0, [pc, #192]	@ (800707c <pbuf_free+0x100>)
 8006fba:	f009 f8a3 	bl	8010104 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7b9b      	ldrb	r3, [r3, #14]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	739a      	strb	r2, [r3, #14]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7b9b      	ldrb	r3, [r3, #14]
 8006fce:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006fd0:	7dbb      	ldrb	r3, [r7, #22]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d143      	bne.n	800705e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7b1b      	ldrb	r3, [r3, #12]
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7b5b      	ldrb	r3, [r3, #13]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d011      	beq.n	8007016 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <pbuf_free+0x90>
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8007074 <pbuf_free+0xf8>)
 8007000:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007004:	491f      	ldr	r1, [pc, #124]	@ (8007084 <pbuf_free+0x108>)
 8007006:	481d      	ldr	r0, [pc, #116]	@ (800707c <pbuf_free+0x100>)
 8007008:	f009 f87c 	bl	8010104 <iprintf>
        pc->custom_free_function(p);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
 8007014:	e01d      	b.n	8007052 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d104      	bne.n	8007026 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	2008      	movs	r0, #8
 8007020:	f7ff f840 	bl	80060a4 <memp_free>
 8007024:	e015      	b.n	8007052 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d104      	bne.n	8007036 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	2007      	movs	r0, #7
 8007030:	f7ff f838 	bl	80060a4 <memp_free>
 8007034:	e00d      	b.n	8007052 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <pbuf_free+0xc8>
          mem_free(p);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fe fccb 	bl	80059d8 <mem_free>
 8007042:	e006      	b.n	8007052 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007044:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <pbuf_free+0xf8>)
 8007046:	f240 320f 	movw	r2, #783	@ 0x30f
 800704a:	490f      	ldr	r1, [pc, #60]	@ (8007088 <pbuf_free+0x10c>)
 800704c:	480b      	ldr	r0, [pc, #44]	@ (800707c <pbuf_free+0x100>)
 800704e:	f009 f859 	bl	8010104 <iprintf>
        }
      }
      count++;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	3301      	adds	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	607b      	str	r3, [r7, #4]
 800705c:	e001      	b.n	8007062 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d19f      	bne.n	8006fa8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	0801196c 	.word	0x0801196c
 8007078:	08011ad0 	.word	0x08011ad0
 800707c:	080119cc 	.word	0x080119cc
 8007080:	08011afc 	.word	0x08011afc
 8007084:	08011b14 	.word	0x08011b14
 8007088:	08011b38 	.word	0x08011b38

0800708c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007098:	e005      	b.n	80070a6 <pbuf_clen+0x1a>
    ++len;
 800709a:	89fb      	ldrh	r3, [r7, #14]
 800709c:	3301      	adds	r3, #1
 800709e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f6      	bne.n	800709a <pbuf_clen+0xe>
  }
  return len;
 80070ac:	89fb      	ldrh	r3, [r7, #14]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d010      	beq.n	80070ec <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7b9b      	ldrb	r3, [r3, #14]
 80070ce:	3301      	adds	r3, #1
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7b9b      	ldrb	r3, [r3, #14]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <pbuf_ref+0x30>
 80070de:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <pbuf_ref+0x38>)
 80070e0:	f240 3242 	movw	r2, #834	@ 0x342
 80070e4:	4904      	ldr	r1, [pc, #16]	@ (80070f8 <pbuf_ref+0x3c>)
 80070e6:	4805      	ldr	r0, [pc, #20]	@ (80070fc <pbuf_ref+0x40>)
 80070e8:	f009 f80c 	bl	8010104 <iprintf>
  }
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	0801196c 	.word	0x0801196c
 80070f8:	08011b4c 	.word	0x08011b4c
 80070fc:	080119cc 	.word	0x080119cc

08007100 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <pbuf_cat+0x16>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d107      	bne.n	8007126 <pbuf_cat+0x26>
 8007116:	4b20      	ldr	r3, [pc, #128]	@ (8007198 <pbuf_cat+0x98>)
 8007118:	f240 3259 	movw	r2, #857	@ 0x359
 800711c:	491f      	ldr	r1, [pc, #124]	@ (800719c <pbuf_cat+0x9c>)
 800711e:	4820      	ldr	r0, [pc, #128]	@ (80071a0 <pbuf_cat+0xa0>)
 8007120:	f008 fff0 	bl	8010104 <iprintf>
 8007124:	e034      	b.n	8007190 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e00a      	b.n	8007142 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	891a      	ldrh	r2, [r3, #8]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	891b      	ldrh	r3, [r3, #8]
 8007134:	4413      	add	r3, r2
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	891a      	ldrh	r2, [r3, #8]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	895b      	ldrh	r3, [r3, #10]
 8007152:	429a      	cmp	r2, r3
 8007154:	d006      	beq.n	8007164 <pbuf_cat+0x64>
 8007156:	4b10      	ldr	r3, [pc, #64]	@ (8007198 <pbuf_cat+0x98>)
 8007158:	f240 3262 	movw	r2, #866	@ 0x362
 800715c:	4911      	ldr	r1, [pc, #68]	@ (80071a4 <pbuf_cat+0xa4>)
 800715e:	4810      	ldr	r0, [pc, #64]	@ (80071a0 <pbuf_cat+0xa0>)
 8007160:	f008 ffd0 	bl	8010104 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <pbuf_cat+0x7a>
 800716c:	4b0a      	ldr	r3, [pc, #40]	@ (8007198 <pbuf_cat+0x98>)
 800716e:	f240 3263 	movw	r2, #867	@ 0x363
 8007172:	490d      	ldr	r1, [pc, #52]	@ (80071a8 <pbuf_cat+0xa8>)
 8007174:	480a      	ldr	r0, [pc, #40]	@ (80071a0 <pbuf_cat+0xa0>)
 8007176:	f008 ffc5 	bl	8010104 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	891a      	ldrh	r2, [r3, #8]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	891b      	ldrh	r3, [r3, #8]
 8007182:	4413      	add	r3, r2
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	0801196c 	.word	0x0801196c
 800719c:	08011b60 	.word	0x08011b60
 80071a0:	080119cc 	.word	0x080119cc
 80071a4:	08011b98 	.word	0x08011b98
 80071a8:	08011bc8 	.word	0x08011bc8

080071ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff ffa1 	bl	8007100 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80071be:	6838      	ldr	r0, [r7, #0]
 80071c0:	f7ff ff7c 	bl	80070bc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	2300      	movs	r3, #0
 80071dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <pbuf_copy+0x2a>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <pbuf_copy+0x2a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	891a      	ldrh	r2, [r3, #8]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	891b      	ldrh	r3, [r3, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d209      	bcs.n	800720a <pbuf_copy+0x3e>
 80071f6:	4b57      	ldr	r3, [pc, #348]	@ (8007354 <pbuf_copy+0x188>)
 80071f8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80071fc:	4956      	ldr	r1, [pc, #344]	@ (8007358 <pbuf_copy+0x18c>)
 80071fe:	4857      	ldr	r0, [pc, #348]	@ (800735c <pbuf_copy+0x190>)
 8007200:	f008 ff80 	bl	8010104 <iprintf>
 8007204:	f06f 030f 	mvn.w	r3, #15
 8007208:	e09f      	b.n	800734a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	895b      	ldrh	r3, [r3, #10]
 800720e:	461a      	mov	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	1ad2      	subs	r2, r2, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	895b      	ldrh	r3, [r3, #10]
 8007218:	4619      	mov	r1, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1acb      	subs	r3, r1, r3
 800721e:	429a      	cmp	r2, r3
 8007220:	d306      	bcc.n	8007230 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	895b      	ldrh	r3, [r3, #10]
 8007226:	461a      	mov	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e005      	b.n	800723c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	895b      	ldrh	r3, [r3, #10]
 8007234:	461a      	mov	r2, r3
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	18d0      	adds	r0, r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4619      	mov	r1, r3
 8007250:	f009 f92d 	bl	80104ae <memcpy>
    offset_to += len;
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	895b      	ldrh	r3, [r3, #10]
 8007268:	461a      	mov	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4293      	cmp	r3, r2
 800726e:	d906      	bls.n	800727e <pbuf_copy+0xb2>
 8007270:	4b38      	ldr	r3, [pc, #224]	@ (8007354 <pbuf_copy+0x188>)
 8007272:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007276:	493a      	ldr	r1, [pc, #232]	@ (8007360 <pbuf_copy+0x194>)
 8007278:	4838      	ldr	r0, [pc, #224]	@ (800735c <pbuf_copy+0x190>)
 800727a:	f008 ff43 	bl	8010104 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	895b      	ldrh	r3, [r3, #10]
 8007282:	461a      	mov	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4293      	cmp	r3, r2
 8007288:	d906      	bls.n	8007298 <pbuf_copy+0xcc>
 800728a:	4b32      	ldr	r3, [pc, #200]	@ (8007354 <pbuf_copy+0x188>)
 800728c:	f240 32da 	movw	r2, #986	@ 0x3da
 8007290:	4934      	ldr	r1, [pc, #208]	@ (8007364 <pbuf_copy+0x198>)
 8007292:	4832      	ldr	r0, [pc, #200]	@ (800735c <pbuf_copy+0x190>)
 8007294:	f008 ff36 	bl	8010104 <iprintf>
    if (offset_from >= p_from->len) {
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	895b      	ldrh	r3, [r3, #10]
 800729c:	461a      	mov	r2, r3
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d304      	bcc.n	80072ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	895b      	ldrh	r3, [r3, #10]
 80072b2:	461a      	mov	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d114      	bne.n	80072e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10c      	bne.n	80072e4 <pbuf_copy+0x118>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <pbuf_copy+0x118>
 80072d0:	4b20      	ldr	r3, [pc, #128]	@ (8007354 <pbuf_copy+0x188>)
 80072d2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80072d6:	4924      	ldr	r1, [pc, #144]	@ (8007368 <pbuf_copy+0x19c>)
 80072d8:	4820      	ldr	r0, [pc, #128]	@ (800735c <pbuf_copy+0x190>)
 80072da:	f008 ff13 	bl	8010104 <iprintf>
 80072de:	f06f 030f 	mvn.w	r3, #15
 80072e2:	e032      	b.n	800734a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d013      	beq.n	8007312 <pbuf_copy+0x146>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	895a      	ldrh	r2, [r3, #10]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	891b      	ldrh	r3, [r3, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d10d      	bne.n	8007312 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <pbuf_copy+0x146>
 80072fe:	4b15      	ldr	r3, [pc, #84]	@ (8007354 <pbuf_copy+0x188>)
 8007300:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007304:	4919      	ldr	r1, [pc, #100]	@ (800736c <pbuf_copy+0x1a0>)
 8007306:	4815      	ldr	r0, [pc, #84]	@ (800735c <pbuf_copy+0x190>)
 8007308:	f008 fefc 	bl	8010104 <iprintf>
 800730c:	f06f 0305 	mvn.w	r3, #5
 8007310:	e01b      	b.n	800734a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <pbuf_copy+0x174>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	895a      	ldrh	r2, [r3, #10]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	891b      	ldrh	r3, [r3, #8]
 8007320:	429a      	cmp	r2, r3
 8007322:	d10d      	bne.n	8007340 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <pbuf_copy+0x174>
 800732c:	4b09      	ldr	r3, [pc, #36]	@ (8007354 <pbuf_copy+0x188>)
 800732e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007332:	490e      	ldr	r1, [pc, #56]	@ (800736c <pbuf_copy+0x1a0>)
 8007334:	4809      	ldr	r0, [pc, #36]	@ (800735c <pbuf_copy+0x190>)
 8007336:	f008 fee5 	bl	8010104 <iprintf>
 800733a:	f06f 0305 	mvn.w	r3, #5
 800733e:	e004      	b.n	800734a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f af61 	bne.w	800720a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	0801196c 	.word	0x0801196c
 8007358:	08011c14 	.word	0x08011c14
 800735c:	080119cc 	.word	0x080119cc
 8007360:	08011c44 	.word	0x08011c44
 8007364:	08011c5c 	.word	0x08011c5c
 8007368:	08011c78 	.word	0x08011c78
 800736c:	08011c88 	.word	0x08011c88

08007370 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4611      	mov	r1, r2
 800737c:	461a      	mov	r2, r3
 800737e:	460b      	mov	r3, r1
 8007380:	80fb      	strh	r3, [r7, #6]
 8007382:	4613      	mov	r3, r2
 8007384:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d108      	bne.n	80073a6 <pbuf_copy_partial+0x36>
 8007394:	4b2b      	ldr	r3, [pc, #172]	@ (8007444 <pbuf_copy_partial+0xd4>)
 8007396:	f240 420a 	movw	r2, #1034	@ 0x40a
 800739a:	492b      	ldr	r1, [pc, #172]	@ (8007448 <pbuf_copy_partial+0xd8>)
 800739c:	482b      	ldr	r0, [pc, #172]	@ (800744c <pbuf_copy_partial+0xdc>)
 800739e:	f008 feb1 	bl	8010104 <iprintf>
 80073a2:	2300      	movs	r3, #0
 80073a4:	e04a      	b.n	800743c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d108      	bne.n	80073be <pbuf_copy_partial+0x4e>
 80073ac:	4b25      	ldr	r3, [pc, #148]	@ (8007444 <pbuf_copy_partial+0xd4>)
 80073ae:	f240 420b 	movw	r2, #1035	@ 0x40b
 80073b2:	4927      	ldr	r1, [pc, #156]	@ (8007450 <pbuf_copy_partial+0xe0>)
 80073b4:	4825      	ldr	r0, [pc, #148]	@ (800744c <pbuf_copy_partial+0xdc>)
 80073b6:	f008 fea5 	bl	8010104 <iprintf>
 80073ba:	2300      	movs	r3, #0
 80073bc:	e03e      	b.n	800743c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e034      	b.n	800742e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80073c4:	88bb      	ldrh	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <pbuf_copy_partial+0x70>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	895b      	ldrh	r3, [r3, #10]
 80073ce:	88ba      	ldrh	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d305      	bcc.n	80073e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	895b      	ldrh	r3, [r3, #10]
 80073d8:	88ba      	ldrh	r2, [r7, #4]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	80bb      	strh	r3, [r7, #4]
 80073de:	e023      	b.n	8007428 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	895a      	ldrh	r2, [r3, #10]
 80073e4:	88bb      	ldrh	r3, [r7, #4]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80073ea:	8b3a      	ldrh	r2, [r7, #24]
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d901      	bls.n	80073f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80073f6:	8b7b      	ldrh	r3, [r7, #26]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	18d0      	adds	r0, r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	88bb      	ldrh	r3, [r7, #4]
 8007402:	4413      	add	r3, r2
 8007404:	8b3a      	ldrh	r2, [r7, #24]
 8007406:	4619      	mov	r1, r3
 8007408:	f009 f851 	bl	80104ae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800740c:	8afa      	ldrh	r2, [r7, #22]
 800740e:	8b3b      	ldrh	r3, [r7, #24]
 8007410:	4413      	add	r3, r2
 8007412:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007414:	8b7a      	ldrh	r2, [r7, #26]
 8007416:	8b3b      	ldrh	r3, [r7, #24]
 8007418:	4413      	add	r3, r2
 800741a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800741c:	88fa      	ldrh	r2, [r7, #6]
 800741e:	8b3b      	ldrh	r3, [r7, #24]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	61fb      	str	r3, [r7, #28]
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <pbuf_copy_partial+0xca>
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1c4      	bne.n	80073c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800743a:	8afb      	ldrh	r3, [r7, #22]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	0801196c 	.word	0x0801196c
 8007448:	08011cb4 	.word	0x08011cb4
 800744c:	080119cc 	.word	0x080119cc
 8007450:	08011cd4 	.word	0x08011cd4

08007454 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	603a      	str	r2, [r7, #0]
 800745e:	71fb      	strb	r3, [r7, #7]
 8007460:	460b      	mov	r3, r1
 8007462:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	8919      	ldrh	r1, [r3, #8]
 8007468:	88ba      	ldrh	r2, [r7, #4]
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff faa1 	bl	80069b4 <pbuf_alloc>
 8007472:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <pbuf_clone+0x2a>
    return NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	e011      	b.n	80074a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fea3 	bl	80071cc <pbuf_copy>
 8007486:	4603      	mov	r3, r0
 8007488:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800748a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d006      	beq.n	80074a0 <pbuf_clone+0x4c>
 8007492:	4b06      	ldr	r3, [pc, #24]	@ (80074ac <pbuf_clone+0x58>)
 8007494:	f240 5224 	movw	r2, #1316	@ 0x524
 8007498:	4905      	ldr	r1, [pc, #20]	@ (80074b0 <pbuf_clone+0x5c>)
 800749a:	4806      	ldr	r0, [pc, #24]	@ (80074b4 <pbuf_clone+0x60>)
 800749c:	f008 fe32 	bl	8010104 <iprintf>
  return q;
 80074a0:	68fb      	ldr	r3, [r7, #12]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	0801196c 	.word	0x0801196c
 80074b0:	08011de0 	.word	0x08011de0
 80074b4:	080119cc 	.word	0x080119cc

080074b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80074bc:	f008 fd22 	bl	800ff04 <rand>
 80074c0:	4603      	mov	r3, r0
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	4b01      	ldr	r3, [pc, #4]	@ (80074d8 <tcp_init+0x20>)
 80074d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80074d4:	bf00      	nop
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000064 	.word	0x20000064

080074dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	7d1b      	ldrb	r3, [r3, #20]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d105      	bne.n	80074f8 <tcp_free+0x1c>
 80074ec:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <tcp_free+0x2c>)
 80074ee:	22d4      	movs	r2, #212	@ 0xd4
 80074f0:	4906      	ldr	r1, [pc, #24]	@ (800750c <tcp_free+0x30>)
 80074f2:	4807      	ldr	r0, [pc, #28]	@ (8007510 <tcp_free+0x34>)
 80074f4:	f008 fe06 	bl	8010104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	2001      	movs	r0, #1
 80074fc:	f7fe fdd2 	bl	80060a4 <memp_free>
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	08011e6c 	.word	0x08011e6c
 800750c:	08011e9c 	.word	0x08011e9c
 8007510:	08011eb0 	.word	0x08011eb0

08007514 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	7d1b      	ldrb	r3, [r3, #20]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d105      	bne.n	8007530 <tcp_free_listen+0x1c>
 8007524:	4b06      	ldr	r3, [pc, #24]	@ (8007540 <tcp_free_listen+0x2c>)
 8007526:	22df      	movs	r2, #223	@ 0xdf
 8007528:	4906      	ldr	r1, [pc, #24]	@ (8007544 <tcp_free_listen+0x30>)
 800752a:	4807      	ldr	r0, [pc, #28]	@ (8007548 <tcp_free_listen+0x34>)
 800752c:	f008 fdea 	bl	8010104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	2002      	movs	r0, #2
 8007534:	f7fe fdb6 	bl	80060a4 <memp_free>
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	08011e6c 	.word	0x08011e6c
 8007544:	08011ed8 	.word	0x08011ed8
 8007548:	08011eb0 	.word	0x08011eb0

0800754c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007550:	f000 fea4 	bl	800829c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <tcp_tmr+0x28>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <tcp_tmr+0x28>)
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	4b04      	ldr	r3, [pc, #16]	@ (8007574 <tcp_tmr+0x28>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800756c:	f000 fb54 	bl	8007c18 <tcp_slowtmr>
  }
}
 8007570:	bf00      	nop
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20007d0d 	.word	0x20007d0d

08007578 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d105      	bne.n	8007594 <tcp_remove_listener+0x1c>
 8007588:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <tcp_remove_listener+0x48>)
 800758a:	22ff      	movs	r2, #255	@ 0xff
 800758c:	490d      	ldr	r1, [pc, #52]	@ (80075c4 <tcp_remove_listener+0x4c>)
 800758e:	480e      	ldr	r0, [pc, #56]	@ (80075c8 <tcp_remove_listener+0x50>)
 8007590:	f008 fdb8 	bl	8010104 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	e00a      	b.n	80075b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d102      	bne.n	80075aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f1      	bne.n	800759a <tcp_remove_listener+0x22>
    }
  }
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	08011e6c 	.word	0x08011e6c
 80075c4:	08011ef4 	.word	0x08011ef4
 80075c8:	08011eb0 	.word	0x08011eb0

080075cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <tcp_listen_closed+0x1c>
 80075da:	4b14      	ldr	r3, [pc, #80]	@ (800762c <tcp_listen_closed+0x60>)
 80075dc:	f240 1211 	movw	r2, #273	@ 0x111
 80075e0:	4913      	ldr	r1, [pc, #76]	@ (8007630 <tcp_listen_closed+0x64>)
 80075e2:	4814      	ldr	r0, [pc, #80]	@ (8007634 <tcp_listen_closed+0x68>)
 80075e4:	f008 fd8e 	bl	8010104 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7d1b      	ldrb	r3, [r3, #20]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d006      	beq.n	80075fe <tcp_listen_closed+0x32>
 80075f0:	4b0e      	ldr	r3, [pc, #56]	@ (800762c <tcp_listen_closed+0x60>)
 80075f2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80075f6:	4910      	ldr	r1, [pc, #64]	@ (8007638 <tcp_listen_closed+0x6c>)
 80075f8:	480e      	ldr	r0, [pc, #56]	@ (8007634 <tcp_listen_closed+0x68>)
 80075fa:	f008 fd83 	bl	8010104 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80075fe:	2301      	movs	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e00b      	b.n	800761c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007604:	4a0d      	ldr	r2, [pc, #52]	@ (800763c <tcp_listen_closed+0x70>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff ffb1 	bl	8007578 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3301      	adds	r3, #1
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b03      	cmp	r3, #3
 8007620:	d9f0      	bls.n	8007604 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007622:	bf00      	nop
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	08011e6c 	.word	0x08011e6c
 8007630:	08011f1c 	.word	0x08011f1c
 8007634:	08011eb0 	.word	0x08011eb0
 8007638:	08011f28 	.word	0x08011f28
 800763c:	08014560 	.word	0x08014560

08007640 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007640:	b5b0      	push	{r4, r5, r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af04      	add	r7, sp, #16
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <tcp_close_shutdown+0x20>
 8007652:	4b63      	ldr	r3, [pc, #396]	@ (80077e0 <tcp_close_shutdown+0x1a0>)
 8007654:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007658:	4962      	ldr	r1, [pc, #392]	@ (80077e4 <tcp_close_shutdown+0x1a4>)
 800765a:	4863      	ldr	r0, [pc, #396]	@ (80077e8 <tcp_close_shutdown+0x1a8>)
 800765c:	f008 fd52 	bl	8010104 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d066      	beq.n	8007734 <tcp_close_shutdown+0xf4>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7d1b      	ldrb	r3, [r3, #20]
 800766a:	2b04      	cmp	r3, #4
 800766c:	d003      	beq.n	8007676 <tcp_close_shutdown+0x36>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7d1b      	ldrb	r3, [r3, #20]
 8007672:	2b07      	cmp	r3, #7
 8007674:	d15e      	bne.n	8007734 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <tcp_close_shutdown+0x48>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007682:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007686:	d055      	beq.n	8007734 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8b5b      	ldrh	r3, [r3, #26]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <tcp_close_shutdown+0x62>
 8007694:	4b52      	ldr	r3, [pc, #328]	@ (80077e0 <tcp_close_shutdown+0x1a0>)
 8007696:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800769a:	4954      	ldr	r1, [pc, #336]	@ (80077ec <tcp_close_shutdown+0x1ac>)
 800769c:	4852      	ldr	r0, [pc, #328]	@ (80077e8 <tcp_close_shutdown+0x1a8>)
 800769e:	f008 fd31 	bl	8010104 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80076aa:	687d      	ldr	r5, [r7, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3304      	adds	r3, #4
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	8ad2      	ldrh	r2, [r2, #22]
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	8b09      	ldrh	r1, [r1, #24]
 80076b8:	9102      	str	r1, [sp, #8]
 80076ba:	9201      	str	r2, [sp, #4]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	462b      	mov	r3, r5
 80076c0:	4622      	mov	r2, r4
 80076c2:	4601      	mov	r1, r0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f004 fea7 	bl	800c418 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 f8c8 	bl	8008860 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80076d0:	4b47      	ldr	r3, [pc, #284]	@ (80077f0 <tcp_close_shutdown+0x1b0>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d105      	bne.n	80076e6 <tcp_close_shutdown+0xa6>
 80076da:	4b45      	ldr	r3, [pc, #276]	@ (80077f0 <tcp_close_shutdown+0x1b0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	4a43      	ldr	r2, [pc, #268]	@ (80077f0 <tcp_close_shutdown+0x1b0>)
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	e013      	b.n	800770e <tcp_close_shutdown+0xce>
 80076e6:	4b42      	ldr	r3, [pc, #264]	@ (80077f0 <tcp_close_shutdown+0x1b0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	e00c      	b.n	8007708 <tcp_close_shutdown+0xc8>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d104      	bne.n	8007702 <tcp_close_shutdown+0xc2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	60da      	str	r2, [r3, #12]
 8007700:	e005      	b.n	800770e <tcp_close_shutdown+0xce>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1ef      	bne.n	80076ee <tcp_close_shutdown+0xae>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	60da      	str	r2, [r3, #12]
 8007714:	4b37      	ldr	r3, [pc, #220]	@ (80077f4 <tcp_close_shutdown+0x1b4>)
 8007716:	2201      	movs	r2, #1
 8007718:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800771a:	4b37      	ldr	r3, [pc, #220]	@ (80077f8 <tcp_close_shutdown+0x1b8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d102      	bne.n	800772a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007724:	f003 fd62 	bl	800b1ec <tcp_trigger_input_pcb_close>
 8007728:	e002      	b.n	8007730 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff fed6 	bl	80074dc <tcp_free>
      }
      return ERR_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e050      	b.n	80077d6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7d1b      	ldrb	r3, [r3, #20]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d03b      	beq.n	80077b4 <tcp_close_shutdown+0x174>
 800773c:	2b02      	cmp	r3, #2
 800773e:	dc44      	bgt.n	80077ca <tcp_close_shutdown+0x18a>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <tcp_close_shutdown+0x10a>
 8007744:	2b01      	cmp	r3, #1
 8007746:	d02a      	beq.n	800779e <tcp_close_shutdown+0x15e>
 8007748:	e03f      	b.n	80077ca <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	8adb      	ldrh	r3, [r3, #22]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d021      	beq.n	8007796 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007752:	4b2a      	ldr	r3, [pc, #168]	@ (80077fc <tcp_close_shutdown+0x1bc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	429a      	cmp	r2, r3
 800775a:	d105      	bne.n	8007768 <tcp_close_shutdown+0x128>
 800775c:	4b27      	ldr	r3, [pc, #156]	@ (80077fc <tcp_close_shutdown+0x1bc>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	4a26      	ldr	r2, [pc, #152]	@ (80077fc <tcp_close_shutdown+0x1bc>)
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	e013      	b.n	8007790 <tcp_close_shutdown+0x150>
 8007768:	4b24      	ldr	r3, [pc, #144]	@ (80077fc <tcp_close_shutdown+0x1bc>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	e00c      	b.n	800778a <tcp_close_shutdown+0x14a>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d104      	bne.n	8007784 <tcp_close_shutdown+0x144>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	e005      	b.n	8007790 <tcp_close_shutdown+0x150>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	60bb      	str	r3, [r7, #8]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1ef      	bne.n	8007770 <tcp_close_shutdown+0x130>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fea0 	bl	80074dc <tcp_free>
      break;
 800779c:	e01a      	b.n	80077d4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff ff14 	bl	80075cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4816      	ldr	r0, [pc, #88]	@ (8007800 <tcp_close_shutdown+0x1c0>)
 80077a8:	f001 f8aa 	bl	8008900 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff feb1 	bl	8007514 <tcp_free_listen>
      break;
 80077b2:	e00f      	b.n	80077d4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	480e      	ldr	r0, [pc, #56]	@ (80077f0 <tcp_close_shutdown+0x1b0>)
 80077b8:	f001 f8a2 	bl	8008900 <tcp_pcb_remove>
 80077bc:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <tcp_close_shutdown+0x1b4>)
 80077be:	2201      	movs	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff fe8a 	bl	80074dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80077c8:	e004      	b.n	80077d4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f81a 	bl	8007804 <tcp_close_shutdown_fin>
 80077d0:	4603      	mov	r3, r0
 80077d2:	e000      	b.n	80077d6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bdb0      	pop	{r4, r5, r7, pc}
 80077de:	bf00      	nop
 80077e0:	08011e6c 	.word	0x08011e6c
 80077e4:	08011f40 	.word	0x08011f40
 80077e8:	08011eb0 	.word	0x08011eb0
 80077ec:	08011f60 	.word	0x08011f60
 80077f0:	20007d04 	.word	0x20007d04
 80077f4:	20007d0c 	.word	0x20007d0c
 80077f8:	20007d48 	.word	0x20007d48
 80077fc:	20007cfc 	.word	0x20007cfc
 8007800:	20007d00 	.word	0x20007d00

08007804 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <tcp_close_shutdown_fin+0x1c>
 8007812:	4b2e      	ldr	r3, [pc, #184]	@ (80078cc <tcp_close_shutdown_fin+0xc8>)
 8007814:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007818:	492d      	ldr	r1, [pc, #180]	@ (80078d0 <tcp_close_shutdown_fin+0xcc>)
 800781a:	482e      	ldr	r0, [pc, #184]	@ (80078d4 <tcp_close_shutdown_fin+0xd0>)
 800781c:	f008 fc72 	bl	8010104 <iprintf>

  switch (pcb->state) {
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	7d1b      	ldrb	r3, [r3, #20]
 8007824:	2b07      	cmp	r3, #7
 8007826:	d020      	beq.n	800786a <tcp_close_shutdown_fin+0x66>
 8007828:	2b07      	cmp	r3, #7
 800782a:	dc2b      	bgt.n	8007884 <tcp_close_shutdown_fin+0x80>
 800782c:	2b03      	cmp	r3, #3
 800782e:	d002      	beq.n	8007836 <tcp_close_shutdown_fin+0x32>
 8007830:	2b04      	cmp	r3, #4
 8007832:	d00d      	beq.n	8007850 <tcp_close_shutdown_fin+0x4c>
 8007834:	e026      	b.n	8007884 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f003 fef0 	bl	800b61c <tcp_send_fin>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d11f      	bne.n	8007888 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2205      	movs	r2, #5
 800784c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800784e:	e01b      	b.n	8007888 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f003 fee3 	bl	800b61c <tcp_send_fin>
 8007856:	4603      	mov	r3, r0
 8007858:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800785a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d114      	bne.n	800788c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2205      	movs	r2, #5
 8007866:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007868:	e010      	b.n	800788c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f003 fed6 	bl	800b61c <tcp_send_fin>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d109      	bne.n	8007890 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2209      	movs	r2, #9
 8007880:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007882:	e005      	b.n	8007890 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e01c      	b.n	80078c2 <tcp_close_shutdown_fin+0xbe>
      break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <tcp_close_shutdown_fin+0x8e>
      break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <tcp_close_shutdown_fin+0x8e>
      break;
 8007890:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f003 fffc 	bl	800b898 <tcp_output>
 80078a0:	e00d      	b.n	80078be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80078a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078aa:	d108      	bne.n	80078be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8b5b      	ldrh	r3, [r3, #26]
 80078b0:	f043 0308 	orr.w	r3, r3, #8
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	e001      	b.n	80078c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80078be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	08011e6c 	.word	0x08011e6c
 80078d0:	08011f1c 	.word	0x08011f1c
 80078d4:	08011eb0 	.word	0x08011eb0

080078d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <tcp_close+0x22>
 80078e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007924 <tcp_close+0x4c>)
 80078e8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80078ec:	490e      	ldr	r1, [pc, #56]	@ (8007928 <tcp_close+0x50>)
 80078ee:	480f      	ldr	r0, [pc, #60]	@ (800792c <tcp_close+0x54>)
 80078f0:	f008 fc08 	bl	8010104 <iprintf>
 80078f4:	f06f 030f 	mvn.w	r3, #15
 80078f8:	e00f      	b.n	800791a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	7d1b      	ldrb	r3, [r3, #20]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d006      	beq.n	8007910 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8b5b      	ldrh	r3, [r3, #26]
 8007906:	f043 0310 	orr.w	r3, r3, #16
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff fe94 	bl	8007640 <tcp_close_shutdown>
 8007918:	4603      	mov	r3, r0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	08011e6c 	.word	0x08011e6c
 8007928:	08011f7c 	.word	0x08011f7c
 800792c:	08011eb0 	.word	0x08011eb0

08007930 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	@ 0x38
 8007934:	af04      	add	r7, sp, #16
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d107      	bne.n	8007950 <tcp_abandon+0x20>
 8007940:	4b52      	ldr	r3, [pc, #328]	@ (8007a8c <tcp_abandon+0x15c>)
 8007942:	f240 223d 	movw	r2, #573	@ 0x23d
 8007946:	4952      	ldr	r1, [pc, #328]	@ (8007a90 <tcp_abandon+0x160>)
 8007948:	4852      	ldr	r0, [pc, #328]	@ (8007a94 <tcp_abandon+0x164>)
 800794a:	f008 fbdb 	bl	8010104 <iprintf>
 800794e:	e099      	b.n	8007a84 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7d1b      	ldrb	r3, [r3, #20]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d106      	bne.n	8007966 <tcp_abandon+0x36>
 8007958:	4b4c      	ldr	r3, [pc, #304]	@ (8007a8c <tcp_abandon+0x15c>)
 800795a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800795e:	494e      	ldr	r1, [pc, #312]	@ (8007a98 <tcp_abandon+0x168>)
 8007960:	484c      	ldr	r0, [pc, #304]	@ (8007a94 <tcp_abandon+0x164>)
 8007962:	f008 fbcf 	bl	8010104 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7d1b      	ldrb	r3, [r3, #20]
 800796a:	2b0a      	cmp	r3, #10
 800796c:	d107      	bne.n	800797e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	484a      	ldr	r0, [pc, #296]	@ (8007a9c <tcp_abandon+0x16c>)
 8007972:	f000 ffc5 	bl	8008900 <tcp_pcb_remove>
    tcp_free(pcb);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fdb0 	bl	80074dc <tcp_free>
 800797c:	e082      	b.n	8007a84 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007990:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007998:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	7d1b      	ldrb	r3, [r3, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d126      	bne.n	80079f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8adb      	ldrh	r3, [r3, #22]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d02e      	beq.n	8007a0e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80079b0:	4b3b      	ldr	r3, [pc, #236]	@ (8007aa0 <tcp_abandon+0x170>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d105      	bne.n	80079c6 <tcp_abandon+0x96>
 80079ba:	4b39      	ldr	r3, [pc, #228]	@ (8007aa0 <tcp_abandon+0x170>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4a37      	ldr	r2, [pc, #220]	@ (8007aa0 <tcp_abandon+0x170>)
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	e013      	b.n	80079ee <tcp_abandon+0xbe>
 80079c6:	4b36      	ldr	r3, [pc, #216]	@ (8007aa0 <tcp_abandon+0x170>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	e00c      	b.n	80079e8 <tcp_abandon+0xb8>
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d104      	bne.n	80079e2 <tcp_abandon+0xb2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	60da      	str	r2, [r3, #12]
 80079e0:	e005      	b.n	80079ee <tcp_abandon+0xbe>
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1ef      	bne.n	80079ce <tcp_abandon+0x9e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	60da      	str	r2, [r3, #12]
 80079f4:	e00b      	b.n	8007a0e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	8adb      	ldrh	r3, [r3, #22]
 80079fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4828      	ldr	r0, [pc, #160]	@ (8007aa4 <tcp_abandon+0x174>)
 8007a04:	f000 ff7c 	bl	8008900 <tcp_pcb_remove>
 8007a08:	4b27      	ldr	r3, [pc, #156]	@ (8007aa8 <tcp_abandon+0x178>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d004      	beq.n	8007a20 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fd1e 	bl	800845c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fd15 	bl	800845c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fd0c 	bl	800845c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	8b12      	ldrh	r2, [r2, #24]
 8007a54:	9202      	str	r2, [sp, #8]
 8007a56:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007a58:	9201      	str	r2, [sp, #4]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	69b9      	ldr	r1, [r7, #24]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f004 fcd8 	bl	800c418 <tcp_rst>
    }
    last_state = pcb->state;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7d1b      	ldrb	r3, [r3, #20]
 8007a6c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff fd34 	bl	80074dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <tcp_abandon+0x154>
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f06f 010c 	mvn.w	r1, #12
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	4798      	blx	r3
  }
}
 8007a84:	3728      	adds	r7, #40	@ 0x28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08011e6c 	.word	0x08011e6c
 8007a90:	08011fb0 	.word	0x08011fb0
 8007a94:	08011eb0 	.word	0x08011eb0
 8007a98:	08011fcc 	.word	0x08011fcc
 8007a9c:	20007d08 	.word	0x20007d08
 8007aa0:	20007cfc 	.word	0x20007cfc
 8007aa4:	20007d04 	.word	0x20007d04
 8007aa8:	20007d0c 	.word	0x20007d0c

08007aac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff ff3a 	bl	8007930 <tcp_abandon>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <tcp_update_rcv_ann_wnd+0x1c>
 8007ad2:	4b25      	ldr	r3, [pc, #148]	@ (8007b68 <tcp_update_rcv_ann_wnd+0xa4>)
 8007ad4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007ad8:	4924      	ldr	r1, [pc, #144]	@ (8007b6c <tcp_update_rcv_ann_wnd+0xa8>)
 8007ada:	4825      	ldr	r0, [pc, #148]	@ (8007b70 <tcp_update_rcv_ann_wnd+0xac>)
 8007adc:	f008 fb12 	bl	8010104 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007ae8:	4413      	add	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007af4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007af8:	bf28      	it	cs
 8007afa:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007afe:	b292      	uxth	r2, r2
 8007b00:	4413      	add	r3, r2
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	db08      	blt.n	8007b1c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	e020      	b.n	8007b5e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd03      	ble.n	8007b32 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b30:	e014      	b.n	8007b5c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b44:	d306      	bcc.n	8007b54 <tcp_update_rcv_ann_wnd+0x90>
 8007b46:	4b08      	ldr	r3, [pc, #32]	@ (8007b68 <tcp_update_rcv_ann_wnd+0xa4>)
 8007b48:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8007b4c:	4909      	ldr	r1, [pc, #36]	@ (8007b74 <tcp_update_rcv_ann_wnd+0xb0>)
 8007b4e:	4808      	ldr	r0, [pc, #32]	@ (8007b70 <tcp_update_rcv_ann_wnd+0xac>)
 8007b50:	f008 fad8 	bl	8010104 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8007b5c:	2300      	movs	r3, #0
  }
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	08011e6c 	.word	0x08011e6c
 8007b6c:	080120c8 	.word	0x080120c8
 8007b70:	08011eb0 	.word	0x08011eb0
 8007b74:	080120ec 	.word	0x080120ec

08007b78 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d107      	bne.n	8007b9a <tcp_recved+0x22>
 8007b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c08 <tcp_recved+0x90>)
 8007b8c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007b90:	491e      	ldr	r1, [pc, #120]	@ (8007c0c <tcp_recved+0x94>)
 8007b92:	481f      	ldr	r0, [pc, #124]	@ (8007c10 <tcp_recved+0x98>)
 8007b94:	f008 fab6 	bl	8010104 <iprintf>
 8007b98:	e032      	b.n	8007c00 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7d1b      	ldrb	r3, [r3, #20]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d106      	bne.n	8007bb0 <tcp_recved+0x38>
 8007ba2:	4b19      	ldr	r3, [pc, #100]	@ (8007c08 <tcp_recved+0x90>)
 8007ba4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007ba8:	491a      	ldr	r1, [pc, #104]	@ (8007c14 <tcp_recved+0x9c>)
 8007baa:	4819      	ldr	r0, [pc, #100]	@ (8007c10 <tcp_recved+0x98>)
 8007bac:	f008 faaa 	bl	8010104 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007bb4:	887b      	ldrh	r3, [r7, #2]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007bba:	89fb      	ldrh	r3, [r7, #14]
 8007bbc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007bc0:	d804      	bhi.n	8007bcc <tcp_recved+0x54>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc6:	89fa      	ldrh	r2, [r7, #14]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d204      	bcs.n	8007bd6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007bd4:	e002      	b.n	8007bdc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	89fa      	ldrh	r2, [r7, #14]
 8007bda:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ff71 	bl	8007ac4 <tcp_update_rcv_ann_wnd>
 8007be2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8007bea:	d309      	bcc.n	8007c00 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8b5b      	ldrh	r3, [r3, #26]
 8007bf0:	f043 0302 	orr.w	r3, r3, #2
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f003 fe4c 	bl	800b898 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	08011e6c 	.word	0x08011e6c
 8007c0c:	08012108 	.word	0x08012108
 8007c10:	08011eb0 	.word	0x08011eb0
 8007c14:	08012120 	.word	0x08012120

08007c18 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007c18:	b5b0      	push	{r4, r5, r7, lr}
 8007c1a:	b090      	sub	sp, #64	@ 0x40
 8007c1c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8007c24:	4b95      	ldr	r3, [pc, #596]	@ (8007e7c <tcp_slowtmr+0x264>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4a94      	ldr	r2, [pc, #592]	@ (8007e7c <tcp_slowtmr+0x264>)
 8007c2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007c2e:	4b94      	ldr	r3, [pc, #592]	@ (8007e80 <tcp_slowtmr+0x268>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	4b92      	ldr	r3, [pc, #584]	@ (8007e80 <tcp_slowtmr+0x268>)
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e000      	b.n	8007c3e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8007c3c:	bf00      	nop
  prev = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8007c42:	4b90      	ldr	r3, [pc, #576]	@ (8007e84 <tcp_slowtmr+0x26c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007c48:	e29d      	b.n	8008186 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <tcp_slowtmr+0x48>
 8007c52:	4b8d      	ldr	r3, [pc, #564]	@ (8007e88 <tcp_slowtmr+0x270>)
 8007c54:	f240 42be 	movw	r2, #1214	@ 0x4be
 8007c58:	498c      	ldr	r1, [pc, #560]	@ (8007e8c <tcp_slowtmr+0x274>)
 8007c5a:	488d      	ldr	r0, [pc, #564]	@ (8007e90 <tcp_slowtmr+0x278>)
 8007c5c:	f008 fa52 	bl	8010104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c62:	7d1b      	ldrb	r3, [r3, #20]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d106      	bne.n	8007c76 <tcp_slowtmr+0x5e>
 8007c68:	4b87      	ldr	r3, [pc, #540]	@ (8007e88 <tcp_slowtmr+0x270>)
 8007c6a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8007c6e:	4989      	ldr	r1, [pc, #548]	@ (8007e94 <tcp_slowtmr+0x27c>)
 8007c70:	4887      	ldr	r0, [pc, #540]	@ (8007e90 <tcp_slowtmr+0x278>)
 8007c72:	f008 fa47 	bl	8010104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c78:	7d1b      	ldrb	r3, [r3, #20]
 8007c7a:	2b0a      	cmp	r3, #10
 8007c7c:	d106      	bne.n	8007c8c <tcp_slowtmr+0x74>
 8007c7e:	4b82      	ldr	r3, [pc, #520]	@ (8007e88 <tcp_slowtmr+0x270>)
 8007c80:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007c84:	4984      	ldr	r1, [pc, #528]	@ (8007e98 <tcp_slowtmr+0x280>)
 8007c86:	4882      	ldr	r0, [pc, #520]	@ (8007e90 <tcp_slowtmr+0x278>)
 8007c88:	f008 fa3c 	bl	8010104 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8e:	7f9a      	ldrb	r2, [r3, #30]
 8007c90:	4b7b      	ldr	r3, [pc, #492]	@ (8007e80 <tcp_slowtmr+0x268>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d105      	bne.n	8007ca4 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007ca2:	e270      	b.n	8008186 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8007ca4:	4b76      	ldr	r3, [pc, #472]	@ (8007e80 <tcp_slowtmr+0x268>)
 8007ca6:	781a      	ldrb	r2, [r3, #0]
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cba:	7d1b      	ldrb	r3, [r3, #20]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d10a      	bne.n	8007cd6 <tcp_slowtmr+0xbe>
 8007cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d905      	bls.n	8007cd6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cce:	3301      	adds	r3, #1
 8007cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8007cd4:	e11e      	b.n	8007f14 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cdc:	2b0b      	cmp	r3, #11
 8007cde:	d905      	bls.n	8007cec <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007cea:	e113      	b.n	8007f14 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d075      	beq.n	8007de2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d006      	beq.n	8007d0c <tcp_slowtmr+0xf4>
 8007cfe:	4b62      	ldr	r3, [pc, #392]	@ (8007e88 <tcp_slowtmr+0x270>)
 8007d00:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007d04:	4965      	ldr	r1, [pc, #404]	@ (8007e9c <tcp_slowtmr+0x284>)
 8007d06:	4862      	ldr	r0, [pc, #392]	@ (8007e90 <tcp_slowtmr+0x278>)
 8007d08:	f008 f9fc 	bl	8010104 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d106      	bne.n	8007d22 <tcp_slowtmr+0x10a>
 8007d14:	4b5c      	ldr	r3, [pc, #368]	@ (8007e88 <tcp_slowtmr+0x270>)
 8007d16:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8007d1a:	4961      	ldr	r1, [pc, #388]	@ (8007ea0 <tcp_slowtmr+0x288>)
 8007d1c:	485c      	ldr	r0, [pc, #368]	@ (8007e90 <tcp_slowtmr+0x278>)
 8007d1e:	f008 f9f1 	bl	8010104 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d24:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8007d28:	2b0b      	cmp	r3, #11
 8007d2a:	d905      	bls.n	8007d38 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8007d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d30:	3301      	adds	r3, #1
 8007d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007d36:	e0ed      	b.n	8007f14 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	4a58      	ldr	r2, [pc, #352]	@ (8007ea4 <tcp_slowtmr+0x28c>)
 8007d42:	5cd3      	ldrb	r3, [r2, r3]
 8007d44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d4c:	7c7a      	ldrb	r2, [r7, #17]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d907      	bls.n	8007d62 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d58:	3301      	adds	r3, #1
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8007d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d64:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d68:	7c7a      	ldrb	r2, [r7, #17]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	f200 80d2 	bhi.w	8007f14 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8007d70:	2301      	movs	r3, #1
 8007d72:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d108      	bne.n	8007d90 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007d7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d80:	f004 fc3e 	bl	800c600 <tcp_zero_window_probe>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d014      	beq.n	8007db4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	623b      	str	r3, [r7, #32]
 8007d8e:	e011      	b.n	8007db4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d96:	4619      	mov	r1, r3
 8007d98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d9a:	f003 faf3 	bl	800b384 <tcp_split_unsent_seg>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d107      	bne.n	8007db4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007da4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007da6:	f003 fd77 	bl	800b898 <tcp_output>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80ac 	beq.w	8007f14 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007dca:	2b06      	cmp	r3, #6
 8007dcc:	f200 80a2 	bhi.w	8007f14 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007de0:	e098      	b.n	8007f14 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	db0f      	blt.n	8007e0c <tcp_slowtmr+0x1f4>
 8007dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007df2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d008      	beq.n	8007e0c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3301      	adds	r3, #1
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	b21a      	sxth	r2, r3
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8007e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	db7b      	blt.n	8007f14 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007e1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e1e:	f004 f831 	bl	800be84 <tcp_rexmit_rto_prepare>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <tcp_slowtmr+0x220>
 8007e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d171      	bne.n	8007f14 <tcp_slowtmr+0x2fc>
 8007e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d06d      	beq.n	8007f14 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	7d1b      	ldrb	r3, [r3, #20]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d03a      	beq.n	8007eb6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e46:	2b0c      	cmp	r3, #12
 8007e48:	bf28      	it	cs
 8007e4a:	230c      	movcs	r3, #12
 8007e4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007e54:	10db      	asrs	r3, r3, #3
 8007e56:	b21b      	sxth	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007e60:	4413      	add	r3, r2
 8007e62:	7efa      	ldrb	r2, [r7, #27]
 8007e64:	4910      	ldr	r1, [pc, #64]	@ (8007ea8 <tcp_slowtmr+0x290>)
 8007e66:	5c8a      	ldrb	r2, [r1, r2]
 8007e68:	4093      	lsls	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8007e72:	4293      	cmp	r3, r2
 8007e74:	dc1a      	bgt.n	8007eac <tcp_slowtmr+0x294>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	b21a      	sxth	r2, r3
 8007e7a:	e019      	b.n	8007eb0 <tcp_slowtmr+0x298>
 8007e7c:	20007cf8 	.word	0x20007cf8
 8007e80:	20007d0e 	.word	0x20007d0e
 8007e84:	20007d04 	.word	0x20007d04
 8007e88:	08011e6c 	.word	0x08011e6c
 8007e8c:	080121b0 	.word	0x080121b0
 8007e90:	08011eb0 	.word	0x08011eb0
 8007e94:	080121dc 	.word	0x080121dc
 8007e98:	08012208 	.word	0x08012208
 8007e9c:	08012238 	.word	0x08012238
 8007ea0:	0801226c 	.word	0x0801226c
 8007ea4:	08014558 	.word	0x08014558
 8007ea8:	08014548 	.word	0x08014548
 8007eac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb8:	2200      	movs	r2, #0
 8007eba:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	bf28      	it	cs
 8007ecc:	4613      	movcs	r3, r2
 8007ece:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007ed0:	8a7b      	ldrh	r3, [r7, #18]
 8007ed2:	085b      	lsrs	r3, r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d206      	bcs.n	8007efc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8007f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007f0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f10:	f004 f832 	bl	800bf78 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8007f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f16:	7d1b      	ldrb	r3, [r3, #20]
 8007f18:	2b06      	cmp	r3, #6
 8007f1a:	d111      	bne.n	8007f40 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8007f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1e:	8b5b      	ldrh	r3, [r3, #26]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f28:	4b9c      	ldr	r3, [pc, #624]	@ (800819c <tcp_slowtmr+0x584>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b28      	cmp	r3, #40	@ 0x28
 8007f34:	d904      	bls.n	8007f40 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8007f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f42:	7a5b      	ldrb	r3, [r3, #9]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d04a      	beq.n	8007fe2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d003      	beq.n	8007f5c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007f58:	2b07      	cmp	r3, #7
 8007f5a:	d142      	bne.n	8007fe2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800819c <tcp_slowtmr+0x584>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f68:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80081a0 <tcp_slowtmr+0x588>)
 8007f6e:	440b      	add	r3, r1
 8007f70:	498c      	ldr	r1, [pc, #560]	@ (80081a4 <tcp_slowtmr+0x58c>)
 8007f72:	fba1 1303 	umull	r1, r3, r1, r3
 8007f76:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d90a      	bls.n	8007f92 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8007f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f80:	3301      	adds	r3, #1
 8007f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007f86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007f90:	e027      	b.n	8007fe2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f92:	4b82      	ldr	r3, [pc, #520]	@ (800819c <tcp_slowtmr+0x584>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007fa8:	4618      	mov	r0, r3
 8007faa:	4b7f      	ldr	r3, [pc, #508]	@ (80081a8 <tcp_slowtmr+0x590>)
 8007fac:	fb00 f303 	mul.w	r3, r0, r3
 8007fb0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007fb2:	497c      	ldr	r1, [pc, #496]	@ (80081a4 <tcp_slowtmr+0x58c>)
 8007fb4:	fba1 1303 	umull	r1, r3, r1, r3
 8007fb8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d911      	bls.n	8007fe2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007fbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fc0:	f004 fade 	bl	800c580 <tcp_keepalive>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8007fca:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d107      	bne.n	8007fe2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007fd8:	3301      	adds	r3, #1
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fde:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d011      	beq.n	800800e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007fea:	4b6c      	ldr	r3, [pc, #432]	@ (800819c <tcp_slowtmr+0x584>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	1ad2      	subs	r2, r2, r3
 8007ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	440b      	add	r3, r1
 8008002:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008004:	429a      	cmp	r2, r3
 8008006:	d302      	bcc.n	800800e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800800a:	f000 fde3 	bl	8008bd4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800800e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008010:	7d1b      	ldrb	r3, [r3, #20]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d10b      	bne.n	800802e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008016:	4b61      	ldr	r3, [pc, #388]	@ (800819c <tcp_slowtmr+0x584>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b28      	cmp	r3, #40	@ 0x28
 8008022:	d904      	bls.n	800802e <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008028:	3301      	adds	r3, #1
 800802a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008030:	7d1b      	ldrb	r3, [r3, #20]
 8008032:	2b09      	cmp	r3, #9
 8008034:	d10b      	bne.n	800804e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008036:	4b59      	ldr	r3, [pc, #356]	@ (800819c <tcp_slowtmr+0x584>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2bf0      	cmp	r3, #240	@ 0xf0
 8008042:	d904      	bls.n	800804e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008048:	3301      	adds	r3, #1
 800804a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800804e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008052:	2b00      	cmp	r3, #0
 8008054:	d060      	beq.n	8008118 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800805e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008060:	f000 fbfe 	bl	8008860 <tcp_pcb_purge>
      if (prev != NULL) {
 8008064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	d010      	beq.n	800808c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800806a:	4b50      	ldr	r3, [pc, #320]	@ (80081ac <tcp_slowtmr+0x594>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008070:	429a      	cmp	r2, r3
 8008072:	d106      	bne.n	8008082 <tcp_slowtmr+0x46a>
 8008074:	4b4e      	ldr	r3, [pc, #312]	@ (80081b0 <tcp_slowtmr+0x598>)
 8008076:	f240 526d 	movw	r2, #1389	@ 0x56d
 800807a:	494e      	ldr	r1, [pc, #312]	@ (80081b4 <tcp_slowtmr+0x59c>)
 800807c:	484e      	ldr	r0, [pc, #312]	@ (80081b8 <tcp_slowtmr+0x5a0>)
 800807e:	f008 f841 	bl	8010104 <iprintf>
        prev->next = pcb->next;
 8008082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	60da      	str	r2, [r3, #12]
 800808a:	e00f      	b.n	80080ac <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800808c:	4b47      	ldr	r3, [pc, #284]	@ (80081ac <tcp_slowtmr+0x594>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008092:	429a      	cmp	r2, r3
 8008094:	d006      	beq.n	80080a4 <tcp_slowtmr+0x48c>
 8008096:	4b46      	ldr	r3, [pc, #280]	@ (80081b0 <tcp_slowtmr+0x598>)
 8008098:	f240 5271 	movw	r2, #1393	@ 0x571
 800809c:	4947      	ldr	r1, [pc, #284]	@ (80081bc <tcp_slowtmr+0x5a4>)
 800809e:	4846      	ldr	r0, [pc, #280]	@ (80081b8 <tcp_slowtmr+0x5a0>)
 80080a0:	f008 f830 	bl	8010104 <iprintf>
        tcp_active_pcbs = pcb->next;
 80080a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	4a40      	ldr	r2, [pc, #256]	@ (80081ac <tcp_slowtmr+0x594>)
 80080aa:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80080ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d013      	beq.n	80080dc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80080b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80080bc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80080be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c0:	3304      	adds	r3, #4
 80080c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080c4:	8ad2      	ldrh	r2, [r2, #22]
 80080c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c8:	8b09      	ldrh	r1, [r1, #24]
 80080ca:	9102      	str	r1, [sp, #8]
 80080cc:	9201      	str	r2, [sp, #4]
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	462b      	mov	r3, r5
 80080d2:	4622      	mov	r2, r4
 80080d4:	4601      	mov	r1, r0
 80080d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080d8:	f004 f99e 	bl	800c418 <tcp_rst>
      err_arg = pcb->callback_arg;
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	7d1b      	ldrb	r3, [r3, #20]
 80080e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80080e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80080ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80080f2:	6838      	ldr	r0, [r7, #0]
 80080f4:	f7ff f9f2 	bl	80074dc <tcp_free>
      tcp_active_pcbs_changed = 0;
 80080f8:	4b31      	ldr	r3, [pc, #196]	@ (80081c0 <tcp_slowtmr+0x5a8>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <tcp_slowtmr+0x4f6>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f06f 010c 	mvn.w	r1, #12
 800810a:	68b8      	ldr	r0, [r7, #8]
 800810c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800810e:	4b2c      	ldr	r3, [pc, #176]	@ (80081c0 <tcp_slowtmr+0x5a8>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d037      	beq.n	8008186 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008116:	e592      	b.n	8007c3e <tcp_slowtmr+0x26>
      prev = pcb;
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800811c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008124:	7f1b      	ldrb	r3, [r3, #28]
 8008126:	3301      	adds	r3, #1
 8008128:	b2da      	uxtb	r2, r3
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	7f1a      	ldrb	r2, [r3, #28]
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	7f5b      	ldrb	r3, [r3, #29]
 8008136:	429a      	cmp	r2, r3
 8008138:	d325      	bcc.n	8008186 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	2200      	movs	r2, #0
 800813e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008140:	4b1f      	ldr	r3, [pc, #124]	@ (80081c0 <tcp_slowtmr+0x5a8>)
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <tcp_slowtmr+0x550>
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008158:	6912      	ldr	r2, [r2, #16]
 800815a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	4603      	mov	r3, r0
 8008162:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008166:	e002      	b.n	800816e <tcp_slowtmr+0x556>
 8008168:	2300      	movs	r3, #0
 800816a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800816e:	4b14      	ldr	r3, [pc, #80]	@ (80081c0 <tcp_slowtmr+0x5a8>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f47f ad62 	bne.w	8007c3c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008178:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008182:	f003 fb89 	bl	800b898 <tcp_output>
  while (pcb != NULL) {
 8008186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008188:	2b00      	cmp	r3, #0
 800818a:	f47f ad5e 	bne.w	8007c4a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008192:	4b0c      	ldr	r3, [pc, #48]	@ (80081c4 <tcp_slowtmr+0x5ac>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008198:	e069      	b.n	800826e <tcp_slowtmr+0x656>
 800819a:	bf00      	nop
 800819c:	20007cf8 	.word	0x20007cf8
 80081a0:	000a4cb8 	.word	0x000a4cb8
 80081a4:	10624dd3 	.word	0x10624dd3
 80081a8:	000124f8 	.word	0x000124f8
 80081ac:	20007d04 	.word	0x20007d04
 80081b0:	08011e6c 	.word	0x08011e6c
 80081b4:	080122a4 	.word	0x080122a4
 80081b8:	08011eb0 	.word	0x08011eb0
 80081bc:	080122d0 	.word	0x080122d0
 80081c0:	20007d0c 	.word	0x20007d0c
 80081c4:	20007d08 	.word	0x20007d08
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80081c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ca:	7d1b      	ldrb	r3, [r3, #20]
 80081cc:	2b0a      	cmp	r3, #10
 80081ce:	d006      	beq.n	80081de <tcp_slowtmr+0x5c6>
 80081d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008280 <tcp_slowtmr+0x668>)
 80081d2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80081d6:	492b      	ldr	r1, [pc, #172]	@ (8008284 <tcp_slowtmr+0x66c>)
 80081d8:	482b      	ldr	r0, [pc, #172]	@ (8008288 <tcp_slowtmr+0x670>)
 80081da:	f007 ff93 	bl	8010104 <iprintf>
    pcb_remove = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80081e4:	4b29      	ldr	r3, [pc, #164]	@ (800828c <tcp_slowtmr+0x674>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80081f0:	d904      	bls.n	80081fc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80081f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081f6:	3301      	adds	r3, #1
 80081f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80081fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008200:	2b00      	cmp	r3, #0
 8008202:	d02f      	beq.n	8008264 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008204:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008206:	f000 fb2b 	bl	8008860 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800820a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	d010      	beq.n	8008232 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008210:	4b1f      	ldr	r3, [pc, #124]	@ (8008290 <tcp_slowtmr+0x678>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008216:	429a      	cmp	r2, r3
 8008218:	d106      	bne.n	8008228 <tcp_slowtmr+0x610>
 800821a:	4b19      	ldr	r3, [pc, #100]	@ (8008280 <tcp_slowtmr+0x668>)
 800821c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008220:	491c      	ldr	r1, [pc, #112]	@ (8008294 <tcp_slowtmr+0x67c>)
 8008222:	4819      	ldr	r0, [pc, #100]	@ (8008288 <tcp_slowtmr+0x670>)
 8008224:	f007 ff6e 	bl	8010104 <iprintf>
        prev->next = pcb->next;
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822e:	60da      	str	r2, [r3, #12]
 8008230:	e00f      	b.n	8008252 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008232:	4b17      	ldr	r3, [pc, #92]	@ (8008290 <tcp_slowtmr+0x678>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008238:	429a      	cmp	r2, r3
 800823a:	d006      	beq.n	800824a <tcp_slowtmr+0x632>
 800823c:	4b10      	ldr	r3, [pc, #64]	@ (8008280 <tcp_slowtmr+0x668>)
 800823e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008242:	4915      	ldr	r1, [pc, #84]	@ (8008298 <tcp_slowtmr+0x680>)
 8008244:	4810      	ldr	r0, [pc, #64]	@ (8008288 <tcp_slowtmr+0x670>)
 8008246:	f007 ff5d 	bl	8010104 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800824a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	4a10      	ldr	r2, [pc, #64]	@ (8008290 <tcp_slowtmr+0x678>)
 8008250:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008254:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800825c:	69f8      	ldr	r0, [r7, #28]
 800825e:	f7ff f93d 	bl	80074dc <tcp_free>
 8008262:	e004      	b.n	800826e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008266:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800826e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1a9      	bne.n	80081c8 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	3730      	adds	r7, #48	@ 0x30
 800827a:	46bd      	mov	sp, r7
 800827c:	bdb0      	pop	{r4, r5, r7, pc}
 800827e:	bf00      	nop
 8008280:	08011e6c 	.word	0x08011e6c
 8008284:	080122fc 	.word	0x080122fc
 8008288:	08011eb0 	.word	0x08011eb0
 800828c:	20007cf8 	.word	0x20007cf8
 8008290:	20007d08 	.word	0x20007d08
 8008294:	0801232c 	.word	0x0801232c
 8008298:	08012354 	.word	0x08012354

0800829c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80082a2:	4b2d      	ldr	r3, [pc, #180]	@ (8008358 <tcp_fasttmr+0xbc>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	3301      	adds	r3, #1
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008358 <tcp_fasttmr+0xbc>)
 80082ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80082ae:	4b2b      	ldr	r3, [pc, #172]	@ (800835c <tcp_fasttmr+0xc0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80082b4:	e048      	b.n	8008348 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	7f9a      	ldrb	r2, [r3, #30]
 80082ba:	4b27      	ldr	r3, [pc, #156]	@ (8008358 <tcp_fasttmr+0xbc>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d03f      	beq.n	8008342 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80082c2:	4b25      	ldr	r3, [pc, #148]	@ (8008358 <tcp_fasttmr+0xbc>)
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8b5b      	ldrh	r3, [r3, #26]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d010      	beq.n	80082f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	8b5b      	ldrh	r3, [r3, #26]
 80082da:	f043 0302 	orr.w	r3, r3, #2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f003 fad7 	bl	800b898 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	8b5b      	ldrh	r3, [r3, #26]
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8b5b      	ldrh	r3, [r3, #26]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	8b5b      	ldrh	r3, [r3, #26]
 8008308:	f023 0308 	bic.w	r3, r3, #8
 800830c:	b29a      	uxth	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff fa76 	bl	8007804 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008326:	4b0e      	ldr	r3, [pc, #56]	@ (8008360 <tcp_fasttmr+0xc4>)
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f819 	bl	8008364 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008332:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <tcp_fasttmr+0xc4>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d000      	beq.n	800833c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800833a:	e7b8      	b.n	80082ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	607b      	str	r3, [r7, #4]
 8008340:	e002      	b.n	8008348 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1b3      	bne.n	80082b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20007d0e 	.word	0x20007d0e
 800835c:	20007d04 	.word	0x20007d04
 8008360:	20007d0c 	.word	0x20007d0c

08008364 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d109      	bne.n	8008386 <tcp_process_refused_data+0x22>
 8008372:	4b37      	ldr	r3, [pc, #220]	@ (8008450 <tcp_process_refused_data+0xec>)
 8008374:	f240 6209 	movw	r2, #1545	@ 0x609
 8008378:	4936      	ldr	r1, [pc, #216]	@ (8008454 <tcp_process_refused_data+0xf0>)
 800837a:	4837      	ldr	r0, [pc, #220]	@ (8008458 <tcp_process_refused_data+0xf4>)
 800837c:	f007 fec2 	bl	8010104 <iprintf>
 8008380:	f06f 030f 	mvn.w	r3, #15
 8008384:	e060      	b.n	8008448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800838a:	7b5b      	ldrb	r3, [r3, #13]
 800838c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008392:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <tcp_process_refused_data+0x58>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6918      	ldr	r0, [r3, #16]
 80083ae:	2300      	movs	r3, #0
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	47a0      	blx	r4
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]
 80083ba:	e007      	b.n	80083cc <tcp_process_refused_data+0x68>
 80083bc:	2300      	movs	r3, #0
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	2000      	movs	r0, #0
 80083c4:	f000 f8a4 	bl	8008510 <tcp_recv_null>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80083cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d12a      	bne.n	800842a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d033      	beq.n	8008446 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80083e6:	d005      	beq.n	80083f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ec:	3301      	adds	r3, #1
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <tcp_process_refused_data+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6918      	ldr	r0, [r3, #16]
 8008408:	2300      	movs	r3, #0
 800840a:	2200      	movs	r2, #0
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	47a0      	blx	r4
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	e001      	b.n	800841a <tcp_process_refused_data+0xb6>
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800841a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800841e:	f113 0f0d 	cmn.w	r3, #13
 8008422:	d110      	bne.n	8008446 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008424:	f06f 030c 	mvn.w	r3, #12
 8008428:	e00e      	b.n	8008448 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800842a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800842e:	f113 0f0d 	cmn.w	r3, #13
 8008432:	d102      	bne.n	800843a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008434:	f06f 030c 	mvn.w	r3, #12
 8008438:	e006      	b.n	8008448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008440:	f06f 0304 	mvn.w	r3, #4
 8008444:	e000      	b.n	8008448 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	bd90      	pop	{r4, r7, pc}
 8008450:	08011e6c 	.word	0x08011e6c
 8008454:	0801237c 	.word	0x0801237c
 8008458:	08011eb0 	.word	0x08011eb0

0800845c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008464:	e007      	b.n	8008476 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f80a 	bl	8008486 <tcp_seg_free>
    seg = next;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f4      	bne.n	8008466 <tcp_segs_free+0xa>
  }
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00c      	beq.n	80084ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fd6b 	bl	8006f7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	2003      	movs	r0, #3
 80084aa:	f7fd fdfb 	bl	80060a4 <memp_free>
  }
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d106      	bne.n	80084d4 <tcp_seg_copy+0x1c>
 80084c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008504 <tcp_seg_copy+0x4c>)
 80084c8:	f240 6282 	movw	r2, #1666	@ 0x682
 80084cc:	490e      	ldr	r1, [pc, #56]	@ (8008508 <tcp_seg_copy+0x50>)
 80084ce:	480f      	ldr	r0, [pc, #60]	@ (800850c <tcp_seg_copy+0x54>)
 80084d0:	f007 fe18 	bl	8010104 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80084d4:	2003      	movs	r0, #3
 80084d6:	f7fd fd75 	bl	8005fc4 <memp_malloc>
 80084da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <tcp_seg_copy+0x2e>
    return NULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e00a      	b.n	80084fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80084e6:	2214      	movs	r2, #20
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f007 ffdf 	bl	80104ae <memcpy>
  pbuf_ref(cseg->p);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fde1 	bl	80070bc <pbuf_ref>
  return cseg;
 80084fa:	68fb      	ldr	r3, [r7, #12]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	08011e6c 	.word	0x08011e6c
 8008508:	080123c0 	.word	0x080123c0
 800850c:	08011eb0 	.word	0x08011eb0

08008510 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <tcp_recv_null+0x28>
 8008524:	4b12      	ldr	r3, [pc, #72]	@ (8008570 <tcp_recv_null+0x60>)
 8008526:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800852a:	4912      	ldr	r1, [pc, #72]	@ (8008574 <tcp_recv_null+0x64>)
 800852c:	4812      	ldr	r0, [pc, #72]	@ (8008578 <tcp_recv_null+0x68>)
 800852e:	f007 fde9 	bl	8010104 <iprintf>
 8008532:	f06f 030f 	mvn.w	r3, #15
 8008536:	e016      	b.n	8008566 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	891b      	ldrh	r3, [r3, #8]
 8008542:	4619      	mov	r1, r3
 8008544:	68b8      	ldr	r0, [r7, #8]
 8008546:	f7ff fb17 	bl	8007b78 <tcp_recved>
    pbuf_free(p);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7fe fd16 	bl	8006f7c <pbuf_free>
 8008550:	e008      	b.n	8008564 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800855a:	68b8      	ldr	r0, [r7, #8]
 800855c:	f7ff f9bc 	bl	80078d8 <tcp_close>
 8008560:	4603      	mov	r3, r0
 8008562:	e000      	b.n	8008566 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	08011e6c 	.word	0x08011e6c
 8008574:	080123dc 	.word	0x080123dc
 8008578:	08011eb0 	.word	0x08011eb0

0800857c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858a:	2b00      	cmp	r3, #0
 800858c:	db01      	blt.n	8008592 <tcp_kill_prio+0x16>
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	e000      	b.n	8008594 <tcp_kill_prio+0x18>
 8008592:	237f      	movs	r3, #127	@ 0x7f
 8008594:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d034      	beq.n	8008606 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	3b01      	subs	r3, #1
 80085a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085aa:	4b19      	ldr	r3, [pc, #100]	@ (8008610 <tcp_kill_prio+0x94>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	e01f      	b.n	80085f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	7d5b      	ldrb	r3, [r3, #21]
 80085b6:	7afa      	ldrb	r2, [r7, #11]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d80c      	bhi.n	80085d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80085c0:	7afa      	ldrb	r2, [r7, #11]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d112      	bne.n	80085ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80085c6:	4b13      	ldr	r3, [pc, #76]	@ (8008614 <tcp_kill_prio+0x98>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d80a      	bhi.n	80085ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80085d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008614 <tcp_kill_prio+0x98>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	7d5b      	ldrb	r3, [r3, #21]
 80085ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1dc      	bne.n	80085b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80085fe:	6938      	ldr	r0, [r7, #16]
 8008600:	f7ff fa54 	bl	8007aac <tcp_abort>
 8008604:	e000      	b.n	8008608 <tcp_kill_prio+0x8c>
    return;
 8008606:	bf00      	nop
  }
}
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20007d04 	.word	0x20007d04
 8008614:	20007cf8 	.word	0x20007cf8

08008618 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	2b08      	cmp	r3, #8
 8008626:	d009      	beq.n	800863c <tcp_kill_state+0x24>
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	2b09      	cmp	r3, #9
 800862c:	d006      	beq.n	800863c <tcp_kill_state+0x24>
 800862e:	4b1a      	ldr	r3, [pc, #104]	@ (8008698 <tcp_kill_state+0x80>)
 8008630:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8008634:	4919      	ldr	r1, [pc, #100]	@ (800869c <tcp_kill_state+0x84>)
 8008636:	481a      	ldr	r0, [pc, #104]	@ (80086a0 <tcp_kill_state+0x88>)
 8008638:	f007 fd64 	bl	8010104 <iprintf>

  inactivity = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008644:	4b17      	ldr	r3, [pc, #92]	@ (80086a4 <tcp_kill_state+0x8c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	e017      	b.n	800867c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	7d1b      	ldrb	r3, [r3, #20]
 8008650:	79fa      	ldrb	r2, [r7, #7]
 8008652:	429a      	cmp	r2, r3
 8008654:	d10f      	bne.n	8008676 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008656:	4b14      	ldr	r3, [pc, #80]	@ (80086a8 <tcp_kill_state+0x90>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	429a      	cmp	r2, r3
 8008664:	d807      	bhi.n	8008676 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008666:	4b10      	ldr	r3, [pc, #64]	@ (80086a8 <tcp_kill_state+0x90>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e4      	bne.n	800864c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008688:	2100      	movs	r1, #0
 800868a:	6938      	ldr	r0, [r7, #16]
 800868c:	f7ff f950 	bl	8007930 <tcp_abandon>
  }
}
 8008690:	bf00      	nop
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	08011e6c 	.word	0x08011e6c
 800869c:	080123f8 	.word	0x080123f8
 80086a0:	08011eb0 	.word	0x08011eb0
 80086a4:	20007d04 	.word	0x20007d04
 80086a8:	20007cf8 	.word	0x20007cf8

080086ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <tcp_kill_timewait+0x58>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e012      	b.n	80086e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80086c2:	4b11      	ldr	r3, [pc, #68]	@ (8008708 <tcp_kill_timewait+0x5c>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d807      	bhi.n	80086e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80086d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <tcp_kill_timewait+0x5c>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e9      	bne.n	80086c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80086f4:	68b8      	ldr	r0, [r7, #8]
 80086f6:	f7ff f9d9 	bl	8007aac <tcp_abort>
  }
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20007d08 	.word	0x20007d08
 8008708:	20007cf8 	.word	0x20007cf8

0800870c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008712:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <tcp_handle_closepend+0x48>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008718:	e014      	b.n	8008744 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8b5b      	ldrh	r3, [r3, #26]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d009      	beq.n	8008740 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8b5b      	ldrh	r3, [r3, #26]
 8008730:	f023 0308 	bic.w	r3, r3, #8
 8008734:	b29a      	uxth	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff f862 	bl	8007804 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e7      	bne.n	800871a <tcp_handle_closepend+0xe>
  }
}
 800874a:	bf00      	nop
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20007d04 	.word	0x20007d04

08008758 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008762:	2001      	movs	r0, #1
 8008764:	f7fd fc2e 	bl	8005fc4 <memp_malloc>
 8008768:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d126      	bne.n	80087be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008770:	f7ff ffcc 	bl	800870c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008774:	f7ff ff9a 	bl	80086ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008778:	2001      	movs	r0, #1
 800877a:	f7fd fc23 	bl	8005fc4 <memp_malloc>
 800877e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d11b      	bne.n	80087be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008786:	2009      	movs	r0, #9
 8008788:	f7ff ff46 	bl	8008618 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800878c:	2001      	movs	r0, #1
 800878e:	f7fd fc19 	bl	8005fc4 <memp_malloc>
 8008792:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d111      	bne.n	80087be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800879a:	2008      	movs	r0, #8
 800879c:	f7ff ff3c 	bl	8008618 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087a0:	2001      	movs	r0, #1
 80087a2:	f7fd fc0f 	bl	8005fc4 <memp_malloc>
 80087a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d107      	bne.n	80087be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff fee3 	bl	800857c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087b6:	2001      	movs	r0, #1
 80087b8:	f7fd fc04 	bl	8005fc4 <memp_malloc>
 80087bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d03f      	beq.n	8008844 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80087c4:	229c      	movs	r2, #156	@ 0x9c
 80087c6:	2100      	movs	r1, #0
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f007 fdfb 	bl	80103c4 <memset>
    pcb->prio = prio;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	79fa      	ldrb	r2, [r7, #7]
 80087d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80087da:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80087e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	22ff      	movs	r2, #255	@ 0xff
 80087f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80087fa:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2206      	movs	r2, #6
 8008800:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2206      	movs	r2, #6
 8008808:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008810:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800881a:	4b0d      	ldr	r3, [pc, #52]	@ (8008850 <tcp_alloc+0xf8>)
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008822:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <tcp_alloc+0xfc>)
 8008824:	781a      	ldrb	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008830:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4a08      	ldr	r2, [pc, #32]	@ (8008858 <tcp_alloc+0x100>)
 8008838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4a07      	ldr	r2, [pc, #28]	@ (800885c <tcp_alloc+0x104>)
 8008840:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008844:	68fb      	ldr	r3, [r7, #12]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20007cf8 	.word	0x20007cf8
 8008854:	20007d0e 	.word	0x20007d0e
 8008858:	08008511 	.word	0x08008511
 800885c:	006ddd00 	.word	0x006ddd00

08008860 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d107      	bne.n	800887e <tcp_pcb_purge+0x1e>
 800886e:	4b21      	ldr	r3, [pc, #132]	@ (80088f4 <tcp_pcb_purge+0x94>)
 8008870:	f640 0251 	movw	r2, #2129	@ 0x851
 8008874:	4920      	ldr	r1, [pc, #128]	@ (80088f8 <tcp_pcb_purge+0x98>)
 8008876:	4821      	ldr	r0, [pc, #132]	@ (80088fc <tcp_pcb_purge+0x9c>)
 8008878:	f007 fc44 	bl	8010104 <iprintf>
 800887c:	e037      	b.n	80088ee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	7d1b      	ldrb	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d033      	beq.n	80088ee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800888a:	2b0a      	cmp	r3, #10
 800888c:	d02f      	beq.n	80088ee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008892:	2b01      	cmp	r3, #1
 8008894:	d02b      	beq.n	80088ee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fb6a 	bl	8006f7c <pbuf_free>
      pcb->refused_data = NULL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f98c 	bl	8008bd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088c2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fdc7 	bl	800845c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fdc2 	bl	800845c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	08011e6c 	.word	0x08011e6c
 80088f8:	080124b8 	.word	0x080124b8
 80088fc:	08011eb0 	.word	0x08011eb0

08008900 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d106      	bne.n	800891e <tcp_pcb_remove+0x1e>
 8008910:	4b3e      	ldr	r3, [pc, #248]	@ (8008a0c <tcp_pcb_remove+0x10c>)
 8008912:	f640 0283 	movw	r2, #2179	@ 0x883
 8008916:	493e      	ldr	r1, [pc, #248]	@ (8008a10 <tcp_pcb_remove+0x110>)
 8008918:	483e      	ldr	r0, [pc, #248]	@ (8008a14 <tcp_pcb_remove+0x114>)
 800891a:	f007 fbf3 	bl	8010104 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <tcp_pcb_remove+0x32>
 8008924:	4b39      	ldr	r3, [pc, #228]	@ (8008a0c <tcp_pcb_remove+0x10c>)
 8008926:	f640 0284 	movw	r2, #2180	@ 0x884
 800892a:	493b      	ldr	r1, [pc, #236]	@ (8008a18 <tcp_pcb_remove+0x118>)
 800892c:	4839      	ldr	r0, [pc, #228]	@ (8008a14 <tcp_pcb_remove+0x114>)
 800892e:	f007 fbe9 	bl	8010104 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	d105      	bne.n	8008948 <tcp_pcb_remove+0x48>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	e013      	b.n	8008970 <tcp_pcb_remove+0x70>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	e00c      	b.n	800896a <tcp_pcb_remove+0x6a>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d104      	bne.n	8008964 <tcp_pcb_remove+0x64>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	60da      	str	r2, [r3, #12]
 8008962:	e005      	b.n	8008970 <tcp_pcb_remove+0x70>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1ef      	bne.n	8008950 <tcp_pcb_remove+0x50>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008976:	6838      	ldr	r0, [r7, #0]
 8008978:	f7ff ff72 	bl	8008860 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	7d1b      	ldrb	r3, [r3, #20]
 8008980:	2b0a      	cmp	r3, #10
 8008982:	d013      	beq.n	80089ac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008988:	2b01      	cmp	r3, #1
 800898a:	d00f      	beq.n	80089ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	8b5b      	ldrh	r3, [r3, #26]
 8008990:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008994:	2b00      	cmp	r3, #0
 8008996:	d009      	beq.n	80089ac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	8b5b      	ldrh	r3, [r3, #26]
 800899c:	f043 0302 	orr.w	r3, r3, #2
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089a6:	6838      	ldr	r0, [r7, #0]
 80089a8:	f002 ff76 	bl	800b898 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	7d1b      	ldrb	r3, [r3, #20]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d020      	beq.n	80089f6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <tcp_pcb_remove+0xca>
 80089bc:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <tcp_pcb_remove+0x10c>)
 80089be:	f640 0293 	movw	r2, #2195	@ 0x893
 80089c2:	4916      	ldr	r1, [pc, #88]	@ (8008a1c <tcp_pcb_remove+0x11c>)
 80089c4:	4813      	ldr	r0, [pc, #76]	@ (8008a14 <tcp_pcb_remove+0x114>)
 80089c6:	f007 fb9d 	bl	8010104 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d006      	beq.n	80089e0 <tcp_pcb_remove+0xe0>
 80089d2:	4b0e      	ldr	r3, [pc, #56]	@ (8008a0c <tcp_pcb_remove+0x10c>)
 80089d4:	f640 0294 	movw	r2, #2196	@ 0x894
 80089d8:	4911      	ldr	r1, [pc, #68]	@ (8008a20 <tcp_pcb_remove+0x120>)
 80089da:	480e      	ldr	r0, [pc, #56]	@ (8008a14 <tcp_pcb_remove+0x114>)
 80089dc:	f007 fb92 	bl	8010104 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d006      	beq.n	80089f6 <tcp_pcb_remove+0xf6>
 80089e8:	4b08      	ldr	r3, [pc, #32]	@ (8008a0c <tcp_pcb_remove+0x10c>)
 80089ea:	f640 0296 	movw	r2, #2198	@ 0x896
 80089ee:	490d      	ldr	r1, [pc, #52]	@ (8008a24 <tcp_pcb_remove+0x124>)
 80089f0:	4808      	ldr	r0, [pc, #32]	@ (8008a14 <tcp_pcb_remove+0x114>)
 80089f2:	f007 fb87 	bl	8010104 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2200      	movs	r2, #0
 80089fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08011e6c 	.word	0x08011e6c
 8008a10:	080124d4 	.word	0x080124d4
 8008a14:	08011eb0 	.word	0x08011eb0
 8008a18:	080124f0 	.word	0x080124f0
 8008a1c:	08012510 	.word	0x08012510
 8008a20:	08012528 	.word	0x08012528
 8008a24:	08012544 	.word	0x08012544

08008a28 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d106      	bne.n	8008a44 <tcp_next_iss+0x1c>
 8008a36:	4b0a      	ldr	r3, [pc, #40]	@ (8008a60 <tcp_next_iss+0x38>)
 8008a38:	f640 02af 	movw	r2, #2223	@ 0x8af
 8008a3c:	4909      	ldr	r1, [pc, #36]	@ (8008a64 <tcp_next_iss+0x3c>)
 8008a3e:	480a      	ldr	r0, [pc, #40]	@ (8008a68 <tcp_next_iss+0x40>)
 8008a40:	f007 fb60 	bl	8010104 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008a44:	4b09      	ldr	r3, [pc, #36]	@ (8008a6c <tcp_next_iss+0x44>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	4b09      	ldr	r3, [pc, #36]	@ (8008a70 <tcp_next_iss+0x48>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	4a07      	ldr	r2, [pc, #28]	@ (8008a6c <tcp_next_iss+0x44>)
 8008a50:	6013      	str	r3, [r2, #0]
  return iss;
 8008a52:	4b06      	ldr	r3, [pc, #24]	@ (8008a6c <tcp_next_iss+0x44>)
 8008a54:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	08011e6c 	.word	0x08011e6c
 8008a64:	0801255c 	.word	0x0801255c
 8008a68:	08011eb0 	.word	0x08011eb0
 8008a6c:	20000068 	.word	0x20000068
 8008a70:	20007cf8 	.word	0x20007cf8

08008a74 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <tcp_eff_send_mss_netif+0x22>
 8008a88:	4b14      	ldr	r3, [pc, #80]	@ (8008adc <tcp_eff_send_mss_netif+0x68>)
 8008a8a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8008a8e:	4914      	ldr	r1, [pc, #80]	@ (8008ae0 <tcp_eff_send_mss_netif+0x6c>)
 8008a90:	4814      	ldr	r0, [pc, #80]	@ (8008ae4 <tcp_eff_send_mss_netif+0x70>)
 8008a92:	f007 fb37 	bl	8010104 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008a9c:	89fb      	ldrh	r3, [r7, #14]
 8008a9e:	e019      	b.n	8008ad4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008aa4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008aa6:	8afb      	ldrh	r3, [r7, #22]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d012      	beq.n	8008ad2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008aac:	2328      	movs	r3, #40	@ 0x28
 8008aae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008ab0:	8afa      	ldrh	r2, [r7, #22]
 8008ab2:	8abb      	ldrh	r3, [r7, #20]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d904      	bls.n	8008ac2 <tcp_eff_send_mss_netif+0x4e>
 8008ab8:	8afa      	ldrh	r2, [r7, #22]
 8008aba:	8abb      	ldrh	r3, [r7, #20]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	e000      	b.n	8008ac4 <tcp_eff_send_mss_netif+0x50>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008ac6:	8a7a      	ldrh	r2, [r7, #18]
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
 8008aca:	4293      	cmp	r3, r2
 8008acc:	bf28      	it	cs
 8008ace:	4613      	movcs	r3, r2
 8008ad0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008ad2:	89fb      	ldrh	r3, [r7, #14]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	08011e6c 	.word	0x08011e6c
 8008ae0:	08012578 	.word	0x08012578
 8008ae4:	08011eb0 	.word	0x08011eb0

08008ae8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11d      	bne.n	8008b38 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8008afc:	4b12      	ldr	r3, [pc, #72]	@ (8008b48 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008afe:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008b02:	4912      	ldr	r1, [pc, #72]	@ (8008b4c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8008b04:	4812      	ldr	r0, [pc, #72]	@ (8008b50 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8008b06:	f007 fafd 	bl	8010104 <iprintf>

  while (pcb != NULL) {
 8008b0a:	e015      	b.n	8008b38 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d10c      	bne.n	8008b32 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	480c      	ldr	r0, [pc, #48]	@ (8008b54 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8008b22:	f007 faef 	bl	8010104 <iprintf>
      tcp_abort(pcb);
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7fe ffc0 	bl	8007aac <tcp_abort>
      pcb = next;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	e002      	b.n	8008b38 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e6      	bne.n	8008b0c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	08011e6c 	.word	0x08011e6c
 8008b4c:	080125a0 	.word	0x080125a0
 8008b50:	08011eb0 	.word	0x08011eb0
 8008b54:	080125d4 	.word	0x080125d4

08008b58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d02a      	beq.n	8008bbe <tcp_netif_ip_addr_changed+0x66>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d026      	beq.n	8008bbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008b70:	4b15      	ldr	r3, [pc, #84]	@ (8008bc8 <tcp_netif_ip_addr_changed+0x70>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff ffb6 	bl	8008ae8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008b7c:	4b13      	ldr	r3, [pc, #76]	@ (8008bcc <tcp_netif_ip_addr_changed+0x74>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff ffb0 	bl	8008ae8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d017      	beq.n	8008bbe <tcp_netif_ip_addr_changed+0x66>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d013      	beq.n	8008bbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b96:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd0 <tcp_netif_ip_addr_changed+0x78>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e00c      	b.n	8008bb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d103      	bne.n	8008bb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1ef      	bne.n	8008b9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20007d04 	.word	0x20007d04
 8008bcc:	20007cfc 	.word	0x20007cfc
 8008bd0:	20007d00 	.word	0x20007d00

08008bd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fc37 	bl	800845c <tcp_segs_free>
    pcb->ooseq = NULL;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008bfc:	b590      	push	{r4, r7, lr}
 8008bfe:	b08d      	sub	sp, #52	@ 0x34
 8008c00:	af04      	add	r7, sp, #16
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d105      	bne.n	8008c18 <tcp_input+0x1c>
 8008c0c:	4b9b      	ldr	r3, [pc, #620]	@ (8008e7c <tcp_input+0x280>)
 8008c0e:	2283      	movs	r2, #131	@ 0x83
 8008c10:	499b      	ldr	r1, [pc, #620]	@ (8008e80 <tcp_input+0x284>)
 8008c12:	489c      	ldr	r0, [pc, #624]	@ (8008e84 <tcp_input+0x288>)
 8008c14:	f007 fa76 	bl	8010104 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	4a9a      	ldr	r2, [pc, #616]	@ (8008e88 <tcp_input+0x28c>)
 8008c1e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	895b      	ldrh	r3, [r3, #10]
 8008c24:	2b13      	cmp	r3, #19
 8008c26:	f240 83d1 	bls.w	80093cc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c2a:	4b98      	ldr	r3, [pc, #608]	@ (8008e8c <tcp_input+0x290>)
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	4a97      	ldr	r2, [pc, #604]	@ (8008e8c <tcp_input+0x290>)
 8008c30:	6812      	ldr	r2, [r2, #0]
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f006 f9a5 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 83c7 	bne.w	80093d0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008c42:	4b92      	ldr	r3, [pc, #584]	@ (8008e8c <tcp_input+0x290>)
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c4a:	2be0      	cmp	r3, #224	@ 0xe0
 8008c4c:	f000 83c0 	beq.w	80093d0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008c50:	4b8d      	ldr	r3, [pc, #564]	@ (8008e88 <tcp_input+0x28c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	899b      	ldrh	r3, [r3, #12]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fc fd3f 	bl	80056dc <lwip_htons>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	0b1b      	lsrs	r3, r3, #12
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008c6a:	7cbb      	ldrb	r3, [r7, #18]
 8008c6c:	2b13      	cmp	r3, #19
 8008c6e:	f240 83b1 	bls.w	80093d4 <tcp_input+0x7d8>
 8008c72:	7cbb      	ldrb	r3, [r7, #18]
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	891b      	ldrh	r3, [r3, #8]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	f200 83aa 	bhi.w	80093d4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008c80:	7cbb      	ldrb	r3, [r7, #18]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b14      	subs	r3, #20
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	4b81      	ldr	r3, [pc, #516]	@ (8008e90 <tcp_input+0x294>)
 8008c8a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008c8c:	4b81      	ldr	r3, [pc, #516]	@ (8008e94 <tcp_input+0x298>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	895a      	ldrh	r2, [r3, #10]
 8008c96:	7cbb      	ldrb	r3, [r7, #18]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d309      	bcc.n	8008cb2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8008e90 <tcp_input+0x294>)
 8008ca0:	881a      	ldrh	r2, [r3, #0]
 8008ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8008e98 <tcp_input+0x29c>)
 8008ca4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008ca6:	7cbb      	ldrb	r3, [r7, #18]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fe f8e0 	bl	8006e70 <pbuf_remove_header>
 8008cb0:	e04e      	b.n	8008d50 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d105      	bne.n	8008cc6 <tcp_input+0xca>
 8008cba:	4b70      	ldr	r3, [pc, #448]	@ (8008e7c <tcp_input+0x280>)
 8008cbc:	22c2      	movs	r2, #194	@ 0xc2
 8008cbe:	4977      	ldr	r1, [pc, #476]	@ (8008e9c <tcp_input+0x2a0>)
 8008cc0:	4870      	ldr	r0, [pc, #448]	@ (8008e84 <tcp_input+0x288>)
 8008cc2:	f007 fa1f 	bl	8010104 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008cc6:	2114      	movs	r1, #20
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7fe f8d1 	bl	8006e70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	895a      	ldrh	r2, [r3, #10]
 8008cd2:	4b71      	ldr	r3, [pc, #452]	@ (8008e98 <tcp_input+0x29c>)
 8008cd4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8008e90 <tcp_input+0x294>)
 8008cd8:	881a      	ldrh	r2, [r3, #0]
 8008cda:	4b6f      	ldr	r3, [pc, #444]	@ (8008e98 <tcp_input+0x29c>)
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8008e98 <tcp_input+0x29c>)
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7fe f8c1 	bl	8006e70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	895b      	ldrh	r3, [r3, #10]
 8008cf4:	8a3a      	ldrh	r2, [r7, #16]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	f200 836e 	bhi.w	80093d8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4a64      	ldr	r2, [pc, #400]	@ (8008e94 <tcp_input+0x298>)
 8008d04:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	8a3a      	ldrh	r2, [r7, #16]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe f8ae 	bl	8006e70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	891a      	ldrh	r2, [r3, #8]
 8008d18:	8a3b      	ldrh	r3, [r7, #16]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	895b      	ldrh	r3, [r3, #10]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <tcp_input+0x13a>
 8008d2a:	4b54      	ldr	r3, [pc, #336]	@ (8008e7c <tcp_input+0x280>)
 8008d2c:	22df      	movs	r2, #223	@ 0xdf
 8008d2e:	495c      	ldr	r1, [pc, #368]	@ (8008ea0 <tcp_input+0x2a4>)
 8008d30:	4854      	ldr	r0, [pc, #336]	@ (8008e84 <tcp_input+0x288>)
 8008d32:	f007 f9e7 	bl	8010104 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	891a      	ldrh	r2, [r3, #8]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	891b      	ldrh	r3, [r3, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d005      	beq.n	8008d50 <tcp_input+0x154>
 8008d44:	4b4d      	ldr	r3, [pc, #308]	@ (8008e7c <tcp_input+0x280>)
 8008d46:	22e0      	movs	r2, #224	@ 0xe0
 8008d48:	4956      	ldr	r1, [pc, #344]	@ (8008ea4 <tcp_input+0x2a8>)
 8008d4a:	484e      	ldr	r0, [pc, #312]	@ (8008e84 <tcp_input+0x288>)
 8008d4c:	f007 f9da 	bl	8010104 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008d50:	4b4d      	ldr	r3, [pc, #308]	@ (8008e88 <tcp_input+0x28c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	4a4b      	ldr	r2, [pc, #300]	@ (8008e88 <tcp_input+0x28c>)
 8008d5a:	6814      	ldr	r4, [r2, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fc fcbd 	bl	80056dc <lwip_htons>
 8008d62:	4603      	mov	r3, r0
 8008d64:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008d66:	4b48      	ldr	r3, [pc, #288]	@ (8008e88 <tcp_input+0x28c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	885b      	ldrh	r3, [r3, #2]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	4a46      	ldr	r2, [pc, #280]	@ (8008e88 <tcp_input+0x28c>)
 8008d70:	6814      	ldr	r4, [r2, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fc fcb2 	bl	80056dc <lwip_htons>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008d7c:	4b42      	ldr	r3, [pc, #264]	@ (8008e88 <tcp_input+0x28c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	4a41      	ldr	r2, [pc, #260]	@ (8008e88 <tcp_input+0x28c>)
 8008d84:	6814      	ldr	r4, [r2, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fc fcbe 	bl	8005708 <lwip_htonl>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	6063      	str	r3, [r4, #4]
 8008d90:	6863      	ldr	r3, [r4, #4]
 8008d92:	4a45      	ldr	r2, [pc, #276]	@ (8008ea8 <tcp_input+0x2ac>)
 8008d94:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d96:	4b3c      	ldr	r3, [pc, #240]	@ (8008e88 <tcp_input+0x28c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8008e88 <tcp_input+0x28c>)
 8008d9e:	6814      	ldr	r4, [r2, #0]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fc fcb1 	bl	8005708 <lwip_htonl>
 8008da6:	4603      	mov	r3, r0
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	4a3f      	ldr	r2, [pc, #252]	@ (8008eac <tcp_input+0x2b0>)
 8008dae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008db0:	4b35      	ldr	r3, [pc, #212]	@ (8008e88 <tcp_input+0x28c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	89db      	ldrh	r3, [r3, #14]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	4a33      	ldr	r2, [pc, #204]	@ (8008e88 <tcp_input+0x28c>)
 8008dba:	6814      	ldr	r4, [r2, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fc fc8d 	bl	80056dc <lwip_htons>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008dc6:	4b30      	ldr	r3, [pc, #192]	@ (8008e88 <tcp_input+0x28c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	899b      	ldrh	r3, [r3, #12]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fc fc84 	bl	80056dc <lwip_htons>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	4b34      	ldr	r3, [pc, #208]	@ (8008eb0 <tcp_input+0x2b4>)
 8008de0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	891a      	ldrh	r2, [r3, #8]
 8008de6:	4b33      	ldr	r3, [pc, #204]	@ (8008eb4 <tcp_input+0x2b8>)
 8008de8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008dea:	4b31      	ldr	r3, [pc, #196]	@ (8008eb0 <tcp_input+0x2b4>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00c      	beq.n	8008e10 <tcp_input+0x214>
    tcplen++;
 8008df6:	4b2f      	ldr	r3, [pc, #188]	@ (8008eb4 <tcp_input+0x2b8>)
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8008eb4 <tcp_input+0x2b8>)
 8008e00:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	891a      	ldrh	r2, [r3, #8]
 8008e06:	4b2b      	ldr	r3, [pc, #172]	@ (8008eb4 <tcp_input+0x2b8>)
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	f200 82e6 	bhi.w	80093dc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e14:	4b28      	ldr	r3, [pc, #160]	@ (8008eb8 <tcp_input+0x2bc>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	e09d      	b.n	8008f58 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	7d1b      	ldrb	r3, [r3, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d105      	bne.n	8008e30 <tcp_input+0x234>
 8008e24:	4b15      	ldr	r3, [pc, #84]	@ (8008e7c <tcp_input+0x280>)
 8008e26:	22fb      	movs	r2, #251	@ 0xfb
 8008e28:	4924      	ldr	r1, [pc, #144]	@ (8008ebc <tcp_input+0x2c0>)
 8008e2a:	4816      	ldr	r0, [pc, #88]	@ (8008e84 <tcp_input+0x288>)
 8008e2c:	f007 f96a 	bl	8010104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	7d1b      	ldrb	r3, [r3, #20]
 8008e34:	2b0a      	cmp	r3, #10
 8008e36:	d105      	bne.n	8008e44 <tcp_input+0x248>
 8008e38:	4b10      	ldr	r3, [pc, #64]	@ (8008e7c <tcp_input+0x280>)
 8008e3a:	22fc      	movs	r2, #252	@ 0xfc
 8008e3c:	4920      	ldr	r1, [pc, #128]	@ (8008ec0 <tcp_input+0x2c4>)
 8008e3e:	4811      	ldr	r0, [pc, #68]	@ (8008e84 <tcp_input+0x288>)
 8008e40:	f007 f960 	bl	8010104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	7d1b      	ldrb	r3, [r3, #20]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d105      	bne.n	8008e58 <tcp_input+0x25c>
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e7c <tcp_input+0x280>)
 8008e4e:	22fd      	movs	r2, #253	@ 0xfd
 8008e50:	491c      	ldr	r1, [pc, #112]	@ (8008ec4 <tcp_input+0x2c8>)
 8008e52:	480c      	ldr	r0, [pc, #48]	@ (8008e84 <tcp_input+0x288>)
 8008e54:	f007 f956 	bl	8010104 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	7a1b      	ldrb	r3, [r3, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d033      	beq.n	8008ec8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	7a1a      	ldrb	r2, [r3, #8]
 8008e64:	4b09      	ldr	r3, [pc, #36]	@ (8008e8c <tcp_input+0x290>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d029      	beq.n	8008ec8 <tcp_input+0x2cc>
      prev = pcb;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	61fb      	str	r3, [r7, #28]
      continue;
 8008e78:	e06b      	b.n	8008f52 <tcp_input+0x356>
 8008e7a:	bf00      	nop
 8008e7c:	080125fc 	.word	0x080125fc
 8008e80:	08012630 	.word	0x08012630
 8008e84:	08012648 	.word	0x08012648
 8008e88:	20007d24 	.word	0x20007d24
 8008e8c:	20004d9c 	.word	0x20004d9c
 8008e90:	20007d28 	.word	0x20007d28
 8008e94:	20007d2c 	.word	0x20007d2c
 8008e98:	20007d2a 	.word	0x20007d2a
 8008e9c:	08012670 	.word	0x08012670
 8008ea0:	08012680 	.word	0x08012680
 8008ea4:	0801268c 	.word	0x0801268c
 8008ea8:	20007d34 	.word	0x20007d34
 8008eac:	20007d38 	.word	0x20007d38
 8008eb0:	20007d40 	.word	0x20007d40
 8008eb4:	20007d3e 	.word	0x20007d3e
 8008eb8:	20007d04 	.word	0x20007d04
 8008ebc:	080126ac 	.word	0x080126ac
 8008ec0:	080126d4 	.word	0x080126d4
 8008ec4:	08012700 	.word	0x08012700
    }

    if (pcb->remote_port == tcphdr->src &&
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	8b1a      	ldrh	r2, [r3, #24]
 8008ecc:	4b72      	ldr	r3, [pc, #456]	@ (8009098 <tcp_input+0x49c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d13a      	bne.n	8008f4e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	8ada      	ldrh	r2, [r3, #22]
 8008edc:	4b6e      	ldr	r3, [pc, #440]	@ (8009098 <tcp_input+0x49c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	885b      	ldrh	r3, [r3, #2]
 8008ee2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d132      	bne.n	8008f4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4b6b      	ldr	r3, [pc, #428]	@ (800909c <tcp_input+0x4a0>)
 8008eee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d12c      	bne.n	8008f4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4b68      	ldr	r3, [pc, #416]	@ (800909c <tcp_input+0x4a0>)
 8008efa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d126      	bne.n	8008f4e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d106      	bne.n	8008f18 <tcp_input+0x31c>
 8008f0a:	4b65      	ldr	r3, [pc, #404]	@ (80090a0 <tcp_input+0x4a4>)
 8008f0c:	f240 120d 	movw	r2, #269	@ 0x10d
 8008f10:	4964      	ldr	r1, [pc, #400]	@ (80090a4 <tcp_input+0x4a8>)
 8008f12:	4865      	ldr	r0, [pc, #404]	@ (80090a8 <tcp_input+0x4ac>)
 8008f14:	f007 f8f6 	bl	8010104 <iprintf>
      if (prev != NULL) {
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <tcp_input+0x338>
        prev->next = pcb->next;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008f26:	4b61      	ldr	r3, [pc, #388]	@ (80090ac <tcp_input+0x4b0>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80090ac <tcp_input+0x4b0>)
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d111      	bne.n	8008f62 <tcp_input+0x366>
 8008f3e:	4b58      	ldr	r3, [pc, #352]	@ (80090a0 <tcp_input+0x4a4>)
 8008f40:	f240 1215 	movw	r2, #277	@ 0x115
 8008f44:	495a      	ldr	r1, [pc, #360]	@ (80090b0 <tcp_input+0x4b4>)
 8008f46:	4858      	ldr	r0, [pc, #352]	@ (80090a8 <tcp_input+0x4ac>)
 8008f48:	f007 f8dc 	bl	8010104 <iprintf>
      break;
 8008f4c:	e009      	b.n	8008f62 <tcp_input+0x366>
    }
    prev = pcb;
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f47f af5e 	bne.w	8008e1c <tcp_input+0x220>
 8008f60:	e000      	b.n	8008f64 <tcp_input+0x368>
      break;
 8008f62:	bf00      	nop
  }

  if (pcb == NULL) {
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f040 80aa 	bne.w	80090c0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f6c:	4b51      	ldr	r3, [pc, #324]	@ (80090b4 <tcp_input+0x4b8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	e03f      	b.n	8008ff4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	7d1b      	ldrb	r3, [r3, #20]
 8008f78:	2b0a      	cmp	r3, #10
 8008f7a:	d006      	beq.n	8008f8a <tcp_input+0x38e>
 8008f7c:	4b48      	ldr	r3, [pc, #288]	@ (80090a0 <tcp_input+0x4a4>)
 8008f7e:	f240 121f 	movw	r2, #287	@ 0x11f
 8008f82:	494d      	ldr	r1, [pc, #308]	@ (80090b8 <tcp_input+0x4bc>)
 8008f84:	4848      	ldr	r0, [pc, #288]	@ (80090a8 <tcp_input+0x4ac>)
 8008f86:	f007 f8bd 	bl	8010104 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	7a1b      	ldrb	r3, [r3, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d009      	beq.n	8008fa6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	7a1a      	ldrb	r2, [r3, #8]
 8008f96:	4b41      	ldr	r3, [pc, #260]	@ (800909c <tcp_input+0x4a0>)
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d122      	bne.n	8008fec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	8b1a      	ldrh	r2, [r3, #24]
 8008faa:	4b3b      	ldr	r3, [pc, #236]	@ (8009098 <tcp_input+0x49c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d11b      	bne.n	8008fee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	8ada      	ldrh	r2, [r3, #22]
 8008fba:	4b37      	ldr	r3, [pc, #220]	@ (8009098 <tcp_input+0x49c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	885b      	ldrh	r3, [r3, #2]
 8008fc0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d113      	bne.n	8008fee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	4b34      	ldr	r3, [pc, #208]	@ (800909c <tcp_input+0x4a0>)
 8008fcc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d10d      	bne.n	8008fee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	4b31      	ldr	r3, [pc, #196]	@ (800909c <tcp_input+0x4a0>)
 8008fd8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d107      	bne.n	8008fee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008fde:	69b8      	ldr	r0, [r7, #24]
 8008fe0:	f000 fb56 	bl	8009690 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7fd ffc9 	bl	8006f7c <pbuf_free>
        return;
 8008fea:	e1fd      	b.n	80093e8 <tcp_input+0x7ec>
        continue;
 8008fec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	61bb      	str	r3, [r7, #24]
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1bc      	bne.n	8008f74 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80090bc <tcp_input+0x4c0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	e02a      	b.n	800905c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	7a1b      	ldrb	r3, [r3, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00c      	beq.n	8009028 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	7a1a      	ldrb	r2, [r3, #8]
 8009012:	4b22      	ldr	r3, [pc, #136]	@ (800909c <tcp_input+0x4a0>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800901a:	3301      	adds	r3, #1
 800901c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800901e:	429a      	cmp	r2, r3
 8009020:	d002      	beq.n	8009028 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	61fb      	str	r3, [r7, #28]
        continue;
 8009026:	e016      	b.n	8009056 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	8ada      	ldrh	r2, [r3, #22]
 800902c:	4b1a      	ldr	r3, [pc, #104]	@ (8009098 <tcp_input+0x49c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	885b      	ldrh	r3, [r3, #2]
 8009032:	b29b      	uxth	r3, r3
 8009034:	429a      	cmp	r2, r3
 8009036:	d10c      	bne.n	8009052 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	4b17      	ldr	r3, [pc, #92]	@ (800909c <tcp_input+0x4a0>)
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	429a      	cmp	r2, r3
 8009042:	d00f      	beq.n	8009064 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00d      	beq.n	8009066 <tcp_input+0x46a>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1d1      	bne.n	8009006 <tcp_input+0x40a>
 8009062:	e000      	b.n	8009066 <tcp_input+0x46a>
            break;
 8009064:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d029      	beq.n	80090c0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800907a:	4b10      	ldr	r3, [pc, #64]	@ (80090bc <tcp_input+0x4c0>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009082:	4a0e      	ldr	r2, [pc, #56]	@ (80090bc <tcp_input+0x4c0>)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009088:	6978      	ldr	r0, [r7, #20]
 800908a:	f000 fa03 	bl	8009494 <tcp_listen_input>
      }
      pbuf_free(p);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7fd ff74 	bl	8006f7c <pbuf_free>
      return;
 8009094:	e1a8      	b.n	80093e8 <tcp_input+0x7ec>
 8009096:	bf00      	nop
 8009098:	20007d24 	.word	0x20007d24
 800909c:	20004d9c 	.word	0x20004d9c
 80090a0:	080125fc 	.word	0x080125fc
 80090a4:	08012728 	.word	0x08012728
 80090a8:	08012648 	.word	0x08012648
 80090ac:	20007d04 	.word	0x20007d04
 80090b0:	08012754 	.word	0x08012754
 80090b4:	20007d08 	.word	0x20007d08
 80090b8:	08012780 	.word	0x08012780
 80090bc:	20007d00 	.word	0x20007d00
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 8158 	beq.w	8009378 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80090c8:	4b95      	ldr	r3, [pc, #596]	@ (8009320 <tcp_input+0x724>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	891a      	ldrh	r2, [r3, #8]
 80090d2:	4b93      	ldr	r3, [pc, #588]	@ (8009320 <tcp_input+0x724>)
 80090d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80090d6:	4a92      	ldr	r2, [pc, #584]	@ (8009320 <tcp_input+0x724>)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80090dc:	4b91      	ldr	r3, [pc, #580]	@ (8009324 <tcp_input+0x728>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a8f      	ldr	r2, [pc, #572]	@ (8009320 <tcp_input+0x724>)
 80090e2:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80090e4:	4b90      	ldr	r3, [pc, #576]	@ (8009328 <tcp_input+0x72c>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80090ea:	4b90      	ldr	r3, [pc, #576]	@ (800932c <tcp_input+0x730>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80090f0:	4b8f      	ldr	r3, [pc, #572]	@ (8009330 <tcp_input+0x734>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80090f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009334 <tcp_input+0x738>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d006      	beq.n	8009110 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	7b5b      	ldrb	r3, [r3, #13]
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	b2da      	uxtb	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009114:	2b00      	cmp	r3, #0
 8009116:	d017      	beq.n	8009148 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009118:	69b8      	ldr	r0, [r7, #24]
 800911a:	f7ff f923 	bl	8008364 <tcp_process_refused_data>
 800911e:	4603      	mov	r3, r0
 8009120:	f113 0f0d 	cmn.w	r3, #13
 8009124:	d007      	beq.n	8009136 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00c      	beq.n	8009148 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800912e:	4b82      	ldr	r3, [pc, #520]	@ (8009338 <tcp_input+0x73c>)
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d008      	beq.n	8009148 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800913a:	2b00      	cmp	r3, #0
 800913c:	f040 80e3 	bne.w	8009306 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009140:	69b8      	ldr	r0, [r7, #24]
 8009142:	f003 f9bb 	bl	800c4bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009146:	e0de      	b.n	8009306 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009148:	4a7c      	ldr	r2, [pc, #496]	@ (800933c <tcp_input+0x740>)
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800914e:	69b8      	ldr	r0, [r7, #24]
 8009150:	f000 fb18 	bl	8009784 <tcp_process>
 8009154:	4603      	mov	r3, r0
 8009156:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009158:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800915c:	f113 0f0d 	cmn.w	r3, #13
 8009160:	f000 80d3 	beq.w	800930a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009164:	4b71      	ldr	r3, [pc, #452]	@ (800932c <tcp_input+0x730>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f003 0308 	and.w	r3, r3, #8
 800916c:	2b00      	cmp	r3, #0
 800916e:	d015      	beq.n	800919c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009176:	2b00      	cmp	r3, #0
 8009178:	d008      	beq.n	800918c <tcp_input+0x590>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	6912      	ldr	r2, [r2, #16]
 8009184:	f06f 010d 	mvn.w	r1, #13
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800918c:	69b9      	ldr	r1, [r7, #24]
 800918e:	486c      	ldr	r0, [pc, #432]	@ (8009340 <tcp_input+0x744>)
 8009190:	f7ff fbb6 	bl	8008900 <tcp_pcb_remove>
        tcp_free(pcb);
 8009194:	69b8      	ldr	r0, [r7, #24]
 8009196:	f7fe f9a1 	bl	80074dc <tcp_free>
 800919a:	e0da      	b.n	8009352 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80091a0:	4b63      	ldr	r3, [pc, #396]	@ (8009330 <tcp_input+0x734>)
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01d      	beq.n	80091e4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80091a8:	4b61      	ldr	r3, [pc, #388]	@ (8009330 <tcp_input+0x734>)
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00a      	beq.n	80091ce <tcp_input+0x5d2>
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	6910      	ldr	r0, [r2, #16]
 80091c2:	89fa      	ldrh	r2, [r7, #14]
 80091c4:	69b9      	ldr	r1, [r7, #24]
 80091c6:	4798      	blx	r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	74fb      	strb	r3, [r7, #19]
 80091cc:	e001      	b.n	80091d2 <tcp_input+0x5d6>
 80091ce:	2300      	movs	r3, #0
 80091d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80091d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091d6:	f113 0f0d 	cmn.w	r3, #13
 80091da:	f000 8098 	beq.w	800930e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80091de:	4b54      	ldr	r3, [pc, #336]	@ (8009330 <tcp_input+0x734>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80091e4:	69b8      	ldr	r0, [r7, #24]
 80091e6:	f000 f915 	bl	8009414 <tcp_input_delayed_close>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f040 8090 	bne.w	8009312 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80091f2:	4b4d      	ldr	r3, [pc, #308]	@ (8009328 <tcp_input+0x72c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d041      	beq.n	800927e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <tcp_input+0x614>
 8009202:	4b50      	ldr	r3, [pc, #320]	@ (8009344 <tcp_input+0x748>)
 8009204:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009208:	494f      	ldr	r1, [pc, #316]	@ (8009348 <tcp_input+0x74c>)
 800920a:	4850      	ldr	r0, [pc, #320]	@ (800934c <tcp_input+0x750>)
 800920c:	f006 ff7a 	bl	8010104 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	8b5b      	ldrh	r3, [r3, #26]
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800921c:	4b42      	ldr	r3, [pc, #264]	@ (8009328 <tcp_input+0x72c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4618      	mov	r0, r3
 8009222:	f7fd feab 	bl	8006f7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009226:	69b8      	ldr	r0, [r7, #24]
 8009228:	f7fe fc40 	bl	8007aac <tcp_abort>
            goto aborted;
 800922c:	e091      	b.n	8009352 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00c      	beq.n	8009252 <tcp_input+0x656>
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	6918      	ldr	r0, [r3, #16]
 8009242:	4b39      	ldr	r3, [pc, #228]	@ (8009328 <tcp_input+0x72c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	2300      	movs	r3, #0
 8009248:	69b9      	ldr	r1, [r7, #24]
 800924a:	47a0      	blx	r4
 800924c:	4603      	mov	r3, r0
 800924e:	74fb      	strb	r3, [r7, #19]
 8009250:	e008      	b.n	8009264 <tcp_input+0x668>
 8009252:	4b35      	ldr	r3, [pc, #212]	@ (8009328 <tcp_input+0x72c>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	69b9      	ldr	r1, [r7, #24]
 800925a:	2000      	movs	r0, #0
 800925c:	f7ff f958 	bl	8008510 <tcp_recv_null>
 8009260:	4603      	mov	r3, r0
 8009262:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009264:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009268:	f113 0f0d 	cmn.w	r3, #13
 800926c:	d053      	beq.n	8009316 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800926e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009276:	4b2c      	ldr	r3, [pc, #176]	@ (8009328 <tcp_input+0x72c>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800927e:	4b2b      	ldr	r3, [pc, #172]	@ (800932c <tcp_input+0x730>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d030      	beq.n	80092ec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800928e:	2b00      	cmp	r3, #0
 8009290:	d009      	beq.n	80092a6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009296:	7b5a      	ldrb	r2, [r3, #13]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800929c:	f042 0220 	orr.w	r2, r2, #32
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	735a      	strb	r2, [r3, #13]
 80092a4:	e022      	b.n	80092ec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092aa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80092ae:	d005      	beq.n	80092bc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092b4:	3301      	adds	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00b      	beq.n	80092de <tcp_input+0x6e2>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	6918      	ldr	r0, [r3, #16]
 80092d0:	2300      	movs	r3, #0
 80092d2:	2200      	movs	r2, #0
 80092d4:	69b9      	ldr	r1, [r7, #24]
 80092d6:	47a0      	blx	r4
 80092d8:	4603      	mov	r3, r0
 80092da:	74fb      	strb	r3, [r7, #19]
 80092dc:	e001      	b.n	80092e2 <tcp_input+0x6e6>
 80092de:	2300      	movs	r3, #0
 80092e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80092e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092e6:	f113 0f0d 	cmn.w	r3, #13
 80092ea:	d016      	beq.n	800931a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80092ec:	4b13      	ldr	r3, [pc, #76]	@ (800933c <tcp_input+0x740>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80092f2:	69b8      	ldr	r0, [r7, #24]
 80092f4:	f000 f88e 	bl	8009414 <tcp_input_delayed_close>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d128      	bne.n	8009350 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80092fe:	69b8      	ldr	r0, [r7, #24]
 8009300:	f002 faca 	bl	800b898 <tcp_output>
 8009304:	e025      	b.n	8009352 <tcp_input+0x756>
        goto aborted;
 8009306:	bf00      	nop
 8009308:	e023      	b.n	8009352 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800930a:	bf00      	nop
 800930c:	e021      	b.n	8009352 <tcp_input+0x756>
              goto aborted;
 800930e:	bf00      	nop
 8009310:	e01f      	b.n	8009352 <tcp_input+0x756>
          goto aborted;
 8009312:	bf00      	nop
 8009314:	e01d      	b.n	8009352 <tcp_input+0x756>
            goto aborted;
 8009316:	bf00      	nop
 8009318:	e01b      	b.n	8009352 <tcp_input+0x756>
              goto aborted;
 800931a:	bf00      	nop
 800931c:	e019      	b.n	8009352 <tcp_input+0x756>
 800931e:	bf00      	nop
 8009320:	20007d10 	.word	0x20007d10
 8009324:	20007d24 	.word	0x20007d24
 8009328:	20007d44 	.word	0x20007d44
 800932c:	20007d41 	.word	0x20007d41
 8009330:	20007d3c 	.word	0x20007d3c
 8009334:	20007d40 	.word	0x20007d40
 8009338:	20007d3e 	.word	0x20007d3e
 800933c:	20007d48 	.word	0x20007d48
 8009340:	20007d04 	.word	0x20007d04
 8009344:	080125fc 	.word	0x080125fc
 8009348:	080127b0 	.word	0x080127b0
 800934c:	08012648 	.word	0x08012648
          goto aborted;
 8009350:	bf00      	nop
    tcp_input_pcb = NULL;
 8009352:	4b27      	ldr	r3, [pc, #156]	@ (80093f0 <tcp_input+0x7f4>)
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009358:	4b26      	ldr	r3, [pc, #152]	@ (80093f4 <tcp_input+0x7f8>)
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800935e:	4b26      	ldr	r3, [pc, #152]	@ (80093f8 <tcp_input+0x7fc>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d03f      	beq.n	80093e6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009366:	4b24      	ldr	r3, [pc, #144]	@ (80093f8 <tcp_input+0x7fc>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	4618      	mov	r0, r3
 800936c:	f7fd fe06 	bl	8006f7c <pbuf_free>
      inseg.p = NULL;
 8009370:	4b21      	ldr	r3, [pc, #132]	@ (80093f8 <tcp_input+0x7fc>)
 8009372:	2200      	movs	r2, #0
 8009374:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009376:	e036      	b.n	80093e6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009378:	4b20      	ldr	r3, [pc, #128]	@ (80093fc <tcp_input+0x800>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	899b      	ldrh	r3, [r3, #12]
 800937e:	b29b      	uxth	r3, r3
 8009380:	4618      	mov	r0, r3
 8009382:	f7fc f9ab 	bl	80056dc <lwip_htons>
 8009386:	4603      	mov	r3, r0
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	d118      	bne.n	80093c4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009392:	4b1b      	ldr	r3, [pc, #108]	@ (8009400 <tcp_input+0x804>)
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	4b1b      	ldr	r3, [pc, #108]	@ (8009404 <tcp_input+0x808>)
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	4b1a      	ldr	r3, [pc, #104]	@ (8009408 <tcp_input+0x80c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093a2:	4b16      	ldr	r3, [pc, #88]	@ (80093fc <tcp_input+0x800>)
 80093a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093a6:	885b      	ldrh	r3, [r3, #2]
 80093a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093aa:	4a14      	ldr	r2, [pc, #80]	@ (80093fc <tcp_input+0x800>)
 80093ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093ae:	8812      	ldrh	r2, [r2, #0]
 80093b0:	b292      	uxth	r2, r2
 80093b2:	9202      	str	r2, [sp, #8]
 80093b4:	9301      	str	r3, [sp, #4]
 80093b6:	4b15      	ldr	r3, [pc, #84]	@ (800940c <tcp_input+0x810>)
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	4b15      	ldr	r3, [pc, #84]	@ (8009410 <tcp_input+0x814>)
 80093bc:	4602      	mov	r2, r0
 80093be:	2000      	movs	r0, #0
 80093c0:	f003 f82a 	bl	800c418 <tcp_rst>
    pbuf_free(p);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fd fdd9 	bl	8006f7c <pbuf_free>
  return;
 80093ca:	e00c      	b.n	80093e6 <tcp_input+0x7ea>
    goto dropped;
 80093cc:	bf00      	nop
 80093ce:	e006      	b.n	80093de <tcp_input+0x7e2>
    goto dropped;
 80093d0:	bf00      	nop
 80093d2:	e004      	b.n	80093de <tcp_input+0x7e2>
    goto dropped;
 80093d4:	bf00      	nop
 80093d6:	e002      	b.n	80093de <tcp_input+0x7e2>
      goto dropped;
 80093d8:	bf00      	nop
 80093da:	e000      	b.n	80093de <tcp_input+0x7e2>
      goto dropped;
 80093dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7fd fdcc 	bl	8006f7c <pbuf_free>
 80093e4:	e000      	b.n	80093e8 <tcp_input+0x7ec>
  return;
 80093e6:	bf00      	nop
}
 80093e8:	3724      	adds	r7, #36	@ 0x24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20007d48 	.word	0x20007d48
 80093f4:	20007d44 	.word	0x20007d44
 80093f8:	20007d10 	.word	0x20007d10
 80093fc:	20007d24 	.word	0x20007d24
 8009400:	20007d38 	.word	0x20007d38
 8009404:	20007d3e 	.word	0x20007d3e
 8009408:	20007d34 	.word	0x20007d34
 800940c:	20004dac 	.word	0x20004dac
 8009410:	20004db0 	.word	0x20004db0

08009414 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <tcp_input_delayed_close+0x1c>
 8009422:	4b17      	ldr	r3, [pc, #92]	@ (8009480 <tcp_input_delayed_close+0x6c>)
 8009424:	f240 225a 	movw	r2, #602	@ 0x25a
 8009428:	4916      	ldr	r1, [pc, #88]	@ (8009484 <tcp_input_delayed_close+0x70>)
 800942a:	4817      	ldr	r0, [pc, #92]	@ (8009488 <tcp_input_delayed_close+0x74>)
 800942c:	f006 fe6a 	bl	8010104 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009430:	4b16      	ldr	r3, [pc, #88]	@ (800948c <tcp_input_delayed_close+0x78>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 0310 	and.w	r3, r3, #16
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01c      	beq.n	8009476 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	8b5b      	ldrh	r3, [r3, #26]
 8009440:	f003 0310 	and.w	r3, r3, #16
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10d      	bne.n	8009464 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800944e:	2b00      	cmp	r3, #0
 8009450:	d008      	beq.n	8009464 <tcp_input_delayed_close+0x50>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6912      	ldr	r2, [r2, #16]
 800945c:	f06f 010e 	mvn.w	r1, #14
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	480a      	ldr	r0, [pc, #40]	@ (8009490 <tcp_input_delayed_close+0x7c>)
 8009468:	f7ff fa4a 	bl	8008900 <tcp_pcb_remove>
    tcp_free(pcb);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7fe f835 	bl	80074dc <tcp_free>
    return 1;
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	080125fc 	.word	0x080125fc
 8009484:	080127cc 	.word	0x080127cc
 8009488:	08012648 	.word	0x08012648
 800948c:	20007d41 	.word	0x20007d41
 8009490:	20007d04 	.word	0x20007d04

08009494 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b08b      	sub	sp, #44	@ 0x2c
 8009498:	af04      	add	r7, sp, #16
 800949a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800949c:	4b6f      	ldr	r3, [pc, #444]	@ (800965c <tcp_listen_input+0x1c8>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f040 80d2 	bne.w	800964e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d106      	bne.n	80094be <tcp_listen_input+0x2a>
 80094b0:	4b6b      	ldr	r3, [pc, #428]	@ (8009660 <tcp_listen_input+0x1cc>)
 80094b2:	f240 2281 	movw	r2, #641	@ 0x281
 80094b6:	496b      	ldr	r1, [pc, #428]	@ (8009664 <tcp_listen_input+0x1d0>)
 80094b8:	486b      	ldr	r0, [pc, #428]	@ (8009668 <tcp_listen_input+0x1d4>)
 80094ba:	f006 fe23 	bl	8010104 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80094be:	4b67      	ldr	r3, [pc, #412]	@ (800965c <tcp_listen_input+0x1c8>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	f003 0310 	and.w	r3, r3, #16
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d019      	beq.n	80094fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094ca:	4b68      	ldr	r3, [pc, #416]	@ (800966c <tcp_listen_input+0x1d8>)
 80094cc:	6819      	ldr	r1, [r3, #0]
 80094ce:	4b68      	ldr	r3, [pc, #416]	@ (8009670 <tcp_listen_input+0x1dc>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	4b67      	ldr	r3, [pc, #412]	@ (8009674 <tcp_listen_input+0x1e0>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094da:	4b67      	ldr	r3, [pc, #412]	@ (8009678 <tcp_listen_input+0x1e4>)
 80094dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094de:	885b      	ldrh	r3, [r3, #2]
 80094e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094e2:	4a65      	ldr	r2, [pc, #404]	@ (8009678 <tcp_listen_input+0x1e4>)
 80094e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094e6:	8812      	ldrh	r2, [r2, #0]
 80094e8:	b292      	uxth	r2, r2
 80094ea:	9202      	str	r2, [sp, #8]
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	4b63      	ldr	r3, [pc, #396]	@ (800967c <tcp_listen_input+0x1e8>)
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	4b63      	ldr	r3, [pc, #396]	@ (8009680 <tcp_listen_input+0x1ec>)
 80094f4:	4602      	mov	r2, r0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f002 ff8e 	bl	800c418 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80094fc:	e0a9      	b.n	8009652 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80094fe:	4b57      	ldr	r3, [pc, #348]	@ (800965c <tcp_listen_input+0x1c8>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 80a3 	beq.w	8009652 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7d5b      	ldrb	r3, [r3, #21]
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff f921 	bl	8008758 <tcp_alloc>
 8009516:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d111      	bne.n	8009542 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <tcp_listen_input+0xa8>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	6910      	ldr	r0, [r2, #16]
 800952e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009532:	2100      	movs	r1, #0
 8009534:	4798      	blx	r3
 8009536:	4603      	mov	r3, r0
 8009538:	73bb      	strb	r3, [r7, #14]
      return;
 800953a:	e08b      	b.n	8009654 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800953c:	23f0      	movs	r3, #240	@ 0xf0
 800953e:	73bb      	strb	r3, [r7, #14]
      return;
 8009540:	e088      	b.n	8009654 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009542:	4b50      	ldr	r3, [pc, #320]	@ (8009684 <tcp_listen_input+0x1f0>)
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800954a:	4b4e      	ldr	r3, [pc, #312]	@ (8009684 <tcp_listen_input+0x1f0>)
 800954c:	691a      	ldr	r2, [r3, #16]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	8ada      	ldrh	r2, [r3, #22]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800955a:	4b47      	ldr	r3, [pc, #284]	@ (8009678 <tcp_listen_input+0x1e4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29a      	uxth	r2, r3
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2203      	movs	r2, #3
 800956a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800956c:	4b41      	ldr	r3, [pc, #260]	@ (8009674 <tcp_listen_input+0x1e0>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800957e:	6978      	ldr	r0, [r7, #20]
 8009580:	f7ff fa52 	bl	8008a28 <tcp_next_iss>
 8009584:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800959e:	4b35      	ldr	r3, [pc, #212]	@ (8009674 <tcp_listen_input+0x1e0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	1e5a      	subs	r2, r3, #1
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	7a5b      	ldrb	r3, [r3, #9]
 80095ba:	f003 030c 	and.w	r3, r3, #12
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7a1a      	ldrb	r2, [r3, #8]
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80095cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009688 <tcp_listen_input+0x1f4>)
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	60da      	str	r2, [r3, #12]
 80095d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009688 <tcp_listen_input+0x1f4>)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	f003 f8df 	bl	800c79c <tcp_timer_needed>
 80095de:	4b2b      	ldr	r3, [pc, #172]	@ (800968c <tcp_listen_input+0x1f8>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80095e4:	6978      	ldr	r0, [r7, #20]
 80095e6:	f001 fd8b 	bl	800b100 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80095ea:	4b23      	ldr	r3, [pc, #140]	@ (8009678 <tcp_listen_input+0x1e4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	89db      	ldrh	r3, [r3, #14]
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	3304      	adds	r3, #4
 800960c:	4618      	mov	r0, r3
 800960e:	f005 fa23 	bl	800ea58 <ip4_route>
 8009612:	4601      	mov	r1, r0
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	3304      	adds	r3, #4
 8009618:	461a      	mov	r2, r3
 800961a:	4620      	mov	r0, r4
 800961c:	f7ff fa2a 	bl	8008a74 <tcp_eff_send_mss_netif>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009628:	2112      	movs	r1, #18
 800962a:	6978      	ldr	r0, [r7, #20]
 800962c:	f002 f846 	bl	800b6bc <tcp_enqueue_flags>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800963c:	2100      	movs	r1, #0
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f7fe f976 	bl	8007930 <tcp_abandon>
      return;
 8009644:	e006      	b.n	8009654 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009646:	6978      	ldr	r0, [r7, #20]
 8009648:	f002 f926 	bl	800b898 <tcp_output>
  return;
 800964c:	e001      	b.n	8009652 <tcp_listen_input+0x1be>
    return;
 800964e:	bf00      	nop
 8009650:	e000      	b.n	8009654 <tcp_listen_input+0x1c0>
  return;
 8009652:	bf00      	nop
}
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	bd90      	pop	{r4, r7, pc}
 800965a:	bf00      	nop
 800965c:	20007d40 	.word	0x20007d40
 8009660:	080125fc 	.word	0x080125fc
 8009664:	080127f4 	.word	0x080127f4
 8009668:	08012648 	.word	0x08012648
 800966c:	20007d38 	.word	0x20007d38
 8009670:	20007d3e 	.word	0x20007d3e
 8009674:	20007d34 	.word	0x20007d34
 8009678:	20007d24 	.word	0x20007d24
 800967c:	20004dac 	.word	0x20004dac
 8009680:	20004db0 	.word	0x20004db0
 8009684:	20004d9c 	.word	0x20004d9c
 8009688:	20007d04 	.word	0x20007d04
 800968c:	20007d0c 	.word	0x20007d0c

08009690 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af04      	add	r7, sp, #16
 8009696:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009698:	4b2f      	ldr	r3, [pc, #188]	@ (8009758 <tcp_timewait_input+0xc8>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d153      	bne.n	800974c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <tcp_timewait_input+0x28>
 80096aa:	4b2c      	ldr	r3, [pc, #176]	@ (800975c <tcp_timewait_input+0xcc>)
 80096ac:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80096b0:	492b      	ldr	r1, [pc, #172]	@ (8009760 <tcp_timewait_input+0xd0>)
 80096b2:	482c      	ldr	r0, [pc, #176]	@ (8009764 <tcp_timewait_input+0xd4>)
 80096b4:	f006 fd26 	bl	8010104 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80096b8:	4b27      	ldr	r3, [pc, #156]	@ (8009758 <tcp_timewait_input+0xc8>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d02a      	beq.n	800971a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80096c4:	4b28      	ldr	r3, [pc, #160]	@ (8009768 <tcp_timewait_input+0xd8>)
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	db2d      	blt.n	800972e <tcp_timewait_input+0x9e>
 80096d2:	4b25      	ldr	r3, [pc, #148]	@ (8009768 <tcp_timewait_input+0xd8>)
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80096de:	440b      	add	r3, r1
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	dc23      	bgt.n	800972e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096e6:	4b21      	ldr	r3, [pc, #132]	@ (800976c <tcp_timewait_input+0xdc>)
 80096e8:	6819      	ldr	r1, [r3, #0]
 80096ea:	4b21      	ldr	r3, [pc, #132]	@ (8009770 <tcp_timewait_input+0xe0>)
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009768 <tcp_timewait_input+0xd8>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009774 <tcp_timewait_input+0xe4>)
 80096f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096fa:	885b      	ldrh	r3, [r3, #2]
 80096fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009774 <tcp_timewait_input+0xe4>)
 8009700:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009702:	8812      	ldrh	r2, [r2, #0]
 8009704:	b292      	uxth	r2, r2
 8009706:	9202      	str	r2, [sp, #8]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	4b1b      	ldr	r3, [pc, #108]	@ (8009778 <tcp_timewait_input+0xe8>)
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	4b1b      	ldr	r3, [pc, #108]	@ (800977c <tcp_timewait_input+0xec>)
 8009710:	4602      	mov	r2, r0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f002 fe80 	bl	800c418 <tcp_rst>
      return;
 8009718:	e01b      	b.n	8009752 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800971a:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <tcp_timewait_input+0xc8>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009726:	4b16      	ldr	r3, [pc, #88]	@ (8009780 <tcp_timewait_input+0xf0>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800972e:	4b10      	ldr	r3, [pc, #64]	@ (8009770 <tcp_timewait_input+0xe0>)
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00c      	beq.n	8009750 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	8b5b      	ldrh	r3, [r3, #26]
 800973a:	f043 0302 	orr.w	r3, r3, #2
 800973e:	b29a      	uxth	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f002 f8a7 	bl	800b898 <tcp_output>
  }
  return;
 800974a:	e001      	b.n	8009750 <tcp_timewait_input+0xc0>
    return;
 800974c:	bf00      	nop
 800974e:	e000      	b.n	8009752 <tcp_timewait_input+0xc2>
  return;
 8009750:	bf00      	nop
}
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20007d40 	.word	0x20007d40
 800975c:	080125fc 	.word	0x080125fc
 8009760:	08012814 	.word	0x08012814
 8009764:	08012648 	.word	0x08012648
 8009768:	20007d34 	.word	0x20007d34
 800976c:	20007d38 	.word	0x20007d38
 8009770:	20007d3e 	.word	0x20007d3e
 8009774:	20007d24 	.word	0x20007d24
 8009778:	20004dac 	.word	0x20004dac
 800977c:	20004db0 	.word	0x20004db0
 8009780:	20007cf8 	.word	0x20007cf8

08009784 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009784:	b590      	push	{r4, r7, lr}
 8009786:	b08d      	sub	sp, #52	@ 0x34
 8009788:	af04      	add	r7, sp, #16
 800978a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <tcp_process+0x24>
 800979a:	4b9d      	ldr	r3, [pc, #628]	@ (8009a10 <tcp_process+0x28c>)
 800979c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80097a0:	499c      	ldr	r1, [pc, #624]	@ (8009a14 <tcp_process+0x290>)
 80097a2:	489d      	ldr	r0, [pc, #628]	@ (8009a18 <tcp_process+0x294>)
 80097a4:	f006 fcae 	bl	8010104 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80097a8:	4b9c      	ldr	r3, [pc, #624]	@ (8009a1c <tcp_process+0x298>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 0304 	and.w	r3, r3, #4
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d04e      	beq.n	8009852 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7d1b      	ldrb	r3, [r3, #20]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d108      	bne.n	80097ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097c0:	4b97      	ldr	r3, [pc, #604]	@ (8009a20 <tcp_process+0x29c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d123      	bne.n	8009810 <tcp_process+0x8c>
        acceptable = 1;
 80097c8:	2301      	movs	r3, #1
 80097ca:	77fb      	strb	r3, [r7, #31]
 80097cc:	e020      	b.n	8009810 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097d2:	4b94      	ldr	r3, [pc, #592]	@ (8009a24 <tcp_process+0x2a0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d102      	bne.n	80097e0 <tcp_process+0x5c>
        acceptable = 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	77fb      	strb	r3, [r7, #31]
 80097de:	e017      	b.n	8009810 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80097e0:	4b90      	ldr	r3, [pc, #576]	@ (8009a24 <tcp_process+0x2a0>)
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	db10      	blt.n	8009810 <tcp_process+0x8c>
 80097ee:	4b8d      	ldr	r3, [pc, #564]	@ (8009a24 <tcp_process+0x2a0>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80097fa:	440b      	add	r3, r1
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dc06      	bgt.n	8009810 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	8b5b      	ldrh	r3, [r3, #26]
 8009806:	f043 0302 	orr.w	r3, r3, #2
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009810:	7ffb      	ldrb	r3, [r7, #31]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d01b      	beq.n	800984e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	7d1b      	ldrb	r3, [r3, #20]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <tcp_process+0xa8>
 800981e:	4b7c      	ldr	r3, [pc, #496]	@ (8009a10 <tcp_process+0x28c>)
 8009820:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8009824:	4980      	ldr	r1, [pc, #512]	@ (8009a28 <tcp_process+0x2a4>)
 8009826:	487c      	ldr	r0, [pc, #496]	@ (8009a18 <tcp_process+0x294>)
 8009828:	f006 fc6c 	bl	8010104 <iprintf>
      recv_flags |= TF_RESET;
 800982c:	4b7f      	ldr	r3, [pc, #508]	@ (8009a2c <tcp_process+0x2a8>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	f043 0308 	orr.w	r3, r3, #8
 8009834:	b2da      	uxtb	r2, r3
 8009836:	4b7d      	ldr	r3, [pc, #500]	@ (8009a2c <tcp_process+0x2a8>)
 8009838:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	8b5b      	ldrh	r3, [r3, #26]
 800983e:	f023 0301 	bic.w	r3, r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009848:	f06f 030d 	mvn.w	r3, #13
 800984c:	e37a      	b.n	8009f44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	e378      	b.n	8009f44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009852:	4b72      	ldr	r3, [pc, #456]	@ (8009a1c <tcp_process+0x298>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d010      	beq.n	8009880 <tcp_process+0xfc>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7d1b      	ldrb	r3, [r3, #20]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d00c      	beq.n	8009880 <tcp_process+0xfc>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7d1b      	ldrb	r3, [r3, #20]
 800986a:	2b03      	cmp	r3, #3
 800986c:	d008      	beq.n	8009880 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	8b5b      	ldrh	r3, [r3, #26]
 8009872:	f043 0302 	orr.w	r3, r3, #2
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	e361      	b.n	8009f44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	8b5b      	ldrh	r3, [r3, #26]
 8009884:	f003 0310 	and.w	r3, r3, #16
 8009888:	2b00      	cmp	r3, #0
 800988a:	d103      	bne.n	8009894 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800988c:	4b68      	ldr	r3, [pc, #416]	@ (8009a30 <tcp_process+0x2ac>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 fc2b 	bl	800b100 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	7d1b      	ldrb	r3, [r3, #20]
 80098ae:	3b02      	subs	r3, #2
 80098b0:	2b07      	cmp	r3, #7
 80098b2:	f200 8337 	bhi.w	8009f24 <tcp_process+0x7a0>
 80098b6:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <tcp_process+0x138>)
 80098b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098bc:	080098dd 	.word	0x080098dd
 80098c0:	08009b0d 	.word	0x08009b0d
 80098c4:	08009c85 	.word	0x08009c85
 80098c8:	08009caf 	.word	0x08009caf
 80098cc:	08009dd3 	.word	0x08009dd3
 80098d0:	08009c85 	.word	0x08009c85
 80098d4:	08009e5f 	.word	0x08009e5f
 80098d8:	08009eef 	.word	0x08009eef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80098dc:	4b4f      	ldr	r3, [pc, #316]	@ (8009a1c <tcp_process+0x298>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 80e4 	beq.w	8009ab2 <tcp_process+0x32e>
 80098ea:	4b4c      	ldr	r3, [pc, #304]	@ (8009a1c <tcp_process+0x298>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 80dd 	beq.w	8009ab2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	4b48      	ldr	r3, [pc, #288]	@ (8009a20 <tcp_process+0x29c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	429a      	cmp	r2, r3
 8009904:	f040 80d5 	bne.w	8009ab2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009908:	4b46      	ldr	r3, [pc, #280]	@ (8009a24 <tcp_process+0x2a0>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800991a:	4b41      	ldr	r3, [pc, #260]	@ (8009a20 <tcp_process+0x29c>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009922:	4b44      	ldr	r3, [pc, #272]	@ (8009a34 <tcp_process+0x2b0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	89db      	ldrh	r3, [r3, #14]
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800993c:	4b39      	ldr	r3, [pc, #228]	@ (8009a24 <tcp_process+0x2a0>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	1e5a      	subs	r2, r3, #1
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2204      	movs	r2, #4
 800994a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3304      	adds	r3, #4
 8009954:	4618      	mov	r0, r3
 8009956:	f005 f87f 	bl	800ea58 <ip4_route>
 800995a:	4601      	mov	r1, r0
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3304      	adds	r3, #4
 8009960:	461a      	mov	r2, r3
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff f886 	bl	8008a74 <tcp_eff_send_mss_netif>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009974:	009a      	lsls	r2, r3, #2
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009980:	428b      	cmp	r3, r1
 8009982:	bf38      	it	cc
 8009984:	460b      	movcc	r3, r1
 8009986:	429a      	cmp	r2, r3
 8009988:	d204      	bcs.n	8009994 <tcp_process+0x210>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	b29b      	uxth	r3, r3
 8009992:	e00d      	b.n	80099b0 <tcp_process+0x22c>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800999e:	4293      	cmp	r3, r2
 80099a0:	d904      	bls.n	80099ac <tcp_process+0x228>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	e001      	b.n	80099b0 <tcp_process+0x22c>
 80099ac:	f241 131c 	movw	r3, #4380	@ 0x111c
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <tcp_process+0x24a>
 80099c0:	4b13      	ldr	r3, [pc, #76]	@ (8009a10 <tcp_process+0x28c>)
 80099c2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80099c6:	491c      	ldr	r1, [pc, #112]	@ (8009a38 <tcp_process+0x2b4>)
 80099c8:	4813      	ldr	r0, [pc, #76]	@ (8009a18 <tcp_process+0x294>)
 80099ca:	f006 fb9b 	bl	8010104 <iprintf>
        --pcb->snd_queuelen;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099e2:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d12a      	bne.n	8009a40 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ee:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <tcp_process+0x280>
 80099f6:	4b06      	ldr	r3, [pc, #24]	@ (8009a10 <tcp_process+0x28c>)
 80099f8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80099fc:	490f      	ldr	r1, [pc, #60]	@ (8009a3c <tcp_process+0x2b8>)
 80099fe:	4806      	ldr	r0, [pc, #24]	@ (8009a18 <tcp_process+0x294>)
 8009a00:	f006 fb80 	bl	8010104 <iprintf>
          pcb->unsent = rseg->next;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009a0c:	e01c      	b.n	8009a48 <tcp_process+0x2c4>
 8009a0e:	bf00      	nop
 8009a10:	080125fc 	.word	0x080125fc
 8009a14:	08012834 	.word	0x08012834
 8009a18:	08012648 	.word	0x08012648
 8009a1c:	20007d40 	.word	0x20007d40
 8009a20:	20007d38 	.word	0x20007d38
 8009a24:	20007d34 	.word	0x20007d34
 8009a28:	08012850 	.word	0x08012850
 8009a2c:	20007d41 	.word	0x20007d41
 8009a30:	20007cf8 	.word	0x20007cf8
 8009a34:	20007d24 	.word	0x20007d24
 8009a38:	08012870 	.word	0x08012870
 8009a3c:	08012888 	.word	0x08012888
        } else {
          pcb->unacked = rseg->next;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8009a48:	6978      	ldr	r0, [r7, #20]
 8009a4a:	f7fe fd1c 	bl	8008486 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d104      	bne.n	8009a60 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a5c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009a5e:	e006      	b.n	8009a6e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <tcp_process+0x30a>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6910      	ldr	r0, [r2, #16]
 8009a82:	2200      	movs	r2, #0
 8009a84:	6879      	ldr	r1, [r7, #4]
 8009a86:	4798      	blx	r3
 8009a88:	4603      	mov	r3, r0
 8009a8a:	77bb      	strb	r3, [r7, #30]
 8009a8c:	e001      	b.n	8009a92 <tcp_process+0x30e>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8009a92:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009a96:	f113 0f0d 	cmn.w	r3, #13
 8009a9a:	d102      	bne.n	8009aa2 <tcp_process+0x31e>
          return ERR_ABRT;
 8009a9c:	f06f 030c 	mvn.w	r3, #12
 8009aa0:	e250      	b.n	8009f44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8b5b      	ldrh	r3, [r3, #26]
 8009aa6:	f043 0302 	orr.w	r3, r3, #2
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009ab0:	e23a      	b.n	8009f28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009ab2:	4b98      	ldr	r3, [pc, #608]	@ (8009d14 <tcp_process+0x590>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	f003 0310 	and.w	r3, r3, #16
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 8234 	beq.w	8009f28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ac0:	4b95      	ldr	r3, [pc, #596]	@ (8009d18 <tcp_process+0x594>)
 8009ac2:	6819      	ldr	r1, [r3, #0]
 8009ac4:	4b95      	ldr	r3, [pc, #596]	@ (8009d1c <tcp_process+0x598>)
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4b95      	ldr	r3, [pc, #596]	@ (8009d20 <tcp_process+0x59c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ad0:	4b94      	ldr	r3, [pc, #592]	@ (8009d24 <tcp_process+0x5a0>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ad4:	885b      	ldrh	r3, [r3, #2]
 8009ad6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ad8:	4a92      	ldr	r2, [pc, #584]	@ (8009d24 <tcp_process+0x5a0>)
 8009ada:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009adc:	8812      	ldrh	r2, [r2, #0]
 8009ade:	b292      	uxth	r2, r2
 8009ae0:	9202      	str	r2, [sp, #8]
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	4b90      	ldr	r3, [pc, #576]	@ (8009d28 <tcp_process+0x5a4>)
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4b90      	ldr	r3, [pc, #576]	@ (8009d2c <tcp_process+0x5a8>)
 8009aea:	4602      	mov	r2, r0
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f002 fc93 	bl	800c418 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009af8:	2b05      	cmp	r3, #5
 8009afa:	f200 8215 	bhi.w	8009f28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 fa5f 	bl	800bfc8 <tcp_rexmit_rto>
      break;
 8009b0a:	e20d      	b.n	8009f28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009b0c:	4b81      	ldr	r3, [pc, #516]	@ (8009d14 <tcp_process+0x590>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f003 0310 	and.w	r3, r3, #16
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80a1 	beq.w	8009c5c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8009d18 <tcp_process+0x594>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	3b01      	subs	r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	db7e      	blt.n	8009c28 <tcp_process+0x4a4>
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d18 <tcp_process+0x594>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dc77      	bgt.n	8009c28 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2204      	movs	r2, #4
 8009b3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d102      	bne.n	8009b4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009b46:	23fa      	movs	r3, #250	@ 0xfa
 8009b48:	77bb      	strb	r3, [r7, #30]
 8009b4a:	e01d      	b.n	8009b88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <tcp_process+0x3e0>
 8009b56:	4b76      	ldr	r3, [pc, #472]	@ (8009d30 <tcp_process+0x5ac>)
 8009b58:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8009b5c:	4975      	ldr	r1, [pc, #468]	@ (8009d34 <tcp_process+0x5b0>)
 8009b5e:	4876      	ldr	r0, [pc, #472]	@ (8009d38 <tcp_process+0x5b4>)
 8009b60:	f006 fad0 	bl	8010104 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <tcp_process+0x400>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	6910      	ldr	r0, [r2, #16]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4798      	blx	r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	77bb      	strb	r3, [r7, #30]
 8009b82:	e001      	b.n	8009b88 <tcp_process+0x404>
 8009b84:	23f0      	movs	r3, #240	@ 0xf0
 8009b86:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8009b88:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009b90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009b94:	f113 0f0d 	cmn.w	r3, #13
 8009b98:	d002      	beq.n	8009ba0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7fd ff86 	bl	8007aac <tcp_abort>
            }
            return ERR_ABRT;
 8009ba0:	f06f 030c 	mvn.w	r3, #12
 8009ba4:	e1ce      	b.n	8009f44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fae0 	bl	800a16c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009bac:	4b63      	ldr	r3, [pc, #396]	@ (8009d3c <tcp_process+0x5b8>)
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <tcp_process+0x43c>
            recv_acked--;
 8009bb4:	4b61      	ldr	r3, [pc, #388]	@ (8009d3c <tcp_process+0x5b8>)
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	4b5f      	ldr	r3, [pc, #380]	@ (8009d3c <tcp_process+0x5b8>)
 8009bbe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bc4:	009a      	lsls	r2, r3, #2
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf38      	it	cc
 8009bd4:	460b      	movcc	r3, r1
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d204      	bcs.n	8009be4 <tcp_process+0x460>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	e00d      	b.n	8009c00 <tcp_process+0x47c>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d904      	bls.n	8009bfc <tcp_process+0x478>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	e001      	b.n	8009c00 <tcp_process+0x47c>
 8009bfc:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009c06:	4b4e      	ldr	r3, [pc, #312]	@ (8009d40 <tcp_process+0x5bc>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d037      	beq.n	8009c82 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	8b5b      	ldrh	r3, [r3, #26]
 8009c16:	f043 0302 	orr.w	r3, r3, #2
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2207      	movs	r2, #7
 8009c24:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009c26:	e02c      	b.n	8009c82 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c28:	4b3b      	ldr	r3, [pc, #236]	@ (8009d18 <tcp_process+0x594>)
 8009c2a:	6819      	ldr	r1, [r3, #0]
 8009c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d1c <tcp_process+0x598>)
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	4b3b      	ldr	r3, [pc, #236]	@ (8009d20 <tcp_process+0x59c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c38:	4b3a      	ldr	r3, [pc, #232]	@ (8009d24 <tcp_process+0x5a0>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c40:	4a38      	ldr	r2, [pc, #224]	@ (8009d24 <tcp_process+0x5a0>)
 8009c42:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c44:	8812      	ldrh	r2, [r2, #0]
 8009c46:	b292      	uxth	r2, r2
 8009c48:	9202      	str	r2, [sp, #8]
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	4b36      	ldr	r3, [pc, #216]	@ (8009d28 <tcp_process+0x5a4>)
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	4b36      	ldr	r3, [pc, #216]	@ (8009d2c <tcp_process+0x5a8>)
 8009c52:	4602      	mov	r2, r0
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f002 fbdf 	bl	800c418 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009c5a:	e167      	b.n	8009f2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8009d14 <tcp_process+0x590>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 0302 	and.w	r3, r3, #2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 8161 	beq.w	8009f2c <tcp_process+0x7a8>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6e:	1e5a      	subs	r2, r3, #1
 8009c70:	4b2b      	ldr	r3, [pc, #172]	@ (8009d20 <tcp_process+0x59c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	f040 8159 	bne.w	8009f2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f002 f9c6 	bl	800c00c <tcp_rexmit>
      break;
 8009c80:	e154      	b.n	8009f2c <tcp_process+0x7a8>
 8009c82:	e153      	b.n	8009f2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fa71 	bl	800a16c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8009d40 <tcp_process+0x5bc>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 814c 	beq.w	8009f30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	8b5b      	ldrh	r3, [r3, #26]
 8009c9c:	f043 0302 	orr.w	r3, r3, #2
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2207      	movs	r2, #7
 8009caa:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009cac:	e140      	b.n	8009f30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa5c 	bl	800a16c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009cb4:	4b22      	ldr	r3, [pc, #136]	@ (8009d40 <tcp_process+0x5bc>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d071      	beq.n	8009da4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009cc0:	4b14      	ldr	r3, [pc, #80]	@ (8009d14 <tcp_process+0x590>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d060      	beq.n	8009d8e <tcp_process+0x60a>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cd0:	4b11      	ldr	r3, [pc, #68]	@ (8009d18 <tcp_process+0x594>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d15a      	bne.n	8009d8e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d156      	bne.n	8009d8e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	8b5b      	ldrh	r3, [r3, #26]
 8009ce4:	f043 0302 	orr.w	r3, r3, #2
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7fe fdb6 	bl	8008860 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009cf4:	4b13      	ldr	r3, [pc, #76]	@ (8009d44 <tcp_process+0x5c0>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d105      	bne.n	8009d0a <tcp_process+0x586>
 8009cfe:	4b11      	ldr	r3, [pc, #68]	@ (8009d44 <tcp_process+0x5c0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	4a0f      	ldr	r2, [pc, #60]	@ (8009d44 <tcp_process+0x5c0>)
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	e02e      	b.n	8009d68 <tcp_process+0x5e4>
 8009d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d44 <tcp_process+0x5c0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	e027      	b.n	8009d62 <tcp_process+0x5de>
 8009d12:	bf00      	nop
 8009d14:	20007d40 	.word	0x20007d40
 8009d18:	20007d38 	.word	0x20007d38
 8009d1c:	20007d3e 	.word	0x20007d3e
 8009d20:	20007d34 	.word	0x20007d34
 8009d24:	20007d24 	.word	0x20007d24
 8009d28:	20004dac 	.word	0x20004dac
 8009d2c:	20004db0 	.word	0x20004db0
 8009d30:	080125fc 	.word	0x080125fc
 8009d34:	0801289c 	.word	0x0801289c
 8009d38:	08012648 	.word	0x08012648
 8009d3c:	20007d3c 	.word	0x20007d3c
 8009d40:	20007d41 	.word	0x20007d41
 8009d44:	20007d04 	.word	0x20007d04
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d104      	bne.n	8009d5c <tcp_process+0x5d8>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	60da      	str	r2, [r3, #12]
 8009d5a:	e005      	b.n	8009d68 <tcp_process+0x5e4>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1ef      	bne.n	8009d48 <tcp_process+0x5c4>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	60da      	str	r2, [r3, #12]
 8009d6e:	4b77      	ldr	r3, [pc, #476]	@ (8009f4c <tcp_process+0x7c8>)
 8009d70:	2201      	movs	r2, #1
 8009d72:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	220a      	movs	r2, #10
 8009d78:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009d7a:	4b75      	ldr	r3, [pc, #468]	@ (8009f50 <tcp_process+0x7cc>)
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	60da      	str	r2, [r3, #12]
 8009d82:	4a73      	ldr	r2, [pc, #460]	@ (8009f50 <tcp_process+0x7cc>)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	f002 fd08 	bl	800c79c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009d8c:	e0d2      	b.n	8009f34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	8b5b      	ldrh	r3, [r3, #26]
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2208      	movs	r2, #8
 8009da0:	751a      	strb	r2, [r3, #20]
      break;
 8009da2:	e0c7      	b.n	8009f34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009da4:	4b6b      	ldr	r3, [pc, #428]	@ (8009f54 <tcp_process+0x7d0>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 80c1 	beq.w	8009f34 <tcp_process+0x7b0>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009db6:	4b68      	ldr	r3, [pc, #416]	@ (8009f58 <tcp_process+0x7d4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	f040 80ba 	bne.w	8009f34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 80b5 	bne.w	8009f34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2206      	movs	r2, #6
 8009dce:	751a      	strb	r2, [r3, #20]
      break;
 8009dd0:	e0b0      	b.n	8009f34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f9ca 	bl	800a16c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009dd8:	4b60      	ldr	r3, [pc, #384]	@ (8009f5c <tcp_process+0x7d8>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 0320 	and.w	r3, r3, #32
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 80a9 	beq.w	8009f38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8b5b      	ldrh	r3, [r3, #26]
 8009dea:	f043 0302 	orr.w	r3, r3, #2
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7fe fd33 	bl	8008860 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009dfa:	4b59      	ldr	r3, [pc, #356]	@ (8009f60 <tcp_process+0x7dc>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d105      	bne.n	8009e10 <tcp_process+0x68c>
 8009e04:	4b56      	ldr	r3, [pc, #344]	@ (8009f60 <tcp_process+0x7dc>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	4a55      	ldr	r2, [pc, #340]	@ (8009f60 <tcp_process+0x7dc>)
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	e013      	b.n	8009e38 <tcp_process+0x6b4>
 8009e10:	4b53      	ldr	r3, [pc, #332]	@ (8009f60 <tcp_process+0x7dc>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	e00c      	b.n	8009e32 <tcp_process+0x6ae>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d104      	bne.n	8009e2c <tcp_process+0x6a8>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	60da      	str	r2, [r3, #12]
 8009e2a:	e005      	b.n	8009e38 <tcp_process+0x6b4>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1ef      	bne.n	8009e18 <tcp_process+0x694>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	60da      	str	r2, [r3, #12]
 8009e3e:	4b43      	ldr	r3, [pc, #268]	@ (8009f4c <tcp_process+0x7c8>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	220a      	movs	r2, #10
 8009e48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e4a:	4b41      	ldr	r3, [pc, #260]	@ (8009f50 <tcp_process+0x7cc>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	60da      	str	r2, [r3, #12]
 8009e52:	4a3f      	ldr	r2, [pc, #252]	@ (8009f50 <tcp_process+0x7cc>)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	f002 fca0 	bl	800c79c <tcp_timer_needed>
      }
      break;
 8009e5c:	e06c      	b.n	8009f38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f984 	bl	800a16c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e64:	4b3b      	ldr	r3, [pc, #236]	@ (8009f54 <tcp_process+0x7d0>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	f003 0310 	and.w	r3, r3, #16
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d065      	beq.n	8009f3c <tcp_process+0x7b8>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e74:	4b38      	ldr	r3, [pc, #224]	@ (8009f58 <tcp_process+0x7d4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d15f      	bne.n	8009f3c <tcp_process+0x7b8>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d15b      	bne.n	8009f3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7fe fceb 	bl	8008860 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e8a:	4b35      	ldr	r3, [pc, #212]	@ (8009f60 <tcp_process+0x7dc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d105      	bne.n	8009ea0 <tcp_process+0x71c>
 8009e94:	4b32      	ldr	r3, [pc, #200]	@ (8009f60 <tcp_process+0x7dc>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	4a31      	ldr	r2, [pc, #196]	@ (8009f60 <tcp_process+0x7dc>)
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	e013      	b.n	8009ec8 <tcp_process+0x744>
 8009ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8009f60 <tcp_process+0x7dc>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	61bb      	str	r3, [r7, #24]
 8009ea6:	e00c      	b.n	8009ec2 <tcp_process+0x73e>
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d104      	bne.n	8009ebc <tcp_process+0x738>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	60da      	str	r2, [r3, #12]
 8009eba:	e005      	b.n	8009ec8 <tcp_process+0x744>
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1ef      	bne.n	8009ea8 <tcp_process+0x724>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	60da      	str	r2, [r3, #12]
 8009ece:	4b1f      	ldr	r3, [pc, #124]	@ (8009f4c <tcp_process+0x7c8>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	220a      	movs	r2, #10
 8009ed8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009eda:	4b1d      	ldr	r3, [pc, #116]	@ (8009f50 <tcp_process+0x7cc>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60da      	str	r2, [r3, #12]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f50 <tcp_process+0x7cc>)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6013      	str	r3, [r2, #0]
 8009ee8:	f002 fc58 	bl	800c79c <tcp_timer_needed>
      }
      break;
 8009eec:	e026      	b.n	8009f3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f93c 	bl	800a16c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009ef4:	4b17      	ldr	r3, [pc, #92]	@ (8009f54 <tcp_process+0x7d0>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01f      	beq.n	8009f40 <tcp_process+0x7bc>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f04:	4b14      	ldr	r3, [pc, #80]	@ (8009f58 <tcp_process+0x7d4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d119      	bne.n	8009f40 <tcp_process+0x7bc>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d115      	bne.n	8009f40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009f14:	4b11      	ldr	r3, [pc, #68]	@ (8009f5c <tcp_process+0x7d8>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	f043 0310 	orr.w	r3, r3, #16
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f5c <tcp_process+0x7d8>)
 8009f20:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009f22:	e00d      	b.n	8009f40 <tcp_process+0x7bc>
    default:
      break;
 8009f24:	bf00      	nop
 8009f26:	e00c      	b.n	8009f42 <tcp_process+0x7be>
      break;
 8009f28:	bf00      	nop
 8009f2a:	e00a      	b.n	8009f42 <tcp_process+0x7be>
      break;
 8009f2c:	bf00      	nop
 8009f2e:	e008      	b.n	8009f42 <tcp_process+0x7be>
      break;
 8009f30:	bf00      	nop
 8009f32:	e006      	b.n	8009f42 <tcp_process+0x7be>
      break;
 8009f34:	bf00      	nop
 8009f36:	e004      	b.n	8009f42 <tcp_process+0x7be>
      break;
 8009f38:	bf00      	nop
 8009f3a:	e002      	b.n	8009f42 <tcp_process+0x7be>
      break;
 8009f3c:	bf00      	nop
 8009f3e:	e000      	b.n	8009f42 <tcp_process+0x7be>
      break;
 8009f40:	bf00      	nop
  }
  return ERR_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3724      	adds	r7, #36	@ 0x24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd90      	pop	{r4, r7, pc}
 8009f4c:	20007d0c 	.word	0x20007d0c
 8009f50:	20007d08 	.word	0x20007d08
 8009f54:	20007d40 	.word	0x20007d40
 8009f58:	20007d38 	.word	0x20007d38
 8009f5c:	20007d41 	.word	0x20007d41
 8009f60:	20007d04 	.word	0x20007d04

08009f64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009f64:	b590      	push	{r4, r7, lr}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d106      	bne.n	8009f82 <tcp_oos_insert_segment+0x1e>
 8009f74:	4b3b      	ldr	r3, [pc, #236]	@ (800a064 <tcp_oos_insert_segment+0x100>)
 8009f76:	f240 421f 	movw	r2, #1055	@ 0x41f
 8009f7a:	493b      	ldr	r1, [pc, #236]	@ (800a068 <tcp_oos_insert_segment+0x104>)
 8009f7c:	483b      	ldr	r0, [pc, #236]	@ (800a06c <tcp_oos_insert_segment+0x108>)
 8009f7e:	f006 f8c1 	bl	8010104 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	899b      	ldrh	r3, [r3, #12]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fb fba6 	bl	80056dc <lwip_htons>
 8009f90:	4603      	mov	r3, r0
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d028      	beq.n	8009fee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009f9c:	6838      	ldr	r0, [r7, #0]
 8009f9e:	f7fe fa5d 	bl	800845c <tcp_segs_free>
    next = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	603b      	str	r3, [r7, #0]
 8009fa6:	e056      	b.n	800a056 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	899b      	ldrh	r3, [r3, #12]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fb fb93 	bl	80056dc <lwip_htons>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00d      	beq.n	8009fde <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	899b      	ldrh	r3, [r3, #12]
 8009fc8:	b29c      	uxth	r4, r3
 8009fca:	2001      	movs	r0, #1
 8009fcc:	f7fb fb86 	bl	80056dc <lwip_htons>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	4322      	orrs	r2, r4
 8009fda:	b292      	uxth	r2, r2
 8009fdc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7fe fa4c 	bl	8008486 <tcp_seg_free>
    while (next &&
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00e      	beq.n	800a012 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	891b      	ldrh	r3, [r3, #8]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4b1d      	ldr	r3, [pc, #116]	@ (800a070 <tcp_oos_insert_segment+0x10c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	441a      	add	r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	8909      	ldrh	r1, [r1, #8]
 800a00a:	440b      	add	r3, r1
 800a00c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a00e:	2b00      	cmp	r3, #0
 800a010:	daca      	bge.n	8009fa8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01e      	beq.n	800a056 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	891b      	ldrh	r3, [r3, #8]
 800a01c:	461a      	mov	r2, r3
 800a01e:	4b14      	ldr	r3, [pc, #80]	@ (800a070 <tcp_oos_insert_segment+0x10c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	441a      	add	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dd12      	ble.n	800a056 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	b29a      	uxth	r2, r3
 800a038:	4b0d      	ldr	r3, [pc, #52]	@ (800a070 <tcp_oos_insert_segment+0x10c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	b29a      	uxth	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	891b      	ldrh	r3, [r3, #8]
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f7fc fe0d 	bl	8006c70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	601a      	str	r2, [r3, #0]
}
 800a05c:	bf00      	nop
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	bd90      	pop	{r4, r7, pc}
 800a064:	080125fc 	.word	0x080125fc
 800a068:	080128bc 	.word	0x080128bc
 800a06c:	08012648 	.word	0x08012648
 800a070:	20007d34 	.word	0x20007d34

0800a074 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a074:	b5b0      	push	{r4, r5, r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a082:	e03e      	b.n	800a102 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	4618      	mov	r0, r3
 800a094:	f7fc fffa 	bl	800708c <pbuf_clen>
 800a098:	4603      	mov	r3, r0
 800a09a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a0a2:	8a7a      	ldrh	r2, [r7, #18]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d906      	bls.n	800a0b6 <tcp_free_acked_segments+0x42>
 800a0a8:	4b2a      	ldr	r3, [pc, #168]	@ (800a154 <tcp_free_acked_segments+0xe0>)
 800a0aa:	f240 4257 	movw	r2, #1111	@ 0x457
 800a0ae:	492a      	ldr	r1, [pc, #168]	@ (800a158 <tcp_free_acked_segments+0xe4>)
 800a0b0:	482a      	ldr	r0, [pc, #168]	@ (800a15c <tcp_free_acked_segments+0xe8>)
 800a0b2:	f006 f827 	bl	8010104 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800a0bc:	8a7b      	ldrh	r3, [r7, #18]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	891a      	ldrh	r2, [r3, #8]
 800a0cc:	4b24      	ldr	r3, [pc, #144]	@ (800a160 <tcp_free_acked_segments+0xec>)
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	4b22      	ldr	r3, [pc, #136]	@ (800a160 <tcp_free_acked_segments+0xec>)
 800a0d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a0d8:	6978      	ldr	r0, [r7, #20]
 800a0da:	f7fe f9d4 	bl	8008486 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00c      	beq.n	800a102 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <tcp_free_acked_segments+0x8e>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d106      	bne.n	800a102 <tcp_free_acked_segments+0x8e>
 800a0f4:	4b17      	ldr	r3, [pc, #92]	@ (800a154 <tcp_free_acked_segments+0xe0>)
 800a0f6:	f240 4261 	movw	r2, #1121	@ 0x461
 800a0fa:	491a      	ldr	r1, [pc, #104]	@ (800a164 <tcp_free_acked_segments+0xf0>)
 800a0fc:	4817      	ldr	r0, [pc, #92]	@ (800a15c <tcp_free_acked_segments+0xe8>)
 800a0fe:	f006 f801 	bl	8010104 <iprintf>
  while (seg_list != NULL &&
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d020      	beq.n	800a14a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fb fafa 	bl	8005708 <lwip_htonl>
 800a114:	4604      	mov	r4, r0
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	891b      	ldrh	r3, [r3, #8]
 800a11a:	461d      	mov	r5, r3
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	899b      	ldrh	r3, [r3, #12]
 800a122:	b29b      	uxth	r3, r3
 800a124:	4618      	mov	r0, r3
 800a126:	f7fb fad9 	bl	80056dc <lwip_htons>
 800a12a:	4603      	mov	r3, r0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <tcp_free_acked_segments+0xc6>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <tcp_free_acked_segments+0xc8>
 800a13a:	2300      	movs	r3, #0
 800a13c:	442b      	add	r3, r5
 800a13e:	18e2      	adds	r2, r4, r3
 800a140:	4b09      	ldr	r3, [pc, #36]	@ (800a168 <tcp_free_acked_segments+0xf4>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a146:	2b00      	cmp	r3, #0
 800a148:	dd9c      	ble.n	800a084 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a14a:	68bb      	ldr	r3, [r7, #8]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bdb0      	pop	{r4, r5, r7, pc}
 800a154:	080125fc 	.word	0x080125fc
 800a158:	080128e4 	.word	0x080128e4
 800a15c:	08012648 	.word	0x08012648
 800a160:	20007d3c 	.word	0x20007d3c
 800a164:	0801290c 	.word	0x0801290c
 800a168:	20007d38 	.word	0x20007d38

0800a16c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a16c:	b5b0      	push	{r4, r5, r7, lr}
 800a16e:	b094      	sub	sp, #80	@ 0x50
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <tcp_receive+0x20>
 800a17e:	4b91      	ldr	r3, [pc, #580]	@ (800a3c4 <tcp_receive+0x258>)
 800a180:	f240 427b 	movw	r2, #1147	@ 0x47b
 800a184:	4990      	ldr	r1, [pc, #576]	@ (800a3c8 <tcp_receive+0x25c>)
 800a186:	4891      	ldr	r0, [pc, #580]	@ (800a3cc <tcp_receive+0x260>)
 800a188:	f005 ffbc 	bl	8010104 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7d1b      	ldrb	r3, [r3, #20]
 800a190:	2b03      	cmp	r3, #3
 800a192:	d806      	bhi.n	800a1a2 <tcp_receive+0x36>
 800a194:	4b8b      	ldr	r3, [pc, #556]	@ (800a3c4 <tcp_receive+0x258>)
 800a196:	f240 427c 	movw	r2, #1148	@ 0x47c
 800a19a:	498d      	ldr	r1, [pc, #564]	@ (800a3d0 <tcp_receive+0x264>)
 800a19c:	488b      	ldr	r0, [pc, #556]	@ (800a3cc <tcp_receive+0x260>)
 800a19e:	f005 ffb1 	bl	8010104 <iprintf>

  if (flags & TCP_ACK) {
 800a1a2:	4b8c      	ldr	r3, [pc, #560]	@ (800a3d4 <tcp_receive+0x268>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	f003 0310 	and.w	r3, r3, #16
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 8264 	beq.w	800a678 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1bc:	4413      	add	r3, r2
 800a1be:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1c4:	4b84      	ldr	r3, [pc, #528]	@ (800a3d8 <tcp_receive+0x26c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	db1b      	blt.n	800a206 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1d2:	4b81      	ldr	r3, [pc, #516]	@ (800a3d8 <tcp_receive+0x26c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d106      	bne.n	800a1e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a1de:	4b7f      	ldr	r3, [pc, #508]	@ (800a3dc <tcp_receive+0x270>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	db0e      	blt.n	800a206 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a1ec:	4b7b      	ldr	r3, [pc, #492]	@ (800a3dc <tcp_receive+0x270>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d125      	bne.n	800a240 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a1f4:	4b7a      	ldr	r3, [pc, #488]	@ (800a3e0 <tcp_receive+0x274>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	89db      	ldrh	r3, [r3, #14]
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a202:	429a      	cmp	r2, r3
 800a204:	d91c      	bls.n	800a240 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a206:	4b76      	ldr	r3, [pc, #472]	@ (800a3e0 <tcp_receive+0x274>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	89db      	ldrh	r3, [r3, #14]
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a220:	429a      	cmp	r2, r3
 800a222:	d205      	bcs.n	800a230 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800a230:	4b69      	ldr	r3, [pc, #420]	@ (800a3d8 <tcp_receive+0x26c>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800a238:	4b68      	ldr	r3, [pc, #416]	@ (800a3dc <tcp_receive+0x270>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a240:	4b66      	ldr	r3, [pc, #408]	@ (800a3dc <tcp_receive+0x270>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dc58      	bgt.n	800a300 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a24e:	4b65      	ldr	r3, [pc, #404]	@ (800a3e4 <tcp_receive+0x278>)
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d14b      	bne.n	800a2ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800a260:	4413      	add	r3, r2
 800a262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a264:	429a      	cmp	r2, r3
 800a266:	d142      	bne.n	800a2ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a26e:	2b00      	cmp	r3, #0
 800a270:	db3d      	blt.n	800a2ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a276:	4b59      	ldr	r3, [pc, #356]	@ (800a3dc <tcp_receive+0x270>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d137      	bne.n	800a2ee <tcp_receive+0x182>
              found_dupack = 1;
 800a27e:	2301      	movs	r3, #1
 800a280:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a288:	2bff      	cmp	r3, #255	@ 0xff
 800a28a:	d007      	beq.n	800a29c <tcp_receive+0x130>
                ++pcb->dupacks;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a292:	3301      	adds	r3, #1
 800a294:	b2da      	uxtb	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d91b      	bls.n	800a2de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a2b0:	4413      	add	r3, r2
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d30a      	bcc.n	800a2d4 <tcp_receive+0x168>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a2c8:	4413      	add	r3, r2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a2d2:	e004      	b.n	800a2de <tcp_receive+0x172>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d902      	bls.n	800a2ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 fefb 	bl	800c0e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a2ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f040 8161 	bne.w	800a5b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2fe:	e15b      	b.n	800a5b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a300:	4b36      	ldr	r3, [pc, #216]	@ (800a3dc <tcp_receive+0x270>)
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f2c0 814e 	blt.w	800a5ae <tcp_receive+0x442>
 800a312:	4b32      	ldr	r3, [pc, #200]	@ (800a3dc <tcp_receive+0x270>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f300 8146 	bgt.w	800a5ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	8b5b      	ldrh	r3, [r3, #26]
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d010      	beq.n	800a350 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	8b5b      	ldrh	r3, [r3, #26]
 800a332:	f023 0304 	bic.w	r3, r3, #4
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a35e:	10db      	asrs	r3, r3, #3
 800a360:	b21b      	sxth	r3, r3
 800a362:	b29a      	uxth	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	4413      	add	r3, r2
 800a36e:	b29b      	uxth	r3, r3
 800a370:	b21a      	sxth	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a378:	4b18      	ldr	r3, [pc, #96]	@ (800a3dc <tcp_receive+0x270>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a382:	b29b      	uxth	r3, r3
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800a390:	4b12      	ldr	r3, [pc, #72]	@ (800a3dc <tcp_receive+0x270>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	7d1b      	ldrb	r3, [r3, #20]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	f240 8097 	bls.w	800a4d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d245      	bcs.n	800a43e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	8b5b      	ldrh	r3, [r3, #26]
 800a3b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d014      	beq.n	800a3e8 <tcp_receive+0x27c>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e013      	b.n	800a3ea <tcp_receive+0x27e>
 800a3c2:	bf00      	nop
 800a3c4:	080125fc 	.word	0x080125fc
 800a3c8:	0801292c 	.word	0x0801292c
 800a3cc:	08012648 	.word	0x08012648
 800a3d0:	08012948 	.word	0x08012948
 800a3d4:	20007d40 	.word	0x20007d40
 800a3d8:	20007d34 	.word	0x20007d34
 800a3dc:	20007d38 	.word	0x20007d38
 800a3e0:	20007d24 	.word	0x20007d24
 800a3e4:	20007d3e 	.word	0x20007d3e
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a3ee:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a3f8:	fb12 f303 	smulbb	r3, r2, r3
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a400:	4293      	cmp	r3, r2
 800a402:	bf28      	it	cs
 800a404:	4613      	movcs	r3, r2
 800a406:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a40e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a410:	4413      	add	r3, r2
 800a412:	b29a      	uxth	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d309      	bcc.n	800a432 <tcp_receive+0x2c6>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a424:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a426:	4413      	add	r3, r2
 800a428:	b29a      	uxth	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a430:	e04e      	b.n	800a4d0 <tcp_receive+0x364>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a438:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a43c:	e048      	b.n	800a4d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a444:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a446:	4413      	add	r3, r2
 800a448:	b29a      	uxth	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a450:	429a      	cmp	r2, r3
 800a452:	d309      	bcc.n	800a468 <tcp_receive+0x2fc>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a45a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a45c:	4413      	add	r3, r2
 800a45e:	b29a      	uxth	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a466:	e004      	b.n	800a472 <tcp_receive+0x306>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a46e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a47e:	429a      	cmp	r2, r3
 800a480:	d326      	bcc.n	800a4d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4a2:	4413      	add	r3, r2
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d30a      	bcc.n	800a4c6 <tcp_receive+0x35a>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a4ba:	4413      	add	r3, r2
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a4c4:	e004      	b.n	800a4d0 <tcp_receive+0x364>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4d8:	4a98      	ldr	r2, [pc, #608]	@ (800a73c <tcp_receive+0x5d0>)
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fdca 	bl	800a074 <tcp_free_acked_segments>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ee:	4a94      	ldr	r2, [pc, #592]	@ (800a740 <tcp_receive+0x5d4>)
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff fdbf 	bl	800a074 <tcp_free_acked_segments>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a500:	2b00      	cmp	r3, #0
 800a502:	d104      	bne.n	800a50e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a50a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a50c:	e002      	b.n	800a514 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a530:	4b84      	ldr	r3, [pc, #528]	@ (800a744 <tcp_receive+0x5d8>)
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	4413      	add	r3, r2
 800a536:	b29a      	uxth	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	8b5b      	ldrh	r3, [r3, #26]
 800a542:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a546:	2b00      	cmp	r3, #0
 800a548:	d035      	beq.n	800a5b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d118      	bne.n	800a584 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00c      	beq.n	800a574 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	4618      	mov	r0, r3
 800a568:	f7fb f8ce 	bl	8005708 <lwip_htonl>
 800a56c:	4603      	mov	r3, r0
 800a56e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a570:	2b00      	cmp	r3, #0
 800a572:	dc20      	bgt.n	800a5b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	8b5b      	ldrh	r3, [r3, #26]
 800a578:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a582:	e018      	b.n	800a5b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	4618      	mov	r0, r3
 800a592:	f7fb f8b9 	bl	8005708 <lwip_htonl>
 800a596:	4603      	mov	r3, r0
 800a598:	1ae3      	subs	r3, r4, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dc0b      	bgt.n	800a5b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	8b5b      	ldrh	r3, [r3, #26]
 800a5a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5ac:	e003      	b.n	800a5b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f001 ff84 	bl	800c4bc <tcp_send_empty_ack>
 800a5b4:	e000      	b.n	800a5b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d05b      	beq.n	800a678 <tcp_receive+0x50c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5c4:	4b60      	ldr	r3, [pc, #384]	@ (800a748 <tcp_receive+0x5dc>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	da54      	bge.n	800a678 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a5ce:	4b5f      	ldr	r3, [pc, #380]	@ (800a74c <tcp_receive+0x5e0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a5e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a5ec:	10db      	asrs	r3, r3, #3
 800a5ee:	b21b      	sxth	r3, r3
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a600:	b29a      	uxth	r2, r3
 800a602:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a606:	4413      	add	r3, r2
 800a608:	b29b      	uxth	r3, r3
 800a60a:	b21a      	sxth	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800a610:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a614:	2b00      	cmp	r3, #0
 800a616:	da05      	bge.n	800a624 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a61c:	425b      	negs	r3, r3
 800a61e:	b29b      	uxth	r3, r3
 800a620:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a624:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a62e:	109b      	asrs	r3, r3, #2
 800a630:	b21b      	sxth	r3, r3
 800a632:	b29b      	uxth	r3, r3
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	b29b      	uxth	r3, r3
 800a638:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a642:	b29a      	uxth	r2, r3
 800a644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a648:	4413      	add	r3, r2
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	b21a      	sxth	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a658:	10db      	asrs	r3, r3, #3
 800a65a:	b21b      	sxth	r3, r3
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a664:	b29b      	uxth	r3, r3
 800a666:	4413      	add	r3, r2
 800a668:	b29b      	uxth	r3, r3
 800a66a:	b21a      	sxth	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a678:	4b35      	ldr	r3, [pc, #212]	@ (800a750 <tcp_receive+0x5e4>)
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 84df 	beq.w	800b040 <tcp_receive+0xed4>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	7d1b      	ldrb	r3, [r3, #20]
 800a686:	2b06      	cmp	r3, #6
 800a688:	f200 84da 	bhi.w	800b040 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a690:	4b30      	ldr	r3, [pc, #192]	@ (800a754 <tcp_receive+0x5e8>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	3b01      	subs	r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f2c0 808f 	blt.w	800a7bc <tcp_receive+0x650>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a750 <tcp_receive+0x5e4>)
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4b2a      	ldr	r3, [pc, #168]	@ (800a754 <tcp_receive+0x5e8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	440b      	add	r3, r1
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f300 8082 	bgt.w	800a7bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a6b8:	4b27      	ldr	r3, [pc, #156]	@ (800a758 <tcp_receive+0x5ec>)
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6c2:	4b24      	ldr	r3, [pc, #144]	@ (800a754 <tcp_receive+0x5e8>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a6ca:	4b23      	ldr	r3, [pc, #140]	@ (800a758 <tcp_receive+0x5ec>)
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <tcp_receive+0x574>
 800a6d2:	4b22      	ldr	r3, [pc, #136]	@ (800a75c <tcp_receive+0x5f0>)
 800a6d4:	f240 5294 	movw	r2, #1428	@ 0x594
 800a6d8:	4921      	ldr	r1, [pc, #132]	@ (800a760 <tcp_receive+0x5f4>)
 800a6da:	4822      	ldr	r0, [pc, #136]	@ (800a764 <tcp_receive+0x5f8>)
 800a6dc:	f005 fd12 	bl	8010104 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d906      	bls.n	800a6f8 <tcp_receive+0x58c>
 800a6ea:	4b1c      	ldr	r3, [pc, #112]	@ (800a75c <tcp_receive+0x5f0>)
 800a6ec:	f240 5295 	movw	r2, #1429	@ 0x595
 800a6f0:	491d      	ldr	r1, [pc, #116]	@ (800a768 <tcp_receive+0x5fc>)
 800a6f2:	481c      	ldr	r0, [pc, #112]	@ (800a764 <tcp_receive+0x5f8>)
 800a6f4:	f005 fd06 	bl	8010104 <iprintf>
      off = (u16_t)off32;
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a6fe:	4b16      	ldr	r3, [pc, #88]	@ (800a758 <tcp_receive+0x5ec>)
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	891b      	ldrh	r3, [r3, #8]
 800a704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a708:	429a      	cmp	r2, r3
 800a70a:	d906      	bls.n	800a71a <tcp_receive+0x5ae>
 800a70c:	4b13      	ldr	r3, [pc, #76]	@ (800a75c <tcp_receive+0x5f0>)
 800a70e:	f240 5297 	movw	r2, #1431	@ 0x597
 800a712:	4916      	ldr	r1, [pc, #88]	@ (800a76c <tcp_receive+0x600>)
 800a714:	4813      	ldr	r0, [pc, #76]	@ (800a764 <tcp_receive+0x5f8>)
 800a716:	f005 fcf5 	bl	8010104 <iprintf>
      inseg.len -= off;
 800a71a:	4b0f      	ldr	r3, [pc, #60]	@ (800a758 <tcp_receive+0x5ec>)
 800a71c:	891a      	ldrh	r2, [r3, #8]
 800a71e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	b29a      	uxth	r2, r3
 800a726:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <tcp_receive+0x5ec>)
 800a728:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a72a:	4b0b      	ldr	r3, [pc, #44]	@ (800a758 <tcp_receive+0x5ec>)
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	891a      	ldrh	r2, [r3, #8]
 800a730:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800a738:	e02a      	b.n	800a790 <tcp_receive+0x624>
 800a73a:	bf00      	nop
 800a73c:	08012964 	.word	0x08012964
 800a740:	0801296c 	.word	0x0801296c
 800a744:	20007d3c 	.word	0x20007d3c
 800a748:	20007d38 	.word	0x20007d38
 800a74c:	20007cf8 	.word	0x20007cf8
 800a750:	20007d3e 	.word	0x20007d3e
 800a754:	20007d34 	.word	0x20007d34
 800a758:	20007d10 	.word	0x20007d10
 800a75c:	080125fc 	.word	0x080125fc
 800a760:	08012974 	.word	0x08012974
 800a764:	08012648 	.word	0x08012648
 800a768:	08012984 	.word	0x08012984
 800a76c:	08012994 	.word	0x08012994
        off -= p->len;
 800a770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a772:	895b      	ldrh	r3, [r3, #10]
 800a774:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a77e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a780:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a782:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a786:	2200      	movs	r2, #0
 800a788:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a78a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a792:	895b      	ldrh	r3, [r3, #10]
 800a794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a798:	429a      	cmp	r2, r3
 800a79a:	d8e9      	bhi.n	800a770 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a79c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a7a4:	f7fc fb64 	bl	8006e70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ac:	4a90      	ldr	r2, [pc, #576]	@ (800a9f0 <tcp_receive+0x884>)
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	4b90      	ldr	r3, [pc, #576]	@ (800a9f4 <tcp_receive+0x888>)
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	4a8e      	ldr	r2, [pc, #568]	@ (800a9f0 <tcp_receive+0x884>)
 800a7b6:	6812      	ldr	r2, [r2, #0]
 800a7b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a7ba:	e00d      	b.n	800a7d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a7bc:	4b8c      	ldr	r3, [pc, #560]	@ (800a9f0 <tcp_receive+0x884>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	da06      	bge.n	800a7d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	8b5b      	ldrh	r3, [r3, #26]
 800a7ce:	f043 0302 	orr.w	r3, r3, #2
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a7d8:	4b85      	ldr	r3, [pc, #532]	@ (800a9f0 <tcp_receive+0x884>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f2c0 8427 	blt.w	800b036 <tcp_receive+0xeca>
 800a7e8:	4b81      	ldr	r3, [pc, #516]	@ (800a9f0 <tcp_receive+0x884>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a7f4:	440b      	add	r3, r1
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f300 841b 	bgt.w	800b036 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a804:	4b7a      	ldr	r3, [pc, #488]	@ (800a9f0 <tcp_receive+0x884>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	429a      	cmp	r2, r3
 800a80a:	f040 8298 	bne.w	800ad3e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a80e:	4b79      	ldr	r3, [pc, #484]	@ (800a9f4 <tcp_receive+0x888>)
 800a810:	891c      	ldrh	r4, [r3, #8]
 800a812:	4b78      	ldr	r3, [pc, #480]	@ (800a9f4 <tcp_receive+0x888>)
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	899b      	ldrh	r3, [r3, #12]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fa ff5e 	bl	80056dc <lwip_htons>
 800a820:	4603      	mov	r3, r0
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <tcp_receive+0x6c4>
 800a82c:	2301      	movs	r3, #1
 800a82e:	e000      	b.n	800a832 <tcp_receive+0x6c6>
 800a830:	2300      	movs	r3, #0
 800a832:	4423      	add	r3, r4
 800a834:	b29a      	uxth	r2, r3
 800a836:	4b70      	ldr	r3, [pc, #448]	@ (800a9f8 <tcp_receive+0x88c>)
 800a838:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a83e:	4b6e      	ldr	r3, [pc, #440]	@ (800a9f8 <tcp_receive+0x88c>)
 800a840:	881b      	ldrh	r3, [r3, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d274      	bcs.n	800a930 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a846:	4b6b      	ldr	r3, [pc, #428]	@ (800a9f4 <tcp_receive+0x888>)
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	899b      	ldrh	r3, [r3, #12]
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fa ff44 	bl	80056dc <lwip_htons>
 800a854:	4603      	mov	r3, r0
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01e      	beq.n	800a89e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a860:	4b64      	ldr	r3, [pc, #400]	@ (800a9f4 <tcp_receive+0x888>)
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	899b      	ldrh	r3, [r3, #12]
 800a866:	b29b      	uxth	r3, r3
 800a868:	b21b      	sxth	r3, r3
 800a86a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a86e:	b21c      	sxth	r4, r3
 800a870:	4b60      	ldr	r3, [pc, #384]	@ (800a9f4 <tcp_receive+0x888>)
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	899b      	ldrh	r3, [r3, #12]
 800a876:	b29b      	uxth	r3, r3
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fa ff2f 	bl	80056dc <lwip_htons>
 800a87e:	4603      	mov	r3, r0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a886:	b29b      	uxth	r3, r3
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fa ff27 	bl	80056dc <lwip_htons>
 800a88e:	4603      	mov	r3, r0
 800a890:	b21b      	sxth	r3, r3
 800a892:	4323      	orrs	r3, r4
 800a894:	b21a      	sxth	r2, r3
 800a896:	4b57      	ldr	r3, [pc, #348]	@ (800a9f4 <tcp_receive+0x888>)
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	b292      	uxth	r2, r2
 800a89c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a8a2:	4b54      	ldr	r3, [pc, #336]	@ (800a9f4 <tcp_receive+0x888>)
 800a8a4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a8a6:	4b53      	ldr	r3, [pc, #332]	@ (800a9f4 <tcp_receive+0x888>)
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	899b      	ldrh	r3, [r3, #12]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fa ff14 	bl	80056dc <lwip_htons>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 0302 	and.w	r3, r3, #2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <tcp_receive+0x760>
            inseg.len -= 1;
 800a8c0:	4b4c      	ldr	r3, [pc, #304]	@ (800a9f4 <tcp_receive+0x888>)
 800a8c2:	891b      	ldrh	r3, [r3, #8]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	4b4a      	ldr	r3, [pc, #296]	@ (800a9f4 <tcp_receive+0x888>)
 800a8ca:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a8cc:	4b49      	ldr	r3, [pc, #292]	@ (800a9f4 <tcp_receive+0x888>)
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	4a48      	ldr	r2, [pc, #288]	@ (800a9f4 <tcp_receive+0x888>)
 800a8d2:	8912      	ldrh	r2, [r2, #8]
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fc f9ca 	bl	8006c70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a8dc:	4b45      	ldr	r3, [pc, #276]	@ (800a9f4 <tcp_receive+0x888>)
 800a8de:	891c      	ldrh	r4, [r3, #8]
 800a8e0:	4b44      	ldr	r3, [pc, #272]	@ (800a9f4 <tcp_receive+0x888>)
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	899b      	ldrh	r3, [r3, #12]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fa fef7 	bl	80056dc <lwip_htons>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	f003 0303 	and.w	r3, r3, #3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <tcp_receive+0x792>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e000      	b.n	800a900 <tcp_receive+0x794>
 800a8fe:	2300      	movs	r3, #0
 800a900:	4423      	add	r3, r4
 800a902:	b29a      	uxth	r2, r3
 800a904:	4b3c      	ldr	r3, [pc, #240]	@ (800a9f8 <tcp_receive+0x88c>)
 800a906:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a908:	4b3b      	ldr	r3, [pc, #236]	@ (800a9f8 <tcp_receive+0x88c>)
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	461a      	mov	r2, r3
 800a90e:	4b38      	ldr	r3, [pc, #224]	@ (800a9f0 <tcp_receive+0x884>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	441a      	add	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a918:	6879      	ldr	r1, [r7, #4]
 800a91a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a91c:	440b      	add	r3, r1
 800a91e:	429a      	cmp	r2, r3
 800a920:	d006      	beq.n	800a930 <tcp_receive+0x7c4>
 800a922:	4b36      	ldr	r3, [pc, #216]	@ (800a9fc <tcp_receive+0x890>)
 800a924:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a928:	4935      	ldr	r1, [pc, #212]	@ (800aa00 <tcp_receive+0x894>)
 800a92a:	4836      	ldr	r0, [pc, #216]	@ (800aa04 <tcp_receive+0x898>)
 800a92c:	f005 fbea 	bl	8010104 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 80e6 	beq.w	800ab06 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a93a:	4b2e      	ldr	r3, [pc, #184]	@ (800a9f4 <tcp_receive+0x888>)
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	899b      	ldrh	r3, [r3, #12]
 800a940:	b29b      	uxth	r3, r3
 800a942:	4618      	mov	r0, r3
 800a944:	f7fa feca 	bl	80056dc <lwip_htons>
 800a948:	4603      	mov	r3, r0
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	d010      	beq.n	800a976 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a954:	e00a      	b.n	800a96c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a95a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7fd fd8d 	bl	8008486 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1f0      	bne.n	800a956 <tcp_receive+0x7ea>
 800a974:	e0c7      	b.n	800ab06 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a97c:	e051      	b.n	800aa22 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	899b      	ldrh	r3, [r3, #12]
 800a984:	b29b      	uxth	r3, r3
 800a986:	4618      	mov	r0, r3
 800a988:	f7fa fea8 	bl	80056dc <lwip_htons>
 800a98c:	4603      	mov	r3, r0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d03c      	beq.n	800aa12 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a998:	4b16      	ldr	r3, [pc, #88]	@ (800a9f4 <tcp_receive+0x888>)
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	899b      	ldrh	r3, [r3, #12]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fa fe9b 	bl	80056dc <lwip_htons>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d12f      	bne.n	800aa12 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a9b2:	4b10      	ldr	r3, [pc, #64]	@ (800a9f4 <tcp_receive+0x888>)
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	899b      	ldrh	r3, [r3, #12]
 800a9b8:	b29c      	uxth	r4, r3
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	f7fa fe8e 	bl	80056dc <lwip_htons>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f4 <tcp_receive+0x888>)
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	4322      	orrs	r2, r4
 800a9ca:	b292      	uxth	r2, r2
 800a9cc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a9ce:	4b09      	ldr	r3, [pc, #36]	@ (800a9f4 <tcp_receive+0x888>)
 800a9d0:	891c      	ldrh	r4, [r3, #8]
 800a9d2:	4b08      	ldr	r3, [pc, #32]	@ (800a9f4 <tcp_receive+0x888>)
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	899b      	ldrh	r3, [r3, #12]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fa fe7e 	bl	80056dc <lwip_htons>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00d      	beq.n	800aa08 <tcp_receive+0x89c>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e00c      	b.n	800aa0a <tcp_receive+0x89e>
 800a9f0:	20007d34 	.word	0x20007d34
 800a9f4:	20007d10 	.word	0x20007d10
 800a9f8:	20007d3e 	.word	0x20007d3e
 800a9fc:	080125fc 	.word	0x080125fc
 800aa00:	080129a4 	.word	0x080129a4
 800aa04:	08012648 	.word	0x08012648
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4423      	add	r3, r4
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	4b98      	ldr	r3, [pc, #608]	@ (800ac70 <tcp_receive+0xb04>)
 800aa10:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800aa12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa14:	613b      	str	r3, [r7, #16]
              next = next->next;
 800aa16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800aa1c:	6938      	ldr	r0, [r7, #16]
 800aa1e:	f7fd fd32 	bl	8008486 <tcp_seg_free>
            while (next &&
 800aa22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00e      	beq.n	800aa46 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800aa28:	4b91      	ldr	r3, [pc, #580]	@ (800ac70 <tcp_receive+0xb04>)
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4b91      	ldr	r3, [pc, #580]	@ (800ac74 <tcp_receive+0xb08>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	441a      	add	r2, r3
 800aa34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa3c:	8909      	ldrh	r1, [r1, #8]
 800aa3e:	440b      	add	r3, r1
 800aa40:	1ad3      	subs	r3, r2, r3
            while (next &&
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	da9b      	bge.n	800a97e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800aa46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d059      	beq.n	800ab00 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800aa4c:	4b88      	ldr	r3, [pc, #544]	@ (800ac70 <tcp_receive+0xb04>)
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	461a      	mov	r2, r3
 800aa52:	4b88      	ldr	r3, [pc, #544]	@ (800ac74 <tcp_receive+0xb08>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	441a      	add	r2, r3
 800aa58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	dd4d      	ble.n	800ab00 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aa64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	4b81      	ldr	r3, [pc, #516]	@ (800ac74 <tcp_receive+0xb08>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	4b80      	ldr	r3, [pc, #512]	@ (800ac78 <tcp_receive+0xb0c>)
 800aa78:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa7a:	4b7f      	ldr	r3, [pc, #508]	@ (800ac78 <tcp_receive+0xb0c>)
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	899b      	ldrh	r3, [r3, #12]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fa fe2a 	bl	80056dc <lwip_htons>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d005      	beq.n	800aaa0 <tcp_receive+0x934>
                inseg.len -= 1;
 800aa94:	4b78      	ldr	r3, [pc, #480]	@ (800ac78 <tcp_receive+0xb0c>)
 800aa96:	891b      	ldrh	r3, [r3, #8]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	4b76      	ldr	r3, [pc, #472]	@ (800ac78 <tcp_receive+0xb0c>)
 800aa9e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aaa0:	4b75      	ldr	r3, [pc, #468]	@ (800ac78 <tcp_receive+0xb0c>)
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	4a74      	ldr	r2, [pc, #464]	@ (800ac78 <tcp_receive+0xb0c>)
 800aaa6:	8912      	ldrh	r2, [r2, #8]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fc f8e0 	bl	8006c70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aab0:	4b71      	ldr	r3, [pc, #452]	@ (800ac78 <tcp_receive+0xb0c>)
 800aab2:	891c      	ldrh	r4, [r3, #8]
 800aab4:	4b70      	ldr	r3, [pc, #448]	@ (800ac78 <tcp_receive+0xb0c>)
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	899b      	ldrh	r3, [r3, #12]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fa fe0d 	bl	80056dc <lwip_htons>
 800aac2:	4603      	mov	r3, r0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <tcp_receive+0x966>
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <tcp_receive+0x968>
 800aad2:	2300      	movs	r3, #0
 800aad4:	4423      	add	r3, r4
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	4b65      	ldr	r3, [pc, #404]	@ (800ac70 <tcp_receive+0xb04>)
 800aada:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aadc:	4b64      	ldr	r3, [pc, #400]	@ (800ac70 <tcp_receive+0xb04>)
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	4b64      	ldr	r3, [pc, #400]	@ (800ac74 <tcp_receive+0xb08>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	441a      	add	r2, r3
 800aae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d006      	beq.n	800ab00 <tcp_receive+0x994>
 800aaf2:	4b62      	ldr	r3, [pc, #392]	@ (800ac7c <tcp_receive+0xb10>)
 800aaf4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800aaf8:	4961      	ldr	r1, [pc, #388]	@ (800ac80 <tcp_receive+0xb14>)
 800aafa:	4862      	ldr	r0, [pc, #392]	@ (800ac84 <tcp_receive+0xb18>)
 800aafc:	f005 fb02 	bl	8010104 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab04:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ab06:	4b5a      	ldr	r3, [pc, #360]	@ (800ac70 <tcp_receive+0xb04>)
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4b59      	ldr	r3, [pc, #356]	@ (800ac74 <tcp_receive+0xb08>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	441a      	add	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ab1a:	4b55      	ldr	r3, [pc, #340]	@ (800ac70 <tcp_receive+0xb04>)
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d206      	bcs.n	800ab30 <tcp_receive+0x9c4>
 800ab22:	4b56      	ldr	r3, [pc, #344]	@ (800ac7c <tcp_receive+0xb10>)
 800ab24:	f240 6207 	movw	r2, #1543	@ 0x607
 800ab28:	4957      	ldr	r1, [pc, #348]	@ (800ac88 <tcp_receive+0xb1c>)
 800ab2a:	4856      	ldr	r0, [pc, #344]	@ (800ac84 <tcp_receive+0xb18>)
 800ab2c:	f005 faea 	bl	8010104 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ab34:	4b4e      	ldr	r3, [pc, #312]	@ (800ac70 <tcp_receive+0xb04>)
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7fc ffbf 	bl	8007ac4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ab46:	4b4c      	ldr	r3, [pc, #304]	@ (800ac78 <tcp_receive+0xb0c>)
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	891b      	ldrh	r3, [r3, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d006      	beq.n	800ab5e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ab50:	4b49      	ldr	r3, [pc, #292]	@ (800ac78 <tcp_receive+0xb0c>)
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4a4d      	ldr	r2, [pc, #308]	@ (800ac8c <tcp_receive+0xb20>)
 800ab56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ab58:	4b47      	ldr	r3, [pc, #284]	@ (800ac78 <tcp_receive+0xb0c>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab5e:	4b46      	ldr	r3, [pc, #280]	@ (800ac78 <tcp_receive+0xb0c>)
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	899b      	ldrh	r3, [r3, #12]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fa fdb8 	bl	80056dc <lwip_htons>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 80b8 	beq.w	800acea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ab7a:	4b45      	ldr	r3, [pc, #276]	@ (800ac90 <tcp_receive+0xb24>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	f043 0320 	orr.w	r3, r3, #32
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	4b42      	ldr	r3, [pc, #264]	@ (800ac90 <tcp_receive+0xb24>)
 800ab86:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ab88:	e0af      	b.n	800acea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab8e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	4a36      	ldr	r2, [pc, #216]	@ (800ac74 <tcp_receive+0xb08>)
 800ab9a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	891b      	ldrh	r3, [r3, #8]
 800aba0:	461c      	mov	r4, r3
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	899b      	ldrh	r3, [r3, #12]
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fa fd96 	bl	80056dc <lwip_htons>
 800abb0:	4603      	mov	r3, r0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <tcp_receive+0xa54>
 800abbc:	2301      	movs	r3, #1
 800abbe:	e000      	b.n	800abc2 <tcp_receive+0xa56>
 800abc0:	2300      	movs	r3, #0
 800abc2:	191a      	adds	r2, r3, r4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc8:	441a      	add	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abd2:	461c      	mov	r4, r3
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	891b      	ldrh	r3, [r3, #8]
 800abd8:	461d      	mov	r5, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	899b      	ldrh	r3, [r3, #12]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fa fd7a 	bl	80056dc <lwip_htons>
 800abe8:	4603      	mov	r3, r0
 800abea:	b2db      	uxtb	r3, r3
 800abec:	f003 0303 	and.w	r3, r3, #3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <tcp_receive+0xa8c>
 800abf4:	2301      	movs	r3, #1
 800abf6:	e000      	b.n	800abfa <tcp_receive+0xa8e>
 800abf8:	2300      	movs	r3, #0
 800abfa:	442b      	add	r3, r5
 800abfc:	429c      	cmp	r4, r3
 800abfe:	d206      	bcs.n	800ac0e <tcp_receive+0xaa2>
 800ac00:	4b1e      	ldr	r3, [pc, #120]	@ (800ac7c <tcp_receive+0xb10>)
 800ac02:	f240 622b 	movw	r2, #1579	@ 0x62b
 800ac06:	4923      	ldr	r1, [pc, #140]	@ (800ac94 <tcp_receive+0xb28>)
 800ac08:	481e      	ldr	r0, [pc, #120]	@ (800ac84 <tcp_receive+0xb18>)
 800ac0a:	f005 fa7b 	bl	8010104 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	891b      	ldrh	r3, [r3, #8]
 800ac12:	461c      	mov	r4, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	899b      	ldrh	r3, [r3, #12]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fa fd5d 	bl	80056dc <lwip_htons>
 800ac22:	4603      	mov	r3, r0
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <tcp_receive+0xac6>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e000      	b.n	800ac34 <tcp_receive+0xac8>
 800ac32:	2300      	movs	r3, #0
 800ac34:	1919      	adds	r1, r3, r4
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ac3a:	b28b      	uxth	r3, r1
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7fc ff3d 	bl	8007ac4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	891b      	ldrh	r3, [r3, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d028      	beq.n	800aca6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ac54:	4b0d      	ldr	r3, [pc, #52]	@ (800ac8c <tcp_receive+0xb20>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01d      	beq.n	800ac98 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac8c <tcp_receive+0xb20>)
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f7fc fa4a 	bl	8007100 <pbuf_cat>
 800ac6c:	e018      	b.n	800aca0 <tcp_receive+0xb34>
 800ac6e:	bf00      	nop
 800ac70:	20007d3e 	.word	0x20007d3e
 800ac74:	20007d34 	.word	0x20007d34
 800ac78:	20007d10 	.word	0x20007d10
 800ac7c:	080125fc 	.word	0x080125fc
 800ac80:	080129dc 	.word	0x080129dc
 800ac84:	08012648 	.word	0x08012648
 800ac88:	08012a18 	.word	0x08012a18
 800ac8c:	20007d44 	.word	0x20007d44
 800ac90:	20007d41 	.word	0x20007d41
 800ac94:	08012a38 	.word	0x08012a38
            } else {
              recv_data = cseg->p;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	4a70      	ldr	r2, [pc, #448]	@ (800ae60 <tcp_receive+0xcf4>)
 800ac9e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2200      	movs	r2, #0
 800aca4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	899b      	ldrh	r3, [r3, #12]
 800acac:	b29b      	uxth	r3, r3
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fa fd14 	bl	80056dc <lwip_htons>
 800acb4:	4603      	mov	r3, r0
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00d      	beq.n	800acdc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800acc0:	4b68      	ldr	r3, [pc, #416]	@ (800ae64 <tcp_receive+0xcf8>)
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	f043 0320 	orr.w	r3, r3, #32
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	4b66      	ldr	r3, [pc, #408]	@ (800ae64 <tcp_receive+0xcf8>)
 800accc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	7d1b      	ldrb	r3, [r3, #20]
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	d102      	bne.n	800acdc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2207      	movs	r2, #7
 800acda:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ace4:	68b8      	ldr	r0, [r7, #8]
 800ace6:	f7fd fbce 	bl	8008486 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d008      	beq.n	800ad04 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	685a      	ldr	r2, [r3, #4]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800acfe:	429a      	cmp	r2, r3
 800ad00:	f43f af43 	beq.w	800ab8a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	8b5b      	ldrh	r3, [r3, #26]
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00e      	beq.n	800ad2e <tcp_receive+0xbc2>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8b5b      	ldrh	r3, [r3, #26]
 800ad14:	f023 0301 	bic.w	r3, r3, #1
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	835a      	strh	r2, [r3, #26]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	8b5b      	ldrh	r3, [r3, #26]
 800ad22:	f043 0302 	orr.w	r3, r3, #2
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ad2c:	e187      	b.n	800b03e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	8b5b      	ldrh	r3, [r3, #26]
 800ad32:	f043 0301 	orr.w	r3, r3, #1
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ad3c:	e17f      	b.n	800b03e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ad46:	4848      	ldr	r0, [pc, #288]	@ (800ae68 <tcp_receive+0xcfc>)
 800ad48:	f7fd fbb6 	bl	80084b8 <tcp_seg_copy>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	675a      	str	r2, [r3, #116]	@ 0x74
 800ad52:	e16c      	b.n	800b02e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ad54:	2300      	movs	r3, #0
 800ad56:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad5e:	e156      	b.n	800b00e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ad60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	4b41      	ldr	r3, [pc, #260]	@ (800ae6c <tcp_receive+0xd00>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d11d      	bne.n	800adaa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ad6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ae68 <tcp_receive+0xcfc>)
 800ad70:	891a      	ldrh	r2, [r3, #8]
 800ad72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad74:	891b      	ldrh	r3, [r3, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	f240 814e 	bls.w	800b018 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad7c:	483a      	ldr	r0, [pc, #232]	@ (800ae68 <tcp_receive+0xcfc>)
 800ad7e:	f7fd fb9b 	bl	80084b8 <tcp_seg_copy>
 800ad82:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 8148 	beq.w	800b01c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ad92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e002      	b.n	800ada0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ada0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ada2:	6978      	ldr	r0, [r7, #20]
 800ada4:	f7ff f8de 	bl	8009f64 <tcp_oos_insert_segment>
                }
                break;
 800ada8:	e138      	b.n	800b01c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800adaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adac:	2b00      	cmp	r3, #0
 800adae:	d117      	bne.n	800ade0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800adb0:	4b2e      	ldr	r3, [pc, #184]	@ (800ae6c <tcp_receive+0xd00>)
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da57      	bge.n	800ae70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800adc0:	4829      	ldr	r0, [pc, #164]	@ (800ae68 <tcp_receive+0xcfc>)
 800adc2:	f7fd fb79 	bl	80084b8 <tcp_seg_copy>
 800adc6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 8128 	beq.w	800b020 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800add6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800add8:	69b8      	ldr	r0, [r7, #24]
 800adda:	f7ff f8c3 	bl	8009f64 <tcp_oos_insert_segment>
                  }
                  break;
 800adde:	e11f      	b.n	800b020 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ade0:	4b22      	ldr	r3, [pc, #136]	@ (800ae6c <tcp_receive+0xd00>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	3b01      	subs	r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	db3e      	blt.n	800ae70 <tcp_receive+0xd04>
 800adf2:	4b1e      	ldr	r3, [pc, #120]	@ (800ae6c <tcp_receive+0xd00>)
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	3301      	adds	r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	dc35      	bgt.n	800ae70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae04:	4818      	ldr	r0, [pc, #96]	@ (800ae68 <tcp_receive+0xcfc>)
 800ae06:	f7fd fb57 	bl	80084b8 <tcp_seg_copy>
 800ae0a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 8108 	beq.w	800b024 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ae14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae1c:	8912      	ldrh	r2, [r2, #8]
 800ae1e:	441a      	add	r2, r3
 800ae20:	4b12      	ldr	r3, [pc, #72]	@ (800ae6c <tcp_receive+0xd00>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dd12      	ble.n	800ae50 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ae2a:	4b10      	ldr	r3, [pc, #64]	@ (800ae6c <tcp_receive+0xd00>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ae40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae46:	891b      	ldrh	r3, [r3, #8]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f7fb ff10 	bl	8006c70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ae50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae52:	69fa      	ldr	r2, [r7, #28]
 800ae54:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ae56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ae58:	69f8      	ldr	r0, [r7, #28]
 800ae5a:	f7ff f883 	bl	8009f64 <tcp_oos_insert_segment>
                  }
                  break;
 800ae5e:	e0e1      	b.n	800b024 <tcp_receive+0xeb8>
 800ae60:	20007d44 	.word	0x20007d44
 800ae64:	20007d41 	.word	0x20007d41
 800ae68:	20007d10 	.word	0x20007d10
 800ae6c:	20007d34 	.word	0x20007d34
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ae70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae72:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ae74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f040 80c5 	bne.w	800b008 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ae7e:	4b7f      	ldr	r3, [pc, #508]	@ (800b07c <tcp_receive+0xf10>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f340 80bc 	ble.w	800b008 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ae90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	899b      	ldrh	r3, [r3, #12]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fa fc1f 	bl	80056dc <lwip_htons>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f040 80be 	bne.w	800b028 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800aeac:	4874      	ldr	r0, [pc, #464]	@ (800b080 <tcp_receive+0xf14>)
 800aeae:	f7fd fb03 	bl	80084b8 <tcp_seg_copy>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 80b5 	beq.w	800b02c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800aec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aeca:	8912      	ldrh	r2, [r2, #8]
 800aecc:	441a      	add	r2, r3
 800aece:	4b6b      	ldr	r3, [pc, #428]	@ (800b07c <tcp_receive+0xf10>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dd12      	ble.n	800aefe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800aed8:	4b68      	ldr	r3, [pc, #416]	@ (800b07c <tcp_receive+0xf10>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	b29a      	uxth	r2, r3
 800aede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800aeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	891b      	ldrh	r3, [r3, #8]
 800aef6:	4619      	mov	r1, r3
 800aef8:	4610      	mov	r0, r2
 800aefa:	f7fb feb9 	bl	8006c70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800aefe:	4b61      	ldr	r3, [pc, #388]	@ (800b084 <tcp_receive+0xf18>)
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	4b5d      	ldr	r3, [pc, #372]	@ (800b07c <tcp_receive+0xf10>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	441a      	add	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800af12:	440b      	add	r3, r1
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	f340 8088 	ble.w	800b02c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800af1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	899b      	ldrh	r3, [r3, #12]
 800af24:	b29b      	uxth	r3, r3
 800af26:	4618      	mov	r0, r3
 800af28:	f7fa fbd8 	bl	80056dc <lwip_htons>
 800af2c:	4603      	mov	r3, r0
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	d021      	beq.n	800af7c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800af38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	899b      	ldrh	r3, [r3, #12]
 800af40:	b29b      	uxth	r3, r3
 800af42:	b21b      	sxth	r3, r3
 800af44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800af48:	b21c      	sxth	r4, r3
 800af4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	899b      	ldrh	r3, [r3, #12]
 800af52:	b29b      	uxth	r3, r3
 800af54:	4618      	mov	r0, r3
 800af56:	f7fa fbc1 	bl	80056dc <lwip_htons>
 800af5a:	4603      	mov	r3, r0
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800af62:	b29b      	uxth	r3, r3
 800af64:	4618      	mov	r0, r3
 800af66:	f7fa fbb9 	bl	80056dc <lwip_htons>
 800af6a:	4603      	mov	r3, r0
 800af6c:	b21b      	sxth	r3, r3
 800af6e:	4323      	orrs	r3, r4
 800af70:	b21a      	sxth	r2, r3
 800af72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	b292      	uxth	r2, r2
 800af7a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af80:	b29a      	uxth	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af86:	4413      	add	r3, r2
 800af88:	b299      	uxth	r1, r3
 800af8a:	4b3c      	ldr	r3, [pc, #240]	@ (800b07c <tcp_receive+0xf10>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	b29a      	uxth	r2, r3
 800af90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	1a8a      	subs	r2, r1, r2
 800af96:	b292      	uxth	r2, r2
 800af98:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800af9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	891b      	ldrh	r3, [r3, #8]
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7fb fe61 	bl	8006c70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800afae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	891c      	ldrh	r4, [r3, #8]
 800afb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	899b      	ldrh	r3, [r3, #12]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fa fb8c 	bl	80056dc <lwip_htons>
 800afc4:	4603      	mov	r3, r0
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <tcp_receive+0xe68>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <tcp_receive+0xe6a>
 800afd4:	2300      	movs	r3, #0
 800afd6:	4423      	add	r3, r4
 800afd8:	b29a      	uxth	r2, r3
 800afda:	4b2a      	ldr	r3, [pc, #168]	@ (800b084 <tcp_receive+0xf18>)
 800afdc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800afde:	4b29      	ldr	r3, [pc, #164]	@ (800b084 <tcp_receive+0xf18>)
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	4b25      	ldr	r3, [pc, #148]	@ (800b07c <tcp_receive+0xf10>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	441a      	add	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800aff2:	440b      	add	r3, r1
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d019      	beq.n	800b02c <tcp_receive+0xec0>
 800aff8:	4b23      	ldr	r3, [pc, #140]	@ (800b088 <tcp_receive+0xf1c>)
 800affa:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800affe:	4923      	ldr	r1, [pc, #140]	@ (800b08c <tcp_receive+0xf20>)
 800b000:	4823      	ldr	r0, [pc, #140]	@ (800b090 <tcp_receive+0xf24>)
 800b002:	f005 f87f 	bl	8010104 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b006:	e011      	b.n	800b02c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b010:	2b00      	cmp	r3, #0
 800b012:	f47f aea5 	bne.w	800ad60 <tcp_receive+0xbf4>
 800b016:	e00a      	b.n	800b02e <tcp_receive+0xec2>
                break;
 800b018:	bf00      	nop
 800b01a:	e008      	b.n	800b02e <tcp_receive+0xec2>
                break;
 800b01c:	bf00      	nop
 800b01e:	e006      	b.n	800b02e <tcp_receive+0xec2>
                  break;
 800b020:	bf00      	nop
 800b022:	e004      	b.n	800b02e <tcp_receive+0xec2>
                  break;
 800b024:	bf00      	nop
 800b026:	e002      	b.n	800b02e <tcp_receive+0xec2>
                  break;
 800b028:	bf00      	nop
 800b02a:	e000      	b.n	800b02e <tcp_receive+0xec2>
                break;
 800b02c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f001 fa44 	bl	800c4bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b034:	e003      	b.n	800b03e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 fa40 	bl	800c4bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b03c:	e01a      	b.n	800b074 <tcp_receive+0xf08>
 800b03e:	e019      	b.n	800b074 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b040:	4b0e      	ldr	r3, [pc, #56]	@ (800b07c <tcp_receive+0xf10>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	db0a      	blt.n	800b064 <tcp_receive+0xef8>
 800b04e:	4b0b      	ldr	r3, [pc, #44]	@ (800b07c <tcp_receive+0xf10>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b05a:	440b      	add	r3, r1
 800b05c:	1ad3      	subs	r3, r2, r3
 800b05e:	3301      	adds	r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	dd07      	ble.n	800b074 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8b5b      	ldrh	r3, [r3, #26]
 800b068:	f043 0302 	orr.w	r3, r3, #2
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b072:	e7ff      	b.n	800b074 <tcp_receive+0xf08>
 800b074:	bf00      	nop
 800b076:	3750      	adds	r7, #80	@ 0x50
 800b078:	46bd      	mov	sp, r7
 800b07a:	bdb0      	pop	{r4, r5, r7, pc}
 800b07c:	20007d34 	.word	0x20007d34
 800b080:	20007d10 	.word	0x20007d10
 800b084:	20007d3e 	.word	0x20007d3e
 800b088:	080125fc 	.word	0x080125fc
 800b08c:	080129a4 	.word	0x080129a4
 800b090:	08012648 	.word	0x08012648

0800b094 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b09a:	4b15      	ldr	r3, [pc, #84]	@ (800b0f0 <tcp_get_next_optbyte+0x5c>)
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	b291      	uxth	r1, r2
 800b0a2:	4a13      	ldr	r2, [pc, #76]	@ (800b0f0 <tcp_get_next_optbyte+0x5c>)
 800b0a4:	8011      	strh	r1, [r2, #0]
 800b0a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b0a8:	4b12      	ldr	r3, [pc, #72]	@ (800b0f4 <tcp_get_next_optbyte+0x60>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <tcp_get_next_optbyte+0x26>
 800b0b0:	4b11      	ldr	r3, [pc, #68]	@ (800b0f8 <tcp_get_next_optbyte+0x64>)
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	88fa      	ldrh	r2, [r7, #6]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d208      	bcs.n	800b0cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b0ba:	4b10      	ldr	r3, [pc, #64]	@ (800b0fc <tcp_get_next_optbyte+0x68>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3314      	adds	r3, #20
 800b0c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	e00b      	b.n	800b0e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b0cc:	88fb      	ldrh	r3, [r7, #6]
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	4b09      	ldr	r3, [pc, #36]	@ (800b0f8 <tcp_get_next_optbyte+0x64>)
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b0da:	4b06      	ldr	r3, [pc, #24]	@ (800b0f4 <tcp_get_next_optbyte+0x60>)
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	797b      	ldrb	r3, [r7, #5]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20007d30 	.word	0x20007d30
 800b0f4:	20007d2c 	.word	0x20007d2c
 800b0f8:	20007d2a 	.word	0x20007d2a
 800b0fc:	20007d24 	.word	0x20007d24

0800b100 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <tcp_parseopt+0x1c>
 800b10e:	4b32      	ldr	r3, [pc, #200]	@ (800b1d8 <tcp_parseopt+0xd8>)
 800b110:	f240 727d 	movw	r2, #1917	@ 0x77d
 800b114:	4931      	ldr	r1, [pc, #196]	@ (800b1dc <tcp_parseopt+0xdc>)
 800b116:	4832      	ldr	r0, [pc, #200]	@ (800b1e0 <tcp_parseopt+0xe0>)
 800b118:	f004 fff4 	bl	8010104 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b11c:	4b31      	ldr	r3, [pc, #196]	@ (800b1e4 <tcp_parseopt+0xe4>)
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d056      	beq.n	800b1d2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b124:	4b30      	ldr	r3, [pc, #192]	@ (800b1e8 <tcp_parseopt+0xe8>)
 800b126:	2200      	movs	r2, #0
 800b128:	801a      	strh	r2, [r3, #0]
 800b12a:	e046      	b.n	800b1ba <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800b12c:	f7ff ffb2 	bl	800b094 <tcp_get_next_optbyte>
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	2b02      	cmp	r3, #2
 800b138:	d006      	beq.n	800b148 <tcp_parseopt+0x48>
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	dc2a      	bgt.n	800b194 <tcp_parseopt+0x94>
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d042      	beq.n	800b1c8 <tcp_parseopt+0xc8>
 800b142:	2b01      	cmp	r3, #1
 800b144:	d038      	beq.n	800b1b8 <tcp_parseopt+0xb8>
 800b146:	e025      	b.n	800b194 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b148:	f7ff ffa4 	bl	800b094 <tcp_get_next_optbyte>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b04      	cmp	r3, #4
 800b150:	d13c      	bne.n	800b1cc <tcp_parseopt+0xcc>
 800b152:	4b25      	ldr	r3, [pc, #148]	@ (800b1e8 <tcp_parseopt+0xe8>)
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	3301      	adds	r3, #1
 800b158:	4a22      	ldr	r2, [pc, #136]	@ (800b1e4 <tcp_parseopt+0xe4>)
 800b15a:	8812      	ldrh	r2, [r2, #0]
 800b15c:	4293      	cmp	r3, r2
 800b15e:	da35      	bge.n	800b1cc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b160:	f7ff ff98 	bl	800b094 <tcp_get_next_optbyte>
 800b164:	4603      	mov	r3, r0
 800b166:	021b      	lsls	r3, r3, #8
 800b168:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b16a:	f7ff ff93 	bl	800b094 <tcp_get_next_optbyte>
 800b16e:	4603      	mov	r3, r0
 800b170:	461a      	mov	r2, r3
 800b172:	89bb      	ldrh	r3, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b178:	89bb      	ldrh	r3, [r7, #12]
 800b17a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b17e:	d804      	bhi.n	800b18a <tcp_parseopt+0x8a>
 800b180:	89bb      	ldrh	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <tcp_parseopt+0x8a>
 800b186:	89ba      	ldrh	r2, [r7, #12]
 800b188:	e001      	b.n	800b18e <tcp_parseopt+0x8e>
 800b18a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800b192:	e012      	b.n	800b1ba <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b194:	f7ff ff7e 	bl	800b094 <tcp_get_next_optbyte>
 800b198:	4603      	mov	r3, r0
 800b19a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b19c:	7afb      	ldrb	r3, [r7, #11]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d916      	bls.n	800b1d0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b1a2:	7afb      	ldrb	r3, [r7, #11]
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	4b10      	ldr	r3, [pc, #64]	@ (800b1e8 <tcp_parseopt+0xe8>)
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	3b02      	subs	r3, #2
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e8 <tcp_parseopt+0xe8>)
 800b1b4:	801a      	strh	r2, [r3, #0]
 800b1b6:	e000      	b.n	800b1ba <tcp_parseopt+0xba>
          break;
 800b1b8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b1e8 <tcp_parseopt+0xe8>)
 800b1bc:	881a      	ldrh	r2, [r3, #0]
 800b1be:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <tcp_parseopt+0xe4>)
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d3b2      	bcc.n	800b12c <tcp_parseopt+0x2c>
 800b1c6:	e004      	b.n	800b1d2 <tcp_parseopt+0xd2>
          return;
 800b1c8:	bf00      	nop
 800b1ca:	e002      	b.n	800b1d2 <tcp_parseopt+0xd2>
            return;
 800b1cc:	bf00      	nop
 800b1ce:	e000      	b.n	800b1d2 <tcp_parseopt+0xd2>
            return;
 800b1d0:	bf00      	nop
      }
    }
  }
}
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	080125fc 	.word	0x080125fc
 800b1dc:	08012a60 	.word	0x08012a60
 800b1e0:	08012648 	.word	0x08012648
 800b1e4:	20007d28 	.word	0x20007d28
 800b1e8:	20007d30 	.word	0x20007d30

0800b1ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b1f0:	4b05      	ldr	r3, [pc, #20]	@ (800b208 <tcp_trigger_input_pcb_close+0x1c>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	f043 0310 	orr.w	r3, r3, #16
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	4b03      	ldr	r3, [pc, #12]	@ (800b208 <tcp_trigger_input_pcb_close+0x1c>)
 800b1fc:	701a      	strb	r2, [r3, #0]
}
 800b1fe:	bf00      	nop
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	20007d41 	.word	0x20007d41

0800b20c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <tcp_route+0x28>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	7a1b      	ldrb	r3, [r3, #8]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	7a1b      	ldrb	r3, [r3, #8]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fb fb46 	bl	80068bc <netif_get_by_index>
 800b230:	4603      	mov	r3, r0
 800b232:	e003      	b.n	800b23c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f003 fc0f 	bl	800ea58 <ip4_route>
 800b23a:	4603      	mov	r3, r0
  }
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b244:	b590      	push	{r4, r7, lr}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	4613      	mov	r3, r2
 800b252:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d105      	bne.n	800b266 <tcp_create_segment+0x22>
 800b25a:	4b45      	ldr	r3, [pc, #276]	@ (800b370 <tcp_create_segment+0x12c>)
 800b25c:	22a3      	movs	r2, #163	@ 0xa3
 800b25e:	4945      	ldr	r1, [pc, #276]	@ (800b374 <tcp_create_segment+0x130>)
 800b260:	4845      	ldr	r0, [pc, #276]	@ (800b378 <tcp_create_segment+0x134>)
 800b262:	f004 ff4f 	bl	8010104 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <tcp_create_segment+0x34>
 800b26c:	4b40      	ldr	r3, [pc, #256]	@ (800b370 <tcp_create_segment+0x12c>)
 800b26e:	22a4      	movs	r2, #164	@ 0xa4
 800b270:	4942      	ldr	r1, [pc, #264]	@ (800b37c <tcp_create_segment+0x138>)
 800b272:	4841      	ldr	r0, [pc, #260]	@ (800b378 <tcp_create_segment+0x134>)
 800b274:	f004 ff46 	bl	8010104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b278:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b286:	2003      	movs	r0, #3
 800b288:	f7fa fe9c 	bl	8005fc4 <memp_malloc>
 800b28c:	6138      	str	r0, [r7, #16]
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d104      	bne.n	800b29e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b294:	68b8      	ldr	r0, [r7, #8]
 800b296:	f7fb fe71 	bl	8006f7c <pbuf_free>
    return NULL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	e063      	b.n	800b366 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b2a4:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	891a      	ldrh	r2, [r3, #8]
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d205      	bcs.n	800b2ca <tcp_create_segment+0x86>
 800b2be:	4b2c      	ldr	r3, [pc, #176]	@ (800b370 <tcp_create_segment+0x12c>)
 800b2c0:	22b0      	movs	r2, #176	@ 0xb0
 800b2c2:	492f      	ldr	r1, [pc, #188]	@ (800b380 <tcp_create_segment+0x13c>)
 800b2c4:	482c      	ldr	r0, [pc, #176]	@ (800b378 <tcp_create_segment+0x134>)
 800b2c6:	f004 ff1d 	bl	8010104 <iprintf>
  seg->len = p->tot_len - optlen;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	891a      	ldrh	r2, [r3, #8]
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b2e0:	2114      	movs	r1, #20
 800b2e2:	68b8      	ldr	r0, [r7, #8]
 800b2e4:	f7fb fdb4 	bl	8006e50 <pbuf_add_header>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b2ee:	6938      	ldr	r0, [r7, #16]
 800b2f0:	f7fd f8c9 	bl	8008486 <tcp_seg_free>
    return NULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	e036      	b.n	800b366 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8ada      	ldrh	r2, [r3, #22]
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	691c      	ldr	r4, [r3, #16]
 800b30a:	4610      	mov	r0, r2
 800b30c:	f7fa f9e6 	bl	80056dc <lwip_htons>
 800b310:	4603      	mov	r3, r0
 800b312:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	8b1a      	ldrh	r2, [r3, #24]
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	691c      	ldr	r4, [r3, #16]
 800b31c:	4610      	mov	r0, r2
 800b31e:	f7fa f9dd 	bl	80056dc <lwip_htons>
 800b322:	4603      	mov	r3, r0
 800b324:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	691c      	ldr	r4, [r3, #16]
 800b32a:	6838      	ldr	r0, [r7, #0]
 800b32c:	f7fa f9ec 	bl	8005708 <lwip_htonl>
 800b330:	4603      	mov	r3, r0
 800b332:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b334:	7dfb      	ldrb	r3, [r7, #23]
 800b336:	089b      	lsrs	r3, r3, #2
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	3305      	adds	r3, #5
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	031b      	lsls	r3, r3, #12
 800b340:	b29a      	uxth	r2, r3
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	b29b      	uxth	r3, r3
 800b346:	4313      	orrs	r3, r2
 800b348:	b29a      	uxth	r2, r3
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	691c      	ldr	r4, [r3, #16]
 800b34e:	4610      	mov	r0, r2
 800b350:	f7fa f9c4 	bl	80056dc <lwip_htons>
 800b354:	4603      	mov	r3, r0
 800b356:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2200      	movs	r2, #0
 800b35e:	749a      	strb	r2, [r3, #18]
 800b360:	2200      	movs	r2, #0
 800b362:	74da      	strb	r2, [r3, #19]
  return seg;
 800b364:	693b      	ldr	r3, [r7, #16]
}
 800b366:	4618      	mov	r0, r3
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd90      	pop	{r4, r7, pc}
 800b36e:	bf00      	nop
 800b370:	08012a7c 	.word	0x08012a7c
 800b374:	08012ab0 	.word	0x08012ab0
 800b378:	08012ad0 	.word	0x08012ad0
 800b37c:	08012af8 	.word	0x08012af8
 800b380:	08012b1c 	.word	0x08012b1c

0800b384 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b384:	b590      	push	{r4, r7, lr}
 800b386:	b08b      	sub	sp, #44	@ 0x2c
 800b388:	af02      	add	r7, sp, #8
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b390:	2300      	movs	r3, #0
 800b392:	61bb      	str	r3, [r7, #24]
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b398:	2300      	movs	r3, #0
 800b39a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d106      	bne.n	800b3b0 <tcp_split_unsent_seg+0x2c>
 800b3a2:	4b97      	ldr	r3, [pc, #604]	@ (800b600 <tcp_split_unsent_seg+0x27c>)
 800b3a4:	f240 324b 	movw	r2, #843	@ 0x34b
 800b3a8:	4996      	ldr	r1, [pc, #600]	@ (800b604 <tcp_split_unsent_seg+0x280>)
 800b3aa:	4897      	ldr	r0, [pc, #604]	@ (800b608 <tcp_split_unsent_seg+0x284>)
 800b3ac:	f004 feaa 	bl	8010104 <iprintf>

  useg = pcb->unsent;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b3bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3c0:	e119      	b.n	800b5f6 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800b3c2:	887b      	ldrh	r3, [r7, #2]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b3c8:	4b8d      	ldr	r3, [pc, #564]	@ (800b600 <tcp_split_unsent_seg+0x27c>)
 800b3ca:	f240 3253 	movw	r2, #851	@ 0x353
 800b3ce:	498f      	ldr	r1, [pc, #572]	@ (800b60c <tcp_split_unsent_seg+0x288>)
 800b3d0:	488d      	ldr	r0, [pc, #564]	@ (800b608 <tcp_split_unsent_seg+0x284>)
 800b3d2:	f004 fe97 	bl	8010104 <iprintf>
    return ERR_VAL;
 800b3d6:	f06f 0305 	mvn.w	r3, #5
 800b3da:	e10c      	b.n	800b5f6 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	891b      	ldrh	r3, [r3, #8]
 800b3e0:	887a      	ldrh	r2, [r7, #2]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d301      	bcc.n	800b3ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e105      	b.n	800b5f6 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3ee:	887a      	ldrh	r2, [r7, #2]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d906      	bls.n	800b402 <tcp_split_unsent_seg+0x7e>
 800b3f4:	4b82      	ldr	r3, [pc, #520]	@ (800b600 <tcp_split_unsent_seg+0x27c>)
 800b3f6:	f240 325b 	movw	r2, #859	@ 0x35b
 800b3fa:	4985      	ldr	r1, [pc, #532]	@ (800b610 <tcp_split_unsent_seg+0x28c>)
 800b3fc:	4882      	ldr	r0, [pc, #520]	@ (800b608 <tcp_split_unsent_seg+0x284>)
 800b3fe:	f004 fe81 	bl	8010104 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	891b      	ldrh	r3, [r3, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <tcp_split_unsent_seg+0x94>
 800b40a:	4b7d      	ldr	r3, [pc, #500]	@ (800b600 <tcp_split_unsent_seg+0x27c>)
 800b40c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b410:	4980      	ldr	r1, [pc, #512]	@ (800b614 <tcp_split_unsent_seg+0x290>)
 800b412:	487d      	ldr	r0, [pc, #500]	@ (800b608 <tcp_split_unsent_seg+0x284>)
 800b414:	f004 fe76 	bl	8010104 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	7b1b      	ldrb	r3, [r3, #12]
 800b41c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	b2db      	uxtb	r3, r3
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	891a      	ldrh	r2, [r3, #8]
 800b42e:	887b      	ldrh	r3, [r7, #2]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b434:	7bbb      	ldrb	r3, [r7, #14]
 800b436:	b29a      	uxth	r2, r3
 800b438:	89bb      	ldrh	r3, [r7, #12]
 800b43a:	4413      	add	r3, r2
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b442:	4619      	mov	r1, r3
 800b444:	2036      	movs	r0, #54	@ 0x36
 800b446:	f7fb fab5 	bl	80069b4 <pbuf_alloc>
 800b44a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f000 80ba 	beq.w	800b5c8 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	891a      	ldrh	r2, [r3, #8]
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	891b      	ldrh	r3, [r3, #8]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	b29a      	uxth	r2, r3
 800b462:	887b      	ldrh	r3, [r7, #2]
 800b464:	4413      	add	r3, r2
 800b466:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	6858      	ldr	r0, [r3, #4]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	685a      	ldr	r2, [r3, #4]
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	18d1      	adds	r1, r2, r3
 800b474:	897b      	ldrh	r3, [r7, #10]
 800b476:	89ba      	ldrh	r2, [r7, #12]
 800b478:	f7fb ff7a 	bl	8007370 <pbuf_copy_partial>
 800b47c:	4603      	mov	r3, r0
 800b47e:	461a      	mov	r2, r3
 800b480:	89bb      	ldrh	r3, [r7, #12]
 800b482:	4293      	cmp	r3, r2
 800b484:	f040 80a2 	bne.w	800b5cc <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	899b      	ldrh	r3, [r3, #12]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	4618      	mov	r0, r3
 800b492:	f7fa f923 	bl	80056dc <lwip_htons>
 800b496:	4603      	mov	r3, r0
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b49e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800b4a4:	7ffb      	ldrb	r3, [r7, #31]
 800b4a6:	f003 0308 	and.w	r3, r3, #8
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d007      	beq.n	800b4be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b4ae:	7ffb      	ldrb	r3, [r7, #31]
 800b4b0:	f023 0308 	bic.w	r3, r3, #8
 800b4b4:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800b4b6:	7fbb      	ldrb	r3, [r7, #30]
 800b4b8:	f043 0308 	orr.w	r3, r3, #8
 800b4bc:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800b4be:	7ffb      	ldrb	r3, [r7, #31]
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b4c8:	7ffb      	ldrb	r3, [r7, #31]
 800b4ca:	f023 0301 	bic.w	r3, r3, #1
 800b4ce:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800b4d0:	7fbb      	ldrb	r3, [r7, #30]
 800b4d2:	f043 0301 	orr.w	r3, r3, #1
 800b4d6:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fa f912 	bl	8005708 <lwip_htonl>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	887b      	ldrh	r3, [r7, #2]
 800b4e8:	18d1      	adds	r1, r2, r3
 800b4ea:	7fba      	ldrb	r2, [r7, #30]
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	6939      	ldr	r1, [r7, #16]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff fea5 	bl	800b244 <tcp_create_segment>
 800b4fa:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d066      	beq.n	800b5d0 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4618      	mov	r0, r3
 800b508:	f7fb fdc0 	bl	800708c <pbuf_clen>
 800b50c:	4603      	mov	r3, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b516:	1a9b      	subs	r3, r3, r2
 800b518:	b29a      	uxth	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	6858      	ldr	r0, [r3, #4]
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	891a      	ldrh	r2, [r3, #8]
 800b52a:	89bb      	ldrh	r3, [r7, #12]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	b29b      	uxth	r3, r3
 800b530:	4619      	mov	r1, r3
 800b532:	f7fb fb9d 	bl	8006c70 <pbuf_realloc>
  useg->len -= remainder;
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	891a      	ldrh	r2, [r3, #8]
 800b53a:	89bb      	ldrh	r3, [r7, #12]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	b29a      	uxth	r2, r3
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	899b      	ldrh	r3, [r3, #12]
 800b54a:	b29c      	uxth	r4, r3
 800b54c:	7ffb      	ldrb	r3, [r7, #31]
 800b54e:	b29b      	uxth	r3, r3
 800b550:	4618      	mov	r0, r3
 800b552:	f7fa f8c3 	bl	80056dc <lwip_htons>
 800b556:	4603      	mov	r3, r0
 800b558:	461a      	mov	r2, r3
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	4322      	orrs	r2, r4
 800b560:	b292      	uxth	r2, r2
 800b562:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	2200      	movs	r2, #0
 800b568:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fb fd8c 	bl	800708c <pbuf_clen>
 800b574:	4603      	mov	r3, r0
 800b576:	461a      	mov	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b57e:	4413      	add	r3, r2
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fb fd7d 	bl	800708c <pbuf_clen>
 800b592:	4603      	mov	r3, r0
 800b594:	461a      	mov	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b59c:	4413      	add	r3, r2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	69ba      	ldr	r2, [r7, #24]
 800b5b2:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d103      	bne.n	800b5c4 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e016      	b.n	800b5f6 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800b5c8:	bf00      	nop
 800b5ca:	e002      	b.n	800b5d2 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800b5cc:	bf00      	nop
 800b5ce:	e000      	b.n	800b5d2 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800b5d0:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <tcp_split_unsent_seg+0x262>
 800b5d8:	4b09      	ldr	r3, [pc, #36]	@ (800b600 <tcp_split_unsent_seg+0x27c>)
 800b5da:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b5de:	490e      	ldr	r1, [pc, #56]	@ (800b618 <tcp_split_unsent_seg+0x294>)
 800b5e0:	4809      	ldr	r0, [pc, #36]	@ (800b608 <tcp_split_unsent_seg+0x284>)
 800b5e2:	f004 fd8f 	bl	8010104 <iprintf>
  if (p != NULL) {
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800b5ec:	6938      	ldr	r0, [r7, #16]
 800b5ee:	f7fb fcc5 	bl	8006f7c <pbuf_free>
  }

  return ERR_MEM;
 800b5f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3724      	adds	r7, #36	@ 0x24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd90      	pop	{r4, r7, pc}
 800b5fe:	bf00      	nop
 800b600:	08012a7c 	.word	0x08012a7c
 800b604:	08012e6c 	.word	0x08012e6c
 800b608:	08012ad0 	.word	0x08012ad0
 800b60c:	08012e90 	.word	0x08012e90
 800b610:	08012eb4 	.word	0x08012eb4
 800b614:	08012ec4 	.word	0x08012ec4
 800b618:	08012ed4 	.word	0x08012ed4

0800b61c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d106      	bne.n	800b638 <tcp_send_fin+0x1c>
 800b62a:	4b21      	ldr	r3, [pc, #132]	@ (800b6b0 <tcp_send_fin+0x94>)
 800b62c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b630:	4920      	ldr	r1, [pc, #128]	@ (800b6b4 <tcp_send_fin+0x98>)
 800b632:	4821      	ldr	r0, [pc, #132]	@ (800b6b8 <tcp_send_fin+0x9c>)
 800b634:	f004 fd66 	bl	8010104 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d02e      	beq.n	800b69e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e002      	b.n	800b64e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1f8      	bne.n	800b648 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	899b      	ldrh	r3, [r3, #12]
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fa f83c 	bl	80056dc <lwip_htons>
 800b664:	4603      	mov	r3, r0
 800b666:	b2db      	uxtb	r3, r3
 800b668:	f003 0307 	and.w	r3, r3, #7
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d116      	bne.n	800b69e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	899b      	ldrh	r3, [r3, #12]
 800b676:	b29c      	uxth	r4, r3
 800b678:	2001      	movs	r0, #1
 800b67a:	f7fa f82f 	bl	80056dc <lwip_htons>
 800b67e:	4603      	mov	r3, r0
 800b680:	461a      	mov	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	4322      	orrs	r2, r4
 800b688:	b292      	uxth	r2, r2
 800b68a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	8b5b      	ldrh	r3, [r3, #26]
 800b690:	f043 0320 	orr.w	r3, r3, #32
 800b694:	b29a      	uxth	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e004      	b.n	800b6a8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b69e:	2101      	movs	r1, #1
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f80b 	bl	800b6bc <tcp_enqueue_flags>
 800b6a6:	4603      	mov	r3, r0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd90      	pop	{r4, r7, pc}
 800b6b0:	08012a7c 	.word	0x08012a7c
 800b6b4:	08012ee0 	.word	0x08012ee0
 800b6b8:	08012ad0 	.word	0x08012ad0

0800b6bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	f003 0303 	and.w	r3, r3, #3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <tcp_enqueue_flags+0x2c>
 800b6da:	4b67      	ldr	r3, [pc, #412]	@ (800b878 <tcp_enqueue_flags+0x1bc>)
 800b6dc:	f240 4211 	movw	r2, #1041	@ 0x411
 800b6e0:	4966      	ldr	r1, [pc, #408]	@ (800b87c <tcp_enqueue_flags+0x1c0>)
 800b6e2:	4867      	ldr	r0, [pc, #412]	@ (800b880 <tcp_enqueue_flags+0x1c4>)
 800b6e4:	f004 fd0e 	bl	8010104 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d106      	bne.n	800b6fc <tcp_enqueue_flags+0x40>
 800b6ee:	4b62      	ldr	r3, [pc, #392]	@ (800b878 <tcp_enqueue_flags+0x1bc>)
 800b6f0:	f240 4213 	movw	r2, #1043	@ 0x413
 800b6f4:	4963      	ldr	r1, [pc, #396]	@ (800b884 <tcp_enqueue_flags+0x1c8>)
 800b6f6:	4862      	ldr	r0, [pc, #392]	@ (800b880 <tcp_enqueue_flags+0x1c4>)
 800b6f8:	f004 fd04 	bl	8010104 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b6fc:	78fb      	ldrb	r3, [r7, #3]
 800b6fe:	f003 0302 	and.w	r3, r3, #2
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b706:	2301      	movs	r3, #1
 800b708:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b716:	7dbb      	ldrb	r3, [r7, #22]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b71e:	4619      	mov	r1, r3
 800b720:	2036      	movs	r0, #54	@ 0x36
 800b722:	f7fb f947 	bl	80069b4 <pbuf_alloc>
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	8b5b      	ldrh	r3, [r3, #26]
 800b732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b73c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b740:	e095      	b.n	800b86e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	895a      	ldrh	r2, [r3, #10]
 800b746:	7dbb      	ldrb	r3, [r7, #22]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d206      	bcs.n	800b75c <tcp_enqueue_flags+0xa0>
 800b74e:	4b4a      	ldr	r3, [pc, #296]	@ (800b878 <tcp_enqueue_flags+0x1bc>)
 800b750:	f240 4239 	movw	r2, #1081	@ 0x439
 800b754:	494c      	ldr	r1, [pc, #304]	@ (800b888 <tcp_enqueue_flags+0x1cc>)
 800b756:	484a      	ldr	r0, [pc, #296]	@ (800b880 <tcp_enqueue_flags+0x1c4>)
 800b758:	f004 fcd4 	bl	8010104 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	460b      	mov	r3, r1
 800b768:	68f9      	ldr	r1, [r7, #12]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff fd6a 	bl	800b244 <tcp_create_segment>
 800b770:	60b8      	str	r0, [r7, #8]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d109      	bne.n	800b78c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	8b5b      	ldrh	r3, [r3, #26]
 800b77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b780:	b29a      	uxth	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b78a:	e070      	b.n	800b86e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	f003 0303 	and.w	r3, r3, #3
 800b794:	2b00      	cmp	r3, #0
 800b796:	d006      	beq.n	800b7a6 <tcp_enqueue_flags+0xea>
 800b798:	4b37      	ldr	r3, [pc, #220]	@ (800b878 <tcp_enqueue_flags+0x1bc>)
 800b79a:	f240 4242 	movw	r2, #1090	@ 0x442
 800b79e:	493b      	ldr	r1, [pc, #236]	@ (800b88c <tcp_enqueue_flags+0x1d0>)
 800b7a0:	4837      	ldr	r0, [pc, #220]	@ (800b880 <tcp_enqueue_flags+0x1c4>)
 800b7a2:	f004 fcaf 	bl	8010104 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	891b      	ldrh	r3, [r3, #8]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d006      	beq.n	800b7bc <tcp_enqueue_flags+0x100>
 800b7ae:	4b32      	ldr	r3, [pc, #200]	@ (800b878 <tcp_enqueue_flags+0x1bc>)
 800b7b0:	f240 4243 	movw	r2, #1091	@ 0x443
 800b7b4:	4936      	ldr	r1, [pc, #216]	@ (800b890 <tcp_enqueue_flags+0x1d4>)
 800b7b6:	4832      	ldr	r0, [pc, #200]	@ (800b880 <tcp_enqueue_flags+0x1c4>)
 800b7b8:	f004 fca4 	bl	8010104 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d103      	bne.n	800b7cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b7ca:	e00d      	b.n	800b7e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d0:	613b      	str	r3, [r7, #16]
 800b7d2:	e002      	b.n	800b7da <tcp_enqueue_flags+0x11e>
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1f8      	bne.n	800b7d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b7f0:	78fb      	ldrb	r3, [r7, #3]
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d104      	bne.n	800b804 <tcp_enqueue_flags+0x148>
 800b7fa:	78fb      	ldrb	r3, [r7, #3]
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	d004      	beq.n	800b80e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d006      	beq.n	800b826 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	8b5b      	ldrh	r3, [r3, #26]
 800b81c:	f043 0320 	orr.w	r3, r3, #32
 800b820:	b29a      	uxth	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fb fc2e 	bl	800708c <pbuf_clen>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b83a:	4413      	add	r3, r2
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00e      	beq.n	800b86c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <tcp_enqueue_flags+0x1b0>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <tcp_enqueue_flags+0x1b0>
 800b85e:	4b06      	ldr	r3, [pc, #24]	@ (800b878 <tcp_enqueue_flags+0x1bc>)
 800b860:	f240 4265 	movw	r2, #1125	@ 0x465
 800b864:	490b      	ldr	r1, [pc, #44]	@ (800b894 <tcp_enqueue_flags+0x1d8>)
 800b866:	4806      	ldr	r0, [pc, #24]	@ (800b880 <tcp_enqueue_flags+0x1c4>)
 800b868:	f004 fc4c 	bl	8010104 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	08012a7c 	.word	0x08012a7c
 800b87c:	08012efc 	.word	0x08012efc
 800b880:	08012ad0 	.word	0x08012ad0
 800b884:	08012f54 	.word	0x08012f54
 800b888:	08012f74 	.word	0x08012f74
 800b88c:	08012fb0 	.word	0x08012fb0
 800b890:	08012fc8 	.word	0x08012fc8
 800b894:	08012ff4 	.word	0x08012ff4

0800b898 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b898:	b5b0      	push	{r4, r5, r7, lr}
 800b89a:	b08a      	sub	sp, #40	@ 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d106      	bne.n	800b8b4 <tcp_output+0x1c>
 800b8a6:	4b8a      	ldr	r3, [pc, #552]	@ (800bad0 <tcp_output+0x238>)
 800b8a8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b8ac:	4989      	ldr	r1, [pc, #548]	@ (800bad4 <tcp_output+0x23c>)
 800b8ae:	488a      	ldr	r0, [pc, #552]	@ (800bad8 <tcp_output+0x240>)
 800b8b0:	f004 fc28 	bl	8010104 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7d1b      	ldrb	r3, [r3, #20]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d106      	bne.n	800b8ca <tcp_output+0x32>
 800b8bc:	4b84      	ldr	r3, [pc, #528]	@ (800bad0 <tcp_output+0x238>)
 800b8be:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b8c2:	4986      	ldr	r1, [pc, #536]	@ (800badc <tcp_output+0x244>)
 800b8c4:	4884      	ldr	r0, [pc, #528]	@ (800bad8 <tcp_output+0x240>)
 800b8c6:	f004 fc1d 	bl	8010104 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b8ca:	4b85      	ldr	r3, [pc, #532]	@ (800bae0 <tcp_output+0x248>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d101      	bne.n	800b8d8 <tcp_output+0x40>
    return ERR_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e1d1      	b.n	800bc7c <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	bf28      	it	cs
 800b8e8:	4613      	movcs	r3, r2
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	8b5b      	ldrh	r3, [r3, #26]
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 81ad 	beq.w	800bc62 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fdd7 	bl	800c4bc <tcp_send_empty_ack>
 800b90e:	4603      	mov	r3, r0
 800b910:	e1b4      	b.n	800bc7c <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3304      	adds	r3, #4
 800b918:	461a      	mov	r2, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff fc76 	bl	800b20c <tcp_route>
 800b920:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <tcp_output+0x96>
    return ERR_RTE;
 800b928:	f06f 0303 	mvn.w	r3, #3
 800b92c:	e1a6      	b.n	800bc7c <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <tcp_output+0xa4>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d111      	bne.n	800b960 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d002      	beq.n	800b948 <tcp_output+0xb0>
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	3304      	adds	r3, #4
 800b946:	e000      	b.n	800b94a <tcp_output+0xb2>
 800b948:	2300      	movs	r3, #0
 800b94a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d102      	bne.n	800b958 <tcp_output+0xc0>
      return ERR_RTE;
 800b952:	f06f 0303 	mvn.w	r3, #3
 800b956:	e191      	b.n	800bc7c <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	4618      	mov	r0, r3
 800b968:	f7f9 fece 	bl	8005708 <lwip_htonl>
 800b96c:	4602      	mov	r2, r0
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b976:	8912      	ldrh	r2, [r2, #8]
 800b978:	4413      	add	r3, r2
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d227      	bcs.n	800b9d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b986:	461a      	mov	r2, r3
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d114      	bne.n	800b9b8 <tcp_output+0x120>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b992:	2b00      	cmp	r3, #0
 800b994:	d110      	bne.n	800b9b8 <tcp_output+0x120>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10b      	bne.n	800b9b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	8b5b      	ldrh	r3, [r3, #26]
 800b9bc:	f003 0302 	and.w	r3, r3, #2
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 8150 	beq.w	800bc66 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fd78 	bl	800c4bc <tcp_send_empty_ack>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	e155      	b.n	800bc7c <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 811f 	beq.w	800bc24 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800b9e6:	e002      	b.n	800b9ee <tcp_output+0x156>
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	623b      	str	r3, [r7, #32]
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1f8      	bne.n	800b9e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b9f6:	e115      	b.n	800bc24 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	899b      	ldrh	r3, [r3, #12]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f9 fe6b 	bl	80056dc <lwip_htons>
 800ba06:	4603      	mov	r3, r0
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 0304 	and.w	r3, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d006      	beq.n	800ba20 <tcp_output+0x188>
 800ba12:	4b2f      	ldr	r3, [pc, #188]	@ (800bad0 <tcp_output+0x238>)
 800ba14:	f240 5236 	movw	r2, #1334	@ 0x536
 800ba18:	4932      	ldr	r1, [pc, #200]	@ (800bae4 <tcp_output+0x24c>)
 800ba1a:	482f      	ldr	r0, [pc, #188]	@ (800bad8 <tcp_output+0x240>)
 800ba1c:	f004 fb72 	bl	8010104 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01f      	beq.n	800ba68 <tcp_output+0x1d0>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	8b5b      	ldrh	r3, [r3, #26]
 800ba2c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d119      	bne.n	800ba68 <tcp_output+0x1d0>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00b      	beq.n	800ba54 <tcp_output+0x1bc>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d110      	bne.n	800ba68 <tcp_output+0x1d0>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba4a:	891a      	ldrh	r2, [r3, #8]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d209      	bcs.n	800ba68 <tcp_output+0x1d0>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <tcp_output+0x1d0>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ba64:	2b08      	cmp	r3, #8
 800ba66:	d901      	bls.n	800ba6c <tcp_output+0x1d4>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <tcp_output+0x1d6>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	8b5b      	ldrh	r3, [r3, #26]
 800ba76:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f000 80e7 	beq.w	800bc4e <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	7d1b      	ldrb	r3, [r3, #20]
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d00d      	beq.n	800baa4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ba88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	899b      	ldrh	r3, [r3, #12]
 800ba8e:	b29c      	uxth	r4, r3
 800ba90:	2010      	movs	r0, #16
 800ba92:	f7f9 fe23 	bl	80056dc <lwip_htons>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	4322      	orrs	r2, r4
 800baa0:	b292      	uxth	r2, r2
 800baa2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	6879      	ldr	r1, [r7, #4]
 800baa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800baaa:	f000 f90b 	bl	800bcc4 <tcp_output_segment>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d016      	beq.n	800bae8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	8b5b      	ldrh	r3, [r3, #26]
 800babe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	835a      	strh	r2, [r3, #26]
      return err;
 800bac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bacc:	e0d6      	b.n	800bc7c <tcp_output+0x3e4>
 800bace:	bf00      	nop
 800bad0:	08012a7c 	.word	0x08012a7c
 800bad4:	0801301c 	.word	0x0801301c
 800bad8:	08012ad0 	.word	0x08012ad0
 800badc:	08013034 	.word	0x08013034
 800bae0:	20007d48 	.word	0x20007d48
 800bae4:	0801305c 	.word	0x0801305c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800bae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baea:	2200      	movs	r2, #0
 800baec:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800baee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	7d1b      	ldrb	r3, [r3, #20]
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d006      	beq.n	800bb0c <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	8b5b      	ldrh	r3, [r3, #26]
 800bb02:	f023 0303 	bic.w	r3, r3, #3
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7f9 fdf8 	bl	8005708 <lwip_htonl>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	891b      	ldrh	r3, [r3, #8]
 800bb1e:	461d      	mov	r5, r3
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	899b      	ldrh	r3, [r3, #12]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f9 fdd7 	bl	80056dc <lwip_htons>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	f003 0303 	and.w	r3, r3, #3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <tcp_output+0x2a6>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e000      	b.n	800bb40 <tcp_output+0x2a8>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	442b      	add	r3, r5
 800bb42:	4423      	add	r3, r4
 800bb44:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	da02      	bge.n	800bb58 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5a:	891b      	ldrh	r3, [r3, #8]
 800bb5c:	461c      	mov	r4, r3
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	899b      	ldrh	r3, [r3, #12]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f9 fdb8 	bl	80056dc <lwip_htons>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f003 0303 	and.w	r3, r3, #3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <tcp_output+0x2e4>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e000      	b.n	800bb7e <tcp_output+0x2e6>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	4423      	add	r3, r4
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d049      	beq.n	800bc18 <tcp_output+0x380>
      seg->next = NULL;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <tcp_output+0x306>
        pcb->unacked = seg;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb96:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800bb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9a:	623b      	str	r3, [r7, #32]
 800bb9c:	e03f      	b.n	800bc1e <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7f9 fdaf 	bl	8005708 <lwip_htonl>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7f9 fda8 	bl	8005708 <lwip_htonl>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	1ae3      	subs	r3, r4, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	da24      	bge.n	800bc0a <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3370      	adds	r3, #112	@ 0x70
 800bbc4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bbc6:	e002      	b.n	800bbce <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d011      	beq.n	800bbfa <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f9 fd92 	bl	8005708 <lwip_htonl>
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7f9 fd8b 	bl	8005708 <lwip_htonl>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	dbe6      	blt.n	800bbc8 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	e009      	b.n	800bc1e <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bc0a:	6a3b      	ldr	r3, [r7, #32]
 800bc0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc0e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	623b      	str	r3, [r7, #32]
 800bc16:	e002      	b.n	800bc1e <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bc18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc1a:	f7fc fc34 	bl	8008486 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d012      	beq.n	800bc50 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7f9 fd69 	bl	8005708 <lwip_htonl>
 800bc36:	4602      	mov	r2, r0
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc40:	8912      	ldrh	r2, [r2, #8]
 800bc42:	4413      	add	r3, r2
  while (seg != NULL &&
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	f4bf aed6 	bcs.w	800b9f8 <tcp_output+0x160>
 800bc4c:	e000      	b.n	800bc50 <tcp_output+0x3b8>
      break;
 800bc4e:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d108      	bne.n	800bc6a <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800bc60:	e004      	b.n	800bc6c <tcp_output+0x3d4>
    goto output_done;
 800bc62:	bf00      	nop
 800bc64:	e002      	b.n	800bc6c <tcp_output+0x3d4>
    goto output_done;
 800bc66:	bf00      	nop
 800bc68:	e000      	b.n	800bc6c <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bc6a:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	8b5b      	ldrh	r3, [r3, #26]
 800bc70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3728      	adds	r7, #40	@ 0x28
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bdb0      	pop	{r4, r5, r7, pc}

0800bc84 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d106      	bne.n	800bca0 <tcp_output_segment_busy+0x1c>
 800bc92:	4b09      	ldr	r3, [pc, #36]	@ (800bcb8 <tcp_output_segment_busy+0x34>)
 800bc94:	f240 529a 	movw	r2, #1434	@ 0x59a
 800bc98:	4908      	ldr	r1, [pc, #32]	@ (800bcbc <tcp_output_segment_busy+0x38>)
 800bc9a:	4809      	ldr	r0, [pc, #36]	@ (800bcc0 <tcp_output_segment_busy+0x3c>)
 800bc9c:	f004 fa32 	bl	8010104 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	7b9b      	ldrb	r3, [r3, #14]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d001      	beq.n	800bcae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	08012a7c 	.word	0x08012a7c
 800bcbc:	08013074 	.word	0x08013074
 800bcc0:	08012ad0 	.word	0x08012ad0

0800bcc4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bcc4:	b5b0      	push	{r4, r5, r7, lr}
 800bcc6:	b08c      	sub	sp, #48	@ 0x30
 800bcc8:	af04      	add	r7, sp, #16
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d106      	bne.n	800bce4 <tcp_output_segment+0x20>
 800bcd6:	4b64      	ldr	r3, [pc, #400]	@ (800be68 <tcp_output_segment+0x1a4>)
 800bcd8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800bcdc:	4963      	ldr	r1, [pc, #396]	@ (800be6c <tcp_output_segment+0x1a8>)
 800bcde:	4864      	ldr	r0, [pc, #400]	@ (800be70 <tcp_output_segment+0x1ac>)
 800bce0:	f004 fa10 	bl	8010104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d106      	bne.n	800bcf8 <tcp_output_segment+0x34>
 800bcea:	4b5f      	ldr	r3, [pc, #380]	@ (800be68 <tcp_output_segment+0x1a4>)
 800bcec:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800bcf0:	4960      	ldr	r1, [pc, #384]	@ (800be74 <tcp_output_segment+0x1b0>)
 800bcf2:	485f      	ldr	r0, [pc, #380]	@ (800be70 <tcp_output_segment+0x1ac>)
 800bcf4:	f004 fa06 	bl	8010104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <tcp_output_segment+0x48>
 800bcfe:	4b5a      	ldr	r3, [pc, #360]	@ (800be68 <tcp_output_segment+0x1a4>)
 800bd00:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800bd04:	495c      	ldr	r1, [pc, #368]	@ (800be78 <tcp_output_segment+0x1b4>)
 800bd06:	485a      	ldr	r0, [pc, #360]	@ (800be70 <tcp_output_segment+0x1ac>)
 800bd08:	f004 f9fc 	bl	8010104 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f7ff ffb9 	bl	800bc84 <tcp_output_segment_busy>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	e0a1      	b.n	800be60 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	691c      	ldr	r4, [r3, #16]
 800bd24:	4610      	mov	r0, r2
 800bd26:	f7f9 fcef 	bl	8005708 <lwip_htonl>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	691c      	ldr	r4, [r3, #16]
 800bd36:	4610      	mov	r0, r2
 800bd38:	f7f9 fcd0 	bl	80056dc <lwip_htons>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bd48:	441a      	add	r2, r3
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	3314      	adds	r3, #20
 800bd54:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	7b1b      	ldrb	r3, [r3, #12]
 800bd5a:	f003 0301 	and.w	r3, r3, #1
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d015      	beq.n	800bd8e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	3304      	adds	r3, #4
 800bd66:	461a      	mov	r2, r3
 800bd68:	6879      	ldr	r1, [r7, #4]
 800bd6a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800bd6e:	f7fc fe81 	bl	8008a74 <tcp_eff_send_mss_netif>
 800bd72:	4603      	mov	r3, r0
 800bd74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bd76:	8b7b      	ldrh	r3, [r7, #26]
 800bd78:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7f9 fcc3 	bl	8005708 <lwip_htonl>
 800bd82:	4602      	mov	r2, r0
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	da02      	bge.n	800bd9e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10c      	bne.n	800bdc0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bda6:	4b35      	ldr	r3, [pc, #212]	@ (800be7c <tcp_output_segment+0x1b8>)
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f9 fca7 	bl	8005708 <lwip_htonl>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	691a      	ldr	r2, [r3, #16]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	8959      	ldrh	r1, [r3, #10]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	8b3a      	ldrh	r2, [r7, #24]
 800bdda:	1a8a      	subs	r2, r1, r2
 800bddc:	b292      	uxth	r2, r2
 800bdde:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	8919      	ldrh	r1, [r3, #8]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	8b3a      	ldrh	r2, [r7, #24]
 800bdec:	1a8a      	subs	r2, r1, r2
 800bdee:	b292      	uxth	r2, r2
 800bdf0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	6912      	ldr	r2, [r2, #16]
 800bdfa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	2200      	movs	r2, #0
 800be02:	741a      	strb	r2, [r3, #16]
 800be04:	2200      	movs	r2, #0
 800be06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	7b1b      	ldrb	r3, [r3, #12]
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <tcp_output_segment+0x158>
 800be18:	2318      	movs	r3, #24
 800be1a:	e000      	b.n	800be1e <tcp_output_segment+0x15a>
 800be1c:	2314      	movs	r3, #20
 800be1e:	4413      	add	r3, r2
 800be20:	69fa      	ldr	r2, [r7, #28]
 800be22:	429a      	cmp	r2, r3
 800be24:	d006      	beq.n	800be34 <tcp_output_segment+0x170>
 800be26:	4b10      	ldr	r3, [pc, #64]	@ (800be68 <tcp_output_segment+0x1a4>)
 800be28:	f240 621c 	movw	r2, #1564	@ 0x61c
 800be2c:	4914      	ldr	r1, [pc, #80]	@ (800be80 <tcp_output_segment+0x1bc>)
 800be2e:	4810      	ldr	r0, [pc, #64]	@ (800be70 <tcp_output_segment+0x1ac>)
 800be30:	f004 f968 	bl	8010104 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6858      	ldr	r0, [r3, #4]
 800be38:	68b9      	ldr	r1, [r7, #8]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	1d1c      	adds	r4, r3, #4
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	7add      	ldrb	r5, [r3, #11]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	7a9b      	ldrb	r3, [r3, #10]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	9202      	str	r2, [sp, #8]
 800be4a:	2206      	movs	r2, #6
 800be4c:	9201      	str	r2, [sp, #4]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	462b      	mov	r3, r5
 800be52:	4622      	mov	r2, r4
 800be54:	f002 ffbe 	bl	800edd4 <ip4_output_if>
 800be58:	4603      	mov	r3, r0
 800be5a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800be5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bdb0      	pop	{r4, r5, r7, pc}
 800be68:	08012a7c 	.word	0x08012a7c
 800be6c:	0801309c 	.word	0x0801309c
 800be70:	08012ad0 	.word	0x08012ad0
 800be74:	080130bc 	.word	0x080130bc
 800be78:	080130dc 	.word	0x080130dc
 800be7c:	20007cf8 	.word	0x20007cf8
 800be80:	08013100 	.word	0x08013100

0800be84 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800be84:	b5b0      	push	{r4, r5, r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d106      	bne.n	800bea0 <tcp_rexmit_rto_prepare+0x1c>
 800be92:	4b36      	ldr	r3, [pc, #216]	@ (800bf6c <tcp_rexmit_rto_prepare+0xe8>)
 800be94:	f240 6263 	movw	r2, #1635	@ 0x663
 800be98:	4935      	ldr	r1, [pc, #212]	@ (800bf70 <tcp_rexmit_rto_prepare+0xec>)
 800be9a:	4836      	ldr	r0, [pc, #216]	@ (800bf74 <tcp_rexmit_rto_prepare+0xf0>)
 800be9c:	f004 f932 	bl	8010104 <iprintf>

  if (pcb->unacked == NULL) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d102      	bne.n	800beae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bea8:	f06f 0305 	mvn.w	r3, #5
 800beac:	e059      	b.n	800bf62 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e00b      	b.n	800bece <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fee4 	bl	800bc84 <tcp_output_segment_busy>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bec2:	f06f 0305 	mvn.w	r3, #5
 800bec6:	e04c      	b.n	800bf62 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1ef      	bne.n	800beb6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f7ff fed4 	bl	800bc84 <tcp_output_segment_busy>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d002      	beq.n	800bee8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bee2:	f06f 0305 	mvn.w	r3, #5
 800bee6:	e03c      	b.n	800bf62 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d104      	bne.n	800bf02 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	895a      	ldrh	r2, [r3, #10]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	8b5b      	ldrh	r3, [r3, #26]
 800bf14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7f9 fbef 	bl	8005708 <lwip_htonl>
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	891b      	ldrh	r3, [r3, #8]
 800bf30:	461d      	mov	r5, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	899b      	ldrh	r3, [r3, #12]
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7f9 fbce 	bl	80056dc <lwip_htons>
 800bf40:	4603      	mov	r3, r0
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	f003 0303 	and.w	r3, r3, #3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <tcp_rexmit_rto_prepare+0xcc>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <tcp_rexmit_rto_prepare+0xce>
 800bf50:	2300      	movs	r3, #0
 800bf52:	442b      	add	r3, r5
 800bf54:	18e2      	adds	r2, r4, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bdb0      	pop	{r4, r5, r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	08012a7c 	.word	0x08012a7c
 800bf70:	08013114 	.word	0x08013114
 800bf74:	08012ad0 	.word	0x08012ad0

0800bf78 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d106      	bne.n	800bf94 <tcp_rexmit_rto_commit+0x1c>
 800bf86:	4b0d      	ldr	r3, [pc, #52]	@ (800bfbc <tcp_rexmit_rto_commit+0x44>)
 800bf88:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bf8c:	490c      	ldr	r1, [pc, #48]	@ (800bfc0 <tcp_rexmit_rto_commit+0x48>)
 800bf8e:	480d      	ldr	r0, [pc, #52]	@ (800bfc4 <tcp_rexmit_rto_commit+0x4c>)
 800bf90:	f004 f8b8 	bl	8010104 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf9a:	2bff      	cmp	r3, #255	@ 0xff
 800bf9c:	d007      	beq.n	800bfae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff fc72 	bl	800b898 <tcp_output>
}
 800bfb4:	bf00      	nop
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	08012a7c 	.word	0x08012a7c
 800bfc0:	08013138 	.word	0x08013138
 800bfc4:	08012ad0 	.word	0x08012ad0

0800bfc8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d106      	bne.n	800bfe4 <tcp_rexmit_rto+0x1c>
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	@ (800c000 <tcp_rexmit_rto+0x38>)
 800bfd8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bfdc:	4909      	ldr	r1, [pc, #36]	@ (800c004 <tcp_rexmit_rto+0x3c>)
 800bfde:	480a      	ldr	r0, [pc, #40]	@ (800c008 <tcp_rexmit_rto+0x40>)
 800bfe0:	f004 f890 	bl	8010104 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7ff ff4d 	bl	800be84 <tcp_rexmit_rto_prepare>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d102      	bne.n	800bff6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff ffc1 	bl	800bf78 <tcp_rexmit_rto_commit>
  }
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	08012a7c 	.word	0x08012a7c
 800c004:	0801315c 	.word	0x0801315c
 800c008:	08012ad0 	.word	0x08012ad0

0800c00c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c00c:	b590      	push	{r4, r7, lr}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <tcp_rexmit+0x1c>
 800c01a:	4b2f      	ldr	r3, [pc, #188]	@ (800c0d8 <tcp_rexmit+0xcc>)
 800c01c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800c020:	492e      	ldr	r1, [pc, #184]	@ (800c0dc <tcp_rexmit+0xd0>)
 800c022:	482f      	ldr	r0, [pc, #188]	@ (800c0e0 <tcp_rexmit+0xd4>)
 800c024:	f004 f86e 	bl	8010104 <iprintf>

  if (pcb->unacked == NULL) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c030:	f06f 0305 	mvn.w	r3, #5
 800c034:	e04c      	b.n	800c0d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c03a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c03c:	68b8      	ldr	r0, [r7, #8]
 800c03e:	f7ff fe21 	bl	800bc84 <tcp_output_segment_busy>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c048:	f06f 0305 	mvn.w	r3, #5
 800c04c:	e040      	b.n	800c0d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	336c      	adds	r3, #108	@ 0x6c
 800c05a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c05c:	e002      	b.n	800c064 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d011      	beq.n	800c090 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	4618      	mov	r0, r3
 800c076:	f7f9 fb47 	bl	8005708 <lwip_htonl>
 800c07a:	4604      	mov	r4, r0
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	4618      	mov	r0, r3
 800c084:	f7f9 fb40 	bl	8005708 <lwip_htonl>
 800c088:	4603      	mov	r3, r0
 800c08a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dbe6      	blt.n	800c05e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d103      	bne.n	800c0ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c0b4:	2bff      	cmp	r3, #255	@ 0xff
 800c0b6:	d007      	beq.n	800c0c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c0be:	3301      	adds	r3, #1
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd90      	pop	{r4, r7, pc}
 800c0d8:	08012a7c 	.word	0x08012a7c
 800c0dc:	08013178 	.word	0x08013178
 800c0e0:	08012ad0 	.word	0x08012ad0

0800c0e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d106      	bne.n	800c100 <tcp_rexmit_fast+0x1c>
 800c0f2:	4b2a      	ldr	r3, [pc, #168]	@ (800c19c <tcp_rexmit_fast+0xb8>)
 800c0f4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800c0f8:	4929      	ldr	r1, [pc, #164]	@ (800c1a0 <tcp_rexmit_fast+0xbc>)
 800c0fa:	482a      	ldr	r0, [pc, #168]	@ (800c1a4 <tcp_rexmit_fast+0xc0>)
 800c0fc:	f004 f802 	bl	8010104 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c104:	2b00      	cmp	r3, #0
 800c106:	d045      	beq.n	800c194 <tcp_rexmit_fast+0xb0>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	8b5b      	ldrh	r3, [r3, #26]
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d13f      	bne.n	800c194 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff ff79 	bl	800c00c <tcp_rexmit>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d139      	bne.n	800c194 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c12c:	4293      	cmp	r3, r2
 800c12e:	bf28      	it	cs
 800c130:	4613      	movcs	r3, r2
 800c132:	b29b      	uxth	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	da00      	bge.n	800c13a <tcp_rexmit_fast+0x56>
 800c138:	3301      	adds	r3, #1
 800c13a:	105b      	asrs	r3, r3, #1
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c14a:	461a      	mov	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	429a      	cmp	r2, r3
 800c154:	d206      	bcs.n	800c164 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c16e:	4619      	mov	r1, r3
 800c170:	0049      	lsls	r1, r1, #1
 800c172:	440b      	add	r3, r1
 800c174:	b29b      	uxth	r3, r3
 800c176:	4413      	add	r3, r2
 800c178:	b29a      	uxth	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	8b5b      	ldrh	r3, [r3, #26]
 800c184:	f043 0304 	orr.w	r3, r3, #4
 800c188:	b29a      	uxth	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800c194:	bf00      	nop
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	08012a7c 	.word	0x08012a7c
 800c1a0:	08013190 	.word	0x08013190
 800c1a4:	08012ad0 	.word	0x08012ad0

0800c1a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	607b      	str	r3, [r7, #4]
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	817b      	strh	r3, [r7, #10]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c1ba:	897a      	ldrh	r2, [r7, #10]
 800c1bc:	893b      	ldrh	r3, [r7, #8]
 800c1be:	4413      	add	r3, r2
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	3314      	adds	r3, #20
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	2022      	movs	r0, #34	@ 0x22
 800c1ce:	f7fa fbf1 	bl	80069b4 <pbuf_alloc>
 800c1d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d04d      	beq.n	800c276 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c1da:	897b      	ldrh	r3, [r7, #10]
 800c1dc:	3313      	adds	r3, #19
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	8952      	ldrh	r2, [r2, #10]
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	db06      	blt.n	800c1f4 <tcp_output_alloc_header_common+0x4c>
 800c1e6:	4b26      	ldr	r3, [pc, #152]	@ (800c280 <tcp_output_alloc_header_common+0xd8>)
 800c1e8:	f240 7223 	movw	r2, #1827	@ 0x723
 800c1ec:	4925      	ldr	r1, [pc, #148]	@ (800c284 <tcp_output_alloc_header_common+0xdc>)
 800c1ee:	4826      	ldr	r0, [pc, #152]	@ (800c288 <tcp_output_alloc_header_common+0xe0>)
 800c1f0:	f003 ff88 	bl	8010104 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c1fa:	8c3b      	ldrh	r3, [r7, #32]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7f9 fa6d 	bl	80056dc <lwip_htons>
 800c202:	4603      	mov	r3, r0
 800c204:	461a      	mov	r2, r3
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c20a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f9 fa65 	bl	80056dc <lwip_htons>
 800c212:	4603      	mov	r3, r0
 800c214:	461a      	mov	r2, r3
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f7f9 fa71 	bl	8005708 <lwip_htonl>
 800c226:	4602      	mov	r2, r0
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c22c:	897b      	ldrh	r3, [r7, #10]
 800c22e:	089b      	lsrs	r3, r3, #2
 800c230:	b29b      	uxth	r3, r3
 800c232:	3305      	adds	r3, #5
 800c234:	b29b      	uxth	r3, r3
 800c236:	031b      	lsls	r3, r3, #12
 800c238:	b29a      	uxth	r2, r3
 800c23a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c23e:	b29b      	uxth	r3, r3
 800c240:	4313      	orrs	r3, r2
 800c242:	b29b      	uxth	r3, r3
 800c244:	4618      	mov	r0, r3
 800c246:	f7f9 fa49 	bl	80056dc <lwip_htons>
 800c24a:	4603      	mov	r3, r0
 800c24c:	461a      	mov	r2, r3
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c252:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c254:	4618      	mov	r0, r3
 800c256:	f7f9 fa41 	bl	80056dc <lwip_htons>
 800c25a:	4603      	mov	r3, r0
 800c25c:	461a      	mov	r2, r3
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2200      	movs	r2, #0
 800c266:	741a      	strb	r2, [r3, #16]
 800c268:	2200      	movs	r2, #0
 800c26a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	2200      	movs	r2, #0
 800c270:	749a      	strb	r2, [r3, #18]
 800c272:	2200      	movs	r2, #0
 800c274:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c276:	697b      	ldr	r3, [r7, #20]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3718      	adds	r7, #24
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	08012a7c 	.word	0x08012a7c
 800c284:	080131b0 	.word	0x080131b0
 800c288:	08012ad0 	.word	0x08012ad0

0800c28c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c28c:	b5b0      	push	{r4, r5, r7, lr}
 800c28e:	b08a      	sub	sp, #40	@ 0x28
 800c290:	af04      	add	r7, sp, #16
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	607b      	str	r3, [r7, #4]
 800c296:	460b      	mov	r3, r1
 800c298:	817b      	strh	r3, [r7, #10]
 800c29a:	4613      	mov	r3, r2
 800c29c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <tcp_output_alloc_header+0x26>
 800c2a4:	4b15      	ldr	r3, [pc, #84]	@ (800c2fc <tcp_output_alloc_header+0x70>)
 800c2a6:	f240 7242 	movw	r2, #1858	@ 0x742
 800c2aa:	4915      	ldr	r1, [pc, #84]	@ (800c300 <tcp_output_alloc_header+0x74>)
 800c2ac:	4815      	ldr	r0, [pc, #84]	@ (800c304 <tcp_output_alloc_header+0x78>)
 800c2ae:	f003 ff29 	bl	8010104 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8adb      	ldrh	r3, [r3, #22]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	8b12      	ldrh	r2, [r2, #24]
 800c2be:	68f9      	ldr	r1, [r7, #12]
 800c2c0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800c2c2:	893d      	ldrh	r5, [r7, #8]
 800c2c4:	897c      	ldrh	r4, [r7, #10]
 800c2c6:	9103      	str	r1, [sp, #12]
 800c2c8:	2110      	movs	r1, #16
 800c2ca:	9102      	str	r1, [sp, #8]
 800c2cc:	9201      	str	r2, [sp, #4]
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	462a      	mov	r2, r5
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	f7ff ff67 	bl	800c1a8 <tcp_output_alloc_header_common>
 800c2da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d006      	beq.n	800c2f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c2ea:	441a      	add	r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800c2f0:	697b      	ldr	r3, [r7, #20]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	08012a7c 	.word	0x08012a7c
 800c300:	080131e0 	.word	0x080131e0
 800c304:	08012ad0 	.word	0x08012ad0

0800c308 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	4611      	mov	r1, r2
 800c314:	461a      	mov	r2, r3
 800c316:	460b      	mov	r3, r1
 800c318:	71fb      	strb	r3, [r7, #7]
 800c31a:	4613      	mov	r3, r2
 800c31c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <tcp_output_fill_options+0x2e>
 800c328:	4b12      	ldr	r3, [pc, #72]	@ (800c374 <tcp_output_fill_options+0x6c>)
 800c32a:	f240 7256 	movw	r2, #1878	@ 0x756
 800c32e:	4912      	ldr	r1, [pc, #72]	@ (800c378 <tcp_output_fill_options+0x70>)
 800c330:	4812      	ldr	r0, [pc, #72]	@ (800c37c <tcp_output_fill_options+0x74>)
 800c332:	f003 fee7 	bl	8010104 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	3314      	adds	r3, #20
 800c340:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c342:	8bfb      	ldrh	r3, [r7, #30]
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	461a      	mov	r2, r3
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	f003 0304 	and.w	r3, r3, #4
 800c350:	4413      	add	r3, r2
 800c352:	3314      	adds	r3, #20
 800c354:	69ba      	ldr	r2, [r7, #24]
 800c356:	4413      	add	r3, r2
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d006      	beq.n	800c36c <tcp_output_fill_options+0x64>
 800c35e:	4b05      	ldr	r3, [pc, #20]	@ (800c374 <tcp_output_fill_options+0x6c>)
 800c360:	f240 7275 	movw	r2, #1909	@ 0x775
 800c364:	4906      	ldr	r1, [pc, #24]	@ (800c380 <tcp_output_fill_options+0x78>)
 800c366:	4805      	ldr	r0, [pc, #20]	@ (800c37c <tcp_output_fill_options+0x74>)
 800c368:	f003 fecc 	bl	8010104 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c36c:	bf00      	nop
 800c36e:	3720      	adds	r7, #32
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	08012a7c 	.word	0x08012a7c
 800c378:	08013208 	.word	0x08013208
 800c37c:	08012ad0 	.word	0x08012ad0
 800c380:	08013100 	.word	0x08013100

0800c384 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08a      	sub	sp, #40	@ 0x28
 800c388:	af04      	add	r7, sp, #16
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <tcp_output_control_segment+0x22>
 800c398:	4b1c      	ldr	r3, [pc, #112]	@ (800c40c <tcp_output_control_segment+0x88>)
 800c39a:	f240 7287 	movw	r2, #1927	@ 0x787
 800c39e:	491c      	ldr	r1, [pc, #112]	@ (800c410 <tcp_output_control_segment+0x8c>)
 800c3a0:	481c      	ldr	r0, [pc, #112]	@ (800c414 <tcp_output_control_segment+0x90>)
 800c3a2:	f003 feaf 	bl	8010104 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	6879      	ldr	r1, [r7, #4]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f7fe ff2e 	bl	800b20c <tcp_route>
 800c3b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d102      	bne.n	800c3be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c3b8:	23fc      	movs	r3, #252	@ 0xfc
 800c3ba:	75fb      	strb	r3, [r7, #23]
 800c3bc:	e01c      	b.n	800c3f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d006      	beq.n	800c3d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	7adb      	ldrb	r3, [r3, #11]
 800c3c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	7a9b      	ldrb	r3, [r3, #10]
 800c3ce:	757b      	strb	r3, [r7, #21]
 800c3d0:	e003      	b.n	800c3da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c3d2:	23ff      	movs	r3, #255	@ 0xff
 800c3d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c3da:	7dba      	ldrb	r2, [r7, #22]
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	9302      	str	r3, [sp, #8]
 800c3e0:	2306      	movs	r3, #6
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	7d7b      	ldrb	r3, [r7, #21]
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	6879      	ldr	r1, [r7, #4]
 800c3ee:	68b8      	ldr	r0, [r7, #8]
 800c3f0:	f002 fcf0 	bl	800edd4 <ip4_output_if>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c3f8:	68b8      	ldr	r0, [r7, #8]
 800c3fa:	f7fa fdbf 	bl	8006f7c <pbuf_free>
  return err;
 800c3fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	08012a7c 	.word	0x08012a7c
 800c410:	08013230 	.word	0x08013230
 800c414:	08012ad0 	.word	0x08012ad0

0800c418 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c418:	b590      	push	{r4, r7, lr}
 800c41a:	b08b      	sub	sp, #44	@ 0x2c
 800c41c:	af04      	add	r7, sp, #16
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d106      	bne.n	800c43a <tcp_rst+0x22>
 800c42c:	4b1f      	ldr	r3, [pc, #124]	@ (800c4ac <tcp_rst+0x94>)
 800c42e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c432:	491f      	ldr	r1, [pc, #124]	@ (800c4b0 <tcp_rst+0x98>)
 800c434:	481f      	ldr	r0, [pc, #124]	@ (800c4b4 <tcp_rst+0x9c>)
 800c436:	f003 fe65 	bl	8010104 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <tcp_rst+0x36>
 800c440:	4b1a      	ldr	r3, [pc, #104]	@ (800c4ac <tcp_rst+0x94>)
 800c442:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c446:	491c      	ldr	r1, [pc, #112]	@ (800c4b8 <tcp_rst+0xa0>)
 800c448:	481a      	ldr	r0, [pc, #104]	@ (800c4b4 <tcp_rst+0x9c>)
 800c44a:	f003 fe5b 	bl	8010104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c44e:	2300      	movs	r3, #0
 800c450:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c452:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c456:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	b29c      	uxth	r4, r3
 800c45c:	68b8      	ldr	r0, [r7, #8]
 800c45e:	f7f9 f953 	bl	8005708 <lwip_htonl>
 800c462:	4602      	mov	r2, r0
 800c464:	8abb      	ldrh	r3, [r7, #20]
 800c466:	9303      	str	r3, [sp, #12]
 800c468:	2314      	movs	r3, #20
 800c46a:	9302      	str	r3, [sp, #8]
 800c46c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	4613      	mov	r3, r2
 800c476:	2200      	movs	r2, #0
 800c478:	4621      	mov	r1, r4
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7ff fe94 	bl	800c1a8 <tcp_output_alloc_header_common>
 800c480:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00c      	beq.n	800c4a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c488:	7dfb      	ldrb	r3, [r7, #23]
 800c48a:	2200      	movs	r2, #0
 800c48c:	6939      	ldr	r1, [r7, #16]
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f7ff ff3a 	bl	800c308 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c496:	683a      	ldr	r2, [r7, #0]
 800c498:	6939      	ldr	r1, [r7, #16]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7ff ff72 	bl	800c384 <tcp_output_control_segment>
 800c4a0:	e000      	b.n	800c4a4 <tcp_rst+0x8c>
    return;
 800c4a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c4a4:	371c      	adds	r7, #28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd90      	pop	{r4, r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	08012a7c 	.word	0x08012a7c
 800c4b0:	0801325c 	.word	0x0801325c
 800c4b4:	08012ad0 	.word	0x08012ad0
 800c4b8:	08013278 	.word	0x08013278

0800c4bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c4bc:	b590      	push	{r4, r7, lr}
 800c4be:	b087      	sub	sp, #28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d106      	bne.n	800c4e0 <tcp_send_empty_ack+0x24>
 800c4d2:	4b28      	ldr	r3, [pc, #160]	@ (800c574 <tcp_send_empty_ack+0xb8>)
 800c4d4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c4d8:	4927      	ldr	r1, [pc, #156]	@ (800c578 <tcp_send_empty_ack+0xbc>)
 800c4da:	4828      	ldr	r0, [pc, #160]	@ (800c57c <tcp_send_empty_ack+0xc0>)
 800c4dc:	f003 fe12 	bl	8010104 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	f003 0304 	and.w	r3, r3, #4
 800c4ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c4ec:	7d7b      	ldrb	r3, [r7, #21]
 800c4ee:	b29c      	uxth	r4, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7f9 f907 	bl	8005708 <lwip_htonl>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4621      	mov	r1, r4
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff fec3 	bl	800c28c <tcp_output_alloc_header>
 800c506:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d109      	bne.n	800c522 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8b5b      	ldrh	r3, [r3, #26]
 800c512:	f043 0303 	orr.w	r3, r3, #3
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c51c:	f06f 0301 	mvn.w	r3, #1
 800c520:	e023      	b.n	800c56a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c522:	7dbb      	ldrb	r3, [r7, #22]
 800c524:	7dfa      	ldrb	r2, [r7, #23]
 800c526:	6939      	ldr	r1, [r7, #16]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7ff feed 	bl	800c308 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3304      	adds	r3, #4
 800c534:	6939      	ldr	r1, [r7, #16]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff ff24 	bl	800c384 <tcp_output_control_segment>
 800c53c:	4603      	mov	r3, r0
 800c53e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d007      	beq.n	800c558 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	8b5b      	ldrh	r3, [r3, #26]
 800c54c:	f043 0303 	orr.w	r3, r3, #3
 800c550:	b29a      	uxth	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	835a      	strh	r2, [r3, #26]
 800c556:	e006      	b.n	800c566 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	8b5b      	ldrh	r3, [r3, #26]
 800c55c:	f023 0303 	bic.w	r3, r3, #3
 800c560:	b29a      	uxth	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c566:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	371c      	adds	r7, #28
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd90      	pop	{r4, r7, pc}
 800c572:	bf00      	nop
 800c574:	08012a7c 	.word	0x08012a7c
 800c578:	08013294 	.word	0x08013294
 800c57c:	08012ad0 	.word	0x08012ad0

0800c580 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c580:	b590      	push	{r4, r7, lr}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c588:	2300      	movs	r3, #0
 800c58a:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <tcp_keepalive+0x20>
 800c592:	4b18      	ldr	r3, [pc, #96]	@ (800c5f4 <tcp_keepalive+0x74>)
 800c594:	f640 0224 	movw	r2, #2084	@ 0x824
 800c598:	4917      	ldr	r1, [pc, #92]	@ (800c5f8 <tcp_keepalive+0x78>)
 800c59a:	4818      	ldr	r0, [pc, #96]	@ (800c5fc <tcp_keepalive+0x7c>)
 800c59c:	f003 fdb2 	bl	8010104 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c5a0:	7abb      	ldrb	r3, [r7, #10]
 800c5a2:	b29c      	uxth	r4, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f9 f8ac 	bl	8005708 <lwip_htonl>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	4621      	mov	r1, r4
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff fe68 	bl	800c28c <tcp_output_alloc_header>
 800c5bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c5c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5c8:	e010      	b.n	800c5ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5ca:	7abb      	ldrb	r3, [r7, #10]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	68f9      	ldr	r1, [r7, #12]
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff fe99 	bl	800c308 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	68f9      	ldr	r1, [r7, #12]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff fed0 	bl	800c384 <tcp_output_control_segment>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c5e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd90      	pop	{r4, r7, pc}
 800c5f4:	08012a7c 	.word	0x08012a7c
 800c5f8:	080132b4 	.word	0x080132b4
 800c5fc:	08012ad0 	.word	0x08012ad0

0800c600 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b08b      	sub	sp, #44	@ 0x2c
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c608:	2300      	movs	r3, #0
 800c60a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d106      	bne.n	800c620 <tcp_zero_window_probe+0x20>
 800c612:	4b4d      	ldr	r3, [pc, #308]	@ (800c748 <tcp_zero_window_probe+0x148>)
 800c614:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c618:	494c      	ldr	r1, [pc, #304]	@ (800c74c <tcp_zero_window_probe+0x14c>)
 800c61a:	484d      	ldr	r0, [pc, #308]	@ (800c750 <tcp_zero_window_probe+0x150>)
 800c61c:	f003 fd72 	bl	8010104 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c624:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 800c626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d101      	bne.n	800c630 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c62c:	2300      	movs	r3, #0
 800c62e:	e087      	b.n	800c740 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c636:	2bff      	cmp	r3, #255	@ 0xff
 800c638:	d007      	beq.n	800c64a <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c640:	3301      	adds	r3, #1
 800c642:	b2da      	uxtb	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	899b      	ldrh	r3, [r3, #12]
 800c650:	b29b      	uxth	r3, r3
 800c652:	4618      	mov	r0, r3
 800c654:	f7f9 f842 	bl	80056dc <lwip_htons>
 800c658:	4603      	mov	r3, r0
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d005      	beq.n	800c670 <tcp_zero_window_probe+0x70>
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	891b      	ldrh	r3, [r3, #8]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <tcp_zero_window_probe+0x70>
 800c66c:	2301      	movs	r3, #1
 800c66e:	e000      	b.n	800c672 <tcp_zero_window_probe+0x72>
 800c670:	2300      	movs	r3, #0
 800c672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c676:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bf0c      	ite	eq
 800c67e:	2301      	moveq	r3, #1
 800c680:	2300      	movne	r3, #0
 800c682:	b2db      	uxtb	r3, r3
 800c684:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c686:	7cfb      	ldrb	r3, [r7, #19]
 800c688:	b299      	uxth	r1, r3
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	8c3a      	ldrh	r2, [r7, #32]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff fdfa 	bl	800c28c <tcp_output_alloc_header>
 800c698:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c6a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6a4:	e04c      	b.n	800c740 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800c6ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d011      	beq.n	800c6d8 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	899b      	ldrh	r3, [r3, #12]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	b21b      	sxth	r3, r3
 800c6bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c6c0:	b21c      	sxth	r4, r3
 800c6c2:	2011      	movs	r0, #17
 800c6c4:	f7f9 f80a 	bl	80056dc <lwip_htons>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	b21b      	sxth	r3, r3
 800c6cc:	4323      	orrs	r3, r4
 800c6ce:	b21b      	sxth	r3, r3
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	819a      	strh	r2, [r3, #12]
 800c6d6:	e010      	b.n	800c6fa <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	3314      	adds	r3, #20
 800c6de:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	6858      	ldr	r0, [r3, #4]
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	891a      	ldrh	r2, [r3, #8]
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	891b      	ldrh	r3, [r3, #8]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	6979      	ldr	r1, [r7, #20]
 800c6f6:	f7fa fe3b 	bl	8007370 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	f7f9 f801 	bl	8005708 <lwip_htonl>
 800c706:	4603      	mov	r3, r0
 800c708:	3301      	adds	r3, #1
 800c70a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	2b00      	cmp	r3, #0
 800c716:	da02      	bge.n	800c71e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c71e:	7cfb      	ldrb	r3, [r7, #19]
 800c720:	2200      	movs	r2, #0
 800c722:	69f9      	ldr	r1, [r7, #28]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff fdef 	bl	800c308 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3304      	adds	r3, #4
 800c730:	69f9      	ldr	r1, [r7, #28]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff fe26 	bl	800c384 <tcp_output_control_segment>
 800c738:	4603      	mov	r3, r0
 800c73a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c73c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c740:	4618      	mov	r0, r3
 800c742:	372c      	adds	r7, #44	@ 0x2c
 800c744:	46bd      	mov	sp, r7
 800c746:	bd90      	pop	{r4, r7, pc}
 800c748:	08012a7c 	.word	0x08012a7c
 800c74c:	080132d0 	.word	0x080132d0
 800c750:	08012ad0 	.word	0x08012ad0

0800c754 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c75c:	f7fa fef6 	bl	800754c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c760:	4b0a      	ldr	r3, [pc, #40]	@ (800c78c <tcpip_tcp_timer+0x38>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d103      	bne.n	800c770 <tcpip_tcp_timer+0x1c>
 800c768:	4b09      	ldr	r3, [pc, #36]	@ (800c790 <tcpip_tcp_timer+0x3c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d005      	beq.n	800c77c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c770:	2200      	movs	r2, #0
 800c772:	4908      	ldr	r1, [pc, #32]	@ (800c794 <tcpip_tcp_timer+0x40>)
 800c774:	20fa      	movs	r0, #250	@ 0xfa
 800c776:	f000 f8f3 	bl	800c960 <sys_timeout>
 800c77a:	e003      	b.n	800c784 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c77c:	4b06      	ldr	r3, [pc, #24]	@ (800c798 <tcpip_tcp_timer+0x44>)
 800c77e:	2200      	movs	r2, #0
 800c780:	601a      	str	r2, [r3, #0]
  }
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20007d04 	.word	0x20007d04
 800c790:	20007d08 	.word	0x20007d08
 800c794:	0800c755 	.word	0x0800c755
 800c798:	20007d54 	.word	0x20007d54

0800c79c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c7cc <tcp_timer_needed+0x30>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10f      	bne.n	800c7c8 <tcp_timer_needed+0x2c>
 800c7a8:	4b09      	ldr	r3, [pc, #36]	@ (800c7d0 <tcp_timer_needed+0x34>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d103      	bne.n	800c7b8 <tcp_timer_needed+0x1c>
 800c7b0:	4b08      	ldr	r3, [pc, #32]	@ (800c7d4 <tcp_timer_needed+0x38>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d007      	beq.n	800c7c8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c7b8:	4b04      	ldr	r3, [pc, #16]	@ (800c7cc <tcp_timer_needed+0x30>)
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c7be:	2200      	movs	r2, #0
 800c7c0:	4905      	ldr	r1, [pc, #20]	@ (800c7d8 <tcp_timer_needed+0x3c>)
 800c7c2:	20fa      	movs	r0, #250	@ 0xfa
 800c7c4:	f000 f8cc 	bl	800c960 <sys_timeout>
  }
}
 800c7c8:	bf00      	nop
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	20007d54 	.word	0x20007d54
 800c7d0:	20007d04 	.word	0x20007d04
 800c7d4:	20007d08 	.word	0x20007d08
 800c7d8:	0800c755 	.word	0x0800c755

0800c7dc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c7e8:	2006      	movs	r0, #6
 800c7ea:	f7f9 fbeb 	bl	8005fc4 <memp_malloc>
 800c7ee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d109      	bne.n	800c80a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d151      	bne.n	800c8a0 <sys_timeout_abs+0xc4>
 800c7fc:	4b2a      	ldr	r3, [pc, #168]	@ (800c8a8 <sys_timeout_abs+0xcc>)
 800c7fe:	22be      	movs	r2, #190	@ 0xbe
 800c800:	492a      	ldr	r1, [pc, #168]	@ (800c8ac <sys_timeout_abs+0xd0>)
 800c802:	482b      	ldr	r0, [pc, #172]	@ (800c8b0 <sys_timeout_abs+0xd4>)
 800c804:	f003 fc7e 	bl	8010104 <iprintf>
    return;
 800c808:	e04a      	b.n	800c8a0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	2200      	movs	r2, #0
 800c80e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c822:	4b24      	ldr	r3, [pc, #144]	@ (800c8b4 <sys_timeout_abs+0xd8>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d103      	bne.n	800c832 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c82a:	4a22      	ldr	r2, [pc, #136]	@ (800c8b4 <sys_timeout_abs+0xd8>)
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	6013      	str	r3, [r2, #0]
    return;
 800c830:	e037      	b.n	800c8a2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	4b1f      	ldr	r3, [pc, #124]	@ (800c8b4 <sys_timeout_abs+0xd8>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	0fdb      	lsrs	r3, r3, #31
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	d007      	beq.n	800c85a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c84a:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b4 <sys_timeout_abs+0xd8>)
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c852:	4a18      	ldr	r2, [pc, #96]	@ (800c8b4 <sys_timeout_abs+0xd8>)
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	e023      	b.n	800c8a2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c85a:	4b16      	ldr	r3, [pc, #88]	@ (800c8b4 <sys_timeout_abs+0xd8>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	617b      	str	r3, [r7, #20]
 800c860:	e01a      	b.n	800c898 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00b      	beq.n	800c882 <sys_timeout_abs+0xa6>
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	0fdb      	lsrs	r3, r3, #31
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d007      	beq.n	800c892 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	601a      	str	r2, [r3, #0]
        break;
 800c890:	e007      	b.n	800c8a2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e1      	bne.n	800c862 <sys_timeout_abs+0x86>
 800c89e:	e000      	b.n	800c8a2 <sys_timeout_abs+0xc6>
    return;
 800c8a0:	bf00      	nop
      }
    }
  }
}
 800c8a2:	3718      	adds	r7, #24
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	080132f4 	.word	0x080132f4
 800c8ac:	08013328 	.word	0x08013328
 800c8b0:	08013368 	.word	0x08013368
 800c8b4:	20007d4c 	.word	0x20007d4c

0800c8b8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	4798      	blx	r3

  now = sys_now();
 800c8ca:	f7f8 fccb 	bl	8005264 <sys_now>
 800c8ce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c914 <lwip_cyclic_timer+0x5c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4413      	add	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	0fdb      	lsrs	r3, r3, #31
 800c8e4:	f003 0301 	and.w	r3, r3, #1
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d009      	beq.n	800c902 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	4907      	ldr	r1, [pc, #28]	@ (800c918 <lwip_cyclic_timer+0x60>)
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff ff6e 	bl	800c7dc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c900:	e004      	b.n	800c90c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	4904      	ldr	r1, [pc, #16]	@ (800c918 <lwip_cyclic_timer+0x60>)
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7ff ff68 	bl	800c7dc <sys_timeout_abs>
}
 800c90c:	bf00      	nop
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	20007d50 	.word	0x20007d50
 800c918:	0800c8b9 	.word	0x0800c8b9

0800c91c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c922:	2301      	movs	r3, #1
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	e00e      	b.n	800c946 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c928:	4a0b      	ldr	r2, [pc, #44]	@ (800c958 <sys_timeouts_init+0x3c>)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	4a08      	ldr	r2, [pc, #32]	@ (800c958 <sys_timeouts_init+0x3c>)
 800c936:	4413      	add	r3, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	4908      	ldr	r1, [pc, #32]	@ (800c95c <sys_timeouts_init+0x40>)
 800c93c:	f000 f810 	bl	800c960 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3301      	adds	r3, #1
 800c944:	607b      	str	r3, [r7, #4]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b02      	cmp	r3, #2
 800c94a:	d9ed      	bls.n	800c928 <sys_timeouts_init+0xc>
  }
}
 800c94c:	bf00      	nop
 800c94e:	bf00      	nop
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	08014570 	.word	0x08014570
 800c95c:	0800c8b9 	.word	0x0800c8b9

0800c960 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c972:	d306      	bcc.n	800c982 <sys_timeout+0x22>
 800c974:	4b0a      	ldr	r3, [pc, #40]	@ (800c9a0 <sys_timeout+0x40>)
 800c976:	f240 1229 	movw	r2, #297	@ 0x129
 800c97a:	490a      	ldr	r1, [pc, #40]	@ (800c9a4 <sys_timeout+0x44>)
 800c97c:	480a      	ldr	r0, [pc, #40]	@ (800c9a8 <sys_timeout+0x48>)
 800c97e:	f003 fbc1 	bl	8010104 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c982:	f7f8 fc6f 	bl	8005264 <sys_now>
 800c986:	4602      	mov	r2, r0
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	4413      	add	r3, r2
 800c98c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	68b9      	ldr	r1, [r7, #8]
 800c992:	6978      	ldr	r0, [r7, #20]
 800c994:	f7ff ff22 	bl	800c7dc <sys_timeout_abs>
#endif
}
 800c998:	bf00      	nop
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	080132f4 	.word	0x080132f4
 800c9a4:	08013390 	.word	0x08013390
 800c9a8:	08013368 	.word	0x08013368

0800c9ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c9b2:	f7f8 fc57 	bl	8005264 <sys_now>
 800c9b6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c9b8:	4b1a      	ldr	r3, [pc, #104]	@ (800ca24 <sys_check_timeouts+0x78>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <sys_check_timeouts+0x1a>
 800c9c2:	f7f9 ffa1 	bl	8006908 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c9c6:	4b18      	ldr	r3, [pc, #96]	@ (800ca28 <sys_check_timeouts+0x7c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d022      	beq.n	800ca18 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	0fdb      	lsrs	r3, r3, #31
 800c9dc:	f003 0301 	and.w	r3, r3, #1
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d11a      	bne.n	800ca1c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a0f      	ldr	r2, [pc, #60]	@ (800ca28 <sys_check_timeouts+0x7c>)
 800c9ec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	4a0b      	ldr	r2, [pc, #44]	@ (800ca2c <sys_check_timeouts+0x80>)
 800ca00:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ca02:	68b9      	ldr	r1, [r7, #8]
 800ca04:	2006      	movs	r0, #6
 800ca06:	f7f9 fb4d 	bl	80060a4 <memp_free>
    if (handler != NULL) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0d3      	beq.n	800c9b8 <sys_check_timeouts+0xc>
      handler(arg);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6838      	ldr	r0, [r7, #0]
 800ca14:	4798      	blx	r3
  do {
 800ca16:	e7cf      	b.n	800c9b8 <sys_check_timeouts+0xc>
      return;
 800ca18:	bf00      	nop
 800ca1a:	e000      	b.n	800ca1e <sys_check_timeouts+0x72>
      return;
 800ca1c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20007cf5 	.word	0x20007cf5
 800ca28:	20007d4c 	.word	0x20007d4c
 800ca2c:	20007d50 	.word	0x20007d50

0800ca30 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ca34:	f003 fa66 	bl	800ff04 <rand>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	4b01      	ldr	r3, [pc, #4]	@ (800ca50 <udp_init+0x20>)
 800ca4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ca4c:	bf00      	nop
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	2000006c 	.word	0x2000006c

0800ca54 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ca5e:	4b17      	ldr	r3, [pc, #92]	@ (800cabc <udp_new_port+0x68>)
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	b291      	uxth	r1, r2
 800ca66:	4a15      	ldr	r2, [pc, #84]	@ (800cabc <udp_new_port+0x68>)
 800ca68:	8011      	strh	r1, [r2, #0]
 800ca6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d103      	bne.n	800ca7a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ca72:	4b12      	ldr	r3, [pc, #72]	@ (800cabc <udp_new_port+0x68>)
 800ca74:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ca78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca7a:	4b11      	ldr	r3, [pc, #68]	@ (800cac0 <udp_new_port+0x6c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	603b      	str	r3, [r7, #0]
 800ca80:	e011      	b.n	800caa6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	8a5a      	ldrh	r2, [r3, #18]
 800ca86:	4b0d      	ldr	r3, [pc, #52]	@ (800cabc <udp_new_port+0x68>)
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d108      	bne.n	800caa0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ca8e:	88fb      	ldrh	r3, [r7, #6]
 800ca90:	3301      	adds	r3, #1
 800ca92:	80fb      	strh	r3, [r7, #6]
 800ca94:	88fb      	ldrh	r3, [r7, #6]
 800ca96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca9a:	d3e0      	bcc.n	800ca5e <udp_new_port+0xa>
        return 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e007      	b.n	800cab0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	603b      	str	r3, [r7, #0]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1ea      	bne.n	800ca82 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800caac:	4b03      	ldr	r3, [pc, #12]	@ (800cabc <udp_new_port+0x68>)
 800caae:	881b      	ldrh	r3, [r3, #0]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	2000006c 	.word	0x2000006c
 800cac0:	20007d58 	.word	0x20007d58

0800cac4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4613      	mov	r3, r2
 800cad0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d105      	bne.n	800cae4 <udp_input_local_match+0x20>
 800cad8:	4b27      	ldr	r3, [pc, #156]	@ (800cb78 <udp_input_local_match+0xb4>)
 800cada:	2287      	movs	r2, #135	@ 0x87
 800cadc:	4927      	ldr	r1, [pc, #156]	@ (800cb7c <udp_input_local_match+0xb8>)
 800cade:	4828      	ldr	r0, [pc, #160]	@ (800cb80 <udp_input_local_match+0xbc>)
 800cae0:	f003 fb10 	bl	8010104 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d105      	bne.n	800caf6 <udp_input_local_match+0x32>
 800caea:	4b23      	ldr	r3, [pc, #140]	@ (800cb78 <udp_input_local_match+0xb4>)
 800caec:	2288      	movs	r2, #136	@ 0x88
 800caee:	4925      	ldr	r1, [pc, #148]	@ (800cb84 <udp_input_local_match+0xc0>)
 800caf0:	4823      	ldr	r0, [pc, #140]	@ (800cb80 <udp_input_local_match+0xbc>)
 800caf2:	f003 fb07 	bl	8010104 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	7a1b      	ldrb	r3, [r3, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00b      	beq.n	800cb16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	7a1a      	ldrb	r2, [r3, #8]
 800cb02:	4b21      	ldr	r3, [pc, #132]	@ (800cb88 <udp_input_local_match+0xc4>)
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d001      	beq.n	800cb16 <udp_input_local_match+0x52>
    return 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	e02b      	b.n	800cb6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d018      	beq.n	800cb4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d013      	beq.n	800cb4a <udp_input_local_match+0x86>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00f      	beq.n	800cb4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb2a:	4b17      	ldr	r3, [pc, #92]	@ (800cb88 <udp_input_local_match+0xc4>)
 800cb2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb32:	d00a      	beq.n	800cb4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	4b13      	ldr	r3, [pc, #76]	@ (800cb88 <udp_input_local_match+0xc4>)
 800cb3a:	695b      	ldr	r3, [r3, #20]
 800cb3c:	405a      	eors	r2, r3
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	3308      	adds	r3, #8
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d110      	bne.n	800cb6c <udp_input_local_match+0xa8>
          return 1;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e00f      	b.n	800cb6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d009      	beq.n	800cb68 <udp_input_local_match+0xa4>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d005      	beq.n	800cb68 <udp_input_local_match+0xa4>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	4b09      	ldr	r3, [pc, #36]	@ (800cb88 <udp_input_local_match+0xc4>)
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d101      	bne.n	800cb6c <udp_input_local_match+0xa8>
        return 1;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e000      	b.n	800cb6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	080133dc 	.word	0x080133dc
 800cb7c:	0801340c 	.word	0x0801340c
 800cb80:	08013430 	.word	0x08013430
 800cb84:	08013458 	.word	0x08013458
 800cb88:	20004d9c 	.word	0x20004d9c

0800cb8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cb8c:	b590      	push	{r4, r7, lr}
 800cb8e:	b08d      	sub	sp, #52	@ 0x34
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d105      	bne.n	800cbac <udp_input+0x20>
 800cba0:	4b95      	ldr	r3, [pc, #596]	@ (800cdf8 <udp_input+0x26c>)
 800cba2:	22cf      	movs	r2, #207	@ 0xcf
 800cba4:	4995      	ldr	r1, [pc, #596]	@ (800cdfc <udp_input+0x270>)
 800cba6:	4896      	ldr	r0, [pc, #600]	@ (800ce00 <udp_input+0x274>)
 800cba8:	f003 faac 	bl	8010104 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d105      	bne.n	800cbbe <udp_input+0x32>
 800cbb2:	4b91      	ldr	r3, [pc, #580]	@ (800cdf8 <udp_input+0x26c>)
 800cbb4:	22d0      	movs	r2, #208	@ 0xd0
 800cbb6:	4993      	ldr	r1, [pc, #588]	@ (800ce04 <udp_input+0x278>)
 800cbb8:	4891      	ldr	r0, [pc, #580]	@ (800ce00 <udp_input+0x274>)
 800cbba:	f003 faa3 	bl	8010104 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	895b      	ldrh	r3, [r3, #10]
 800cbc2:	2b07      	cmp	r3, #7
 800cbc4:	d809      	bhi.n	800cbda <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	891b      	ldrh	r3, [r3, #8]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	488e      	ldr	r0, [pc, #568]	@ (800ce08 <udp_input+0x27c>)
 800cbce:	f003 fa99 	bl	8010104 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7fa f9d2 	bl	8006f7c <pbuf_free>
    goto end;
 800cbd8:	e18d      	b.n	800cef6 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cbe0:	4b8a      	ldr	r3, [pc, #552]	@ (800ce0c <udp_input+0x280>)
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	4a89      	ldr	r2, [pc, #548]	@ (800ce0c <udp_input+0x280>)
 800cbe6:	6812      	ldr	r2, [r2, #0]
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4618      	mov	r0, r3
 800cbec:	f002 f9ca 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	891b      	ldrh	r3, [r3, #8]
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	4885      	ldr	r0, [pc, #532]	@ (800ce10 <udp_input+0x284>)
 800cbfc:	f003 fa82 	bl	8010104 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	881b      	ldrh	r3, [r3, #0]
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f8 fd68 	bl	80056dc <lwip_htons>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	885b      	ldrh	r3, [r3, #2]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7f8 fd60 	bl	80056dc <lwip_htons>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 800cc20:	6978      	ldr	r0, [r7, #20]
 800cc22:	f000 fd3b 	bl	800d69c <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 800cc26:	487b      	ldr	r0, [pc, #492]	@ (800ce14 <udp_input+0x288>)
 800cc28:	f003 fa6c 	bl	8010104 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 800cc2c:	4b77      	ldr	r3, [pc, #476]	@ (800ce0c <udp_input+0x280>)
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	4619      	mov	r1, r3
 800cc34:	4b75      	ldr	r3, [pc, #468]	@ (800ce0c <udp_input+0x280>)
 800cc36:	695b      	ldr	r3, [r3, #20]
 800cc38:	0a1b      	lsrs	r3, r3, #8
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	4b73      	ldr	r3, [pc, #460]	@ (800ce0c <udp_input+0x280>)
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	0c1b      	lsrs	r3, r3, #16
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	4618      	mov	r0, r3
 800cc48:	4b70      	ldr	r3, [pc, #448]	@ (800ce0c <udp_input+0x280>)
 800cc4a:	695b      	ldr	r3, [r3, #20]
 800cc4c:	0e1b      	lsrs	r3, r3, #24
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4603      	mov	r3, r0
 800cc54:	4870      	ldr	r0, [pc, #448]	@ (800ce18 <udp_input+0x28c>)
 800cc56:	f003 fa55 	bl	8010104 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	885b      	ldrh	r3, [r3, #2]
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f8 fd3b 	bl	80056dc <lwip_htons>
 800cc66:	4603      	mov	r3, r0
 800cc68:	4619      	mov	r1, r3
 800cc6a:	486c      	ldr	r0, [pc, #432]	@ (800ce1c <udp_input+0x290>)
 800cc6c:	f003 fa4a 	bl	8010104 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 800cc70:	4b66      	ldr	r3, [pc, #408]	@ (800ce0c <udp_input+0x280>)
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	4619      	mov	r1, r3
 800cc78:	4b64      	ldr	r3, [pc, #400]	@ (800ce0c <udp_input+0x280>)
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	0a1b      	lsrs	r3, r3, #8
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	461a      	mov	r2, r3
 800cc82:	4b62      	ldr	r3, [pc, #392]	@ (800ce0c <udp_input+0x280>)
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	0c1b      	lsrs	r3, r3, #16
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	4b5f      	ldr	r3, [pc, #380]	@ (800ce0c <udp_input+0x280>)
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	0e1b      	lsrs	r3, r3, #24
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	4603      	mov	r3, r0
 800cc98:	485f      	ldr	r0, [pc, #380]	@ (800ce18 <udp_input+0x28c>)
 800cc9a:	f003 fa33 	bl	8010104 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7f8 fd19 	bl	80056dc <lwip_htons>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	4619      	mov	r1, r3
 800ccae:	485c      	ldr	r0, [pc, #368]	@ (800ce20 <udp_input+0x294>)
 800ccb0:	f003 fa28 	bl	8010104 <iprintf>

  pcb = NULL;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccc0:	4b58      	ldr	r3, [pc, #352]	@ (800ce24 <udp_input+0x298>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccc6:	e091      	b.n	800cdec <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 800ccc8:	4857      	ldr	r0, [pc, #348]	@ (800ce28 <udp_input+0x29c>)
 800ccca:	f003 fa1b 	bl	8010104 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 800ccce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	0a1b      	lsrs	r3, r3, #8
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	461a      	mov	r2, r3
 800cce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	0c1b      	lsrs	r3, r3, #16
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	4618      	mov	r0, r3
 800ccea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	0e1b      	lsrs	r3, r3, #24
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	4848      	ldr	r0, [pc, #288]	@ (800ce18 <udp_input+0x28c>)
 800ccf8:	f003 fa04 	bl	8010104 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfe:	8a5b      	ldrh	r3, [r3, #18]
 800cd00:	4619      	mov	r1, r3
 800cd02:	4846      	ldr	r0, [pc, #280]	@ (800ce1c <udp_input+0x290>)
 800cd04:	f003 f9fe 	bl	8010104 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 800cd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	0a1b      	lsrs	r3, r3, #8
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	461a      	mov	r2, r3
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	0c1b      	lsrs	r3, r3, #16
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	4618      	mov	r0, r3
 800cd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	0e1b      	lsrs	r3, r3, #24
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	4603      	mov	r3, r0
 800cd30:	4839      	ldr	r0, [pc, #228]	@ (800ce18 <udp_input+0x28c>)
 800cd32:	f003 f9e7 	bl	8010104 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 800cd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd38:	8a9b      	ldrh	r3, [r3, #20]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4838      	ldr	r0, [pc, #224]	@ (800ce20 <udp_input+0x294>)
 800cd3e:	f003 f9e1 	bl	8010104 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd44:	8a5b      	ldrh	r3, [r3, #18]
 800cd46:	89fa      	ldrh	r2, [r7, #14]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d14a      	bne.n	800cde2 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cd4c:	7cfb      	ldrb	r3, [r7, #19]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd54:	f7ff feb6 	bl	800cac4 <udp_input_local_match>
 800cd58:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d041      	beq.n	800cde2 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd60:	7c1b      	ldrb	r3, [r3, #16]
 800cd62:	f003 0304 	and.w	r3, r3, #4
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d11d      	bne.n	800cda6 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd72:	61fb      	str	r3, [r7, #28]
 800cd74:	e017      	b.n	800cda6 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cd76:	7cfb      	ldrb	r3, [r7, #19]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d014      	beq.n	800cda6 <udp_input+0x21a>
 800cd7c:	4b23      	ldr	r3, [pc, #140]	@ (800ce0c <udp_input+0x280>)
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd84:	d10f      	bne.n	800cda6 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d008      	beq.n	800cda6 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d101      	bne.n	800cda6 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	8a9b      	ldrh	r3, [r3, #20]
 800cdaa:	8a3a      	ldrh	r2, [r7, #16]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d118      	bne.n	800cde2 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d005      	beq.n	800cdc4 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	4b13      	ldr	r3, [pc, #76]	@ (800ce0c <udp_input+0x280>)
 800cdbe:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d10e      	bne.n	800cde2 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cdc4:	6a3b      	ldr	r3, [r7, #32]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d030      	beq.n	800ce2c <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cdd2:	4b14      	ldr	r3, [pc, #80]	@ (800ce24 <udp_input+0x298>)
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cdda:	4a12      	ldr	r2, [pc, #72]	@ (800ce24 <udp_input+0x298>)
 800cddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdde:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cde0:	e024      	b.n	800ce2c <udp_input+0x2a0>
      }
    }

    prev = pcb;
 800cde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f47f af6a 	bne.w	800ccc8 <udp_input+0x13c>
 800cdf4:	e01b      	b.n	800ce2e <udp_input+0x2a2>
 800cdf6:	bf00      	nop
 800cdf8:	080133dc 	.word	0x080133dc
 800cdfc:	08013480 	.word	0x08013480
 800ce00:	08013430 	.word	0x08013430
 800ce04:	08013498 	.word	0x08013498
 800ce08:	080134b4 	.word	0x080134b4
 800ce0c:	20004d9c 	.word	0x20004d9c
 800ce10:	080134ec 	.word	0x080134ec
 800ce14:	08013518 	.word	0x08013518
 800ce18:	08013520 	.word	0x08013520
 800ce1c:	08013530 	.word	0x08013530
 800ce20:	08013540 	.word	0x08013540
 800ce24:	20007d58 	.word	0x20007d58
 800ce28:	08013548 	.word	0x08013548
        break;
 800ce2c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <udp_input+0x2ac>
    pcb = uncon_pcb;
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ce38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <udp_input+0x2b8>
    for_us = 1;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	76fb      	strb	r3, [r7, #27]
 800ce42:	e00a      	b.n	800ce5a <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	3304      	adds	r3, #4
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	4b2d      	ldr	r3, [pc, #180]	@ (800cf00 <udp_input+0x374>)
 800ce4c:	695b      	ldr	r3, [r3, #20]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	bf0c      	ite	eq
 800ce52:	2301      	moveq	r3, #1
 800ce54:	2300      	movne	r3, #0
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ce5a:	7efb      	ldrb	r3, [r7, #27]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d047      	beq.n	800cef0 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 800ce60:	4828      	ldr	r0, [pc, #160]	@ (800cf04 <udp_input+0x378>)
 800ce62:	f003 f9bf 	bl	80101e4 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ce66:	2108      	movs	r1, #8
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7fa f801 	bl	8006e70 <pbuf_remove_header>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00a      	beq.n	800ce8a <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ce74:	4b24      	ldr	r3, [pc, #144]	@ (800cf08 <udp_input+0x37c>)
 800ce76:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ce7a:	4924      	ldr	r1, [pc, #144]	@ (800cf0c <udp_input+0x380>)
 800ce7c:	4824      	ldr	r0, [pc, #144]	@ (800cf10 <udp_input+0x384>)
 800ce7e:	f003 f941 	bl	8010104 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7fa f87a 	bl	8006f7c <pbuf_free>
      goto end;
 800ce88:	e035      	b.n	800cef6 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d012      	beq.n	800ceb6 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ce90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce92:	699b      	ldr	r3, [r3, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ce98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9a:	699c      	ldr	r4, [r3, #24]
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9e:	69d8      	ldr	r0, [r3, #28]
 800cea0:	8a3b      	ldrh	r3, [r7, #16]
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	4b1b      	ldr	r3, [pc, #108]	@ (800cf14 <udp_input+0x388>)
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ceaa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ceac:	e024      	b.n	800cef8 <udp_input+0x36c>
        pbuf_free(p);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7fa f864 	bl	8006f7c <pbuf_free>
        goto end;
 800ceb4:	e01f      	b.n	800cef6 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 800ceb6:	4818      	ldr	r0, [pc, #96]	@ (800cf18 <udp_input+0x38c>)
 800ceb8:	f003 f994 	bl	80101e4 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cebc:	7cfb      	ldrb	r3, [r7, #19]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d112      	bne.n	800cee8 <udp_input+0x35c>
 800cec2:	4b0f      	ldr	r3, [pc, #60]	@ (800cf00 <udp_input+0x374>)
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ceca:	2be0      	cmp	r3, #224	@ 0xe0
 800cecc:	d00c      	beq.n	800cee8 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cece:	4b0c      	ldr	r3, [pc, #48]	@ (800cf00 <udp_input+0x374>)
 800ced0:	899b      	ldrh	r3, [r3, #12]
 800ced2:	3308      	adds	r3, #8
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	b21b      	sxth	r3, r3
 800ced8:	4619      	mov	r1, r3
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7fa f83b 	bl	8006f56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cee0:	2103      	movs	r1, #3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f001 fcee 	bl	800e8c4 <icmp_dest_unreach>
      pbuf_free(p);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7fa f847 	bl	8006f7c <pbuf_free>
  return;
 800ceee:	e003      	b.n	800cef8 <udp_input+0x36c>
    pbuf_free(p);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7fa f843 	bl	8006f7c <pbuf_free>
  return;
 800cef6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cef8:	372c      	adds	r7, #44	@ 0x2c
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd90      	pop	{r4, r7, pc}
 800cefe:	bf00      	nop
 800cf00:	20004d9c 	.word	0x20004d9c
 800cf04:	08013550 	.word	0x08013550
 800cf08:	080133dc 	.word	0x080133dc
 800cf0c:	08013570 	.word	0x08013570
 800cf10:	08013430 	.word	0x08013430
 800cf14:	20004dac 	.word	0x20004dac
 800cf18:	0801358c 	.word	0x0801358c

0800cf1c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af02      	add	r7, sp, #8
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d109      	bne.n	800cf44 <udp_sendto+0x28>
 800cf30:	4b3b      	ldr	r3, [pc, #236]	@ (800d020 <udp_sendto+0x104>)
 800cf32:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cf36:	493b      	ldr	r1, [pc, #236]	@ (800d024 <udp_sendto+0x108>)
 800cf38:	483b      	ldr	r0, [pc, #236]	@ (800d028 <udp_sendto+0x10c>)
 800cf3a:	f003 f8e3 	bl	8010104 <iprintf>
 800cf3e:	f06f 030f 	mvn.w	r3, #15
 800cf42:	e068      	b.n	800d016 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d109      	bne.n	800cf5e <udp_sendto+0x42>
 800cf4a:	4b35      	ldr	r3, [pc, #212]	@ (800d020 <udp_sendto+0x104>)
 800cf4c:	f240 2219 	movw	r2, #537	@ 0x219
 800cf50:	4936      	ldr	r1, [pc, #216]	@ (800d02c <udp_sendto+0x110>)
 800cf52:	4835      	ldr	r0, [pc, #212]	@ (800d028 <udp_sendto+0x10c>)
 800cf54:	f003 f8d6 	bl	8010104 <iprintf>
 800cf58:	f06f 030f 	mvn.w	r3, #15
 800cf5c:	e05b      	b.n	800d016 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d109      	bne.n	800cf78 <udp_sendto+0x5c>
 800cf64:	4b2e      	ldr	r3, [pc, #184]	@ (800d020 <udp_sendto+0x104>)
 800cf66:	f240 221a 	movw	r2, #538	@ 0x21a
 800cf6a:	4931      	ldr	r1, [pc, #196]	@ (800d030 <udp_sendto+0x114>)
 800cf6c:	482e      	ldr	r0, [pc, #184]	@ (800d028 <udp_sendto+0x10c>)
 800cf6e:	f003 f8c9 	bl	8010104 <iprintf>
 800cf72:	f06f 030f 	mvn.w	r3, #15
 800cf76:	e04e      	b.n	800d016 <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 800cf78:	482e      	ldr	r0, [pc, #184]	@ (800d034 <udp_sendto+0x118>)
 800cf7a:	f003 f933 	bl	80101e4 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7a1b      	ldrb	r3, [r3, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d006      	beq.n	800cf94 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	7a1b      	ldrb	r3, [r3, #8]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7f9 fc96 	bl	80068bc <netif_get_by_index>
 800cf90:	6178      	str	r0, [r7, #20]
 800cf92:	e003      	b.n	800cf9c <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 fd5f 	bl	800ea58 <ip4_route>
 800cf9a:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d12f      	bne.n	800d002 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 800cfa2:	4825      	ldr	r0, [pc, #148]	@ (800d038 <udp_sendto+0x11c>)
 800cfa4:	f003 f8ae 	bl	8010104 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <udp_sendto+0x9a>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	e000      	b.n	800cfb8 <udp_sendto+0x9c>
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d004      	beq.n	800cfc8 <udp_sendto+0xac>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	e000      	b.n	800cfca <udp_sendto+0xae>
 800cfc8:	2200      	movs	r2, #0
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d004      	beq.n	800cfda <udp_sendto+0xbe>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3302      	adds	r3, #2
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	e000      	b.n	800cfdc <udp_sendto+0xc0>
 800cfda:	2000      	movs	r0, #0
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <udp_sendto+0xce>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3303      	adds	r3, #3
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	e000      	b.n	800cfec <udp_sendto+0xd0>
 800cfea:	2300      	movs	r3, #0
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	4603      	mov	r3, r0
 800cff0:	4812      	ldr	r0, [pc, #72]	@ (800d03c <udp_sendto+0x120>)
 800cff2:	f003 f887 	bl	8010104 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 800cff6:	200a      	movs	r0, #10
 800cff8:	f003 f896 	bl	8010128 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800cffc:	f06f 0303 	mvn.w	r3, #3
 800d000:	e009      	b.n	800d016 <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d002:	887a      	ldrh	r2, [r7, #2]
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	4613      	mov	r3, r2
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f000 f816 	bl	800d040 <udp_sendto_if>
 800d014:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d016:	4618      	mov	r0, r3
 800d018:	3718      	adds	r7, #24
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	080133dc 	.word	0x080133dc
 800d024:	080135d4 	.word	0x080135d4
 800d028:	08013430 	.word	0x08013430
 800d02c:	080135ec 	.word	0x080135ec
 800d030:	08013608 	.word	0x08013608
 800d034:	08013624 	.word	0x08013624
 800d038:	08013630 	.word	0x08013630
 800d03c:	08013520 	.word	0x08013520

0800d040 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af02      	add	r7, sp, #8
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d109      	bne.n	800d068 <udp_sendto_if+0x28>
 800d054:	4b2e      	ldr	r3, [pc, #184]	@ (800d110 <udp_sendto_if+0xd0>)
 800d056:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d05a:	492e      	ldr	r1, [pc, #184]	@ (800d114 <udp_sendto_if+0xd4>)
 800d05c:	482e      	ldr	r0, [pc, #184]	@ (800d118 <udp_sendto_if+0xd8>)
 800d05e:	f003 f851 	bl	8010104 <iprintf>
 800d062:	f06f 030f 	mvn.w	r3, #15
 800d066:	e04f      	b.n	800d108 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d109      	bne.n	800d082 <udp_sendto_if+0x42>
 800d06e:	4b28      	ldr	r3, [pc, #160]	@ (800d110 <udp_sendto_if+0xd0>)
 800d070:	f240 2281 	movw	r2, #641	@ 0x281
 800d074:	4929      	ldr	r1, [pc, #164]	@ (800d11c <udp_sendto_if+0xdc>)
 800d076:	4828      	ldr	r0, [pc, #160]	@ (800d118 <udp_sendto_if+0xd8>)
 800d078:	f003 f844 	bl	8010104 <iprintf>
 800d07c:	f06f 030f 	mvn.w	r3, #15
 800d080:	e042      	b.n	800d108 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d109      	bne.n	800d09c <udp_sendto_if+0x5c>
 800d088:	4b21      	ldr	r3, [pc, #132]	@ (800d110 <udp_sendto_if+0xd0>)
 800d08a:	f240 2282 	movw	r2, #642	@ 0x282
 800d08e:	4924      	ldr	r1, [pc, #144]	@ (800d120 <udp_sendto_if+0xe0>)
 800d090:	4821      	ldr	r0, [pc, #132]	@ (800d118 <udp_sendto_if+0xd8>)
 800d092:	f003 f837 	bl	8010104 <iprintf>
 800d096:	f06f 030f 	mvn.w	r3, #15
 800d09a:	e035      	b.n	800d108 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d109      	bne.n	800d0b6 <udp_sendto_if+0x76>
 800d0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d110 <udp_sendto_if+0xd0>)
 800d0a4:	f240 2283 	movw	r2, #643	@ 0x283
 800d0a8:	491e      	ldr	r1, [pc, #120]	@ (800d124 <udp_sendto_if+0xe4>)
 800d0aa:	481b      	ldr	r0, [pc, #108]	@ (800d118 <udp_sendto_if+0xd8>)
 800d0ac:	f003 f82a 	bl	8010104 <iprintf>
 800d0b0:	f06f 030f 	mvn.w	r3, #15
 800d0b4:	e028      	b.n	800d108 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d009      	beq.n	800d0d0 <udp_sendto_if+0x90>
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d005      	beq.n	800d0d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d0cc:	2be0      	cmp	r3, #224	@ 0xe0
 800d0ce:	d103      	bne.n	800d0d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	617b      	str	r3, [r7, #20]
 800d0d6:	e00b      	b.n	800d0f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	6a3b      	ldr	r3, [r7, #32]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d002      	beq.n	800d0ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d0e6:	f06f 0303 	mvn.w	r3, #3
 800d0ea:	e00d      	b.n	800d108 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d0f0:	887a      	ldrh	r2, [r7, #2]
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f811 	bl	800d128 <udp_sendto_if_src>
 800d106:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	080133dc 	.word	0x080133dc
 800d114:	08013648 	.word	0x08013648
 800d118:	08013430 	.word	0x08013430
 800d11c:	08013664 	.word	0x08013664
 800d120:	08013680 	.word	0x08013680
 800d124:	080136a0 	.word	0x080136a0

0800d128 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b08c      	sub	sp, #48	@ 0x30
 800d12c:	af04      	add	r7, sp, #16
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d109      	bne.n	800d150 <udp_sendto_if_src+0x28>
 800d13c:	4b7a      	ldr	r3, [pc, #488]	@ (800d328 <udp_sendto_if_src+0x200>)
 800d13e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d142:	497a      	ldr	r1, [pc, #488]	@ (800d32c <udp_sendto_if_src+0x204>)
 800d144:	487a      	ldr	r0, [pc, #488]	@ (800d330 <udp_sendto_if_src+0x208>)
 800d146:	f002 ffdd 	bl	8010104 <iprintf>
 800d14a:	f06f 030f 	mvn.w	r3, #15
 800d14e:	e0e6      	b.n	800d31e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d109      	bne.n	800d16a <udp_sendto_if_src+0x42>
 800d156:	4b74      	ldr	r3, [pc, #464]	@ (800d328 <udp_sendto_if_src+0x200>)
 800d158:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800d15c:	4975      	ldr	r1, [pc, #468]	@ (800d334 <udp_sendto_if_src+0x20c>)
 800d15e:	4874      	ldr	r0, [pc, #464]	@ (800d330 <udp_sendto_if_src+0x208>)
 800d160:	f002 ffd0 	bl	8010104 <iprintf>
 800d164:	f06f 030f 	mvn.w	r3, #15
 800d168:	e0d9      	b.n	800d31e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d109      	bne.n	800d184 <udp_sendto_if_src+0x5c>
 800d170:	4b6d      	ldr	r3, [pc, #436]	@ (800d328 <udp_sendto_if_src+0x200>)
 800d172:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800d176:	4970      	ldr	r1, [pc, #448]	@ (800d338 <udp_sendto_if_src+0x210>)
 800d178:	486d      	ldr	r0, [pc, #436]	@ (800d330 <udp_sendto_if_src+0x208>)
 800d17a:	f002 ffc3 	bl	8010104 <iprintf>
 800d17e:	f06f 030f 	mvn.w	r3, #15
 800d182:	e0cc      	b.n	800d31e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	2b00      	cmp	r3, #0
 800d188:	d109      	bne.n	800d19e <udp_sendto_if_src+0x76>
 800d18a:	4b67      	ldr	r3, [pc, #412]	@ (800d328 <udp_sendto_if_src+0x200>)
 800d18c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800d190:	496a      	ldr	r1, [pc, #424]	@ (800d33c <udp_sendto_if_src+0x214>)
 800d192:	4867      	ldr	r0, [pc, #412]	@ (800d330 <udp_sendto_if_src+0x208>)
 800d194:	f002 ffb6 	bl	8010104 <iprintf>
 800d198:	f06f 030f 	mvn.w	r3, #15
 800d19c:	e0bf      	b.n	800d31e <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d109      	bne.n	800d1b8 <udp_sendto_if_src+0x90>
 800d1a4:	4b60      	ldr	r3, [pc, #384]	@ (800d328 <udp_sendto_if_src+0x200>)
 800d1a6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800d1aa:	4965      	ldr	r1, [pc, #404]	@ (800d340 <udp_sendto_if_src+0x218>)
 800d1ac:	4860      	ldr	r0, [pc, #384]	@ (800d330 <udp_sendto_if_src+0x208>)
 800d1ae:	f002 ffa9 	bl	8010104 <iprintf>
 800d1b2:	f06f 030f 	mvn.w	r3, #15
 800d1b6:	e0b2      	b.n	800d31e <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	8a5b      	ldrh	r3, [r3, #18]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d115      	bne.n	800d1ec <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 800d1c0:	4860      	ldr	r0, [pc, #384]	@ (800d344 <udp_sendto_if_src+0x21c>)
 800d1c2:	f003 f80f 	bl	80101e4 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d1c6:	68f9      	ldr	r1, [r7, #12]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	8a5b      	ldrh	r3, [r3, #18]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 f8cc 	bl	800d36c <udp_bind>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d1d8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d005      	beq.n	800d1ec <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 800d1e0:	4859      	ldr	r0, [pc, #356]	@ (800d348 <udp_sendto_if_src+0x220>)
 800d1e2:	f002 ffff 	bl	80101e4 <puts>
      return err;
 800d1e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1ea:	e098      	b.n	800d31e <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	891b      	ldrh	r3, [r3, #8]
 800d1f0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d902      	bls.n	800d1fe <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 800d1f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1fc:	e08f      	b.n	800d31e <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d1fe:	2108      	movs	r1, #8
 800d200:	68b8      	ldr	r0, [r7, #8]
 800d202:	f7f9 fe25 	bl	8006e50 <pbuf_add_header>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d01d      	beq.n	800d248 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d20c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d210:	2108      	movs	r1, #8
 800d212:	2022      	movs	r0, #34	@ 0x22
 800d214:	f7f9 fbce 	bl	80069b4 <pbuf_alloc>
 800d218:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d105      	bne.n	800d22c <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 800d220:	484a      	ldr	r0, [pc, #296]	@ (800d34c <udp_sendto_if_src+0x224>)
 800d222:	f002 ffdf 	bl	80101e4 <puts>
      return ERR_MEM;
 800d226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d22a:	e078      	b.n	800d31e <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	891b      	ldrh	r3, [r3, #8]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d003      	beq.n	800d23c <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d234:	68b9      	ldr	r1, [r7, #8]
 800d236:	69f8      	ldr	r0, [r7, #28]
 800d238:	f7f9 ffb8 	bl	80071ac <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	69f9      	ldr	r1, [r7, #28]
 800d240:	4843      	ldr	r0, [pc, #268]	@ (800d350 <udp_sendto_if_src+0x228>)
 800d242:	f002 ff5f 	bl	8010104 <iprintf>
 800d246:	e005      	b.n	800d254 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 800d24c:	68b9      	ldr	r1, [r7, #8]
 800d24e:	4841      	ldr	r0, [pc, #260]	@ (800d354 <udp_sendto_if_src+0x22c>)
 800d250:	f002 ff58 	bl	8010104 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	895b      	ldrh	r3, [r3, #10]
 800d258:	2b07      	cmp	r3, #7
 800d25a:	d806      	bhi.n	800d26a <udp_sendto_if_src+0x142>
 800d25c:	4b32      	ldr	r3, [pc, #200]	@ (800d328 <udp_sendto_if_src+0x200>)
 800d25e:	f240 320d 	movw	r2, #781	@ 0x30d
 800d262:	493d      	ldr	r1, [pc, #244]	@ (800d358 <udp_sendto_if_src+0x230>)
 800d264:	4832      	ldr	r0, [pc, #200]	@ (800d330 <udp_sendto_if_src+0x208>)
 800d266:	f002 ff4d 	bl	8010104 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	8a5b      	ldrh	r3, [r3, #18]
 800d274:	4618      	mov	r0, r3
 800d276:	f7f8 fa31 	bl	80056dc <lwip_htons>
 800d27a:	4603      	mov	r3, r0
 800d27c:	461a      	mov	r2, r3
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d282:	887b      	ldrh	r3, [r7, #2]
 800d284:	4618      	mov	r0, r3
 800d286:	f7f8 fa29 	bl	80056dc <lwip_htons>
 800d28a:	4603      	mov	r3, r0
 800d28c:	461a      	mov	r2, r3
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2200      	movs	r2, #0
 800d296:	719a      	strb	r2, [r3, #6]
 800d298:	2200      	movs	r2, #0
 800d29a:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	891b      	ldrh	r3, [r3, #8]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	482e      	ldr	r0, [pc, #184]	@ (800d35c <udp_sendto_if_src+0x234>)
 800d2a4:	f002 ff2e 	bl	8010104 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	891b      	ldrh	r3, [r3, #8]
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	482c      	ldr	r0, [pc, #176]	@ (800d360 <udp_sendto_if_src+0x238>)
 800d2b0:	f002 ff28 	bl	8010104 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	891b      	ldrh	r3, [r3, #8]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f8 fa0f 	bl	80056dc <lwip_htons>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d2c6:	2311      	movs	r3, #17
 800d2c8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	7adb      	ldrb	r3, [r3, #11]
 800d2ce:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	88db      	ldrh	r3, [r3, #6]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	4822      	ldr	r0, [pc, #136]	@ (800d364 <udp_sendto_if_src+0x23c>)
 800d2da:	f002 ff13 	bl	8010104 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 800d2de:	7cfb      	ldrb	r3, [r7, #19]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4821      	ldr	r0, [pc, #132]	@ (800d368 <udp_sendto_if_src+0x240>)
 800d2e4:	f002 ff0e 	bl	8010104 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	7a9b      	ldrb	r3, [r3, #10]
 800d2ec:	7cb9      	ldrb	r1, [r7, #18]
 800d2ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2f0:	9202      	str	r2, [sp, #8]
 800d2f2:	7cfa      	ldrb	r2, [r7, #19]
 800d2f4:	9201      	str	r2, [sp, #4]
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2fe:	69f8      	ldr	r0, [r7, #28]
 800d300:	f001 fd92 	bl	800ee28 <ip4_output_if_src>
 800d304:	4603      	mov	r3, r0
 800d306:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d308:	69fa      	ldr	r2, [r7, #28]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d004      	beq.n	800d31a <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 800d310:	69f8      	ldr	r0, [r7, #28]
 800d312:	f7f9 fe33 	bl	8006f7c <pbuf_free>
    q = NULL;
 800d316:	2300      	movs	r3, #0
 800d318:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d31a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3720      	adds	r7, #32
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	080133dc 	.word	0x080133dc
 800d32c:	080136c0 	.word	0x080136c0
 800d330:	08013430 	.word	0x08013430
 800d334:	080136e0 	.word	0x080136e0
 800d338:	08013700 	.word	0x08013700
 800d33c:	08013724 	.word	0x08013724
 800d340:	08013748 	.word	0x08013748
 800d344:	0801376c 	.word	0x0801376c
 800d348:	0801379c 	.word	0x0801379c
 800d34c:	080137c0 	.word	0x080137c0
 800d350:	080137e4 	.word	0x080137e4
 800d354:	0801381c 	.word	0x0801381c
 800d358:	08013848 	.word	0x08013848
 800d35c:	08013878 	.word	0x08013878
 800d360:	080138a4 	.word	0x080138a4
 800d364:	080138c8 	.word	0x080138c8
 800d368:	080138e8 	.word	0x080138e8

0800d36c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b088      	sub	sp, #32
 800d370:	af02      	add	r7, sp, #8
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	4613      	mov	r3, r2
 800d378:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d380:	4b65      	ldr	r3, [pc, #404]	@ (800d518 <udp_bind+0x1ac>)
 800d382:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d109      	bne.n	800d39e <udp_bind+0x32>
 800d38a:	4b64      	ldr	r3, [pc, #400]	@ (800d51c <udp_bind+0x1b0>)
 800d38c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800d390:	4963      	ldr	r1, [pc, #396]	@ (800d520 <udp_bind+0x1b4>)
 800d392:	4864      	ldr	r0, [pc, #400]	@ (800d524 <udp_bind+0x1b8>)
 800d394:	f002 feb6 	bl	8010104 <iprintf>
 800d398:	f06f 030f 	mvn.w	r3, #15
 800d39c:	e0b7      	b.n	800d50e <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 800d39e:	4862      	ldr	r0, [pc, #392]	@ (800d528 <udp_bind+0x1bc>)
 800d3a0:	f002 feb0 	bl	8010104 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <udp_bind+0x46>
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	e000      	b.n	800d3b4 <udp_bind+0x48>
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d004      	beq.n	800d3c4 <udp_bind+0x58>
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	e000      	b.n	800d3c6 <udp_bind+0x5a>
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d004      	beq.n	800d3d6 <udp_bind+0x6a>
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	3302      	adds	r3, #2
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	e000      	b.n	800d3d8 <udp_bind+0x6c>
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <udp_bind+0x7a>
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	3303      	adds	r3, #3
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	e000      	b.n	800d3e8 <udp_bind+0x7c>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	484f      	ldr	r0, [pc, #316]	@ (800d52c <udp_bind+0x1c0>)
 800d3ee:	f002 fe89 	bl	8010104 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 800d3f2:	88fb      	ldrh	r3, [r7, #6]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	484e      	ldr	r0, [pc, #312]	@ (800d530 <udp_bind+0x1c4>)
 800d3f8:	f002 fe84 	bl	8010104 <iprintf>

  rebind = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d400:	4b4c      	ldr	r3, [pc, #304]	@ (800d534 <udp_bind+0x1c8>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	617b      	str	r3, [r7, #20]
 800d406:	e009      	b.n	800d41c <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d102      	bne.n	800d416 <udp_bind+0xaa>
      rebind = 1;
 800d410:	2301      	movs	r3, #1
 800d412:	74fb      	strb	r3, [r7, #19]
      break;
 800d414:	e005      	b.n	800d422 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1f2      	bne.n	800d408 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d422:	88fb      	ldrh	r3, [r7, #6]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10c      	bne.n	800d442 <udp_bind+0xd6>
    port = udp_new_port();
 800d428:	f7ff fb14 	bl	800ca54 <udp_new_port>
 800d42c:	4603      	mov	r3, r0
 800d42e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d430:	88fb      	ldrh	r3, [r7, #6]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d134      	bne.n	800d4a0 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 800d436:	4840      	ldr	r0, [pc, #256]	@ (800d538 <udp_bind+0x1cc>)
 800d438:	f002 fed4 	bl	80101e4 <puts>
      return ERR_USE;
 800d43c:	f06f 0307 	mvn.w	r3, #7
 800d440:	e065      	b.n	800d50e <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d442:	4b3c      	ldr	r3, [pc, #240]	@ (800d534 <udp_bind+0x1c8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	617b      	str	r3, [r7, #20]
 800d448:	e027      	b.n	800d49a <udp_bind+0x12e>
      if (pcb != ipcb) {
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d020      	beq.n	800d494 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	8a5b      	ldrh	r3, [r3, #18]
 800d456:	88fa      	ldrh	r2, [r7, #6]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d11b      	bne.n	800d494 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d464:	429a      	cmp	r2, r3
 800d466:	d00d      	beq.n	800d484 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <udp_bind+0x118>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d006      	beq.n	800d484 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800d476:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d107      	bne.n	800d494 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 800d484:	88fb      	ldrh	r3, [r7, #6]
 800d486:	4619      	mov	r1, r3
 800d488:	482c      	ldr	r0, [pc, #176]	@ (800d53c <udp_bind+0x1d0>)
 800d48a:	f002 fe3b 	bl	8010104 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d48e:	f06f 0307 	mvn.w	r3, #7
 800d492:	e03c      	b.n	800d50e <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	617b      	str	r3, [r7, #20]
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1d4      	bne.n	800d44a <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <udp_bind+0x140>
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	e000      	b.n	800d4ae <udp_bind+0x142>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	88fa      	ldrh	r2, [r7, #6]
 800d4b6:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d4b8:	7cfb      	ldrb	r3, [r7, #19]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d4be:	4b1d      	ldr	r3, [pc, #116]	@ (800d534 <udp_bind+0x1c8>)
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d4c6:	4a1b      	ldr	r2, [pc, #108]	@ (800d534 <udp_bind+0x1c8>)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 800d4cc:	481c      	ldr	r0, [pc, #112]	@ (800d540 <udp_bind+0x1d4>)
 800d4ce:	f002 fe19 	bl	8010104 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	4619      	mov	r1, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	0a1b      	lsrs	r3, r3, #8
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	0c1b      	lsrs	r3, r3, #16
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	0e1b      	lsrs	r3, r3, #24
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	480c      	ldr	r0, [pc, #48]	@ (800d52c <udp_bind+0x1c0>)
 800d4fc:	f002 fe02 	bl	8010104 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	8a5b      	ldrh	r3, [r3, #18]
 800d504:	4619      	mov	r1, r3
 800d506:	480f      	ldr	r0, [pc, #60]	@ (800d544 <udp_bind+0x1d8>)
 800d508:	f002 fdfc 	bl	8010104 <iprintf>
  return ERR_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3718      	adds	r7, #24
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	08014588 	.word	0x08014588
 800d51c:	080133dc 	.word	0x080133dc
 800d520:	08013910 	.word	0x08013910
 800d524:	08013430 	.word	0x08013430
 800d528:	08013928 	.word	0x08013928
 800d52c:	08013520 	.word	0x08013520
 800d530:	0801393c 	.word	0x0801393c
 800d534:	20007d58 	.word	0x20007d58
 800d538:	0801394c 	.word	0x0801394c
 800d53c:	0801396c 	.word	0x0801396c
 800d540:	080139a4 	.word	0x080139a4
 800d544:	080139b8 	.word	0x080139b8

0800d548 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d107      	bne.n	800d56a <udp_recv+0x22>
 800d55a:	4b08      	ldr	r3, [pc, #32]	@ (800d57c <udp_recv+0x34>)
 800d55c:	f240 428a 	movw	r2, #1162	@ 0x48a
 800d560:	4907      	ldr	r1, [pc, #28]	@ (800d580 <udp_recv+0x38>)
 800d562:	4808      	ldr	r0, [pc, #32]	@ (800d584 <udp_recv+0x3c>)
 800d564:	f002 fdce 	bl	8010104 <iprintf>
 800d568:	e005      	b.n	800d576 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	61da      	str	r2, [r3, #28]
}
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	080133dc 	.word	0x080133dc
 800d580:	08013a38 	.word	0x08013a38
 800d584:	08013430 	.word	0x08013430

0800d588 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d107      	bne.n	800d5a6 <udp_remove+0x1e>
 800d596:	4b19      	ldr	r3, [pc, #100]	@ (800d5fc <udp_remove+0x74>)
 800d598:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800d59c:	4918      	ldr	r1, [pc, #96]	@ (800d600 <udp_remove+0x78>)
 800d59e:	4819      	ldr	r0, [pc, #100]	@ (800d604 <udp_remove+0x7c>)
 800d5a0:	f002 fdb0 	bl	8010104 <iprintf>
 800d5a4:	e026      	b.n	800d5f4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d5a6:	4b18      	ldr	r3, [pc, #96]	@ (800d608 <udp_remove+0x80>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d105      	bne.n	800d5bc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d5b0:	4b15      	ldr	r3, [pc, #84]	@ (800d608 <udp_remove+0x80>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	4a14      	ldr	r2, [pc, #80]	@ (800d608 <udp_remove+0x80>)
 800d5b8:	6013      	str	r3, [r2, #0]
 800d5ba:	e017      	b.n	800d5ec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d5bc:	4b12      	ldr	r3, [pc, #72]	@ (800d608 <udp_remove+0x80>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	e010      	b.n	800d5e6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d009      	beq.n	800d5e0 <udp_remove+0x58>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d104      	bne.n	800d5e0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68da      	ldr	r2, [r3, #12]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	60da      	str	r2, [r3, #12]
        break;
 800d5de:	e005      	b.n	800d5ec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1eb      	bne.n	800d5c4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d5ec:	6879      	ldr	r1, [r7, #4]
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	f7f8 fd58 	bl	80060a4 <memp_free>
}
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	080133dc 	.word	0x080133dc
 800d600:	08013a50 	.word	0x08013a50
 800d604:	08013430 	.word	0x08013430
 800d608:	20007d58 	.word	0x20007d58

0800d60c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d612:	2000      	movs	r0, #0
 800d614:	f7f8 fcd6 	bl	8005fc4 <memp_malloc>
 800d618:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d620:	2220      	movs	r2, #32
 800d622:	2100      	movs	r1, #0
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f002 fecd 	bl	80103c4 <memset>
    pcb->ttl = UDP_TTL;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	22ff      	movs	r2, #255	@ 0xff
 800d62e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d630:	687b      	ldr	r3, [r7, #4]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d01e      	beq.n	800d68a <udp_netif_ip_addr_changed+0x4e>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d01a      	beq.n	800d68a <udp_netif_ip_addr_changed+0x4e>
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d017      	beq.n	800d68a <udp_netif_ip_addr_changed+0x4e>
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d013      	beq.n	800d68a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d662:	4b0d      	ldr	r3, [pc, #52]	@ (800d698 <udp_netif_ip_addr_changed+0x5c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	60fb      	str	r3, [r7, #12]
 800d668:	e00c      	b.n	800d684 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	429a      	cmp	r2, r3
 800d674:	d103      	bne.n	800d67e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1ef      	bne.n	800d66a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	20007d58 	.word	0x20007d58

0800d69c <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 800d69c:	b590      	push	{r4, r7, lr}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 800d6a4:	481b      	ldr	r0, [pc, #108]	@ (800d714 <udp_debug_print+0x78>)
 800d6a6:	f002 fd9d 	bl	80101e4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800d6aa:	481b      	ldr	r0, [pc, #108]	@ (800d718 <udp_debug_print+0x7c>)
 800d6ac:	f002 fd9a 	bl	80101e4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7f8 f810 	bl	80056dc <lwip_htons>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	461c      	mov	r4, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	885b      	ldrh	r3, [r3, #2]
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f8 f808 	bl	80056dc <lwip_htons>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4812      	ldr	r0, [pc, #72]	@ (800d71c <udp_debug_print+0x80>)
 800d6d4:	f002 fd16 	bl	8010104 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800d6d8:	480f      	ldr	r0, [pc, #60]	@ (800d718 <udp_debug_print+0x7c>)
 800d6da:	f002 fd83 	bl	80101e4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	889b      	ldrh	r3, [r3, #4]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7f7 fff9 	bl	80056dc <lwip_htons>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	461c      	mov	r4, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	88db      	ldrh	r3, [r3, #6]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7f7 fff1 	bl	80056dc <lwip_htons>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	4621      	mov	r1, r4
 800d700:	4807      	ldr	r0, [pc, #28]	@ (800d720 <udp_debug_print+0x84>)
 800d702:	f002 fcff 	bl	8010104 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800d706:	4804      	ldr	r0, [pc, #16]	@ (800d718 <udp_debug_print+0x7c>)
 800d708:	f002 fd6c 	bl	80101e4 <puts>
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	bd90      	pop	{r4, r7, pc}
 800d714:	08013a68 	.word	0x08013a68
 800d718:	08013a74 	.word	0x08013a74
 800d71c:	08013a98 	.word	0x08013a98
 800d720:	08013ad0 	.word	0x08013ad0

0800d724 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d72c:	492b      	ldr	r1, [pc, #172]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	4613      	mov	r3, r2
 800d732:	005b      	lsls	r3, r3, #1
 800d734:	4413      	add	r3, r2
 800d736:	00db      	lsls	r3, r3, #3
 800d738:	440b      	add	r3, r1
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d013      	beq.n	800d768 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d740:	4926      	ldr	r1, [pc, #152]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	4613      	mov	r3, r2
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	4413      	add	r3, r2
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	440b      	add	r3, r1
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4618      	mov	r0, r3
 800d752:	f7f9 fc13 	bl	8006f7c <pbuf_free>
    arp_table[i].q = NULL;
 800d756:	4921      	ldr	r1, [pc, #132]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	4613      	mov	r3, r2
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	4413      	add	r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	440b      	add	r3, r1
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d768:	491c      	ldr	r1, [pc, #112]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	4613      	mov	r3, r2
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	4413      	add	r3, r2
 800d772:	00db      	lsls	r3, r3, #3
 800d774:	440b      	add	r3, r1
 800d776:	3314      	adds	r3, #20
 800d778:	2200      	movs	r2, #0
 800d77a:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800d77c:	4917      	ldr	r1, [pc, #92]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	4613      	mov	r3, r2
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	4413      	add	r3, r2
 800d786:	00db      	lsls	r3, r3, #3
 800d788:	440b      	add	r3, r1
 800d78a:	3312      	adds	r3, #18
 800d78c:	2200      	movs	r2, #0
 800d78e:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800d790:	4912      	ldr	r1, [pc, #72]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	4613      	mov	r3, r2
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	4413      	add	r3, r2
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	440b      	add	r3, r1
 800d79e:	3308      	adds	r3, #8
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800d7a4:	490d      	ldr	r1, [pc, #52]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4413      	add	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	440b      	add	r3, r1
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800d7b8:	4908      	ldr	r1, [pc, #32]	@ (800d7dc <etharp_free_entry+0xb8>)
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	005b      	lsls	r3, r3, #1
 800d7c0:	4413      	add	r3, r2
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	440b      	add	r3, r1
 800d7c6:	3308      	adds	r3, #8
 800d7c8:	4a05      	ldr	r2, [pc, #20]	@ (800d7e0 <etharp_free_entry+0xbc>)
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	6810      	ldr	r0, [r2, #0]
 800d7ce:	6018      	str	r0, [r3, #0]
 800d7d0:	8892      	ldrh	r2, [r2, #4]
 800d7d2:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20007d5c 	.word	0x20007d5c
 800d7e0:	08014594 	.word	0x08014594

0800d7e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	e096      	b.n	800d91e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d7f0:	494f      	ldr	r1, [pc, #316]	@ (800d930 <etharp_tmr+0x14c>)
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	3314      	adds	r3, #20
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 8086 	beq.w	800d918 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d80c:	4948      	ldr	r1, [pc, #288]	@ (800d930 <etharp_tmr+0x14c>)
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	4613      	mov	r3, r2
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	4413      	add	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	440b      	add	r3, r1
 800d81a:	3312      	adds	r3, #18
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	3301      	adds	r3, #1
 800d820:	b298      	uxth	r0, r3
 800d822:	4943      	ldr	r1, [pc, #268]	@ (800d930 <etharp_tmr+0x14c>)
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	4413      	add	r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	440b      	add	r3, r1
 800d830:	3312      	adds	r3, #18
 800d832:	4602      	mov	r2, r0
 800d834:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d836:	493e      	ldr	r1, [pc, #248]	@ (800d930 <etharp_tmr+0x14c>)
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	4613      	mov	r3, r2
 800d83c:	005b      	lsls	r3, r3, #1
 800d83e:	4413      	add	r3, r2
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	440b      	add	r3, r1
 800d844:	3312      	adds	r3, #18
 800d846:	881b      	ldrh	r3, [r3, #0]
 800d848:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d84c:	d215      	bcs.n	800d87a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d84e:	4938      	ldr	r1, [pc, #224]	@ (800d930 <etharp_tmr+0x14c>)
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	4613      	mov	r3, r2
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	4413      	add	r3, r2
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	440b      	add	r3, r1
 800d85c:	3314      	adds	r3, #20
 800d85e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d860:	2b01      	cmp	r3, #1
 800d862:	d10e      	bne.n	800d882 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d864:	4932      	ldr	r1, [pc, #200]	@ (800d930 <etharp_tmr+0x14c>)
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	4613      	mov	r3, r2
 800d86a:	005b      	lsls	r3, r3, #1
 800d86c:	4413      	add	r3, r2
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	440b      	add	r3, r1
 800d872:	3312      	adds	r3, #18
 800d874:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d876:	2b04      	cmp	r3, #4
 800d878:	d903      	bls.n	800d882 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7ff ff52 	bl	800d724 <etharp_free_entry>
 800d880:	e04a      	b.n	800d918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d882:	492b      	ldr	r1, [pc, #172]	@ (800d930 <etharp_tmr+0x14c>)
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	4613      	mov	r3, r2
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	4413      	add	r3, r2
 800d88c:	00db      	lsls	r3, r3, #3
 800d88e:	440b      	add	r3, r1
 800d890:	3314      	adds	r3, #20
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	2b03      	cmp	r3, #3
 800d896:	d10a      	bne.n	800d8ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d898:	4925      	ldr	r1, [pc, #148]	@ (800d930 <etharp_tmr+0x14c>)
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	4613      	mov	r3, r2
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	4413      	add	r3, r2
 800d8a2:	00db      	lsls	r3, r3, #3
 800d8a4:	440b      	add	r3, r1
 800d8a6:	3314      	adds	r3, #20
 800d8a8:	2204      	movs	r2, #4
 800d8aa:	701a      	strb	r2, [r3, #0]
 800d8ac:	e034      	b.n	800d918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d8ae:	4920      	ldr	r1, [pc, #128]	@ (800d930 <etharp_tmr+0x14c>)
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	4413      	add	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	440b      	add	r3, r1
 800d8bc:	3314      	adds	r3, #20
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b04      	cmp	r3, #4
 800d8c2:	d10a      	bne.n	800d8da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d8c4:	491a      	ldr	r1, [pc, #104]	@ (800d930 <etharp_tmr+0x14c>)
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	005b      	lsls	r3, r3, #1
 800d8cc:	4413      	add	r3, r2
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	440b      	add	r3, r1
 800d8d2:	3314      	adds	r3, #20
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	701a      	strb	r2, [r3, #0]
 800d8d8:	e01e      	b.n	800d918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d8da:	4915      	ldr	r1, [pc, #84]	@ (800d930 <etharp_tmr+0x14c>)
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	4413      	add	r3, r2
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	440b      	add	r3, r1
 800d8e8:	3314      	adds	r3, #20
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d113      	bne.n	800d918 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d8f0:	490f      	ldr	r1, [pc, #60]	@ (800d930 <etharp_tmr+0x14c>)
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	4413      	add	r3, r2
 800d8fa:	00db      	lsls	r3, r3, #3
 800d8fc:	440b      	add	r3, r1
 800d8fe:	3308      	adds	r3, #8
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	4613      	mov	r3, r2
 800d906:	005b      	lsls	r3, r3, #1
 800d908:	4413      	add	r3, r2
 800d90a:	00db      	lsls	r3, r3, #3
 800d90c:	4a08      	ldr	r2, [pc, #32]	@ (800d930 <etharp_tmr+0x14c>)
 800d90e:	4413      	add	r3, r2
 800d910:	3304      	adds	r3, #4
 800d912:	4619      	mov	r1, r3
 800d914:	f000 fe6e 	bl	800e5f4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	3301      	adds	r3, #1
 800d91c:	607b      	str	r3, [r7, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2b09      	cmp	r3, #9
 800d922:	f77f af65 	ble.w	800d7f0 <etharp_tmr+0xc>
      }
    }
  }
}
 800d926:	bf00      	nop
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	20007d5c 	.word	0x20007d5c

0800d934 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08a      	sub	sp, #40	@ 0x28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	460b      	mov	r3, r1
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d942:	230a      	movs	r3, #10
 800d944:	843b      	strh	r3, [r7, #32]
 800d946:	230a      	movs	r3, #10
 800d948:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800d94a:	230a      	movs	r3, #10
 800d94c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d952:	230a      	movs	r3, #10
 800d954:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	83bb      	strh	r3, [r7, #28]
 800d95a:	2300      	movs	r3, #0
 800d95c:	837b      	strh	r3, [r7, #26]
 800d95e:	2300      	movs	r3, #0
 800d960:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d962:	2300      	movs	r3, #0
 800d964:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d966:	e0ae      	b.n	800dac6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d968:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800d96c:	49a6      	ldr	r1, [pc, #664]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800d96e:	4613      	mov	r3, r2
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	4413      	add	r3, r2
 800d974:	00db      	lsls	r3, r3, #3
 800d976:	440b      	add	r3, r1
 800d978:	3314      	adds	r3, #20
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d97e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d982:	2b0a      	cmp	r3, #10
 800d984:	d105      	bne.n	800d992 <etharp_find_entry+0x5e>
 800d986:	7dfb      	ldrb	r3, [r7, #23]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d98c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d98e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d990:	e095      	b.n	800dabe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8092 	beq.w	800dabe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d99a:	7dfb      	ldrb	r3, [r7, #23]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d009      	beq.n	800d9b4 <etharp_find_entry+0x80>
 800d9a0:	7dfb      	ldrb	r3, [r7, #23]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d806      	bhi.n	800d9b4 <etharp_find_entry+0x80>
 800d9a6:	4b99      	ldr	r3, [pc, #612]	@ (800dc0c <etharp_find_entry+0x2d8>)
 800d9a8:	f240 1223 	movw	r2, #291	@ 0x123
 800d9ac:	4998      	ldr	r1, [pc, #608]	@ (800dc10 <etharp_find_entry+0x2dc>)
 800d9ae:	4899      	ldr	r0, [pc, #612]	@ (800dc14 <etharp_find_entry+0x2e0>)
 800d9b0:	f002 fba8 	bl	8010104 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d020      	beq.n	800d9fc <etharp_find_entry+0xc8>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6819      	ldr	r1, [r3, #0]
 800d9be:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800d9c2:	4891      	ldr	r0, [pc, #580]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	005b      	lsls	r3, r3, #1
 800d9c8:	4413      	add	r3, r2
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	4403      	add	r3, r0
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4299      	cmp	r1, r3
 800d9d4:	d112      	bne.n	800d9fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00c      	beq.n	800d9f6 <etharp_find_entry+0xc2>
 800d9dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800d9e0:	4989      	ldr	r1, [pc, #548]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	440b      	add	r3, r1
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d102      	bne.n	800d9fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d9f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d9fa:	e100      	b.n	800dbfe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d140      	bne.n	800da84 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800da02:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800da06:	4980      	ldr	r1, [pc, #512]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800da08:	4613      	mov	r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	4413      	add	r3, r2
 800da0e:	00db      	lsls	r3, r3, #3
 800da10:	440b      	add	r3, r1
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d01a      	beq.n	800da4e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800da18:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800da1c:	497a      	ldr	r1, [pc, #488]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800da1e:	4613      	mov	r3, r2
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	4413      	add	r3, r2
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	440b      	add	r3, r1
 800da28:	3312      	adds	r3, #18
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	8bba      	ldrh	r2, [r7, #28]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d845      	bhi.n	800dabe <etharp_find_entry+0x18a>
            old_queue = i;
 800da32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da34:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800da36:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800da3a:	4973      	ldr	r1, [pc, #460]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800da3c:	4613      	mov	r3, r2
 800da3e:	005b      	lsls	r3, r3, #1
 800da40:	4413      	add	r3, r2
 800da42:	00db      	lsls	r3, r3, #3
 800da44:	440b      	add	r3, r1
 800da46:	3312      	adds	r3, #18
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	83bb      	strh	r3, [r7, #28]
 800da4c:	e037      	b.n	800dabe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800da4e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800da52:	496d      	ldr	r1, [pc, #436]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800da54:	4613      	mov	r3, r2
 800da56:	005b      	lsls	r3, r3, #1
 800da58:	4413      	add	r3, r2
 800da5a:	00db      	lsls	r3, r3, #3
 800da5c:	440b      	add	r3, r1
 800da5e:	3312      	adds	r3, #18
 800da60:	881b      	ldrh	r3, [r3, #0]
 800da62:	8b7a      	ldrh	r2, [r7, #26]
 800da64:	429a      	cmp	r2, r3
 800da66:	d82a      	bhi.n	800dabe <etharp_find_entry+0x18a>
            old_pending = i;
 800da68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da6a:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800da6c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800da70:	4965      	ldr	r1, [pc, #404]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800da72:	4613      	mov	r3, r2
 800da74:	005b      	lsls	r3, r3, #1
 800da76:	4413      	add	r3, r2
 800da78:	00db      	lsls	r3, r3, #3
 800da7a:	440b      	add	r3, r1
 800da7c:	3312      	adds	r3, #18
 800da7e:	881b      	ldrh	r3, [r3, #0]
 800da80:	837b      	strh	r3, [r7, #26]
 800da82:	e01c      	b.n	800dabe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800da84:	7dfb      	ldrb	r3, [r7, #23]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d919      	bls.n	800dabe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800da8a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800da8e:	495e      	ldr	r1, [pc, #376]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800da90:	4613      	mov	r3, r2
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	4413      	add	r3, r2
 800da96:	00db      	lsls	r3, r3, #3
 800da98:	440b      	add	r3, r1
 800da9a:	3312      	adds	r3, #18
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	8b3a      	ldrh	r2, [r7, #24]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d80c      	bhi.n	800dabe <etharp_find_entry+0x18a>
            old_stable = i;
 800daa4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800daa6:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 800daa8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800daac:	4956      	ldr	r1, [pc, #344]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800daae:	4613      	mov	r3, r2
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	4413      	add	r3, r2
 800dab4:	00db      	lsls	r3, r3, #3
 800dab6:	440b      	add	r3, r1
 800dab8:	3312      	adds	r3, #18
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dabe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dac0:	3301      	adds	r3, #1
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dac6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800daca:	2b09      	cmp	r3, #9
 800dacc:	f77f af4c 	ble.w	800d968 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dad0:	7afb      	ldrb	r3, [r7, #11]
 800dad2:	f003 0302 	and.w	r3, r3, #2
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d108      	bne.n	800daec <etharp_find_entry+0x1b8>
 800dada:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800dade:	2b0a      	cmp	r3, #10
 800dae0:	d107      	bne.n	800daf2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dae2:	7afb      	ldrb	r3, [r7, #11]
 800dae4:	f003 0301 	and.w	r3, r3, #1
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800daec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800daf0:	e085      	b.n	800dbfe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800daf2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800daf6:	2b09      	cmp	r3, #9
 800daf8:	dc02      	bgt.n	800db00 <etharp_find_entry+0x1cc>
    i = empty;
 800dafa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dafc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dafe:	e039      	b.n	800db74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800db00:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800db04:	2b09      	cmp	r3, #9
 800db06:	dc14      	bgt.n	800db32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800db08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800db0c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800db10:	493d      	ldr	r1, [pc, #244]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800db12:	4613      	mov	r3, r2
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	4413      	add	r3, r2
 800db18:	00db      	lsls	r3, r3, #3
 800db1a:	440b      	add	r3, r1
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d018      	beq.n	800db54 <etharp_find_entry+0x220>
 800db22:	4b3a      	ldr	r3, [pc, #232]	@ (800dc0c <etharp_find_entry+0x2d8>)
 800db24:	f240 126d 	movw	r2, #365	@ 0x16d
 800db28:	493b      	ldr	r1, [pc, #236]	@ (800dc18 <etharp_find_entry+0x2e4>)
 800db2a:	483a      	ldr	r0, [pc, #232]	@ (800dc14 <etharp_find_entry+0x2e0>)
 800db2c:	f002 faea 	bl	8010104 <iprintf>
 800db30:	e010      	b.n	800db54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800db32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800db36:	2b09      	cmp	r3, #9
 800db38:	dc02      	bgt.n	800db40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800db3a:	8c3b      	ldrh	r3, [r7, #32]
 800db3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800db3e:	e009      	b.n	800db54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800db40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800db44:	2b09      	cmp	r3, #9
 800db46:	dc02      	bgt.n	800db4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800db48:	8bfb      	ldrh	r3, [r7, #30]
 800db4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800db4c:	e002      	b.n	800db54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800db4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db52:	e054      	b.n	800dbfe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800db54:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800db58:	2b09      	cmp	r3, #9
 800db5a:	dd06      	ble.n	800db6a <etharp_find_entry+0x236>
 800db5c:	4b2b      	ldr	r3, [pc, #172]	@ (800dc0c <etharp_find_entry+0x2d8>)
 800db5e:	f240 127f 	movw	r2, #383	@ 0x17f
 800db62:	492e      	ldr	r1, [pc, #184]	@ (800dc1c <etharp_find_entry+0x2e8>)
 800db64:	482b      	ldr	r0, [pc, #172]	@ (800dc14 <etharp_find_entry+0x2e0>)
 800db66:	f002 facd 	bl	8010104 <iprintf>
    etharp_free_entry(i);
 800db6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fdd8 	bl	800d724 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800db74:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800db78:	2b09      	cmp	r3, #9
 800db7a:	dd06      	ble.n	800db8a <etharp_find_entry+0x256>
 800db7c:	4b23      	ldr	r3, [pc, #140]	@ (800dc0c <etharp_find_entry+0x2d8>)
 800db7e:	f240 1283 	movw	r2, #387	@ 0x183
 800db82:	4926      	ldr	r1, [pc, #152]	@ (800dc1c <etharp_find_entry+0x2e8>)
 800db84:	4823      	ldr	r0, [pc, #140]	@ (800dc14 <etharp_find_entry+0x2e0>)
 800db86:	f002 fabd 	bl	8010104 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800db8a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800db8e:	491e      	ldr	r1, [pc, #120]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800db90:	4613      	mov	r3, r2
 800db92:	005b      	lsls	r3, r3, #1
 800db94:	4413      	add	r3, r2
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	440b      	add	r3, r1
 800db9a:	3314      	adds	r3, #20
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d006      	beq.n	800dbb0 <etharp_find_entry+0x27c>
 800dba2:	4b1a      	ldr	r3, [pc, #104]	@ (800dc0c <etharp_find_entry+0x2d8>)
 800dba4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800dba8:	491d      	ldr	r1, [pc, #116]	@ (800dc20 <etharp_find_entry+0x2ec>)
 800dbaa:	481a      	ldr	r0, [pc, #104]	@ (800dc14 <etharp_find_entry+0x2e0>)
 800dbac:	f002 faaa 	bl	8010104 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00b      	beq.n	800dbce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dbb6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6819      	ldr	r1, [r3, #0]
 800dbbe:	4812      	ldr	r0, [pc, #72]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	4403      	add	r3, r0
 800dbca:	3304      	adds	r3, #4
 800dbcc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dbce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800dbd2:	490d      	ldr	r1, [pc, #52]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	4413      	add	r3, r2
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	440b      	add	r3, r1
 800dbde:	3312      	adds	r3, #18
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800dbe4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800dbe8:	4907      	ldr	r1, [pc, #28]	@ (800dc08 <etharp_find_entry+0x2d4>)
 800dbea:	4613      	mov	r3, r2
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	4413      	add	r3, r2
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	440b      	add	r3, r1
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800dbfa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3728      	adds	r7, #40	@ 0x28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	20007d5c 	.word	0x20007d5c
 800dc0c:	08013b04 	.word	0x08013b04
 800dc10:	08013b3c 	.word	0x08013b3c
 800dc14:	08013b7c 	.word	0x08013b7c
 800dc18:	08013ba4 	.word	0x08013ba4
 800dc1c:	08013bbc 	.word	0x08013bbc
 800dc20:	08013bd0 	.word	0x08013bd0

0800dc24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af02      	add	r7, sp, #8
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dc38:	2b06      	cmp	r3, #6
 800dc3a:	d006      	beq.n	800dc4a <etharp_update_arp_entry+0x26>
 800dc3c:	4b48      	ldr	r3, [pc, #288]	@ (800dd60 <etharp_update_arp_entry+0x13c>)
 800dc3e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800dc42:	4948      	ldr	r1, [pc, #288]	@ (800dd64 <etharp_update_arp_entry+0x140>)
 800dc44:	4848      	ldr	r0, [pc, #288]	@ (800dd68 <etharp_update_arp_entry+0x144>)
 800dc46:	f002 fa5d 	bl	8010104 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d012      	beq.n	800dc76 <etharp_update_arp_entry+0x52>
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00e      	beq.n	800dc76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	68f9      	ldr	r1, [r7, #12]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f001 f990 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800dc64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d105      	bne.n	800dc76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dc72:	2be0      	cmp	r3, #224	@ 0xe0
 800dc74:	d102      	bne.n	800dc7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dc76:	f06f 030f 	mvn.w	r3, #15
 800dc7a:	e06c      	b.n	800dd56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dc7c:	78fb      	ldrb	r3, [r7, #3]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	4619      	mov	r1, r3
 800dc82:	68b8      	ldr	r0, [r7, #8]
 800dc84:	f7ff fe56 	bl	800d934 <etharp_find_entry>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dc8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	da02      	bge.n	800dc9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dc94:	8afb      	ldrh	r3, [r7, #22]
 800dc96:	b25b      	sxtb	r3, r3
 800dc98:	e05d      	b.n	800dd56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dc9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc9e:	4933      	ldr	r1, [pc, #204]	@ (800dd6c <etharp_update_arp_entry+0x148>)
 800dca0:	4613      	mov	r3, r2
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	4413      	add	r3, r2
 800dca6:	00db      	lsls	r3, r3, #3
 800dca8:	440b      	add	r3, r1
 800dcaa:	3314      	adds	r3, #20
 800dcac:	2202      	movs	r2, #2
 800dcae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dcb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dcb4:	492d      	ldr	r1, [pc, #180]	@ (800dd6c <etharp_update_arp_entry+0x148>)
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	4413      	add	r3, r2
 800dcbc:	00db      	lsls	r3, r3, #3
 800dcbe:	440b      	add	r3, r1
 800dcc0:	3308      	adds	r3, #8
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dcc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dcca:	4613      	mov	r3, r2
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	4413      	add	r3, r2
 800dcd0:	00db      	lsls	r3, r3, #3
 800dcd2:	3308      	adds	r3, #8
 800dcd4:	4a25      	ldr	r2, [pc, #148]	@ (800dd6c <etharp_update_arp_entry+0x148>)
 800dcd6:	4413      	add	r3, r2
 800dcd8:	3304      	adds	r3, #4
 800dcda:	2206      	movs	r2, #6
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f002 fbe5 	bl	80104ae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dce4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dce8:	4920      	ldr	r1, [pc, #128]	@ (800dd6c <etharp_update_arp_entry+0x148>)
 800dcea:	4613      	mov	r3, r2
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	4413      	add	r3, r2
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	440b      	add	r3, r1
 800dcf4:	3312      	adds	r3, #18
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dcfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dcfe:	491b      	ldr	r1, [pc, #108]	@ (800dd6c <etharp_update_arp_entry+0x148>)
 800dd00:	4613      	mov	r3, r2
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	4413      	add	r3, r2
 800dd06:	00db      	lsls	r3, r3, #3
 800dd08:	440b      	add	r3, r1
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d021      	beq.n	800dd54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dd10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd14:	4915      	ldr	r1, [pc, #84]	@ (800dd6c <etharp_update_arp_entry+0x148>)
 800dd16:	4613      	mov	r3, r2
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	4413      	add	r3, r2
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	440b      	add	r3, r1
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800dd24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd28:	4910      	ldr	r1, [pc, #64]	@ (800dd6c <etharp_update_arp_entry+0x148>)
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	4413      	add	r3, r2
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	440b      	add	r3, r1
 800dd34:	2200      	movs	r2, #0
 800dd36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800dd3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6939      	ldr	r1, [r7, #16]
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f002 f829 	bl	800fda0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800dd4e:	6938      	ldr	r0, [r7, #16]
 800dd50:	f7f9 f914 	bl	8006f7c <pbuf_free>
  }
  return ERR_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	08013b04 	.word	0x08013b04
 800dd64:	08013bfc 	.word	0x08013bfc
 800dd68:	08013b7c 	.word	0x08013b7c
 800dd6c:	20007d5c 	.word	0x20007d5c

0800dd70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd78:	2300      	movs	r3, #0
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e01e      	b.n	800ddbc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dd7e:	4913      	ldr	r1, [pc, #76]	@ (800ddcc <etharp_cleanup_netif+0x5c>)
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	4613      	mov	r3, r2
 800dd84:	005b      	lsls	r3, r3, #1
 800dd86:	4413      	add	r3, r2
 800dd88:	00db      	lsls	r3, r3, #3
 800dd8a:	440b      	add	r3, r1
 800dd8c:	3314      	adds	r3, #20
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dd92:	7afb      	ldrb	r3, [r7, #11]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00e      	beq.n	800ddb6 <etharp_cleanup_netif+0x46>
 800dd98:	490c      	ldr	r1, [pc, #48]	@ (800ddcc <etharp_cleanup_netif+0x5c>)
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	4413      	add	r3, r2
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	440b      	add	r3, r1
 800dda6:	3308      	adds	r3, #8
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d102      	bne.n	800ddb6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f7ff fcb7 	bl	800d724 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b09      	cmp	r3, #9
 800ddc0:	dddd      	ble.n	800dd7e <etharp_cleanup_netif+0xe>
    }
  }
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	20007d5c 	.word	0x20007d5c

0800ddd0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ddd0:	b5b0      	push	{r4, r5, r7, lr}
 800ddd2:	b08a      	sub	sp, #40	@ 0x28
 800ddd4:	af04      	add	r7, sp, #16
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d107      	bne.n	800ddf0 <etharp_input+0x20>
 800dde0:	4b3d      	ldr	r3, [pc, #244]	@ (800ded8 <etharp_input+0x108>)
 800dde2:	f240 228a 	movw	r2, #650	@ 0x28a
 800dde6:	493d      	ldr	r1, [pc, #244]	@ (800dedc <etharp_input+0x10c>)
 800dde8:	483d      	ldr	r0, [pc, #244]	@ (800dee0 <etharp_input+0x110>)
 800ddea:	f002 f98b 	bl	8010104 <iprintf>
 800ddee:	e06f      	b.n	800ded0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	881b      	ldrh	r3, [r3, #0]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de00:	d10c      	bne.n	800de1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800de06:	2b06      	cmp	r3, #6
 800de08:	d108      	bne.n	800de1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800de0e:	2b04      	cmp	r3, #4
 800de10:	d104      	bne.n	800de1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800de18:	2b08      	cmp	r3, #8
 800de1a:	d003      	beq.n	800de24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7f9 f8ad 	bl	8006f7c <pbuf_free>
    return;
 800de22:	e055      	b.n	800ded0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	330e      	adds	r3, #14
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	3318      	adds	r3, #24
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	3304      	adds	r3, #4
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d102      	bne.n	800de44 <etharp_input+0x74>
    for_us = 0;
 800de3e:	2300      	movs	r3, #0
 800de40:	74fb      	strb	r3, [r7, #19]
 800de42:	e009      	b.n	800de58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	3304      	adds	r3, #4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	bf0c      	ite	eq
 800de50:	2301      	moveq	r3, #1
 800de52:	2300      	movne	r3, #0
 800de54:	b2db      	uxtb	r3, r3
 800de56:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	f103 0208 	add.w	r2, r3, #8
 800de5e:	7cfb      	ldrb	r3, [r7, #19]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <etharp_input+0x98>
 800de64:	2301      	movs	r3, #1
 800de66:	e000      	b.n	800de6a <etharp_input+0x9a>
 800de68:	2302      	movs	r3, #2
 800de6a:	f107 010c 	add.w	r1, r7, #12
 800de6e:	6838      	ldr	r0, [r7, #0]
 800de70:	f7ff fed8 	bl	800dc24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	88db      	ldrh	r3, [r3, #6]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de7e:	d003      	beq.n	800de88 <etharp_input+0xb8>
 800de80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de84:	d01e      	beq.n	800dec4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800de86:	e020      	b.n	800deca <etharp_input+0xfa>
      if (for_us) {
 800de88:	7cfb      	ldrb	r3, [r7, #19]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d01c      	beq.n	800dec8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dea8:	2102      	movs	r1, #2
 800deaa:	9103      	str	r1, [sp, #12]
 800deac:	f107 010c 	add.w	r1, r7, #12
 800deb0:	9102      	str	r1, [sp, #8]
 800deb2:	9201      	str	r2, [sp, #4]
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	462b      	mov	r3, r5
 800deb8:	4622      	mov	r2, r4
 800deba:	4601      	mov	r1, r0
 800debc:	6838      	ldr	r0, [r7, #0]
 800debe:	f000 faeb 	bl	800e498 <etharp_raw>
      break;
 800dec2:	e001      	b.n	800dec8 <etharp_input+0xf8>
      break;
 800dec4:	bf00      	nop
 800dec6:	e000      	b.n	800deca <etharp_input+0xfa>
      break;
 800dec8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7f9 f856 	bl	8006f7c <pbuf_free>
}
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bdb0      	pop	{r4, r5, r7, pc}
 800ded6:	bf00      	nop
 800ded8:	08013b04 	.word	0x08013b04
 800dedc:	08013c54 	.word	0x08013c54
 800dee0:	08013b7c 	.word	0x08013b7c

0800dee4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af02      	add	r7, sp, #8
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	4613      	mov	r3, r2
 800def0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800def2:	79fa      	ldrb	r2, [r7, #7]
 800def4:	4944      	ldr	r1, [pc, #272]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800def6:	4613      	mov	r3, r2
 800def8:	005b      	lsls	r3, r3, #1
 800defa:	4413      	add	r3, r2
 800defc:	00db      	lsls	r3, r3, #3
 800defe:	440b      	add	r3, r1
 800df00:	3314      	adds	r3, #20
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d806      	bhi.n	800df16 <etharp_output_to_arp_index+0x32>
 800df08:	4b40      	ldr	r3, [pc, #256]	@ (800e00c <etharp_output_to_arp_index+0x128>)
 800df0a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800df0e:	4940      	ldr	r1, [pc, #256]	@ (800e010 <etharp_output_to_arp_index+0x12c>)
 800df10:	4840      	ldr	r0, [pc, #256]	@ (800e014 <etharp_output_to_arp_index+0x130>)
 800df12:	f002 f8f7 	bl	8010104 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800df16:	79fa      	ldrb	r2, [r7, #7]
 800df18:	493b      	ldr	r1, [pc, #236]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800df1a:	4613      	mov	r3, r2
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	4413      	add	r3, r2
 800df20:	00db      	lsls	r3, r3, #3
 800df22:	440b      	add	r3, r1
 800df24:	3314      	adds	r3, #20
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d153      	bne.n	800dfd4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800df2c:	79fa      	ldrb	r2, [r7, #7]
 800df2e:	4936      	ldr	r1, [pc, #216]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800df30:	4613      	mov	r3, r2
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	4413      	add	r3, r2
 800df36:	00db      	lsls	r3, r3, #3
 800df38:	440b      	add	r3, r1
 800df3a:	3312      	adds	r3, #18
 800df3c:	881b      	ldrh	r3, [r3, #0]
 800df3e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800df42:	d919      	bls.n	800df78 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800df44:	79fa      	ldrb	r2, [r7, #7]
 800df46:	4613      	mov	r3, r2
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	4413      	add	r3, r2
 800df4c:	00db      	lsls	r3, r3, #3
 800df4e:	4a2e      	ldr	r2, [pc, #184]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800df50:	4413      	add	r3, r2
 800df52:	3304      	adds	r3, #4
 800df54:	4619      	mov	r1, r3
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f000 fb4c 	bl	800e5f4 <etharp_request>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d138      	bne.n	800dfd4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800df62:	79fa      	ldrb	r2, [r7, #7]
 800df64:	4928      	ldr	r1, [pc, #160]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800df66:	4613      	mov	r3, r2
 800df68:	005b      	lsls	r3, r3, #1
 800df6a:	4413      	add	r3, r2
 800df6c:	00db      	lsls	r3, r3, #3
 800df6e:	440b      	add	r3, r1
 800df70:	3314      	adds	r3, #20
 800df72:	2203      	movs	r2, #3
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e02d      	b.n	800dfd4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800df78:	79fa      	ldrb	r2, [r7, #7]
 800df7a:	4923      	ldr	r1, [pc, #140]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800df7c:	4613      	mov	r3, r2
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	4413      	add	r3, r2
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	440b      	add	r3, r1
 800df86:	3312      	adds	r3, #18
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800df8e:	d321      	bcc.n	800dfd4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800df90:	79fa      	ldrb	r2, [r7, #7]
 800df92:	4613      	mov	r3, r2
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	4413      	add	r3, r2
 800df98:	00db      	lsls	r3, r3, #3
 800df9a:	4a1b      	ldr	r2, [pc, #108]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800df9c:	4413      	add	r3, r2
 800df9e:	1d19      	adds	r1, r3, #4
 800dfa0:	79fa      	ldrb	r2, [r7, #7]
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	4413      	add	r3, r2
 800dfa8:	00db      	lsls	r3, r3, #3
 800dfaa:	3308      	adds	r3, #8
 800dfac:	4a16      	ldr	r2, [pc, #88]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800dfae:	4413      	add	r3, r2
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f000 fafb 	bl	800e5b0 <etharp_request_dst>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d109      	bne.n	800dfd4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dfc0:	79fa      	ldrb	r2, [r7, #7]
 800dfc2:	4911      	ldr	r1, [pc, #68]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	4413      	add	r3, r2
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	440b      	add	r3, r1
 800dfce:	3314      	adds	r3, #20
 800dfd0:	2203      	movs	r2, #3
 800dfd2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800dfda:	79fa      	ldrb	r2, [r7, #7]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	005b      	lsls	r3, r3, #1
 800dfe0:	4413      	add	r3, r2
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	3308      	adds	r3, #8
 800dfe6:	4a08      	ldr	r2, [pc, #32]	@ (800e008 <etharp_output_to_arp_index+0x124>)
 800dfe8:	4413      	add	r3, r2
 800dfea:	3304      	adds	r3, #4
 800dfec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dff0:	9200      	str	r2, [sp, #0]
 800dff2:	460a      	mov	r2, r1
 800dff4:	68b9      	ldr	r1, [r7, #8]
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f001 fed2 	bl	800fda0 <ethernet_output>
 800dffc:	4603      	mov	r3, r0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20007d5c 	.word	0x20007d5c
 800e00c:	08013b04 	.word	0x08013b04
 800e010:	08013c74 	.word	0x08013c74
 800e014:	08013b7c 	.word	0x08013b7c

0800e018 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b08a      	sub	sp, #40	@ 0x28
 800e01c:	af02      	add	r7, sp, #8
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d106      	bne.n	800e03c <etharp_output+0x24>
 800e02e:	4b73      	ldr	r3, [pc, #460]	@ (800e1fc <etharp_output+0x1e4>)
 800e030:	f240 321e 	movw	r2, #798	@ 0x31e
 800e034:	4972      	ldr	r1, [pc, #456]	@ (800e200 <etharp_output+0x1e8>)
 800e036:	4873      	ldr	r0, [pc, #460]	@ (800e204 <etharp_output+0x1ec>)
 800e038:	f002 f864 	bl	8010104 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d106      	bne.n	800e050 <etharp_output+0x38>
 800e042:	4b6e      	ldr	r3, [pc, #440]	@ (800e1fc <etharp_output+0x1e4>)
 800e044:	f240 321f 	movw	r2, #799	@ 0x31f
 800e048:	496f      	ldr	r1, [pc, #444]	@ (800e208 <etharp_output+0x1f0>)
 800e04a:	486e      	ldr	r0, [pc, #440]	@ (800e204 <etharp_output+0x1ec>)
 800e04c:	f002 f85a 	bl	8010104 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d106      	bne.n	800e064 <etharp_output+0x4c>
 800e056:	4b69      	ldr	r3, [pc, #420]	@ (800e1fc <etharp_output+0x1e4>)
 800e058:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e05c:	496b      	ldr	r1, [pc, #428]	@ (800e20c <etharp_output+0x1f4>)
 800e05e:	4869      	ldr	r0, [pc, #420]	@ (800e204 <etharp_output+0x1ec>)
 800e060:	f002 f850 	bl	8010104 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68f9      	ldr	r1, [r7, #12]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 ff8a 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e076:	4b66      	ldr	r3, [pc, #408]	@ (800e210 <etharp_output+0x1f8>)
 800e078:	61fb      	str	r3, [r7, #28]
 800e07a:	e0af      	b.n	800e1dc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e084:	2be0      	cmp	r3, #224	@ 0xe0
 800e086:	d118      	bne.n	800e0ba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e088:	2301      	movs	r3, #1
 800e08a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e08c:	2300      	movs	r3, #0
 800e08e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e090:	235e      	movs	r3, #94	@ 0x5e
 800e092:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3301      	adds	r3, #1
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	3302      	adds	r3, #2
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	3303      	adds	r3, #3
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e0b2:	f107 0310 	add.w	r3, r7, #16
 800e0b6:	61fb      	str	r3, [r7, #28]
 800e0b8:	e090      	b.n	800e1dc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3304      	adds	r3, #4
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	405a      	eors	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d012      	beq.n	800e0f8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e0d8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d00b      	beq.n	800e0f8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	330c      	adds	r3, #12
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	330c      	adds	r3, #12
 800e0ee:	61bb      	str	r3, [r7, #24]
 800e0f0:	e002      	b.n	800e0f8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e0f2:	f06f 0303 	mvn.w	r3, #3
 800e0f6:	e07d      	b.n	800e1f4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e0f8:	4b46      	ldr	r3, [pc, #280]	@ (800e214 <etharp_output+0x1fc>)
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	4a46      	ldr	r2, [pc, #280]	@ (800e218 <etharp_output+0x200>)
 800e100:	460b      	mov	r3, r1
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	440b      	add	r3, r1
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	4413      	add	r3, r2
 800e10a:	3314      	adds	r3, #20
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d925      	bls.n	800e15e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e112:	4b40      	ldr	r3, [pc, #256]	@ (800e214 <etharp_output+0x1fc>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	4619      	mov	r1, r3
 800e118:	4a3f      	ldr	r2, [pc, #252]	@ (800e218 <etharp_output+0x200>)
 800e11a:	460b      	mov	r3, r1
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	440b      	add	r3, r1
 800e120:	00db      	lsls	r3, r3, #3
 800e122:	4413      	add	r3, r2
 800e124:	3308      	adds	r3, #8
 800e126:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d117      	bne.n	800e15e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	4b38      	ldr	r3, [pc, #224]	@ (800e214 <etharp_output+0x1fc>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	4618      	mov	r0, r3
 800e138:	4937      	ldr	r1, [pc, #220]	@ (800e218 <etharp_output+0x200>)
 800e13a:	4603      	mov	r3, r0
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	4403      	add	r3, r0
 800e140:	00db      	lsls	r3, r3, #3
 800e142:	440b      	add	r3, r1
 800e144:	3304      	adds	r3, #4
 800e146:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e148:	429a      	cmp	r2, r3
 800e14a:	d108      	bne.n	800e15e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e14c:	4b31      	ldr	r3, [pc, #196]	@ (800e214 <etharp_output+0x1fc>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	461a      	mov	r2, r3
 800e152:	68b9      	ldr	r1, [r7, #8]
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f7ff fec5 	bl	800dee4 <etharp_output_to_arp_index>
 800e15a:	4603      	mov	r3, r0
 800e15c:	e04a      	b.n	800e1f4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e15e:	2300      	movs	r3, #0
 800e160:	75fb      	strb	r3, [r7, #23]
 800e162:	e031      	b.n	800e1c8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e164:	7dfa      	ldrb	r2, [r7, #23]
 800e166:	492c      	ldr	r1, [pc, #176]	@ (800e218 <etharp_output+0x200>)
 800e168:	4613      	mov	r3, r2
 800e16a:	005b      	lsls	r3, r3, #1
 800e16c:	4413      	add	r3, r2
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	440b      	add	r3, r1
 800e172:	3314      	adds	r3, #20
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	2b01      	cmp	r3, #1
 800e178:	d923      	bls.n	800e1c2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e17a:	7dfa      	ldrb	r2, [r7, #23]
 800e17c:	4926      	ldr	r1, [pc, #152]	@ (800e218 <etharp_output+0x200>)
 800e17e:	4613      	mov	r3, r2
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	4413      	add	r3, r2
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	440b      	add	r3, r1
 800e188:	3308      	adds	r3, #8
 800e18a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d117      	bne.n	800e1c2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	6819      	ldr	r1, [r3, #0]
 800e196:	7dfa      	ldrb	r2, [r7, #23]
 800e198:	481f      	ldr	r0, [pc, #124]	@ (800e218 <etharp_output+0x200>)
 800e19a:	4613      	mov	r3, r2
 800e19c:	005b      	lsls	r3, r3, #1
 800e19e:	4413      	add	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	4403      	add	r3, r0
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e1a8:	4299      	cmp	r1, r3
 800e1aa:	d10a      	bne.n	800e1c2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e1ac:	4a19      	ldr	r2, [pc, #100]	@ (800e214 <etharp_output+0x1fc>)
 800e1ae:	7dfb      	ldrb	r3, [r7, #23]
 800e1b0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e1b2:	7dfb      	ldrb	r3, [r7, #23]
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f7ff fe93 	bl	800dee4 <etharp_output_to_arp_index>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	e018      	b.n	800e1f4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e1c2:	7dfb      	ldrb	r3, [r7, #23]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	75fb      	strb	r3, [r7, #23]
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	2b09      	cmp	r3, #9
 800e1cc:	d9ca      	bls.n	800e164 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	69b9      	ldr	r1, [r7, #24]
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f000 f822 	bl	800e21c <etharp_query>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	e00b      	b.n	800e1f4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e1e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	68b9      	ldr	r1, [r7, #8]
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f001 fdd7 	bl	800fda0 <ethernet_output>
 800e1f2:	4603      	mov	r3, r0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3720      	adds	r7, #32
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	08013b04 	.word	0x08013b04
 800e200:	08013c54 	.word	0x08013c54
 800e204:	08013b7c 	.word	0x08013b7c
 800e208:	08013ca4 	.word	0x08013ca4
 800e20c:	08013c44 	.word	0x08013c44
 800e210:	0801458c 	.word	0x0801458c
 800e214:	20007e4c 	.word	0x20007e4c
 800e218:	20007d5c 	.word	0x20007d5c

0800e21c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08c      	sub	sp, #48	@ 0x30
 800e220:	af02      	add	r7, sp, #8
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3326      	adds	r3, #38	@ 0x26
 800e22c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e22e:	23ff      	movs	r3, #255	@ 0xff
 800e230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68f9      	ldr	r1, [r7, #12]
 800e23e:	4618      	mov	r0, r3
 800e240:	f000 fea0 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d10c      	bne.n	800e264 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e252:	2be0      	cmp	r3, #224	@ 0xe0
 800e254:	d006      	beq.n	800e264 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d102      	bne.n	800e26a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e264:	f06f 030f 	mvn.w	r3, #15
 800e268:	e101      	b.n	800e46e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	2101      	movs	r1, #1
 800e26e:	68b8      	ldr	r0, [r7, #8]
 800e270:	f7ff fb60 	bl	800d934 <etharp_find_entry>
 800e274:	4603      	mov	r3, r0
 800e276:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e278:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	da02      	bge.n	800e286 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e280:	8a7b      	ldrh	r3, [r7, #18]
 800e282:	b25b      	sxtb	r3, r3
 800e284:	e0f3      	b.n	800e46e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e286:	8a7b      	ldrh	r3, [r7, #18]
 800e288:	2b7e      	cmp	r3, #126	@ 0x7e
 800e28a:	d906      	bls.n	800e29a <etharp_query+0x7e>
 800e28c:	4b7a      	ldr	r3, [pc, #488]	@ (800e478 <etharp_query+0x25c>)
 800e28e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e292:	497a      	ldr	r1, [pc, #488]	@ (800e47c <etharp_query+0x260>)
 800e294:	487a      	ldr	r0, [pc, #488]	@ (800e480 <etharp_query+0x264>)
 800e296:	f001 ff35 	bl	8010104 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e29a:	8a7b      	ldrh	r3, [r7, #18]
 800e29c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e29e:	7c7a      	ldrb	r2, [r7, #17]
 800e2a0:	4978      	ldr	r1, [pc, #480]	@ (800e484 <etharp_query+0x268>)
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	005b      	lsls	r3, r3, #1
 800e2a6:	4413      	add	r3, r2
 800e2a8:	00db      	lsls	r3, r3, #3
 800e2aa:	440b      	add	r3, r1
 800e2ac:	3314      	adds	r3, #20
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d115      	bne.n	800e2e0 <etharp_query+0xc4>
    is_new_entry = 1;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e2b8:	7c7a      	ldrb	r2, [r7, #17]
 800e2ba:	4972      	ldr	r1, [pc, #456]	@ (800e484 <etharp_query+0x268>)
 800e2bc:	4613      	mov	r3, r2
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	4413      	add	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	440b      	add	r3, r1
 800e2c6:	3314      	adds	r3, #20
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e2cc:	7c7a      	ldrb	r2, [r7, #17]
 800e2ce:	496d      	ldr	r1, [pc, #436]	@ (800e484 <etharp_query+0x268>)
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	4413      	add	r3, r2
 800e2d6:	00db      	lsls	r3, r3, #3
 800e2d8:	440b      	add	r3, r1
 800e2da:	3308      	adds	r3, #8
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e2e0:	7c7a      	ldrb	r2, [r7, #17]
 800e2e2:	4968      	ldr	r1, [pc, #416]	@ (800e484 <etharp_query+0x268>)
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	4413      	add	r3, r2
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	440b      	add	r3, r1
 800e2ee:	3314      	adds	r3, #20
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d011      	beq.n	800e31a <etharp_query+0xfe>
 800e2f6:	7c7a      	ldrb	r2, [r7, #17]
 800e2f8:	4962      	ldr	r1, [pc, #392]	@ (800e484 <etharp_query+0x268>)
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	005b      	lsls	r3, r3, #1
 800e2fe:	4413      	add	r3, r2
 800e300:	00db      	lsls	r3, r3, #3
 800e302:	440b      	add	r3, r1
 800e304:	3314      	adds	r3, #20
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d806      	bhi.n	800e31a <etharp_query+0xfe>
 800e30c:	4b5a      	ldr	r3, [pc, #360]	@ (800e478 <etharp_query+0x25c>)
 800e30e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e312:	495d      	ldr	r1, [pc, #372]	@ (800e488 <etharp_query+0x26c>)
 800e314:	485a      	ldr	r0, [pc, #360]	@ (800e480 <etharp_query+0x264>)
 800e316:	f001 fef5 	bl	8010104 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d102      	bne.n	800e326 <etharp_query+0x10a>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10c      	bne.n	800e340 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 f963 	bl	800e5f4 <etharp_request>
 800e32e:	4603      	mov	r3, r0
 800e330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d102      	bne.n	800e340 <etharp_query+0x124>
      return result;
 800e33a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e33e:	e096      	b.n	800e46e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <etharp_query+0x138>
 800e346:	4b4c      	ldr	r3, [pc, #304]	@ (800e478 <etharp_query+0x25c>)
 800e348:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e34c:	494f      	ldr	r1, [pc, #316]	@ (800e48c <etharp_query+0x270>)
 800e34e:	484c      	ldr	r0, [pc, #304]	@ (800e480 <etharp_query+0x264>)
 800e350:	f001 fed8 	bl	8010104 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e354:	7c7a      	ldrb	r2, [r7, #17]
 800e356:	494b      	ldr	r1, [pc, #300]	@ (800e484 <etharp_query+0x268>)
 800e358:	4613      	mov	r3, r2
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	4413      	add	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	440b      	add	r3, r1
 800e362:	3314      	adds	r3, #20
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d917      	bls.n	800e39a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e36a:	4a49      	ldr	r2, [pc, #292]	@ (800e490 <etharp_query+0x274>)
 800e36c:	7c7b      	ldrb	r3, [r7, #17]
 800e36e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e370:	7c7a      	ldrb	r2, [r7, #17]
 800e372:	4613      	mov	r3, r2
 800e374:	005b      	lsls	r3, r3, #1
 800e376:	4413      	add	r3, r2
 800e378:	00db      	lsls	r3, r3, #3
 800e37a:	3308      	adds	r3, #8
 800e37c:	4a41      	ldr	r2, [pc, #260]	@ (800e484 <etharp_query+0x268>)
 800e37e:	4413      	add	r3, r2
 800e380:	3304      	adds	r3, #4
 800e382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e386:	9200      	str	r2, [sp, #0]
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	6879      	ldr	r1, [r7, #4]
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f001 fd07 	bl	800fda0 <ethernet_output>
 800e392:	4603      	mov	r3, r0
 800e394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e398:	e067      	b.n	800e46a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e39a:	7c7a      	ldrb	r2, [r7, #17]
 800e39c:	4939      	ldr	r1, [pc, #228]	@ (800e484 <etharp_query+0x268>)
 800e39e:	4613      	mov	r3, r2
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	4413      	add	r3, r2
 800e3a4:	00db      	lsls	r3, r3, #3
 800e3a6:	440b      	add	r3, r1
 800e3a8:	3314      	adds	r3, #20
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d15c      	bne.n	800e46a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e3b8:	e01c      	b.n	800e3f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	895a      	ldrh	r2, [r3, #10]
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	891b      	ldrh	r3, [r3, #8]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d10a      	bne.n	800e3dc <etharp_query+0x1c0>
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d006      	beq.n	800e3dc <etharp_query+0x1c0>
 800e3ce:	4b2a      	ldr	r3, [pc, #168]	@ (800e478 <etharp_query+0x25c>)
 800e3d0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e3d4:	492f      	ldr	r1, [pc, #188]	@ (800e494 <etharp_query+0x278>)
 800e3d6:	482a      	ldr	r0, [pc, #168]	@ (800e480 <etharp_query+0x264>)
 800e3d8:	f001 fe94 	bl	8010104 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	7b1b      	ldrb	r3, [r3, #12]
 800e3e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <etharp_query+0x1d2>
        copy_needed = 1;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	61bb      	str	r3, [r7, #24]
        break;
 800e3ec:	e005      	b.n	800e3fa <etharp_query+0x1de>
      }
      p = p->next;
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1df      	bne.n	800e3ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d007      	beq.n	800e410 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e406:	200e      	movs	r0, #14
 800e408:	f7f9 f824 	bl	8007454 <pbuf_clone>
 800e40c:	61f8      	str	r0, [r7, #28]
 800e40e:	e004      	b.n	800e41a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e414:	69f8      	ldr	r0, [r7, #28]
 800e416:	f7f8 fe51 	bl	80070bc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d021      	beq.n	800e464 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e420:	7c7a      	ldrb	r2, [r7, #17]
 800e422:	4918      	ldr	r1, [pc, #96]	@ (800e484 <etharp_query+0x268>)
 800e424:	4613      	mov	r3, r2
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	4413      	add	r3, r2
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	440b      	add	r3, r1
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00a      	beq.n	800e44a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e434:	7c7a      	ldrb	r2, [r7, #17]
 800e436:	4913      	ldr	r1, [pc, #76]	@ (800e484 <etharp_query+0x268>)
 800e438:	4613      	mov	r3, r2
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	4413      	add	r3, r2
 800e43e:	00db      	lsls	r3, r3, #3
 800e440:	440b      	add	r3, r1
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4618      	mov	r0, r3
 800e446:	f7f8 fd99 	bl	8006f7c <pbuf_free>
      }
      arp_table[i].q = p;
 800e44a:	7c7a      	ldrb	r2, [r7, #17]
 800e44c:	490d      	ldr	r1, [pc, #52]	@ (800e484 <etharp_query+0x268>)
 800e44e:	4613      	mov	r3, r2
 800e450:	005b      	lsls	r3, r3, #1
 800e452:	4413      	add	r3, r2
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	440b      	add	r3, r1
 800e458:	69fa      	ldr	r2, [r7, #28]
 800e45a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e462:	e002      	b.n	800e46a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e464:	23ff      	movs	r3, #255	@ 0xff
 800e466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e46a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3728      	adds	r7, #40	@ 0x28
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	08013b04 	.word	0x08013b04
 800e47c:	08013cb0 	.word	0x08013cb0
 800e480:	08013b7c 	.word	0x08013b7c
 800e484:	20007d5c 	.word	0x20007d5c
 800e488:	08013cc0 	.word	0x08013cc0
 800e48c:	08013ca4 	.word	0x08013ca4
 800e490:	20007e4c 	.word	0x20007e4c
 800e494:	08013ce8 	.word	0x08013ce8

0800e498 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08a      	sub	sp, #40	@ 0x28
 800e49c:	af02      	add	r7, sp, #8
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d106      	bne.n	800e4be <etharp_raw+0x26>
 800e4b0:	4b3a      	ldr	r3, [pc, #232]	@ (800e59c <etharp_raw+0x104>)
 800e4b2:	f240 4257 	movw	r2, #1111	@ 0x457
 800e4b6:	493a      	ldr	r1, [pc, #232]	@ (800e5a0 <etharp_raw+0x108>)
 800e4b8:	483a      	ldr	r0, [pc, #232]	@ (800e5a4 <etharp_raw+0x10c>)
 800e4ba:	f001 fe23 	bl	8010104 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e4be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e4c2:	211c      	movs	r1, #28
 800e4c4:	200e      	movs	r0, #14
 800e4c6:	f7f8 fa75 	bl	80069b4 <pbuf_alloc>
 800e4ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e4d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4d6:	e05d      	b.n	800e594 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	895b      	ldrh	r3, [r3, #10]
 800e4dc:	2b1b      	cmp	r3, #27
 800e4de:	d806      	bhi.n	800e4ee <etharp_raw+0x56>
 800e4e0:	4b2e      	ldr	r3, [pc, #184]	@ (800e59c <etharp_raw+0x104>)
 800e4e2:	f240 4262 	movw	r2, #1122	@ 0x462
 800e4e6:	4930      	ldr	r1, [pc, #192]	@ (800e5a8 <etharp_raw+0x110>)
 800e4e8:	482e      	ldr	r0, [pc, #184]	@ (800e5a4 <etharp_raw+0x10c>)
 800e4ea:	f001 fe0b 	bl	8010104 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e4f4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7f7 f8f0 	bl	80056dc <lwip_htons>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	461a      	mov	r2, r3
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e50a:	2b06      	cmp	r3, #6
 800e50c:	d006      	beq.n	800e51c <etharp_raw+0x84>
 800e50e:	4b23      	ldr	r3, [pc, #140]	@ (800e59c <etharp_raw+0x104>)
 800e510:	f240 4269 	movw	r2, #1129	@ 0x469
 800e514:	4925      	ldr	r1, [pc, #148]	@ (800e5ac <etharp_raw+0x114>)
 800e516:	4823      	ldr	r0, [pc, #140]	@ (800e5a4 <etharp_raw+0x10c>)
 800e518:	f001 fdf4 	bl	8010104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	3308      	adds	r3, #8
 800e520:	2206      	movs	r2, #6
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	4618      	mov	r0, r3
 800e526:	f001 ffc2 	bl	80104ae <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	3312      	adds	r3, #18
 800e52e:	2206      	movs	r2, #6
 800e530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e532:	4618      	mov	r0, r3
 800e534:	f001 ffbb 	bl	80104ae <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	330e      	adds	r3, #14
 800e53c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e53e:	6812      	ldr	r2, [r2, #0]
 800e540:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	3318      	adds	r3, #24
 800e546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e548:	6812      	ldr	r2, [r2, #0]
 800e54a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	2200      	movs	r2, #0
 800e550:	701a      	strb	r2, [r3, #0]
 800e552:	2200      	movs	r2, #0
 800e554:	f042 0201 	orr.w	r2, r2, #1
 800e558:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f042 0208 	orr.w	r2, r2, #8
 800e562:	709a      	strb	r2, [r3, #2]
 800e564:	2200      	movs	r2, #0
 800e566:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	2206      	movs	r2, #6
 800e56c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	2204      	movs	r2, #4
 800e572:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e574:	f640 0306 	movw	r3, #2054	@ 0x806
 800e578:	9300      	str	r3, [sp, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	69b9      	ldr	r1, [r7, #24]
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f001 fc0d 	bl	800fda0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e586:	69b8      	ldr	r0, [r7, #24]
 800e588:	f7f8 fcf8 	bl	8006f7c <pbuf_free>
  p = NULL;
 800e58c:	2300      	movs	r3, #0
 800e58e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e590:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3720      	adds	r7, #32
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	08013b04 	.word	0x08013b04
 800e5a0:	08013c54 	.word	0x08013c54
 800e5a4:	08013b7c 	.word	0x08013b7c
 800e5a8:	08013d04 	.word	0x08013d04
 800e5ac:	08013d38 	.word	0x08013d38

0800e5b0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af04      	add	r7, sp, #16
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	9203      	str	r2, [sp, #12]
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	9202      	str	r2, [sp, #8]
 800e5d4:	4a06      	ldr	r2, [pc, #24]	@ (800e5f0 <etharp_request_dst+0x40>)
 800e5d6:	9201      	str	r2, [sp, #4]
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	4603      	mov	r3, r0
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	68f8      	ldr	r0, [r7, #12]
 800e5e0:	f7ff ff5a 	bl	800e498 <etharp_raw>
 800e5e4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3710      	adds	r7, #16
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	08014594 	.word	0x08014594

0800e5f4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e5fe:	4a05      	ldr	r2, [pc, #20]	@ (800e614 <etharp_request+0x20>)
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7ff ffd4 	bl	800e5b0 <etharp_request_dst>
 800e608:	4603      	mov	r3, r0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	0801458c 	.word	0x0801458c

0800e618 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08e      	sub	sp, #56	@ 0x38
 800e61c:	af04      	add	r7, sp, #16
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e622:	4b95      	ldr	r3, [pc, #596]	@ (800e878 <icmp_input+0x260>)
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	f003 030f 	and.w	r3, r3, #15
 800e630:	b2db      	uxtb	r3, r3
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	b2db      	uxtb	r3, r3
 800e636:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800e638:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e63a:	2b13      	cmp	r3, #19
 800e63c:	d805      	bhi.n	800e64a <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 800e63e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e640:	4619      	mov	r1, r3
 800e642:	488e      	ldr	r0, [pc, #568]	@ (800e87c <icmp_input+0x264>)
 800e644:	f001 fd5e 	bl	8010104 <iprintf>
    goto lenerr;
 800e648:	e10a      	b.n	800e860 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	895b      	ldrh	r3, [r3, #10]
 800e64e:	2b03      	cmp	r3, #3
 800e650:	d806      	bhi.n	800e660 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	891b      	ldrh	r3, [r3, #8]
 800e656:	4619      	mov	r1, r3
 800e658:	4889      	ldr	r0, [pc, #548]	@ (800e880 <icmp_input+0x268>)
 800e65a:	f001 fd53 	bl	8010104 <iprintf>
    goto lenerr;
 800e65e:	e0ff      	b.n	800e860 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	785b      	ldrb	r3, [r3, #1]
 800e670:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e674:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 80ea 	beq.w	800e852 <icmp_input+0x23a>
 800e67e:	2b08      	cmp	r3, #8
 800e680:	f040 80de 	bne.w	800e840 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e684:	4b7f      	ldr	r3, [pc, #508]	@ (800e884 <icmp_input+0x26c>)
 800e686:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e688:	4b7b      	ldr	r3, [pc, #492]	@ (800e878 <icmp_input+0x260>)
 800e68a:	695b      	ldr	r3, [r3, #20]
 800e68c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e690:	2be0      	cmp	r3, #224	@ 0xe0
 800e692:	d103      	bne.n	800e69c <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 800e694:	487c      	ldr	r0, [pc, #496]	@ (800e888 <icmp_input+0x270>)
 800e696:	f001 fda5 	bl	80101e4 <puts>
        goto icmperr;
 800e69a:	e0e5      	b.n	800e868 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e69c:	4b76      	ldr	r3, [pc, #472]	@ (800e878 <icmp_input+0x260>)
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	4a75      	ldr	r2, [pc, #468]	@ (800e878 <icmp_input+0x260>)
 800e6a2:	6812      	ldr	r2, [r2, #0]
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f000 fc6c 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d003      	beq.n	800e6ba <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 800e6b2:	4876      	ldr	r0, [pc, #472]	@ (800e88c <icmp_input+0x274>)
 800e6b4:	f001 fd96 	bl	80101e4 <puts>
        goto icmperr;
 800e6b8:	e0d6      	b.n	800e868 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 800e6ba:	4875      	ldr	r0, [pc, #468]	@ (800e890 <icmp_input+0x278>)
 800e6bc:	f001 fd92 	bl	80101e4 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	891b      	ldrh	r3, [r3, #8]
 800e6c4:	2b07      	cmp	r3, #7
 800e6c6:	d803      	bhi.n	800e6d0 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 800e6c8:	4872      	ldr	r0, [pc, #456]	@ (800e894 <icmp_input+0x27c>)
 800e6ca:	f001 fd8b 	bl	80101e4 <puts>
        goto lenerr;
 800e6ce:	e0c7      	b.n	800e860 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e6d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e6d2:	330e      	adds	r3, #14
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7f8 fbba 	bl	8006e50 <pbuf_add_header>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d057      	beq.n	800e792 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	891a      	ldrh	r2, [r3, #8]
 800e6e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e6e8:	4413      	add	r3, r2
 800e6ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	891b      	ldrh	r3, [r3, #8]
 800e6f0:	8b7a      	ldrh	r2, [r7, #26]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d203      	bcs.n	800e6fe <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 800e6f6:	4868      	ldr	r0, [pc, #416]	@ (800e898 <icmp_input+0x280>)
 800e6f8:	f001 fd74 	bl	80101e4 <puts>
          goto icmperr;
 800e6fc:	e0b4      	b.n	800e868 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e6fe:	8b7b      	ldrh	r3, [r7, #26]
 800e700:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e704:	4619      	mov	r1, r3
 800e706:	200e      	movs	r0, #14
 800e708:	f7f8 f954 	bl	80069b4 <pbuf_alloc>
 800e70c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d103      	bne.n	800e71c <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 800e714:	4861      	ldr	r0, [pc, #388]	@ (800e89c <icmp_input+0x284>)
 800e716:	f001 fd65 	bl	80101e4 <puts>
          goto icmperr;
 800e71a:	e0a5      	b.n	800e868 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	895b      	ldrh	r3, [r3, #10]
 800e720:	461a      	mov	r2, r3
 800e722:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e724:	3308      	adds	r3, #8
 800e726:	429a      	cmp	r2, r3
 800e728:	d206      	bcs.n	800e738 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 800e72a:	485d      	ldr	r0, [pc, #372]	@ (800e8a0 <icmp_input+0x288>)
 800e72c:	f001 fcea 	bl	8010104 <iprintf>
          pbuf_free(r);
 800e730:	6978      	ldr	r0, [r7, #20]
 800e732:	f7f8 fc23 	bl	8006f7c <pbuf_free>
          goto icmperr;
 800e736:	e097      	b.n	800e868 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e73e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e740:	4618      	mov	r0, r3
 800e742:	f001 feb4 	bl	80104ae <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e746:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e748:	4619      	mov	r1, r3
 800e74a:	6978      	ldr	r0, [r7, #20]
 800e74c:	f7f8 fb90 	bl	8006e70 <pbuf_remove_header>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d009      	beq.n	800e76a <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e756:	4b53      	ldr	r3, [pc, #332]	@ (800e8a4 <icmp_input+0x28c>)
 800e758:	22b6      	movs	r2, #182	@ 0xb6
 800e75a:	4953      	ldr	r1, [pc, #332]	@ (800e8a8 <icmp_input+0x290>)
 800e75c:	4853      	ldr	r0, [pc, #332]	@ (800e8ac <icmp_input+0x294>)
 800e75e:	f001 fcd1 	bl	8010104 <iprintf>
          pbuf_free(r);
 800e762:	6978      	ldr	r0, [r7, #20]
 800e764:	f7f8 fc0a 	bl	8006f7c <pbuf_free>
          goto icmperr;
 800e768:	e07e      	b.n	800e868 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e76a:	6879      	ldr	r1, [r7, #4]
 800e76c:	6978      	ldr	r0, [r7, #20]
 800e76e:	f7f8 fd2d 	bl	80071cc <pbuf_copy>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d006      	beq.n	800e786 <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 800e778:	484d      	ldr	r0, [pc, #308]	@ (800e8b0 <icmp_input+0x298>)
 800e77a:	f001 fcc3 	bl	8010104 <iprintf>
          pbuf_free(r);
 800e77e:	6978      	ldr	r0, [r7, #20]
 800e780:	f7f8 fbfc 	bl	8006f7c <pbuf_free>
          goto icmperr;
 800e784:	e070      	b.n	800e868 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7f8 fbf8 	bl	8006f7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	607b      	str	r3, [r7, #4]
 800e790:	e00f      	b.n	800e7b2 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e792:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e794:	330e      	adds	r3, #14
 800e796:	4619      	mov	r1, r3
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7f8 fb69 	bl	8006e70 <pbuf_remove_header>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d006      	beq.n	800e7b2 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e7a4:	4b3f      	ldr	r3, [pc, #252]	@ (800e8a4 <icmp_input+0x28c>)
 800e7a6:	22c7      	movs	r2, #199	@ 0xc7
 800e7a8:	4942      	ldr	r1, [pc, #264]	@ (800e8b4 <icmp_input+0x29c>)
 800e7aa:	4840      	ldr	r0, [pc, #256]	@ (800e8ac <icmp_input+0x294>)
 800e7ac:	f001 fcaa 	bl	8010104 <iprintf>
          goto icmperr;
 800e7b0:	e05a      	b.n	800e868 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e7b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7f8 fb47 	bl	8006e50 <pbuf_add_header>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d003      	beq.n	800e7d0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 800e7c8:	483b      	ldr	r0, [pc, #236]	@ (800e8b8 <icmp_input+0x2a0>)
 800e7ca:	f001 fc9b 	bl	8010104 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e7ce:	e042      	b.n	800e856 <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e7de:	4b26      	ldr	r3, [pc, #152]	@ (800e878 <icmp_input+0x260>)
 800e7e0:	691a      	ldr	r2, [r3, #16]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	709a      	strb	r2, [r3, #2]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	22ff      	movs	r2, #255	@ 0xff
 800e7fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	729a      	strb	r2, [r3, #10]
 800e802:	2200      	movs	r2, #0
 800e804:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	9302      	str	r3, [sp, #8]
 800e80a:	2301      	movs	r3, #1
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	2300      	movs	r3, #0
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	23ff      	movs	r3, #255	@ 0xff
 800e814:	2200      	movs	r2, #0
 800e816:	69f9      	ldr	r1, [r7, #28]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 fadb 	bl	800edd4 <ip4_output_if>
 800e81e:	4603      	mov	r3, r0
 800e820:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 800e822:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d015      	beq.n	800e856 <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 800e82a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e82e:	4618      	mov	r0, r3
 800e830:	f7f6 ff34 	bl	800569c <lwip_strerr>
 800e834:	4603      	mov	r3, r0
 800e836:	4619      	mov	r1, r3
 800e838:	4820      	ldr	r0, [pc, #128]	@ (800e8bc <icmp_input+0x2a4>)
 800e83a:	f001 fc63 	bl	8010104 <iprintf>
      break;
 800e83e:	e00a      	b.n	800e856 <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 800e840:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e844:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e848:	4619      	mov	r1, r3
 800e84a:	481d      	ldr	r0, [pc, #116]	@ (800e8c0 <icmp_input+0x2a8>)
 800e84c:	f001 fc5a 	bl	8010104 <iprintf>
 800e850:	e002      	b.n	800e858 <icmp_input+0x240>
      break;
 800e852:	bf00      	nop
 800e854:	e000      	b.n	800e858 <icmp_input+0x240>
      break;
 800e856:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7f8 fb8f 	bl	8006f7c <pbuf_free>
  return;
 800e85e:	e007      	b.n	800e870 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7f8 fb8b 	bl	8006f7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e866:	e003      	b.n	800e870 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7f8 fb87 	bl	8006f7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e86e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e870:	3728      	adds	r7, #40	@ 0x28
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20004d9c 	.word	0x20004d9c
 800e87c:	08013d7c 	.word	0x08013d7c
 800e880:	08013db0 	.word	0x08013db0
 800e884:	20004db0 	.word	0x20004db0
 800e888:	08013de0 	.word	0x08013de0
 800e88c:	08013e0c 	.word	0x08013e0c
 800e890:	08013e38 	.word	0x08013e38
 800e894:	08013e4c 	.word	0x08013e4c
 800e898:	08013e70 	.word	0x08013e70
 800e89c:	08013eac 	.word	0x08013eac
 800e8a0:	08013ed4 	.word	0x08013ed4
 800e8a4:	08013efc 	.word	0x08013efc
 800e8a8:	08013f34 	.word	0x08013f34
 800e8ac:	08013f6c 	.word	0x08013f6c
 800e8b0:	08013f94 	.word	0x08013f94
 800e8b4:	08013fbc 	.word	0x08013fbc
 800e8b8:	08013ff0 	.word	0x08013ff0
 800e8bc:	08014014 	.word	0x08014014
 800e8c0:	08014044 	.word	0x08014044

0800e8c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e8d0:	78fb      	ldrb	r3, [r7, #3]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	2103      	movs	r1, #3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f814 	bl	800e904 <icmp_send_response>
}
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e8f0:	78fb      	ldrb	r3, [r7, #3]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	210b      	movs	r1, #11
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f804 	bl	800e904 <icmp_send_response>
}
 800e8fc:	bf00      	nop
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b08c      	sub	sp, #48	@ 0x30
 800e908:	af04      	add	r7, sp, #16
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	460b      	mov	r3, r1
 800e90e:	70fb      	strb	r3, [r7, #3]
 800e910:	4613      	mov	r3, r2
 800e912:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e914:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e918:	2124      	movs	r1, #36	@ 0x24
 800e91a:	2022      	movs	r0, #34	@ 0x22
 800e91c:	f7f8 f84a 	bl	80069b4 <pbuf_alloc>
 800e920:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d103      	bne.n	800e930 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 800e928:	4844      	ldr	r0, [pc, #272]	@ (800ea3c <icmp_send_response+0x138>)
 800e92a:	f001 fc5b 	bl	80101e4 <puts>
 800e92e:	e082      	b.n	800ea36 <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	895b      	ldrh	r3, [r3, #10]
 800e934:	2b23      	cmp	r3, #35	@ 0x23
 800e936:	d806      	bhi.n	800e946 <icmp_send_response+0x42>
 800e938:	4b41      	ldr	r3, [pc, #260]	@ (800ea40 <icmp_send_response+0x13c>)
 800e93a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e93e:	4941      	ldr	r1, [pc, #260]	@ (800ea44 <icmp_send_response+0x140>)
 800e940:	4841      	ldr	r0, [pc, #260]	@ (800ea48 <icmp_send_response+0x144>)
 800e942:	f001 fbdf 	bl	8010104 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 800e94c:	483f      	ldr	r0, [pc, #252]	@ (800ea4c <icmp_send_response+0x148>)
 800e94e:	f001 fbd9 	bl	8010104 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	b2db      	uxtb	r3, r3
 800e958:	4619      	mov	r1, r3
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	0a1b      	lsrs	r3, r3, #8
 800e960:	b2db      	uxtb	r3, r3
 800e962:	461a      	mov	r2, r3
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	0c1b      	lsrs	r3, r3, #16
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	4618      	mov	r0, r3
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	0e1b      	lsrs	r3, r3, #24
 800e974:	b2db      	uxtb	r3, r3
 800e976:	9300      	str	r3, [sp, #0]
 800e978:	4603      	mov	r3, r0
 800e97a:	4835      	ldr	r0, [pc, #212]	@ (800ea50 <icmp_send_response+0x14c>)
 800e97c:	f001 fbc2 	bl	8010104 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 800e980:	4834      	ldr	r0, [pc, #208]	@ (800ea54 <icmp_send_response+0x150>)
 800e982:	f001 fbbf 	bl	8010104 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	4619      	mov	r1, r3
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	691b      	ldr	r3, [r3, #16]
 800e992:	0a1b      	lsrs	r3, r3, #8
 800e994:	b2db      	uxtb	r3, r3
 800e996:	461a      	mov	r2, r3
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	0c1b      	lsrs	r3, r3, #16
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	0e1b      	lsrs	r3, r3, #24
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	4828      	ldr	r0, [pc, #160]	@ (800ea50 <icmp_send_response+0x14c>)
 800e9b0:	f001 fba8 	bl	8010104 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 800e9b4:	200a      	movs	r0, #10
 800e9b6:	f001 fbb7 	bl	8010128 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	78fa      	ldrb	r2, [r7, #3]
 800e9c4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	78ba      	ldrb	r2, [r7, #2]
 800e9ca:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	711a      	strb	r2, [r3, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	719a      	strb	r2, [r3, #6]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f103 0008 	add.w	r0, r3, #8
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	221c      	movs	r2, #28
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	f001 fd5d 	bl	80104ae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e9f4:	69bb      	ldr	r3, [r7, #24]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e9fa:	f107 030c 	add.w	r3, r7, #12
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f000 f82a 	bl	800ea58 <ip4_route>
 800ea04:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d011      	beq.n	800ea30 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	709a      	strb	r2, [r3, #2]
 800ea12:	2200      	movs	r2, #0
 800ea14:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ea16:	f107 020c 	add.w	r2, r7, #12
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	9302      	str	r3, [sp, #8]
 800ea1e:	2301      	movs	r3, #1
 800ea20:	9301      	str	r3, [sp, #4]
 800ea22:	2300      	movs	r3, #0
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	23ff      	movs	r3, #255	@ 0xff
 800ea28:	2100      	movs	r1, #0
 800ea2a:	69f8      	ldr	r0, [r7, #28]
 800ea2c:	f000 f9d2 	bl	800edd4 <ip4_output_if>
  }
  pbuf_free(q);
 800ea30:	69f8      	ldr	r0, [r7, #28]
 800ea32:	f7f8 faa3 	bl	8006f7c <pbuf_free>
}
 800ea36:	3720      	adds	r7, #32
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	08014078 	.word	0x08014078
 800ea40:	08013efc 	.word	0x08013efc
 800ea44:	080140b8 	.word	0x080140b8
 800ea48:	08013f6c 	.word	0x08013f6c
 800ea4c:	080140e4 	.word	0x080140e4
 800ea50:	08014100 	.word	0x08014100
 800ea54:	08014110 	.word	0x08014110

0800ea58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ea60:	4b33      	ldr	r3, [pc, #204]	@ (800eb30 <ip4_route+0xd8>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	e036      	b.n	800ead6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d02b      	beq.n	800ead0 <ip4_route+0x78>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea7e:	089b      	lsrs	r3, r3, #2
 800ea80:	f003 0301 	and.w	r3, r3, #1
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d022      	beq.n	800ead0 <ip4_route+0x78>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	3304      	adds	r3, #4
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d01d      	beq.n	800ead0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	405a      	eors	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d101      	bne.n	800eab0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	e038      	b.n	800eb22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eab6:	f003 0302 	and.w	r3, r3, #2
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d108      	bne.n	800ead0 <ip4_route+0x78>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	330c      	adds	r3, #12
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d101      	bne.n	800ead0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	e028      	b.n	800eb22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	60fb      	str	r3, [r7, #12]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1c5      	bne.n	800ea68 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eadc:	4b15      	ldr	r3, [pc, #84]	@ (800eb34 <ip4_route+0xdc>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d01a      	beq.n	800eb1a <ip4_route+0xc2>
 800eae4:	4b13      	ldr	r3, [pc, #76]	@ (800eb34 <ip4_route+0xdc>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d012      	beq.n	800eb1a <ip4_route+0xc2>
 800eaf4:	4b0f      	ldr	r3, [pc, #60]	@ (800eb34 <ip4_route+0xdc>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eafc:	f003 0304 	and.w	r3, r3, #4
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00a      	beq.n	800eb1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eb04:	4b0b      	ldr	r3, [pc, #44]	@ (800eb34 <ip4_route+0xdc>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	3304      	adds	r3, #4
 800eb0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d004      	beq.n	800eb1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb18:	d101      	bne.n	800eb1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	e001      	b.n	800eb22 <ip4_route+0xca>
  }

  return netif_default;
 800eb1e:	4b05      	ldr	r3, [pc, #20]	@ (800eb34 <ip4_route+0xdc>)
 800eb20:	681b      	ldr	r3, [r3, #0]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	20007cec 	.word	0x20007cec
 800eb34:	20007cf0 	.word	0x20007cf0

0800eb38 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb46:	f003 0301 	and.w	r3, r3, #1
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d016      	beq.n	800eb7e <ip4_input_accept+0x46>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	3304      	adds	r3, #4
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d011      	beq.n	800eb7e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800eb88 <ip4_input_accept+0x50>)
 800eb5c:	695a      	ldr	r2, [r3, #20]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3304      	adds	r3, #4
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d008      	beq.n	800eb7a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eb68:	4b07      	ldr	r3, [pc, #28]	@ (800eb88 <ip4_input_accept+0x50>)
 800eb6a:	695b      	ldr	r3, [r3, #20]
 800eb6c:	6879      	ldr	r1, [r7, #4]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 fa08 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800eb74:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e000      	b.n	800eb80 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	20004d9c 	.word	0x20004d9c

0800eb8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	091b      	lsrs	r3, r3, #4
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b04      	cmp	r3, #4
 800eba6:	d004      	beq.n	800ebb2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7f8 f9e7 	bl	8006f7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	e107      	b.n	800edc2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	f003 030f 	and.w	r3, r3, #15
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	885b      	ldrh	r3, [r3, #2]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7f6 fd87 	bl	80056dc <lwip_htons>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	891b      	ldrh	r3, [r3, #8]
 800ebd6:	89ba      	ldrh	r2, [r7, #12]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d204      	bcs.n	800ebe6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ebdc:	89bb      	ldrh	r3, [r7, #12]
 800ebde:	4619      	mov	r1, r3
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7f8 f845 	bl	8006c70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	895b      	ldrh	r3, [r3, #10]
 800ebea:	89fa      	ldrh	r2, [r7, #14]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d807      	bhi.n	800ec00 <ip4_input+0x74>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	891b      	ldrh	r3, [r3, #8]
 800ebf4:	89ba      	ldrh	r2, [r7, #12]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d802      	bhi.n	800ec00 <ip4_input+0x74>
 800ebfa:	89fb      	ldrh	r3, [r7, #14]
 800ebfc:	2b13      	cmp	r3, #19
 800ebfe:	d804      	bhi.n	800ec0a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7f8 f9bb 	bl	8006f7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	e0db      	b.n	800edc2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	4a6f      	ldr	r2, [pc, #444]	@ (800edcc <ip4_input+0x240>)
 800ec10:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	4a6d      	ldr	r2, [pc, #436]	@ (800edcc <ip4_input+0x240>)
 800ec18:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ec1a:	4b6c      	ldr	r3, [pc, #432]	@ (800edcc <ip4_input+0x240>)
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec22:	2be0      	cmp	r3, #224	@ 0xe0
 800ec24:	d112      	bne.n	800ec4c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d007      	beq.n	800ec46 <ip4_input+0xba>
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	3304      	adds	r3, #4
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d002      	beq.n	800ec46 <ip4_input+0xba>
      netif = inp;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	e02a      	b.n	800ec9c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	617b      	str	r3, [r7, #20]
 800ec4a:	e027      	b.n	800ec9c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ec4c:	6838      	ldr	r0, [r7, #0]
 800ec4e:	f7ff ff73 	bl	800eb38 <ip4_input_accept>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <ip4_input+0xd2>
      netif = inp;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	617b      	str	r3, [r7, #20]
 800ec5c:	e01e      	b.n	800ec9c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ec62:	4b5a      	ldr	r3, [pc, #360]	@ (800edcc <ip4_input+0x240>)
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec6a:	d017      	beq.n	800ec9c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ec6c:	4b58      	ldr	r3, [pc, #352]	@ (800edd0 <ip4_input+0x244>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	e00e      	b.n	800ec92 <ip4_input+0x106>
          if (netif == inp) {
 800ec74:	697a      	ldr	r2, [r7, #20]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d006      	beq.n	800ec8a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ec7c:	6978      	ldr	r0, [r7, #20]
 800ec7e:	f7ff ff5b 	bl	800eb38 <ip4_input_accept>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d108      	bne.n	800ec9a <ip4_input+0x10e>
 800ec88:	e000      	b.n	800ec8c <ip4_input+0x100>
            continue;
 800ec8a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	617b      	str	r3, [r7, #20]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d1ed      	bne.n	800ec74 <ip4_input+0xe8>
 800ec98:	e000      	b.n	800ec9c <ip4_input+0x110>
            break;
 800ec9a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec9c:	4b4b      	ldr	r3, [pc, #300]	@ (800edcc <ip4_input+0x240>)
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 f96e 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d105      	bne.n	800ecba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ecae:	4b47      	ldr	r3, [pc, #284]	@ (800edcc <ip4_input+0x240>)
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ecb6:	2be0      	cmp	r3, #224	@ 0xe0
 800ecb8:	d104      	bne.n	800ecc4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7f8 f95e 	bl	8006f7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	e07e      	b.n	800edc2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d104      	bne.n	800ecd4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7f8 f956 	bl	8006f7c <pbuf_free>
    return ERR_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	e076      	b.n	800edc2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	88db      	ldrh	r3, [r3, #6]
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	461a      	mov	r2, r3
 800ecdc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800ece0:	4013      	ands	r3, r2
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00b      	beq.n	800ecfe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 fc92 	bl	800f610 <ip4_reass>
 800ecec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <ip4_input+0x16c>
      return ERR_OK;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	e064      	b.n	800edc2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ecfe:	4a33      	ldr	r2, [pc, #204]	@ (800edcc <ip4_input+0x240>)
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ed04:	4a31      	ldr	r2, [pc, #196]	@ (800edcc <ip4_input+0x240>)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ed0a:	4a30      	ldr	r2, [pc, #192]	@ (800edcc <ip4_input+0x240>)
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f003 030f 	and.w	r3, r3, #15
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4b2a      	ldr	r3, [pc, #168]	@ (800edcc <ip4_input+0x240>)
 800ed22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ed24:	89fb      	ldrh	r3, [r7, #14]
 800ed26:	4619      	mov	r1, r3
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7f8 f8a1 	bl	8006e70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	7a5b      	ldrb	r3, [r3, #9]
 800ed32:	2b11      	cmp	r3, #17
 800ed34:	d006      	beq.n	800ed44 <ip4_input+0x1b8>
 800ed36:	2b11      	cmp	r3, #17
 800ed38:	dc13      	bgt.n	800ed62 <ip4_input+0x1d6>
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d00c      	beq.n	800ed58 <ip4_input+0x1cc>
 800ed3e:	2b06      	cmp	r3, #6
 800ed40:	d005      	beq.n	800ed4e <ip4_input+0x1c2>
 800ed42:	e00e      	b.n	800ed62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ed44:	6839      	ldr	r1, [r7, #0]
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7fd ff20 	bl	800cb8c <udp_input>
        break;
 800ed4c:	e026      	b.n	800ed9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f7f9 ff53 	bl	8008bfc <tcp_input>
        break;
 800ed56:	e021      	b.n	800ed9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7ff fc5c 	bl	800e618 <icmp_input>
        break;
 800ed60:	e01c      	b.n	800ed9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed62:	4b1a      	ldr	r3, [pc, #104]	@ (800edcc <ip4_input+0x240>)
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	6979      	ldr	r1, [r7, #20]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f000 f90b 	bl	800ef84 <ip4_addr_isbroadcast_u32>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10f      	bne.n	800ed94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed74:	4b15      	ldr	r3, [pc, #84]	@ (800edcc <ip4_input+0x240>)
 800ed76:	695b      	ldr	r3, [r3, #20]
 800ed78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed7c:	2be0      	cmp	r3, #224	@ 0xe0
 800ed7e:	d009      	beq.n	800ed94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ed80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f7f8 f8e5 	bl	8006f56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ed8c:	2102      	movs	r1, #2
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff fd98 	bl	800e8c4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7f8 f8f1 	bl	8006f7c <pbuf_free>
        break;
 800ed9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ed9c:	4b0b      	ldr	r3, [pc, #44]	@ (800edcc <ip4_input+0x240>)
 800ed9e:	2200      	movs	r2, #0
 800eda0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800eda2:	4b0a      	ldr	r3, [pc, #40]	@ (800edcc <ip4_input+0x240>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800eda8:	4b08      	ldr	r3, [pc, #32]	@ (800edcc <ip4_input+0x240>)
 800edaa:	2200      	movs	r2, #0
 800edac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800edae:	4b07      	ldr	r3, [pc, #28]	@ (800edcc <ip4_input+0x240>)
 800edb0:	2200      	movs	r2, #0
 800edb2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800edb4:	4b05      	ldr	r3, [pc, #20]	@ (800edcc <ip4_input+0x240>)
 800edb6:	2200      	movs	r2, #0
 800edb8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800edba:	4b04      	ldr	r3, [pc, #16]	@ (800edcc <ip4_input+0x240>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800edc0:	2300      	movs	r3, #0
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3718      	adds	r7, #24
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	20004d9c 	.word	0x20004d9c
 800edd0:	20007cec 	.word	0x20007cec

0800edd4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08a      	sub	sp, #40	@ 0x28
 800edd8:	af04      	add	r7, sp, #16
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d009      	beq.n	800ee00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <ip4_output_if+0x26>
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d102      	bne.n	800ee00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800edfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfc:	3304      	adds	r3, #4
 800edfe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ee00:	78fa      	ldrb	r2, [r7, #3]
 800ee02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee04:	9302      	str	r3, [sp, #8]
 800ee06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ee0a:	9301      	str	r3, [sp, #4]
 800ee0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	4613      	mov	r3, r2
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	6979      	ldr	r1, [r7, #20]
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f000 f805 	bl	800ee28 <ip4_output_if_src>
 800ee1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3718      	adds	r7, #24
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b088      	sub	sp, #32
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	7b9b      	ldrb	r3, [r3, #14]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d006      	beq.n	800ee4c <ip4_output_if_src+0x24>
 800ee3e:	4b4b      	ldr	r3, [pc, #300]	@ (800ef6c <ip4_output_if_src+0x144>)
 800ee40:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ee44:	494a      	ldr	r1, [pc, #296]	@ (800ef70 <ip4_output_if_src+0x148>)
 800ee46:	484b      	ldr	r0, [pc, #300]	@ (800ef74 <ip4_output_if_src+0x14c>)
 800ee48:	f001 f95c 	bl	8010104 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d060      	beq.n	800ef14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ee52:	2314      	movs	r3, #20
 800ee54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ee56:	2114      	movs	r1, #20
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f7f7 fff9 	bl	8006e50 <pbuf_add_header>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ee64:	f06f 0301 	mvn.w	r3, #1
 800ee68:	e07c      	b.n	800ef64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	895b      	ldrh	r3, [r3, #10]
 800ee74:	2b13      	cmp	r3, #19
 800ee76:	d806      	bhi.n	800ee86 <ip4_output_if_src+0x5e>
 800ee78:	4b3c      	ldr	r3, [pc, #240]	@ (800ef6c <ip4_output_if_src+0x144>)
 800ee7a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ee7e:	493e      	ldr	r1, [pc, #248]	@ (800ef78 <ip4_output_if_src+0x150>)
 800ee80:	483c      	ldr	r0, [pc, #240]	@ (800ef74 <ip4_output_if_src+0x14c>)
 800ee82:	f001 f93f 	bl	8010104 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	78fa      	ldrb	r2, [r7, #3]
 800ee8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800ee92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ee9c:	8b7b      	ldrh	r3, [r7, #26]
 800ee9e:	089b      	lsrs	r3, r3, #2
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800eeb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	891b      	ldrh	r3, [r3, #8]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7f6 fc0e 	bl	80056dc <lwip_htons>
 800eec0:	4603      	mov	r3, r0
 800eec2:	461a      	mov	r2, r3
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	2200      	movs	r2, #0
 800eecc:	719a      	strb	r2, [r3, #6]
 800eece:	2200      	movs	r2, #0
 800eed0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800eed2:	4b2a      	ldr	r3, [pc, #168]	@ (800ef7c <ip4_output_if_src+0x154>)
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7f6 fc00 	bl	80056dc <lwip_htons>
 800eedc:	4603      	mov	r3, r0
 800eede:	461a      	mov	r2, r3
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800eee4:	4b25      	ldr	r3, [pc, #148]	@ (800ef7c <ip4_output_if_src+0x154>)
 800eee6:	881b      	ldrh	r3, [r3, #0]
 800eee8:	3301      	adds	r3, #1
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	4b23      	ldr	r3, [pc, #140]	@ (800ef7c <ip4_output_if_src+0x154>)
 800eeee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d104      	bne.n	800ef00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eef6:	4b22      	ldr	r3, [pc, #136]	@ (800ef80 <ip4_output_if_src+0x158>)
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	60da      	str	r2, [r3, #12]
 800eefe:	e003      	b.n	800ef08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	729a      	strb	r2, [r3, #10]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	72da      	strb	r2, [r3, #11]
 800ef12:	e00f      	b.n	800ef34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	895b      	ldrh	r3, [r3, #10]
 800ef18:	2b13      	cmp	r3, #19
 800ef1a:	d802      	bhi.n	800ef22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ef1c:	f06f 0301 	mvn.w	r3, #1
 800ef20:	e020      	b.n	800ef64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ef2e:	f107 0314 	add.w	r3, r7, #20
 800ef32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ef34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00c      	beq.n	800ef56 <ip4_output_if_src+0x12e>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	891a      	ldrh	r2, [r3, #8]
 800ef40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d906      	bls.n	800ef56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f000 fd53 	bl	800f9f8 <ip4_frag>
 800ef52:	4603      	mov	r3, r0
 800ef54:	e006      	b.n	800ef64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ef56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef58:	695b      	ldr	r3, [r3, #20]
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	68f9      	ldr	r1, [r7, #12]
 800ef5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef60:	4798      	blx	r3
 800ef62:	4603      	mov	r3, r0
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3720      	adds	r7, #32
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	08014118 	.word	0x08014118
 800ef70:	0801414c 	.word	0x0801414c
 800ef74:	08014158 	.word	0x08014158
 800ef78:	08014180 	.word	0x08014180
 800ef7c:	20007e4e 	.word	0x20007e4e
 800ef80:	08014588 	.word	0x08014588

0800ef84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef98:	d002      	beq.n	800efa0 <ip4_addr_isbroadcast_u32+0x1c>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d101      	bne.n	800efa4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800efa0:	2301      	movs	r3, #1
 800efa2:	e02a      	b.n	800effa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800efaa:	f003 0302 	and.w	r3, r3, #2
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d101      	bne.n	800efb6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	e021      	b.n	800effa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	3304      	adds	r3, #4
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d101      	bne.n	800efc6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800efc2:	2300      	movs	r3, #0
 800efc4:	e019      	b.n	800effa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	3304      	adds	r3, #4
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	405a      	eors	r2, r3
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	3308      	adds	r3, #8
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4013      	ands	r3, r2
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10d      	bne.n	800eff8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	3308      	adds	r3, #8
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	43da      	mvns	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	3308      	adds	r3, #8
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d101      	bne.n	800eff8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eff4:	2301      	movs	r3, #1
 800eff6:	e000      	b.n	800effa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800eff8:	2300      	movs	r3, #0
  }
}
 800effa:	4618      	mov	r0, r3
 800effc:	3714      	adds	r7, #20
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr
	...

0800f008 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f00e:	2300      	movs	r3, #0
 800f010:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f012:	4b12      	ldr	r3, [pc, #72]	@ (800f05c <ip_reass_tmr+0x54>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f018:	e018      	b.n	800f04c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	7fdb      	ldrb	r3, [r3, #31]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00b      	beq.n	800f03a <ip_reass_tmr+0x32>
      r->timer--;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	7fdb      	ldrb	r3, [r3, #31]
 800f026:	3b01      	subs	r3, #1
 800f028:	b2da      	uxtb	r2, r3
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	60fb      	str	r3, [r7, #12]
 800f038:	e008      	b.n	800f04c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f044:	68b9      	ldr	r1, [r7, #8]
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 f80a 	bl	800f060 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e3      	bne.n	800f01a <ip_reass_tmr+0x12>
    }
  }
}
 800f052:	bf00      	nop
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20007e50 	.word	0x20007e50

0800f060 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b088      	sub	sp, #32
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	429a      	cmp	r2, r3
 800f074:	d105      	bne.n	800f082 <ip_reass_free_complete_datagram+0x22>
 800f076:	4b45      	ldr	r3, [pc, #276]	@ (800f18c <ip_reass_free_complete_datagram+0x12c>)
 800f078:	22ab      	movs	r2, #171	@ 0xab
 800f07a:	4945      	ldr	r1, [pc, #276]	@ (800f190 <ip_reass_free_complete_datagram+0x130>)
 800f07c:	4845      	ldr	r0, [pc, #276]	@ (800f194 <ip_reass_free_complete_datagram+0x134>)
 800f07e:	f001 f841 	bl	8010104 <iprintf>
  if (prev != NULL) {
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00a      	beq.n	800f09e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d005      	beq.n	800f09e <ip_reass_free_complete_datagram+0x3e>
 800f092:	4b3e      	ldr	r3, [pc, #248]	@ (800f18c <ip_reass_free_complete_datagram+0x12c>)
 800f094:	22ad      	movs	r2, #173	@ 0xad
 800f096:	4940      	ldr	r1, [pc, #256]	@ (800f198 <ip_reass_free_complete_datagram+0x138>)
 800f098:	483e      	ldr	r0, [pc, #248]	@ (800f194 <ip_reass_free_complete_datagram+0x134>)
 800f09a:	f001 f833 	bl	8010104 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	889b      	ldrh	r3, [r3, #4]
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d12a      	bne.n	800f106 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	6858      	ldr	r0, [r3, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	3308      	adds	r3, #8
 800f0c6:	2214      	movs	r2, #20
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	f001 f9f0 	bl	80104ae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f0ce:	2101      	movs	r1, #1
 800f0d0:	69b8      	ldr	r0, [r7, #24]
 800f0d2:	f7ff fc07 	bl	800e8e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f0d6:	69b8      	ldr	r0, [r7, #24]
 800f0d8:	f7f7 ffd8 	bl	800708c <pbuf_clen>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f0e0:	8bfa      	ldrh	r2, [r7, #30]
 800f0e2:	8a7b      	ldrh	r3, [r7, #18]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ea:	db05      	blt.n	800f0f8 <ip_reass_free_complete_datagram+0x98>
 800f0ec:	4b27      	ldr	r3, [pc, #156]	@ (800f18c <ip_reass_free_complete_datagram+0x12c>)
 800f0ee:	22bc      	movs	r2, #188	@ 0xbc
 800f0f0:	492a      	ldr	r1, [pc, #168]	@ (800f19c <ip_reass_free_complete_datagram+0x13c>)
 800f0f2:	4828      	ldr	r0, [pc, #160]	@ (800f194 <ip_reass_free_complete_datagram+0x134>)
 800f0f4:	f001 f806 	bl	8010104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f0f8:	8bfa      	ldrh	r2, [r7, #30]
 800f0fa:	8a7b      	ldrh	r3, [r7, #18]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f100:	69b8      	ldr	r0, [r7, #24]
 800f102:	f7f7 ff3b 	bl	8006f7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f10c:	e01f      	b.n	800f14e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7f7 ffb4 	bl	800708c <pbuf_clen>
 800f124:	4603      	mov	r3, r0
 800f126:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f128:	8bfa      	ldrh	r2, [r7, #30]
 800f12a:	8a7b      	ldrh	r3, [r7, #18]
 800f12c:	4413      	add	r3, r2
 800f12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f132:	db05      	blt.n	800f140 <ip_reass_free_complete_datagram+0xe0>
 800f134:	4b15      	ldr	r3, [pc, #84]	@ (800f18c <ip_reass_free_complete_datagram+0x12c>)
 800f136:	22cc      	movs	r2, #204	@ 0xcc
 800f138:	4918      	ldr	r1, [pc, #96]	@ (800f19c <ip_reass_free_complete_datagram+0x13c>)
 800f13a:	4816      	ldr	r0, [pc, #88]	@ (800f194 <ip_reass_free_complete_datagram+0x134>)
 800f13c:	f000 ffe2 	bl	8010104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f140:	8bfa      	ldrh	r2, [r7, #30]
 800f142:	8a7b      	ldrh	r3, [r7, #18]
 800f144:	4413      	add	r3, r2
 800f146:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7f7 ff17 	bl	8006f7c <pbuf_free>
  while (p != NULL) {
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1dc      	bne.n	800f10e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f154:	6839      	ldr	r1, [r7, #0]
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f8c2 	bl	800f2e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f15c:	4b10      	ldr	r3, [pc, #64]	@ (800f1a0 <ip_reass_free_complete_datagram+0x140>)
 800f15e:	881b      	ldrh	r3, [r3, #0]
 800f160:	8bfa      	ldrh	r2, [r7, #30]
 800f162:	429a      	cmp	r2, r3
 800f164:	d905      	bls.n	800f172 <ip_reass_free_complete_datagram+0x112>
 800f166:	4b09      	ldr	r3, [pc, #36]	@ (800f18c <ip_reass_free_complete_datagram+0x12c>)
 800f168:	22d2      	movs	r2, #210	@ 0xd2
 800f16a:	490e      	ldr	r1, [pc, #56]	@ (800f1a4 <ip_reass_free_complete_datagram+0x144>)
 800f16c:	4809      	ldr	r0, [pc, #36]	@ (800f194 <ip_reass_free_complete_datagram+0x134>)
 800f16e:	f000 ffc9 	bl	8010104 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f172:	4b0b      	ldr	r3, [pc, #44]	@ (800f1a0 <ip_reass_free_complete_datagram+0x140>)
 800f174:	881a      	ldrh	r2, [r3, #0]
 800f176:	8bfb      	ldrh	r3, [r7, #30]
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	4b08      	ldr	r3, [pc, #32]	@ (800f1a0 <ip_reass_free_complete_datagram+0x140>)
 800f17e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f180:	8bfb      	ldrh	r3, [r7, #30]
}
 800f182:	4618      	mov	r0, r3
 800f184:	3720      	adds	r7, #32
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	080141b0 	.word	0x080141b0
 800f190:	080141ec 	.word	0x080141ec
 800f194:	080141f8 	.word	0x080141f8
 800f198:	08014220 	.word	0x08014220
 800f19c:	08014234 	.word	0x08014234
 800f1a0:	20007e54 	.word	0x20007e54
 800f1a4:	08014254 	.word	0x08014254

0800f1a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08a      	sub	sp, #40	@ 0x28
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f1c6:	4b28      	ldr	r3, [pc, #160]	@ (800f268 <ip_reass_remove_oldest_datagram+0xc0>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f1cc:	e030      	b.n	800f230 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d0:	695a      	ldr	r2, [r3, #20]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d10c      	bne.n	800f1f4 <ip_reass_remove_oldest_datagram+0x4c>
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	699a      	ldr	r2, [r3, #24]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d106      	bne.n	800f1f4 <ip_reass_remove_oldest_datagram+0x4c>
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e8:	899a      	ldrh	r2, [r3, #12]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	889b      	ldrh	r3, [r3, #4]
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d014      	beq.n	800f21e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d104      	bne.n	800f20a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f202:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	61bb      	str	r3, [r7, #24]
 800f208:	e009      	b.n	800f21e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20c:	7fda      	ldrb	r2, [r3, #31]
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	7fdb      	ldrb	r3, [r3, #31]
 800f212:	429a      	cmp	r2, r3
 800f214:	d803      	bhi.n	800f21e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f218:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d001      	beq.n	800f22a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f228:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1cb      	bne.n	800f1ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d008      	beq.n	800f24e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f23c:	69b9      	ldr	r1, [r7, #24]
 800f23e:	6a38      	ldr	r0, [r7, #32]
 800f240:	f7ff ff0e 	bl	800f060 <ip_reass_free_complete_datagram>
 800f244:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	4413      	add	r3, r2
 800f24c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f24e:	697a      	ldr	r2, [r7, #20]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	429a      	cmp	r2, r3
 800f254:	da02      	bge.n	800f25c <ip_reass_remove_oldest_datagram+0xb4>
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	dcac      	bgt.n	800f1b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f25c:	697b      	ldr	r3, [r7, #20]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3728      	adds	r7, #40	@ 0x28
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	20007e50 	.word	0x20007e50

0800f26c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f276:	2004      	movs	r0, #4
 800f278:	f7f6 fea4 	bl	8005fc4 <memp_malloc>
 800f27c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d110      	bne.n	800f2a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7ff ff8e 	bl	800f1a8 <ip_reass_remove_oldest_datagram>
 800f28c:	4602      	mov	r2, r0
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	4293      	cmp	r3, r2
 800f292:	dc03      	bgt.n	800f29c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f294:	2004      	movs	r0, #4
 800f296:	f7f6 fe95 	bl	8005fc4 <memp_malloc>
 800f29a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d101      	bne.n	800f2a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	e016      	b.n	800f2d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f2a6:	2220      	movs	r2, #32
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f001 f88a 	bl	80103c4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	220f      	movs	r2, #15
 800f2b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f2b6:	4b09      	ldr	r3, [pc, #36]	@ (800f2dc <ip_reass_enqueue_new_datagram+0x70>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f2be:	4a07      	ldr	r2, [pc, #28]	@ (800f2dc <ip_reass_enqueue_new_datagram+0x70>)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	2214      	movs	r2, #20
 800f2ca:	6879      	ldr	r1, [r7, #4]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f001 f8ee 	bl	80104ae <memcpy>
  return ipr;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	20007e50 	.word	0x20007e50

0800f2e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f2ea:	4b10      	ldr	r3, [pc, #64]	@ (800f32c <ip_reass_dequeue_datagram+0x4c>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d104      	bne.n	800f2fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a0c      	ldr	r2, [pc, #48]	@ (800f32c <ip_reass_dequeue_datagram+0x4c>)
 800f2fa:	6013      	str	r3, [r2, #0]
 800f2fc:	e00d      	b.n	800f31a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d106      	bne.n	800f312 <ip_reass_dequeue_datagram+0x32>
 800f304:	4b0a      	ldr	r3, [pc, #40]	@ (800f330 <ip_reass_dequeue_datagram+0x50>)
 800f306:	f240 1245 	movw	r2, #325	@ 0x145
 800f30a:	490a      	ldr	r1, [pc, #40]	@ (800f334 <ip_reass_dequeue_datagram+0x54>)
 800f30c:	480a      	ldr	r0, [pc, #40]	@ (800f338 <ip_reass_dequeue_datagram+0x58>)
 800f30e:	f000 fef9 	bl	8010104 <iprintf>
    prev->next = ipr->next;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f31a:	6879      	ldr	r1, [r7, #4]
 800f31c:	2004      	movs	r0, #4
 800f31e:	f7f6 fec1 	bl	80060a4 <memp_free>
}
 800f322:	bf00      	nop
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	20007e50 	.word	0x20007e50
 800f330:	080141b0 	.word	0x080141b0
 800f334:	08014278 	.word	0x08014278
 800f338:	080141f8 	.word	0x080141f8

0800f33c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b08c      	sub	sp, #48	@ 0x30
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f348:	2300      	movs	r3, #0
 800f34a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f34c:	2301      	movs	r3, #1
 800f34e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	885b      	ldrh	r3, [r3, #2]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7f6 f9bd 	bl	80056dc <lwip_htons>
 800f362:	4603      	mov	r3, r0
 800f364:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	f003 030f 	and.w	r3, r3, #15
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f374:	7e7b      	ldrb	r3, [r7, #25]
 800f376:	b29b      	uxth	r3, r3
 800f378:	8b7a      	ldrh	r2, [r7, #26]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d202      	bcs.n	800f384 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f37e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f382:	e135      	b.n	800f5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f384:	7e7b      	ldrb	r3, [r7, #25]
 800f386:	b29b      	uxth	r3, r3
 800f388:	8b7a      	ldrh	r2, [r7, #26]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	88db      	ldrh	r3, [r3, #6]
 800f392:	b29b      	uxth	r3, r3
 800f394:	4618      	mov	r0, r3
 800f396:	f7f6 f9a1 	bl	80056dc <lwip_htons>
 800f39a:	4603      	mov	r3, r0
 800f39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	00db      	lsls	r3, r3, #3
 800f3a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	701a      	strb	r2, [r3, #0]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	705a      	strb	r2, [r3, #1]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	709a      	strb	r2, [r3, #2]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c0:	8afa      	ldrh	r2, [r7, #22]
 800f3c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f3c4:	8afa      	ldrh	r2, [r7, #22]
 800f3c6:	8b7b      	ldrh	r3, [r7, #26]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	b29a      	uxth	r2, r3
 800f3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d2:	88db      	ldrh	r3, [r3, #6]
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	8afa      	ldrh	r2, [r7, #22]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d902      	bls.n	800f3e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f3dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3e0:	e106      	b.n	800f5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f3e8:	e068      	b.n	800f4bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f2:	889b      	ldrh	r3, [r3, #4]
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	889b      	ldrh	r3, [r3, #4]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d235      	bcs.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f404:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d020      	beq.n	800f44e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40e:	889b      	ldrh	r3, [r3, #4]
 800f410:	b29a      	uxth	r2, r3
 800f412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f414:	88db      	ldrh	r3, [r3, #6]
 800f416:	b29b      	uxth	r3, r3
 800f418:	429a      	cmp	r2, r3
 800f41a:	d307      	bcc.n	800f42c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f41e:	88db      	ldrh	r3, [r3, #6]
 800f420:	b29a      	uxth	r2, r3
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	889b      	ldrh	r3, [r3, #4]
 800f426:	b29b      	uxth	r3, r3
 800f428:	429a      	cmp	r2, r3
 800f42a:	d902      	bls.n	800f432 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f42c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f430:	e0de      	b.n	800f5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f43a:	88db      	ldrh	r3, [r3, #6]
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f440:	889b      	ldrh	r3, [r3, #4]
 800f442:	b29b      	uxth	r3, r3
 800f444:	429a      	cmp	r2, r3
 800f446:	d03d      	beq.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f44c:	e03a      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f450:	88db      	ldrh	r3, [r3, #6]
 800f452:	b29a      	uxth	r2, r3
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	889b      	ldrh	r3, [r3, #4]
 800f458:	b29b      	uxth	r3, r3
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d902      	bls.n	800f464 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f45e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f462:	e0c5      	b.n	800f5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	68ba      	ldr	r2, [r7, #8]
 800f468:	605a      	str	r2, [r3, #4]
      break;
 800f46a:	e02b      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46e:	889b      	ldrh	r3, [r3, #4]
 800f470:	b29a      	uxth	r2, r3
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	889b      	ldrh	r3, [r3, #4]
 800f476:	b29b      	uxth	r3, r3
 800f478:	429a      	cmp	r2, r3
 800f47a:	d102      	bne.n	800f482 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f47c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f480:	e0b6      	b.n	800f5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f484:	889b      	ldrh	r3, [r3, #4]
 800f486:	b29a      	uxth	r2, r3
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	88db      	ldrh	r3, [r3, #6]
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	429a      	cmp	r2, r3
 800f490:	d202      	bcs.n	800f498 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f496:	e0ab      	b.n	800f5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d009      	beq.n	800f4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a0:	88db      	ldrh	r3, [r3, #6]
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	889b      	ldrh	r3, [r3, #4]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d001      	beq.n	800f4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d193      	bne.n	800f3ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f4c2:	e000      	b.n	800f4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f4c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d12d      	bne.n	800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d01c      	beq.n	800f50c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d4:	88db      	ldrh	r3, [r3, #6]
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4da:	889b      	ldrh	r3, [r3, #4]
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d906      	bls.n	800f4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f4e2:	4b45      	ldr	r3, [pc, #276]	@ (800f5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4e4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f4e8:	4944      	ldr	r1, [pc, #272]	@ (800f5fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f4ea:	4845      	ldr	r0, [pc, #276]	@ (800f600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4ec:	f000 fe0a 	bl	8010104 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f8:	88db      	ldrh	r3, [r3, #6]
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fe:	889b      	ldrh	r3, [r3, #4]
 800f500:	b29b      	uxth	r3, r3
 800f502:	429a      	cmp	r2, r3
 800f504:	d010      	beq.n	800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	623b      	str	r3, [r7, #32]
 800f50a:	e00d      	b.n	800f528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d006      	beq.n	800f522 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f514:	4b38      	ldr	r3, [pc, #224]	@ (800f5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f516:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f51a:	493a      	ldr	r1, [pc, #232]	@ (800f604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f51c:	4838      	ldr	r0, [pc, #224]	@ (800f600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f51e:	f000 fdf1 	bl	8010104 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	68ba      	ldr	r2, [r7, #8]
 800f526:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d105      	bne.n	800f53a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	7f9b      	ldrb	r3, [r3, #30]
 800f532:	f003 0301 	and.w	r3, r3, #1
 800f536:	2b00      	cmp	r3, #0
 800f538:	d059      	beq.n	800f5ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d04f      	beq.n	800f5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d006      	beq.n	800f556 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	889b      	ldrh	r3, [r3, #4]
 800f550:	b29b      	uxth	r3, r3
 800f552:	2b00      	cmp	r3, #0
 800f554:	d002      	beq.n	800f55c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f556:	2300      	movs	r3, #0
 800f558:	623b      	str	r3, [r7, #32]
 800f55a:	e041      	b.n	800f5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f55e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f566:	e012      	b.n	800f58e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f570:	88db      	ldrh	r3, [r3, #6]
 800f572:	b29a      	uxth	r2, r3
 800f574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f576:	889b      	ldrh	r3, [r3, #4]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d002      	beq.n	800f584 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	623b      	str	r3, [r7, #32]
            break;
 800f582:	e007      	b.n	800f594 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f586:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1e9      	bne.n	800f568 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d022      	beq.n	800f5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d106      	bne.n	800f5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f5a2:	4b15      	ldr	r3, [pc, #84]	@ (800f5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f5a4:	f240 12df 	movw	r2, #479	@ 0x1df
 800f5a8:	4917      	ldr	r1, [pc, #92]	@ (800f608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f5aa:	4815      	ldr	r0, [pc, #84]	@ (800f600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f5ac:	f000 fdaa 	bl	8010104 <iprintf>
          LWIP_ASSERT("sanity check",
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d106      	bne.n	800f5ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f5bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f5be:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f5c2:	4911      	ldr	r1, [pc, #68]	@ (800f608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f5c4:	480e      	ldr	r0, [pc, #56]	@ (800f600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f5c6:	f000 fd9d 	bl	8010104 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d006      	beq.n	800f5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f5d2:	4b09      	ldr	r3, [pc, #36]	@ (800f5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f5d4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f5d8:	490c      	ldr	r1, [pc, #48]	@ (800f60c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f5da:	4809      	ldr	r0, [pc, #36]	@ (800f600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f5dc:	f000 fd92 	bl	8010104 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f5e0:	6a3b      	ldr	r3, [r7, #32]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	bf14      	ite	ne
 800f5e6:	2301      	movne	r3, #1
 800f5e8:	2300      	moveq	r3, #0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	e000      	b.n	800f5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3730      	adds	r7, #48	@ 0x30
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	080141b0 	.word	0x080141b0
 800f5fc:	08014294 	.word	0x08014294
 800f600:	080141f8 	.word	0x080141f8
 800f604:	080142b4 	.word	0x080142b4
 800f608:	080142ec 	.word	0x080142ec
 800f60c:	080142fc 	.word	0x080142fc

0800f610 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b08e      	sub	sp, #56	@ 0x38
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f003 030f 	and.w	r3, r3, #15
 800f626:	b2db      	uxtb	r3, r3
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b14      	cmp	r3, #20
 800f62e:	f040 8171 	bne.w	800f914 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f634:	88db      	ldrh	r3, [r3, #6]
 800f636:	b29b      	uxth	r3, r3
 800f638:	4618      	mov	r0, r3
 800f63a:	f7f6 f84f 	bl	80056dc <lwip_htons>
 800f63e:	4603      	mov	r3, r0
 800f640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f644:	b29b      	uxth	r3, r3
 800f646:	00db      	lsls	r3, r3, #3
 800f648:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64c:	885b      	ldrh	r3, [r3, #2]
 800f64e:	b29b      	uxth	r3, r3
 800f650:	4618      	mov	r0, r3
 800f652:	f7f6 f843 	bl	80056dc <lwip_htons>
 800f656:	4603      	mov	r3, r0
 800f658:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f003 030f 	and.w	r3, r3, #15
 800f662:	b2db      	uxtb	r3, r3
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f66a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f66e:	b29b      	uxth	r3, r3
 800f670:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f672:	429a      	cmp	r2, r3
 800f674:	f0c0 8150 	bcc.w	800f918 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f678:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7f7 fd01 	bl	800708c <pbuf_clen>
 800f68a:	4603      	mov	r3, r0
 800f68c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f68e:	4b8c      	ldr	r3, [pc, #560]	@ (800f8c0 <ip4_reass+0x2b0>)
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	461a      	mov	r2, r3
 800f694:	8c3b      	ldrh	r3, [r7, #32]
 800f696:	4413      	add	r3, r2
 800f698:	2b0a      	cmp	r3, #10
 800f69a:	dd10      	ble.n	800f6be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f69c:	8c3b      	ldrh	r3, [r7, #32]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6a2:	f7ff fd81 	bl	800f1a8 <ip_reass_remove_oldest_datagram>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f000 8137 	beq.w	800f91c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f6ae:	4b84      	ldr	r3, [pc, #528]	@ (800f8c0 <ip4_reass+0x2b0>)
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	8c3b      	ldrh	r3, [r7, #32]
 800f6b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f6b8:	2b0a      	cmp	r3, #10
 800f6ba:	f300 812f 	bgt.w	800f91c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f6be:	4b81      	ldr	r3, [pc, #516]	@ (800f8c4 <ip4_reass+0x2b4>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f6c4:	e015      	b.n	800f6f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c8:	695a      	ldr	r2, [r3, #20]
 800f6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d10c      	bne.n	800f6ec <ip4_reass+0xdc>
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d4:	699a      	ldr	r2, [r3, #24]
 800f6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d106      	bne.n	800f6ec <ip4_reass+0xdc>
 800f6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e0:	899a      	ldrh	r2, [r3, #12]
 800f6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e4:	889b      	ldrh	r3, [r3, #4]
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d006      	beq.n	800f6fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1e6      	bne.n	800f6c6 <ip4_reass+0xb6>
 800f6f8:	e000      	b.n	800f6fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f6fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d109      	bne.n	800f716 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f702:	8c3b      	ldrh	r3, [r7, #32]
 800f704:	4619      	mov	r1, r3
 800f706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f708:	f7ff fdb0 	bl	800f26c <ip_reass_enqueue_new_datagram>
 800f70c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f710:	2b00      	cmp	r3, #0
 800f712:	d11c      	bne.n	800f74e <ip4_reass+0x13e>
      goto nullreturn;
 800f714:	e105      	b.n	800f922 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f718:	88db      	ldrh	r3, [r3, #6]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7f5 ffdd 	bl	80056dc <lwip_htons>
 800f722:	4603      	mov	r3, r0
 800f724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d110      	bne.n	800f74e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72e:	89db      	ldrh	r3, [r3, #14]
 800f730:	4618      	mov	r0, r3
 800f732:	f7f5 ffd3 	bl	80056dc <lwip_htons>
 800f736:	4603      	mov	r3, r0
 800f738:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d006      	beq.n	800f74e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f742:	3308      	adds	r3, #8
 800f744:	2214      	movs	r2, #20
 800f746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f748:	4618      	mov	r0, r3
 800f74a:	f000 feb0 	bl	80104ae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f750:	88db      	ldrh	r3, [r3, #6]
 800f752:	b29b      	uxth	r3, r3
 800f754:	f003 0320 	and.w	r3, r3, #32
 800f758:	2b00      	cmp	r3, #0
 800f75a:	bf0c      	ite	eq
 800f75c:	2301      	moveq	r3, #1
 800f75e:	2300      	movne	r3, #0
 800f760:	b2db      	uxtb	r3, r3
 800f762:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00e      	beq.n	800f788 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f76a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f76c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f76e:	4413      	add	r3, r2
 800f770:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f772:	8b7a      	ldrh	r2, [r7, #26]
 800f774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f776:	429a      	cmp	r2, r3
 800f778:	f0c0 80a0 	bcc.w	800f8bc <ip4_reass+0x2ac>
 800f77c:	8b7b      	ldrh	r3, [r7, #26]
 800f77e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f782:	4293      	cmp	r3, r2
 800f784:	f200 809a 	bhi.w	800f8bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f788:	69fa      	ldr	r2, [r7, #28]
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f78e:	f7ff fdd5 	bl	800f33c <ip_reass_chain_frag_into_datagram_and_validate>
 800f792:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f79a:	f000 809b 	beq.w	800f8d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f79e:	4b48      	ldr	r3, [pc, #288]	@ (800f8c0 <ip4_reass+0x2b0>)
 800f7a0:	881a      	ldrh	r2, [r3, #0]
 800f7a2:	8c3b      	ldrh	r3, [r7, #32]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	4b45      	ldr	r3, [pc, #276]	@ (800f8c0 <ip4_reass+0x2b0>)
 800f7aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00d      	beq.n	800f7ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f7b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f7b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f7b6:	4413      	add	r3, r2
 800f7b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7bc:	8a7a      	ldrh	r2, [r7, #18]
 800f7be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c2:	7f9b      	ldrb	r3, [r3, #30]
 800f7c4:	f043 0301 	orr.w	r3, r3, #1
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d171      	bne.n	800f8b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d6:	8b9b      	ldrh	r3, [r3, #28]
 800f7d8:	3314      	adds	r3, #20
 800f7da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f0:	3308      	adds	r3, #8
 800f7f2:	2214      	movs	r2, #20
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7f8:	f000 fe59 	bl	80104ae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f7fc:	8a3b      	ldrh	r3, [r7, #16]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7f5 ff6c 	bl	80056dc <lwip_htons>
 800f804:	4603      	mov	r3, r0
 800f806:	461a      	mov	r2, r3
 800f808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f80a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f80e:	2200      	movs	r2, #0
 800f810:	719a      	strb	r2, [r3, #6]
 800f812:	2200      	movs	r2, #0
 800f814:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f818:	2200      	movs	r2, #0
 800f81a:	729a      	strb	r2, [r3, #10]
 800f81c:	2200      	movs	r2, #0
 800f81e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f826:	e00d      	b.n	800f844 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f82e:	2114      	movs	r1, #20
 800f830:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f832:	f7f7 fb1d 	bl	8006e70 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7f7 fc61 	bl	8007100 <pbuf_cat>
      r = iprh->next_pbuf;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 800f844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1ee      	bne.n	800f828 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f84a:	4b1e      	ldr	r3, [pc, #120]	@ (800f8c4 <ip4_reass+0x2b4>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f850:	429a      	cmp	r2, r3
 800f852:	d102      	bne.n	800f85a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f854:	2300      	movs	r3, #0
 800f856:	637b      	str	r3, [r7, #52]	@ 0x34
 800f858:	e010      	b.n	800f87c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f85a:	4b1a      	ldr	r3, [pc, #104]	@ (800f8c4 <ip4_reass+0x2b4>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f860:	e007      	b.n	800f872 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f868:	429a      	cmp	r2, r3
 800f86a:	d006      	beq.n	800f87a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	637b      	str	r3, [r7, #52]	@ 0x34
 800f872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1f4      	bne.n	800f862 <ip4_reass+0x252>
 800f878:	e000      	b.n	800f87c <ip4_reass+0x26c>
          break;
 800f87a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f87c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f87e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f880:	f7ff fd2e 	bl	800f2e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7f7 fc01 	bl	800708c <pbuf_clen>
 800f88a:	4603      	mov	r3, r0
 800f88c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f88e:	4b0c      	ldr	r3, [pc, #48]	@ (800f8c0 <ip4_reass+0x2b0>)
 800f890:	881b      	ldrh	r3, [r3, #0]
 800f892:	8c3a      	ldrh	r2, [r7, #32]
 800f894:	429a      	cmp	r2, r3
 800f896:	d906      	bls.n	800f8a6 <ip4_reass+0x296>
 800f898:	4b0b      	ldr	r3, [pc, #44]	@ (800f8c8 <ip4_reass+0x2b8>)
 800f89a:	f240 229b 	movw	r2, #667	@ 0x29b
 800f89e:	490b      	ldr	r1, [pc, #44]	@ (800f8cc <ip4_reass+0x2bc>)
 800f8a0:	480b      	ldr	r0, [pc, #44]	@ (800f8d0 <ip4_reass+0x2c0>)
 800f8a2:	f000 fc2f 	bl	8010104 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f8a6:	4b06      	ldr	r3, [pc, #24]	@ (800f8c0 <ip4_reass+0x2b0>)
 800f8a8:	881a      	ldrh	r2, [r3, #0]
 800f8aa:	8c3b      	ldrh	r3, [r7, #32]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	4b03      	ldr	r3, [pc, #12]	@ (800f8c0 <ip4_reass+0x2b0>)
 800f8b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	e038      	b.n	800f92a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	e036      	b.n	800f92a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f8bc:	bf00      	nop
 800f8be:	e00a      	b.n	800f8d6 <ip4_reass+0x2c6>
 800f8c0:	20007e54 	.word	0x20007e54
 800f8c4:	20007e50 	.word	0x20007e50
 800f8c8:	080141b0 	.word	0x080141b0
 800f8cc:	08014320 	.word	0x08014320
 800f8d0:	080141f8 	.word	0x080141f8
    goto nullreturn_ipr;
 800f8d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d106      	bne.n	800f8ea <ip4_reass+0x2da>
 800f8dc:	4b15      	ldr	r3, [pc, #84]	@ (800f934 <ip4_reass+0x324>)
 800f8de:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800f8e2:	4915      	ldr	r1, [pc, #84]	@ (800f938 <ip4_reass+0x328>)
 800f8e4:	4815      	ldr	r0, [pc, #84]	@ (800f93c <ip4_reass+0x32c>)
 800f8e6:	f000 fc0d 	bl	8010104 <iprintf>
  if (ipr->p == NULL) {
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d116      	bne.n	800f920 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f8f2:	4b13      	ldr	r3, [pc, #76]	@ (800f940 <ip4_reass+0x330>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d006      	beq.n	800f90a <ip4_reass+0x2fa>
 800f8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f934 <ip4_reass+0x324>)
 800f8fe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f902:	4910      	ldr	r1, [pc, #64]	@ (800f944 <ip4_reass+0x334>)
 800f904:	480d      	ldr	r0, [pc, #52]	@ (800f93c <ip4_reass+0x32c>)
 800f906:	f000 fbfd 	bl	8010104 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f90a:	2100      	movs	r1, #0
 800f90c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f90e:	f7ff fce7 	bl	800f2e0 <ip_reass_dequeue_datagram>
 800f912:	e006      	b.n	800f922 <ip4_reass+0x312>
    goto nullreturn;
 800f914:	bf00      	nop
 800f916:	e004      	b.n	800f922 <ip4_reass+0x312>
    goto nullreturn;
 800f918:	bf00      	nop
 800f91a:	e002      	b.n	800f922 <ip4_reass+0x312>
      goto nullreturn;
 800f91c:	bf00      	nop
 800f91e:	e000      	b.n	800f922 <ip4_reass+0x312>
  }

nullreturn:
 800f920:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7f7 fb2a 	bl	8006f7c <pbuf_free>
  return NULL;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3738      	adds	r7, #56	@ 0x38
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	080141b0 	.word	0x080141b0
 800f938:	0801433c 	.word	0x0801433c
 800f93c:	080141f8 	.word	0x080141f8
 800f940:	20007e50 	.word	0x20007e50
 800f944:	08014348 	.word	0x08014348

0800f948 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f94c:	2005      	movs	r0, #5
 800f94e:	f7f6 fb39 	bl	8005fc4 <memp_malloc>
 800f952:	4603      	mov	r3, r0
}
 800f954:	4618      	mov	r0, r3
 800f956:	bd80      	pop	{r7, pc}

0800f958 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d106      	bne.n	800f974 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f966:	4b07      	ldr	r3, [pc, #28]	@ (800f984 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f968:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f96c:	4906      	ldr	r1, [pc, #24]	@ (800f988 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f96e:	4807      	ldr	r0, [pc, #28]	@ (800f98c <ip_frag_free_pbuf_custom_ref+0x34>)
 800f970:	f000 fbc8 	bl	8010104 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f974:	6879      	ldr	r1, [r7, #4]
 800f976:	2005      	movs	r0, #5
 800f978:	f7f6 fb94 	bl	80060a4 <memp_free>
}
 800f97c:	bf00      	nop
 800f97e:	3708      	adds	r7, #8
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	080141b0 	.word	0x080141b0
 800f988:	08014368 	.word	0x08014368
 800f98c:	080141f8 	.word	0x080141f8

0800f990 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d106      	bne.n	800f9b0 <ipfrag_free_pbuf_custom+0x20>
 800f9a2:	4b11      	ldr	r3, [pc, #68]	@ (800f9e8 <ipfrag_free_pbuf_custom+0x58>)
 800f9a4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f9a8:	4910      	ldr	r1, [pc, #64]	@ (800f9ec <ipfrag_free_pbuf_custom+0x5c>)
 800f9aa:	4811      	ldr	r0, [pc, #68]	@ (800f9f0 <ipfrag_free_pbuf_custom+0x60>)
 800f9ac:	f000 fbaa 	bl	8010104 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d006      	beq.n	800f9c6 <ipfrag_free_pbuf_custom+0x36>
 800f9b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f9e8 <ipfrag_free_pbuf_custom+0x58>)
 800f9ba:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f9be:	490d      	ldr	r1, [pc, #52]	@ (800f9f4 <ipfrag_free_pbuf_custom+0x64>)
 800f9c0:	480b      	ldr	r0, [pc, #44]	@ (800f9f0 <ipfrag_free_pbuf_custom+0x60>)
 800f9c2:	f000 fb9f 	bl	8010104 <iprintf>
  if (pcr->original != NULL) {
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d004      	beq.n	800f9d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	695b      	ldr	r3, [r3, #20]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7f7 fad2 	bl	8006f7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f7ff ffbd 	bl	800f958 <ip_frag_free_pbuf_custom_ref>
}
 800f9de:	bf00      	nop
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	080141b0 	.word	0x080141b0
 800f9ec:	08014374 	.word	0x08014374
 800f9f0:	080141f8 	.word	0x080141f8
 800f9f4:	08014380 	.word	0x08014380

0800f9f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b094      	sub	sp, #80	@ 0x50
 800f9fc:	af02      	add	r7, sp, #8
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fa04:	2300      	movs	r3, #0
 800fa06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fa0e:	3b14      	subs	r3, #20
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	da00      	bge.n	800fa16 <ip4_frag+0x1e>
 800fa14:	3307      	adds	r3, #7
 800fa16:	10db      	asrs	r3, r3, #3
 800fa18:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fa1a:	2314      	movs	r3, #20
 800fa1c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800fa24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	f003 030f 	and.w	r3, r3, #15
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b14      	cmp	r3, #20
 800fa38:	d002      	beq.n	800fa40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fa3a:	f06f 0305 	mvn.w	r3, #5
 800fa3e:	e110      	b.n	800fc62 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	895b      	ldrh	r3, [r3, #10]
 800fa44:	2b13      	cmp	r3, #19
 800fa46:	d809      	bhi.n	800fa5c <ip4_frag+0x64>
 800fa48:	4b88      	ldr	r3, [pc, #544]	@ (800fc6c <ip4_frag+0x274>)
 800fa4a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800fa4e:	4988      	ldr	r1, [pc, #544]	@ (800fc70 <ip4_frag+0x278>)
 800fa50:	4888      	ldr	r0, [pc, #544]	@ (800fc74 <ip4_frag+0x27c>)
 800fa52:	f000 fb57 	bl	8010104 <iprintf>
 800fa56:	f06f 0305 	mvn.w	r3, #5
 800fa5a:	e102      	b.n	800fc62 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5e:	88db      	ldrh	r3, [r3, #6]
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f5 fe3a 	bl	80056dc <lwip_htons>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800fa6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa72:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fa76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fa7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	891b      	ldrh	r3, [r3, #8]
 800fa82:	3b14      	subs	r3, #20
 800fa84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800fa88:	e0e1      	b.n	800fc4e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fa8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fa8c:	00db      	lsls	r3, r3, #3
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fa94:	4293      	cmp	r3, r2
 800fa96:	bf28      	it	cs
 800fa98:	4613      	movcs	r3, r2
 800fa9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fa9c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800faa0:	2114      	movs	r1, #20
 800faa2:	200e      	movs	r0, #14
 800faa4:	f7f6 ff86 	bl	80069b4 <pbuf_alloc>
 800faa8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800faaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faac:	2b00      	cmp	r3, #0
 800faae:	f000 80d5 	beq.w	800fc5c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fab4:	895b      	ldrh	r3, [r3, #10]
 800fab6:	2b13      	cmp	r3, #19
 800fab8:	d806      	bhi.n	800fac8 <ip4_frag+0xd0>
 800faba:	4b6c      	ldr	r3, [pc, #432]	@ (800fc6c <ip4_frag+0x274>)
 800fabc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800fac0:	496d      	ldr	r1, [pc, #436]	@ (800fc78 <ip4_frag+0x280>)
 800fac2:	486c      	ldr	r0, [pc, #432]	@ (800fc74 <ip4_frag+0x27c>)
 800fac4:	f000 fb1e 	bl	8010104 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	2214      	movs	r2, #20
 800face:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 fcec 	bl	80104ae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800fadc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fade:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800fae2:	e064      	b.n	800fbae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	895a      	ldrh	r2, [r3, #10]
 800fae8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	895b      	ldrh	r3, [r3, #10]
 800faf2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d906      	bls.n	800fb06 <ip4_frag+0x10e>
 800faf8:	4b5c      	ldr	r3, [pc, #368]	@ (800fc6c <ip4_frag+0x274>)
 800fafa:	f240 322d 	movw	r2, #813	@ 0x32d
 800fafe:	495f      	ldr	r1, [pc, #380]	@ (800fc7c <ip4_frag+0x284>)
 800fb00:	485c      	ldr	r0, [pc, #368]	@ (800fc74 <ip4_frag+0x27c>)
 800fb02:	f000 faff 	bl	8010104 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fb06:	8bfa      	ldrh	r2, [r7, #30]
 800fb08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	bf28      	it	cs
 800fb10:	4613      	movcs	r3, r2
 800fb12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fb16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d105      	bne.n	800fb2a <ip4_frag+0x132>
        poff = 0;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	60fb      	str	r3, [r7, #12]
        continue;
 800fb28:	e041      	b.n	800fbae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fb2a:	f7ff ff0d 	bl	800f948 <ip_frag_alloc_pbuf_custom_ref>
 800fb2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d103      	bne.n	800fb3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fb36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb38:	f7f7 fa20 	bl	8006f7c <pbuf_free>
        goto memerr;
 800fb3c:	e08f      	b.n	800fc5e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fb3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fb44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fb46:	4413      	add	r3, r2
 800fb48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800fb4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800fb50:	9201      	str	r2, [sp, #4]
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	4603      	mov	r3, r0
 800fb56:	2241      	movs	r2, #65	@ 0x41
 800fb58:	2000      	movs	r0, #0
 800fb5a:	f7f7 f855 	bl	8006c08 <pbuf_alloced_custom>
 800fb5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d106      	bne.n	800fb74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fb66:	69b8      	ldr	r0, [r7, #24]
 800fb68:	f7ff fef6 	bl	800f958 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fb6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb6e:	f7f7 fa05 	bl	8006f7c <pbuf_free>
        goto memerr;
 800fb72:	e074      	b.n	800fc5e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7f7 faa1 	bl	80070bc <pbuf_ref>
      pcr->original = p;
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	4a3f      	ldr	r2, [pc, #252]	@ (800fc80 <ip4_frag+0x288>)
 800fb84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fb86:	6979      	ldr	r1, [r7, #20]
 800fb88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb8a:	f7f7 fab9 	bl	8007100 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fb8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800fb92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800fb9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d004      	beq.n	800fbae <ip4_frag+0x1b6>
        poff = 0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fbae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d196      	bne.n	800fae4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fbb6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fbb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fbbc:	4413      	add	r3, r2
 800fbbe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fbc4:	f1a3 0213 	sub.w	r2, r3, #19
 800fbc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	bfcc      	ite	gt
 800fbd0:	2301      	movgt	r3, #1
 800fbd2:	2300      	movle	r3, #0
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fbd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800fbdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbe0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800fbe2:	6a3b      	ldr	r3, [r7, #32]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d002      	beq.n	800fbee <ip4_frag+0x1f6>
 800fbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d003      	beq.n	800fbf6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fbee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fbf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fbf4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fbf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f5 fd6f 	bl	80056dc <lwip_htons>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	461a      	mov	r2, r3
 800fc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc04:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fc06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc08:	3314      	adds	r3, #20
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f5 fd65 	bl	80056dc <lwip_htons>
 800fc12:	4603      	mov	r3, r0
 800fc14:	461a      	mov	r2, r3
 800fc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc18:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	729a      	strb	r2, [r3, #10]
 800fc20:	2200      	movs	r2, #0
 800fc22:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	695b      	ldr	r3, [r3, #20]
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc2c:	68b8      	ldr	r0, [r7, #8]
 800fc2e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fc30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc32:	f7f7 f9a3 	bl	8006f7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fc36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fc3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800fc42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800fc46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fc48:	4413      	add	r3, r2
 800fc4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800fc4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f47f af19 	bne.w	800fa8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	e002      	b.n	800fc62 <ip4_frag+0x26a>
      goto memerr;
 800fc5c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fc5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3748      	adds	r7, #72	@ 0x48
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	080141b0 	.word	0x080141b0
 800fc70:	0801438c 	.word	0x0801438c
 800fc74:	080141f8 	.word	0x080141f8
 800fc78:	080143a8 	.word	0x080143a8
 800fc7c:	080143c8 	.word	0x080143c8
 800fc80:	0800f991 	.word	0x0800f991

0800fc84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fc8e:	230e      	movs	r3, #14
 800fc90:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	895b      	ldrh	r3, [r3, #10]
 800fc96:	2b0e      	cmp	r3, #14
 800fc98:	d96e      	bls.n	800fd78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	7bdb      	ldrb	r3, [r3, #15]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d106      	bne.n	800fcb0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fca8:	3301      	adds	r3, #1
 800fcaa:	b2da      	uxtb	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	7b1a      	ldrb	r2, [r3, #12]
 800fcba:	7b5b      	ldrb	r3, [r3, #13]
 800fcbc:	021b      	lsls	r3, r3, #8
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	f003 0301 	and.w	r3, r3, #1
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d023      	beq.n	800fd16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d10f      	bne.n	800fcf6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	785b      	ldrb	r3, [r3, #1]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d11b      	bne.n	800fd16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fce2:	2b5e      	cmp	r3, #94	@ 0x5e
 800fce4:	d117      	bne.n	800fd16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	7b5b      	ldrb	r3, [r3, #13]
 800fcea:	f043 0310 	orr.w	r3, r3, #16
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	735a      	strb	r2, [r3, #13]
 800fcf4:	e00f      	b.n	800fd16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	2206      	movs	r2, #6
 800fcfa:	4928      	ldr	r1, [pc, #160]	@ (800fd9c <ethernet_input+0x118>)
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 fb51 	bl	80103a4 <memcmp>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d106      	bne.n	800fd16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	7b5b      	ldrb	r3, [r3, #13]
 800fd0c:	f043 0308 	orr.w	r3, r3, #8
 800fd10:	b2da      	uxtb	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fd16:	89fb      	ldrh	r3, [r7, #14]
 800fd18:	2b08      	cmp	r3, #8
 800fd1a:	d003      	beq.n	800fd24 <ethernet_input+0xa0>
 800fd1c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800fd20:	d014      	beq.n	800fd4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fd22:	e032      	b.n	800fd8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd2a:	f003 0308 	and.w	r3, r3, #8
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d024      	beq.n	800fd7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fd32:	8afb      	ldrh	r3, [r7, #22]
 800fd34:	4619      	mov	r1, r3
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f7f7 f89a 	bl	8006e70 <pbuf_remove_header>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d11e      	bne.n	800fd80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fd42:	6839      	ldr	r1, [r7, #0]
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f7fe ff21 	bl	800eb8c <ip4_input>
      break;
 800fd4a:	e013      	b.n	800fd74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd52:	f003 0308 	and.w	r3, r3, #8
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d014      	beq.n	800fd84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fd5a:	8afb      	ldrh	r3, [r7, #22]
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7f7 f886 	bl	8006e70 <pbuf_remove_header>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10e      	bne.n	800fd88 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f7fe f82f 	bl	800ddd0 <etharp_input>
      break;
 800fd72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	e00c      	b.n	800fd92 <ethernet_input+0x10e>
    goto free_and_return;
 800fd78:	bf00      	nop
 800fd7a:	e006      	b.n	800fd8a <ethernet_input+0x106>
        goto free_and_return;
 800fd7c:	bf00      	nop
 800fd7e:	e004      	b.n	800fd8a <ethernet_input+0x106>
        goto free_and_return;
 800fd80:	bf00      	nop
 800fd82:	e002      	b.n	800fd8a <ethernet_input+0x106>
        goto free_and_return;
 800fd84:	bf00      	nop
 800fd86:	e000      	b.n	800fd8a <ethernet_input+0x106>
        goto free_and_return;
 800fd88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f7f7 f8f6 	bl	8006f7c <pbuf_free>
  return ERR_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3718      	adds	r7, #24
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	0801458c 	.word	0x0801458c

0800fda0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fdae:	8c3b      	ldrh	r3, [r7, #32]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7f5 fc93 	bl	80056dc <lwip_htons>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fdba:	210e      	movs	r1, #14
 800fdbc:	68b8      	ldr	r0, [r7, #8]
 800fdbe:	f7f7 f847 	bl	8006e50 <pbuf_add_header>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d125      	bne.n	800fe14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	8afa      	ldrh	r2, [r7, #22]
 800fdd2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	2206      	movs	r2, #6
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	4618      	mov	r0, r3
 800fddc:	f000 fb67 	bl	80104ae <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	3306      	adds	r3, #6
 800fde4:	2206      	movs	r2, #6
 800fde6:	6879      	ldr	r1, [r7, #4]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 fb60 	bl	80104ae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fdf4:	2b06      	cmp	r3, #6
 800fdf6:	d006      	beq.n	800fe06 <ethernet_output+0x66>
 800fdf8:	4b0a      	ldr	r3, [pc, #40]	@ (800fe24 <ethernet_output+0x84>)
 800fdfa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800fdfe:	490a      	ldr	r1, [pc, #40]	@ (800fe28 <ethernet_output+0x88>)
 800fe00:	480a      	ldr	r0, [pc, #40]	@ (800fe2c <ethernet_output+0x8c>)
 800fe02:	f000 f97f 	bl	8010104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	68b9      	ldr	r1, [r7, #8]
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	4798      	blx	r3
 800fe10:	4603      	mov	r3, r0
 800fe12:	e002      	b.n	800fe1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fe14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fe16:	f06f 0301 	mvn.w	r3, #1
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3718      	adds	r7, #24
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	080143d8 	.word	0x080143d8
 800fe28:	08014410 	.word	0x08014410
 800fe2c:	08014444 	.word	0x08014444

0800fe30 <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b0c4      	sub	sp, #272	@ 0x110
 800fe34:	af00      	add	r7, sp, #0
	struct OutMsg out_msg;
	struct InMsg in_msg;

	UDP_Server_Init();
 800fe36:	f000 f803 	bl	800fe40 <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 800fe3a:	f7f5 f82b 	bl	8004e94 <MX_LWIP_Process>
 800fe3e:	e7fc      	b.n	800fe3a <HW_Verification_Proccess+0xa>

0800fe40 <UDP_Server_Init>:
#include <string.h>

struct udp_pcb *upcb;

void UDP_Server_Init(void)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
	err_t err;

	/* Create a new UDP control block  */
	upcb = udp_new();
 800fe46:	f7fd fbe1 	bl	800d60c <udp_new>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	4a12      	ldr	r2, [pc, #72]	@ (800fe98 <UDP_Server_Init+0x58>)
 800fe4e:	6013      	str	r3, [r2, #0]

	if (upcb)
 800fe50:	4b11      	ldr	r3, [pc, #68]	@ (800fe98 <UDP_Server_Init+0x58>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d01a      	beq.n	800fe8e <UDP_Server_Init+0x4e>
	{
		/* Bind the upcb to the UDP_PORT port */
		/* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 800fe58:	4b0f      	ldr	r3, [pc, #60]	@ (800fe98 <UDP_Server_Init+0x58>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f24d 4231 	movw	r2, #54321	@ 0xd431
 800fe60:	490e      	ldr	r1, [pc, #56]	@ (800fe9c <UDP_Server_Init+0x5c>)
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fd fa82 	bl	800d36c <udp_bind>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 800fe6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d107      	bne.n	800fe84 <UDP_Server_Init+0x44>
		{
			/* Set a receive callback for the upcb */
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 800fe74:	4b08      	ldr	r3, [pc, #32]	@ (800fe98 <UDP_Server_Init+0x58>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	4909      	ldr	r1, [pc, #36]	@ (800fea0 <UDP_Server_Init+0x60>)
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7fd fb63 	bl	800d548 <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 800fe82:	e004      	b.n	800fe8e <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 800fe84:	4b04      	ldr	r3, [pc, #16]	@ (800fe98 <UDP_Server_Init+0x58>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7fd fb7d 	bl	800d588 <udp_remove>
}
 800fe8e:	bf00      	nop
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20007e58 	.word	0x20007e58
 800fe9c:	08014588 	.word	0x08014588
 800fea0:	0800fea5 	.word	0x0800fea5

0800fea4 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b088      	sub	sp, #32
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
 800feb0:	603b      	str	r3, [r7, #0]
	/* Connect to the remote client */
	//udp_connect(upcb, addr, port);

	/* send test ok regardless */
	uint8_t response[5];
	memcpy(response, p->payload, 4);  // test id
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	617b      	str	r3, [r7, #20]
	response[4] = 1;                  // result ok
 800feba:	2301      	movs	r3, #1
 800febc:	763b      	strb	r3, [r7, #24]
	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 800febe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fec2:	2105      	movs	r1, #5
 800fec4:	2036      	movs	r0, #54	@ 0x36
 800fec6:	f7f6 fd75 	bl	80069b4 <pbuf_alloc>
 800feca:	61f8      	str	r0, [r7, #28]
	if (resp_buf != NULL)
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d011      	beq.n	800fef6 <UDP_Recv_Callback+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	461a      	mov	r2, r3
 800fed8:	f107 0314 	add.w	r3, r7, #20
 800fedc:	6818      	ldr	r0, [r3, #0]
 800fede:	6010      	str	r0, [r2, #0]
 800fee0:	791b      	ldrb	r3, [r3, #4]
 800fee2:	7113      	strb	r3, [r2, #4]
		udp_sendto(upcb, resp_buf, addr, port);
 800fee4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fee6:	683a      	ldr	r2, [r7, #0]
 800fee8:	69f9      	ldr	r1, [r7, #28]
 800feea:	68b8      	ldr	r0, [r7, #8]
 800feec:	f7fd f816 	bl	800cf1c <udp_sendto>
	    pbuf_free(resp_buf);
 800fef0:	69f8      	ldr	r0, [r7, #28]
 800fef2:	f7f7 f843 	bl	8006f7c <pbuf_free>

	/* free the UDP connection, so we can accept new clients */
	//udp_disconnect(upcb);

	/* Free the p buffer */
	pbuf_free(p);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7f7 f840 	bl	8006f7c <pbuf_free>
}
 800fefc:	bf00      	nop
 800fefe:	3720      	adds	r7, #32
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <rand>:
 800ff04:	4b16      	ldr	r3, [pc, #88]	@ (800ff60 <rand+0x5c>)
 800ff06:	b510      	push	{r4, lr}
 800ff08:	681c      	ldr	r4, [r3, #0]
 800ff0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff0c:	b9b3      	cbnz	r3, 800ff3c <rand+0x38>
 800ff0e:	2018      	movs	r0, #24
 800ff10:	f000 fb44 	bl	801059c <malloc>
 800ff14:	4602      	mov	r2, r0
 800ff16:	6320      	str	r0, [r4, #48]	@ 0x30
 800ff18:	b920      	cbnz	r0, 800ff24 <rand+0x20>
 800ff1a:	4b12      	ldr	r3, [pc, #72]	@ (800ff64 <rand+0x60>)
 800ff1c:	4812      	ldr	r0, [pc, #72]	@ (800ff68 <rand+0x64>)
 800ff1e:	2152      	movs	r1, #82	@ 0x52
 800ff20:	f000 fad4 	bl	80104cc <__assert_func>
 800ff24:	4911      	ldr	r1, [pc, #68]	@ (800ff6c <rand+0x68>)
 800ff26:	4b12      	ldr	r3, [pc, #72]	@ (800ff70 <rand+0x6c>)
 800ff28:	e9c0 1300 	strd	r1, r3, [r0]
 800ff2c:	4b11      	ldr	r3, [pc, #68]	@ (800ff74 <rand+0x70>)
 800ff2e:	6083      	str	r3, [r0, #8]
 800ff30:	230b      	movs	r3, #11
 800ff32:	8183      	strh	r3, [r0, #12]
 800ff34:	2100      	movs	r1, #0
 800ff36:	2001      	movs	r0, #1
 800ff38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ff3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ff3e:	480e      	ldr	r0, [pc, #56]	@ (800ff78 <rand+0x74>)
 800ff40:	690b      	ldr	r3, [r1, #16]
 800ff42:	694c      	ldr	r4, [r1, #20]
 800ff44:	4a0d      	ldr	r2, [pc, #52]	@ (800ff7c <rand+0x78>)
 800ff46:	4358      	muls	r0, r3
 800ff48:	fb02 0004 	mla	r0, r2, r4, r0
 800ff4c:	fba3 3202 	umull	r3, r2, r3, r2
 800ff50:	3301      	adds	r3, #1
 800ff52:	eb40 0002 	adc.w	r0, r0, r2
 800ff56:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ff5a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ff5e:	bd10      	pop	{r4, pc}
 800ff60:	2000007c 	.word	0x2000007c
 800ff64:	0801459a 	.word	0x0801459a
 800ff68:	080145b1 	.word	0x080145b1
 800ff6c:	abcd330e 	.word	0xabcd330e
 800ff70:	e66d1234 	.word	0xe66d1234
 800ff74:	0005deec 	.word	0x0005deec
 800ff78:	5851f42d 	.word	0x5851f42d
 800ff7c:	4c957f2d 	.word	0x4c957f2d

0800ff80 <std>:
 800ff80:	2300      	movs	r3, #0
 800ff82:	b510      	push	{r4, lr}
 800ff84:	4604      	mov	r4, r0
 800ff86:	e9c0 3300 	strd	r3, r3, [r0]
 800ff8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff8e:	6083      	str	r3, [r0, #8]
 800ff90:	8181      	strh	r1, [r0, #12]
 800ff92:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff94:	81c2      	strh	r2, [r0, #14]
 800ff96:	6183      	str	r3, [r0, #24]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	2208      	movs	r2, #8
 800ff9c:	305c      	adds	r0, #92	@ 0x5c
 800ff9e:	f000 fa11 	bl	80103c4 <memset>
 800ffa2:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd8 <std+0x58>)
 800ffa4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ffa6:	4b0d      	ldr	r3, [pc, #52]	@ (800ffdc <std+0x5c>)
 800ffa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ffaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ffe0 <std+0x60>)
 800ffac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ffae:	4b0d      	ldr	r3, [pc, #52]	@ (800ffe4 <std+0x64>)
 800ffb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ffb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ffe8 <std+0x68>)
 800ffb4:	6224      	str	r4, [r4, #32]
 800ffb6:	429c      	cmp	r4, r3
 800ffb8:	d006      	beq.n	800ffc8 <std+0x48>
 800ffba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ffbe:	4294      	cmp	r4, r2
 800ffc0:	d002      	beq.n	800ffc8 <std+0x48>
 800ffc2:	33d0      	adds	r3, #208	@ 0xd0
 800ffc4:	429c      	cmp	r4, r3
 800ffc6:	d105      	bne.n	800ffd4 <std+0x54>
 800ffc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ffcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffd0:	f000 ba6a 	b.w	80104a8 <__retarget_lock_init_recursive>
 800ffd4:	bd10      	pop	{r4, pc}
 800ffd6:	bf00      	nop
 800ffd8:	080101f5 	.word	0x080101f5
 800ffdc:	08010217 	.word	0x08010217
 800ffe0:	0801024f 	.word	0x0801024f
 800ffe4:	08010273 	.word	0x08010273
 800ffe8:	20007e5c 	.word	0x20007e5c

0800ffec <stdio_exit_handler>:
 800ffec:	4a02      	ldr	r2, [pc, #8]	@ (800fff8 <stdio_exit_handler+0xc>)
 800ffee:	4903      	ldr	r1, [pc, #12]	@ (800fffc <stdio_exit_handler+0x10>)
 800fff0:	4803      	ldr	r0, [pc, #12]	@ (8010000 <stdio_exit_handler+0x14>)
 800fff2:	f000 b869 	b.w	80100c8 <_fwalk_sglue>
 800fff6:	bf00      	nop
 800fff8:	20000070 	.word	0x20000070
 800fffc:	08010dad 	.word	0x08010dad
 8010000:	20000080 	.word	0x20000080

08010004 <cleanup_stdio>:
 8010004:	6841      	ldr	r1, [r0, #4]
 8010006:	4b0c      	ldr	r3, [pc, #48]	@ (8010038 <cleanup_stdio+0x34>)
 8010008:	4299      	cmp	r1, r3
 801000a:	b510      	push	{r4, lr}
 801000c:	4604      	mov	r4, r0
 801000e:	d001      	beq.n	8010014 <cleanup_stdio+0x10>
 8010010:	f000 fecc 	bl	8010dac <_fflush_r>
 8010014:	68a1      	ldr	r1, [r4, #8]
 8010016:	4b09      	ldr	r3, [pc, #36]	@ (801003c <cleanup_stdio+0x38>)
 8010018:	4299      	cmp	r1, r3
 801001a:	d002      	beq.n	8010022 <cleanup_stdio+0x1e>
 801001c:	4620      	mov	r0, r4
 801001e:	f000 fec5 	bl	8010dac <_fflush_r>
 8010022:	68e1      	ldr	r1, [r4, #12]
 8010024:	4b06      	ldr	r3, [pc, #24]	@ (8010040 <cleanup_stdio+0x3c>)
 8010026:	4299      	cmp	r1, r3
 8010028:	d004      	beq.n	8010034 <cleanup_stdio+0x30>
 801002a:	4620      	mov	r0, r4
 801002c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010030:	f000 bebc 	b.w	8010dac <_fflush_r>
 8010034:	bd10      	pop	{r4, pc}
 8010036:	bf00      	nop
 8010038:	20007e5c 	.word	0x20007e5c
 801003c:	20007ec4 	.word	0x20007ec4
 8010040:	20007f2c 	.word	0x20007f2c

08010044 <global_stdio_init.part.0>:
 8010044:	b510      	push	{r4, lr}
 8010046:	4b0b      	ldr	r3, [pc, #44]	@ (8010074 <global_stdio_init.part.0+0x30>)
 8010048:	4c0b      	ldr	r4, [pc, #44]	@ (8010078 <global_stdio_init.part.0+0x34>)
 801004a:	4a0c      	ldr	r2, [pc, #48]	@ (801007c <global_stdio_init.part.0+0x38>)
 801004c:	601a      	str	r2, [r3, #0]
 801004e:	4620      	mov	r0, r4
 8010050:	2200      	movs	r2, #0
 8010052:	2104      	movs	r1, #4
 8010054:	f7ff ff94 	bl	800ff80 <std>
 8010058:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801005c:	2201      	movs	r2, #1
 801005e:	2109      	movs	r1, #9
 8010060:	f7ff ff8e 	bl	800ff80 <std>
 8010064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010068:	2202      	movs	r2, #2
 801006a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801006e:	2112      	movs	r1, #18
 8010070:	f7ff bf86 	b.w	800ff80 <std>
 8010074:	20007f94 	.word	0x20007f94
 8010078:	20007e5c 	.word	0x20007e5c
 801007c:	0800ffed 	.word	0x0800ffed

08010080 <__sfp_lock_acquire>:
 8010080:	4801      	ldr	r0, [pc, #4]	@ (8010088 <__sfp_lock_acquire+0x8>)
 8010082:	f000 ba12 	b.w	80104aa <__retarget_lock_acquire_recursive>
 8010086:	bf00      	nop
 8010088:	20007f9d 	.word	0x20007f9d

0801008c <__sfp_lock_release>:
 801008c:	4801      	ldr	r0, [pc, #4]	@ (8010094 <__sfp_lock_release+0x8>)
 801008e:	f000 ba0d 	b.w	80104ac <__retarget_lock_release_recursive>
 8010092:	bf00      	nop
 8010094:	20007f9d 	.word	0x20007f9d

08010098 <__sinit>:
 8010098:	b510      	push	{r4, lr}
 801009a:	4604      	mov	r4, r0
 801009c:	f7ff fff0 	bl	8010080 <__sfp_lock_acquire>
 80100a0:	6a23      	ldr	r3, [r4, #32]
 80100a2:	b11b      	cbz	r3, 80100ac <__sinit+0x14>
 80100a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a8:	f7ff bff0 	b.w	801008c <__sfp_lock_release>
 80100ac:	4b04      	ldr	r3, [pc, #16]	@ (80100c0 <__sinit+0x28>)
 80100ae:	6223      	str	r3, [r4, #32]
 80100b0:	4b04      	ldr	r3, [pc, #16]	@ (80100c4 <__sinit+0x2c>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d1f5      	bne.n	80100a4 <__sinit+0xc>
 80100b8:	f7ff ffc4 	bl	8010044 <global_stdio_init.part.0>
 80100bc:	e7f2      	b.n	80100a4 <__sinit+0xc>
 80100be:	bf00      	nop
 80100c0:	08010005 	.word	0x08010005
 80100c4:	20007f94 	.word	0x20007f94

080100c8 <_fwalk_sglue>:
 80100c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100cc:	4607      	mov	r7, r0
 80100ce:	4688      	mov	r8, r1
 80100d0:	4614      	mov	r4, r2
 80100d2:	2600      	movs	r6, #0
 80100d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100d8:	f1b9 0901 	subs.w	r9, r9, #1
 80100dc:	d505      	bpl.n	80100ea <_fwalk_sglue+0x22>
 80100de:	6824      	ldr	r4, [r4, #0]
 80100e0:	2c00      	cmp	r4, #0
 80100e2:	d1f7      	bne.n	80100d4 <_fwalk_sglue+0xc>
 80100e4:	4630      	mov	r0, r6
 80100e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ea:	89ab      	ldrh	r3, [r5, #12]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d907      	bls.n	8010100 <_fwalk_sglue+0x38>
 80100f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100f4:	3301      	adds	r3, #1
 80100f6:	d003      	beq.n	8010100 <_fwalk_sglue+0x38>
 80100f8:	4629      	mov	r1, r5
 80100fa:	4638      	mov	r0, r7
 80100fc:	47c0      	blx	r8
 80100fe:	4306      	orrs	r6, r0
 8010100:	3568      	adds	r5, #104	@ 0x68
 8010102:	e7e9      	b.n	80100d8 <_fwalk_sglue+0x10>

08010104 <iprintf>:
 8010104:	b40f      	push	{r0, r1, r2, r3}
 8010106:	b507      	push	{r0, r1, r2, lr}
 8010108:	4906      	ldr	r1, [pc, #24]	@ (8010124 <iprintf+0x20>)
 801010a:	ab04      	add	r3, sp, #16
 801010c:	6808      	ldr	r0, [r1, #0]
 801010e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010112:	6881      	ldr	r1, [r0, #8]
 8010114:	9301      	str	r3, [sp, #4]
 8010116:	f000 fb21 	bl	801075c <_vfiprintf_r>
 801011a:	b003      	add	sp, #12
 801011c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010120:	b004      	add	sp, #16
 8010122:	4770      	bx	lr
 8010124:	2000007c 	.word	0x2000007c

08010128 <putchar>:
 8010128:	4b02      	ldr	r3, [pc, #8]	@ (8010134 <putchar+0xc>)
 801012a:	4601      	mov	r1, r0
 801012c:	6818      	ldr	r0, [r3, #0]
 801012e:	6882      	ldr	r2, [r0, #8]
 8010130:	f000 bed8 	b.w	8010ee4 <_putc_r>
 8010134:	2000007c 	.word	0x2000007c

08010138 <_puts_r>:
 8010138:	6a03      	ldr	r3, [r0, #32]
 801013a:	b570      	push	{r4, r5, r6, lr}
 801013c:	6884      	ldr	r4, [r0, #8]
 801013e:	4605      	mov	r5, r0
 8010140:	460e      	mov	r6, r1
 8010142:	b90b      	cbnz	r3, 8010148 <_puts_r+0x10>
 8010144:	f7ff ffa8 	bl	8010098 <__sinit>
 8010148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801014a:	07db      	lsls	r3, r3, #31
 801014c:	d405      	bmi.n	801015a <_puts_r+0x22>
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	0598      	lsls	r0, r3, #22
 8010152:	d402      	bmi.n	801015a <_puts_r+0x22>
 8010154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010156:	f000 f9a8 	bl	80104aa <__retarget_lock_acquire_recursive>
 801015a:	89a3      	ldrh	r3, [r4, #12]
 801015c:	0719      	lsls	r1, r3, #28
 801015e:	d502      	bpl.n	8010166 <_puts_r+0x2e>
 8010160:	6923      	ldr	r3, [r4, #16]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d135      	bne.n	80101d2 <_puts_r+0x9a>
 8010166:	4621      	mov	r1, r4
 8010168:	4628      	mov	r0, r5
 801016a:	f000 f8c5 	bl	80102f8 <__swsetup_r>
 801016e:	b380      	cbz	r0, 80101d2 <_puts_r+0x9a>
 8010170:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010174:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010176:	07da      	lsls	r2, r3, #31
 8010178:	d405      	bmi.n	8010186 <_puts_r+0x4e>
 801017a:	89a3      	ldrh	r3, [r4, #12]
 801017c:	059b      	lsls	r3, r3, #22
 801017e:	d402      	bmi.n	8010186 <_puts_r+0x4e>
 8010180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010182:	f000 f993 	bl	80104ac <__retarget_lock_release_recursive>
 8010186:	4628      	mov	r0, r5
 8010188:	bd70      	pop	{r4, r5, r6, pc}
 801018a:	2b00      	cmp	r3, #0
 801018c:	da04      	bge.n	8010198 <_puts_r+0x60>
 801018e:	69a2      	ldr	r2, [r4, #24]
 8010190:	429a      	cmp	r2, r3
 8010192:	dc17      	bgt.n	80101c4 <_puts_r+0x8c>
 8010194:	290a      	cmp	r1, #10
 8010196:	d015      	beq.n	80101c4 <_puts_r+0x8c>
 8010198:	6823      	ldr	r3, [r4, #0]
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	6022      	str	r2, [r4, #0]
 801019e:	7019      	strb	r1, [r3, #0]
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80101a6:	3b01      	subs	r3, #1
 80101a8:	60a3      	str	r3, [r4, #8]
 80101aa:	2900      	cmp	r1, #0
 80101ac:	d1ed      	bne.n	801018a <_puts_r+0x52>
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	da11      	bge.n	80101d6 <_puts_r+0x9e>
 80101b2:	4622      	mov	r2, r4
 80101b4:	210a      	movs	r1, #10
 80101b6:	4628      	mov	r0, r5
 80101b8:	f000 f85f 	bl	801027a <__swbuf_r>
 80101bc:	3001      	adds	r0, #1
 80101be:	d0d7      	beq.n	8010170 <_puts_r+0x38>
 80101c0:	250a      	movs	r5, #10
 80101c2:	e7d7      	b.n	8010174 <_puts_r+0x3c>
 80101c4:	4622      	mov	r2, r4
 80101c6:	4628      	mov	r0, r5
 80101c8:	f000 f857 	bl	801027a <__swbuf_r>
 80101cc:	3001      	adds	r0, #1
 80101ce:	d1e7      	bne.n	80101a0 <_puts_r+0x68>
 80101d0:	e7ce      	b.n	8010170 <_puts_r+0x38>
 80101d2:	3e01      	subs	r6, #1
 80101d4:	e7e4      	b.n	80101a0 <_puts_r+0x68>
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	1c5a      	adds	r2, r3, #1
 80101da:	6022      	str	r2, [r4, #0]
 80101dc:	220a      	movs	r2, #10
 80101de:	701a      	strb	r2, [r3, #0]
 80101e0:	e7ee      	b.n	80101c0 <_puts_r+0x88>
	...

080101e4 <puts>:
 80101e4:	4b02      	ldr	r3, [pc, #8]	@ (80101f0 <puts+0xc>)
 80101e6:	4601      	mov	r1, r0
 80101e8:	6818      	ldr	r0, [r3, #0]
 80101ea:	f7ff bfa5 	b.w	8010138 <_puts_r>
 80101ee:	bf00      	nop
 80101f0:	2000007c 	.word	0x2000007c

080101f4 <__sread>:
 80101f4:	b510      	push	{r4, lr}
 80101f6:	460c      	mov	r4, r1
 80101f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101fc:	f000 f90c 	bl	8010418 <_read_r>
 8010200:	2800      	cmp	r0, #0
 8010202:	bfab      	itete	ge
 8010204:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010206:	89a3      	ldrhlt	r3, [r4, #12]
 8010208:	181b      	addge	r3, r3, r0
 801020a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801020e:	bfac      	ite	ge
 8010210:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010212:	81a3      	strhlt	r3, [r4, #12]
 8010214:	bd10      	pop	{r4, pc}

08010216 <__swrite>:
 8010216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801021a:	461f      	mov	r7, r3
 801021c:	898b      	ldrh	r3, [r1, #12]
 801021e:	05db      	lsls	r3, r3, #23
 8010220:	4605      	mov	r5, r0
 8010222:	460c      	mov	r4, r1
 8010224:	4616      	mov	r6, r2
 8010226:	d505      	bpl.n	8010234 <__swrite+0x1e>
 8010228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801022c:	2302      	movs	r3, #2
 801022e:	2200      	movs	r2, #0
 8010230:	f000 f8e0 	bl	80103f4 <_lseek_r>
 8010234:	89a3      	ldrh	r3, [r4, #12]
 8010236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801023a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	4632      	mov	r2, r6
 8010242:	463b      	mov	r3, r7
 8010244:	4628      	mov	r0, r5
 8010246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801024a:	f000 b8f7 	b.w	801043c <_write_r>

0801024e <__sseek>:
 801024e:	b510      	push	{r4, lr}
 8010250:	460c      	mov	r4, r1
 8010252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010256:	f000 f8cd 	bl	80103f4 <_lseek_r>
 801025a:	1c43      	adds	r3, r0, #1
 801025c:	89a3      	ldrh	r3, [r4, #12]
 801025e:	bf15      	itete	ne
 8010260:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010262:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010266:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801026a:	81a3      	strheq	r3, [r4, #12]
 801026c:	bf18      	it	ne
 801026e:	81a3      	strhne	r3, [r4, #12]
 8010270:	bd10      	pop	{r4, pc}

08010272 <__sclose>:
 8010272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010276:	f000 b8ad 	b.w	80103d4 <_close_r>

0801027a <__swbuf_r>:
 801027a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027c:	460e      	mov	r6, r1
 801027e:	4614      	mov	r4, r2
 8010280:	4605      	mov	r5, r0
 8010282:	b118      	cbz	r0, 801028c <__swbuf_r+0x12>
 8010284:	6a03      	ldr	r3, [r0, #32]
 8010286:	b90b      	cbnz	r3, 801028c <__swbuf_r+0x12>
 8010288:	f7ff ff06 	bl	8010098 <__sinit>
 801028c:	69a3      	ldr	r3, [r4, #24]
 801028e:	60a3      	str	r3, [r4, #8]
 8010290:	89a3      	ldrh	r3, [r4, #12]
 8010292:	071a      	lsls	r2, r3, #28
 8010294:	d501      	bpl.n	801029a <__swbuf_r+0x20>
 8010296:	6923      	ldr	r3, [r4, #16]
 8010298:	b943      	cbnz	r3, 80102ac <__swbuf_r+0x32>
 801029a:	4621      	mov	r1, r4
 801029c:	4628      	mov	r0, r5
 801029e:	f000 f82b 	bl	80102f8 <__swsetup_r>
 80102a2:	b118      	cbz	r0, 80102ac <__swbuf_r+0x32>
 80102a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80102a8:	4638      	mov	r0, r7
 80102aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	6922      	ldr	r2, [r4, #16]
 80102b0:	1a98      	subs	r0, r3, r2
 80102b2:	6963      	ldr	r3, [r4, #20]
 80102b4:	b2f6      	uxtb	r6, r6
 80102b6:	4283      	cmp	r3, r0
 80102b8:	4637      	mov	r7, r6
 80102ba:	dc05      	bgt.n	80102c8 <__swbuf_r+0x4e>
 80102bc:	4621      	mov	r1, r4
 80102be:	4628      	mov	r0, r5
 80102c0:	f000 fd74 	bl	8010dac <_fflush_r>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d1ed      	bne.n	80102a4 <__swbuf_r+0x2a>
 80102c8:	68a3      	ldr	r3, [r4, #8]
 80102ca:	3b01      	subs	r3, #1
 80102cc:	60a3      	str	r3, [r4, #8]
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	1c5a      	adds	r2, r3, #1
 80102d2:	6022      	str	r2, [r4, #0]
 80102d4:	701e      	strb	r6, [r3, #0]
 80102d6:	6962      	ldr	r2, [r4, #20]
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	429a      	cmp	r2, r3
 80102dc:	d004      	beq.n	80102e8 <__swbuf_r+0x6e>
 80102de:	89a3      	ldrh	r3, [r4, #12]
 80102e0:	07db      	lsls	r3, r3, #31
 80102e2:	d5e1      	bpl.n	80102a8 <__swbuf_r+0x2e>
 80102e4:	2e0a      	cmp	r6, #10
 80102e6:	d1df      	bne.n	80102a8 <__swbuf_r+0x2e>
 80102e8:	4621      	mov	r1, r4
 80102ea:	4628      	mov	r0, r5
 80102ec:	f000 fd5e 	bl	8010dac <_fflush_r>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d0d9      	beq.n	80102a8 <__swbuf_r+0x2e>
 80102f4:	e7d6      	b.n	80102a4 <__swbuf_r+0x2a>
	...

080102f8 <__swsetup_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4b29      	ldr	r3, [pc, #164]	@ (80103a0 <__swsetup_r+0xa8>)
 80102fc:	4605      	mov	r5, r0
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	460c      	mov	r4, r1
 8010302:	b118      	cbz	r0, 801030c <__swsetup_r+0x14>
 8010304:	6a03      	ldr	r3, [r0, #32]
 8010306:	b90b      	cbnz	r3, 801030c <__swsetup_r+0x14>
 8010308:	f7ff fec6 	bl	8010098 <__sinit>
 801030c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010310:	0719      	lsls	r1, r3, #28
 8010312:	d422      	bmi.n	801035a <__swsetup_r+0x62>
 8010314:	06da      	lsls	r2, r3, #27
 8010316:	d407      	bmi.n	8010328 <__swsetup_r+0x30>
 8010318:	2209      	movs	r2, #9
 801031a:	602a      	str	r2, [r5, #0]
 801031c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010320:	81a3      	strh	r3, [r4, #12]
 8010322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010326:	e033      	b.n	8010390 <__swsetup_r+0x98>
 8010328:	0758      	lsls	r0, r3, #29
 801032a:	d512      	bpl.n	8010352 <__swsetup_r+0x5a>
 801032c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801032e:	b141      	cbz	r1, 8010342 <__swsetup_r+0x4a>
 8010330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010334:	4299      	cmp	r1, r3
 8010336:	d002      	beq.n	801033e <__swsetup_r+0x46>
 8010338:	4628      	mov	r0, r5
 801033a:	f000 f8e5 	bl	8010508 <_free_r>
 801033e:	2300      	movs	r3, #0
 8010340:	6363      	str	r3, [r4, #52]	@ 0x34
 8010342:	89a3      	ldrh	r3, [r4, #12]
 8010344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010348:	81a3      	strh	r3, [r4, #12]
 801034a:	2300      	movs	r3, #0
 801034c:	6063      	str	r3, [r4, #4]
 801034e:	6923      	ldr	r3, [r4, #16]
 8010350:	6023      	str	r3, [r4, #0]
 8010352:	89a3      	ldrh	r3, [r4, #12]
 8010354:	f043 0308 	orr.w	r3, r3, #8
 8010358:	81a3      	strh	r3, [r4, #12]
 801035a:	6923      	ldr	r3, [r4, #16]
 801035c:	b94b      	cbnz	r3, 8010372 <__swsetup_r+0x7a>
 801035e:	89a3      	ldrh	r3, [r4, #12]
 8010360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010368:	d003      	beq.n	8010372 <__swsetup_r+0x7a>
 801036a:	4621      	mov	r1, r4
 801036c:	4628      	mov	r0, r5
 801036e:	f000 fd7d 	bl	8010e6c <__smakebuf_r>
 8010372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010376:	f013 0201 	ands.w	r2, r3, #1
 801037a:	d00a      	beq.n	8010392 <__swsetup_r+0x9a>
 801037c:	2200      	movs	r2, #0
 801037e:	60a2      	str	r2, [r4, #8]
 8010380:	6962      	ldr	r2, [r4, #20]
 8010382:	4252      	negs	r2, r2
 8010384:	61a2      	str	r2, [r4, #24]
 8010386:	6922      	ldr	r2, [r4, #16]
 8010388:	b942      	cbnz	r2, 801039c <__swsetup_r+0xa4>
 801038a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801038e:	d1c5      	bne.n	801031c <__swsetup_r+0x24>
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	0799      	lsls	r1, r3, #30
 8010394:	bf58      	it	pl
 8010396:	6962      	ldrpl	r2, [r4, #20]
 8010398:	60a2      	str	r2, [r4, #8]
 801039a:	e7f4      	b.n	8010386 <__swsetup_r+0x8e>
 801039c:	2000      	movs	r0, #0
 801039e:	e7f7      	b.n	8010390 <__swsetup_r+0x98>
 80103a0:	2000007c 	.word	0x2000007c

080103a4 <memcmp>:
 80103a4:	b510      	push	{r4, lr}
 80103a6:	3901      	subs	r1, #1
 80103a8:	4402      	add	r2, r0
 80103aa:	4290      	cmp	r0, r2
 80103ac:	d101      	bne.n	80103b2 <memcmp+0xe>
 80103ae:	2000      	movs	r0, #0
 80103b0:	e005      	b.n	80103be <memcmp+0x1a>
 80103b2:	7803      	ldrb	r3, [r0, #0]
 80103b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80103b8:	42a3      	cmp	r3, r4
 80103ba:	d001      	beq.n	80103c0 <memcmp+0x1c>
 80103bc:	1b18      	subs	r0, r3, r4
 80103be:	bd10      	pop	{r4, pc}
 80103c0:	3001      	adds	r0, #1
 80103c2:	e7f2      	b.n	80103aa <memcmp+0x6>

080103c4 <memset>:
 80103c4:	4402      	add	r2, r0
 80103c6:	4603      	mov	r3, r0
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d100      	bne.n	80103ce <memset+0xa>
 80103cc:	4770      	bx	lr
 80103ce:	f803 1b01 	strb.w	r1, [r3], #1
 80103d2:	e7f9      	b.n	80103c8 <memset+0x4>

080103d4 <_close_r>:
 80103d4:	b538      	push	{r3, r4, r5, lr}
 80103d6:	4d06      	ldr	r5, [pc, #24]	@ (80103f0 <_close_r+0x1c>)
 80103d8:	2300      	movs	r3, #0
 80103da:	4604      	mov	r4, r0
 80103dc:	4608      	mov	r0, r1
 80103de:	602b      	str	r3, [r5, #0]
 80103e0:	f7f0 fa9c 	bl	800091c <_close>
 80103e4:	1c43      	adds	r3, r0, #1
 80103e6:	d102      	bne.n	80103ee <_close_r+0x1a>
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	b103      	cbz	r3, 80103ee <_close_r+0x1a>
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	bd38      	pop	{r3, r4, r5, pc}
 80103f0:	20007f98 	.word	0x20007f98

080103f4 <_lseek_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d07      	ldr	r5, [pc, #28]	@ (8010414 <_lseek_r+0x20>)
 80103f8:	4604      	mov	r4, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	4611      	mov	r1, r2
 80103fe:	2200      	movs	r2, #0
 8010400:	602a      	str	r2, [r5, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	f7f0 fab1 	bl	800096a <_lseek>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_lseek_r+0x1e>
 801040c:	682b      	ldr	r3, [r5, #0]
 801040e:	b103      	cbz	r3, 8010412 <_lseek_r+0x1e>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20007f98 	.word	0x20007f98

08010418 <_read_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d07      	ldr	r5, [pc, #28]	@ (8010438 <_read_r+0x20>)
 801041c:	4604      	mov	r4, r0
 801041e:	4608      	mov	r0, r1
 8010420:	4611      	mov	r1, r2
 8010422:	2200      	movs	r2, #0
 8010424:	602a      	str	r2, [r5, #0]
 8010426:	461a      	mov	r2, r3
 8010428:	f7f0 fa5b 	bl	80008e2 <_read>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_read_r+0x1e>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_read_r+0x1e>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	20007f98 	.word	0x20007f98

0801043c <_write_r>:
 801043c:	b538      	push	{r3, r4, r5, lr}
 801043e:	4d07      	ldr	r5, [pc, #28]	@ (801045c <_write_r+0x20>)
 8010440:	4604      	mov	r4, r0
 8010442:	4608      	mov	r0, r1
 8010444:	4611      	mov	r1, r2
 8010446:	2200      	movs	r2, #0
 8010448:	602a      	str	r2, [r5, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	f7f0 f90e 	bl	800066c <_write>
 8010450:	1c43      	adds	r3, r0, #1
 8010452:	d102      	bne.n	801045a <_write_r+0x1e>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	b103      	cbz	r3, 801045a <_write_r+0x1e>
 8010458:	6023      	str	r3, [r4, #0]
 801045a:	bd38      	pop	{r3, r4, r5, pc}
 801045c:	20007f98 	.word	0x20007f98

08010460 <__libc_init_array>:
 8010460:	b570      	push	{r4, r5, r6, lr}
 8010462:	4d0d      	ldr	r5, [pc, #52]	@ (8010498 <__libc_init_array+0x38>)
 8010464:	4c0d      	ldr	r4, [pc, #52]	@ (801049c <__libc_init_array+0x3c>)
 8010466:	1b64      	subs	r4, r4, r5
 8010468:	10a4      	asrs	r4, r4, #2
 801046a:	2600      	movs	r6, #0
 801046c:	42a6      	cmp	r6, r4
 801046e:	d109      	bne.n	8010484 <__libc_init_array+0x24>
 8010470:	4d0b      	ldr	r5, [pc, #44]	@ (80104a0 <__libc_init_array+0x40>)
 8010472:	4c0c      	ldr	r4, [pc, #48]	@ (80104a4 <__libc_init_array+0x44>)
 8010474:	f000 fde8 	bl	8011048 <_init>
 8010478:	1b64      	subs	r4, r4, r5
 801047a:	10a4      	asrs	r4, r4, #2
 801047c:	2600      	movs	r6, #0
 801047e:	42a6      	cmp	r6, r4
 8010480:	d105      	bne.n	801048e <__libc_init_array+0x2e>
 8010482:	bd70      	pop	{r4, r5, r6, pc}
 8010484:	f855 3b04 	ldr.w	r3, [r5], #4
 8010488:	4798      	blx	r3
 801048a:	3601      	adds	r6, #1
 801048c:	e7ee      	b.n	801046c <__libc_init_array+0xc>
 801048e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010492:	4798      	blx	r3
 8010494:	3601      	adds	r6, #1
 8010496:	e7f2      	b.n	801047e <__libc_init_array+0x1e>
 8010498:	08014680 	.word	0x08014680
 801049c:	08014680 	.word	0x08014680
 80104a0:	08014680 	.word	0x08014680
 80104a4:	08014684 	.word	0x08014684

080104a8 <__retarget_lock_init_recursive>:
 80104a8:	4770      	bx	lr

080104aa <__retarget_lock_acquire_recursive>:
 80104aa:	4770      	bx	lr

080104ac <__retarget_lock_release_recursive>:
 80104ac:	4770      	bx	lr

080104ae <memcpy>:
 80104ae:	440a      	add	r2, r1
 80104b0:	4291      	cmp	r1, r2
 80104b2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80104b6:	d100      	bne.n	80104ba <memcpy+0xc>
 80104b8:	4770      	bx	lr
 80104ba:	b510      	push	{r4, lr}
 80104bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104c4:	4291      	cmp	r1, r2
 80104c6:	d1f9      	bne.n	80104bc <memcpy+0xe>
 80104c8:	bd10      	pop	{r4, pc}
	...

080104cc <__assert_func>:
 80104cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104ce:	4614      	mov	r4, r2
 80104d0:	461a      	mov	r2, r3
 80104d2:	4b09      	ldr	r3, [pc, #36]	@ (80104f8 <__assert_func+0x2c>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4605      	mov	r5, r0
 80104d8:	68d8      	ldr	r0, [r3, #12]
 80104da:	b14c      	cbz	r4, 80104f0 <__assert_func+0x24>
 80104dc:	4b07      	ldr	r3, [pc, #28]	@ (80104fc <__assert_func+0x30>)
 80104de:	9100      	str	r1, [sp, #0]
 80104e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104e4:	4906      	ldr	r1, [pc, #24]	@ (8010500 <__assert_func+0x34>)
 80104e6:	462b      	mov	r3, r5
 80104e8:	f000 fc88 	bl	8010dfc <fiprintf>
 80104ec:	f000 fd60 	bl	8010fb0 <abort>
 80104f0:	4b04      	ldr	r3, [pc, #16]	@ (8010504 <__assert_func+0x38>)
 80104f2:	461c      	mov	r4, r3
 80104f4:	e7f3      	b.n	80104de <__assert_func+0x12>
 80104f6:	bf00      	nop
 80104f8:	2000007c 	.word	0x2000007c
 80104fc:	08014609 	.word	0x08014609
 8010500:	08014616 	.word	0x08014616
 8010504:	08014644 	.word	0x08014644

08010508 <_free_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4605      	mov	r5, r0
 801050c:	2900      	cmp	r1, #0
 801050e:	d041      	beq.n	8010594 <_free_r+0x8c>
 8010510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010514:	1f0c      	subs	r4, r1, #4
 8010516:	2b00      	cmp	r3, #0
 8010518:	bfb8      	it	lt
 801051a:	18e4      	addlt	r4, r4, r3
 801051c:	f000 f8e8 	bl	80106f0 <__malloc_lock>
 8010520:	4a1d      	ldr	r2, [pc, #116]	@ (8010598 <_free_r+0x90>)
 8010522:	6813      	ldr	r3, [r2, #0]
 8010524:	b933      	cbnz	r3, 8010534 <_free_r+0x2c>
 8010526:	6063      	str	r3, [r4, #4]
 8010528:	6014      	str	r4, [r2, #0]
 801052a:	4628      	mov	r0, r5
 801052c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010530:	f000 b8e4 	b.w	80106fc <__malloc_unlock>
 8010534:	42a3      	cmp	r3, r4
 8010536:	d908      	bls.n	801054a <_free_r+0x42>
 8010538:	6820      	ldr	r0, [r4, #0]
 801053a:	1821      	adds	r1, r4, r0
 801053c:	428b      	cmp	r3, r1
 801053e:	bf01      	itttt	eq
 8010540:	6819      	ldreq	r1, [r3, #0]
 8010542:	685b      	ldreq	r3, [r3, #4]
 8010544:	1809      	addeq	r1, r1, r0
 8010546:	6021      	streq	r1, [r4, #0]
 8010548:	e7ed      	b.n	8010526 <_free_r+0x1e>
 801054a:	461a      	mov	r2, r3
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	b10b      	cbz	r3, 8010554 <_free_r+0x4c>
 8010550:	42a3      	cmp	r3, r4
 8010552:	d9fa      	bls.n	801054a <_free_r+0x42>
 8010554:	6811      	ldr	r1, [r2, #0]
 8010556:	1850      	adds	r0, r2, r1
 8010558:	42a0      	cmp	r0, r4
 801055a:	d10b      	bne.n	8010574 <_free_r+0x6c>
 801055c:	6820      	ldr	r0, [r4, #0]
 801055e:	4401      	add	r1, r0
 8010560:	1850      	adds	r0, r2, r1
 8010562:	4283      	cmp	r3, r0
 8010564:	6011      	str	r1, [r2, #0]
 8010566:	d1e0      	bne.n	801052a <_free_r+0x22>
 8010568:	6818      	ldr	r0, [r3, #0]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	6053      	str	r3, [r2, #4]
 801056e:	4408      	add	r0, r1
 8010570:	6010      	str	r0, [r2, #0]
 8010572:	e7da      	b.n	801052a <_free_r+0x22>
 8010574:	d902      	bls.n	801057c <_free_r+0x74>
 8010576:	230c      	movs	r3, #12
 8010578:	602b      	str	r3, [r5, #0]
 801057a:	e7d6      	b.n	801052a <_free_r+0x22>
 801057c:	6820      	ldr	r0, [r4, #0]
 801057e:	1821      	adds	r1, r4, r0
 8010580:	428b      	cmp	r3, r1
 8010582:	bf04      	itt	eq
 8010584:	6819      	ldreq	r1, [r3, #0]
 8010586:	685b      	ldreq	r3, [r3, #4]
 8010588:	6063      	str	r3, [r4, #4]
 801058a:	bf04      	itt	eq
 801058c:	1809      	addeq	r1, r1, r0
 801058e:	6021      	streq	r1, [r4, #0]
 8010590:	6054      	str	r4, [r2, #4]
 8010592:	e7ca      	b.n	801052a <_free_r+0x22>
 8010594:	bd38      	pop	{r3, r4, r5, pc}
 8010596:	bf00      	nop
 8010598:	20007fa4 	.word	0x20007fa4

0801059c <malloc>:
 801059c:	4b02      	ldr	r3, [pc, #8]	@ (80105a8 <malloc+0xc>)
 801059e:	4601      	mov	r1, r0
 80105a0:	6818      	ldr	r0, [r3, #0]
 80105a2:	f000 b825 	b.w	80105f0 <_malloc_r>
 80105a6:	bf00      	nop
 80105a8:	2000007c 	.word	0x2000007c

080105ac <sbrk_aligned>:
 80105ac:	b570      	push	{r4, r5, r6, lr}
 80105ae:	4e0f      	ldr	r6, [pc, #60]	@ (80105ec <sbrk_aligned+0x40>)
 80105b0:	460c      	mov	r4, r1
 80105b2:	6831      	ldr	r1, [r6, #0]
 80105b4:	4605      	mov	r5, r0
 80105b6:	b911      	cbnz	r1, 80105be <sbrk_aligned+0x12>
 80105b8:	f000 fcea 	bl	8010f90 <_sbrk_r>
 80105bc:	6030      	str	r0, [r6, #0]
 80105be:	4621      	mov	r1, r4
 80105c0:	4628      	mov	r0, r5
 80105c2:	f000 fce5 	bl	8010f90 <_sbrk_r>
 80105c6:	1c43      	adds	r3, r0, #1
 80105c8:	d103      	bne.n	80105d2 <sbrk_aligned+0x26>
 80105ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80105ce:	4620      	mov	r0, r4
 80105d0:	bd70      	pop	{r4, r5, r6, pc}
 80105d2:	1cc4      	adds	r4, r0, #3
 80105d4:	f024 0403 	bic.w	r4, r4, #3
 80105d8:	42a0      	cmp	r0, r4
 80105da:	d0f8      	beq.n	80105ce <sbrk_aligned+0x22>
 80105dc:	1a21      	subs	r1, r4, r0
 80105de:	4628      	mov	r0, r5
 80105e0:	f000 fcd6 	bl	8010f90 <_sbrk_r>
 80105e4:	3001      	adds	r0, #1
 80105e6:	d1f2      	bne.n	80105ce <sbrk_aligned+0x22>
 80105e8:	e7ef      	b.n	80105ca <sbrk_aligned+0x1e>
 80105ea:	bf00      	nop
 80105ec:	20007fa0 	.word	0x20007fa0

080105f0 <_malloc_r>:
 80105f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105f4:	1ccd      	adds	r5, r1, #3
 80105f6:	f025 0503 	bic.w	r5, r5, #3
 80105fa:	3508      	adds	r5, #8
 80105fc:	2d0c      	cmp	r5, #12
 80105fe:	bf38      	it	cc
 8010600:	250c      	movcc	r5, #12
 8010602:	2d00      	cmp	r5, #0
 8010604:	4606      	mov	r6, r0
 8010606:	db01      	blt.n	801060c <_malloc_r+0x1c>
 8010608:	42a9      	cmp	r1, r5
 801060a:	d904      	bls.n	8010616 <_malloc_r+0x26>
 801060c:	230c      	movs	r3, #12
 801060e:	6033      	str	r3, [r6, #0]
 8010610:	2000      	movs	r0, #0
 8010612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010616:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80106ec <_malloc_r+0xfc>
 801061a:	f000 f869 	bl	80106f0 <__malloc_lock>
 801061e:	f8d8 3000 	ldr.w	r3, [r8]
 8010622:	461c      	mov	r4, r3
 8010624:	bb44      	cbnz	r4, 8010678 <_malloc_r+0x88>
 8010626:	4629      	mov	r1, r5
 8010628:	4630      	mov	r0, r6
 801062a:	f7ff ffbf 	bl	80105ac <sbrk_aligned>
 801062e:	1c43      	adds	r3, r0, #1
 8010630:	4604      	mov	r4, r0
 8010632:	d158      	bne.n	80106e6 <_malloc_r+0xf6>
 8010634:	f8d8 4000 	ldr.w	r4, [r8]
 8010638:	4627      	mov	r7, r4
 801063a:	2f00      	cmp	r7, #0
 801063c:	d143      	bne.n	80106c6 <_malloc_r+0xd6>
 801063e:	2c00      	cmp	r4, #0
 8010640:	d04b      	beq.n	80106da <_malloc_r+0xea>
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	4639      	mov	r1, r7
 8010646:	4630      	mov	r0, r6
 8010648:	eb04 0903 	add.w	r9, r4, r3
 801064c:	f000 fca0 	bl	8010f90 <_sbrk_r>
 8010650:	4581      	cmp	r9, r0
 8010652:	d142      	bne.n	80106da <_malloc_r+0xea>
 8010654:	6821      	ldr	r1, [r4, #0]
 8010656:	1a6d      	subs	r5, r5, r1
 8010658:	4629      	mov	r1, r5
 801065a:	4630      	mov	r0, r6
 801065c:	f7ff ffa6 	bl	80105ac <sbrk_aligned>
 8010660:	3001      	adds	r0, #1
 8010662:	d03a      	beq.n	80106da <_malloc_r+0xea>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	442b      	add	r3, r5
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	f8d8 3000 	ldr.w	r3, [r8]
 801066e:	685a      	ldr	r2, [r3, #4]
 8010670:	bb62      	cbnz	r2, 80106cc <_malloc_r+0xdc>
 8010672:	f8c8 7000 	str.w	r7, [r8]
 8010676:	e00f      	b.n	8010698 <_malloc_r+0xa8>
 8010678:	6822      	ldr	r2, [r4, #0]
 801067a:	1b52      	subs	r2, r2, r5
 801067c:	d420      	bmi.n	80106c0 <_malloc_r+0xd0>
 801067e:	2a0b      	cmp	r2, #11
 8010680:	d917      	bls.n	80106b2 <_malloc_r+0xc2>
 8010682:	1961      	adds	r1, r4, r5
 8010684:	42a3      	cmp	r3, r4
 8010686:	6025      	str	r5, [r4, #0]
 8010688:	bf18      	it	ne
 801068a:	6059      	strne	r1, [r3, #4]
 801068c:	6863      	ldr	r3, [r4, #4]
 801068e:	bf08      	it	eq
 8010690:	f8c8 1000 	streq.w	r1, [r8]
 8010694:	5162      	str	r2, [r4, r5]
 8010696:	604b      	str	r3, [r1, #4]
 8010698:	4630      	mov	r0, r6
 801069a:	f000 f82f 	bl	80106fc <__malloc_unlock>
 801069e:	f104 000b 	add.w	r0, r4, #11
 80106a2:	1d23      	adds	r3, r4, #4
 80106a4:	f020 0007 	bic.w	r0, r0, #7
 80106a8:	1ac2      	subs	r2, r0, r3
 80106aa:	bf1c      	itt	ne
 80106ac:	1a1b      	subne	r3, r3, r0
 80106ae:	50a3      	strne	r3, [r4, r2]
 80106b0:	e7af      	b.n	8010612 <_malloc_r+0x22>
 80106b2:	6862      	ldr	r2, [r4, #4]
 80106b4:	42a3      	cmp	r3, r4
 80106b6:	bf0c      	ite	eq
 80106b8:	f8c8 2000 	streq.w	r2, [r8]
 80106bc:	605a      	strne	r2, [r3, #4]
 80106be:	e7eb      	b.n	8010698 <_malloc_r+0xa8>
 80106c0:	4623      	mov	r3, r4
 80106c2:	6864      	ldr	r4, [r4, #4]
 80106c4:	e7ae      	b.n	8010624 <_malloc_r+0x34>
 80106c6:	463c      	mov	r4, r7
 80106c8:	687f      	ldr	r7, [r7, #4]
 80106ca:	e7b6      	b.n	801063a <_malloc_r+0x4a>
 80106cc:	461a      	mov	r2, r3
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	42a3      	cmp	r3, r4
 80106d2:	d1fb      	bne.n	80106cc <_malloc_r+0xdc>
 80106d4:	2300      	movs	r3, #0
 80106d6:	6053      	str	r3, [r2, #4]
 80106d8:	e7de      	b.n	8010698 <_malloc_r+0xa8>
 80106da:	230c      	movs	r3, #12
 80106dc:	6033      	str	r3, [r6, #0]
 80106de:	4630      	mov	r0, r6
 80106e0:	f000 f80c 	bl	80106fc <__malloc_unlock>
 80106e4:	e794      	b.n	8010610 <_malloc_r+0x20>
 80106e6:	6005      	str	r5, [r0, #0]
 80106e8:	e7d6      	b.n	8010698 <_malloc_r+0xa8>
 80106ea:	bf00      	nop
 80106ec:	20007fa4 	.word	0x20007fa4

080106f0 <__malloc_lock>:
 80106f0:	4801      	ldr	r0, [pc, #4]	@ (80106f8 <__malloc_lock+0x8>)
 80106f2:	f7ff beda 	b.w	80104aa <__retarget_lock_acquire_recursive>
 80106f6:	bf00      	nop
 80106f8:	20007f9c 	.word	0x20007f9c

080106fc <__malloc_unlock>:
 80106fc:	4801      	ldr	r0, [pc, #4]	@ (8010704 <__malloc_unlock+0x8>)
 80106fe:	f7ff bed5 	b.w	80104ac <__retarget_lock_release_recursive>
 8010702:	bf00      	nop
 8010704:	20007f9c 	.word	0x20007f9c

08010708 <__sfputc_r>:
 8010708:	6893      	ldr	r3, [r2, #8]
 801070a:	3b01      	subs	r3, #1
 801070c:	2b00      	cmp	r3, #0
 801070e:	b410      	push	{r4}
 8010710:	6093      	str	r3, [r2, #8]
 8010712:	da08      	bge.n	8010726 <__sfputc_r+0x1e>
 8010714:	6994      	ldr	r4, [r2, #24]
 8010716:	42a3      	cmp	r3, r4
 8010718:	db01      	blt.n	801071e <__sfputc_r+0x16>
 801071a:	290a      	cmp	r1, #10
 801071c:	d103      	bne.n	8010726 <__sfputc_r+0x1e>
 801071e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010722:	f7ff bdaa 	b.w	801027a <__swbuf_r>
 8010726:	6813      	ldr	r3, [r2, #0]
 8010728:	1c58      	adds	r0, r3, #1
 801072a:	6010      	str	r0, [r2, #0]
 801072c:	7019      	strb	r1, [r3, #0]
 801072e:	4608      	mov	r0, r1
 8010730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010734:	4770      	bx	lr

08010736 <__sfputs_r>:
 8010736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010738:	4606      	mov	r6, r0
 801073a:	460f      	mov	r7, r1
 801073c:	4614      	mov	r4, r2
 801073e:	18d5      	adds	r5, r2, r3
 8010740:	42ac      	cmp	r4, r5
 8010742:	d101      	bne.n	8010748 <__sfputs_r+0x12>
 8010744:	2000      	movs	r0, #0
 8010746:	e007      	b.n	8010758 <__sfputs_r+0x22>
 8010748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801074c:	463a      	mov	r2, r7
 801074e:	4630      	mov	r0, r6
 8010750:	f7ff ffda 	bl	8010708 <__sfputc_r>
 8010754:	1c43      	adds	r3, r0, #1
 8010756:	d1f3      	bne.n	8010740 <__sfputs_r+0xa>
 8010758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801075c <_vfiprintf_r>:
 801075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010760:	460d      	mov	r5, r1
 8010762:	b09d      	sub	sp, #116	@ 0x74
 8010764:	4614      	mov	r4, r2
 8010766:	4698      	mov	r8, r3
 8010768:	4606      	mov	r6, r0
 801076a:	b118      	cbz	r0, 8010774 <_vfiprintf_r+0x18>
 801076c:	6a03      	ldr	r3, [r0, #32]
 801076e:	b90b      	cbnz	r3, 8010774 <_vfiprintf_r+0x18>
 8010770:	f7ff fc92 	bl	8010098 <__sinit>
 8010774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010776:	07d9      	lsls	r1, r3, #31
 8010778:	d405      	bmi.n	8010786 <_vfiprintf_r+0x2a>
 801077a:	89ab      	ldrh	r3, [r5, #12]
 801077c:	059a      	lsls	r2, r3, #22
 801077e:	d402      	bmi.n	8010786 <_vfiprintf_r+0x2a>
 8010780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010782:	f7ff fe92 	bl	80104aa <__retarget_lock_acquire_recursive>
 8010786:	89ab      	ldrh	r3, [r5, #12]
 8010788:	071b      	lsls	r3, r3, #28
 801078a:	d501      	bpl.n	8010790 <_vfiprintf_r+0x34>
 801078c:	692b      	ldr	r3, [r5, #16]
 801078e:	b99b      	cbnz	r3, 80107b8 <_vfiprintf_r+0x5c>
 8010790:	4629      	mov	r1, r5
 8010792:	4630      	mov	r0, r6
 8010794:	f7ff fdb0 	bl	80102f8 <__swsetup_r>
 8010798:	b170      	cbz	r0, 80107b8 <_vfiprintf_r+0x5c>
 801079a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801079c:	07dc      	lsls	r4, r3, #31
 801079e:	d504      	bpl.n	80107aa <_vfiprintf_r+0x4e>
 80107a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107a4:	b01d      	add	sp, #116	@ 0x74
 80107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107aa:	89ab      	ldrh	r3, [r5, #12]
 80107ac:	0598      	lsls	r0, r3, #22
 80107ae:	d4f7      	bmi.n	80107a0 <_vfiprintf_r+0x44>
 80107b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107b2:	f7ff fe7b 	bl	80104ac <__retarget_lock_release_recursive>
 80107b6:	e7f3      	b.n	80107a0 <_vfiprintf_r+0x44>
 80107b8:	2300      	movs	r3, #0
 80107ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80107bc:	2320      	movs	r3, #32
 80107be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80107c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80107c6:	2330      	movs	r3, #48	@ 0x30
 80107c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010978 <_vfiprintf_r+0x21c>
 80107cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80107d0:	f04f 0901 	mov.w	r9, #1
 80107d4:	4623      	mov	r3, r4
 80107d6:	469a      	mov	sl, r3
 80107d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107dc:	b10a      	cbz	r2, 80107e2 <_vfiprintf_r+0x86>
 80107de:	2a25      	cmp	r2, #37	@ 0x25
 80107e0:	d1f9      	bne.n	80107d6 <_vfiprintf_r+0x7a>
 80107e2:	ebba 0b04 	subs.w	fp, sl, r4
 80107e6:	d00b      	beq.n	8010800 <_vfiprintf_r+0xa4>
 80107e8:	465b      	mov	r3, fp
 80107ea:	4622      	mov	r2, r4
 80107ec:	4629      	mov	r1, r5
 80107ee:	4630      	mov	r0, r6
 80107f0:	f7ff ffa1 	bl	8010736 <__sfputs_r>
 80107f4:	3001      	adds	r0, #1
 80107f6:	f000 80a7 	beq.w	8010948 <_vfiprintf_r+0x1ec>
 80107fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107fc:	445a      	add	r2, fp
 80107fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8010800:	f89a 3000 	ldrb.w	r3, [sl]
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 809f 	beq.w	8010948 <_vfiprintf_r+0x1ec>
 801080a:	2300      	movs	r3, #0
 801080c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010814:	f10a 0a01 	add.w	sl, sl, #1
 8010818:	9304      	str	r3, [sp, #16]
 801081a:	9307      	str	r3, [sp, #28]
 801081c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010820:	931a      	str	r3, [sp, #104]	@ 0x68
 8010822:	4654      	mov	r4, sl
 8010824:	2205      	movs	r2, #5
 8010826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801082a:	4853      	ldr	r0, [pc, #332]	@ (8010978 <_vfiprintf_r+0x21c>)
 801082c:	f7ef fcf0 	bl	8000210 <memchr>
 8010830:	9a04      	ldr	r2, [sp, #16]
 8010832:	b9d8      	cbnz	r0, 801086c <_vfiprintf_r+0x110>
 8010834:	06d1      	lsls	r1, r2, #27
 8010836:	bf44      	itt	mi
 8010838:	2320      	movmi	r3, #32
 801083a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801083e:	0713      	lsls	r3, r2, #28
 8010840:	bf44      	itt	mi
 8010842:	232b      	movmi	r3, #43	@ 0x2b
 8010844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010848:	f89a 3000 	ldrb.w	r3, [sl]
 801084c:	2b2a      	cmp	r3, #42	@ 0x2a
 801084e:	d015      	beq.n	801087c <_vfiprintf_r+0x120>
 8010850:	9a07      	ldr	r2, [sp, #28]
 8010852:	4654      	mov	r4, sl
 8010854:	2000      	movs	r0, #0
 8010856:	f04f 0c0a 	mov.w	ip, #10
 801085a:	4621      	mov	r1, r4
 801085c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010860:	3b30      	subs	r3, #48	@ 0x30
 8010862:	2b09      	cmp	r3, #9
 8010864:	d94b      	bls.n	80108fe <_vfiprintf_r+0x1a2>
 8010866:	b1b0      	cbz	r0, 8010896 <_vfiprintf_r+0x13a>
 8010868:	9207      	str	r2, [sp, #28]
 801086a:	e014      	b.n	8010896 <_vfiprintf_r+0x13a>
 801086c:	eba0 0308 	sub.w	r3, r0, r8
 8010870:	fa09 f303 	lsl.w	r3, r9, r3
 8010874:	4313      	orrs	r3, r2
 8010876:	9304      	str	r3, [sp, #16]
 8010878:	46a2      	mov	sl, r4
 801087a:	e7d2      	b.n	8010822 <_vfiprintf_r+0xc6>
 801087c:	9b03      	ldr	r3, [sp, #12]
 801087e:	1d19      	adds	r1, r3, #4
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	9103      	str	r1, [sp, #12]
 8010884:	2b00      	cmp	r3, #0
 8010886:	bfbb      	ittet	lt
 8010888:	425b      	neglt	r3, r3
 801088a:	f042 0202 	orrlt.w	r2, r2, #2
 801088e:	9307      	strge	r3, [sp, #28]
 8010890:	9307      	strlt	r3, [sp, #28]
 8010892:	bfb8      	it	lt
 8010894:	9204      	strlt	r2, [sp, #16]
 8010896:	7823      	ldrb	r3, [r4, #0]
 8010898:	2b2e      	cmp	r3, #46	@ 0x2e
 801089a:	d10a      	bne.n	80108b2 <_vfiprintf_r+0x156>
 801089c:	7863      	ldrb	r3, [r4, #1]
 801089e:	2b2a      	cmp	r3, #42	@ 0x2a
 80108a0:	d132      	bne.n	8010908 <_vfiprintf_r+0x1ac>
 80108a2:	9b03      	ldr	r3, [sp, #12]
 80108a4:	1d1a      	adds	r2, r3, #4
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	9203      	str	r2, [sp, #12]
 80108aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80108ae:	3402      	adds	r4, #2
 80108b0:	9305      	str	r3, [sp, #20]
 80108b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010988 <_vfiprintf_r+0x22c>
 80108b6:	7821      	ldrb	r1, [r4, #0]
 80108b8:	2203      	movs	r2, #3
 80108ba:	4650      	mov	r0, sl
 80108bc:	f7ef fca8 	bl	8000210 <memchr>
 80108c0:	b138      	cbz	r0, 80108d2 <_vfiprintf_r+0x176>
 80108c2:	9b04      	ldr	r3, [sp, #16]
 80108c4:	eba0 000a 	sub.w	r0, r0, sl
 80108c8:	2240      	movs	r2, #64	@ 0x40
 80108ca:	4082      	lsls	r2, r0
 80108cc:	4313      	orrs	r3, r2
 80108ce:	3401      	adds	r4, #1
 80108d0:	9304      	str	r3, [sp, #16]
 80108d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108d6:	4829      	ldr	r0, [pc, #164]	@ (801097c <_vfiprintf_r+0x220>)
 80108d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80108dc:	2206      	movs	r2, #6
 80108de:	f7ef fc97 	bl	8000210 <memchr>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d03f      	beq.n	8010966 <_vfiprintf_r+0x20a>
 80108e6:	4b26      	ldr	r3, [pc, #152]	@ (8010980 <_vfiprintf_r+0x224>)
 80108e8:	bb1b      	cbnz	r3, 8010932 <_vfiprintf_r+0x1d6>
 80108ea:	9b03      	ldr	r3, [sp, #12]
 80108ec:	3307      	adds	r3, #7
 80108ee:	f023 0307 	bic.w	r3, r3, #7
 80108f2:	3308      	adds	r3, #8
 80108f4:	9303      	str	r3, [sp, #12]
 80108f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108f8:	443b      	add	r3, r7
 80108fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80108fc:	e76a      	b.n	80107d4 <_vfiprintf_r+0x78>
 80108fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010902:	460c      	mov	r4, r1
 8010904:	2001      	movs	r0, #1
 8010906:	e7a8      	b.n	801085a <_vfiprintf_r+0xfe>
 8010908:	2300      	movs	r3, #0
 801090a:	3401      	adds	r4, #1
 801090c:	9305      	str	r3, [sp, #20]
 801090e:	4619      	mov	r1, r3
 8010910:	f04f 0c0a 	mov.w	ip, #10
 8010914:	4620      	mov	r0, r4
 8010916:	f810 2b01 	ldrb.w	r2, [r0], #1
 801091a:	3a30      	subs	r2, #48	@ 0x30
 801091c:	2a09      	cmp	r2, #9
 801091e:	d903      	bls.n	8010928 <_vfiprintf_r+0x1cc>
 8010920:	2b00      	cmp	r3, #0
 8010922:	d0c6      	beq.n	80108b2 <_vfiprintf_r+0x156>
 8010924:	9105      	str	r1, [sp, #20]
 8010926:	e7c4      	b.n	80108b2 <_vfiprintf_r+0x156>
 8010928:	fb0c 2101 	mla	r1, ip, r1, r2
 801092c:	4604      	mov	r4, r0
 801092e:	2301      	movs	r3, #1
 8010930:	e7f0      	b.n	8010914 <_vfiprintf_r+0x1b8>
 8010932:	ab03      	add	r3, sp, #12
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	462a      	mov	r2, r5
 8010938:	4b12      	ldr	r3, [pc, #72]	@ (8010984 <_vfiprintf_r+0x228>)
 801093a:	a904      	add	r1, sp, #16
 801093c:	4630      	mov	r0, r6
 801093e:	f3af 8000 	nop.w
 8010942:	4607      	mov	r7, r0
 8010944:	1c78      	adds	r0, r7, #1
 8010946:	d1d6      	bne.n	80108f6 <_vfiprintf_r+0x19a>
 8010948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801094a:	07d9      	lsls	r1, r3, #31
 801094c:	d405      	bmi.n	801095a <_vfiprintf_r+0x1fe>
 801094e:	89ab      	ldrh	r3, [r5, #12]
 8010950:	059a      	lsls	r2, r3, #22
 8010952:	d402      	bmi.n	801095a <_vfiprintf_r+0x1fe>
 8010954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010956:	f7ff fda9 	bl	80104ac <__retarget_lock_release_recursive>
 801095a:	89ab      	ldrh	r3, [r5, #12]
 801095c:	065b      	lsls	r3, r3, #25
 801095e:	f53f af1f 	bmi.w	80107a0 <_vfiprintf_r+0x44>
 8010962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010964:	e71e      	b.n	80107a4 <_vfiprintf_r+0x48>
 8010966:	ab03      	add	r3, sp, #12
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	462a      	mov	r2, r5
 801096c:	4b05      	ldr	r3, [pc, #20]	@ (8010984 <_vfiprintf_r+0x228>)
 801096e:	a904      	add	r1, sp, #16
 8010970:	4630      	mov	r0, r6
 8010972:	f000 f879 	bl	8010a68 <_printf_i>
 8010976:	e7e4      	b.n	8010942 <_vfiprintf_r+0x1e6>
 8010978:	08014645 	.word	0x08014645
 801097c:	0801464f 	.word	0x0801464f
 8010980:	00000000 	.word	0x00000000
 8010984:	08010737 	.word	0x08010737
 8010988:	0801464b 	.word	0x0801464b

0801098c <_printf_common>:
 801098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010990:	4616      	mov	r6, r2
 8010992:	4698      	mov	r8, r3
 8010994:	688a      	ldr	r2, [r1, #8]
 8010996:	690b      	ldr	r3, [r1, #16]
 8010998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801099c:	4293      	cmp	r3, r2
 801099e:	bfb8      	it	lt
 80109a0:	4613      	movlt	r3, r2
 80109a2:	6033      	str	r3, [r6, #0]
 80109a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80109a8:	4607      	mov	r7, r0
 80109aa:	460c      	mov	r4, r1
 80109ac:	b10a      	cbz	r2, 80109b2 <_printf_common+0x26>
 80109ae:	3301      	adds	r3, #1
 80109b0:	6033      	str	r3, [r6, #0]
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	0699      	lsls	r1, r3, #26
 80109b6:	bf42      	ittt	mi
 80109b8:	6833      	ldrmi	r3, [r6, #0]
 80109ba:	3302      	addmi	r3, #2
 80109bc:	6033      	strmi	r3, [r6, #0]
 80109be:	6825      	ldr	r5, [r4, #0]
 80109c0:	f015 0506 	ands.w	r5, r5, #6
 80109c4:	d106      	bne.n	80109d4 <_printf_common+0x48>
 80109c6:	f104 0a19 	add.w	sl, r4, #25
 80109ca:	68e3      	ldr	r3, [r4, #12]
 80109cc:	6832      	ldr	r2, [r6, #0]
 80109ce:	1a9b      	subs	r3, r3, r2
 80109d0:	42ab      	cmp	r3, r5
 80109d2:	dc26      	bgt.n	8010a22 <_printf_common+0x96>
 80109d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80109d8:	6822      	ldr	r2, [r4, #0]
 80109da:	3b00      	subs	r3, #0
 80109dc:	bf18      	it	ne
 80109de:	2301      	movne	r3, #1
 80109e0:	0692      	lsls	r2, r2, #26
 80109e2:	d42b      	bmi.n	8010a3c <_printf_common+0xb0>
 80109e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80109e8:	4641      	mov	r1, r8
 80109ea:	4638      	mov	r0, r7
 80109ec:	47c8      	blx	r9
 80109ee:	3001      	adds	r0, #1
 80109f0:	d01e      	beq.n	8010a30 <_printf_common+0xa4>
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	6922      	ldr	r2, [r4, #16]
 80109f6:	f003 0306 	and.w	r3, r3, #6
 80109fa:	2b04      	cmp	r3, #4
 80109fc:	bf02      	ittt	eq
 80109fe:	68e5      	ldreq	r5, [r4, #12]
 8010a00:	6833      	ldreq	r3, [r6, #0]
 8010a02:	1aed      	subeq	r5, r5, r3
 8010a04:	68a3      	ldr	r3, [r4, #8]
 8010a06:	bf0c      	ite	eq
 8010a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a0c:	2500      	movne	r5, #0
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	bfc4      	itt	gt
 8010a12:	1a9b      	subgt	r3, r3, r2
 8010a14:	18ed      	addgt	r5, r5, r3
 8010a16:	2600      	movs	r6, #0
 8010a18:	341a      	adds	r4, #26
 8010a1a:	42b5      	cmp	r5, r6
 8010a1c:	d11a      	bne.n	8010a54 <_printf_common+0xc8>
 8010a1e:	2000      	movs	r0, #0
 8010a20:	e008      	b.n	8010a34 <_printf_common+0xa8>
 8010a22:	2301      	movs	r3, #1
 8010a24:	4652      	mov	r2, sl
 8010a26:	4641      	mov	r1, r8
 8010a28:	4638      	mov	r0, r7
 8010a2a:	47c8      	blx	r9
 8010a2c:	3001      	adds	r0, #1
 8010a2e:	d103      	bne.n	8010a38 <_printf_common+0xac>
 8010a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a38:	3501      	adds	r5, #1
 8010a3a:	e7c6      	b.n	80109ca <_printf_common+0x3e>
 8010a3c:	18e1      	adds	r1, r4, r3
 8010a3e:	1c5a      	adds	r2, r3, #1
 8010a40:	2030      	movs	r0, #48	@ 0x30
 8010a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010a46:	4422      	add	r2, r4
 8010a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010a4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010a50:	3302      	adds	r3, #2
 8010a52:	e7c7      	b.n	80109e4 <_printf_common+0x58>
 8010a54:	2301      	movs	r3, #1
 8010a56:	4622      	mov	r2, r4
 8010a58:	4641      	mov	r1, r8
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	47c8      	blx	r9
 8010a5e:	3001      	adds	r0, #1
 8010a60:	d0e6      	beq.n	8010a30 <_printf_common+0xa4>
 8010a62:	3601      	adds	r6, #1
 8010a64:	e7d9      	b.n	8010a1a <_printf_common+0x8e>
	...

08010a68 <_printf_i>:
 8010a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a6c:	7e0f      	ldrb	r7, [r1, #24]
 8010a6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010a70:	2f78      	cmp	r7, #120	@ 0x78
 8010a72:	4691      	mov	r9, r2
 8010a74:	4680      	mov	r8, r0
 8010a76:	460c      	mov	r4, r1
 8010a78:	469a      	mov	sl, r3
 8010a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010a7e:	d807      	bhi.n	8010a90 <_printf_i+0x28>
 8010a80:	2f62      	cmp	r7, #98	@ 0x62
 8010a82:	d80a      	bhi.n	8010a9a <_printf_i+0x32>
 8010a84:	2f00      	cmp	r7, #0
 8010a86:	f000 80d1 	beq.w	8010c2c <_printf_i+0x1c4>
 8010a8a:	2f58      	cmp	r7, #88	@ 0x58
 8010a8c:	f000 80b8 	beq.w	8010c00 <_printf_i+0x198>
 8010a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010a98:	e03a      	b.n	8010b10 <_printf_i+0xa8>
 8010a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010a9e:	2b15      	cmp	r3, #21
 8010aa0:	d8f6      	bhi.n	8010a90 <_printf_i+0x28>
 8010aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8010aa8 <_printf_i+0x40>)
 8010aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010aa8:	08010b01 	.word	0x08010b01
 8010aac:	08010b15 	.word	0x08010b15
 8010ab0:	08010a91 	.word	0x08010a91
 8010ab4:	08010a91 	.word	0x08010a91
 8010ab8:	08010a91 	.word	0x08010a91
 8010abc:	08010a91 	.word	0x08010a91
 8010ac0:	08010b15 	.word	0x08010b15
 8010ac4:	08010a91 	.word	0x08010a91
 8010ac8:	08010a91 	.word	0x08010a91
 8010acc:	08010a91 	.word	0x08010a91
 8010ad0:	08010a91 	.word	0x08010a91
 8010ad4:	08010c13 	.word	0x08010c13
 8010ad8:	08010b3f 	.word	0x08010b3f
 8010adc:	08010bcd 	.word	0x08010bcd
 8010ae0:	08010a91 	.word	0x08010a91
 8010ae4:	08010a91 	.word	0x08010a91
 8010ae8:	08010c35 	.word	0x08010c35
 8010aec:	08010a91 	.word	0x08010a91
 8010af0:	08010b3f 	.word	0x08010b3f
 8010af4:	08010a91 	.word	0x08010a91
 8010af8:	08010a91 	.word	0x08010a91
 8010afc:	08010bd5 	.word	0x08010bd5
 8010b00:	6833      	ldr	r3, [r6, #0]
 8010b02:	1d1a      	adds	r2, r3, #4
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	6032      	str	r2, [r6, #0]
 8010b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010b10:	2301      	movs	r3, #1
 8010b12:	e09c      	b.n	8010c4e <_printf_i+0x1e6>
 8010b14:	6833      	ldr	r3, [r6, #0]
 8010b16:	6820      	ldr	r0, [r4, #0]
 8010b18:	1d19      	adds	r1, r3, #4
 8010b1a:	6031      	str	r1, [r6, #0]
 8010b1c:	0606      	lsls	r6, r0, #24
 8010b1e:	d501      	bpl.n	8010b24 <_printf_i+0xbc>
 8010b20:	681d      	ldr	r5, [r3, #0]
 8010b22:	e003      	b.n	8010b2c <_printf_i+0xc4>
 8010b24:	0645      	lsls	r5, r0, #25
 8010b26:	d5fb      	bpl.n	8010b20 <_printf_i+0xb8>
 8010b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010b2c:	2d00      	cmp	r5, #0
 8010b2e:	da03      	bge.n	8010b38 <_printf_i+0xd0>
 8010b30:	232d      	movs	r3, #45	@ 0x2d
 8010b32:	426d      	negs	r5, r5
 8010b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b38:	4858      	ldr	r0, [pc, #352]	@ (8010c9c <_printf_i+0x234>)
 8010b3a:	230a      	movs	r3, #10
 8010b3c:	e011      	b.n	8010b62 <_printf_i+0xfa>
 8010b3e:	6821      	ldr	r1, [r4, #0]
 8010b40:	6833      	ldr	r3, [r6, #0]
 8010b42:	0608      	lsls	r0, r1, #24
 8010b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8010b48:	d402      	bmi.n	8010b50 <_printf_i+0xe8>
 8010b4a:	0649      	lsls	r1, r1, #25
 8010b4c:	bf48      	it	mi
 8010b4e:	b2ad      	uxthmi	r5, r5
 8010b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8010b52:	4852      	ldr	r0, [pc, #328]	@ (8010c9c <_printf_i+0x234>)
 8010b54:	6033      	str	r3, [r6, #0]
 8010b56:	bf14      	ite	ne
 8010b58:	230a      	movne	r3, #10
 8010b5a:	2308      	moveq	r3, #8
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010b62:	6866      	ldr	r6, [r4, #4]
 8010b64:	60a6      	str	r6, [r4, #8]
 8010b66:	2e00      	cmp	r6, #0
 8010b68:	db05      	blt.n	8010b76 <_printf_i+0x10e>
 8010b6a:	6821      	ldr	r1, [r4, #0]
 8010b6c:	432e      	orrs	r6, r5
 8010b6e:	f021 0104 	bic.w	r1, r1, #4
 8010b72:	6021      	str	r1, [r4, #0]
 8010b74:	d04b      	beq.n	8010c0e <_printf_i+0x1a6>
 8010b76:	4616      	mov	r6, r2
 8010b78:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b7c:	fb03 5711 	mls	r7, r3, r1, r5
 8010b80:	5dc7      	ldrb	r7, [r0, r7]
 8010b82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b86:	462f      	mov	r7, r5
 8010b88:	42bb      	cmp	r3, r7
 8010b8a:	460d      	mov	r5, r1
 8010b8c:	d9f4      	bls.n	8010b78 <_printf_i+0x110>
 8010b8e:	2b08      	cmp	r3, #8
 8010b90:	d10b      	bne.n	8010baa <_printf_i+0x142>
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	07df      	lsls	r7, r3, #31
 8010b96:	d508      	bpl.n	8010baa <_printf_i+0x142>
 8010b98:	6923      	ldr	r3, [r4, #16]
 8010b9a:	6861      	ldr	r1, [r4, #4]
 8010b9c:	4299      	cmp	r1, r3
 8010b9e:	bfde      	ittt	le
 8010ba0:	2330      	movle	r3, #48	@ 0x30
 8010ba2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ba6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010baa:	1b92      	subs	r2, r2, r6
 8010bac:	6122      	str	r2, [r4, #16]
 8010bae:	f8cd a000 	str.w	sl, [sp]
 8010bb2:	464b      	mov	r3, r9
 8010bb4:	aa03      	add	r2, sp, #12
 8010bb6:	4621      	mov	r1, r4
 8010bb8:	4640      	mov	r0, r8
 8010bba:	f7ff fee7 	bl	801098c <_printf_common>
 8010bbe:	3001      	adds	r0, #1
 8010bc0:	d14a      	bne.n	8010c58 <_printf_i+0x1f0>
 8010bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bc6:	b004      	add	sp, #16
 8010bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bcc:	6823      	ldr	r3, [r4, #0]
 8010bce:	f043 0320 	orr.w	r3, r3, #32
 8010bd2:	6023      	str	r3, [r4, #0]
 8010bd4:	4832      	ldr	r0, [pc, #200]	@ (8010ca0 <_printf_i+0x238>)
 8010bd6:	2778      	movs	r7, #120	@ 0x78
 8010bd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	6831      	ldr	r1, [r6, #0]
 8010be0:	061f      	lsls	r7, r3, #24
 8010be2:	f851 5b04 	ldr.w	r5, [r1], #4
 8010be6:	d402      	bmi.n	8010bee <_printf_i+0x186>
 8010be8:	065f      	lsls	r7, r3, #25
 8010bea:	bf48      	it	mi
 8010bec:	b2ad      	uxthmi	r5, r5
 8010bee:	6031      	str	r1, [r6, #0]
 8010bf0:	07d9      	lsls	r1, r3, #31
 8010bf2:	bf44      	itt	mi
 8010bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8010bf8:	6023      	strmi	r3, [r4, #0]
 8010bfa:	b11d      	cbz	r5, 8010c04 <_printf_i+0x19c>
 8010bfc:	2310      	movs	r3, #16
 8010bfe:	e7ad      	b.n	8010b5c <_printf_i+0xf4>
 8010c00:	4826      	ldr	r0, [pc, #152]	@ (8010c9c <_printf_i+0x234>)
 8010c02:	e7e9      	b.n	8010bd8 <_printf_i+0x170>
 8010c04:	6823      	ldr	r3, [r4, #0]
 8010c06:	f023 0320 	bic.w	r3, r3, #32
 8010c0a:	6023      	str	r3, [r4, #0]
 8010c0c:	e7f6      	b.n	8010bfc <_printf_i+0x194>
 8010c0e:	4616      	mov	r6, r2
 8010c10:	e7bd      	b.n	8010b8e <_printf_i+0x126>
 8010c12:	6833      	ldr	r3, [r6, #0]
 8010c14:	6825      	ldr	r5, [r4, #0]
 8010c16:	6961      	ldr	r1, [r4, #20]
 8010c18:	1d18      	adds	r0, r3, #4
 8010c1a:	6030      	str	r0, [r6, #0]
 8010c1c:	062e      	lsls	r6, r5, #24
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	d501      	bpl.n	8010c26 <_printf_i+0x1be>
 8010c22:	6019      	str	r1, [r3, #0]
 8010c24:	e002      	b.n	8010c2c <_printf_i+0x1c4>
 8010c26:	0668      	lsls	r0, r5, #25
 8010c28:	d5fb      	bpl.n	8010c22 <_printf_i+0x1ba>
 8010c2a:	8019      	strh	r1, [r3, #0]
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	6123      	str	r3, [r4, #16]
 8010c30:	4616      	mov	r6, r2
 8010c32:	e7bc      	b.n	8010bae <_printf_i+0x146>
 8010c34:	6833      	ldr	r3, [r6, #0]
 8010c36:	1d1a      	adds	r2, r3, #4
 8010c38:	6032      	str	r2, [r6, #0]
 8010c3a:	681e      	ldr	r6, [r3, #0]
 8010c3c:	6862      	ldr	r2, [r4, #4]
 8010c3e:	2100      	movs	r1, #0
 8010c40:	4630      	mov	r0, r6
 8010c42:	f7ef fae5 	bl	8000210 <memchr>
 8010c46:	b108      	cbz	r0, 8010c4c <_printf_i+0x1e4>
 8010c48:	1b80      	subs	r0, r0, r6
 8010c4a:	6060      	str	r0, [r4, #4]
 8010c4c:	6863      	ldr	r3, [r4, #4]
 8010c4e:	6123      	str	r3, [r4, #16]
 8010c50:	2300      	movs	r3, #0
 8010c52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c56:	e7aa      	b.n	8010bae <_printf_i+0x146>
 8010c58:	6923      	ldr	r3, [r4, #16]
 8010c5a:	4632      	mov	r2, r6
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	4640      	mov	r0, r8
 8010c60:	47d0      	blx	sl
 8010c62:	3001      	adds	r0, #1
 8010c64:	d0ad      	beq.n	8010bc2 <_printf_i+0x15a>
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	079b      	lsls	r3, r3, #30
 8010c6a:	d413      	bmi.n	8010c94 <_printf_i+0x22c>
 8010c6c:	68e0      	ldr	r0, [r4, #12]
 8010c6e:	9b03      	ldr	r3, [sp, #12]
 8010c70:	4298      	cmp	r0, r3
 8010c72:	bfb8      	it	lt
 8010c74:	4618      	movlt	r0, r3
 8010c76:	e7a6      	b.n	8010bc6 <_printf_i+0x15e>
 8010c78:	2301      	movs	r3, #1
 8010c7a:	4632      	mov	r2, r6
 8010c7c:	4649      	mov	r1, r9
 8010c7e:	4640      	mov	r0, r8
 8010c80:	47d0      	blx	sl
 8010c82:	3001      	adds	r0, #1
 8010c84:	d09d      	beq.n	8010bc2 <_printf_i+0x15a>
 8010c86:	3501      	adds	r5, #1
 8010c88:	68e3      	ldr	r3, [r4, #12]
 8010c8a:	9903      	ldr	r1, [sp, #12]
 8010c8c:	1a5b      	subs	r3, r3, r1
 8010c8e:	42ab      	cmp	r3, r5
 8010c90:	dcf2      	bgt.n	8010c78 <_printf_i+0x210>
 8010c92:	e7eb      	b.n	8010c6c <_printf_i+0x204>
 8010c94:	2500      	movs	r5, #0
 8010c96:	f104 0619 	add.w	r6, r4, #25
 8010c9a:	e7f5      	b.n	8010c88 <_printf_i+0x220>
 8010c9c:	08014656 	.word	0x08014656
 8010ca0:	08014667 	.word	0x08014667

08010ca4 <__sflush_r>:
 8010ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cac:	0716      	lsls	r6, r2, #28
 8010cae:	4605      	mov	r5, r0
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	d454      	bmi.n	8010d5e <__sflush_r+0xba>
 8010cb4:	684b      	ldr	r3, [r1, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	dc02      	bgt.n	8010cc0 <__sflush_r+0x1c>
 8010cba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	dd48      	ble.n	8010d52 <__sflush_r+0xae>
 8010cc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010cc2:	2e00      	cmp	r6, #0
 8010cc4:	d045      	beq.n	8010d52 <__sflush_r+0xae>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ccc:	682f      	ldr	r7, [r5, #0]
 8010cce:	6a21      	ldr	r1, [r4, #32]
 8010cd0:	602b      	str	r3, [r5, #0]
 8010cd2:	d030      	beq.n	8010d36 <__sflush_r+0x92>
 8010cd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	0759      	lsls	r1, r3, #29
 8010cda:	d505      	bpl.n	8010ce8 <__sflush_r+0x44>
 8010cdc:	6863      	ldr	r3, [r4, #4]
 8010cde:	1ad2      	subs	r2, r2, r3
 8010ce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ce2:	b10b      	cbz	r3, 8010ce8 <__sflush_r+0x44>
 8010ce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ce6:	1ad2      	subs	r2, r2, r3
 8010ce8:	2300      	movs	r3, #0
 8010cea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010cec:	6a21      	ldr	r1, [r4, #32]
 8010cee:	4628      	mov	r0, r5
 8010cf0:	47b0      	blx	r6
 8010cf2:	1c43      	adds	r3, r0, #1
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	d106      	bne.n	8010d06 <__sflush_r+0x62>
 8010cf8:	6829      	ldr	r1, [r5, #0]
 8010cfa:	291d      	cmp	r1, #29
 8010cfc:	d82b      	bhi.n	8010d56 <__sflush_r+0xb2>
 8010cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8010da8 <__sflush_r+0x104>)
 8010d00:	40ca      	lsrs	r2, r1
 8010d02:	07d6      	lsls	r6, r2, #31
 8010d04:	d527      	bpl.n	8010d56 <__sflush_r+0xb2>
 8010d06:	2200      	movs	r2, #0
 8010d08:	6062      	str	r2, [r4, #4]
 8010d0a:	04d9      	lsls	r1, r3, #19
 8010d0c:	6922      	ldr	r2, [r4, #16]
 8010d0e:	6022      	str	r2, [r4, #0]
 8010d10:	d504      	bpl.n	8010d1c <__sflush_r+0x78>
 8010d12:	1c42      	adds	r2, r0, #1
 8010d14:	d101      	bne.n	8010d1a <__sflush_r+0x76>
 8010d16:	682b      	ldr	r3, [r5, #0]
 8010d18:	b903      	cbnz	r3, 8010d1c <__sflush_r+0x78>
 8010d1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d1e:	602f      	str	r7, [r5, #0]
 8010d20:	b1b9      	cbz	r1, 8010d52 <__sflush_r+0xae>
 8010d22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d26:	4299      	cmp	r1, r3
 8010d28:	d002      	beq.n	8010d30 <__sflush_r+0x8c>
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f7ff fbec 	bl	8010508 <_free_r>
 8010d30:	2300      	movs	r3, #0
 8010d32:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d34:	e00d      	b.n	8010d52 <__sflush_r+0xae>
 8010d36:	2301      	movs	r3, #1
 8010d38:	4628      	mov	r0, r5
 8010d3a:	47b0      	blx	r6
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	1c50      	adds	r0, r2, #1
 8010d40:	d1c9      	bne.n	8010cd6 <__sflush_r+0x32>
 8010d42:	682b      	ldr	r3, [r5, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d0c6      	beq.n	8010cd6 <__sflush_r+0x32>
 8010d48:	2b1d      	cmp	r3, #29
 8010d4a:	d001      	beq.n	8010d50 <__sflush_r+0xac>
 8010d4c:	2b16      	cmp	r3, #22
 8010d4e:	d11e      	bne.n	8010d8e <__sflush_r+0xea>
 8010d50:	602f      	str	r7, [r5, #0]
 8010d52:	2000      	movs	r0, #0
 8010d54:	e022      	b.n	8010d9c <__sflush_r+0xf8>
 8010d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d5a:	b21b      	sxth	r3, r3
 8010d5c:	e01b      	b.n	8010d96 <__sflush_r+0xf2>
 8010d5e:	690f      	ldr	r7, [r1, #16]
 8010d60:	2f00      	cmp	r7, #0
 8010d62:	d0f6      	beq.n	8010d52 <__sflush_r+0xae>
 8010d64:	0793      	lsls	r3, r2, #30
 8010d66:	680e      	ldr	r6, [r1, #0]
 8010d68:	bf08      	it	eq
 8010d6a:	694b      	ldreq	r3, [r1, #20]
 8010d6c:	600f      	str	r7, [r1, #0]
 8010d6e:	bf18      	it	ne
 8010d70:	2300      	movne	r3, #0
 8010d72:	eba6 0807 	sub.w	r8, r6, r7
 8010d76:	608b      	str	r3, [r1, #8]
 8010d78:	f1b8 0f00 	cmp.w	r8, #0
 8010d7c:	dde9      	ble.n	8010d52 <__sflush_r+0xae>
 8010d7e:	6a21      	ldr	r1, [r4, #32]
 8010d80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d82:	4643      	mov	r3, r8
 8010d84:	463a      	mov	r2, r7
 8010d86:	4628      	mov	r0, r5
 8010d88:	47b0      	blx	r6
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	dc08      	bgt.n	8010da0 <__sflush_r+0xfc>
 8010d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d96:	81a3      	strh	r3, [r4, #12]
 8010d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da0:	4407      	add	r7, r0
 8010da2:	eba8 0800 	sub.w	r8, r8, r0
 8010da6:	e7e7      	b.n	8010d78 <__sflush_r+0xd4>
 8010da8:	20400001 	.word	0x20400001

08010dac <_fflush_r>:
 8010dac:	b538      	push	{r3, r4, r5, lr}
 8010dae:	690b      	ldr	r3, [r1, #16]
 8010db0:	4605      	mov	r5, r0
 8010db2:	460c      	mov	r4, r1
 8010db4:	b913      	cbnz	r3, 8010dbc <_fflush_r+0x10>
 8010db6:	2500      	movs	r5, #0
 8010db8:	4628      	mov	r0, r5
 8010dba:	bd38      	pop	{r3, r4, r5, pc}
 8010dbc:	b118      	cbz	r0, 8010dc6 <_fflush_r+0x1a>
 8010dbe:	6a03      	ldr	r3, [r0, #32]
 8010dc0:	b90b      	cbnz	r3, 8010dc6 <_fflush_r+0x1a>
 8010dc2:	f7ff f969 	bl	8010098 <__sinit>
 8010dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d0f3      	beq.n	8010db6 <_fflush_r+0xa>
 8010dce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010dd0:	07d0      	lsls	r0, r2, #31
 8010dd2:	d404      	bmi.n	8010dde <_fflush_r+0x32>
 8010dd4:	0599      	lsls	r1, r3, #22
 8010dd6:	d402      	bmi.n	8010dde <_fflush_r+0x32>
 8010dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dda:	f7ff fb66 	bl	80104aa <__retarget_lock_acquire_recursive>
 8010dde:	4628      	mov	r0, r5
 8010de0:	4621      	mov	r1, r4
 8010de2:	f7ff ff5f 	bl	8010ca4 <__sflush_r>
 8010de6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010de8:	07da      	lsls	r2, r3, #31
 8010dea:	4605      	mov	r5, r0
 8010dec:	d4e4      	bmi.n	8010db8 <_fflush_r+0xc>
 8010dee:	89a3      	ldrh	r3, [r4, #12]
 8010df0:	059b      	lsls	r3, r3, #22
 8010df2:	d4e1      	bmi.n	8010db8 <_fflush_r+0xc>
 8010df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010df6:	f7ff fb59 	bl	80104ac <__retarget_lock_release_recursive>
 8010dfa:	e7dd      	b.n	8010db8 <_fflush_r+0xc>

08010dfc <fiprintf>:
 8010dfc:	b40e      	push	{r1, r2, r3}
 8010dfe:	b503      	push	{r0, r1, lr}
 8010e00:	4601      	mov	r1, r0
 8010e02:	ab03      	add	r3, sp, #12
 8010e04:	4805      	ldr	r0, [pc, #20]	@ (8010e1c <fiprintf+0x20>)
 8010e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e0a:	6800      	ldr	r0, [r0, #0]
 8010e0c:	9301      	str	r3, [sp, #4]
 8010e0e:	f7ff fca5 	bl	801075c <_vfiprintf_r>
 8010e12:	b002      	add	sp, #8
 8010e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e18:	b003      	add	sp, #12
 8010e1a:	4770      	bx	lr
 8010e1c:	2000007c 	.word	0x2000007c

08010e20 <__swhatbuf_r>:
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	460c      	mov	r4, r1
 8010e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e28:	2900      	cmp	r1, #0
 8010e2a:	b096      	sub	sp, #88	@ 0x58
 8010e2c:	4615      	mov	r5, r2
 8010e2e:	461e      	mov	r6, r3
 8010e30:	da0d      	bge.n	8010e4e <__swhatbuf_r+0x2e>
 8010e32:	89a3      	ldrh	r3, [r4, #12]
 8010e34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e38:	f04f 0100 	mov.w	r1, #0
 8010e3c:	bf14      	ite	ne
 8010e3e:	2340      	movne	r3, #64	@ 0x40
 8010e40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e44:	2000      	movs	r0, #0
 8010e46:	6031      	str	r1, [r6, #0]
 8010e48:	602b      	str	r3, [r5, #0]
 8010e4a:	b016      	add	sp, #88	@ 0x58
 8010e4c:	bd70      	pop	{r4, r5, r6, pc}
 8010e4e:	466a      	mov	r2, sp
 8010e50:	f000 f87c 	bl	8010f4c <_fstat_r>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	dbec      	blt.n	8010e32 <__swhatbuf_r+0x12>
 8010e58:	9901      	ldr	r1, [sp, #4]
 8010e5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e62:	4259      	negs	r1, r3
 8010e64:	4159      	adcs	r1, r3
 8010e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e6a:	e7eb      	b.n	8010e44 <__swhatbuf_r+0x24>

08010e6c <__smakebuf_r>:
 8010e6c:	898b      	ldrh	r3, [r1, #12]
 8010e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e70:	079d      	lsls	r5, r3, #30
 8010e72:	4606      	mov	r6, r0
 8010e74:	460c      	mov	r4, r1
 8010e76:	d507      	bpl.n	8010e88 <__smakebuf_r+0x1c>
 8010e78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	6123      	str	r3, [r4, #16]
 8010e80:	2301      	movs	r3, #1
 8010e82:	6163      	str	r3, [r4, #20]
 8010e84:	b003      	add	sp, #12
 8010e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e88:	ab01      	add	r3, sp, #4
 8010e8a:	466a      	mov	r2, sp
 8010e8c:	f7ff ffc8 	bl	8010e20 <__swhatbuf_r>
 8010e90:	9f00      	ldr	r7, [sp, #0]
 8010e92:	4605      	mov	r5, r0
 8010e94:	4639      	mov	r1, r7
 8010e96:	4630      	mov	r0, r6
 8010e98:	f7ff fbaa 	bl	80105f0 <_malloc_r>
 8010e9c:	b948      	cbnz	r0, 8010eb2 <__smakebuf_r+0x46>
 8010e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ea2:	059a      	lsls	r2, r3, #22
 8010ea4:	d4ee      	bmi.n	8010e84 <__smakebuf_r+0x18>
 8010ea6:	f023 0303 	bic.w	r3, r3, #3
 8010eaa:	f043 0302 	orr.w	r3, r3, #2
 8010eae:	81a3      	strh	r3, [r4, #12]
 8010eb0:	e7e2      	b.n	8010e78 <__smakebuf_r+0xc>
 8010eb2:	89a3      	ldrh	r3, [r4, #12]
 8010eb4:	6020      	str	r0, [r4, #0]
 8010eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010eba:	81a3      	strh	r3, [r4, #12]
 8010ebc:	9b01      	ldr	r3, [sp, #4]
 8010ebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ec2:	b15b      	cbz	r3, 8010edc <__smakebuf_r+0x70>
 8010ec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ec8:	4630      	mov	r0, r6
 8010eca:	f000 f851 	bl	8010f70 <_isatty_r>
 8010ece:	b128      	cbz	r0, 8010edc <__smakebuf_r+0x70>
 8010ed0:	89a3      	ldrh	r3, [r4, #12]
 8010ed2:	f023 0303 	bic.w	r3, r3, #3
 8010ed6:	f043 0301 	orr.w	r3, r3, #1
 8010eda:	81a3      	strh	r3, [r4, #12]
 8010edc:	89a3      	ldrh	r3, [r4, #12]
 8010ede:	431d      	orrs	r5, r3
 8010ee0:	81a5      	strh	r5, [r4, #12]
 8010ee2:	e7cf      	b.n	8010e84 <__smakebuf_r+0x18>

08010ee4 <_putc_r>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	460d      	mov	r5, r1
 8010ee8:	4614      	mov	r4, r2
 8010eea:	4606      	mov	r6, r0
 8010eec:	b118      	cbz	r0, 8010ef6 <_putc_r+0x12>
 8010eee:	6a03      	ldr	r3, [r0, #32]
 8010ef0:	b90b      	cbnz	r3, 8010ef6 <_putc_r+0x12>
 8010ef2:	f7ff f8d1 	bl	8010098 <__sinit>
 8010ef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ef8:	07d8      	lsls	r0, r3, #31
 8010efa:	d405      	bmi.n	8010f08 <_putc_r+0x24>
 8010efc:	89a3      	ldrh	r3, [r4, #12]
 8010efe:	0599      	lsls	r1, r3, #22
 8010f00:	d402      	bmi.n	8010f08 <_putc_r+0x24>
 8010f02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f04:	f7ff fad1 	bl	80104aa <__retarget_lock_acquire_recursive>
 8010f08:	68a3      	ldr	r3, [r4, #8]
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	60a3      	str	r3, [r4, #8]
 8010f10:	da05      	bge.n	8010f1e <_putc_r+0x3a>
 8010f12:	69a2      	ldr	r2, [r4, #24]
 8010f14:	4293      	cmp	r3, r2
 8010f16:	db12      	blt.n	8010f3e <_putc_r+0x5a>
 8010f18:	b2eb      	uxtb	r3, r5
 8010f1a:	2b0a      	cmp	r3, #10
 8010f1c:	d00f      	beq.n	8010f3e <_putc_r+0x5a>
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	6022      	str	r2, [r4, #0]
 8010f24:	701d      	strb	r5, [r3, #0]
 8010f26:	b2ed      	uxtb	r5, r5
 8010f28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f2a:	07da      	lsls	r2, r3, #31
 8010f2c:	d405      	bmi.n	8010f3a <_putc_r+0x56>
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	059b      	lsls	r3, r3, #22
 8010f32:	d402      	bmi.n	8010f3a <_putc_r+0x56>
 8010f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f36:	f7ff fab9 	bl	80104ac <__retarget_lock_release_recursive>
 8010f3a:	4628      	mov	r0, r5
 8010f3c:	bd70      	pop	{r4, r5, r6, pc}
 8010f3e:	4629      	mov	r1, r5
 8010f40:	4622      	mov	r2, r4
 8010f42:	4630      	mov	r0, r6
 8010f44:	f7ff f999 	bl	801027a <__swbuf_r>
 8010f48:	4605      	mov	r5, r0
 8010f4a:	e7ed      	b.n	8010f28 <_putc_r+0x44>

08010f4c <_fstat_r>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	4d07      	ldr	r5, [pc, #28]	@ (8010f6c <_fstat_r+0x20>)
 8010f50:	2300      	movs	r3, #0
 8010f52:	4604      	mov	r4, r0
 8010f54:	4608      	mov	r0, r1
 8010f56:	4611      	mov	r1, r2
 8010f58:	602b      	str	r3, [r5, #0]
 8010f5a:	f7ef fceb 	bl	8000934 <_fstat>
 8010f5e:	1c43      	adds	r3, r0, #1
 8010f60:	d102      	bne.n	8010f68 <_fstat_r+0x1c>
 8010f62:	682b      	ldr	r3, [r5, #0]
 8010f64:	b103      	cbz	r3, 8010f68 <_fstat_r+0x1c>
 8010f66:	6023      	str	r3, [r4, #0]
 8010f68:	bd38      	pop	{r3, r4, r5, pc}
 8010f6a:	bf00      	nop
 8010f6c:	20007f98 	.word	0x20007f98

08010f70 <_isatty_r>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4d06      	ldr	r5, [pc, #24]	@ (8010f8c <_isatty_r+0x1c>)
 8010f74:	2300      	movs	r3, #0
 8010f76:	4604      	mov	r4, r0
 8010f78:	4608      	mov	r0, r1
 8010f7a:	602b      	str	r3, [r5, #0]
 8010f7c:	f7ef fcea 	bl	8000954 <_isatty>
 8010f80:	1c43      	adds	r3, r0, #1
 8010f82:	d102      	bne.n	8010f8a <_isatty_r+0x1a>
 8010f84:	682b      	ldr	r3, [r5, #0]
 8010f86:	b103      	cbz	r3, 8010f8a <_isatty_r+0x1a>
 8010f88:	6023      	str	r3, [r4, #0]
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	20007f98 	.word	0x20007f98

08010f90 <_sbrk_r>:
 8010f90:	b538      	push	{r3, r4, r5, lr}
 8010f92:	4d06      	ldr	r5, [pc, #24]	@ (8010fac <_sbrk_r+0x1c>)
 8010f94:	2300      	movs	r3, #0
 8010f96:	4604      	mov	r4, r0
 8010f98:	4608      	mov	r0, r1
 8010f9a:	602b      	str	r3, [r5, #0]
 8010f9c:	f7ef fcf2 	bl	8000984 <_sbrk>
 8010fa0:	1c43      	adds	r3, r0, #1
 8010fa2:	d102      	bne.n	8010faa <_sbrk_r+0x1a>
 8010fa4:	682b      	ldr	r3, [r5, #0]
 8010fa6:	b103      	cbz	r3, 8010faa <_sbrk_r+0x1a>
 8010fa8:	6023      	str	r3, [r4, #0]
 8010faa:	bd38      	pop	{r3, r4, r5, pc}
 8010fac:	20007f98 	.word	0x20007f98

08010fb0 <abort>:
 8010fb0:	b508      	push	{r3, lr}
 8010fb2:	2006      	movs	r0, #6
 8010fb4:	f000 f82c 	bl	8011010 <raise>
 8010fb8:	2001      	movs	r0, #1
 8010fba:	f7ef fc87 	bl	80008cc <_exit>

08010fbe <_raise_r>:
 8010fbe:	291f      	cmp	r1, #31
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	d904      	bls.n	8010fd2 <_raise_r+0x14>
 8010fc8:	2316      	movs	r3, #22
 8010fca:	6003      	str	r3, [r0, #0]
 8010fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fd0:	bd38      	pop	{r3, r4, r5, pc}
 8010fd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010fd4:	b112      	cbz	r2, 8010fdc <_raise_r+0x1e>
 8010fd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010fda:	b94b      	cbnz	r3, 8010ff0 <_raise_r+0x32>
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f000 f831 	bl	8011044 <_getpid_r>
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	4601      	mov	r1, r0
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fec:	f000 b818 	b.w	8011020 <_kill_r>
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d00a      	beq.n	801100a <_raise_r+0x4c>
 8010ff4:	1c59      	adds	r1, r3, #1
 8010ff6:	d103      	bne.n	8011000 <_raise_r+0x42>
 8010ff8:	2316      	movs	r3, #22
 8010ffa:	6003      	str	r3, [r0, #0]
 8010ffc:	2001      	movs	r0, #1
 8010ffe:	e7e7      	b.n	8010fd0 <_raise_r+0x12>
 8011000:	2100      	movs	r1, #0
 8011002:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011006:	4620      	mov	r0, r4
 8011008:	4798      	blx	r3
 801100a:	2000      	movs	r0, #0
 801100c:	e7e0      	b.n	8010fd0 <_raise_r+0x12>
	...

08011010 <raise>:
 8011010:	4b02      	ldr	r3, [pc, #8]	@ (801101c <raise+0xc>)
 8011012:	4601      	mov	r1, r0
 8011014:	6818      	ldr	r0, [r3, #0]
 8011016:	f7ff bfd2 	b.w	8010fbe <_raise_r>
 801101a:	bf00      	nop
 801101c:	2000007c 	.word	0x2000007c

08011020 <_kill_r>:
 8011020:	b538      	push	{r3, r4, r5, lr}
 8011022:	4d07      	ldr	r5, [pc, #28]	@ (8011040 <_kill_r+0x20>)
 8011024:	2300      	movs	r3, #0
 8011026:	4604      	mov	r4, r0
 8011028:	4608      	mov	r0, r1
 801102a:	4611      	mov	r1, r2
 801102c:	602b      	str	r3, [r5, #0]
 801102e:	f7ef fc3b 	bl	80008a8 <_kill>
 8011032:	1c43      	adds	r3, r0, #1
 8011034:	d102      	bne.n	801103c <_kill_r+0x1c>
 8011036:	682b      	ldr	r3, [r5, #0]
 8011038:	b103      	cbz	r3, 801103c <_kill_r+0x1c>
 801103a:	6023      	str	r3, [r4, #0]
 801103c:	bd38      	pop	{r3, r4, r5, pc}
 801103e:	bf00      	nop
 8011040:	20007f98 	.word	0x20007f98

08011044 <_getpid_r>:
 8011044:	f7ef bc28 	b.w	8000898 <_getpid>

08011048 <_init>:
 8011048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104a:	bf00      	nop
 801104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801104e:	bc08      	pop	{r3}
 8011050:	469e      	mov	lr, r3
 8011052:	4770      	bx	lr

08011054 <_fini>:
 8011054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011056:	bf00      	nop
 8011058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801105a:	bc08      	pop	{r3}
 801105c:	469e      	mov	lr, r3
 801105e:	4770      	bx	lr
