
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012898  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036ec  08012a68  08012a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016154  08016154  0001820c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016154  08016154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801615c  0801615c  0001820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801615c  0801615c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016160  08016160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08016164  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  08016230  000180cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  080162d0  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008168  2000020c  08016370  0001820c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008374  08016370  00018374  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001820c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021505  00000000  00000000  0001823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000062a7  00000000  00000000  00039741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001758  00000000  00000000  0003f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001262  00000000  00000000  00041140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034cd8  00000000  00000000  000423a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a519  00000000  00000000  0007707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00102881  00000000  00000000  000a1593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a3e14  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000642c  00000000  00000000  001a3e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001aa284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012a50 	.word	0x08012a50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08012a50 	.word	0x08012a50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f001 f80f 	bl	8001628 <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 f94a 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000228 	.word	0x20000228
 800061c:	40023000 	.word	0x40023000

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40023800 	.word	0x40023800

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_DMA_Init+0x68>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a17      	ldr	r2, [pc, #92]	@ (80006c8 <MX_DMA_Init+0x68>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_DMA_Init+0x68>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200b      	movs	r0, #11
 8000684:	f000 ff99 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f000 ffb2 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	200d      	movs	r0, #13
 8000694:	f000 ff91 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000698:	200d      	movs	r0, #13
 800069a:	f000 ffaa 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 ff89 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006a8:	200f      	movs	r0, #15
 80006aa:	f000 ffa2 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f000 ff81 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006b8:	202f      	movs	r0, #47	@ 0x2f
 80006ba:	f000 ff9a 	bl	80015f2 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_GPIO_Init+0x8c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a20      	ldr	r2, [pc, #128]	@ (8000758 <MX_GPIO_Init+0x8c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MX_GPIO_Init+0x8c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_GPIO_Init+0x8c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000758 <MX_GPIO_Init+0x8c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_GPIO_Init+0x8c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_GPIO_Init+0x8c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_GPIO_Init+0x8c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

}
 800074a:	bf00      	nop
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <_write+0x3c>)
 800076a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	4809      	ldr	r0, [pc, #36]	@ (800079c <_write+0x40>)
 8000778:	f004 fa7c 	bl	8004c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 800077c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000780:	2201      	movs	r2, #1
 8000782:	6979      	ldr	r1, [r7, #20]
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <_write+0x40>)
 8000786:	f004 fa75 	bl	8004c74 <HAL_UART_Transmit>
	return len + 1;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3301      	adds	r3, #1
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08012a68 	.word	0x08012a68
 800079c:	20000360 	.word	0x20000360

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fdad 	bl	8001302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f812 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f7ff ff8e 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 80007b0:	f7ff ff56 	bl	8000660 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007b4:	f000 fa52 	bl	8000c5c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80007b8:	f005 fd76 	bl	80062a8 <MX_LWIP_Init>
  MX_CRC_Init();
 80007bc:	f7ff ff0e 	bl	80005dc <MX_CRC_Init>
  MX_UART4_Init();
 80007c0:	f000 f9ec 	bl	8000b9c <MX_UART4_Init>
  MX_UART5_Init();
 80007c4:	f000 fa1a 	bl	8000bfc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 80007c8:	f010 fe7c 	bl	80114c4 <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <main+0x2c>

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	@ 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f011 faf4 	bl	8011dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <SystemClock_Config+0xd0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a29      	ldr	r2, [pc, #164]	@ (80008a0 <SystemClock_Config+0xd0>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <SystemClock_Config+0xd0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <SystemClock_Config+0xd4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a24      	ldr	r2, [pc, #144]	@ (80008a4 <SystemClock_Config+0xd4>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <SystemClock_Config+0xd4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000838:	2308      	movs	r3, #8
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800083c:	23d8      	movs	r3, #216	@ 0xd8
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f003 f949 	bl	8003ae4 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000858:	f000 f826 	bl	80008a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800085c:	f003 f8f2 	bl	8003a44 <HAL_PWREx_EnableOverDrive>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000866:	f000 f81f 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000876:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2107      	movs	r1, #7
 8000888:	4618      	mov	r0, r3
 800088a:	f003 fbcf 	bl	800402c <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000894:	f000 f808 	bl	80008a8 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	@ 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard Fault\n");
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <HardFault_Handler+0x10>)
 800090a:	f011 f96f 	bl	8011bec <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <HardFault_Handler+0xa>
 8000912:	bf00      	nop
 8000914:	08012a6c 	.word	0x08012a6c

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <MemManage_Handler+0x4>

08000920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <UsageFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095e:	f000 fd0d 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <DMA1_Stream0_IRQHandler+0x10>)
 800096e:	f001 fa05 	bl	8001d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200004a8 	.word	0x200004a8

0800097c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <DMA1_Stream2_IRQHandler+0x10>)
 8000982:	f001 f9fb 	bl	8001d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000448 	.word	0x20000448

08000990 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <DMA1_Stream4_IRQHandler+0x10>)
 8000996:	f001 f9f1 	bl	8001d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200003e8 	.word	0x200003e8

080009a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <USART3_IRQHandler+0x10>)
 80009aa:	f004 faad 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000360 	.word	0x20000360

080009b8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <DMA1_Stream7_IRQHandler+0x10>)
 80009be:	f001 f9dd 	bl	8001d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000508 	.word	0x20000508

080009cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <UART4_IRQHandler+0x10>)
 80009d2:	f004 fa99 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000250 	.word	0x20000250

080009e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <UART5_IRQHandler+0x10>)
 80009e6:	f004 fa8f 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200002d8 	.word	0x200002d8

080009f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009f8:	4802      	ldr	r0, [pc, #8]	@ (8000a04 <ETH_IRQHandler+0x10>)
 80009fa:	f001 ff8b 	bl	8002914 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20004f48 	.word	0x20004f48

08000a08 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <ETH_WKUP_IRQHandler+0x10>)
 8000a0e:	f001 ff81 	bl	8002914 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20004f48 	.word	0x20004f48

08000a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return 1;
 8000a20:	2301      	movs	r3, #1
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_kill>:

int _kill(int pid, int sig)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <_kill+0x20>)
 8000a38:	2216      	movs	r2, #22
 8000a3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	20008364 	.word	0x20008364

08000a50 <_exit>:

void _exit (int status)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ffe5 	bl	8000a2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <_exit+0x12>

08000a66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e00a      	b.n	8000a8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a78:	f3af 8000 	nop.w
 8000a7c:	4601      	mov	r1, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	60ba      	str	r2, [r7, #8]
 8000a84:	b2ca      	uxtb	r2, r1
 8000a86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dbf0      	blt.n	8000a78 <_read+0x12>
  }

  return len;
 8000a96:	687b      	ldr	r3, [r7, #4]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_isatty>:

int _isatty(int file)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d205      	bcs.n	8000b44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <_sbrk+0x6c>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20050000 	.word	0x20050000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	2000024c 	.word	0x2000024c
 8000b70:	20008378 	.word	0x20008378
 8000b74:	20008364 	.word	0x20008364

08000b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	@ (8000bf8 <MX_UART4_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_UART4_Init+0x58>)
 8000be0:	f003 fffa 	bl	8004bd8 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000bea:	f7ff fe5d 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000250 	.word	0x20000250
 8000bf8:	40004c00 	.word	0x40004c00

08000bfc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	@ (8000c58 <MX_UART5_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_UART5_Init+0x58>)
 8000c40:	f003 ffca 	bl	8004bd8 <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f7ff fe2d 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200002d8 	.word	0x200002d8
 8000c58:	40005000 	.word	0x40005000

08000c5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	@ (8000cb8 <MX_USART3_UART_Init+0x5c>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_USART3_UART_Init+0x58>)
 8000ca0:	f003 ff9a 	bl	8004bd8 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000caa:	f7ff fdfd 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000360 	.word	0x20000360
 8000cb8:	40004800 	.word	0x40004800

08000cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0b0      	sub	sp, #192	@ 0xc0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd8:	2284      	movs	r2, #132	@ 0x84
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f011 f875 	bl	8011dcc <memset>
  if(uartHandle->Instance==UART4)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a53      	ldr	r2, [pc, #332]	@ (8000e34 <HAL_UART_MspInit+0x178>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	f040 80b1 	bne.w	8000e50 <HAL_UART_MspInit+0x194>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000cee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fb7b 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000d08:	f7ff fdce 	bl	80008a8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e38 <HAL_UART_MspInit+0x17c>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	4a49      	ldr	r2, [pc, #292]	@ (8000e38 <HAL_UART_MspInit+0x17c>)
 8000d12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d18:	4b47      	ldr	r3, [pc, #284]	@ (8000e38 <HAL_UART_MspInit+0x17c>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b44      	ldr	r3, [pc, #272]	@ (8000e38 <HAL_UART_MspInit+0x17c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d28:	4a43      	ldr	r2, [pc, #268]	@ (8000e38 <HAL_UART_MspInit+0x17c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d30:	4b41      	ldr	r3, [pc, #260]	@ (8000e38 <HAL_UART_MspInit+0x17c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d3c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d56:	2308      	movs	r3, #8
 8000d58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d60:	4619      	mov	r1, r3
 8000d62:	4836      	ldr	r0, [pc, #216]	@ (8000e3c <HAL_UART_MspInit+0x180>)
 8000d64:	f002 fcc2 	bl	80036ec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000d68:	4b35      	ldr	r3, [pc, #212]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d6a:	4a36      	ldr	r2, [pc, #216]	@ (8000e44 <HAL_UART_MspInit+0x188>)
 8000d6c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000d6e:	4b34      	ldr	r3, [pc, #208]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d70:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d74:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d76:	4b32      	ldr	r3, [pc, #200]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d78:	2240      	movs	r2, #64	@ 0x40
 8000d7a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7c:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d88:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d9c:	4b28      	ldr	r3, [pc, #160]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000da8:	4825      	ldr	r0, [pc, #148]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000daa:	f000 fe47 	bl	8001a3c <HAL_DMA_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000db4:	f7ff fd78 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a21      	ldr	r2, [pc, #132]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000dbc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dbe:	4a20      	ldr	r2, [pc, #128]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000dc6:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <HAL_UART_MspInit+0x190>)
 8000dc8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000dcc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dd0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000de0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000de4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000e04:	4810      	ldr	r0, [pc, #64]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000e06:	f000 fe19 	bl	8001a3c <HAL_DMA_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8000e10:	f7ff fd4a 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a0c      	ldr	r2, [pc, #48]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000e18:	675a      	str	r2, [r3, #116]	@ 0x74
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2034      	movs	r0, #52	@ 0x34
 8000e26:	f000 fbc8 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e2a:	2034      	movs	r0, #52	@ 0x34
 8000e2c:	f000 fbe1 	bl	80015f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e30:	e121      	b.n	8001076 <HAL_UART_MspInit+0x3ba>
 8000e32:	bf00      	nop
 8000e34:	40004c00 	.word	0x40004c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	200003e8 	.word	0x200003e8
 8000e44:	40026070 	.word	0x40026070
 8000e48:	20000448 	.word	0x20000448
 8000e4c:	40026040 	.word	0x40026040
  else if(uartHandle->Instance==UART5)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a8a      	ldr	r2, [pc, #552]	@ (8001080 <HAL_UART_MspInit+0x3c4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f040 80c3 	bne.w	8000fe2 <HAL_UART_MspInit+0x326>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fac4 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8000e76:	f7ff fd17 	bl	80008a8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e7a:	4b82      	ldr	r3, [pc, #520]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	4a81      	ldr	r2, [pc, #516]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000e80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e86:	4b7f      	ldr	r3, [pc, #508]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b7c      	ldr	r3, [pc, #496]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a7b      	ldr	r2, [pc, #492]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b79      	ldr	r3, [pc, #484]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b76      	ldr	r3, [pc, #472]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a75      	ldr	r2, [pc, #468]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b73      	ldr	r3, [pc, #460]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000edc:	2308      	movs	r3, #8
 8000ede:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4867      	ldr	r0, [pc, #412]	@ (8001088 <HAL_UART_MspInit+0x3cc>)
 8000eea:	f002 fbff 	bl	80036ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f06:	2308      	movs	r3, #8
 8000f08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f10:	4619      	mov	r1, r3
 8000f12:	485e      	ldr	r0, [pc, #376]	@ (800108c <HAL_UART_MspInit+0x3d0>)
 8000f14:	f002 fbea 	bl	80036ec <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000f18:	4b5d      	ldr	r3, [pc, #372]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001094 <HAL_UART_MspInit+0x3d8>)
 8000f1c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f20:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f24:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	4b5a      	ldr	r3, [pc, #360]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b58      	ldr	r3, [pc, #352]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b57      	ldr	r3, [pc, #348]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3a:	4b55      	ldr	r3, [pc, #340]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f40:	4b53      	ldr	r3, [pc, #332]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000f46:	4b52      	ldr	r3, [pc, #328]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4c:	4b50      	ldr	r3, [pc, #320]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f52:	4b4f      	ldr	r3, [pc, #316]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000f58:	484d      	ldr	r0, [pc, #308]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f5a:	f000 fd6f 	bl	8001a3c <HAL_DMA_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8000f64:	f7ff fca0 	bl	80008a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a49      	ldr	r2, [pc, #292]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f6c:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f6e:	4a48      	ldr	r2, [pc, #288]	@ (8001090 <HAL_UART_MspInit+0x3d4>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000f74:	4b48      	ldr	r3, [pc, #288]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000f76:	4a49      	ldr	r2, [pc, #292]	@ (800109c <HAL_UART_MspInit+0x3e0>)
 8000f78:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000f7a:	4b47      	ldr	r3, [pc, #284]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000f7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f80:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f82:	4b45      	ldr	r3, [pc, #276]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000f84:	2240      	movs	r2, #64	@ 0x40
 8000f86:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f88:	4b43      	ldr	r3, [pc, #268]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000f90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f94:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f96:	4b40      	ldr	r3, [pc, #256]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000fb4:	4838      	ldr	r0, [pc, #224]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000fb6:	f000 fd41 	bl	8001a3c <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x308>
      Error_Handler();
 8000fc0:	f7ff fc72 	bl	80008a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a34      	ldr	r2, [pc, #208]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000fc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fca:	4a33      	ldr	r2, [pc, #204]	@ (8001098 <HAL_UART_MspInit+0x3dc>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2035      	movs	r0, #53	@ 0x35
 8000fd6:	f000 faf0 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000fda:	2035      	movs	r0, #53	@ 0x35
 8000fdc:	f000 fb09 	bl	80015f2 <HAL_NVIC_EnableIRQ>
}
 8000fe0:	e049      	b.n	8001076 <HAL_UART_MspInit+0x3ba>
  else if(uartHandle->Instance==USART3)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80010a0 <HAL_UART_MspInit+0x3e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d144      	bne.n	8001076 <HAL_UART_MspInit+0x3ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 f9fc 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x34e>
      Error_Handler();
 8001006:	f7ff fc4f 	bl	80008a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_UART_MspInit+0x3c8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800103e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001054:	2307      	movs	r3, #7
 8001056:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800105e:	4619      	mov	r1, r3
 8001060:	480a      	ldr	r0, [pc, #40]	@ (800108c <HAL_UART_MspInit+0x3d0>)
 8001062:	f002 fb43 	bl	80036ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2027      	movs	r0, #39	@ 0x27
 800106c:	f000 faa5 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001070:	2027      	movs	r0, #39	@ 0x27
 8001072:	f000 fabe 	bl	80015f2 <HAL_NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	37c0      	adds	r7, #192	@ 0xc0
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40005000 	.word	0x40005000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	200004a8 	.word	0x200004a8
 8001094:	40026010 	.word	0x40026010
 8001098:	20000508 	.word	0x20000508
 800109c:	400260b8 	.word	0x400260b8
 80010a0:	40004800 	.word	0x40004800

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a8:	f7ff fd66 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	@ (80010e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	@ (80010f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80010d2:	f010 fec9 	bl	8011e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fb63 	bl	80007a0 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80010e8:	08016164 	.word	0x08016164
  ldr r2, =_sbss
 80010ec:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80010f0:	20008374 	.word	0x20008374

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>

080010f6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <LAN8742_RegisterBusIO+0x28>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <LAN8742_RegisterBusIO+0x28>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <LAN8742_RegisterBusIO+0x28>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001122:	e014      	b.n	800114e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d139      	bne.n	80011ea <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2220      	movs	r2, #32
 8001188:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e01c      	b.n	80011ca <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	2112      	movs	r1, #18
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	4798      	blx	r3
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da03      	bge.n	80011ac <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80011a4:	f06f 0304 	mvn.w	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80011aa:	e00b      	b.n	80011c4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d105      	bne.n	80011c4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
         break;
 80011c2:	e005      	b.n	80011d0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b1f      	cmp	r3, #31
 80011ce:	d9df      	bls.n	8001190 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b1f      	cmp	r3, #31
 80011d6:	d902      	bls.n	80011de <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011d8:	f06f 0302 	mvn.w	r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80011ea:	693b      	ldr	r3, [r7, #16]
 }
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6810      	ldr	r0, [r2, #0]
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	2101      	movs	r1, #1
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	da02      	bge.n	800121c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001216:	f06f 0304 	mvn.w	r3, #4
 800121a:	e06e      	b.n	80012fa <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6810      	ldr	r0, [r2, #0]
 8001224:	f107 020c 	add.w	r2, r7, #12
 8001228:	2101      	movs	r1, #1
 800122a:	4798      	blx	r3
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	da02      	bge.n	8001238 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001232:	f06f 0304 	mvn.w	r3, #4
 8001236:	e060      	b.n	80012fa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001242:	2301      	movs	r3, #1
 8001244:	e059      	b.n	80012fa <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6810      	ldr	r0, [r2, #0]
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	2100      	movs	r1, #0
 8001254:	4798      	blx	r3
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	da02      	bge.n	8001262 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800125c:	f06f 0304 	mvn.w	r3, #4
 8001260:	e04b      	b.n	80012fa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d11b      	bne.n	80012a4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <LAN8742_GetLinkState+0x90>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001280:	2302      	movs	r3, #2
 8001282:	e03a      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800128e:	2303      	movs	r3, #3
 8001290:	e033      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800129c:	2304      	movs	r3, #4
 800129e:	e02c      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012a0:	2305      	movs	r3, #5
 80012a2:	e02a      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6810      	ldr	r0, [r2, #0]
 80012ac:	f107 020c 	add.w	r2, r7, #12
 80012b0:	211f      	movs	r1, #31
 80012b2:	4798      	blx	r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da02      	bge.n	80012c0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012ba:	f06f 0304 	mvn.w	r3, #4
 80012be:	e01c      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012ca:	2306      	movs	r3, #6
 80012cc:	e015      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f003 031c 	and.w	r3, r3, #28
 80012d4:	2b18      	cmp	r3, #24
 80012d6:	d101      	bne.n	80012dc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012d8:	2302      	movs	r3, #2
 80012da:	e00e      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 031c 	and.w	r3, r3, #28
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d101      	bne.n	80012ea <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e007      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 031c 	and.w	r3, r3, #28
 80012f0:	2b14      	cmp	r3, #20
 80012f2:	d101      	bne.n	80012f8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012f4:	2304      	movs	r3, #4
 80012f6:	e000      	b.n	80012fa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012f8:	2305      	movs	r3, #5
    }
  }
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001306:	2003      	movs	r0, #3
 8001308:	f000 f94c 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130c:	200f      	movs	r0, #15
 800130e:	f000 f805 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001312:	f7ff facf 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f967 	bl	800160e <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001358:	f000 f92f 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20000008 	.word	0x20000008
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000568 	.word	0x20000568

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000568 	.word	0x20000568

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	4313      	orrs	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	05fa0000 	.word	0x05fa0000

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	@ (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e054      	b.n	80016e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7f5b      	ldrb	r3, [r3, #29]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe ffe8 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a22      	ldr	r2, [pc, #136]	@ (80016ec <HAL_CRC_Init+0xc4>)
 8001664:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0218 	bic.w	r2, r2, #24
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	e00c      	b.n	8001692 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	461a      	mov	r2, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f94c 	bl	8001920 <HAL_CRCEx_Polynomial_Set>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e028      	b.n	80016e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	795b      	ldrb	r3, [r3, #5]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	e004      	b.n	80016b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6912      	ldr	r2, [r2, #16]
 80016ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	04c11db7 	.word	0x04c11db7

080016f0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2202      	movs	r2, #2
 8001704:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d006      	beq.n	800172c <HAL_CRC_Calculate+0x3c>
 800171e:	2b03      	cmp	r3, #3
 8001720:	d829      	bhi.n	8001776 <HAL_CRC_Calculate+0x86>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d019      	beq.n	800175a <HAL_CRC_Calculate+0x6a>
 8001726:	2b02      	cmp	r3, #2
 8001728:	d01e      	beq.n	8001768 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800172a:	e024      	b.n	8001776 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	441a      	add	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	d3f0      	bcc.n	8001732 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
      break;
 8001758:	e00e      	b.n	8001778 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f812 	bl	8001788 <CRC_Handle_8>
 8001764:	6138      	str	r0, [r7, #16]
      break;
 8001766:	e007      	b.n	8001778 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f89d 	bl	80018ac <CRC_Handle_16>
 8001772:	6138      	str	r0, [r7, #16]
      break;
 8001774:	e000      	b.n	8001778 <HAL_CRC_Calculate+0x88>
      break;
 8001776:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800177e:	693b      	ldr	r3, [r7, #16]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	e023      	b.n	80017e2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	3301      	adds	r3, #1
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	440b      	add	r3, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80017b4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	440b      	add	r3, r1
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80017c4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	3303      	adds	r3, #3
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	440b      	add	r3, r1
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80017d8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80017da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	3301      	adds	r3, #1
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3d6      	bcc.n	800179a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d051      	beq.n	800189a <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	7013      	strb	r3, [r2, #0]
 8001810:	e043      	b.n	800189a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d118      	bne.n	800184e <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b21b      	sxth	r3, r3
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21a      	sxth	r2, r3
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	3301      	adds	r3, #1
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	440b      	add	r3, r1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	8b7a      	ldrh	r2, [r7, #26]
 800184a:	801a      	strh	r2, [r3, #0]
 800184c:	e025      	b.n	800189a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d120      	bne.n	800189a <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b21b      	sxth	r3, r3
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21a      	sxth	r2, r3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	3301      	adds	r3, #1
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	440b      	add	r3, r1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	8b7a      	ldrh	r2, [r7, #26]
 8001886:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4413      	add	r3, r2
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3724      	adds	r7, #36	@ 0x24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e013      	b.n	80018e6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	041a      	lsls	r2, r3, #16
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	440b      	add	r3, r1
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	4619      	mov	r1, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3e6      	bcc.n	80018be <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	4413      	add	r3, r2
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001930:	231f      	movs	r3, #31
 8001932:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	e063      	b.n	8001a0c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001944:	bf00      	nop
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1e5a      	subs	r2, r3, #1
 800194a:	613a      	str	r2, [r7, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_CRCEx_Polynomial_Set+0x44>
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b18      	cmp	r3, #24
 8001968:	d846      	bhi.n	80019f8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800196a:	a201      	add	r2, pc, #4	@ (adr r2, 8001970 <HAL_CRCEx_Polynomial_Set+0x50>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019ff 	.word	0x080019ff
 8001974:	080019f9 	.word	0x080019f9
 8001978:	080019f9 	.word	0x080019f9
 800197c:	080019f9 	.word	0x080019f9
 8001980:	080019f9 	.word	0x080019f9
 8001984:	080019f9 	.word	0x080019f9
 8001988:	080019f9 	.word	0x080019f9
 800198c:	080019f9 	.word	0x080019f9
 8001990:	080019ed 	.word	0x080019ed
 8001994:	080019f9 	.word	0x080019f9
 8001998:	080019f9 	.word	0x080019f9
 800199c:	080019f9 	.word	0x080019f9
 80019a0:	080019f9 	.word	0x080019f9
 80019a4:	080019f9 	.word	0x080019f9
 80019a8:	080019f9 	.word	0x080019f9
 80019ac:	080019f9 	.word	0x080019f9
 80019b0:	080019e1 	.word	0x080019e1
 80019b4:	080019f9 	.word	0x080019f9
 80019b8:	080019f9 	.word	0x080019f9
 80019bc:	080019f9 	.word	0x080019f9
 80019c0:	080019f9 	.word	0x080019f9
 80019c4:	080019f9 	.word	0x080019f9
 80019c8:	080019f9 	.word	0x080019f9
 80019cc:	080019f9 	.word	0x080019f9
 80019d0:	080019d5 	.word	0x080019d5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d913      	bls.n	8001a02 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80019de:	e010      	b.n	8001a02 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b07      	cmp	r3, #7
 80019e4:	d90f      	bls.n	8001a06 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80019ea:	e00c      	b.n	8001a06 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d90b      	bls.n	8001a0a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80019f6:	e008      	b.n	8001a0a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	75fb      	strb	r3, [r7, #23]
        break;
 80019fc:	e006      	b.n	8001a0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80019fe:	bf00      	nop
 8001a00:	e004      	b.n	8001a0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a02:	bf00      	nop
 8001a04:	e002      	b.n	8001a0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a0a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10d      	bne.n	8001a2e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 0118 	bic.w	r1, r3, #24
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fcac 	bl	80013a4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e099      	b.n	8001b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a78:	e00f      	b.n	8001a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7a:	f7ff fc93 	bl	80013a4 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d908      	bls.n	8001a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e078      	b.n	8001b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e8      	bne.n	8001a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_DMA_Init+0x158>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d107      	bne.n	8001b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	4313      	orrs	r3, r2
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d117      	bne.n	8001b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fb09 	bl	8002158 <DMA_CheckFifoParam>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2240      	movs	r2, #64	@ 0x40
 8001b50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e016      	b.n	8001b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fac0 	bl	80020ec <DMA_CalcBaseAndBitshift>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b74:	223f      	movs	r2, #63	@ 0x3f
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	f010803f 	.word	0xf010803f

08001b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Start_IT+0x26>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e048      	b.n	8001c50 <HAL_DMA_Start_IT+0xb8>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d137      	bne.n	8001c42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fa52 	bl	8002090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	223f      	movs	r2, #63	@ 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0216 	orr.w	r2, r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c16:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0208 	orr.w	r2, r2, #8
 8001c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e005      	b.n	8001c4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c66:	f7ff fb9d 	bl	80013a4 <HAL_GetTick>
 8001c6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d008      	beq.n	8001c8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2280      	movs	r2, #128	@ 0x80
 8001c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e052      	b.n	8001d30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0216 	bic.w	r2, r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ca8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_DMA_Abort+0x62>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0208 	bic.w	r2, r2, #8
 8001cc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cda:	e013      	b.n	8001d04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cdc:	f7ff fb62 	bl	80013a4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d90c      	bls.n	8001d04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2220      	movs	r2, #32
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e015      	b.n	8001d30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e4      	bne.n	8001cdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d16:	223f      	movs	r2, #63	@ 0x3f
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d004      	beq.n	8001d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00c      	b.n	8001d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2205      	movs	r2, #5
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d88:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc4 <HAL_DMA_IRQHandler+0x248>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a8e      	ldr	r2, [pc, #568]	@ (8001fc8 <HAL_DMA_IRQHandler+0x24c>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da6:	2208      	movs	r2, #8
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01a      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2201      	movs	r2, #1
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d012      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2204      	movs	r2, #4
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d012      	beq.n	8001e54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	2204      	movs	r2, #4
 8001e42:	409a      	lsls	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	f043 0204 	orr.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	2210      	movs	r2, #16
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d043      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03c      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	2210      	movs	r2, #16
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d018      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d108      	bne.n	8001eac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d024      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
 8001eaa:	e01f      	b.n	8001eec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
 8001ebc:	e016      	b.n	8001eec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0208 	bic.w	r2, r2, #8
 8001eda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 808f 	beq.w	800201c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 8087 	beq.w	800201c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f12:	2220      	movs	r2, #32
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d136      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0216 	bic.w	r2, r2, #22
 8001f34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x1da>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0208 	bic.w	r2, r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	223f      	movs	r2, #63	@ 0x3f
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d07e      	beq.n	8002088 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
        }
        return;
 8001f92:	e079      	b.n	8002088 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01d      	beq.n	8001fde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d031      	beq.n	800201c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
 8001fc0:	e02c      	b.n	800201c <HAL_DMA_IRQHandler+0x2a0>
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e01e      	b.n	800201c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0210 	bic.w	r2, r2, #16
 8001ffa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	2b00      	cmp	r3, #0
 8002022:	d032      	beq.n	800208a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d022      	beq.n	8002076 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2205      	movs	r2, #5
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3301      	adds	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	d307      	bcc.n	8002064 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f2      	bne.n	8002048 <HAL_DMA_IRQHandler+0x2cc>
 8002062:	e000      	b.n	8002066 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002064:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e000      	b.n	800208a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002088:	bf00      	nop
    }
  }
}
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b40      	cmp	r3, #64	@ 0x40
 80020bc:	d108      	bne.n	80020d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ce:	e007      	b.n	80020e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	3b10      	subs	r3, #16
 80020fc:	4a13      	ldr	r2, [pc, #76]	@ (800214c <DMA_CalcBaseAndBitshift+0x60>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <DMA_CalcBaseAndBitshift+0x64>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d908      	bls.n	800212c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <DMA_CalcBaseAndBitshift+0x68>)
 8002122:	4013      	ands	r3, r2
 8002124:	1d1a      	adds	r2, r3, #4
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	659a      	str	r2, [r3, #88]	@ 0x58
 800212a:	e006      	b.n	800213a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <DMA_CalcBaseAndBitshift+0x68>)
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	aaaaaaab 	.word	0xaaaaaaab
 8002150:	08015f58 	.word	0x08015f58
 8002154:	fffffc00 	.word	0xfffffc00

08002158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d11f      	bne.n	80021b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d856      	bhi.n	8002226 <DMA_CheckFifoParam+0xce>
 8002178:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <DMA_CheckFifoParam+0x28>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002191 	.word	0x08002191
 8002184:	080021a3 	.word	0x080021a3
 8002188:	08002191 	.word	0x08002191
 800218c:	08002227 	.word	0x08002227
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d046      	beq.n	800222a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a0:	e043      	b.n	800222a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021aa:	d140      	bne.n	800222e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b0:	e03d      	b.n	800222e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ba:	d121      	bne.n	8002200 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d837      	bhi.n	8002232 <DMA_CheckFifoParam+0xda>
 80021c2:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <DMA_CheckFifoParam+0x70>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021df 	.word	0x080021df
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	080021f1 	.word	0x080021f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e030      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d025      	beq.n	8002236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ee:	e022      	b.n	8002236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f8:	d11f      	bne.n	800223a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021fe:	e01c      	b.n	800223a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d903      	bls.n	800220e <DMA_CheckFifoParam+0xb6>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d003      	beq.n	8002214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800220c:	e018      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
      break;
 8002212:	e015      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e00b      	b.n	800223e <DMA_CheckFifoParam+0xe6>
      break;
 8002226:	bf00      	nop
 8002228:	e00a      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e008      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e006      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e004      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e002      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;   
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
    }
  } 
  
  return status; 
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e086      	b.n	8002370 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f004 fb47 	bl	8006908 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_ETH_Init+0x128>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4a3e      	ldr	r2, [pc, #248]	@ (8002378 <HAL_ETH_Init+0x128>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002284:	6453      	str	r3, [r2, #68]	@ 0x44
 8002286:	4b3c      	ldr	r3, [pc, #240]	@ (8002378 <HAL_ETH_Init+0x128>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002292:	4b3a      	ldr	r3, [pc, #232]	@ (800237c <HAL_ETH_Init+0x12c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4a39      	ldr	r2, [pc, #228]	@ (800237c <HAL_ETH_Init+0x12c>)
 8002298:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800229c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800229e:	4b37      	ldr	r3, [pc, #220]	@ (800237c <HAL_ETH_Init+0x12c>)
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4935      	ldr	r1, [pc, #212]	@ (800237c <HAL_ETH_Init+0x12c>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022ac:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_ETH_Init+0x12c>)
 80022ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022c8:	f7ff f86c 	bl	80013a4 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022ce:	e011      	b.n	80022f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022d0:	f7ff f868 	bl	80013a4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022de:	d909      	bls.n	80022f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2204      	movs	r2, #4
 80022e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	22e0      	movs	r2, #224	@ 0xe0
 80022ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e03d      	b.n	8002370 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e4      	bne.n	80022d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 ff34 	bl	8003174 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 ffdf 	bl	80032d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f001 f835 	bl	8003382 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	461a      	mov	r2, r3
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 ff9d 	bl	8003260 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002334:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_ETH_Init+0x130>)
 8002344:	430b      	orrs	r3, r1
 8002346:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800235a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2210      	movs	r2, #16
 800236a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	00020060 	.word	0x00020060

08002384 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002392:	2b10      	cmp	r3, #16
 8002394:	d15f      	bne.n	8002456 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2204      	movs	r2, #4
 80023a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa2e 	bl	800280c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7fe ffff 	bl	80013bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023dc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023f4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fd58 	bl	8002eac <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe ffd1 	bl	80013bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0204 	orr.w	r2, r2, #4
 8002430:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <HAL_ETH_Start_IT+0xdc>)
 8002442:	430b      	orrs	r3, r1
 8002444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002448:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	@ 0x40
 800244e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	0001a0c1 	.word	0x0001a0c1

08002464 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002472:	2b40      	cmp	r3, #64	@ 0x40
 8002474:	d16e      	bne.n	8002554 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <HAL_ETH_Stop_IT+0xfc>)
 800248e:	400b      	ands	r3, r1
 8002490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002494:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ac:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	f023 0302 	bic.w	r3, r3, #2
 80024c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024c4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0204 	bic.w	r2, r2, #4
 80024d4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe ff6c 	bl	80013bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fcdd 	bl	8002eac <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800250a:	2001      	movs	r0, #1
 800250c:	f7fe ff56 	bl	80013bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e00e      	b.n	800253c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	3212      	adds	r2, #18
 8002524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002528:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d9ed      	bls.n	800251e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2210      	movs	r2, #16
 800254c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	fffe5f3e 	.word	0xfffe5f3e

08002564 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07c      	b.n	8002684 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d176      	bne.n	8002682 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002594:	2200      	movs	r2, #0
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 ff61 	bl	8003460 <ETH_Prepare_Tx_Descriptors>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e065      	b.n	8002684 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025b8:	f3bf 8f4f 	dsb	sy
}
 80025bc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3206      	adds	r2, #6
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d904      	bls.n	80025e8 <HAL_ETH_Transmit+0x84>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	1f1a      	subs	r2, r3, #4
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3106      	adds	r1, #6
 80025f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025fc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80025fe:	f7fe fed1 	bl	80013a4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002604:	e037      	b.n	8002676 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d011      	beq.n	800263c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261e:	f043 0208 	orr.w	r2, r3, #8
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e023      	b.n	8002684 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002642:	d018      	beq.n	8002676 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7fe feae 	bl	80013a4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <HAL_ETH_Transmit+0xf6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002670:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e006      	b.n	8002684 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	dbc3      	blt.n	8002606 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0a4      	b.n	8002802 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026be:	2b40      	cmp	r3, #64	@ 0x40
 80026c0:	d001      	beq.n	80026c6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e09d      	b.n	8002802 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	3212      	adds	r2, #18
 80026d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026dc:	f1c3 0304 	rsb	r3, r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026e2:	e066      	b.n	80027b2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <HAL_ETH_ReadData+0x88>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03c      	beq.n	800278e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002736:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800274c:	2301      	movs	r3, #1
 800274e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f004 fa9d 	bl	8006cac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	441a      	add	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2200      	movs	r2, #0
 800278c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d902      	bls.n	80027a0 <HAL_ETH_ReadData+0x114>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b04      	subs	r3, #4
 800279e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	3212      	adds	r2, #18
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db06      	blt.n	80027c8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d202      	bcs.n	80027c8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d08d      	beq.n	80026e4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	441a      	add	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f815 	bl	800280c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002818:	2301      	movs	r3, #1
 800281a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002820:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	3212      	adds	r2, #18
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002832:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002834:	e042      	b.n	80028bc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d112      	bne.n	8002864 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fa02 	bl	8006c4c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	74fb      	strb	r3, [r7, #19]
 8002852:	e007      	b.n	8002864 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	461a      	mov	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	461a      	mov	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	4b26      	ldr	r3, [pc, #152]	@ (8002910 <ETH_UpdateDescriptor+0x104>)
 8002878:	4313      	orrs	r3, r2
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	6053      	str	r3, [r2, #4]
 800287e:	e005      	b.n	800288c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	3301      	adds	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d902      	bls.n	80028aa <ETH_UpdateDescriptor+0x9e>
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	3b04      	subs	r3, #4
 80028a8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	3212      	adds	r2, #18
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	617b      	str	r3, [r7, #20]
      desccount--;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <ETH_UpdateDescriptor+0xbc>
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1b6      	bne.n	8002836 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d01a      	beq.n	8002908 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3303      	adds	r3, #3
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028dc:	f3bf 8f5f 	dmb	sy
}
 80028e0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6919      	ldr	r1, [r3, #16]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	18ca      	adds	r2, r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028fa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002908:	bf00      	nop
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	80004000 	.word	0x80004000

08002914 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800293c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <HAL_ETH_IRQHandler+0x158>)
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <HAL_ETH_IRQHandler+0x56>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295e:	461a      	mov	r2, r3
 8002960:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <HAL_ETH_IRQHandler+0x15c>)
 8002962:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f891 	bl	8002a8c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00f      	beq.n	8002994 <HAL_ETH_IRQHandler+0x80>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002986:	461a      	mov	r2, r3
 8002988:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800298c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f872 	bl	8002a78 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d042      	beq.n	8002a24 <HAL_ETH_IRQHandler+0x110>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03d      	beq.n	8002a24 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f043 0208 	orr.w	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01a      	beq.n	80029f8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	4b29      	ldr	r3, [pc, #164]	@ (8002a74 <HAL_ETH_IRQHandler+0x160>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80029e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029ec:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	22e0      	movs	r2, #224	@ 0xe0
 80029f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80029f6:	e012      	b.n	8002a1e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a16:	461a      	mov	r2, r3
 8002a18:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002a1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f83e 	bl	8002aa0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00e      	beq.n	8002a4c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f838 	bl	8002ab4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002a56:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <HAL_ETH_IRQHandler+0x158>)
 8002a58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a5c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f832 	bl	8002ac8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40013c00 	.word	0x40013c00
 8002a70:	00010040 	.word	0x00010040
 8002a74:	007e2000 	.word	0x007e2000

08002a78 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 031c 	and.w	r3, r3, #28
 8002af8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	02db      	lsls	r3, r3, #11
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0302 	bic.w	r3, r3, #2
 8002b1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002b2c:	f7fe fc3a 	bl	80013a4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b32:	e00d      	b.n	8002b50 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002b34:	f7fe fc36 	bl	80013a4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b42:	d301      	bcc.n	8002b48 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e010      	b.n	8002b6a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ec      	bne.n	8002b34 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 031c 	and.w	r3, r3, #28
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	02db      	lsls	r3, r3, #11
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	019b      	lsls	r3, r3, #6
 8002ba0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bcc:	f7fe fbea 	bl	80013a4 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bd2:	e00d      	b.n	8002bf0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002bd4:	f7fe fbe6 	bl	80013a4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be2:	d301      	bcc.n	8002be8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e009      	b.n	8002bfc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ec      	bne.n	8002bd4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0e6      	b.n	8002de6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2300      	moveq	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00b      	b.n	8002e1e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d105      	bne.n	8002e1c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f870 	bl	8002ef8 <ETH_SetMACConfig>

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 031c 	bic.w	r3, r3, #28
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e40:	f001 faa6 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 8002e44:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <HAL_ETH_SetMDIOClockRange+0x74>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d804      	bhi.n	8002e58 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e019      	b.n	8002e8c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4a11      	ldr	r2, [pc, #68]	@ (8002ea0 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d204      	bcs.n	8002e6a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f043 030c 	orr.w	r3, r3, #12
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e010      	b.n	8002e8c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d90c      	bls.n	8002e8c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d804      	bhi.n	8002e84 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e003      	b.n	8002e8c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f043 0310 	orr.w	r3, r3, #16
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	611a      	str	r2, [r3, #16]
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	02160ebf 	.word	0x02160ebf
 8002ea0:	03938700 	.word	0x03938700
 8002ea4:	05f5e0ff 	.word	0x05f5e0ff
 8002ea8:	08f0d17f 	.word	0x08f0d17f

08002eac <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ece:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7fe fa6d 	bl	80013bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eec:	6193      	str	r3, [r2, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4b53      	ldr	r3, [pc, #332]	@ (800305c <ETH_SetMACConfig+0x164>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	7b9b      	ldrb	r3, [r3, #14]
 8002f16:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	7c12      	ldrb	r2, [r2, #16]
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	d102      	bne.n	8002f26 <ETH_SetMACConfig+0x2e>
 8002f20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f24:	e000      	b.n	8002f28 <ETH_SetMACConfig+0x30>
 8002f26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f28:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	7c52      	ldrb	r2, [r2, #17]
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	d102      	bne.n	8002f38 <ETH_SetMACConfig+0x40>
 8002f32:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f36:	e000      	b.n	8002f3a <ETH_SetMACConfig+0x42>
 8002f38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f3a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7fdb      	ldrb	r3, [r3, #31]
 8002f46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f48:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	7f92      	ldrb	r2, [r2, #30]
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d102      	bne.n	8002f5e <ETH_SetMACConfig+0x66>
 8002f58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f5c:	e000      	b.n	8002f60 <ETH_SetMACConfig+0x68>
 8002f5e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	7f1b      	ldrb	r3, [r3, #28]
 8002f66:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f68:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	791b      	ldrb	r3, [r3, #4]
 8002f74:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	d102      	bne.n	8002f88 <ETH_SetMACConfig+0x90>
 8002f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f86:	e000      	b.n	8002f8a <ETH_SetMACConfig+0x92>
 8002f88:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	7bdb      	ldrb	r3, [r3, #15]
 8002f90:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f92:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fa0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7fe f9fe 	bl	80013bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fde:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d101      	bne.n	8002fee <ETH_SetMACConfig+0xf6>
 8002fea:	2280      	movs	r2, #128	@ 0x80
 8002fec:	e000      	b.n	8002ff0 <ETH_SetMACConfig+0xf8>
 8002fee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ff0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002ffe:	2a01      	cmp	r2, #1
 8003000:	d101      	bne.n	8003006 <ETH_SetMACConfig+0x10e>
 8003002:	2208      	movs	r2, #8
 8003004:	e000      	b.n	8003008 <ETH_SetMACConfig+0x110>
 8003006:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003008:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003010:	2a01      	cmp	r2, #1
 8003012:	d101      	bne.n	8003018 <ETH_SetMACConfig+0x120>
 8003014:	2204      	movs	r2, #4
 8003016:	e000      	b.n	800301a <ETH_SetMACConfig+0x122>
 8003018:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800301a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003022:	2a01      	cmp	r2, #1
 8003024:	d101      	bne.n	800302a <ETH_SetMACConfig+0x132>
 8003026:	2202      	movs	r2, #2
 8003028:	e000      	b.n	800302c <ETH_SetMACConfig+0x134>
 800302a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800302c:	4313      	orrs	r3, r2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003044:	2001      	movs	r0, #1
 8003046:	f7fe f9b9 	bl	80013bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	fd20810f 	.word	0xfd20810f

08003060 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4b3d      	ldr	r3, [pc, #244]	@ (8003170 <ETH_SetDMAConfig+0x110>)
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	7b1b      	ldrb	r3, [r3, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <ETH_SetDMAConfig+0x2c>
 8003086:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800308a:	e000      	b.n	800308e <ETH_SetDMAConfig+0x2e>
 800308c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	7b5b      	ldrb	r3, [r3, #13]
 8003092:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003094:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	7f52      	ldrb	r2, [r2, #29]
 800309a:	2a00      	cmp	r2, #0
 800309c:	d102      	bne.n	80030a4 <ETH_SetDMAConfig+0x44>
 800309e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80030a2:	e000      	b.n	80030a6 <ETH_SetDMAConfig+0x46>
 80030a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	7b9b      	ldrb	r3, [r3, #14]
 80030ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	7f1b      	ldrb	r3, [r3, #28]
 80030ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	7f9b      	ldrb	r3, [r3, #30]
 80030c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030d4:	4313      	orrs	r3, r2
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e4:	461a      	mov	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7fe f960 	bl	80013bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003104:	461a      	mov	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	791b      	ldrb	r3, [r3, #4]
 800310e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003114:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800311a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003120:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003128:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800312a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003132:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003138:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003142:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003146:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003154:	2001      	movs	r0, #1
 8003156:	f7fe f931 	bl	80013bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	f8de3f23 	.word	0xf8de3f23

08003174 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0a6      	sub	sp, #152	@ 0x98
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003188:	2300      	movs	r3, #0
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031b6:	2300      	movs	r3, #0
 80031b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fe7f 	bl	8002ef8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031fe:	2301      	movs	r3, #1
 8003200:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003208:	2301      	movs	r3, #1
 800320a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800321c:	2300      	movs	r3, #0
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003226:	2301      	movs	r3, #1
 8003228:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800322a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800322e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003230:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003234:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003236:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800323a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003242:	2300      	movs	r3, #0
 8003244:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff05 	bl	8003060 <ETH_SetDMAConfig>
}
 8003256:	bf00      	nop
 8003258:	3798      	adds	r7, #152	@ 0x98
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3305      	adds	r3, #5
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	3204      	adds	r2, #4
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <ETH_MACAddressConfig+0x68>)
 8003282:	4413      	add	r3, r2
 8003284:	461a      	mov	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3303      	adds	r3, #3
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	061a      	lsls	r2, r3, #24
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3302      	adds	r3, #2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3301      	adds	r3, #1
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	4313      	orrs	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <ETH_MACAddressConfig+0x6c>)
 80032b2:	4413      	add	r3, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	6013      	str	r3, [r2, #0]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40028040 	.word	0x40028040
 80032cc:	40028044 	.word	0x40028044

080032d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e03e      	b.n	800335c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	3206      	adds	r2, #6
 8003310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d80c      	bhi.n	8003340 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68d9      	ldr	r1, [r3, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	e004      	b.n	800334a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3301      	adds	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d9bd      	bls.n	80032de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003374:	611a      	str	r2, [r3, #16]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e048      	b.n	8003422 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6919      	ldr	r1, [r3, #16]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80033cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	3212      	adds	r2, #18
 80033ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d80c      	bhi.n	8003412 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6919      	ldr	r1, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	461a      	mov	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	e004      	b.n	800341c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3301      	adds	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d9b3      	bls.n	8003390 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003452:	60da      	str	r2, [r3, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003460:	b480      	push	{r7}
 8003462:	b091      	sub	sp, #68	@ 0x44
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3318      	adds	r3, #24
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800349e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034a2:	d007      	beq.n	80034b4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a8:	3304      	adds	r3, #4
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80034b4:	2302      	movs	r3, #2
 80034b6:	e111      	b.n	80036dc <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	3301      	adds	r3, #1
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4b86      	ldr	r3, [pc, #536]	@ (80036e8 <ETH_Prepare_Tx_Descriptors+0x288>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d2:	6852      	ldr	r2, [r2, #4]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	431a      	orrs	r2, r3
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800353a:	e082      	b.n	8003642 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e005      	b.n	8003568 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800356a:	3301      	adds	r3, #1
 800356c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800356e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003570:	2b03      	cmp	r3, #3
 8003572:	d902      	bls.n	800357a <ETH_Prepare_Tx_Descriptors+0x11a>
 8003574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003576:	3b04      	subs	r3, #4
 8003578:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800357e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003582:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800358c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003590:	d007      	beq.n	80035a2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003596:	3304      	adds	r3, #4
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d029      	beq.n	80035f6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035b4:	e019      	b.n	80035ea <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80035b6:	f3bf 8f5f 	dmb	sy
}
 80035ba:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80035c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ca:	3301      	adds	r3, #1
 80035cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d902      	bls.n	80035da <ETH_Prepare_Tx_Descriptors+0x17a>
 80035d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d6:	3b04      	subs	r3, #4
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80035e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e6:	3301      	adds	r3, #1
 80035e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3e1      	bcc.n	80035b6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	e072      	b.n	80036dc <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003600:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003604:	3301      	adds	r3, #1
 8003606:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003616:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <ETH_Prepare_Tx_Descriptors+0x288>)
 800361e:	4013      	ands	r3, r2
 8003620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003622:	6852      	ldr	r2, [r2, #4]
 8003624:	431a      	orrs	r2, r3
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362c:	3301      	adds	r3, #1
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003630:	f3bf 8f5f 	dmb	sy
}
 8003634:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f af78 	bne.w	800353c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e005      	b.n	800366c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	6a3a      	ldr	r2, [r7, #32]
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003682:	f3bf 8f5f 	dmb	sy
}
 8003686:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800369a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369c:	3304      	adds	r3, #4
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036a8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036aa:	f3ef 8310 	mrs	r3, PRIMASK
 80036ae:	613b      	str	r3, [r7, #16]
  return(result);
 80036b0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	2301      	movs	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f383 8810 	msr	PRIMASK, r3
}
 80036be:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	4413      	add	r3, r2
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f383 8810 	msr	PRIMASK, r3
}
 80036d8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3744      	adds	r7, #68	@ 0x44
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	ffffe000 	.word	0xffffe000

080036ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	@ 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e175      	b.n	80039f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	f040 8164 	bne.w	80039f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d005      	beq.n	8003742 <HAL_GPIO_Init+0x56>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d130      	bne.n	80037a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 0201 	and.w	r2, r3, #1
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d017      	beq.n	80037e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d123      	bne.n	8003834 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	08da      	lsrs	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3208      	adds	r2, #8
 80037f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80be 	beq.w	80039f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	4b66      	ldr	r3, [pc, #408]	@ (8003a10 <HAL_GPIO_Init+0x324>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	4a65      	ldr	r2, [pc, #404]	@ (8003a10 <HAL_GPIO_Init+0x324>)
 800387c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003880:	6453      	str	r3, [r2, #68]	@ 0x44
 8003882:	4b63      	ldr	r3, [pc, #396]	@ (8003a10 <HAL_GPIO_Init+0x324>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800388e:	4a61      	ldr	r2, [pc, #388]	@ (8003a14 <HAL_GPIO_Init+0x328>)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a58      	ldr	r2, [pc, #352]	@ (8003a18 <HAL_GPIO_Init+0x32c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d037      	beq.n	800392a <HAL_GPIO_Init+0x23e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a57      	ldr	r2, [pc, #348]	@ (8003a1c <HAL_GPIO_Init+0x330>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a56      	ldr	r2, [pc, #344]	@ (8003a20 <HAL_GPIO_Init+0x334>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <HAL_GPIO_Init+0x236>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a55      	ldr	r2, [pc, #340]	@ (8003a24 <HAL_GPIO_Init+0x338>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d025      	beq.n	800391e <HAL_GPIO_Init+0x232>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a54      	ldr	r2, [pc, #336]	@ (8003a28 <HAL_GPIO_Init+0x33c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01f      	beq.n	800391a <HAL_GPIO_Init+0x22e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a53      	ldr	r2, [pc, #332]	@ (8003a2c <HAL_GPIO_Init+0x340>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d019      	beq.n	8003916 <HAL_GPIO_Init+0x22a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a52      	ldr	r2, [pc, #328]	@ (8003a30 <HAL_GPIO_Init+0x344>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_GPIO_Init+0x226>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a51      	ldr	r2, [pc, #324]	@ (8003a34 <HAL_GPIO_Init+0x348>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00d      	beq.n	800390e <HAL_GPIO_Init+0x222>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a50      	ldr	r2, [pc, #320]	@ (8003a38 <HAL_GPIO_Init+0x34c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <HAL_GPIO_Init+0x21e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4f      	ldr	r2, [pc, #316]	@ (8003a3c <HAL_GPIO_Init+0x350>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_GPIO_Init+0x21a>
 8003902:	2309      	movs	r3, #9
 8003904:	e012      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003906:	230a      	movs	r3, #10
 8003908:	e010      	b.n	800392c <HAL_GPIO_Init+0x240>
 800390a:	2308      	movs	r3, #8
 800390c:	e00e      	b.n	800392c <HAL_GPIO_Init+0x240>
 800390e:	2307      	movs	r3, #7
 8003910:	e00c      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003912:	2306      	movs	r3, #6
 8003914:	e00a      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003916:	2305      	movs	r3, #5
 8003918:	e008      	b.n	800392c <HAL_GPIO_Init+0x240>
 800391a:	2304      	movs	r3, #4
 800391c:	e006      	b.n	800392c <HAL_GPIO_Init+0x240>
 800391e:	2303      	movs	r3, #3
 8003920:	e004      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003922:	2302      	movs	r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_GPIO_Init+0x240>
 800392a:	2300      	movs	r3, #0
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	4093      	lsls	r3, r2
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800393c:	4935      	ldr	r1, [pc, #212]	@ (8003a14 <HAL_GPIO_Init+0x328>)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a34      	ldr	r2, [pc, #208]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b32      	ldr	r3, [pc, #200]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a29      	ldr	r2, [pc, #164]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800399e:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ec:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <HAL_GPIO_Init+0x354>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b0f      	cmp	r3, #15
 80039fc:	f67f ae86 	bls.w	800370c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	3724      	adds	r7, #36	@ 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40021400 	.word	0x40021400
 8003a30:	40021800 	.word	0x40021800
 8003a34:	40021c00 	.word	0x40021c00
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40022400 	.word	0x40022400
 8003a40:	40013c00 	.word	0x40013c00

08003a44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b23      	ldr	r3, [pc, #140]	@ (8003adc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	4a22      	ldr	r2, [pc, #136]	@ (8003adc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a72:	f7fd fc97 	bl	80013a4 <HAL_GetTick>
 8003a76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a78:	e009      	b.n	8003a8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a7a:	f7fd fc93 	bl	80013a4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a88:	d901      	bls.n	8003a8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e022      	b.n	8003ad4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9a:	d1ee      	bne.n	8003a7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa8:	f7fd fc7c 	bl	80013a4 <HAL_GetTick>
 8003aac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aae:	e009      	b.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ab0:	f7fd fc78 	bl	80013a4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003abe:	d901      	bls.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e007      	b.n	8003ad4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ad0:	d1ee      	bne.n	8003ab0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40007000 	.word	0x40007000

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e291      	b.n	800401e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8087 	beq.w	8003c16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b08:	4b96      	ldr	r3, [pc, #600]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d00c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b14:	4b93      	ldr	r3, [pc, #588]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d112      	bne.n	8003b46 <HAL_RCC_OscConfig+0x62>
 8003b20:	4b90      	ldr	r3, [pc, #576]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b2c:	d10b      	bne.n	8003b46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d06c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x130>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d168      	bne.n	8003c14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e26b      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x7a>
 8003b50:	4b84      	ldr	r3, [pc, #528]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a83      	ldr	r2, [pc, #524]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e02e      	b.n	8003bbc <HAL_RCC_OscConfig+0xd8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x9c>
 8003b66:	4b7f      	ldr	r3, [pc, #508]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b7c      	ldr	r3, [pc, #496]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7b      	ldr	r2, [pc, #492]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e01d      	b.n	8003bbc <HAL_RCC_OscConfig+0xd8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xc0>
 8003b8a:	4b76      	ldr	r3, [pc, #472]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a75      	ldr	r2, [pc, #468]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a72      	ldr	r2, [pc, #456]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0xd8>
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fbee 	bl	80013a4 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fd fbea 	bl	80013a4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	@ 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e21f      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b61      	ldr	r3, [pc, #388]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0xe8>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fbda 	bl	80013a4 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fd fbd6 	bl	80013a4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e20b      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	4b57      	ldr	r3, [pc, #348]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x110>
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d069      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c22:	4b50      	ldr	r3, [pc, #320]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d11c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x190>
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x17a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e1df      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b41      	ldr	r3, [pc, #260]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	493d      	ldr	r1, [pc, #244]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	e040      	b.n	8003cf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d023      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c7c:	4b39      	ldr	r3, [pc, #228]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a38      	ldr	r2, [pc, #224]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd fb8c 	bl	80013a4 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c90:	f7fd fb88 	bl	80013a4 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e1bd      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b30      	ldr	r3, [pc, #192]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cae:	4b2d      	ldr	r3, [pc, #180]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4929      	ldr	r1, [pc, #164]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
 8003cc2:	e018      	b.n	8003cf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc4:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a26      	ldr	r2, [pc, #152]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fb68 	bl	80013a4 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7fd fb64 	bl	80013a4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e199      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	4b1e      	ldr	r3, [pc, #120]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d038      	beq.n	8003d74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d019      	beq.n	8003d3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0a:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0e:	4a15      	ldr	r2, [pc, #84]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd fb45 	bl	80013a4 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fd fb41 	bl	80013a4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e176      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d30:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x23a>
 8003d3c:	e01a      	b.n	8003d74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d42:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <HAL_RCC_OscConfig+0x280>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fd fb2b 	bl	80013a4 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d52:	f7fd fb27 	bl	80013a4 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d903      	bls.n	8003d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e15c      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
 8003d64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	4b91      	ldr	r3, [pc, #580]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ee      	bne.n	8003d52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a4 	beq.w	8003eca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d82:	4b8b      	ldr	r3, [pc, #556]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	4b88      	ldr	r3, [pc, #544]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	4a87      	ldr	r2, [pc, #540]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d9a:	4b85      	ldr	r3, [pc, #532]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	4b82      	ldr	r3, [pc, #520]	@ (8003fb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d118      	bne.n	8003de8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003db6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb4 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7e      	ldr	r2, [pc, #504]	@ (8003fb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7fd faef 	bl	80013a4 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd faeb 	bl	80013a4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	@ 0x64
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e120      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ddc:	4b75      	ldr	r3, [pc, #468]	@ (8003fb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x31a>
 8003df0:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfc:	e02d      	b.n	8003e5a <HAL_RCC_OscConfig+0x376>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x33c>
 8003e06:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	4a69      	ldr	r2, [pc, #420]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e12:	4b67      	ldr	r3, [pc, #412]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	4a66      	ldr	r2, [pc, #408]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCC_OscConfig+0x376>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCC_OscConfig+0x35e>
 8003e28:	4b61      	ldr	r3, [pc, #388]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a60      	ldr	r2, [pc, #384]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	4b5e      	ldr	r3, [pc, #376]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e40:	e00b      	b.n	8003e5a <HAL_RCC_OscConfig+0x376>
 8003e42:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4e:	4b58      	ldr	r3, [pc, #352]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	4a57      	ldr	r2, [pc, #348]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fd fa9f 	bl	80013a4 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fd fa9b 	bl	80013a4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0ce      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ee      	beq.n	8003e6a <HAL_RCC_OscConfig+0x386>
 8003e8c:	e014      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fd fa89 	bl	80013a4 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fd fa85 	bl	80013a4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	4b40      	ldr	r3, [pc, #256]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80a4 	beq.w	800401c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ed4:	4b36      	ldr	r3, [pc, #216]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d06b      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d149      	bne.n	8003f7c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a30      	ldr	r2, [pc, #192]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fa56 	bl	80013a4 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fd fa52 	bl	80013a4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e087      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	4b28      	ldr	r3, [pc, #160]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	3b01      	subs	r3, #1
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f46:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fa26 	bl	80013a4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd fa22 	bl	80013a4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e057      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x478>
 8003f7a:	e04f      	b.n	800401c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd fa0c 	bl	80013a4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd fa08 	bl	80013a4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e03d      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4ac>
 8003fae:	e035      	b.n	800401c <HAL_RCC_OscConfig+0x538>
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x544>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d028      	beq.n	8004018 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d121      	bne.n	8004018 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d11a      	bne.n	8004018 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0d0      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b6a      	ldr	r3, [pc, #424]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d910      	bls.n	8004074 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b67      	ldr	r3, [pc, #412]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 020f 	bic.w	r2, r3, #15
 800405a:	4965      	ldr	r1, [pc, #404]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b63      	ldr	r3, [pc, #396]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0b8      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d020      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800408c:	4b59      	ldr	r3, [pc, #356]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a58      	ldr	r2, [pc, #352]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004096:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a4:	4b53      	ldr	r3, [pc, #332]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a52      	ldr	r2, [pc, #328]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b0:	4b50      	ldr	r3, [pc, #320]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	494d      	ldr	r1, [pc, #308]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d040      	beq.n	8004150 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	4b47      	ldr	r3, [pc, #284]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d115      	bne.n	800410e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e07f      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e073      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b3d      	ldr	r3, [pc, #244]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e06b      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410e:	4b39      	ldr	r3, [pc, #228]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4936      	ldr	r1, [pc, #216]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fd f940 	bl	80013a4 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fd f93c 	bl	80013a4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e053      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 020c 	and.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	429a      	cmp	r2, r3
 800414e:	d1eb      	bne.n	8004128 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b27      	ldr	r3, [pc, #156]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d210      	bcs.n	8004180 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 020f 	bic.w	r2, r3, #15
 8004166:	4922      	ldr	r1, [pc, #136]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b20      	ldr	r3, [pc, #128]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e032      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4916      	ldr	r1, [pc, #88]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041aa:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	490e      	ldr	r1, [pc, #56]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041be:	f000 f821 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	490a      	ldr	r1, [pc, #40]	@ (80041f8 <HAL_RCC_ClockConfig+0x1cc>)
 80041d0:	5ccb      	ldrb	r3, [r1, r3]
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <HAL_RCC_ClockConfig+0x1d0>)
 80041d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041da:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <HAL_RCC_ClockConfig+0x1d4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd f89c 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023c00 	.word	0x40023c00
 80041f4:	40023800 	.word	0x40023800
 80041f8:	08015f40 	.word	0x08015f40
 80041fc:	20000000 	.word	0x20000000
 8004200:	20000004 	.word	0x20000004

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004208:	b090      	sub	sp, #64	@ 0x40
 800420a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004210:	2300      	movs	r3, #0
 8004212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004214:	2300      	movs	r3, #0
 8004216:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421c:	4b59      	ldr	r3, [pc, #356]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x180>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b08      	cmp	r3, #8
 8004226:	d00d      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x40>
 8004228:	2b08      	cmp	r3, #8
 800422a:	f200 80a1 	bhi.w	8004370 <HAL_RCC_GetSysClockFreq+0x16c>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x34>
 8004232:	2b04      	cmp	r3, #4
 8004234:	d003      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x3a>
 8004236:	e09b      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b53      	ldr	r3, [pc, #332]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x184>)
 800423a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800423c:	e09b      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423e:	4b53      	ldr	r3, [pc, #332]	@ (800438c <HAL_RCC_GetSysClockFreq+0x188>)
 8004240:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004242:	e098      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004244:	4b4f      	ldr	r3, [pc, #316]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x180>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800424e:	4b4d      	ldr	r3, [pc, #308]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x180>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d028      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	4b4a      	ldr	r3, [pc, #296]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x180>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	2200      	movs	r2, #0
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	627a      	str	r2, [r7, #36]	@ 0x24
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800426c:	2100      	movs	r1, #0
 800426e:	4b47      	ldr	r3, [pc, #284]	@ (800438c <HAL_RCC_GetSysClockFreq+0x188>)
 8004270:	fb03 f201 	mul.w	r2, r3, r1
 8004274:	2300      	movs	r3, #0
 8004276:	fb00 f303 	mul.w	r3, r0, r3
 800427a:	4413      	add	r3, r2
 800427c:	4a43      	ldr	r2, [pc, #268]	@ (800438c <HAL_RCC_GetSysClockFreq+0x188>)
 800427e:	fba0 1202 	umull	r1, r2, r0, r2
 8004282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004284:	460a      	mov	r2, r1
 8004286:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800428a:	4413      	add	r3, r2
 800428c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800428e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004290:	2200      	movs	r2, #0
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	61fa      	str	r2, [r7, #28]
 8004296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800429a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800429e:	f7fc f807 	bl	80002b0 <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4613      	mov	r3, r2
 80042a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042aa:	e053      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ac:	4b35      	ldr	r3, [pc, #212]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	2200      	movs	r2, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	617a      	str	r2, [r7, #20]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042be:	f04f 0b00 	mov.w	fp, #0
 80042c2:	4652      	mov	r2, sl
 80042c4:	465b      	mov	r3, fp
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	0159      	lsls	r1, r3, #5
 80042d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d4:	0150      	lsls	r0, r2, #5
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	ebb2 080a 	subs.w	r8, r2, sl
 80042de:	eb63 090b 	sbc.w	r9, r3, fp
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042f6:	ebb2 0408 	subs.w	r4, r2, r8
 80042fa:	eb63 0509 	sbc.w	r5, r3, r9
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	00eb      	lsls	r3, r5, #3
 8004308:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800430c:	00e2      	lsls	r2, r4, #3
 800430e:	4614      	mov	r4, r2
 8004310:	461d      	mov	r5, r3
 8004312:	eb14 030a 	adds.w	r3, r4, sl
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	eb45 030b 	adc.w	r3, r5, fp
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800432a:	4629      	mov	r1, r5
 800432c:	028b      	lsls	r3, r1, #10
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004334:	4621      	mov	r1, r4
 8004336:	028a      	lsls	r2, r1, #10
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433e:	2200      	movs	r2, #0
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	60fa      	str	r2, [r7, #12]
 8004344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004348:	f7fb ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004354:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x180>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	3301      	adds	r3, #1
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800436e:	e002      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x184>)
 8004372:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004378:	4618      	mov	r0, r3
 800437a:	3740      	adds	r7, #64	@ 0x40
 800437c:	46bd      	mov	sp, r7
 800437e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	00f42400 	.word	0x00f42400
 800438c:	017d7840 	.word	0x017d7840

08004390 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004394:	4b03      	ldr	r3, [pc, #12]	@ (80043a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000000 	.word	0x20000000

080043a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043ac:	f7ff fff0 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	0a9b      	lsrs	r3, r3, #10
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4903      	ldr	r1, [pc, #12]	@ (80043cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08015f50 	.word	0x08015f50

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043d4:	f7ff ffdc 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	0b5b      	lsrs	r3, r3, #13
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	@ (80043f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08015f50 	.word	0x08015f50

080043f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d012      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004420:	4b69      	ldr	r3, [pc, #420]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a68      	ldr	r2, [pc, #416]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800442a:	6093      	str	r3, [r2, #8]
 800442c:	4b66      	ldr	r3, [pc, #408]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004434:	4964      	ldr	r1, [pc, #400]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004442:	2301      	movs	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004452:	4b5d      	ldr	r3, [pc, #372]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004458:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	4959      	ldr	r1, [pc, #356]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004470:	d101      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800448e:	4b4e      	ldr	r3, [pc, #312]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004494:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	494a      	ldr	r1, [pc, #296]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ac:	d101      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 808b 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b3a      	ldr	r3, [pc, #232]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	4a39      	ldr	r2, [pc, #228]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80044e8:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044f4:	4b35      	ldr	r3, [pc, #212]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a34      	ldr	r2, [pc, #208]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004500:	f7fc ff50 	bl	80013a4 <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004508:	f7fc ff4c 	bl	80013a4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	@ 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e357      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800451a:	4b2c      	ldr	r3, [pc, #176]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004526:	4b28      	ldr	r3, [pc, #160]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d035      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	429a      	cmp	r2, r3
 8004542:	d02e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004544:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004552:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004558:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800455a:	4b1b      	ldr	r3, [pc, #108]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	4a1a      	ldr	r2, [pc, #104]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004564:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004566:	4a18      	ldr	r2, [pc, #96]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800456c:	4b16      	ldr	r3, [pc, #88]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d114      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fc ff14 	bl	80013a4 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	e00a      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fc ff10 	bl	80013a4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e319      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004596:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ee      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ae:	d111      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045be:	400b      	ands	r3, r1
 80045c0:	4901      	ldr	r1, [pc, #4]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
 80045c6:	e00b      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40007000 	.word	0x40007000
 80045d0:	0ffffcff 	.word	0x0ffffcff
 80045d4:	4baa      	ldr	r3, [pc, #680]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4aa9      	ldr	r2, [pc, #676]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045de:	6093      	str	r3, [r2, #8]
 80045e0:	4ba7      	ldr	r3, [pc, #668]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ec:	49a4      	ldr	r1, [pc, #656]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045fe:	4ba0      	ldr	r3, [pc, #640]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004604:	4a9e      	ldr	r2, [pc, #632]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800460a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800460e:	4b9c      	ldr	r3, [pc, #624]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004610:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	4999      	ldr	r1, [pc, #612]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800462c:	4b94      	ldr	r3, [pc, #592]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004632:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463a:	4991      	ldr	r1, [pc, #580]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800464e:	4b8c      	ldr	r3, [pc, #560]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004654:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800465c:	4988      	ldr	r1, [pc, #544]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004670:	4b83      	ldr	r3, [pc, #524]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004676:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467e:	4980      	ldr	r1, [pc, #512]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004692:	4b7b      	ldr	r3, [pc, #492]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004698:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	4977      	ldr	r1, [pc, #476]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046b4:	4b72      	ldr	r3, [pc, #456]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	496f      	ldr	r1, [pc, #444]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046dc:	f023 020c 	bic.w	r2, r3, #12
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e4:	4966      	ldr	r1, [pc, #408]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046f8:	4b61      	ldr	r3, [pc, #388]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	495e      	ldr	r1, [pc, #376]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800471a:	4b59      	ldr	r3, [pc, #356]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004728:	4955      	ldr	r1, [pc, #340]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800473c:	4b50      	ldr	r3, [pc, #320]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	494d      	ldr	r1, [pc, #308]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800475e:	4b48      	ldr	r3, [pc, #288]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004764:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	4944      	ldr	r1, [pc, #272]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004780:	4b3f      	ldr	r3, [pc, #252]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004786:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478e:	493c      	ldr	r1, [pc, #240]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047a2:	4b37      	ldr	r3, [pc, #220]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b0:	4933      	ldr	r1, [pc, #204]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d2:	492b      	ldr	r1, [pc, #172]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d011      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047e6:	4b26      	ldr	r3, [pc, #152]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f4:	4922      	ldr	r1, [pc, #136]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004804:	d101      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004806:	2301      	movs	r3, #1
 8004808:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004826:	4b16      	ldr	r3, [pc, #88]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004834:	4912      	ldr	r1, [pc, #72]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004848:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004858:	4909      	ldr	r1, [pc, #36]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d006      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80d9 	beq.w	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004874:	4b02      	ldr	r3, [pc, #8]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a01      	ldr	r2, [pc, #4]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800487e:	e001      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004880:	40023800 	.word	0x40023800
 8004884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004886:	f7fc fd8d 	bl	80013a4 <HAL_GetTick>
 800488a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800488e:	f7fc fd89 	bl	80013a4 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b64      	cmp	r3, #100	@ 0x64
 800489a:	d901      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e194      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f0      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d021      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11d      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048c0:	4b64      	ldr	r3, [pc, #400]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ce:	4b61      	ldr	r3, [pc, #388]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048d4:	0e1b      	lsrs	r3, r3, #24
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	019a      	lsls	r2, r3, #6
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	061b      	lsls	r3, r3, #24
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	071b      	lsls	r3, r3, #28
 80048f4:	4957      	ldr	r1, [pc, #348]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02e      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004926:	d129      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004928:	4b4a      	ldr	r3, [pc, #296]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800492e:	0c1b      	lsrs	r3, r3, #16
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004936:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493c:	0f1b      	lsrs	r3, r3, #28
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	019a      	lsls	r2, r3, #6
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	431a      	orrs	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	071b      	lsls	r3, r3, #28
 800495c:	493d      	ldr	r1, [pc, #244]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004964:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800496a:	f023 021f 	bic.w	r2, r3, #31
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	3b01      	subs	r3, #1
 8004974:	4937      	ldr	r1, [pc, #220]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01d      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004988:	4b32      	ldr	r3, [pc, #200]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800498e:	0e1b      	lsrs	r3, r3, #24
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004996:	4b2f      	ldr	r3, [pc, #188]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800499c:	0f1b      	lsrs	r3, r3, #28
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	019a      	lsls	r2, r3, #6
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	071b      	lsls	r3, r3, #28
 80049bc:	4925      	ldr	r1, [pc, #148]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d011      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	019a      	lsls	r2, r3, #6
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	071b      	lsls	r3, r3, #28
 80049ec:	4919      	ldr	r1, [pc, #100]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049f4:	4b17      	ldr	r3, [pc, #92]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc fcd0 	bl	80013a4 <HAL_GetTick>
 8004a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a08:	f7fc fccc 	bl	80013a4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	@ 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0d7      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	f040 80cd 	bne.w	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a2e:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a08      	ldr	r2, [pc, #32]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3a:	f7fc fcb3 	bl	80013a4 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a42:	f7fc fcaf 	bl	80013a4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	@ 0x64
 8004a4e:	d903      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0ba      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a58:	4b5e      	ldr	r3, [pc, #376]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a64:	d0ed      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d02e      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d12a      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a8e:	4b51      	ldr	r3, [pc, #324]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa2:	0f1b      	lsrs	r3, r3, #28
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	019a      	lsls	r2, r3, #6
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	061b      	lsls	r3, r3, #24
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	071b      	lsls	r3, r3, #28
 8004ac2:	4944      	ldr	r1, [pc, #272]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aca:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	493d      	ldr	r1, [pc, #244]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d022      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004af8:	d11d      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004afa:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b08:	4b32      	ldr	r3, [pc, #200]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0e:	0f1b      	lsrs	r3, r3, #28
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	019a      	lsls	r2, r3, #6
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	061b      	lsls	r3, r3, #24
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	071b      	lsls	r3, r3, #28
 8004b2e:	4929      	ldr	r1, [pc, #164]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d028      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b42:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b50:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	019a      	lsls	r2, r3, #6
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	071b      	lsls	r3, r3, #28
 8004b76:	4917      	ldr	r1, [pc, #92]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b7e:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	4911      	ldr	r1, [pc, #68]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b94:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba0:	f7fc fc00 	bl	80013a4 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ba8:	f7fc fbfc 	bl	80013a4 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e007      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc6:	d1ef      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e040      	b.n	8004c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc f85e 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	@ 0x24
 8004c04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fef6 	bl	8005a10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fc8f 	bl	8005548 <UART_SetConfig>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e01b      	b.n	8004c6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 ff75 	bl	8005b54 <UART_CheckIdleState>
 8004c6a:	4603      	mov	r3, r0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	@ 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d177      	bne.n	8004d7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_UART_Transmit+0x24>
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e070      	b.n	8004d7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2221      	movs	r2, #33	@ 0x21
 8004ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004caa:	f7fc fb7b 	bl	80013a4 <HAL_GetTick>
 8004cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	88fa      	ldrh	r2, [r7, #6]
 8004cb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc8:	d108      	bne.n	8004cdc <HAL_UART_Transmit+0x68>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	e003      	b.n	8004ce4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ce4:	e02f      	b.n	8004d46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	2180      	movs	r1, #128	@ 0x80
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 ff86 	bl	8005c02 <UART_WaitOnFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e03b      	b.n	8004d7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	3302      	adds	r3, #2
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	e007      	b.n	8004d34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3301      	adds	r3, #1
 8004d32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1c9      	bne.n	8004ce6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2140      	movs	r1, #64	@ 0x40
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 ff50 	bl	8005c02 <UART_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e005      	b.n	8004d7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e000      	b.n	8004d7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
  }
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d165      	bne.n	8004e6a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_UART_Transmit_DMA+0x22>
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e05e      	b.n	8004e6c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2221      	movs	r2, #33	@ 0x21
 8004dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d027      	beq.n	8004e2a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dde:	4a25      	ldr	r2, [pc, #148]	@ (8004e74 <HAL_UART_Transmit_DMA+0xec>)
 8004de0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de6:	4a24      	ldr	r2, [pc, #144]	@ (8004e78 <HAL_UART_Transmit_DMA+0xf0>)
 8004de8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dee:	4a23      	ldr	r2, [pc, #140]	@ (8004e7c <HAL_UART_Transmit_DMA+0xf4>)
 8004df0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	2200      	movs	r2, #0
 8004df8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e02:	4619      	mov	r1, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3328      	adds	r3, #40	@ 0x28
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	f7fc fec3 	bl	8001b98 <HAL_DMA_Start_IT>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2210      	movs	r2, #16
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e020      	b.n	8004e6c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2240      	movs	r2, #64	@ 0x40
 8004e30:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3308      	adds	r3, #8
 8004e38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e52:	623a      	str	r2, [r7, #32]
 8004e54:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	69f9      	ldr	r1, [r7, #28]
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e5      	bne.n	8004e32 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3728      	adds	r7, #40	@ 0x28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	08005f31 	.word	0x08005f31
 8004e78:	08005fc7 	.word	0x08005fc7
 8004e7c:	080061b3 	.word	0x080061b3

08004e80 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	@ 0x28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d132      	bne.n	8004efe <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_UART_Receive_DMA+0x24>
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e02b      	b.n	8004f00 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d018      	beq.n	8004eee <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	69f9      	ldr	r1, [r7, #28]
 8004ee0:	6a3a      	ldr	r2, [r7, #32]
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e6      	bne.n	8004ebc <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fef1 	bl	8005cdc <UART_Start_Receive_DMA>
 8004efa:	4603      	mov	r3, r0
 8004efc:	e000      	b.n	8004f00 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
  }
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3728      	adds	r7, #40	@ 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f36:	4013      	ands	r3, r2
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d115      	bne.n	8004f70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00f      	beq.n	8004f70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 82b1 	beq.w	80054c8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
      }
      return;
 8004f6e:	e2ab      	b.n	80054c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8117 	beq.w	80051a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f8a:	4b85      	ldr	r3, [pc, #532]	@ (80051a0 <HAL_UART_IRQHandler+0x298>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 810a 	beq.w	80051a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d011      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xbc>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00b      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d011      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xec>
 8004fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d011      	beq.n	8005024 <HAL_UART_IRQHandler+0x11c>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2204      	movs	r2, #4
 8005012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501a:	f043 0202 	orr.w	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800503c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2208      	movs	r2, #8
 800504e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005056:	f043 0208 	orr.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005068:	2b00      	cmp	r3, #0
 800506a:	d012      	beq.n	8005092 <HAL_UART_IRQHandler+0x18a>
 800506c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00c      	beq.n	8005092 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005088:	f043 0220 	orr.w	r2, r3, #32
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8217 	beq.w	80054cc <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d005      	beq.n	80050ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04f      	beq.n	800518a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 febc 	bl	8005e68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fa:	2b40      	cmp	r3, #64	@ 0x40
 80050fc:	d141      	bne.n	8005182 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800511c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800512a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800512e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1d9      	bne.n	80050fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005156:	4a13      	ldr	r2, [pc, #76]	@ (80051a4 <HAL_UART_IRQHandler+0x29c>)
 8005158:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc fdea 	bl	8001d38 <HAL_DMA_Abort_IT>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005174:	4610      	mov	r0, r2
 8005176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	e00f      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9ce 	bl	800551c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	e00b      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9ca 	bl	800551c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e007      	b.n	800519a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9c6 	bl	800551c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005198:	e198      	b.n	80054cc <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519a:	bf00      	nop
    return;
 800519c:	e196      	b.n	80054cc <HAL_UART_IRQHandler+0x5c4>
 800519e:	bf00      	nop
 80051a0:	04000120 	.word	0x04000120
 80051a4:	08006231 	.word	0x08006231

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 8166 	bne.w	800547e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 815f 	beq.w	800547e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8158 	beq.w	800547e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e0:	2b40      	cmp	r3, #64	@ 0x40
 80051e2:	f040 80d0 	bne.w	8005386 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80ab 	beq.w	8005352 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005206:	429a      	cmp	r2, r3
 8005208:	f080 80a3 	bcs.w	8005352 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005212:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005220:	f000 8086 	beq.w	8005330 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800523c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005240:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800524e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005252:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800525a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1da      	bne.n	8005224 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800527e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3308      	adds	r3, #8
 800528e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005292:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005296:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800529a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e1      	bne.n	800526e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e3      	bne.n	80052aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005300:	f023 0310 	bic.w	r3, r3, #16
 8005304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005312:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005314:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005318:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e4      	bne.n	80052f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fc94 	bl	8001c58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005342:	b29b      	uxth	r3, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	b29b      	uxth	r3, r3
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8f0 	bl	8005530 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005350:	e0be      	b.n	80054d0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800535c:	429a      	cmp	r2, r3
 800535e:	f040 80b7 	bne.w	80054d0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800536c:	f040 80b0 	bne.w	80054d0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8d6 	bl	8005530 <HAL_UARTEx_RxEventCallback>
      return;
 8005384:	e0a4      	b.n	80054d0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005392:	b29b      	uxth	r3, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8096 	beq.w	80054d4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 80053a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8091 	beq.w	80054d4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e4      	bne.n	80053b2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	623b      	str	r3, [r7, #32]
   return(result);
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800540c:	633a      	str	r2, [r7, #48]	@ 0x30
 800540e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e3      	bne.n	80053e8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	60fb      	str	r3, [r7, #12]
   return(result);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f023 0310 	bic.w	r3, r3, #16
 8005448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	69b9      	ldr	r1, [r7, #24]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	617b      	str	r3, [r7, #20]
   return(result);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e4      	bne.n	8005434 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f85a 	bl	8005530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800547c:	e02a      	b.n	80054d4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00e      	beq.n	80054a8 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800548a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800548e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01c      	beq.n	80054d8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
    }
    return;
 80054a6:	e017      	b.n	80054d8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d012      	beq.n	80054da <HAL_UART_IRQHandler+0x5d2>
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fec7 	bl	8006254 <UART_EndTransmit_IT>
    return;
 80054c6:	e008      	b.n	80054da <HAL_UART_IRQHandler+0x5d2>
      return;
 80054c8:	bf00      	nop
 80054ca:	e006      	b.n	80054da <HAL_UART_IRQHandler+0x5d2>
    return;
 80054cc:	bf00      	nop
 80054ce:	e004      	b.n	80054da <HAL_UART_IRQHandler+0x5d2>
      return;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <HAL_UART_IRQHandler+0x5d2>
      return;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_UART_IRQHandler+0x5d2>
    return;
 80054d8:	bf00      	nop
  }

}
 80054da:	37e8      	adds	r7, #232	@ 0xe8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4ba6      	ldr	r3, [pc, #664]	@ (800580c <UART_SetConfig+0x2c4>)
 8005574:	4013      	ands	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	6979      	ldr	r1, [r7, #20]
 800557c:	430b      	orrs	r3, r1
 800557e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a94      	ldr	r2, [pc, #592]	@ (8005810 <UART_SetConfig+0x2c8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d120      	bne.n	8005606 <UART_SetConfig+0xbe>
 80055c4:	4b93      	ldr	r3, [pc, #588]	@ (8005814 <UART_SetConfig+0x2cc>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d816      	bhi.n	8005600 <UART_SetConfig+0xb8>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <UART_SetConfig+0x90>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055ef 	.word	0x080055ef
 80055e4:	080055fb 	.word	0x080055fb
 80055e8:	2301      	movs	r3, #1
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e150      	b.n	8005890 <UART_SetConfig+0x348>
 80055ee:	2302      	movs	r3, #2
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e14d      	b.n	8005890 <UART_SetConfig+0x348>
 80055f4:	2304      	movs	r3, #4
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e14a      	b.n	8005890 <UART_SetConfig+0x348>
 80055fa:	2308      	movs	r3, #8
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e147      	b.n	8005890 <UART_SetConfig+0x348>
 8005600:	2310      	movs	r3, #16
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e144      	b.n	8005890 <UART_SetConfig+0x348>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a83      	ldr	r2, [pc, #524]	@ (8005818 <UART_SetConfig+0x2d0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d132      	bne.n	8005676 <UART_SetConfig+0x12e>
 8005610:	4b80      	ldr	r3, [pc, #512]	@ (8005814 <UART_SetConfig+0x2cc>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b0c      	cmp	r3, #12
 800561c:	d828      	bhi.n	8005670 <UART_SetConfig+0x128>
 800561e:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <UART_SetConfig+0xdc>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005659 	.word	0x08005659
 8005628:	08005671 	.word	0x08005671
 800562c:	08005671 	.word	0x08005671
 8005630:	08005671 	.word	0x08005671
 8005634:	08005665 	.word	0x08005665
 8005638:	08005671 	.word	0x08005671
 800563c:	08005671 	.word	0x08005671
 8005640:	08005671 	.word	0x08005671
 8005644:	0800565f 	.word	0x0800565f
 8005648:	08005671 	.word	0x08005671
 800564c:	08005671 	.word	0x08005671
 8005650:	08005671 	.word	0x08005671
 8005654:	0800566b 	.word	0x0800566b
 8005658:	2300      	movs	r3, #0
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e118      	b.n	8005890 <UART_SetConfig+0x348>
 800565e:	2302      	movs	r3, #2
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e115      	b.n	8005890 <UART_SetConfig+0x348>
 8005664:	2304      	movs	r3, #4
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e112      	b.n	8005890 <UART_SetConfig+0x348>
 800566a:	2308      	movs	r3, #8
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e10f      	b.n	8005890 <UART_SetConfig+0x348>
 8005670:	2310      	movs	r3, #16
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e10c      	b.n	8005890 <UART_SetConfig+0x348>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a68      	ldr	r2, [pc, #416]	@ (800581c <UART_SetConfig+0x2d4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d120      	bne.n	80056c2 <UART_SetConfig+0x17a>
 8005680:	4b64      	ldr	r3, [pc, #400]	@ (8005814 <UART_SetConfig+0x2cc>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005686:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800568a:	2b30      	cmp	r3, #48	@ 0x30
 800568c:	d013      	beq.n	80056b6 <UART_SetConfig+0x16e>
 800568e:	2b30      	cmp	r3, #48	@ 0x30
 8005690:	d814      	bhi.n	80056bc <UART_SetConfig+0x174>
 8005692:	2b20      	cmp	r3, #32
 8005694:	d009      	beq.n	80056aa <UART_SetConfig+0x162>
 8005696:	2b20      	cmp	r3, #32
 8005698:	d810      	bhi.n	80056bc <UART_SetConfig+0x174>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <UART_SetConfig+0x15c>
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d006      	beq.n	80056b0 <UART_SetConfig+0x168>
 80056a2:	e00b      	b.n	80056bc <UART_SetConfig+0x174>
 80056a4:	2300      	movs	r3, #0
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e0f2      	b.n	8005890 <UART_SetConfig+0x348>
 80056aa:	2302      	movs	r3, #2
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e0ef      	b.n	8005890 <UART_SetConfig+0x348>
 80056b0:	2304      	movs	r3, #4
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e0ec      	b.n	8005890 <UART_SetConfig+0x348>
 80056b6:	2308      	movs	r3, #8
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e0e9      	b.n	8005890 <UART_SetConfig+0x348>
 80056bc:	2310      	movs	r3, #16
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e0e6      	b.n	8005890 <UART_SetConfig+0x348>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a56      	ldr	r2, [pc, #344]	@ (8005820 <UART_SetConfig+0x2d8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d120      	bne.n	800570e <UART_SetConfig+0x1c6>
 80056cc:	4b51      	ldr	r3, [pc, #324]	@ (8005814 <UART_SetConfig+0x2cc>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056d8:	d013      	beq.n	8005702 <UART_SetConfig+0x1ba>
 80056da:	2bc0      	cmp	r3, #192	@ 0xc0
 80056dc:	d814      	bhi.n	8005708 <UART_SetConfig+0x1c0>
 80056de:	2b80      	cmp	r3, #128	@ 0x80
 80056e0:	d009      	beq.n	80056f6 <UART_SetConfig+0x1ae>
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d810      	bhi.n	8005708 <UART_SetConfig+0x1c0>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <UART_SetConfig+0x1a8>
 80056ea:	2b40      	cmp	r3, #64	@ 0x40
 80056ec:	d006      	beq.n	80056fc <UART_SetConfig+0x1b4>
 80056ee:	e00b      	b.n	8005708 <UART_SetConfig+0x1c0>
 80056f0:	2300      	movs	r3, #0
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e0cc      	b.n	8005890 <UART_SetConfig+0x348>
 80056f6:	2302      	movs	r3, #2
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e0c9      	b.n	8005890 <UART_SetConfig+0x348>
 80056fc:	2304      	movs	r3, #4
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e0c6      	b.n	8005890 <UART_SetConfig+0x348>
 8005702:	2308      	movs	r3, #8
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e0c3      	b.n	8005890 <UART_SetConfig+0x348>
 8005708:	2310      	movs	r3, #16
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e0c0      	b.n	8005890 <UART_SetConfig+0x348>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a44      	ldr	r2, [pc, #272]	@ (8005824 <UART_SetConfig+0x2dc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d125      	bne.n	8005764 <UART_SetConfig+0x21c>
 8005718:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <UART_SetConfig+0x2cc>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005726:	d017      	beq.n	8005758 <UART_SetConfig+0x210>
 8005728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800572c:	d817      	bhi.n	800575e <UART_SetConfig+0x216>
 800572e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005732:	d00b      	beq.n	800574c <UART_SetConfig+0x204>
 8005734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005738:	d811      	bhi.n	800575e <UART_SetConfig+0x216>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <UART_SetConfig+0x1fe>
 800573e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005742:	d006      	beq.n	8005752 <UART_SetConfig+0x20a>
 8005744:	e00b      	b.n	800575e <UART_SetConfig+0x216>
 8005746:	2300      	movs	r3, #0
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e0a1      	b.n	8005890 <UART_SetConfig+0x348>
 800574c:	2302      	movs	r3, #2
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e09e      	b.n	8005890 <UART_SetConfig+0x348>
 8005752:	2304      	movs	r3, #4
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e09b      	b.n	8005890 <UART_SetConfig+0x348>
 8005758:	2308      	movs	r3, #8
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e098      	b.n	8005890 <UART_SetConfig+0x348>
 800575e:	2310      	movs	r3, #16
 8005760:	77fb      	strb	r3, [r7, #31]
 8005762:	e095      	b.n	8005890 <UART_SetConfig+0x348>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2f      	ldr	r2, [pc, #188]	@ (8005828 <UART_SetConfig+0x2e0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d125      	bne.n	80057ba <UART_SetConfig+0x272>
 800576e:	4b29      	ldr	r3, [pc, #164]	@ (8005814 <UART_SetConfig+0x2cc>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005774:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005778:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800577c:	d017      	beq.n	80057ae <UART_SetConfig+0x266>
 800577e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005782:	d817      	bhi.n	80057b4 <UART_SetConfig+0x26c>
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005788:	d00b      	beq.n	80057a2 <UART_SetConfig+0x25a>
 800578a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578e:	d811      	bhi.n	80057b4 <UART_SetConfig+0x26c>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <UART_SetConfig+0x254>
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005798:	d006      	beq.n	80057a8 <UART_SetConfig+0x260>
 800579a:	e00b      	b.n	80057b4 <UART_SetConfig+0x26c>
 800579c:	2301      	movs	r3, #1
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e076      	b.n	8005890 <UART_SetConfig+0x348>
 80057a2:	2302      	movs	r3, #2
 80057a4:	77fb      	strb	r3, [r7, #31]
 80057a6:	e073      	b.n	8005890 <UART_SetConfig+0x348>
 80057a8:	2304      	movs	r3, #4
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e070      	b.n	8005890 <UART_SetConfig+0x348>
 80057ae:	2308      	movs	r3, #8
 80057b0:	77fb      	strb	r3, [r7, #31]
 80057b2:	e06d      	b.n	8005890 <UART_SetConfig+0x348>
 80057b4:	2310      	movs	r3, #16
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e06a      	b.n	8005890 <UART_SetConfig+0x348>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	@ (800582c <UART_SetConfig+0x2e4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d138      	bne.n	8005836 <UART_SetConfig+0x2ee>
 80057c4:	4b13      	ldr	r3, [pc, #76]	@ (8005814 <UART_SetConfig+0x2cc>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80057ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057d2:	d017      	beq.n	8005804 <UART_SetConfig+0x2bc>
 80057d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057d8:	d82a      	bhi.n	8005830 <UART_SetConfig+0x2e8>
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057de:	d00b      	beq.n	80057f8 <UART_SetConfig+0x2b0>
 80057e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e4:	d824      	bhi.n	8005830 <UART_SetConfig+0x2e8>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <UART_SetConfig+0x2aa>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ee:	d006      	beq.n	80057fe <UART_SetConfig+0x2b6>
 80057f0:	e01e      	b.n	8005830 <UART_SetConfig+0x2e8>
 80057f2:	2300      	movs	r3, #0
 80057f4:	77fb      	strb	r3, [r7, #31]
 80057f6:	e04b      	b.n	8005890 <UART_SetConfig+0x348>
 80057f8:	2302      	movs	r3, #2
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e048      	b.n	8005890 <UART_SetConfig+0x348>
 80057fe:	2304      	movs	r3, #4
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e045      	b.n	8005890 <UART_SetConfig+0x348>
 8005804:	2308      	movs	r3, #8
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e042      	b.n	8005890 <UART_SetConfig+0x348>
 800580a:	bf00      	nop
 800580c:	efff69f3 	.word	0xefff69f3
 8005810:	40011000 	.word	0x40011000
 8005814:	40023800 	.word	0x40023800
 8005818:	40004400 	.word	0x40004400
 800581c:	40004800 	.word	0x40004800
 8005820:	40004c00 	.word	0x40004c00
 8005824:	40005000 	.word	0x40005000
 8005828:	40011400 	.word	0x40011400
 800582c:	40007800 	.word	0x40007800
 8005830:	2310      	movs	r3, #16
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e02c      	b.n	8005890 <UART_SetConfig+0x348>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a72      	ldr	r2, [pc, #456]	@ (8005a04 <UART_SetConfig+0x4bc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d125      	bne.n	800588c <UART_SetConfig+0x344>
 8005840:	4b71      	ldr	r3, [pc, #452]	@ (8005a08 <UART_SetConfig+0x4c0>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005846:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800584a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800584e:	d017      	beq.n	8005880 <UART_SetConfig+0x338>
 8005850:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005854:	d817      	bhi.n	8005886 <UART_SetConfig+0x33e>
 8005856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800585a:	d00b      	beq.n	8005874 <UART_SetConfig+0x32c>
 800585c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005860:	d811      	bhi.n	8005886 <UART_SetConfig+0x33e>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <UART_SetConfig+0x326>
 8005866:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800586a:	d006      	beq.n	800587a <UART_SetConfig+0x332>
 800586c:	e00b      	b.n	8005886 <UART_SetConfig+0x33e>
 800586e:	2300      	movs	r3, #0
 8005870:	77fb      	strb	r3, [r7, #31]
 8005872:	e00d      	b.n	8005890 <UART_SetConfig+0x348>
 8005874:	2302      	movs	r3, #2
 8005876:	77fb      	strb	r3, [r7, #31]
 8005878:	e00a      	b.n	8005890 <UART_SetConfig+0x348>
 800587a:	2304      	movs	r3, #4
 800587c:	77fb      	strb	r3, [r7, #31]
 800587e:	e007      	b.n	8005890 <UART_SetConfig+0x348>
 8005880:	2308      	movs	r3, #8
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e004      	b.n	8005890 <UART_SetConfig+0x348>
 8005886:	2310      	movs	r3, #16
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e001      	b.n	8005890 <UART_SetConfig+0x348>
 800588c:	2310      	movs	r3, #16
 800588e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005898:	d15b      	bne.n	8005952 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800589a:	7ffb      	ldrb	r3, [r7, #31]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d828      	bhi.n	80058f2 <UART_SetConfig+0x3aa>
 80058a0:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <UART_SetConfig+0x360>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058f3 	.word	0x080058f3
 80058b8:	080058e3 	.word	0x080058e3
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058f3 	.word	0x080058f3
 80058c4:	080058f3 	.word	0x080058f3
 80058c8:	080058eb 	.word	0x080058eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058cc:	f7fe fd6c 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 80058d0:	61b8      	str	r0, [r7, #24]
        break;
 80058d2:	e013      	b.n	80058fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7fe fd7c 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 80058d8:	61b8      	str	r0, [r7, #24]
        break;
 80058da:	e00f      	b.n	80058fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b4b      	ldr	r3, [pc, #300]	@ (8005a0c <UART_SetConfig+0x4c4>)
 80058de:	61bb      	str	r3, [r7, #24]
        break;
 80058e0:	e00c      	b.n	80058fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fe fc8f 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80058e6:	61b8      	str	r0, [r7, #24]
        break;
 80058e8:	e008      	b.n	80058fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ee:	61bb      	str	r3, [r7, #24]
        break;
 80058f0:	e004      	b.n	80058fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	77bb      	strb	r3, [r7, #30]
        break;
 80058fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d074      	beq.n	80059ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	005a      	lsls	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	441a      	add	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d916      	bls.n	800594c <UART_SetConfig+0x404>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005924:	d212      	bcs.n	800594c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f023 030f 	bic.w	r3, r3, #15
 800592e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	b29b      	uxth	r3, r3
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	b29a      	uxth	r2, r3
 800593c:	89fb      	ldrh	r3, [r7, #14]
 800593e:	4313      	orrs	r3, r2
 8005940:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	89fa      	ldrh	r2, [r7, #14]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	e04f      	b.n	80059ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	77bb      	strb	r3, [r7, #30]
 8005950:	e04c      	b.n	80059ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005952:	7ffb      	ldrb	r3, [r7, #31]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d828      	bhi.n	80059aa <UART_SetConfig+0x462>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0x418>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005985 	.word	0x08005985
 8005964:	0800598d 	.word	0x0800598d
 8005968:	08005995 	.word	0x08005995
 800596c:	080059ab 	.word	0x080059ab
 8005970:	0800599b 	.word	0x0800599b
 8005974:	080059ab 	.word	0x080059ab
 8005978:	080059ab 	.word	0x080059ab
 800597c:	080059ab 	.word	0x080059ab
 8005980:	080059a3 	.word	0x080059a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005984:	f7fe fd10 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 8005988:	61b8      	str	r0, [r7, #24]
        break;
 800598a:	e013      	b.n	80059b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800598c:	f7fe fd20 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 8005990:	61b8      	str	r0, [r7, #24]
        break;
 8005992:	e00f      	b.n	80059b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005994:	4b1d      	ldr	r3, [pc, #116]	@ (8005a0c <UART_SetConfig+0x4c4>)
 8005996:	61bb      	str	r3, [r7, #24]
        break;
 8005998:	e00c      	b.n	80059b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599a:	f7fe fc33 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 800599e:	61b8      	str	r0, [r7, #24]
        break;
 80059a0:	e008      	b.n	80059b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059a6:	61bb      	str	r3, [r7, #24]
        break;
 80059a8:	e004      	b.n	80059b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	77bb      	strb	r3, [r7, #30]
        break;
 80059b2:	bf00      	nop
    }

    if (pclk != 0U)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d018      	beq.n	80059ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	085a      	lsrs	r2, r3, #1
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	441a      	add	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b0f      	cmp	r3, #15
 80059d2:	d909      	bls.n	80059e8 <UART_SetConfig+0x4a0>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059da:	d205      	bcs.n	80059e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	b29a      	uxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60da      	str	r2, [r3, #12]
 80059e6:	e001      	b.n	80059ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40007c00 	.word	0x40007c00
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	00f42400 	.word	0x00f42400

08005a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01a      	beq.n	8005b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b0e:	d10a      	bne.n	8005b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08c      	sub	sp, #48	@ 0x30
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b64:	f7fb fc1e 	bl	80013a4 <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d12e      	bne.n	8005bd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f83b 	bl	8005c02 <UART_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d021      	beq.n	8005bd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	69b9      	ldr	r1, [r7, #24]
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e6      	bne.n	8005b92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e011      	b.n	8005bfa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3728      	adds	r7, #40	@ 0x28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c12:	e04f      	b.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c1a:	d04b      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1c:	f7fb fbc2 	bl	80013a4 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d302      	bcc.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e04e      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d037      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b80      	cmp	r3, #128	@ 0x80
 8005c48:	d034      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b40      	cmp	r3, #64	@ 0x40
 8005c4e:	d031      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d110      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2208      	movs	r2, #8
 8005c64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f8fe 	bl	8005e68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e029      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c8e:	d111      	bne.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f8e4 	bl	8005e68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e00f      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d0a0      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b096      	sub	sp, #88	@ 0x58
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2222      	movs	r2, #34	@ 0x22
 8005d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d028      	beq.n	8005d62 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d14:	4a3e      	ldr	r2, [pc, #248]	@ (8005e10 <UART_Start_Receive_DMA+0x134>)
 8005d16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e14 <UART_Start_Receive_DMA+0x138>)
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d24:	4a3c      	ldr	r2, [pc, #240]	@ (8005e18 <UART_Start_Receive_DMA+0x13c>)
 8005d26:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3324      	adds	r3, #36	@ 0x24
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d40:	461a      	mov	r2, r3
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	f7fb ff28 	bl	8001b98 <HAL_DMA_Start_IT>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2210      	movs	r2, #16
 8005d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e051      	b.n	8005e06 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d018      	beq.n	8005d9c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d8a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e6      	bne.n	8005d6a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dbc:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	613b      	str	r3, [r7, #16]
   return(result);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3308      	adds	r3, #8
 8005dee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005df0:	623a      	str	r2, [r7, #32]
 8005df2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	69f9      	ldr	r1, [r7, #28]
 8005df6:	6a3a      	ldr	r2, [r7, #32]
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e5      	bne.n	8005dd0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3758      	adds	r7, #88	@ 0x58
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	08005fe3 	.word	0x08005fe3
 8005e14:	08006141 	.word	0x08006141
 8005e18:	080061b3 	.word	0x080061b3

08005e1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b089      	sub	sp, #36	@ 0x24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6979      	ldr	r1, [r7, #20]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e6      	bne.n	8005e24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005e5c:	bf00      	nop
 8005e5e:	3724      	adds	r7, #36	@ 0x24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b095      	sub	sp, #84	@ 0x54
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e6      	bne.n	8005e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e5      	bne.n	8005ea2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d118      	bne.n	8005f10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f023 0310 	bic.w	r3, r3, #16
 8005ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6979      	ldr	r1, [r7, #20]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	613b      	str	r3, [r7, #16]
   return(result);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e6      	bne.n	8005ede <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f24:	bf00      	nop
 8005f26:	3754      	adds	r7, #84	@ 0x54
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b090      	sub	sp, #64	@ 0x40
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f46:	d037      	beq.n	8005fb8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8005f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3308      	adds	r3, #8
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f70:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e6      	bne.n	8005f84 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fb6:	e002      	b.n	8005fbe <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8005fb8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005fba:	f7ff fa91 	bl	80054e0 <HAL_UART_TxCpltCallback>
}
 8005fbe:	bf00      	nop
 8005fc0:	3740      	adds	r7, #64	@ 0x40
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff fa8d 	bl	80054f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b09c      	sub	sp, #112	@ 0x70
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff8:	d071      	beq.n	80060de <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8005ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006016:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006020:	657b      	str	r3, [r7, #84]	@ 0x54
 8006022:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006026:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800602e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	667b      	str	r3, [r7, #100]	@ 0x64
 800604c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006054:	643a      	str	r2, [r7, #64]	@ 0x40
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800605a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e5      	bne.n	8006034 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3308      	adds	r3, #8
 800606e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	61fb      	str	r3, [r7, #28]
   return(result);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006088:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800608e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e5      	bne.n	8006068 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800609c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d118      	bne.n	80060de <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6979      	ldr	r1, [r7, #20]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e6      	bne.n	80060ac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e0:	2200      	movs	r2, #0
 80060e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d122      	bne.n	8006132 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 80060ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 80060fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006100:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006104:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006108:	429a      	cmp	r2, r3
 800610a:	d204      	bcs.n	8006116 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800610c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800610e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006112:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006118:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800611c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800611e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006122:	b29b      	uxth	r3, r3
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	b29b      	uxth	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800612c:	f7ff fa00 	bl	8005530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006130:	e002      	b.n	8006138 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8006132:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006134:	f00b fbca 	bl	80118cc <HAL_UART_RxCpltCallback>
}
 8006138:	bf00      	nop
 800613a:	3770      	adds	r7, #112	@ 0x70
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	2b01      	cmp	r3, #1
 800615a:	d123      	bne.n	80061a4 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800617a:	897a      	ldrh	r2, [r7, #10]
 800617c:	429a      	cmp	r2, r3
 800617e:	d803      	bhi.n	8006188 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	897a      	ldrh	r2, [r7, #10]
 8006184:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006194:	b29b      	uxth	r3, r3
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	b29b      	uxth	r3, r3
 800619a:	4619      	mov	r1, r3
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff f9c7 	bl	8005530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061a2:	e002      	b.n	80061aa <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff f9af 	bl	8005508 <HAL_UART_RxHalfCpltCallback>
}
 80061aa:	bf00      	nop
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d8:	2b80      	cmp	r3, #128	@ 0x80
 80061da:	d109      	bne.n	80061f0 <UART_DMAError+0x3e>
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b21      	cmp	r3, #33	@ 0x21
 80061e0:	d106      	bne.n	80061f0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80061ea:	6978      	ldr	r0, [r7, #20]
 80061ec:	f7ff fe16 	bl	8005e1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fa:	2b40      	cmp	r3, #64	@ 0x40
 80061fc:	d109      	bne.n	8006212 <UART_DMAError+0x60>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b22      	cmp	r3, #34	@ 0x22
 8006202:	d106      	bne.n	8006212 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800620c:	6978      	ldr	r0, [r7, #20]
 800620e:	f7ff fe2b 	bl	8005e68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006218:	f043 0210 	orr.w	r2, r3, #16
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f7ff f97a 	bl	800551c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff f968 	bl	800551c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	60bb      	str	r3, [r7, #8]
   return(result);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6979      	ldr	r1, [r7, #20]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	613b      	str	r3, [r7, #16]
   return(result);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e6      	bne.n	800625c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff f920 	bl	80054e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a0:	bf00      	nop
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80062ae:	4b87      	ldr	r3, [pc, #540]	@ (80064cc <MX_LWIP_Init+0x224>)
 80062b0:	220a      	movs	r2, #10
 80062b2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 80062b4:	4b85      	ldr	r3, [pc, #532]	@ (80064cc <MX_LWIP_Init+0x224>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80062ba:	4b84      	ldr	r3, [pc, #528]	@ (80064cc <MX_LWIP_Init+0x224>)
 80062bc:	2201      	movs	r2, #1
 80062be:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 80062c0:	4b82      	ldr	r3, [pc, #520]	@ (80064cc <MX_LWIP_Init+0x224>)
 80062c2:	2264      	movs	r2, #100	@ 0x64
 80062c4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80062c6:	4b82      	ldr	r3, [pc, #520]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80062c8:	22ff      	movs	r2, #255	@ 0xff
 80062ca:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80062cc:	4b80      	ldr	r3, [pc, #512]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80062ce:	22ff      	movs	r2, #255	@ 0xff
 80062d0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80062d2:	4b7f      	ldr	r3, [pc, #508]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80062d4:	22ff      	movs	r2, #255	@ 0xff
 80062d6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80062d8:	4b7d      	ldr	r3, [pc, #500]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80062da:	2200      	movs	r2, #0
 80062dc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80062de:	4b7d      	ldr	r3, [pc, #500]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 80062e0:	220a      	movs	r2, #10
 80062e2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80062e4:	4b7b      	ldr	r3, [pc, #492]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80062ea:	4b7a      	ldr	r3, [pc, #488]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 80062f0:	4b78      	ldr	r3, [pc, #480]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 80062f2:	2265      	movs	r2, #101	@ 0x65
 80062f4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80062f6:	f000 fd6a 	bl	8006dce <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80062fa:	4b74      	ldr	r3, [pc, #464]	@ (80064cc <MX_LWIP_Init+0x224>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	061a      	lsls	r2, r3, #24
 8006300:	4b72      	ldr	r3, [pc, #456]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	431a      	orrs	r2, r3
 8006308:	4b70      	ldr	r3, [pc, #448]	@ (80064cc <MX_LWIP_Init+0x224>)
 800630a:	789b      	ldrb	r3, [r3, #2]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4313      	orrs	r3, r2
 8006310:	4a6e      	ldr	r2, [pc, #440]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006312:	78d2      	ldrb	r2, [r2, #3]
 8006314:	4313      	orrs	r3, r2
 8006316:	061a      	lsls	r2, r3, #24
 8006318:	4b6c      	ldr	r3, [pc, #432]	@ (80064cc <MX_LWIP_Init+0x224>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	0619      	lsls	r1, r3, #24
 800631e:	4b6b      	ldr	r3, [pc, #428]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	4319      	orrs	r1, r3
 8006326:	4b69      	ldr	r3, [pc, #420]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006328:	789b      	ldrb	r3, [r3, #2]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	430b      	orrs	r3, r1
 800632e:	4967      	ldr	r1, [pc, #412]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006330:	78c9      	ldrb	r1, [r1, #3]
 8006332:	430b      	orrs	r3, r1
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800633a:	431a      	orrs	r2, r3
 800633c:	4b63      	ldr	r3, [pc, #396]	@ (80064cc <MX_LWIP_Init+0x224>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	0619      	lsls	r1, r3, #24
 8006342:	4b62      	ldr	r3, [pc, #392]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	4319      	orrs	r1, r3
 800634a:	4b60      	ldr	r3, [pc, #384]	@ (80064cc <MX_LWIP_Init+0x224>)
 800634c:	789b      	ldrb	r3, [r3, #2]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	430b      	orrs	r3, r1
 8006352:	495e      	ldr	r1, [pc, #376]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006354:	78c9      	ldrb	r1, [r1, #3]
 8006356:	430b      	orrs	r3, r1
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800635e:	431a      	orrs	r2, r3
 8006360:	4b5a      	ldr	r3, [pc, #360]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	0619      	lsls	r1, r3, #24
 8006366:	4b59      	ldr	r3, [pc, #356]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	4319      	orrs	r1, r3
 800636e:	4b57      	ldr	r3, [pc, #348]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006370:	789b      	ldrb	r3, [r3, #2]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	430b      	orrs	r3, r1
 8006376:	4955      	ldr	r1, [pc, #340]	@ (80064cc <MX_LWIP_Init+0x224>)
 8006378:	78c9      	ldrb	r1, [r1, #3]
 800637a:	430b      	orrs	r3, r1
 800637c:	0e1b      	lsrs	r3, r3, #24
 800637e:	4313      	orrs	r3, r2
 8006380:	4a55      	ldr	r2, [pc, #340]	@ (80064d8 <MX_LWIP_Init+0x230>)
 8006382:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006384:	4b52      	ldr	r3, [pc, #328]	@ (80064d0 <MX_LWIP_Init+0x228>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	061a      	lsls	r2, r3, #24
 800638a:	4b51      	ldr	r3, [pc, #324]	@ (80064d0 <MX_LWIP_Init+0x228>)
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	431a      	orrs	r2, r3
 8006392:	4b4f      	ldr	r3, [pc, #316]	@ (80064d0 <MX_LWIP_Init+0x228>)
 8006394:	789b      	ldrb	r3, [r3, #2]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	4313      	orrs	r3, r2
 800639a:	4a4d      	ldr	r2, [pc, #308]	@ (80064d0 <MX_LWIP_Init+0x228>)
 800639c:	78d2      	ldrb	r2, [r2, #3]
 800639e:	4313      	orrs	r3, r2
 80063a0:	061a      	lsls	r2, r3, #24
 80063a2:	4b4b      	ldr	r3, [pc, #300]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	0619      	lsls	r1, r3, #24
 80063a8:	4b49      	ldr	r3, [pc, #292]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	4319      	orrs	r1, r3
 80063b0:	4b47      	ldr	r3, [pc, #284]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063b2:	789b      	ldrb	r3, [r3, #2]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	430b      	orrs	r3, r1
 80063b8:	4945      	ldr	r1, [pc, #276]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063ba:	78c9      	ldrb	r1, [r1, #3]
 80063bc:	430b      	orrs	r3, r1
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063c4:	431a      	orrs	r2, r3
 80063c6:	4b42      	ldr	r3, [pc, #264]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	0619      	lsls	r1, r3, #24
 80063cc:	4b40      	ldr	r3, [pc, #256]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	4319      	orrs	r1, r3
 80063d4:	4b3e      	ldr	r3, [pc, #248]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063d6:	789b      	ldrb	r3, [r3, #2]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	430b      	orrs	r3, r1
 80063dc:	493c      	ldr	r1, [pc, #240]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063de:	78c9      	ldrb	r1, [r1, #3]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	0a1b      	lsrs	r3, r3, #8
 80063e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063e8:	431a      	orrs	r2, r3
 80063ea:	4b39      	ldr	r3, [pc, #228]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	0619      	lsls	r1, r3, #24
 80063f0:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	4319      	orrs	r1, r3
 80063f8:	4b35      	ldr	r3, [pc, #212]	@ (80064d0 <MX_LWIP_Init+0x228>)
 80063fa:	789b      	ldrb	r3, [r3, #2]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	430b      	orrs	r3, r1
 8006400:	4933      	ldr	r1, [pc, #204]	@ (80064d0 <MX_LWIP_Init+0x228>)
 8006402:	78c9      	ldrb	r1, [r1, #3]
 8006404:	430b      	orrs	r3, r1
 8006406:	0e1b      	lsrs	r3, r3, #24
 8006408:	4313      	orrs	r3, r2
 800640a:	4a34      	ldr	r2, [pc, #208]	@ (80064dc <MX_LWIP_Init+0x234>)
 800640c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800640e:	4b31      	ldr	r3, [pc, #196]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	061a      	lsls	r2, r3, #24
 8006414:	4b2f      	ldr	r3, [pc, #188]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	041b      	lsls	r3, r3, #16
 800641a:	431a      	orrs	r2, r3
 800641c:	4b2d      	ldr	r3, [pc, #180]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 800641e:	789b      	ldrb	r3, [r3, #2]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	4313      	orrs	r3, r2
 8006424:	4a2b      	ldr	r2, [pc, #172]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006426:	78d2      	ldrb	r2, [r2, #3]
 8006428:	4313      	orrs	r3, r2
 800642a:	061a      	lsls	r2, r3, #24
 800642c:	4b29      	ldr	r3, [pc, #164]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	0619      	lsls	r1, r3, #24
 8006432:	4b28      	ldr	r3, [pc, #160]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	041b      	lsls	r3, r3, #16
 8006438:	4319      	orrs	r1, r3
 800643a:	4b26      	ldr	r3, [pc, #152]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 800643c:	789b      	ldrb	r3, [r3, #2]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	430b      	orrs	r3, r1
 8006442:	4924      	ldr	r1, [pc, #144]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006444:	78c9      	ldrb	r1, [r1, #3]
 8006446:	430b      	orrs	r3, r1
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800644e:	431a      	orrs	r2, r3
 8006450:	4b20      	ldr	r3, [pc, #128]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	0619      	lsls	r1, r3, #24
 8006456:	4b1f      	ldr	r3, [pc, #124]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	041b      	lsls	r3, r3, #16
 800645c:	4319      	orrs	r1, r3
 800645e:	4b1d      	ldr	r3, [pc, #116]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006460:	789b      	ldrb	r3, [r3, #2]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	430b      	orrs	r3, r1
 8006466:	491b      	ldr	r1, [pc, #108]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006468:	78c9      	ldrb	r1, [r1, #3]
 800646a:	430b      	orrs	r3, r1
 800646c:	0a1b      	lsrs	r3, r3, #8
 800646e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006472:	431a      	orrs	r2, r3
 8006474:	4b17      	ldr	r3, [pc, #92]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	0619      	lsls	r1, r3, #24
 800647a:	4b16      	ldr	r3, [pc, #88]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4319      	orrs	r1, r3
 8006482:	4b14      	ldr	r3, [pc, #80]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 8006484:	789b      	ldrb	r3, [r3, #2]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	430b      	orrs	r3, r1
 800648a:	4912      	ldr	r1, [pc, #72]	@ (80064d4 <MX_LWIP_Init+0x22c>)
 800648c:	78c9      	ldrb	r1, [r1, #3]
 800648e:	430b      	orrs	r3, r1
 8006490:	0e1b      	lsrs	r3, r3, #24
 8006492:	4313      	orrs	r3, r2
 8006494:	4a12      	ldr	r2, [pc, #72]	@ (80064e0 <MX_LWIP_Init+0x238>)
 8006496:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006498:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <MX_LWIP_Init+0x23c>)
 800649a:	9302      	str	r3, [sp, #8]
 800649c:	4b12      	ldr	r3, [pc, #72]	@ (80064e8 <MX_LWIP_Init+0x240>)
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	4b0e      	ldr	r3, [pc, #56]	@ (80064e0 <MX_LWIP_Init+0x238>)
 80064a6:	4a0d      	ldr	r2, [pc, #52]	@ (80064dc <MX_LWIP_Init+0x234>)
 80064a8:	490b      	ldr	r1, [pc, #44]	@ (80064d8 <MX_LWIP_Init+0x230>)
 80064aa:	4810      	ldr	r0, [pc, #64]	@ (80064ec <MX_LWIP_Init+0x244>)
 80064ac:	f001 f976 	bl	800779c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80064b0:	480e      	ldr	r0, [pc, #56]	@ (80064ec <MX_LWIP_Init+0x244>)
 80064b2:	f001 fc07 	bl	8007cc4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80064b6:	480d      	ldr	r0, [pc, #52]	@ (80064ec <MX_LWIP_Init+0x244>)
 80064b8:	f001 fc28 	bl	8007d0c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80064bc:	490c      	ldr	r1, [pc, #48]	@ (80064f0 <MX_LWIP_Init+0x248>)
 80064be:	480b      	ldr	r0, [pc, #44]	@ (80064ec <MX_LWIP_Init+0x244>)
 80064c0:	f001 fd26 	bl	8007f10 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200005b0 	.word	0x200005b0
 80064d0:	200005b4 	.word	0x200005b4
 80064d4:	200005b8 	.word	0x200005b8
 80064d8:	200005a4 	.word	0x200005a4
 80064dc:	200005a8 	.word	0x200005a8
 80064e0:	200005ac 	.word	0x200005ac
 80064e4:	08011319 	.word	0x08011319
 80064e8:	08006869 	.word	0x08006869
 80064ec:	20000570 	.word	0x20000570
 80064f0:	08006545 	.word	0x08006545

080064f4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80064fc:	f7fa ff52 	bl	80013a4 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	4b08      	ldr	r3, [pc, #32]	@ (8006524 <Ethernet_Link_Periodic_Handle+0x30>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b63      	cmp	r3, #99	@ 0x63
 800650a:	d907      	bls.n	800651c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800650c:	f7fa ff4a 	bl	80013a4 <HAL_GetTick>
 8006510:	4603      	mov	r3, r0
 8006512:	4a04      	ldr	r2, [pc, #16]	@ (8006524 <Ethernet_Link_Periodic_Handle+0x30>)
 8006514:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb0c 	bl	8006b34 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	2000056c 	.word	0x2000056c

08006528 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800652c:	4804      	ldr	r0, [pc, #16]	@ (8006540 <MX_LWIP_Process+0x18>)
 800652e:	f000 f97b 	bl	8006828 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8006532:	f007 fd85 	bl	800e040 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8006536:	4802      	ldr	r0, [pc, #8]	@ (8006540 <MX_LWIP_Process+0x18>)
 8006538:	f7ff ffdc 	bl	80064f4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800653c:	bf00      	nop
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000570 	.word	0x20000570

08006544 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <SCB_InvalidateDCache_by_Addr>:
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800656a:	2320      	movs	r3, #32
 800656c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800656e:	f3bf 8f4f 	dsb	sy
}
 8006572:	bf00      	nop
    while (op_size > 0) {
 8006574:	e00b      	b.n	800658e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006576:	4a0d      	ldr	r2, [pc, #52]	@ (80065ac <SCB_InvalidateDCache_by_Addr+0x54>)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	dcf0      	bgt.n	8006576 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006594:	f3bf 8f4f 	dsb	sy
}
 8006598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800659a:	f3bf 8f6f 	isb	sy
}
 800659e:	bf00      	nop
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	e000ed00 	.word	0xe000ed00

080065b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80065bc:	4b44      	ldr	r3, [pc, #272]	@ (80066d0 <low_level_init+0x120>)
 80065be:	4a45      	ldr	r2, [pc, #276]	@ (80066d4 <low_level_init+0x124>)
 80065c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80065c2:	2300      	movs	r3, #0
 80065c4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80065c6:	2380      	movs	r3, #128	@ 0x80
 80065c8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80065ca:	23e1      	movs	r3, #225	@ 0xe1
 80065cc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80065ce:	2300      	movs	r3, #0
 80065d0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80065d2:	2300      	movs	r3, #0
 80065d4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80065d6:	2300      	movs	r3, #0
 80065d8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80065da:	4a3d      	ldr	r2, [pc, #244]	@ (80066d0 <low_level_init+0x120>)
 80065dc:	f107 0308 	add.w	r3, r7, #8
 80065e0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80065e2:	4b3b      	ldr	r3, [pc, #236]	@ (80066d0 <low_level_init+0x120>)
 80065e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065e8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80065ea:	4b39      	ldr	r3, [pc, #228]	@ (80066d0 <low_level_init+0x120>)
 80065ec:	4a3a      	ldr	r2, [pc, #232]	@ (80066d8 <low_level_init+0x128>)
 80065ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80065f0:	4b37      	ldr	r3, [pc, #220]	@ (80066d0 <low_level_init+0x120>)
 80065f2:	4a3a      	ldr	r2, [pc, #232]	@ (80066dc <low_level_init+0x12c>)
 80065f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80065f6:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <low_level_init+0x120>)
 80065f8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80065fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80065fe:	4834      	ldr	r0, [pc, #208]	@ (80066d0 <low_level_init+0x120>)
 8006600:	f7fb fe26 	bl	8002250 <HAL_ETH_Init>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006608:	2238      	movs	r2, #56	@ 0x38
 800660a:	2100      	movs	r1, #0
 800660c:	4834      	ldr	r0, [pc, #208]	@ (80066e0 <low_level_init+0x130>)
 800660e:	f00b fbdd 	bl	8011dcc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006612:	4b33      	ldr	r3, [pc, #204]	@ (80066e0 <low_level_init+0x130>)
 8006614:	2221      	movs	r2, #33	@ 0x21
 8006616:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006618:	4b31      	ldr	r3, [pc, #196]	@ (80066e0 <low_level_init+0x130>)
 800661a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800661e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006620:	4b2f      	ldr	r3, [pc, #188]	@ (80066e0 <low_level_init+0x130>)
 8006622:	2200      	movs	r2, #0
 8006624:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006626:	482f      	ldr	r0, [pc, #188]	@ (80066e4 <low_level_init+0x134>)
 8006628:	f000 ff80 	bl	800752c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2206      	movs	r2, #6
 8006630:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006634:	4b26      	ldr	r3, [pc, #152]	@ (80066d0 <low_level_init+0x120>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006640:	4b23      	ldr	r3, [pc, #140]	@ (80066d0 <low_level_init+0x120>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	785a      	ldrb	r2, [r3, #1]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800664c:	4b20      	ldr	r3, [pc, #128]	@ (80066d0 <low_level_init+0x120>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	789a      	ldrb	r2, [r3, #2]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006658:	4b1d      	ldr	r3, [pc, #116]	@ (80066d0 <low_level_init+0x120>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	78da      	ldrb	r2, [r3, #3]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006664:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <low_level_init+0x120>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	791a      	ldrb	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006670:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <low_level_init+0x120>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	795a      	ldrb	r2, [r3, #5]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006682:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800668a:	f043 030a 	orr.w	r3, r3, #10
 800668e:	b2da      	uxtb	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006696:	4914      	ldr	r1, [pc, #80]	@ (80066e8 <low_level_init+0x138>)
 8006698:	4814      	ldr	r0, [pc, #80]	@ (80066ec <low_level_init+0x13c>)
 800669a:	f7fa fd2c 	bl	80010f6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800669e:	4813      	ldr	r0, [pc, #76]	@ (80066ec <low_level_init+0x13c>)
 80066a0:	f7fa fd5b 	bl	800115a <LAN8742_Init>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d006      	beq.n	80066b8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fc00 	bl	8007eb0 <netif_set_link_down>
    netif_set_down(netif);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fb97 	bl	8007de4 <netif_set_down>
 80066b6:	e008      	b.n	80066ca <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa38 	bl	8006b34 <ethernet_link_check_state>
 80066c4:	e001      	b.n	80066ca <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80066c6:	f7fa f8ef 	bl	80008a8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20004f48 	.word	0x20004f48
 80066d4:	40028000 	.word	0x40028000
 80066d8:	2000016c 	.word	0x2000016c
 80066dc:	200000cc 	.word	0x200000cc
 80066e0:	20004ff8 	.word	0x20004ff8
 80066e4:	08015f60 	.word	0x08015f60
 80066e8:	2000000c 	.word	0x2000000c
 80066ec:	20005030 	.word	0x20005030

080066f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b092      	sub	sp, #72	@ 0x48
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006708:	f107 030c 	add.w	r3, r7, #12
 800670c:	2230      	movs	r2, #48	@ 0x30
 800670e:	2100      	movs	r1, #0
 8006710:	4618      	mov	r0, r3
 8006712:	f00b fb5b 	bl	8011dcc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006716:	f107 030c 	add.w	r3, r7, #12
 800671a:	2230      	movs	r2, #48	@ 0x30
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f00b fb54 	bl	8011dcc <memset>

  for(q = p; q != NULL; q = q->next)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	643b      	str	r3, [r7, #64]	@ 0x40
 8006728:	e045      	b.n	80067b6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800672a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800672c:	2b03      	cmp	r3, #3
 800672e:	d902      	bls.n	8006736 <low_level_output+0x46>
      return ERR_IF;
 8006730:	f06f 030b 	mvn.w	r3, #11
 8006734:	e055      	b.n	80067e2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800673c:	4613      	mov	r3, r2
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	3348      	adds	r3, #72	@ 0x48
 8006746:	443b      	add	r3, r7
 8006748:	3b3c      	subs	r3, #60	@ 0x3c
 800674a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800674c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800674e:	895b      	ldrh	r3, [r3, #10]
 8006750:	4619      	mov	r1, r3
 8006752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006754:	4613      	mov	r3, r2
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	3348      	adds	r3, #72	@ 0x48
 800675e:	443b      	add	r3, r7
 8006760:	3b38      	subs	r3, #56	@ 0x38
 8006762:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006766:	2b00      	cmp	r3, #0
 8006768:	d011      	beq.n	800678e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800676a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800676c:	1e5a      	subs	r2, r3, #1
 800676e:	f107 000c 	add.w	r0, r7, #12
 8006772:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006774:	460b      	mov	r3, r1
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	440b      	add	r3, r1
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	18c1      	adds	r1, r0, r3
 800677e:	4613      	mov	r3, r2
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	3348      	adds	r3, #72	@ 0x48
 8006788:	443b      	add	r3, r7
 800678a:	3b34      	subs	r3, #52	@ 0x34
 800678c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800678e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006798:	4613      	mov	r3, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	3348      	adds	r3, #72	@ 0x48
 80067a2:	443b      	add	r3, r7
 80067a4:	3b34      	subs	r3, #52	@ 0x34
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80067aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ac:	3301      	adds	r3, #1
 80067ae:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80067b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80067b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1b6      	bne.n	800672a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	891b      	ldrh	r3, [r3, #8]
 80067c0:	461a      	mov	r2, r3
 80067c2:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <low_level_output+0xfc>)
 80067c4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80067c6:	4a09      	ldr	r2, [pc, #36]	@ (80067ec <low_level_output+0xfc>)
 80067c8:	f107 030c 	add.w	r3, r7, #12
 80067cc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80067ce:	4a07      	ldr	r2, [pc, #28]	@ (80067ec <low_level_output+0xfc>)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80067d4:	2214      	movs	r2, #20
 80067d6:	4905      	ldr	r1, [pc, #20]	@ (80067ec <low_level_output+0xfc>)
 80067d8:	4805      	ldr	r0, [pc, #20]	@ (80067f0 <low_level_output+0x100>)
 80067da:	f7fb fec3 	bl	8002564 <HAL_ETH_Transmit>

  return errval;
 80067de:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3748      	adds	r7, #72	@ 0x48
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20004ff8 	.word	0x20004ff8
 80067f0:	20004f48 	.word	0x20004f48

080067f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006800:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <low_level_input+0x2c>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d105      	bne.n	8006814 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	4619      	mov	r1, r3
 800680e:	4805      	ldr	r0, [pc, #20]	@ (8006824 <low_level_input+0x30>)
 8006810:	f7fb ff3c 	bl	800268c <HAL_ETH_ReadData>
  }

  return p;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20004f44 	.word	0x20004f44
 8006824:	20004f48 	.word	0x20004f48

08006828 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ffdd 	bl	80067f4 <low_level_input>
 800683a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	4798      	blx	r3
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f001 fedc 	bl	8008610 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1ea      	bne.n	8006834 <ethernetif_input+0xc>
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <ethernetif_init+0x1c>
 8006876:	4b0e      	ldr	r3, [pc, #56]	@ (80068b0 <ethernetif_init+0x48>)
 8006878:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800687c:	490d      	ldr	r1, [pc, #52]	@ (80068b4 <ethernetif_init+0x4c>)
 800687e:	480e      	ldr	r0, [pc, #56]	@ (80068b8 <ethernetif_init+0x50>)
 8006880:	f00b f944 	bl	8011b0c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2273      	movs	r2, #115	@ 0x73
 8006888:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2274      	movs	r2, #116	@ 0x74
 8006890:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a09      	ldr	r2, [pc, #36]	@ (80068bc <ethernetif_init+0x54>)
 8006898:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a08      	ldr	r2, [pc, #32]	@ (80068c0 <ethernetif_init+0x58>)
 800689e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fe85 	bl	80065b0 <low_level_init>

  return ERR_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08012a90 	.word	0x08012a90
 80068b4:	08012aac 	.word	0x08012aac
 80068b8:	08012abc 	.word	0x08012abc
 80068bc:	0800f6ad 	.word	0x0800f6ad
 80068c0:	080066f1 	.word	0x080066f1

080068c4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80068d0:	68f9      	ldr	r1, [r7, #12]
 80068d2:	4807      	ldr	r0, [pc, #28]	@ (80068f0 <pbuf_free_custom+0x2c>)
 80068d4:	f000 ff0c 	bl	80076f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80068d8:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <pbuf_free_custom+0x30>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d102      	bne.n	80068e6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80068e0:	4b04      	ldr	r3, [pc, #16]	@ (80068f4 <pbuf_free_custom+0x30>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
  }
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	08015f60 	.word	0x08015f60
 80068f4:	20004f44 	.word	0x20004f44

080068f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80068fc:	f7fa fd52 	bl	80013a4 <HAL_GetTick>
 8006900:	4603      	mov	r3, r0
}
 8006902:	4618      	mov	r0, r3
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08e      	sub	sp, #56	@ 0x38
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	609a      	str	r2, [r3, #8]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a56      	ldr	r2, [pc, #344]	@ (8006a80 <HAL_ETH_MspInit+0x178>)
 8006926:	4293      	cmp	r3, r2
 8006928:	f040 80a6 	bne.w	8006a78 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800692c:	4b55      	ldr	r3, [pc, #340]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	4a54      	ldr	r2, [pc, #336]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 8006932:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006936:	6313      	str	r3, [r2, #48]	@ 0x30
 8006938:	4b52      	ldr	r3, [pc, #328]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006940:	623b      	str	r3, [r7, #32]
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	4b4f      	ldr	r3, [pc, #316]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	4a4e      	ldr	r2, [pc, #312]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800694a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800694e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006950:	4b4c      	ldr	r3, [pc, #304]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 8006952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006954:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4b49      	ldr	r3, [pc, #292]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	4a48      	ldr	r2, [pc, #288]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 8006962:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006966:	6313      	str	r3, [r2, #48]	@ 0x30
 8006968:	4b46      	ldr	r3, [pc, #280]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006974:	4b43      	ldr	r3, [pc, #268]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 8006976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006978:	4a42      	ldr	r2, [pc, #264]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800697a:	f043 0304 	orr.w	r3, r3, #4
 800697e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006980:	4b40      	ldr	r3, [pc, #256]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800698c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800698e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006990:	4a3c      	ldr	r2, [pc, #240]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	6313      	str	r3, [r2, #48]	@ 0x30
 8006998:	4b3a      	ldr	r3, [pc, #232]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 800699a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069a4:	4b37      	ldr	r3, [pc, #220]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 80069a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a8:	4a36      	ldr	r2, [pc, #216]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 80069aa:	f043 0302 	orr.w	r3, r3, #2
 80069ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80069b0:	4b34      	ldr	r3, [pc, #208]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 80069b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80069bc:	4b31      	ldr	r3, [pc, #196]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 80069be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c0:	4a30      	ldr	r2, [pc, #192]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 80069c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80069c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006a84 <HAL_ETH_MspInit+0x17c>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80069d4:	2332      	movs	r3, #50	@ 0x32
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d8:	2302      	movs	r3, #2
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e0:	2303      	movs	r3, #3
 80069e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069e4:	230b      	movs	r3, #11
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ec:	4619      	mov	r1, r3
 80069ee:	4826      	ldr	r0, [pc, #152]	@ (8006a88 <HAL_ETH_MspInit+0x180>)
 80069f0:	f7fc fe7c 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80069f4:	2386      	movs	r3, #134	@ 0x86
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f8:	2302      	movs	r3, #2
 80069fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a00:	2303      	movs	r3, #3
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a04:	230b      	movs	r3, #11
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	481f      	ldr	r0, [pc, #124]	@ (8006a8c <HAL_ETH_MspInit+0x184>)
 8006a10:	f7fc fe6c 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a22:	2303      	movs	r3, #3
 8006a24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a26:	230b      	movs	r3, #11
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4817      	ldr	r0, [pc, #92]	@ (8006a90 <HAL_ETH_MspInit+0x188>)
 8006a32:	f7fc fe5b 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006a36:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a44:	2303      	movs	r3, #3
 8006a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a48:	230b      	movs	r3, #11
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a50:	4619      	mov	r1, r3
 8006a52:	4810      	ldr	r0, [pc, #64]	@ (8006a94 <HAL_ETH_MspInit+0x18c>)
 8006a54:	f7fc fe4a 	bl	80036ec <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	203d      	movs	r0, #61	@ 0x3d
 8006a5e:	f7fa fdac 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006a62:	203d      	movs	r0, #61	@ 0x3d
 8006a64:	f7fa fdc5 	bl	80015f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	203e      	movs	r0, #62	@ 0x3e
 8006a6e:	f7fa fda4 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8006a72:	203e      	movs	r0, #62	@ 0x3e
 8006a74:	f7fa fdbd 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006a78:	bf00      	nop
 8006a7a:	3738      	adds	r7, #56	@ 0x38
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40028000 	.word	0x40028000
 8006a84:	40023800 	.word	0x40023800
 8006a88:	40020800 	.word	0x40020800
 8006a8c:	40020000 	.word	0x40020000
 8006a90:	40020400 	.word	0x40020400
 8006a94:	40021800 	.word	0x40021800

08006a98 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006a9c:	4802      	ldr	r0, [pc, #8]	@ (8006aa8 <ETH_PHY_IO_Init+0x10>)
 8006a9e:	f7fc f9c3 	bl	8002e28 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20004f48 	.word	0x20004f48

08006aac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  return 0;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	68f9      	ldr	r1, [r7, #12]
 8006ace:	4807      	ldr	r0, [pc, #28]	@ (8006aec <ETH_PHY_IO_ReadReg+0x30>)
 8006ad0:	f7fc f804 	bl	8002adc <HAL_ETH_ReadPHYRegister>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ade:	e000      	b.n	8006ae2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20004f48 	.word	0x20004f48

08006af0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	68f9      	ldr	r1, [r7, #12]
 8006b02:	4807      	ldr	r0, [pc, #28]	@ (8006b20 <ETH_PHY_IO_WriteReg+0x30>)
 8006b04:	f7fc f835 	bl	8002b72 <HAL_ETH_WritePHYRegister>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b12:	e000      	b.n	8006b16 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20004f48 	.word	0x20004f48

08006b24 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006b28:	f7fa fc3c 	bl	80013a4 <HAL_GetTick>
 8006b2c:	4603      	mov	r3, r0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b0a0      	sub	sp, #128	@ 0x80
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006b3c:	f107 030c 	add.w	r3, r7, #12
 8006b40:	2264      	movs	r2, #100	@ 0x64
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f00b f941 	bl	8011dcc <memset>
  int32_t PHYLinkState = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b52:	2300      	movs	r3, #0
 8006b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b56:	2300      	movs	r3, #0
 8006b58:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006b5a:	483a      	ldr	r0, [pc, #232]	@ (8006c44 <ethernet_link_check_state+0x110>)
 8006b5c:	f7fa fb4a 	bl	80011f4 <LAN8742_GetLinkState>
 8006b60:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <ethernet_link_check_state+0x5a>
 8006b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	dc09      	bgt.n	8006b8e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8006b7a:	4833      	ldr	r0, [pc, #204]	@ (8006c48 <ethernet_link_check_state+0x114>)
 8006b7c:	f7fb fc72 	bl	8002464 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f92f 	bl	8007de4 <netif_set_down>
    netif_set_link_down(netif);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 f992 	bl	8007eb0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006b8c:	e055      	b.n	8006c3a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d14e      	bne.n	8006c3a <ethernet_link_check_state+0x106>
 8006b9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	dd4b      	ble.n	8006c3a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006ba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ba4:	3b02      	subs	r3, #2
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d82a      	bhi.n	8006c00 <ethernet_link_check_state+0xcc>
 8006baa:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb0 <ethernet_link_check_state+0x7c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006bd3 	.word	0x08006bd3
 8006bb8:	08006be3 	.word	0x08006be3
 8006bbc:	08006bf3 	.word	0x08006bf3
      duplex = ETH_FULLDUPLEX_MODE;
 8006bc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bc4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006bc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bca:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006bd0:	e017      	b.n	8006c02 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006bd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bda:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006be0:	e00f      	b.n	8006c02 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006be2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006be6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006be8:	2300      	movs	r3, #0
 8006bea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006bec:	2301      	movs	r3, #1
 8006bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006bf0:	e007      	b.n	8006c02 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006bfe:	e000      	b.n	8006c02 <ethernet_link_check_state+0xce>
      break;
 8006c00:	bf00      	nop
    if(linkchanged)
 8006c02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006c08:	f107 030c 	add.w	r3, r7, #12
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	480e      	ldr	r0, [pc, #56]	@ (8006c48 <ethernet_link_check_state+0x114>)
 8006c10:	f7fb fff8 	bl	8002c04 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006c14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c1a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006c1c:	f107 030c 	add.w	r3, r7, #12
 8006c20:	4619      	mov	r1, r3
 8006c22:	4809      	ldr	r0, [pc, #36]	@ (8006c48 <ethernet_link_check_state+0x114>)
 8006c24:	f7fc f8e5 	bl	8002df2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006c28:	4807      	ldr	r0, [pc, #28]	@ (8006c48 <ethernet_link_check_state+0x114>)
 8006c2a:	f7fb fbab 	bl	8002384 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 f86c 	bl	8007d0c <netif_set_up>
      netif_set_link_up(netif);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 f907 	bl	8007e48 <netif_set_link_up>
}
 8006c3a:	bf00      	nop
 8006c3c:	3780      	adds	r7, #128	@ 0x80
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20005030 	.word	0x20005030
 8006c48:	20004f48 	.word	0x20004f48

08006c4c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006c54:	4812      	ldr	r0, [pc, #72]	@ (8006ca0 <HAL_ETH_RxAllocateCallback+0x54>)
 8006c56:	f000 fcdd 	bl	8007614 <memp_malloc_pool>
 8006c5a:	60f8      	str	r0, [r7, #12]
  if (p)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d014      	beq.n	8006c8c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f103 0220 	add.w	r2, r3, #32
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca4 <HAL_ETH_RxAllocateCallback+0x58>)
 8006c70:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2241      	movs	r2, #65	@ 0x41
 8006c82:	2100      	movs	r1, #0
 8006c84:	2000      	movs	r0, #0
 8006c86:	f001 fb09 	bl	800829c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006c8a:	e005      	b.n	8006c98 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006c8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	08015f60 	.word	0x08015f60
 8006ca4:	080068c5 	.word	0x080068c5
 8006ca8:	20004f44 	.word	0x20004f44

08006cac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3b20      	subs	r3, #32
 8006cca:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	887a      	ldrh	r2, [r7, #2]
 8006cdc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e003      	b.n	8006cf6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	e009      	b.n	8006d18 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	891a      	ldrh	r2, [r3, #8]
 8006d08:	887b      	ldrh	r3, [r7, #2]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f2      	bne.n	8006d04 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006d1e:	887b      	ldrh	r3, [r7, #2]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fc18 	bl	8006558 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006d28:	bf00      	nop
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8006d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	dc04      	bgt.n	8006d4c <lwip_strerr+0x1c>
 8006d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d46:	f113 0f10 	cmn.w	r3, #16
 8006d4a:	da01      	bge.n	8006d50 <lwip_strerr+0x20>
    return "Unknown error.";
 8006d4c:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <lwip_strerr+0x38>)
 8006d4e:	e005      	b.n	8006d5c <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8006d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d54:	425b      	negs	r3, r3
 8006d56:	4a05      	ldr	r2, [pc, #20]	@ (8006d6c <lwip_strerr+0x3c>)
 8006d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	08012c20 	.word	0x08012c20
 8006d6c:	20000020 	.word	0x20000020

08006d70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	b21a      	sxth	r2, r3
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	0a1b      	lsrs	r3, r3, #8
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b21b      	sxth	r3, r3
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	b21b      	sxth	r3, r3
 8006d8e:	b29b      	uxth	r3, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	061a      	lsls	r2, r3, #24
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	0a1b      	lsrs	r3, r3, #8
 8006db6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	0e1b      	lsrs	r3, r3, #24
 8006dc0:	4313      	orrs	r3, r2
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006dd8:	f000 f8d4 	bl	8006f84 <mem_init>
  memp_init();
 8006ddc:	f000 fbd6 	bl	800758c <memp_init>
  pbuf_init();
  netif_init();
 8006de0:	f000 fcd4 	bl	800778c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006de4:	f007 f96e 	bl	800e0c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006de8:	f001 feb0 	bl	8008b4c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006dec:	f007 f8e0 	bl	800dfb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006e02:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <ptr_to_mem+0x20>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	4413      	add	r3, r2
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20005068 	.word	0x20005068

08006e1c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <mem_to_ptr+0x20>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	b29b      	uxth	r3, r3
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20005068 	.word	0x20005068

08006e40 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006e48:	4b45      	ldr	r3, [pc, #276]	@ (8006f60 <plug_holes+0x120>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d206      	bcs.n	8006e60 <plug_holes+0x20>
 8006e52:	4b44      	ldr	r3, [pc, #272]	@ (8006f64 <plug_holes+0x124>)
 8006e54:	f240 12df 	movw	r2, #479	@ 0x1df
 8006e58:	4943      	ldr	r1, [pc, #268]	@ (8006f68 <plug_holes+0x128>)
 8006e5a:	4844      	ldr	r0, [pc, #272]	@ (8006f6c <plug_holes+0x12c>)
 8006e5c:	f00a fe56 	bl	8011b0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006e60:	4b43      	ldr	r3, [pc, #268]	@ (8006f70 <plug_holes+0x130>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d306      	bcc.n	8006e78 <plug_holes+0x38>
 8006e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f64 <plug_holes+0x124>)
 8006e6c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006e70:	4940      	ldr	r1, [pc, #256]	@ (8006f74 <plug_holes+0x134>)
 8006e72:	483e      	ldr	r0, [pc, #248]	@ (8006f6c <plug_holes+0x12c>)
 8006e74:	f00a fe4a 	bl	8011b0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	791b      	ldrb	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <plug_holes+0x4e>
 8006e80:	4b38      	ldr	r3, [pc, #224]	@ (8006f64 <plug_holes+0x124>)
 8006e82:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006e86:	493c      	ldr	r1, [pc, #240]	@ (8006f78 <plug_holes+0x138>)
 8006e88:	4838      	ldr	r0, [pc, #224]	@ (8006f6c <plug_holes+0x12c>)
 8006e8a:	f00a fe3f 	bl	8011b0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006e96:	d906      	bls.n	8006ea6 <plug_holes+0x66>
 8006e98:	4b32      	ldr	r3, [pc, #200]	@ (8006f64 <plug_holes+0x124>)
 8006e9a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006e9e:	4937      	ldr	r1, [pc, #220]	@ (8006f7c <plug_holes+0x13c>)
 8006ea0:	4832      	ldr	r0, [pc, #200]	@ (8006f6c <plug_holes+0x12c>)
 8006ea2:	f00a fe33 	bl	8011b0c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ffa4 	bl	8006df8 <ptr_to_mem>
 8006eb0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d024      	beq.n	8006f04 <plug_holes+0xc4>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	791b      	ldrb	r3, [r3, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d120      	bne.n	8006f04 <plug_holes+0xc4>
 8006ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8006f70 <plug_holes+0x130>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d01b      	beq.n	8006f04 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8006f80 <plug_holes+0x140>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d102      	bne.n	8006edc <plug_holes+0x9c>
      lfree = mem;
 8006ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f80 <plug_holes+0x140>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	881a      	ldrh	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006eec:	d00a      	beq.n	8006f04 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff ff80 	bl	8006df8 <ptr_to_mem>
 8006ef8:	4604      	mov	r4, r0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff ff8e 	bl	8006e1c <mem_to_ptr>
 8006f00:	4603      	mov	r3, r0
 8006f02:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	885b      	ldrh	r3, [r3, #2]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff75 	bl	8006df8 <ptr_to_mem>
 8006f0e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d01f      	beq.n	8006f58 <plug_holes+0x118>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	791b      	ldrb	r3, [r3, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11b      	bne.n	8006f58 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006f20:	4b17      	ldr	r3, [pc, #92]	@ (8006f80 <plug_holes+0x140>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d102      	bne.n	8006f30 <plug_holes+0xf0>
      lfree = pmem;
 8006f2a:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <plug_holes+0x140>)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	881a      	ldrh	r2, [r3, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006f40:	d00a      	beq.n	8006f58 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff ff56 	bl	8006df8 <ptr_to_mem>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	68b8      	ldr	r0, [r7, #8]
 8006f50:	f7ff ff64 	bl	8006e1c <mem_to_ptr>
 8006f54:	4603      	mov	r3, r0
 8006f56:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}
 8006f60:	20005068 	.word	0x20005068
 8006f64:	08012c30 	.word	0x08012c30
 8006f68:	08012c60 	.word	0x08012c60
 8006f6c:	08012c78 	.word	0x08012c78
 8006f70:	2000506c 	.word	0x2000506c
 8006f74:	08012ca0 	.word	0x08012ca0
 8006f78:	08012cbc 	.word	0x08012cbc
 8006f7c:	08012cd8 	.word	0x08012cd8
 8006f80:	20005070 	.word	0x20005070

08006f84 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006f8a:	4b16      	ldr	r3, [pc, #88]	@ (8006fe4 <mem_init+0x60>)
 8006f8c:	4a16      	ldr	r2, [pc, #88]	@ (8006fe8 <mem_init+0x64>)
 8006f8e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006f90:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <mem_init+0x60>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006f9c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006faa:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8006fae:	f7ff ff23 	bl	8006df8 <ptr_to_mem>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8006fec <mem_init+0x68>)
 8006fb6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006fec <mem_init+0x68>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fec <mem_init+0x68>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006fc8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006fca:	4b08      	ldr	r3, [pc, #32]	@ (8006fec <mem_init+0x68>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006fd2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006fd4:	4b03      	ldr	r3, [pc, #12]	@ (8006fe4 <mem_init+0x60>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a05      	ldr	r2, [pc, #20]	@ (8006ff0 <mem_init+0x6c>)
 8006fda:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20005068 	.word	0x20005068
 8006fe8:	20048000 	.word	0x20048000
 8006fec:	2000506c 	.word	0x2000506c
 8006ff0:	20005070 	.word	0x20005070

08006ff4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff ff0d 	bl	8006e1c <mem_to_ptr>
 8007002:	4603      	mov	r3, r0
 8007004:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fef4 	bl	8006df8 <ptr_to_mem>
 8007010:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff feee 	bl	8006df8 <ptr_to_mem>
 800701c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007026:	d818      	bhi.n	800705a <mem_link_valid+0x66>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	885b      	ldrh	r3, [r3, #2]
 800702c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007030:	d813      	bhi.n	800705a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007036:	8afa      	ldrh	r2, [r7, #22]
 8007038:	429a      	cmp	r2, r3
 800703a:	d004      	beq.n	8007046 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	8afa      	ldrh	r2, [r7, #22]
 8007042:	429a      	cmp	r2, r3
 8007044:	d109      	bne.n	800705a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007046:	4b08      	ldr	r3, [pc, #32]	@ (8007068 <mem_link_valid+0x74>)
 8007048:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	429a      	cmp	r2, r3
 800704e:	d006      	beq.n	800705e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	885b      	ldrh	r3, [r3, #2]
 8007054:	8afa      	ldrh	r2, [r7, #22]
 8007056:	429a      	cmp	r2, r3
 8007058:	d001      	beq.n	800705e <mem_link_valid+0x6a>
    return 0;
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <mem_link_valid+0x6c>
  }
  return 1;
 800705e:	2301      	movs	r3, #1
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	2000506c 	.word	0x2000506c

0800706c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d04c      	beq.n	8007114 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007084:	4b25      	ldr	r3, [pc, #148]	@ (800711c <mem_free+0xb0>)
 8007086:	f240 2273 	movw	r2, #627	@ 0x273
 800708a:	4925      	ldr	r1, [pc, #148]	@ (8007120 <mem_free+0xb4>)
 800708c:	4825      	ldr	r0, [pc, #148]	@ (8007124 <mem_free+0xb8>)
 800708e:	f00a fd3d 	bl	8011b0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007092:	e040      	b.n	8007116 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3b08      	subs	r3, #8
 8007098:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800709a:	4b23      	ldr	r3, [pc, #140]	@ (8007128 <mem_free+0xbc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d306      	bcc.n	80070b2 <mem_free+0x46>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f103 020c 	add.w	r2, r3, #12
 80070aa:	4b20      	ldr	r3, [pc, #128]	@ (800712c <mem_free+0xc0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d907      	bls.n	80070c2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80070b2:	4b1a      	ldr	r3, [pc, #104]	@ (800711c <mem_free+0xb0>)
 80070b4:	f240 227f 	movw	r2, #639	@ 0x27f
 80070b8:	491d      	ldr	r1, [pc, #116]	@ (8007130 <mem_free+0xc4>)
 80070ba:	481a      	ldr	r0, [pc, #104]	@ (8007124 <mem_free+0xb8>)
 80070bc:	f00a fd26 	bl	8011b0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80070c0:	e029      	b.n	8007116 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	791b      	ldrb	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80070ca:	4b14      	ldr	r3, [pc, #80]	@ (800711c <mem_free+0xb0>)
 80070cc:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80070d0:	4918      	ldr	r1, [pc, #96]	@ (8007134 <mem_free+0xc8>)
 80070d2:	4814      	ldr	r0, [pc, #80]	@ (8007124 <mem_free+0xb8>)
 80070d4:	f00a fd1a 	bl	8011b0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80070d8:	e01d      	b.n	8007116 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff ff8a 	bl	8006ff4 <mem_link_valid>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80070e6:	4b0d      	ldr	r3, [pc, #52]	@ (800711c <mem_free+0xb0>)
 80070e8:	f240 2295 	movw	r2, #661	@ 0x295
 80070ec:	4912      	ldr	r1, [pc, #72]	@ (8007138 <mem_free+0xcc>)
 80070ee:	480d      	ldr	r0, [pc, #52]	@ (8007124 <mem_free+0xb8>)
 80070f0:	f00a fd0c 	bl	8011b0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80070f4:	e00f      	b.n	8007116 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80070fc:	4b0f      	ldr	r3, [pc, #60]	@ (800713c <mem_free+0xd0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	429a      	cmp	r2, r3
 8007104:	d202      	bcs.n	800710c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007106:	4a0d      	ldr	r2, [pc, #52]	@ (800713c <mem_free+0xd0>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fe97 	bl	8006e40 <plug_holes>
 8007112:	e000      	b.n	8007116 <mem_free+0xaa>
    return;
 8007114:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	08012c30 	.word	0x08012c30
 8007120:	08012d04 	.word	0x08012d04
 8007124:	08012c78 	.word	0x08012c78
 8007128:	20005068 	.word	0x20005068
 800712c:	2000506c 	.word	0x2000506c
 8007130:	08012d28 	.word	0x08012d28
 8007134:	08012d44 	.word	0x08012d44
 8007138:	08012d6c 	.word	0x08012d6c
 800713c:	20005070 	.word	0x20005070

08007140 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800714c:	887b      	ldrh	r3, [r7, #2]
 800714e:	3303      	adds	r3, #3
 8007150:	b29b      	uxth	r3, r3
 8007152:	f023 0303 	bic.w	r3, r3, #3
 8007156:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007158:	8bfb      	ldrh	r3, [r7, #30]
 800715a:	2b0b      	cmp	r3, #11
 800715c:	d801      	bhi.n	8007162 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800715e:	230c      	movs	r3, #12
 8007160:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007162:	8bfb      	ldrh	r3, [r7, #30]
 8007164:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007168:	d803      	bhi.n	8007172 <mem_trim+0x32>
 800716a:	8bfa      	ldrh	r2, [r7, #30]
 800716c:	887b      	ldrh	r3, [r7, #2]
 800716e:	429a      	cmp	r2, r3
 8007170:	d201      	bcs.n	8007176 <mem_trim+0x36>
    return NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	e0cc      	b.n	8007310 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007176:	4b68      	ldr	r3, [pc, #416]	@ (8007318 <mem_trim+0x1d8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	d304      	bcc.n	800718a <mem_trim+0x4a>
 8007180:	4b66      	ldr	r3, [pc, #408]	@ (800731c <mem_trim+0x1dc>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	d306      	bcc.n	8007198 <mem_trim+0x58>
 800718a:	4b65      	ldr	r3, [pc, #404]	@ (8007320 <mem_trim+0x1e0>)
 800718c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007190:	4964      	ldr	r1, [pc, #400]	@ (8007324 <mem_trim+0x1e4>)
 8007192:	4865      	ldr	r0, [pc, #404]	@ (8007328 <mem_trim+0x1e8>)
 8007194:	f00a fcba 	bl	8011b0c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007198:	4b5f      	ldr	r3, [pc, #380]	@ (8007318 <mem_trim+0x1d8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d304      	bcc.n	80071ac <mem_trim+0x6c>
 80071a2:	4b5e      	ldr	r3, [pc, #376]	@ (800731c <mem_trim+0x1dc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d301      	bcc.n	80071b0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	e0af      	b.n	8007310 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3b08      	subs	r3, #8
 80071b4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80071b6:	69b8      	ldr	r0, [r7, #24]
 80071b8:	f7ff fe30 	bl	8006e1c <mem_to_ptr>
 80071bc:	4603      	mov	r3, r0
 80071be:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	881a      	ldrh	r2, [r3, #0]
 80071c4:	8afb      	ldrh	r3, [r7, #22]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b08      	subs	r3, #8
 80071cc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80071ce:	8bfa      	ldrh	r2, [r7, #30]
 80071d0:	8abb      	ldrh	r3, [r7, #20]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d906      	bls.n	80071e4 <mem_trim+0xa4>
 80071d6:	4b52      	ldr	r3, [pc, #328]	@ (8007320 <mem_trim+0x1e0>)
 80071d8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80071dc:	4953      	ldr	r1, [pc, #332]	@ (800732c <mem_trim+0x1ec>)
 80071de:	4852      	ldr	r0, [pc, #328]	@ (8007328 <mem_trim+0x1e8>)
 80071e0:	f00a fc94 	bl	8011b0c <iprintf>
  if (newsize > size) {
 80071e4:	8bfa      	ldrh	r2, [r7, #30]
 80071e6:	8abb      	ldrh	r3, [r7, #20]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d901      	bls.n	80071f0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	e08f      	b.n	8007310 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80071f0:	8bfa      	ldrh	r2, [r7, #30]
 80071f2:	8abb      	ldrh	r3, [r7, #20]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d101      	bne.n	80071fc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	e089      	b.n	8007310 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fdf9 	bl	8006df8 <ptr_to_mem>
 8007206:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	791b      	ldrb	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d13f      	bne.n	8007290 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007218:	d106      	bne.n	8007228 <mem_trim+0xe8>
 800721a:	4b41      	ldr	r3, [pc, #260]	@ (8007320 <mem_trim+0x1e0>)
 800721c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007220:	4943      	ldr	r1, [pc, #268]	@ (8007330 <mem_trim+0x1f0>)
 8007222:	4841      	ldr	r0, [pc, #260]	@ (8007328 <mem_trim+0x1e8>)
 8007224:	f00a fc72 	bl	8011b0c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800722e:	8afa      	ldrh	r2, [r7, #22]
 8007230:	8bfb      	ldrh	r3, [r7, #30]
 8007232:	4413      	add	r3, r2
 8007234:	b29b      	uxth	r3, r3
 8007236:	3308      	adds	r3, #8
 8007238:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800723a:	4b3e      	ldr	r3, [pc, #248]	@ (8007334 <mem_trim+0x1f4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	d106      	bne.n	8007252 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007244:	89fb      	ldrh	r3, [r7, #14]
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fdd6 	bl	8006df8 <ptr_to_mem>
 800724c:	4603      	mov	r3, r0
 800724e:	4a39      	ldr	r2, [pc, #228]	@ (8007334 <mem_trim+0x1f4>)
 8007250:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007252:	89fb      	ldrh	r3, [r7, #14]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fdcf 	bl	8006df8 <ptr_to_mem>
 800725a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2200      	movs	r2, #0
 8007260:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	89ba      	ldrh	r2, [r7, #12]
 8007266:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	8afa      	ldrh	r2, [r7, #22]
 800726c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	89fa      	ldrh	r2, [r7, #14]
 8007272:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800727c:	d047      	beq.n	800730e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fdb8 	bl	8006df8 <ptr_to_mem>
 8007288:	4602      	mov	r2, r0
 800728a:	89fb      	ldrh	r3, [r7, #14]
 800728c:	8053      	strh	r3, [r2, #2]
 800728e:	e03e      	b.n	800730e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007290:	8bfb      	ldrh	r3, [r7, #30]
 8007292:	f103 0214 	add.w	r2, r3, #20
 8007296:	8abb      	ldrh	r3, [r7, #20]
 8007298:	429a      	cmp	r2, r3
 800729a:	d838      	bhi.n	800730e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800729c:	8afa      	ldrh	r2, [r7, #22]
 800729e:	8bfb      	ldrh	r3, [r7, #30]
 80072a0:	4413      	add	r3, r2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3308      	adds	r3, #8
 80072a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80072b0:	d106      	bne.n	80072c0 <mem_trim+0x180>
 80072b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007320 <mem_trim+0x1e0>)
 80072b4:	f240 3216 	movw	r2, #790	@ 0x316
 80072b8:	491d      	ldr	r1, [pc, #116]	@ (8007330 <mem_trim+0x1f0>)
 80072ba:	481b      	ldr	r0, [pc, #108]	@ (8007328 <mem_trim+0x1e8>)
 80072bc:	f00a fc26 	bl	8011b0c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80072c0:	89fb      	ldrh	r3, [r7, #14]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fd98 	bl	8006df8 <ptr_to_mem>
 80072c8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80072ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007334 <mem_trim+0x1f4>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d202      	bcs.n	80072da <mem_trim+0x19a>
      lfree = mem2;
 80072d4:	4a17      	ldr	r2, [pc, #92]	@ (8007334 <mem_trim+0x1f4>)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2200      	movs	r2, #0
 80072de:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	881a      	ldrh	r2, [r3, #0]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	8afa      	ldrh	r2, [r7, #22]
 80072ec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	89fa      	ldrh	r2, [r7, #14]
 80072f2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80072fc:	d007      	beq.n	800730e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff fd78 	bl	8006df8 <ptr_to_mem>
 8007308:	4602      	mov	r2, r0
 800730a:	89fb      	ldrh	r3, [r7, #14]
 800730c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800730e:	687b      	ldr	r3, [r7, #4]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3720      	adds	r7, #32
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20005068 	.word	0x20005068
 800731c:	2000506c 	.word	0x2000506c
 8007320:	08012c30 	.word	0x08012c30
 8007324:	08012da0 	.word	0x08012da0
 8007328:	08012c78 	.word	0x08012c78
 800732c:	08012db8 	.word	0x08012db8
 8007330:	08012dd8 	.word	0x08012dd8
 8007334:	20005070 	.word	0x20005070

08007338 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <mem_malloc+0x14>
    return NULL;
 8007348:	2300      	movs	r3, #0
 800734a:	e0d9      	b.n	8007500 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	3303      	adds	r3, #3
 8007350:	b29b      	uxth	r3, r3
 8007352:	f023 0303 	bic.w	r3, r3, #3
 8007356:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007358:	8bbb      	ldrh	r3, [r7, #28]
 800735a:	2b0b      	cmp	r3, #11
 800735c:	d801      	bhi.n	8007362 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800735e:	230c      	movs	r3, #12
 8007360:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007362:	8bbb      	ldrh	r3, [r7, #28]
 8007364:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007368:	d803      	bhi.n	8007372 <mem_malloc+0x3a>
 800736a:	8bba      	ldrh	r2, [r7, #28]
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	429a      	cmp	r2, r3
 8007370:	d201      	bcs.n	8007376 <mem_malloc+0x3e>
    return NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	e0c4      	b.n	8007500 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007376:	4b64      	ldr	r3, [pc, #400]	@ (8007508 <mem_malloc+0x1d0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff fd4e 	bl	8006e1c <mem_to_ptr>
 8007380:	4603      	mov	r3, r0
 8007382:	83fb      	strh	r3, [r7, #30]
 8007384:	e0b4      	b.n	80074f0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007386:	8bfb      	ldrh	r3, [r7, #30]
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff fd35 	bl	8006df8 <ptr_to_mem>
 800738e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	791b      	ldrb	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 80a4 	bne.w	80074e2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	8bfb      	ldrh	r3, [r7, #30]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f1a3 0208 	sub.w	r2, r3, #8
 80073a8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80073aa:	429a      	cmp	r2, r3
 80073ac:	f0c0 8099 	bcc.w	80074e2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	8bfb      	ldrh	r3, [r7, #30]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	f1a3 0208 	sub.w	r2, r3, #8
 80073be:	8bbb      	ldrh	r3, [r7, #28]
 80073c0:	3314      	adds	r3, #20
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d333      	bcc.n	800742e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80073c6:	8bfa      	ldrh	r2, [r7, #30]
 80073c8:	8bbb      	ldrh	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3308      	adds	r3, #8
 80073d0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80073d2:	8a7b      	ldrh	r3, [r7, #18]
 80073d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80073d8:	d106      	bne.n	80073e8 <mem_malloc+0xb0>
 80073da:	4b4c      	ldr	r3, [pc, #304]	@ (800750c <mem_malloc+0x1d4>)
 80073dc:	f240 3287 	movw	r2, #903	@ 0x387
 80073e0:	494b      	ldr	r1, [pc, #300]	@ (8007510 <mem_malloc+0x1d8>)
 80073e2:	484c      	ldr	r0, [pc, #304]	@ (8007514 <mem_malloc+0x1dc>)
 80073e4:	f00a fb92 	bl	8011b0c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80073e8:	8a7b      	ldrh	r3, [r7, #18]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fd04 	bl	8006df8 <ptr_to_mem>
 80073f0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	881a      	ldrh	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8bfa      	ldrh	r2, [r7, #30]
 8007404:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	8a7a      	ldrh	r2, [r7, #18]
 800740a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2201      	movs	r2, #1
 8007410:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800741a:	d00b      	beq.n	8007434 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fce9 	bl	8006df8 <ptr_to_mem>
 8007426:	4602      	mov	r2, r0
 8007428:	8a7b      	ldrh	r3, [r7, #18]
 800742a:	8053      	strh	r3, [r2, #2]
 800742c:	e002      	b.n	8007434 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2201      	movs	r2, #1
 8007432:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007434:	4b34      	ldr	r3, [pc, #208]	@ (8007508 <mem_malloc+0x1d0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	429a      	cmp	r2, r3
 800743c:	d127      	bne.n	800748e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800743e:	4b32      	ldr	r3, [pc, #200]	@ (8007508 <mem_malloc+0x1d0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007444:	e005      	b.n	8007452 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fcd4 	bl	8006df8 <ptr_to_mem>
 8007450:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <mem_malloc+0x12c>
 800745a:	4b2f      	ldr	r3, [pc, #188]	@ (8007518 <mem_malloc+0x1e0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	429a      	cmp	r2, r3
 8007462:	d1f0      	bne.n	8007446 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007464:	4a28      	ldr	r2, [pc, #160]	@ (8007508 <mem_malloc+0x1d0>)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800746a:	4b27      	ldr	r3, [pc, #156]	@ (8007508 <mem_malloc+0x1d0>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b2a      	ldr	r3, [pc, #168]	@ (8007518 <mem_malloc+0x1e0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d00b      	beq.n	800748e <mem_malloc+0x156>
 8007476:	4b24      	ldr	r3, [pc, #144]	@ (8007508 <mem_malloc+0x1d0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	791b      	ldrb	r3, [r3, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <mem_malloc+0x156>
 8007480:	4b22      	ldr	r3, [pc, #136]	@ (800750c <mem_malloc+0x1d4>)
 8007482:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007486:	4925      	ldr	r1, [pc, #148]	@ (800751c <mem_malloc+0x1e4>)
 8007488:	4822      	ldr	r0, [pc, #136]	@ (8007514 <mem_malloc+0x1dc>)
 800748a:	f00a fb3f 	bl	8011b0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800748e:	8bba      	ldrh	r2, [r7, #28]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	4413      	add	r3, r2
 8007494:	3308      	adds	r3, #8
 8007496:	4a20      	ldr	r2, [pc, #128]	@ (8007518 <mem_malloc+0x1e0>)
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	4293      	cmp	r3, r2
 800749c:	d906      	bls.n	80074ac <mem_malloc+0x174>
 800749e:	4b1b      	ldr	r3, [pc, #108]	@ (800750c <mem_malloc+0x1d4>)
 80074a0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80074a4:	491e      	ldr	r1, [pc, #120]	@ (8007520 <mem_malloc+0x1e8>)
 80074a6:	481b      	ldr	r0, [pc, #108]	@ (8007514 <mem_malloc+0x1dc>)
 80074a8:	f00a fb30 	bl	8011b0c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d006      	beq.n	80074c4 <mem_malloc+0x18c>
 80074b6:	4b15      	ldr	r3, [pc, #84]	@ (800750c <mem_malloc+0x1d4>)
 80074b8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80074bc:	4919      	ldr	r1, [pc, #100]	@ (8007524 <mem_malloc+0x1ec>)
 80074be:	4815      	ldr	r0, [pc, #84]	@ (8007514 <mem_malloc+0x1dc>)
 80074c0:	f00a fb24 	bl	8011b0c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d006      	beq.n	80074dc <mem_malloc+0x1a4>
 80074ce:	4b0f      	ldr	r3, [pc, #60]	@ (800750c <mem_malloc+0x1d4>)
 80074d0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80074d4:	4914      	ldr	r1, [pc, #80]	@ (8007528 <mem_malloc+0x1f0>)
 80074d6:	480f      	ldr	r0, [pc, #60]	@ (8007514 <mem_malloc+0x1dc>)
 80074d8:	f00a fb18 	bl	8011b0c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	3308      	adds	r3, #8
 80074e0:	e00e      	b.n	8007500 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80074e2:	8bfb      	ldrh	r3, [r7, #30]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff fc87 	bl	8006df8 <ptr_to_mem>
 80074ea:	4603      	mov	r3, r0
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80074f0:	8bfa      	ldrh	r2, [r7, #30]
 80074f2:	8bbb      	ldrh	r3, [r7, #28]
 80074f4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80074f8:	429a      	cmp	r2, r3
 80074fa:	f4ff af44 	bcc.w	8007386 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20005070 	.word	0x20005070
 800750c:	08012c30 	.word	0x08012c30
 8007510:	08012dd8 	.word	0x08012dd8
 8007514:	08012c78 	.word	0x08012c78
 8007518:	2000506c 	.word	0x2000506c
 800751c:	08012dec 	.word	0x08012dec
 8007520:	08012e08 	.word	0x08012e08
 8007524:	08012e38 	.word	0x08012e38
 8007528:	08012e68 	.word	0x08012e68

0800752c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	3303      	adds	r3, #3
 8007542:	f023 0303 	bic.w	r3, r3, #3
 8007546:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e011      	b.n	8007572 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	889b      	ldrh	r3, [r3, #4]
 8007564:	461a      	mov	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4413      	add	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3301      	adds	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	88db      	ldrh	r3, [r3, #6]
 8007576:	461a      	mov	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4293      	cmp	r3, r2
 800757c:	dbe7      	blt.n	800754e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007592:	2300      	movs	r3, #0
 8007594:	80fb      	strh	r3, [r7, #6]
 8007596:	e009      	b.n	80075ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	4a08      	ldr	r2, [pc, #32]	@ (80075bc <memp_init+0x30>)
 800759c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff ffc3 	bl	800752c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	3301      	adds	r3, #1
 80075aa:	80fb      	strh	r3, [r7, #6]
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d9f2      	bls.n	8007598 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	08016000 	.word	0x08016000

080075c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d012      	beq.n	80075fc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d006      	beq.n	80075f8 <do_memp_malloc_pool+0x38>
 80075ea:	4b07      	ldr	r3, [pc, #28]	@ (8007608 <do_memp_malloc_pool+0x48>)
 80075ec:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80075f0:	4906      	ldr	r1, [pc, #24]	@ (800760c <do_memp_malloc_pool+0x4c>)
 80075f2:	4807      	ldr	r0, [pc, #28]	@ (8007610 <do_memp_malloc_pool+0x50>)
 80075f4:	f00a fa8a 	bl	8011b0c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	e000      	b.n	80075fe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	08012ef4 	.word	0x08012ef4
 800760c:	08012f24 	.word	0x08012f24
 8007610:	08012f48 	.word	0x08012f48

08007614 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <memp_malloc_pool+0x1c>
 8007622:	4b0a      	ldr	r3, [pc, #40]	@ (800764c <memp_malloc_pool+0x38>)
 8007624:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007628:	4909      	ldr	r1, [pc, #36]	@ (8007650 <memp_malloc_pool+0x3c>)
 800762a:	480a      	ldr	r0, [pc, #40]	@ (8007654 <memp_malloc_pool+0x40>)
 800762c:	f00a fa6e 	bl	8011b0c <iprintf>
  if (desc == NULL) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <memp_malloc_pool+0x26>
    return NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	e003      	b.n	8007642 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff ffc0 	bl	80075c0 <do_memp_malloc_pool>
 8007640:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	08012ef4 	.word	0x08012ef4
 8007650:	08012f70 	.word	0x08012f70
 8007654:	08012f48 	.word	0x08012f48

08007658 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d908      	bls.n	800767a <memp_malloc+0x22>
 8007668:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <memp_malloc+0x3c>)
 800766a:	f240 1257 	movw	r2, #343	@ 0x157
 800766e:	490a      	ldr	r1, [pc, #40]	@ (8007698 <memp_malloc+0x40>)
 8007670:	480a      	ldr	r0, [pc, #40]	@ (800769c <memp_malloc+0x44>)
 8007672:	f00a fa4b 	bl	8011b0c <iprintf>
 8007676:	2300      	movs	r3, #0
 8007678:	e008      	b.n	800768c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	4a08      	ldr	r2, [pc, #32]	@ (80076a0 <memp_malloc+0x48>)
 800767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff ff9c 	bl	80075c0 <do_memp_malloc_pool>
 8007688:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800768a:	68fb      	ldr	r3, [r7, #12]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	08012ef4 	.word	0x08012ef4
 8007698:	08012f84 	.word	0x08012f84
 800769c:	08012f48 	.word	0x08012f48
 80076a0:	08016000 	.word	0x08016000

080076a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d006      	beq.n	80076c6 <do_memp_free_pool+0x22>
 80076b8:	4b0a      	ldr	r3, [pc, #40]	@ (80076e4 <do_memp_free_pool+0x40>)
 80076ba:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80076be:	490a      	ldr	r1, [pc, #40]	@ (80076e8 <do_memp_free_pool+0x44>)
 80076c0:	480a      	ldr	r0, [pc, #40]	@ (80076ec <do_memp_free_pool+0x48>)
 80076c2:	f00a fa23 	bl	8011b0c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	08012ef4 	.word	0x08012ef4
 80076e8:	08012fa4 	.word	0x08012fa4
 80076ec:	08012f48 	.word	0x08012f48

080076f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <memp_free_pool+0x1e>
 8007700:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <memp_free_pool+0x3c>)
 8007702:	f240 1295 	movw	r2, #405	@ 0x195
 8007706:	490a      	ldr	r1, [pc, #40]	@ (8007730 <memp_free_pool+0x40>)
 8007708:	480a      	ldr	r0, [pc, #40]	@ (8007734 <memp_free_pool+0x44>)
 800770a:	f00a f9ff 	bl	8011b0c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <memp_free_pool+0x34>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ffc1 	bl	80076a4 <do_memp_free_pool>
 8007722:	e000      	b.n	8007726 <memp_free_pool+0x36>
    return;
 8007724:	bf00      	nop
}
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	08012ef4 	.word	0x08012ef4
 8007730:	08012f70 	.word	0x08012f70
 8007734:	08012f48 	.word	0x08012f48

08007738 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b08      	cmp	r3, #8
 8007748:	d907      	bls.n	800775a <memp_free+0x22>
 800774a:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <memp_free+0x44>)
 800774c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007750:	490b      	ldr	r1, [pc, #44]	@ (8007780 <memp_free+0x48>)
 8007752:	480c      	ldr	r0, [pc, #48]	@ (8007784 <memp_free+0x4c>)
 8007754:	f00a f9da 	bl	8011b0c <iprintf>
 8007758:	e00c      	b.n	8007774 <memp_free+0x3c>

  if (mem == NULL) {
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d008      	beq.n	8007772 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	4a09      	ldr	r2, [pc, #36]	@ (8007788 <memp_free+0x50>)
 8007764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff ff9a 	bl	80076a4 <do_memp_free_pool>
 8007770:	e000      	b.n	8007774 <memp_free+0x3c>
    return;
 8007772:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	08012ef4 	.word	0x08012ef4
 8007780:	08012fc4 	.word	0x08012fc4
 8007784:	08012f48 	.word	0x08012f48
 8007788:	08016000 	.word	0x08016000

0800778c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007790:	bf00      	nop
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d108      	bne.n	80077c2 <netif_add+0x26>
 80077b0:	4b96      	ldr	r3, [pc, #600]	@ (8007a0c <netif_add+0x270>)
 80077b2:	f240 1227 	movw	r2, #295	@ 0x127
 80077b6:	4996      	ldr	r1, [pc, #600]	@ (8007a10 <netif_add+0x274>)
 80077b8:	4896      	ldr	r0, [pc, #600]	@ (8007a14 <netif_add+0x278>)
 80077ba:	f00a f9a7 	bl	8011b0c <iprintf>
 80077be:	2300      	movs	r3, #0
 80077c0:	e14c      	b.n	8007a5c <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d108      	bne.n	80077da <netif_add+0x3e>
 80077c8:	4b90      	ldr	r3, [pc, #576]	@ (8007a0c <netif_add+0x270>)
 80077ca:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80077ce:	4992      	ldr	r1, [pc, #584]	@ (8007a18 <netif_add+0x27c>)
 80077d0:	4890      	ldr	r0, [pc, #576]	@ (8007a14 <netif_add+0x278>)
 80077d2:	f00a f99b 	bl	8011b0c <iprintf>
 80077d6:	2300      	movs	r3, #0
 80077d8:	e140      	b.n	8007a5c <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80077e0:	4b8e      	ldr	r3, [pc, #568]	@ (8007a1c <netif_add+0x280>)
 80077e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80077ea:	4b8c      	ldr	r3, [pc, #560]	@ (8007a1c <netif_add+0x280>)
 80077ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80077f4:	4b89      	ldr	r3, [pc, #548]	@ (8007a1c <netif_add+0x280>)
 80077f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4a84      	ldr	r2, [pc, #528]	@ (8007a20 <netif_add+0x284>)
 800780e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a3a      	ldr	r2, [r7, #32]
 8007828:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800782a:	4b7e      	ldr	r3, [pc, #504]	@ (8007a24 <netif_add+0x288>)
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007838:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f9f5 	bl	8007c30 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	4798      	blx	r3
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <netif_add+0xba>
    return NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	e102      	b.n	8007a5c <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800785c:	2bff      	cmp	r3, #255	@ 0xff
 800785e:	d103      	bne.n	8007868 <netif_add+0xcc>
        netif->num = 0;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800786c:	4b6e      	ldr	r3, [pc, #440]	@ (8007a28 <netif_add+0x28c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e02b      	b.n	80078cc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	429a      	cmp	r2, r3
 800787a:	d106      	bne.n	800788a <netif_add+0xee>
 800787c:	4b63      	ldr	r3, [pc, #396]	@ (8007a0c <netif_add+0x270>)
 800787e:	f240 128b 	movw	r2, #395	@ 0x18b
 8007882:	496a      	ldr	r1, [pc, #424]	@ (8007a2c <netif_add+0x290>)
 8007884:	4863      	ldr	r0, [pc, #396]	@ (8007a14 <netif_add+0x278>)
 8007886:	f00a f941 	bl	8011b0c <iprintf>
        num_netifs++;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	3301      	adds	r3, #1
 800788e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2bff      	cmp	r3, #255	@ 0xff
 8007894:	dd06      	ble.n	80078a4 <netif_add+0x108>
 8007896:	4b5d      	ldr	r3, [pc, #372]	@ (8007a0c <netif_add+0x270>)
 8007898:	f240 128d 	movw	r2, #397	@ 0x18d
 800789c:	4964      	ldr	r1, [pc, #400]	@ (8007a30 <netif_add+0x294>)
 800789e:	485d      	ldr	r0, [pc, #372]	@ (8007a14 <netif_add+0x278>)
 80078a0:	f00a f934 	bl	8011b0c <iprintf>
        if (netif2->num == netif->num) {
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d108      	bne.n	80078c6 <netif_add+0x12a>
          netif->num++;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078ba:	3301      	adds	r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80078c4:	e005      	b.n	80078d2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1d0      	bne.n	8007874 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1be      	bne.n	8007856 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078de:	2bfe      	cmp	r3, #254	@ 0xfe
 80078e0:	d103      	bne.n	80078ea <netif_add+0x14e>
    netif_num = 0;
 80078e2:	4b50      	ldr	r3, [pc, #320]	@ (8007a24 <netif_add+0x288>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	e006      	b.n	80078f8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078f0:	3301      	adds	r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007a24 <netif_add+0x288>)
 80078f6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80078f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007a28 <netif_add+0x28c>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007900:	4a49      	ldr	r2, [pc, #292]	@ (8007a28 <netif_add+0x28c>)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800790c:	4619      	mov	r1, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007914:	461a      	mov	r2, r3
 8007916:	4847      	ldr	r0, [pc, #284]	@ (8007a34 <netif_add+0x298>)
 8007918:	f00a f8f8 	bl	8011b0c <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800791c:	4846      	ldr	r0, [pc, #280]	@ (8007a38 <netif_add+0x29c>)
 800791e:	f00a f8f5 	bl	8011b0c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <netif_add+0x194>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	4619      	mov	r1, r3
 800792e:	e000      	b.n	8007932 <netif_add+0x196>
 8007930:	2100      	movs	r1, #0
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <netif_add+0x1a6>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	3301      	adds	r3, #1
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	e000      	b.n	8007944 <netif_add+0x1a8>
 8007942:	2200      	movs	r2, #0
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <netif_add+0x1b8>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	3302      	adds	r3, #2
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	4618      	mov	r0, r3
 8007952:	e000      	b.n	8007956 <netif_add+0x1ba>
 8007954:	2000      	movs	r0, #0
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <netif_add+0x1c8>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3303      	adds	r3, #3
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	e000      	b.n	8007966 <netif_add+0x1ca>
 8007964:	2300      	movs	r3, #0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4603      	mov	r3, r0
 800796a:	4834      	ldr	r0, [pc, #208]	@ (8007a3c <netif_add+0x2a0>)
 800796c:	f00a f8ce 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8007970:	4833      	ldr	r0, [pc, #204]	@ (8007a40 <netif_add+0x2a4>)
 8007972:	f00a f8cb 	bl	8011b0c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <netif_add+0x1e8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	e000      	b.n	8007986 <netif_add+0x1ea>
 8007984:	2100      	movs	r1, #0
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <netif_add+0x1fa>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3301      	adds	r3, #1
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	e000      	b.n	8007998 <netif_add+0x1fc>
 8007996:	2200      	movs	r2, #0
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <netif_add+0x20c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3302      	adds	r3, #2
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	e000      	b.n	80079aa <netif_add+0x20e>
 80079a8:	2000      	movs	r0, #0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <netif_add+0x21c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3303      	adds	r3, #3
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	e000      	b.n	80079ba <netif_add+0x21e>
 80079b8:	2300      	movs	r3, #0
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	4603      	mov	r3, r0
 80079be:	481f      	ldr	r0, [pc, #124]	@ (8007a3c <netif_add+0x2a0>)
 80079c0:	f00a f8a4 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 80079c4:	481f      	ldr	r0, [pc, #124]	@ (8007a44 <netif_add+0x2a8>)
 80079c6:	f00a f8a1 	bl	8011b0c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <netif_add+0x23c>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	4619      	mov	r1, r3
 80079d6:	e000      	b.n	80079da <netif_add+0x23e>
 80079d8:	2100      	movs	r1, #0
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d004      	beq.n	80079ea <netif_add+0x24e>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	e000      	b.n	80079ec <netif_add+0x250>
 80079ea:	2200      	movs	r2, #0
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <netif_add+0x260>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	3302      	adds	r3, #2
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	e000      	b.n	80079fe <netif_add+0x262>
 80079fc:	2000      	movs	r0, #0
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d021      	beq.n	8007a48 <netif_add+0x2ac>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	3303      	adds	r3, #3
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	e01e      	b.n	8007a4a <netif_add+0x2ae>
 8007a0c:	08012fe0 	.word	0x08012fe0
 8007a10:	08013074 	.word	0x08013074
 8007a14:	08013030 	.word	0x08013030
 8007a18:	08013090 	.word	0x08013090
 8007a1c:	08016064 	.word	0x08016064
 8007a20:	08007f33 	.word	0x08007f33
 8007a24:	20007fa8 	.word	0x20007fa8
 8007a28:	20007fa0 	.word	0x20007fa0
 8007a2c:	080130b4 	.word	0x080130b4
 8007a30:	080130c8 	.word	0x080130c8
 8007a34:	080130f8 	.word	0x080130f8
 8007a38:	08013118 	.word	0x08013118
 8007a3c:	08013120 	.word	0x08013120
 8007a40:	08013130 	.word	0x08013130
 8007a44:	0801313c 	.word	0x0801313c
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	4805      	ldr	r0, [pc, #20]	@ (8007a64 <netif_add+0x2c8>)
 8007a50:	f00a f85c 	bl	8011b0c <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8007a54:	200a      	movs	r0, #10
 8007a56:	f00a f86b 	bl	8011b30 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08013120 	.word	0x08013120

08007a68 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f002 fbb9 	bl	800a1ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f007 f927 	bl	800ecd0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <netif_do_set_ipaddr+0x20>
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b18 <netif_do_set_ipaddr+0x8c>)
 8007aa0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007aa4:	491d      	ldr	r1, [pc, #116]	@ (8007b1c <netif_do_set_ipaddr+0x90>)
 8007aa6:	481e      	ldr	r0, [pc, #120]	@ (8007b20 <netif_do_set_ipaddr+0x94>)
 8007aa8:	f00a f830 	bl	8011b0c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <netif_do_set_ipaddr+0x34>
 8007ab2:	4b19      	ldr	r3, [pc, #100]	@ (8007b18 <netif_do_set_ipaddr+0x8c>)
 8007ab4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007ab8:	4918      	ldr	r1, [pc, #96]	@ (8007b1c <netif_do_set_ipaddr+0x90>)
 8007aba:	4819      	ldr	r0, [pc, #100]	@ (8007b20 <netif_do_set_ipaddr+0x94>)
 8007abc:	f00a f826 	bl	8011b0c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d01f      	beq.n	8007b0e <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 8007ade:	4811      	ldr	r0, [pc, #68]	@ (8007b24 <netif_do_set_ipaddr+0x98>)
 8007ae0:	f00a f884 	bl	8011bec <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007ae4:	f107 0314 	add.w	r3, r7, #20
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff ffbc 	bl	8007a68 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <netif_do_set_ipaddr+0x70>
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	e000      	b.n	8007afe <netif_do_set_ipaddr+0x72>
 8007afc:	2300      	movs	r3, #0
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007b02:	2101      	movs	r1, #1
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f92d 	bl	8007d64 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	08012fe0 	.word	0x08012fe0
 8007b1c:	08013144 	.word	0x08013144
 8007b20:	08013030 	.word	0x08013030
 8007b24:	08013154 	.word	0x08013154

08007b28 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007b28:	b5b0      	push	{r4, r5, r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d02d      	beq.n	8007b9e <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <netif_do_set_netmask+0x26>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	e000      	b.n	8007b50 <netif_do_set_netmask+0x28>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007b62:	461c      	mov	r4, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3308      	adds	r3, #8
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	461d      	mov	r5, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	3301      	adds	r3, #1
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	461a      	mov	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3308      	adds	r3, #8
 8007b84:	3303      	adds	r3, #3
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	9302      	str	r3, [sp, #8]
 8007b8a:	9101      	str	r1, [sp, #4]
 8007b8c:	9200      	str	r2, [sp, #0]
 8007b8e:	462b      	mov	r3, r5
 8007b90:	4622      	mov	r2, r4
 8007b92:	4601      	mov	r1, r0
 8007b94:	4804      	ldr	r0, [pc, #16]	@ (8007ba8 <netif_do_set_netmask+0x80>)
 8007b96:	f009 ffb9 	bl	8011b0c <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ba8:	080131a4 	.word	0x080131a4

08007bac <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007bac:	b5b0      	push	{r4, r5, r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af04      	add	r7, sp, #16
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d02d      	beq.n	8007c22 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <netif_do_set_gw+0x26>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	e000      	b.n	8007bd4 <netif_do_set_gw+0x28>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007bde:	4618      	mov	r0, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007be6:	461c      	mov	r4, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	330c      	adds	r3, #12
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461d      	mov	r5, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	3302      	adds	r3, #2
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	4619      	mov	r1, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	330c      	adds	r3, #12
 8007c08:	3303      	adds	r3, #3
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	9302      	str	r3, [sp, #8]
 8007c0e:	9101      	str	r1, [sp, #4]
 8007c10:	9200      	str	r2, [sp, #0]
 8007c12:	462b      	mov	r3, r5
 8007c14:	4622      	mov	r2, r4
 8007c16:	4601      	mov	r1, r0
 8007c18:	4804      	ldr	r0, [pc, #16]	@ (8007c2c <netif_do_set_gw+0x80>)
 8007c1a:	f009 ff77 	bl	8011b0c <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c2c:	08013204 	.word	0x08013204

08007c30 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc0 <netif_set_addr+0x90>)
 8007c4e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007c56:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc0 <netif_set_addr+0x90>)
 8007c58:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007c60:	4b17      	ldr	r3, [pc, #92]	@ (8007cc0 <netif_set_addr+0x90>)
 8007c62:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <netif_set_addr+0x42>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <netif_set_addr+0x46>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <netif_set_addr+0x48>
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d006      	beq.n	8007c8e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	461a      	mov	r2, r3
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff feff 	bl	8007a8c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff ff48 	bl	8007b28 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff ff85 	bl	8007bac <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ca8:	f107 0310 	add.w	r3, r7, #16
 8007cac:	461a      	mov	r2, r3
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff feeb 	bl	8007a8c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007cb6:	bf00      	nop
 8007cb8:	3720      	adds	r7, #32
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	08016064 	.word	0x08016064

08007cc4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8007d04 <netif_set_default+0x40>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <netif_set_default+0x1e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007cde:	4619      	mov	r1, r3
 8007ce0:	e000      	b.n	8007ce4 <netif_set_default+0x20>
 8007ce2:	2127      	movs	r1, #39	@ 0x27
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <netif_set_default+0x2e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007cf0:	e000      	b.n	8007cf4 <netif_set_default+0x30>
 8007cf2:	2327      	movs	r3, #39	@ 0x27
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4804      	ldr	r0, [pc, #16]	@ (8007d08 <netif_set_default+0x44>)
 8007cf8:	f009 ff08 	bl	8011b0c <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20007fa4 	.word	0x20007fa4
 8007d08:	08013278 	.word	0x08013278

08007d0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d107      	bne.n	8007d2a <netif_set_up+0x1e>
 8007d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d58 <netif_set_up+0x4c>)
 8007d1c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007d20:	490e      	ldr	r1, [pc, #56]	@ (8007d5c <netif_set_up+0x50>)
 8007d22:	480f      	ldr	r0, [pc, #60]	@ (8007d60 <netif_set_up+0x54>)
 8007d24:	f009 fef2 	bl	8011b0c <iprintf>
 8007d28:	e013      	b.n	8007d52 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10c      	bne.n	8007d52 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007d4a:	2103      	movs	r1, #3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f809 	bl	8007d64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	08012fe0 	.word	0x08012fe0
 8007d5c:	080132a0 	.word	0x080132a0
 8007d60:	08013030 	.word	0x08013030

08007d64 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <netif_issue_reports+0x20>
 8007d76:	4b18      	ldr	r3, [pc, #96]	@ (8007dd8 <netif_issue_reports+0x74>)
 8007d78:	f240 326d 	movw	r2, #877	@ 0x36d
 8007d7c:	4917      	ldr	r1, [pc, #92]	@ (8007ddc <netif_issue_reports+0x78>)
 8007d7e:	4818      	ldr	r0, [pc, #96]	@ (8007de0 <netif_issue_reports+0x7c>)
 8007d80:	f009 fec4 	bl	8011b0c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01e      	beq.n	8007dd0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007d98:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d017      	beq.n	8007dd0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d013      	beq.n	8007dd2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3304      	adds	r3, #4
 8007dae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00e      	beq.n	8007dd2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f007 ff5d 	bl	800fc88 <etharp_request>
 8007dce:	e000      	b.n	8007dd2 <netif_issue_reports+0x6e>
    return;
 8007dd0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	08012fe0 	.word	0x08012fe0
 8007ddc:	080132bc 	.word	0x080132bc
 8007de0:	08013030 	.word	0x08013030

08007de4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <netif_set_down+0x1e>
 8007df2:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <netif_set_down+0x58>)
 8007df4:	f240 329b 	movw	r2, #923	@ 0x39b
 8007df8:	4911      	ldr	r1, [pc, #68]	@ (8007e40 <netif_set_down+0x5c>)
 8007dfa:	4812      	ldr	r0, [pc, #72]	@ (8007e44 <netif_set_down+0x60>)
 8007dfc:	f009 fe86 	bl	8011b0c <iprintf>
 8007e00:	e019      	b.n	8007e36 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d012      	beq.n	8007e36 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e16:	f023 0301 	bic.w	r3, r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f007 fae7 	bl	800f404 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	08012fe0 	.word	0x08012fe0
 8007e40:	080132e0 	.word	0x080132e0
 8007e44:	08013030 	.word	0x08013030

08007e48 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d107      	bne.n	8007e66 <netif_set_link_up+0x1e>
 8007e56:	4b13      	ldr	r3, [pc, #76]	@ (8007ea4 <netif_set_link_up+0x5c>)
 8007e58:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007e5c:	4912      	ldr	r1, [pc, #72]	@ (8007ea8 <netif_set_link_up+0x60>)
 8007e5e:	4813      	ldr	r0, [pc, #76]	@ (8007eac <netif_set_link_up+0x64>)
 8007e60:	f009 fe54 	bl	8011b0c <iprintf>
 8007e64:	e01b      	b.n	8007e9e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d114      	bne.n	8007e9e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007e7a:	f043 0304 	orr.w	r3, r3, #4
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e86:	2103      	movs	r1, #3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ff6b 	bl	8007d64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <netif_set_link_up+0x56>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	08012fe0 	.word	0x08012fe0
 8007ea8:	08013300 	.word	0x08013300
 8007eac:	08013030 	.word	0x08013030

08007eb0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d107      	bne.n	8007ece <netif_set_link_down+0x1e>
 8007ebe:	4b11      	ldr	r3, [pc, #68]	@ (8007f04 <netif_set_link_down+0x54>)
 8007ec0:	f240 4206 	movw	r2, #1030	@ 0x406
 8007ec4:	4910      	ldr	r1, [pc, #64]	@ (8007f08 <netif_set_link_down+0x58>)
 8007ec6:	4811      	ldr	r0, [pc, #68]	@ (8007f0c <netif_set_link_down+0x5c>)
 8007ec8:	f009 fe20 	bl	8011b0c <iprintf>
 8007ecc:	e017      	b.n	8007efe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d010      	beq.n	8007efe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ee2:	f023 0304 	bic.w	r3, r3, #4
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <netif_set_link_down+0x4e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	08012fe0 	.word	0x08012fe0
 8007f08:	08013324 	.word	0x08013324
 8007f0c:	08013030 	.word	0x08013030

08007f10 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	61da      	str	r2, [r3, #28]
  }
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007f3e:	f06f 030b 	mvn.w	r3, #11
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d013      	beq.n	8007f88 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007f60:	4b0d      	ldr	r3, [pc, #52]	@ (8007f98 <netif_get_by_index+0x48>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	e00c      	b.n	8007f82 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f6e:	3301      	adds	r3, #1
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	79fa      	ldrb	r2, [r7, #7]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d101      	bne.n	8007f7c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	e006      	b.n	8007f8a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ef      	bne.n	8007f68 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20007fa0 	.word	0x20007fa0

08007f9c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <pbuf_free_ooseq+0x38>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd8 <pbuf_free_ooseq+0x3c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	607b      	str	r3, [r7, #4]
 8007fae:	e00a      	b.n	8007fc6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f002 f955 	bl	800a268 <tcp_free_ooseq>
      return;
 8007fbe:	e005      	b.n	8007fcc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f1      	bne.n	8007fb0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20007fa9 	.word	0x20007fa9
 8007fd8:	20007fb8 	.word	0x20007fb8

08007fdc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007fe0:	4b03      	ldr	r3, [pc, #12]	@ (8007ff0 <pbuf_pool_is_empty+0x14>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007fe6:	bf00      	nop
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	20007fa9 	.word	0x20007fa9

08007ff4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4611      	mov	r1, r2
 8008000:	461a      	mov	r2, r3
 8008002:	460b      	mov	r3, r1
 8008004:	80fb      	strh	r3, [r7, #6]
 8008006:	4613      	mov	r3, r2
 8008008:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	88ba      	ldrh	r2, [r7, #4]
 8008020:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008022:	8b3b      	ldrh	r3, [r7, #24]
 8008024:	b2da      	uxtb	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	7f3a      	ldrb	r2, [r7, #28]
 800802e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	73da      	strb	r2, [r3, #15]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	@ 0x30
 800804c:	af02      	add	r7, sp, #8
 800804e:	4603      	mov	r3, r0
 8008050:	71fb      	strb	r3, [r7, #7]
 8008052:	460b      	mov	r3, r1
 8008054:	80bb      	strh	r3, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800805e:	887b      	ldrh	r3, [r7, #2]
 8008060:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008064:	d07f      	beq.n	8008166 <pbuf_alloc+0x11e>
 8008066:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800806a:	f300 80c8 	bgt.w	80081fe <pbuf_alloc+0x1b6>
 800806e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008072:	d010      	beq.n	8008096 <pbuf_alloc+0x4e>
 8008074:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008078:	f300 80c1 	bgt.w	80081fe <pbuf_alloc+0x1b6>
 800807c:	2b01      	cmp	r3, #1
 800807e:	d002      	beq.n	8008086 <pbuf_alloc+0x3e>
 8008080:	2b41      	cmp	r3, #65	@ 0x41
 8008082:	f040 80bc 	bne.w	80081fe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008086:	887a      	ldrh	r2, [r7, #2]
 8008088:	88bb      	ldrh	r3, [r7, #4]
 800808a:	4619      	mov	r1, r3
 800808c:	2000      	movs	r0, #0
 800808e:	f000 f8d1 	bl	8008234 <pbuf_alloc_reference>
 8008092:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008094:	e0bd      	b.n	8008212 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800809e:	88bb      	ldrh	r3, [r7, #4]
 80080a0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80080a2:	2008      	movs	r0, #8
 80080a4:	f7ff fad8 	bl	8007658 <memp_malloc>
 80080a8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80080b0:	f7ff ff94 	bl	8007fdc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80080ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080bc:	f000 faa8 	bl	8008610 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e0a7      	b.n	8008214 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80080c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080c6:	3303      	adds	r3, #3
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	8b7a      	ldrh	r2, [r7, #26]
 80080d8:	4293      	cmp	r3, r2
 80080da:	bf28      	it	cs
 80080dc:	4613      	movcs	r3, r2
 80080de:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80080e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080e2:	3310      	adds	r3, #16
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4413      	add	r3, r2
 80080e8:	3303      	adds	r3, #3
 80080ea:	f023 0303 	bic.w	r3, r3, #3
 80080ee:	4618      	mov	r0, r3
 80080f0:	89f9      	ldrh	r1, [r7, #14]
 80080f2:	8b7a      	ldrh	r2, [r7, #26]
 80080f4:	2300      	movs	r3, #0
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	887b      	ldrh	r3, [r7, #2]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	460b      	mov	r3, r1
 80080fe:	4601      	mov	r1, r0
 8008100:	6938      	ldr	r0, [r7, #16]
 8008102:	f7ff ff77 	bl	8007ff4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d006      	beq.n	8008120 <pbuf_alloc+0xd8>
 8008112:	4b42      	ldr	r3, [pc, #264]	@ (800821c <pbuf_alloc+0x1d4>)
 8008114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008118:	4941      	ldr	r1, [pc, #260]	@ (8008220 <pbuf_alloc+0x1d8>)
 800811a:	4842      	ldr	r0, [pc, #264]	@ (8008224 <pbuf_alloc+0x1dc>)
 800811c:	f009 fcf6 	bl	8011b0c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008120:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008122:	3303      	adds	r3, #3
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800812c:	d106      	bne.n	800813c <pbuf_alloc+0xf4>
 800812e:	4b3b      	ldr	r3, [pc, #236]	@ (800821c <pbuf_alloc+0x1d4>)
 8008130:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8008134:	493c      	ldr	r1, [pc, #240]	@ (8008228 <pbuf_alloc+0x1e0>)
 8008136:	483b      	ldr	r0, [pc, #236]	@ (8008224 <pbuf_alloc+0x1dc>)
 8008138:	f009 fce8 	bl	8011b0c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	627b      	str	r3, [r7, #36]	@ 0x24
 8008146:	e002      	b.n	800814e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008152:	8b7a      	ldrh	r2, [r7, #26]
 8008154:	89fb      	ldrh	r3, [r7, #14]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800815e:	8b7b      	ldrh	r3, [r7, #26]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d19e      	bne.n	80080a2 <pbuf_alloc+0x5a>
      break;
 8008164:	e055      	b.n	8008212 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008166:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008168:	3303      	adds	r3, #3
 800816a:	b29b      	uxth	r3, r3
 800816c:	f023 0303 	bic.w	r3, r3, #3
 8008170:	b29a      	uxth	r2, r3
 8008172:	88bb      	ldrh	r3, [r7, #4]
 8008174:	3303      	adds	r3, #3
 8008176:	b29b      	uxth	r3, r3
 8008178:	f023 0303 	bic.w	r3, r3, #3
 800817c:	b29b      	uxth	r3, r3
 800817e:	4413      	add	r3, r2
 8008180:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008182:	8b3b      	ldrh	r3, [r7, #24]
 8008184:	3310      	adds	r3, #16
 8008186:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008188:	8b3a      	ldrh	r2, [r7, #24]
 800818a:	88bb      	ldrh	r3, [r7, #4]
 800818c:	3303      	adds	r3, #3
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	429a      	cmp	r2, r3
 8008194:	d306      	bcc.n	80081a4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008196:	8afa      	ldrh	r2, [r7, #22]
 8008198:	88bb      	ldrh	r3, [r7, #4]
 800819a:	3303      	adds	r3, #3
 800819c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d201      	bcs.n	80081a8 <pbuf_alloc+0x160>
        return NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e035      	b.n	8008214 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80081a8:	8afb      	ldrh	r3, [r7, #22]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff f8c4 	bl	8007338 <mem_malloc>
 80081b0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <pbuf_alloc+0x174>
        return NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e02b      	b.n	8008214 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80081bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081be:	3310      	adds	r3, #16
 80081c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c2:	4413      	add	r3, r2
 80081c4:	3303      	adds	r3, #3
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	4618      	mov	r0, r3
 80081cc:	88b9      	ldrh	r1, [r7, #4]
 80081ce:	88ba      	ldrh	r2, [r7, #4]
 80081d0:	2300      	movs	r3, #0
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	887b      	ldrh	r3, [r7, #2]
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	460b      	mov	r3, r1
 80081da:	4601      	mov	r1, r0
 80081dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80081de:	f7ff ff09 	bl	8007ff4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d010      	beq.n	8008210 <pbuf_alloc+0x1c8>
 80081ee:	4b0b      	ldr	r3, [pc, #44]	@ (800821c <pbuf_alloc+0x1d4>)
 80081f0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80081f4:	490d      	ldr	r1, [pc, #52]	@ (800822c <pbuf_alloc+0x1e4>)
 80081f6:	480b      	ldr	r0, [pc, #44]	@ (8008224 <pbuf_alloc+0x1dc>)
 80081f8:	f009 fc88 	bl	8011b0c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80081fc:	e008      	b.n	8008210 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80081fe:	4b07      	ldr	r3, [pc, #28]	@ (800821c <pbuf_alloc+0x1d4>)
 8008200:	f240 1227 	movw	r2, #295	@ 0x127
 8008204:	490a      	ldr	r1, [pc, #40]	@ (8008230 <pbuf_alloc+0x1e8>)
 8008206:	4807      	ldr	r0, [pc, #28]	@ (8008224 <pbuf_alloc+0x1dc>)
 8008208:	f009 fc80 	bl	8011b0c <iprintf>
      return NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	e001      	b.n	8008214 <pbuf_alloc+0x1cc>
      break;
 8008210:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008214:	4618      	mov	r0, r3
 8008216:	3728      	adds	r7, #40	@ 0x28
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	08013380 	.word	0x08013380
 8008220:	080133b0 	.word	0x080133b0
 8008224:	080133e0 	.word	0x080133e0
 8008228:	08013408 	.word	0x08013408
 800822c:	0801343c 	.word	0x0801343c
 8008230:	08013468 	.word	0x08013468

08008234 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af02      	add	r7, sp, #8
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	807b      	strh	r3, [r7, #2]
 8008240:	4613      	mov	r3, r2
 8008242:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008244:	883b      	ldrh	r3, [r7, #0]
 8008246:	2b41      	cmp	r3, #65	@ 0x41
 8008248:	d009      	beq.n	800825e <pbuf_alloc_reference+0x2a>
 800824a:	883b      	ldrh	r3, [r7, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d006      	beq.n	800825e <pbuf_alloc_reference+0x2a>
 8008250:	4b0f      	ldr	r3, [pc, #60]	@ (8008290 <pbuf_alloc_reference+0x5c>)
 8008252:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008256:	490f      	ldr	r1, [pc, #60]	@ (8008294 <pbuf_alloc_reference+0x60>)
 8008258:	480f      	ldr	r0, [pc, #60]	@ (8008298 <pbuf_alloc_reference+0x64>)
 800825a:	f009 fc57 	bl	8011b0c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800825e:	2007      	movs	r0, #7
 8008260:	f7ff f9fa 	bl	8007658 <memp_malloc>
 8008264:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	e00b      	b.n	8008288 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008270:	8879      	ldrh	r1, [r7, #2]
 8008272:	887a      	ldrh	r2, [r7, #2]
 8008274:	2300      	movs	r3, #0
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	883b      	ldrh	r3, [r7, #0]
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	460b      	mov	r3, r1
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff feb7 	bl	8007ff4 <pbuf_init_alloced_pbuf>
  return p;
 8008286:	68fb      	ldr	r3, [r7, #12]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08013380 	.word	0x08013380
 8008294:	08013484 	.word	0x08013484
 8008298:	080133e0 	.word	0x080133e0

0800829c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
 80082a8:	460b      	mov	r3, r1
 80082aa:	81bb      	strh	r3, [r7, #12]
 80082ac:	4613      	mov	r3, r2
 80082ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80082b4:	8a7b      	ldrh	r3, [r7, #18]
 80082b6:	3303      	adds	r3, #3
 80082b8:	f023 0203 	bic.w	r2, r3, #3
 80082bc:	89bb      	ldrh	r3, [r7, #12]
 80082be:	441a      	add	r2, r3
 80082c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d901      	bls.n	80082ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	e018      	b.n	80082fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80082d0:	8a7b      	ldrh	r3, [r7, #18]
 80082d2:	3303      	adds	r3, #3
 80082d4:	f023 0303 	bic.w	r3, r3, #3
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	4413      	add	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e001      	b.n	80082e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	89b9      	ldrh	r1, [r7, #12]
 80082e8:	89ba      	ldrh	r2, [r7, #12]
 80082ea:	2302      	movs	r3, #2
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	897b      	ldrh	r3, [r7, #10]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	460b      	mov	r3, r1
 80082f4:	6979      	ldr	r1, [r7, #20]
 80082f6:	f7ff fe7d 	bl	8007ff4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80082fa:	687b      	ldr	r3, [r7, #4]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d106      	bne.n	8008324 <pbuf_realloc+0x20>
 8008316:	4b3a      	ldr	r3, [pc, #232]	@ (8008400 <pbuf_realloc+0xfc>)
 8008318:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800831c:	4939      	ldr	r1, [pc, #228]	@ (8008404 <pbuf_realloc+0x100>)
 800831e:	483a      	ldr	r0, [pc, #232]	@ (8008408 <pbuf_realloc+0x104>)
 8008320:	f009 fbf4 	bl	8011b0c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	891b      	ldrh	r3, [r3, #8]
 8008328:	887a      	ldrh	r2, [r7, #2]
 800832a:	429a      	cmp	r2, r3
 800832c:	d263      	bcs.n	80083f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	891a      	ldrh	r2, [r3, #8]
 8008332:	887b      	ldrh	r3, [r7, #2]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008338:	887b      	ldrh	r3, [r7, #2]
 800833a:	817b      	strh	r3, [r7, #10]
  q = p;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008340:	e018      	b.n	8008374 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	895b      	ldrh	r3, [r3, #10]
 8008346:	897a      	ldrh	r2, [r7, #10]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	891a      	ldrh	r2, [r3, #8]
 8008350:	893b      	ldrh	r3, [r7, #8]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <pbuf_realloc+0x70>
 8008366:	4b26      	ldr	r3, [pc, #152]	@ (8008400 <pbuf_realloc+0xfc>)
 8008368:	f240 12af 	movw	r2, #431	@ 0x1af
 800836c:	4927      	ldr	r1, [pc, #156]	@ (800840c <pbuf_realloc+0x108>)
 800836e:	4826      	ldr	r0, [pc, #152]	@ (8008408 <pbuf_realloc+0x104>)
 8008370:	f009 fbcc 	bl	8011b0c <iprintf>
  while (rem_len > q->len) {
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	895b      	ldrh	r3, [r3, #10]
 8008378:	897a      	ldrh	r2, [r7, #10]
 800837a:	429a      	cmp	r2, r3
 800837c:	d8e1      	bhi.n	8008342 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	7b1b      	ldrb	r3, [r3, #12]
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	2b00      	cmp	r3, #0
 8008388:	d121      	bne.n	80083ce <pbuf_realloc+0xca>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	895b      	ldrh	r3, [r3, #10]
 800838e:	897a      	ldrh	r2, [r7, #10]
 8008390:	429a      	cmp	r2, r3
 8008392:	d01c      	beq.n	80083ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	7b5b      	ldrb	r3, [r3, #13]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d116      	bne.n	80083ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	897b      	ldrh	r3, [r7, #10]
 80083ac:	4413      	add	r3, r2
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4619      	mov	r1, r3
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7fe fec4 	bl	8007140 <mem_trim>
 80083b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <pbuf_realloc+0xca>
 80083c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008400 <pbuf_realloc+0xfc>)
 80083c2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80083c6:	4912      	ldr	r1, [pc, #72]	@ (8008410 <pbuf_realloc+0x10c>)
 80083c8:	480f      	ldr	r0, [pc, #60]	@ (8008408 <pbuf_realloc+0x104>)
 80083ca:	f009 fb9f 	bl	8011b0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	897a      	ldrh	r2, [r7, #10]
 80083d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	895a      	ldrh	r2, [r3, #10]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f911 	bl	8008610 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e000      	b.n	80083f8 <pbuf_realloc+0xf4>
    return;
 80083f6:	bf00      	nop

}
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	08013380 	.word	0x08013380
 8008404:	08013498 	.word	0x08013498
 8008408:	080133e0 	.word	0x080133e0
 800840c:	080134b0 	.word	0x080134b0
 8008410:	080134c8 	.word	0x080134c8

08008414 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <pbuf_add_header_impl+0x22>
 8008428:	4b2b      	ldr	r3, [pc, #172]	@ (80084d8 <pbuf_add_header_impl+0xc4>)
 800842a:	f240 12df 	movw	r2, #479	@ 0x1df
 800842e:	492b      	ldr	r1, [pc, #172]	@ (80084dc <pbuf_add_header_impl+0xc8>)
 8008430:	482b      	ldr	r0, [pc, #172]	@ (80084e0 <pbuf_add_header_impl+0xcc>)
 8008432:	f009 fb6b 	bl	8011b0c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <pbuf_add_header_impl+0x30>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008442:	d301      	bcc.n	8008448 <pbuf_add_header_impl+0x34>
    return 1;
 8008444:	2301      	movs	r3, #1
 8008446:	e043      	b.n	80084d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <pbuf_add_header_impl+0x3e>
    return 0;
 800844e:	2300      	movs	r3, #0
 8008450:	e03e      	b.n	80084d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	891a      	ldrh	r2, [r3, #8]
 800845a:	8a7b      	ldrh	r3, [r7, #18]
 800845c:	4413      	add	r3, r2
 800845e:	b29b      	uxth	r3, r3
 8008460:	8a7a      	ldrh	r2, [r7, #18]
 8008462:	429a      	cmp	r2, r3
 8008464:	d901      	bls.n	800846a <pbuf_add_header_impl+0x56>
    return 1;
 8008466:	2301      	movs	r3, #1
 8008468:	e032      	b.n	80084d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	7b1b      	ldrb	r3, [r3, #12]
 800846e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008470:	8a3b      	ldrh	r3, [r7, #16]
 8008472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00c      	beq.n	8008494 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	425b      	negs	r3, r3
 8008482:	4413      	add	r3, r2
 8008484:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3310      	adds	r3, #16
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	429a      	cmp	r2, r3
 800848e:	d20d      	bcs.n	80084ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008490:	2301      	movs	r3, #1
 8008492:	e01d      	b.n	80084d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d006      	beq.n	80084a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	425b      	negs	r3, r3
 80084a2:	4413      	add	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e001      	b.n	80084ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e011      	b.n	80084d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	895a      	ldrh	r2, [r3, #10]
 80084b6:	8a7b      	ldrh	r3, [r7, #18]
 80084b8:	4413      	add	r3, r2
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	891a      	ldrh	r2, [r3, #8]
 80084c4:	8a7b      	ldrh	r3, [r7, #18]
 80084c6:	4413      	add	r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	811a      	strh	r2, [r3, #8]


  return 0;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	08013380 	.word	0x08013380
 80084dc:	080134e4 	.word	0x080134e4
 80084e0:	080133e0 	.word	0x080133e0

080084e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80084ee:	2200      	movs	r2, #0
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff ff8e 	bl	8008414 <pbuf_add_header_impl>
 80084f8:	4603      	mov	r3, r0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d106      	bne.n	8008522 <pbuf_remove_header+0x1e>
 8008514:	4b20      	ldr	r3, [pc, #128]	@ (8008598 <pbuf_remove_header+0x94>)
 8008516:	f240 224b 	movw	r2, #587	@ 0x24b
 800851a:	4920      	ldr	r1, [pc, #128]	@ (800859c <pbuf_remove_header+0x98>)
 800851c:	4820      	ldr	r0, [pc, #128]	@ (80085a0 <pbuf_remove_header+0x9c>)
 800851e:	f009 faf5 	bl	8011b0c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <pbuf_remove_header+0x2c>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852e:	d301      	bcc.n	8008534 <pbuf_remove_header+0x30>
    return 1;
 8008530:	2301      	movs	r3, #1
 8008532:	e02c      	b.n	800858e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <pbuf_remove_header+0x3a>
    return 0;
 800853a:	2300      	movs	r3, #0
 800853c:	e027      	b.n	800858e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	895b      	ldrh	r3, [r3, #10]
 8008546:	89fa      	ldrh	r2, [r7, #14]
 8008548:	429a      	cmp	r2, r3
 800854a:	d908      	bls.n	800855e <pbuf_remove_header+0x5a>
 800854c:	4b12      	ldr	r3, [pc, #72]	@ (8008598 <pbuf_remove_header+0x94>)
 800854e:	f240 2255 	movw	r2, #597	@ 0x255
 8008552:	4914      	ldr	r1, [pc, #80]	@ (80085a4 <pbuf_remove_header+0xa0>)
 8008554:	4812      	ldr	r0, [pc, #72]	@ (80085a0 <pbuf_remove_header+0x9c>)
 8008556:	f009 fad9 	bl	8011b0c <iprintf>
 800855a:	2301      	movs	r3, #1
 800855c:	e017      	b.n	800858e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	441a      	add	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	895a      	ldrh	r2, [r3, #10]
 8008574:	89fb      	ldrh	r3, [r7, #14]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	b29a      	uxth	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	891a      	ldrh	r2, [r3, #8]
 8008582:	89fb      	ldrh	r3, [r7, #14]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	b29a      	uxth	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	08013380 	.word	0x08013380
 800859c:	080134e4 	.word	0x080134e4
 80085a0:	080133e0 	.word	0x080133e0
 80085a4:	080134f0 	.word	0x080134f0

080085a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	807b      	strh	r3, [r7, #2]
 80085b4:	4613      	mov	r3, r2
 80085b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80085b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	da08      	bge.n	80085d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80085c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085c4:	425b      	negs	r3, r3
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff ff9b 	bl	8008504 <pbuf_remove_header>
 80085ce:	4603      	mov	r3, r0
 80085d0:	e007      	b.n	80085e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80085d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085d6:	787a      	ldrb	r2, [r7, #1]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff ff1a 	bl	8008414 <pbuf_add_header_impl>
 80085e0:	4603      	mov	r3, r0
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80085f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085fa:	2201      	movs	r2, #1
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff ffd2 	bl	80085a8 <pbuf_header_impl>
 8008604:	4603      	mov	r3, r0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <pbuf_free+0x22>
 8008624:	4b38      	ldr	r3, [pc, #224]	@ (8008708 <pbuf_free+0xf8>)
 8008626:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800862a:	4938      	ldr	r1, [pc, #224]	@ (800870c <pbuf_free+0xfc>)
 800862c:	4838      	ldr	r0, [pc, #224]	@ (8008710 <pbuf_free+0x100>)
 800862e:	f009 fa6d 	bl	8011b0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008632:	2300      	movs	r3, #0
 8008634:	e063      	b.n	80086fe <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800863a:	e05c      	b.n	80086f6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7b9b      	ldrb	r3, [r3, #14]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <pbuf_free+0x42>
 8008644:	4b30      	ldr	r3, [pc, #192]	@ (8008708 <pbuf_free+0xf8>)
 8008646:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800864a:	4932      	ldr	r1, [pc, #200]	@ (8008714 <pbuf_free+0x104>)
 800864c:	4830      	ldr	r0, [pc, #192]	@ (8008710 <pbuf_free+0x100>)
 800864e:	f009 fa5d 	bl	8011b0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7b9b      	ldrb	r3, [r3, #14]
 8008656:	3b01      	subs	r3, #1
 8008658:	b2da      	uxtb	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	739a      	strb	r2, [r3, #14]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7b9b      	ldrb	r3, [r3, #14]
 8008662:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008664:	7dbb      	ldrb	r3, [r7, #22]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d143      	bne.n	80086f2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7b1b      	ldrb	r3, [r3, #12]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7b5b      	ldrb	r3, [r3, #13]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d011      	beq.n	80086aa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d106      	bne.n	80086a0 <pbuf_free+0x90>
 8008692:	4b1d      	ldr	r3, [pc, #116]	@ (8008708 <pbuf_free+0xf8>)
 8008694:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008698:	491f      	ldr	r1, [pc, #124]	@ (8008718 <pbuf_free+0x108>)
 800869a:	481d      	ldr	r0, [pc, #116]	@ (8008710 <pbuf_free+0x100>)
 800869c:	f009 fa36 	bl	8011b0c <iprintf>
        pc->custom_free_function(p);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	4798      	blx	r3
 80086a8:	e01d      	b.n	80086e6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d104      	bne.n	80086ba <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	2008      	movs	r0, #8
 80086b4:	f7ff f840 	bl	8007738 <memp_free>
 80086b8:	e015      	b.n	80086e6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d104      	bne.n	80086ca <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	2007      	movs	r0, #7
 80086c4:	f7ff f838 	bl	8007738 <memp_free>
 80086c8:	e00d      	b.n	80086e6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d103      	bne.n	80086d8 <pbuf_free+0xc8>
          mem_free(p);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fe fccb 	bl	800706c <mem_free>
 80086d6:	e006      	b.n	80086e6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80086d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008708 <pbuf_free+0xf8>)
 80086da:	f240 320f 	movw	r2, #783	@ 0x30f
 80086de:	490f      	ldr	r1, [pc, #60]	@ (800871c <pbuf_free+0x10c>)
 80086e0:	480b      	ldr	r0, [pc, #44]	@ (8008710 <pbuf_free+0x100>)
 80086e2:	f009 fa13 	bl	8011b0c <iprintf>
        }
      }
      count++;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	3301      	adds	r3, #1
 80086ea:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	607b      	str	r3, [r7, #4]
 80086f0:	e001      	b.n	80086f6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d19f      	bne.n	800863c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	08013380 	.word	0x08013380
 800870c:	080134e4 	.word	0x080134e4
 8008710:	080133e0 	.word	0x080133e0
 8008714:	08013510 	.word	0x08013510
 8008718:	08013528 	.word	0x08013528
 800871c:	0801354c 	.word	0x0801354c

08008720 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800872c:	e005      	b.n	800873a <pbuf_clen+0x1a>
    ++len;
 800872e:	89fb      	ldrh	r3, [r7, #14]
 8008730:	3301      	adds	r3, #1
 8008732:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1f6      	bne.n	800872e <pbuf_clen+0xe>
  }
  return len;
 8008740:	89fb      	ldrh	r3, [r7, #14]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
	...

08008750 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d010      	beq.n	8008780 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7b9b      	ldrb	r3, [r3, #14]
 8008762:	3301      	adds	r3, #1
 8008764:	b2da      	uxtb	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7b9b      	ldrb	r3, [r3, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d106      	bne.n	8008780 <pbuf_ref+0x30>
 8008772:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <pbuf_ref+0x38>)
 8008774:	f240 3242 	movw	r2, #834	@ 0x342
 8008778:	4904      	ldr	r1, [pc, #16]	@ (800878c <pbuf_ref+0x3c>)
 800877a:	4805      	ldr	r0, [pc, #20]	@ (8008790 <pbuf_ref+0x40>)
 800877c:	f009 f9c6 	bl	8011b0c <iprintf>
  }
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	08013380 	.word	0x08013380
 800878c:	08013560 	.word	0x08013560
 8008790:	080133e0 	.word	0x080133e0

08008794 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <pbuf_cat+0x16>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d107      	bne.n	80087ba <pbuf_cat+0x26>
 80087aa:	4b20      	ldr	r3, [pc, #128]	@ (800882c <pbuf_cat+0x98>)
 80087ac:	f240 3259 	movw	r2, #857	@ 0x359
 80087b0:	491f      	ldr	r1, [pc, #124]	@ (8008830 <pbuf_cat+0x9c>)
 80087b2:	4820      	ldr	r0, [pc, #128]	@ (8008834 <pbuf_cat+0xa0>)
 80087b4:	f009 f9aa 	bl	8011b0c <iprintf>
 80087b8:	e034      	b.n	8008824 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	e00a      	b.n	80087d6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	891a      	ldrh	r2, [r3, #8]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	891b      	ldrh	r3, [r3, #8]
 80087c8:	4413      	add	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1f0      	bne.n	80087c0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	891a      	ldrh	r2, [r3, #8]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	895b      	ldrh	r3, [r3, #10]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d006      	beq.n	80087f8 <pbuf_cat+0x64>
 80087ea:	4b10      	ldr	r3, [pc, #64]	@ (800882c <pbuf_cat+0x98>)
 80087ec:	f240 3262 	movw	r2, #866	@ 0x362
 80087f0:	4911      	ldr	r1, [pc, #68]	@ (8008838 <pbuf_cat+0xa4>)
 80087f2:	4810      	ldr	r0, [pc, #64]	@ (8008834 <pbuf_cat+0xa0>)
 80087f4:	f009 f98a 	bl	8011b0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d006      	beq.n	800880e <pbuf_cat+0x7a>
 8008800:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <pbuf_cat+0x98>)
 8008802:	f240 3263 	movw	r2, #867	@ 0x363
 8008806:	490d      	ldr	r1, [pc, #52]	@ (800883c <pbuf_cat+0xa8>)
 8008808:	480a      	ldr	r0, [pc, #40]	@ (8008834 <pbuf_cat+0xa0>)
 800880a:	f009 f97f 	bl	8011b0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	891a      	ldrh	r2, [r3, #8]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	891b      	ldrh	r3, [r3, #8]
 8008816:	4413      	add	r3, r2
 8008818:	b29a      	uxth	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	08013380 	.word	0x08013380
 8008830:	08013574 	.word	0x08013574
 8008834:	080133e0 	.word	0x080133e0
 8008838:	080135ac 	.word	0x080135ac
 800883c:	080135dc 	.word	0x080135dc

08008840 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff ffa1 	bl	8008794 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008852:	6838      	ldr	r0, [r7, #0]
 8008854:	f7ff ff7c 	bl	8008750 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <pbuf_copy+0x2a>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <pbuf_copy+0x2a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	891a      	ldrh	r2, [r3, #8]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	891b      	ldrh	r3, [r3, #8]
 8008886:	429a      	cmp	r2, r3
 8008888:	d209      	bcs.n	800889e <pbuf_copy+0x3e>
 800888a:	4b57      	ldr	r3, [pc, #348]	@ (80089e8 <pbuf_copy+0x188>)
 800888c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008890:	4956      	ldr	r1, [pc, #344]	@ (80089ec <pbuf_copy+0x18c>)
 8008892:	4857      	ldr	r0, [pc, #348]	@ (80089f0 <pbuf_copy+0x190>)
 8008894:	f009 f93a 	bl	8011b0c <iprintf>
 8008898:	f06f 030f 	mvn.w	r3, #15
 800889c:	e09f      	b.n	80089de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	895b      	ldrh	r3, [r3, #10]
 80088a2:	461a      	mov	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	895b      	ldrh	r3, [r3, #10]
 80088ac:	4619      	mov	r1, r3
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	1acb      	subs	r3, r1, r3
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d306      	bcc.n	80088c4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	895b      	ldrh	r3, [r3, #10]
 80088ba:	461a      	mov	r2, r3
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e005      	b.n	80088d0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	895b      	ldrh	r3, [r3, #10]
 80088c8:	461a      	mov	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	18d0      	adds	r0, r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	4413      	add	r3, r2
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4619      	mov	r1, r3
 80088e4:	f009 fae7 	bl	8011eb6 <memcpy>
    offset_to += len;
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	895b      	ldrh	r3, [r3, #10]
 80088fc:	461a      	mov	r2, r3
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	4293      	cmp	r3, r2
 8008902:	d906      	bls.n	8008912 <pbuf_copy+0xb2>
 8008904:	4b38      	ldr	r3, [pc, #224]	@ (80089e8 <pbuf_copy+0x188>)
 8008906:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800890a:	493a      	ldr	r1, [pc, #232]	@ (80089f4 <pbuf_copy+0x194>)
 800890c:	4838      	ldr	r0, [pc, #224]	@ (80089f0 <pbuf_copy+0x190>)
 800890e:	f009 f8fd 	bl	8011b0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	895b      	ldrh	r3, [r3, #10]
 8008916:	461a      	mov	r2, r3
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4293      	cmp	r3, r2
 800891c:	d906      	bls.n	800892c <pbuf_copy+0xcc>
 800891e:	4b32      	ldr	r3, [pc, #200]	@ (80089e8 <pbuf_copy+0x188>)
 8008920:	f240 32da 	movw	r2, #986	@ 0x3da
 8008924:	4934      	ldr	r1, [pc, #208]	@ (80089f8 <pbuf_copy+0x198>)
 8008926:	4832      	ldr	r0, [pc, #200]	@ (80089f0 <pbuf_copy+0x190>)
 8008928:	f009 f8f0 	bl	8011b0c <iprintf>
    if (offset_from >= p_from->len) {
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	895b      	ldrh	r3, [r3, #10]
 8008930:	461a      	mov	r2, r3
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	4293      	cmp	r3, r2
 8008936:	d304      	bcc.n	8008942 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	895b      	ldrh	r3, [r3, #10]
 8008946:	461a      	mov	r2, r3
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	4293      	cmp	r3, r2
 800894c:	d114      	bne.n	8008978 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10c      	bne.n	8008978 <pbuf_copy+0x118>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d009      	beq.n	8008978 <pbuf_copy+0x118>
 8008964:	4b20      	ldr	r3, [pc, #128]	@ (80089e8 <pbuf_copy+0x188>)
 8008966:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800896a:	4924      	ldr	r1, [pc, #144]	@ (80089fc <pbuf_copy+0x19c>)
 800896c:	4820      	ldr	r0, [pc, #128]	@ (80089f0 <pbuf_copy+0x190>)
 800896e:	f009 f8cd 	bl	8011b0c <iprintf>
 8008972:	f06f 030f 	mvn.w	r3, #15
 8008976:	e032      	b.n	80089de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d013      	beq.n	80089a6 <pbuf_copy+0x146>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	895a      	ldrh	r2, [r3, #10]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	891b      	ldrh	r3, [r3, #8]
 8008986:	429a      	cmp	r2, r3
 8008988:	d10d      	bne.n	80089a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d009      	beq.n	80089a6 <pbuf_copy+0x146>
 8008992:	4b15      	ldr	r3, [pc, #84]	@ (80089e8 <pbuf_copy+0x188>)
 8008994:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008998:	4919      	ldr	r1, [pc, #100]	@ (8008a00 <pbuf_copy+0x1a0>)
 800899a:	4815      	ldr	r0, [pc, #84]	@ (80089f0 <pbuf_copy+0x190>)
 800899c:	f009 f8b6 	bl	8011b0c <iprintf>
 80089a0:	f06f 0305 	mvn.w	r3, #5
 80089a4:	e01b      	b.n	80089de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <pbuf_copy+0x174>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	895a      	ldrh	r2, [r3, #10]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	891b      	ldrh	r3, [r3, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d10d      	bne.n	80089d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <pbuf_copy+0x174>
 80089c0:	4b09      	ldr	r3, [pc, #36]	@ (80089e8 <pbuf_copy+0x188>)
 80089c2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80089c6:	490e      	ldr	r1, [pc, #56]	@ (8008a00 <pbuf_copy+0x1a0>)
 80089c8:	4809      	ldr	r0, [pc, #36]	@ (80089f0 <pbuf_copy+0x190>)
 80089ca:	f009 f89f 	bl	8011b0c <iprintf>
 80089ce:	f06f 0305 	mvn.w	r3, #5
 80089d2:	e004      	b.n	80089de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f47f af61 	bne.w	800889e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	08013380 	.word	0x08013380
 80089ec:	08013628 	.word	0x08013628
 80089f0:	080133e0 	.word	0x080133e0
 80089f4:	08013658 	.word	0x08013658
 80089f8:	08013670 	.word	0x08013670
 80089fc:	0801368c 	.word	0x0801368c
 8008a00:	0801369c 	.word	0x0801369c

08008a04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	460b      	mov	r3, r1
 8008a14:	80fb      	strh	r3, [r7, #6]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d108      	bne.n	8008a3a <pbuf_copy_partial+0x36>
 8008a28:	4b2b      	ldr	r3, [pc, #172]	@ (8008ad8 <pbuf_copy_partial+0xd4>)
 8008a2a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008a2e:	492b      	ldr	r1, [pc, #172]	@ (8008adc <pbuf_copy_partial+0xd8>)
 8008a30:	482b      	ldr	r0, [pc, #172]	@ (8008ae0 <pbuf_copy_partial+0xdc>)
 8008a32:	f009 f86b 	bl	8011b0c <iprintf>
 8008a36:	2300      	movs	r3, #0
 8008a38:	e04a      	b.n	8008ad0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d108      	bne.n	8008a52 <pbuf_copy_partial+0x4e>
 8008a40:	4b25      	ldr	r3, [pc, #148]	@ (8008ad8 <pbuf_copy_partial+0xd4>)
 8008a42:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008a46:	4927      	ldr	r1, [pc, #156]	@ (8008ae4 <pbuf_copy_partial+0xe0>)
 8008a48:	4825      	ldr	r0, [pc, #148]	@ (8008ae0 <pbuf_copy_partial+0xdc>)
 8008a4a:	f009 f85f 	bl	8011b0c <iprintf>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e03e      	b.n	8008ad0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	61fb      	str	r3, [r7, #28]
 8008a56:	e034      	b.n	8008ac2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008a58:	88bb      	ldrh	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <pbuf_copy_partial+0x70>
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	895b      	ldrh	r3, [r3, #10]
 8008a62:	88ba      	ldrh	r2, [r7, #4]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d305      	bcc.n	8008a74 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	895b      	ldrh	r3, [r3, #10]
 8008a6c:	88ba      	ldrh	r2, [r7, #4]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	80bb      	strh	r3, [r7, #4]
 8008a72:	e023      	b.n	8008abc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	895a      	ldrh	r2, [r3, #10]
 8008a78:	88bb      	ldrh	r3, [r7, #4]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008a7e:	8b3a      	ldrh	r2, [r7, #24]
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d901      	bls.n	8008a8a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a8a:	8b7b      	ldrh	r3, [r7, #26]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	18d0      	adds	r0, r2, r3
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	88bb      	ldrh	r3, [r7, #4]
 8008a96:	4413      	add	r3, r2
 8008a98:	8b3a      	ldrh	r2, [r7, #24]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	f009 fa0b 	bl	8011eb6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008aa0:	8afa      	ldrh	r2, [r7, #22]
 8008aa2:	8b3b      	ldrh	r3, [r7, #24]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008aa8:	8b7a      	ldrh	r2, [r7, #26]
 8008aaa:	8b3b      	ldrh	r3, [r7, #24]
 8008aac:	4413      	add	r3, r2
 8008aae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008ab0:	88fa      	ldrh	r2, [r7, #6]
 8008ab2:	8b3b      	ldrh	r3, [r7, #24]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <pbuf_copy_partial+0xca>
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1c4      	bne.n	8008a58 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008ace:	8afb      	ldrh	r3, [r7, #22]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	08013380 	.word	0x08013380
 8008adc:	080136c8 	.word	0x080136c8
 8008ae0:	080133e0 	.word	0x080133e0
 8008ae4:	080136e8 	.word	0x080136e8

08008ae8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	603a      	str	r2, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
 8008af4:	460b      	mov	r3, r1
 8008af6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	8919      	ldrh	r1, [r3, #8]
 8008afc:	88ba      	ldrh	r2, [r7, #4]
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff faa1 	bl	8008048 <pbuf_alloc>
 8008b06:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <pbuf_clone+0x2a>
    return NULL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e011      	b.n	8008b36 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff fea3 	bl	8008860 <pbuf_copy>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008b1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d006      	beq.n	8008b34 <pbuf_clone+0x4c>
 8008b26:	4b06      	ldr	r3, [pc, #24]	@ (8008b40 <pbuf_clone+0x58>)
 8008b28:	f240 5224 	movw	r2, #1316	@ 0x524
 8008b2c:	4905      	ldr	r1, [pc, #20]	@ (8008b44 <pbuf_clone+0x5c>)
 8008b2e:	4806      	ldr	r0, [pc, #24]	@ (8008b48 <pbuf_clone+0x60>)
 8008b30:	f008 ffec 	bl	8011b0c <iprintf>
  return q;
 8008b34:	68fb      	ldr	r3, [r7, #12]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	08013380 	.word	0x08013380
 8008b44:	080137f4 	.word	0x080137f4
 8008b48:	080133e0 	.word	0x080133e0

08008b4c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008b50:	f008 fedc 	bl	801190c <rand>
 8008b54:	4603      	mov	r3, r0
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	4b01      	ldr	r3, [pc, #4]	@ (8008b6c <tcp_init+0x20>)
 8008b66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008b68:	bf00      	nop
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000064 	.word	0x20000064

08008b70 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	7d1b      	ldrb	r3, [r3, #20]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d105      	bne.n	8008b8c <tcp_free+0x1c>
 8008b80:	4b06      	ldr	r3, [pc, #24]	@ (8008b9c <tcp_free+0x2c>)
 8008b82:	22d4      	movs	r2, #212	@ 0xd4
 8008b84:	4906      	ldr	r1, [pc, #24]	@ (8008ba0 <tcp_free+0x30>)
 8008b86:	4807      	ldr	r0, [pc, #28]	@ (8008ba4 <tcp_free+0x34>)
 8008b88:	f008 ffc0 	bl	8011b0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	2001      	movs	r0, #1
 8008b90:	f7fe fdd2 	bl	8007738 <memp_free>
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	08013880 	.word	0x08013880
 8008ba0:	080138b0 	.word	0x080138b0
 8008ba4:	080138c4 	.word	0x080138c4

08008ba8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7d1b      	ldrb	r3, [r3, #20]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d105      	bne.n	8008bc4 <tcp_free_listen+0x1c>
 8008bb8:	4b06      	ldr	r3, [pc, #24]	@ (8008bd4 <tcp_free_listen+0x2c>)
 8008bba:	22df      	movs	r2, #223	@ 0xdf
 8008bbc:	4906      	ldr	r1, [pc, #24]	@ (8008bd8 <tcp_free_listen+0x30>)
 8008bbe:	4807      	ldr	r0, [pc, #28]	@ (8008bdc <tcp_free_listen+0x34>)
 8008bc0:	f008 ffa4 	bl	8011b0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	2002      	movs	r0, #2
 8008bc8:	f7fe fdb6 	bl	8007738 <memp_free>
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	08013880 	.word	0x08013880
 8008bd8:	080138ec 	.word	0x080138ec
 8008bdc:	080138c4 	.word	0x080138c4

08008be0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008be4:	f000 fea4 	bl	8009930 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008be8:	4b07      	ldr	r3, [pc, #28]	@ (8008c08 <tcp_tmr+0x28>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	4b05      	ldr	r3, [pc, #20]	@ (8008c08 <tcp_tmr+0x28>)
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	4b04      	ldr	r3, [pc, #16]	@ (8008c08 <tcp_tmr+0x28>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008c00:	f000 fb54 	bl	80092ac <tcp_slowtmr>
  }
}
 8008c04:	bf00      	nop
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	20007fc1 	.word	0x20007fc1

08008c0c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <tcp_remove_listener+0x1c>
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <tcp_remove_listener+0x48>)
 8008c1e:	22ff      	movs	r2, #255	@ 0xff
 8008c20:	490d      	ldr	r1, [pc, #52]	@ (8008c58 <tcp_remove_listener+0x4c>)
 8008c22:	480e      	ldr	r0, [pc, #56]	@ (8008c5c <tcp_remove_listener+0x50>)
 8008c24:	f008 ff72 	bl	8011b0c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	e00a      	b.n	8008c44 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d102      	bne.n	8008c3e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f1      	bne.n	8008c2e <tcp_remove_listener+0x22>
    }
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	08013880 	.word	0x08013880
 8008c58:	08013908 	.word	0x08013908
 8008c5c:	080138c4 	.word	0x080138c4

08008c60 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <tcp_listen_closed+0x1c>
 8008c6e:	4b14      	ldr	r3, [pc, #80]	@ (8008cc0 <tcp_listen_closed+0x60>)
 8008c70:	f240 1211 	movw	r2, #273	@ 0x111
 8008c74:	4913      	ldr	r1, [pc, #76]	@ (8008cc4 <tcp_listen_closed+0x64>)
 8008c76:	4814      	ldr	r0, [pc, #80]	@ (8008cc8 <tcp_listen_closed+0x68>)
 8008c78:	f008 ff48 	bl	8011b0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7d1b      	ldrb	r3, [r3, #20]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d006      	beq.n	8008c92 <tcp_listen_closed+0x32>
 8008c84:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc0 <tcp_listen_closed+0x60>)
 8008c86:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008c8a:	4910      	ldr	r1, [pc, #64]	@ (8008ccc <tcp_listen_closed+0x6c>)
 8008c8c:	480e      	ldr	r0, [pc, #56]	@ (8008cc8 <tcp_listen_closed+0x68>)
 8008c8e:	f008 ff3d 	bl	8011b0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c92:	2301      	movs	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e00b      	b.n	8008cb0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008c98:	4a0d      	ldr	r2, [pc, #52]	@ (8008cd0 <tcp_listen_closed+0x70>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff ffb1 	bl	8008c0c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d9f0      	bls.n	8008c98 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	08013880 	.word	0x08013880
 8008cc4:	08013930 	.word	0x08013930
 8008cc8:	080138c4 	.word	0x080138c4
 8008ccc:	0801393c 	.word	0x0801393c
 8008cd0:	0801603c 	.word	0x0801603c

08008cd4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008cd4:	b5b0      	push	{r4, r5, r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af04      	add	r7, sp, #16
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <tcp_close_shutdown+0x20>
 8008ce6:	4b63      	ldr	r3, [pc, #396]	@ (8008e74 <tcp_close_shutdown+0x1a0>)
 8008ce8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008cec:	4962      	ldr	r1, [pc, #392]	@ (8008e78 <tcp_close_shutdown+0x1a4>)
 8008cee:	4863      	ldr	r0, [pc, #396]	@ (8008e7c <tcp_close_shutdown+0x1a8>)
 8008cf0:	f008 ff0c 	bl	8011b0c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d066      	beq.n	8008dc8 <tcp_close_shutdown+0xf4>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d003      	beq.n	8008d0a <tcp_close_shutdown+0x36>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	7d1b      	ldrb	r3, [r3, #20]
 8008d06:	2b07      	cmp	r3, #7
 8008d08:	d15e      	bne.n	8008dc8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <tcp_close_shutdown+0x48>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d16:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008d1a:	d055      	beq.n	8008dc8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8b5b      	ldrh	r3, [r3, #26]
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d106      	bne.n	8008d36 <tcp_close_shutdown+0x62>
 8008d28:	4b52      	ldr	r3, [pc, #328]	@ (8008e74 <tcp_close_shutdown+0x1a0>)
 8008d2a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008d2e:	4954      	ldr	r1, [pc, #336]	@ (8008e80 <tcp_close_shutdown+0x1ac>)
 8008d30:	4852      	ldr	r0, [pc, #328]	@ (8008e7c <tcp_close_shutdown+0x1a8>)
 8008d32:	f008 feeb 	bl	8011b0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008d3e:	687d      	ldr	r5, [r7, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3304      	adds	r3, #4
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	8ad2      	ldrh	r2, [r2, #22]
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	8b09      	ldrh	r1, [r1, #24]
 8008d4c:	9102      	str	r1, [sp, #8]
 8008d4e:	9201      	str	r2, [sp, #4]
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	462b      	mov	r3, r5
 8008d54:	4622      	mov	r2, r4
 8008d56:	4601      	mov	r1, r0
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f004 fea7 	bl	800daac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 f8c8 	bl	8009ef4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008d64:	4b47      	ldr	r3, [pc, #284]	@ (8008e84 <tcp_close_shutdown+0x1b0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d105      	bne.n	8008d7a <tcp_close_shutdown+0xa6>
 8008d6e:	4b45      	ldr	r3, [pc, #276]	@ (8008e84 <tcp_close_shutdown+0x1b0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	4a43      	ldr	r2, [pc, #268]	@ (8008e84 <tcp_close_shutdown+0x1b0>)
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	e013      	b.n	8008da2 <tcp_close_shutdown+0xce>
 8008d7a:	4b42      	ldr	r3, [pc, #264]	@ (8008e84 <tcp_close_shutdown+0x1b0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e00c      	b.n	8008d9c <tcp_close_shutdown+0xc8>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d104      	bne.n	8008d96 <tcp_close_shutdown+0xc2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	60da      	str	r2, [r3, #12]
 8008d94:	e005      	b.n	8008da2 <tcp_close_shutdown+0xce>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1ef      	bne.n	8008d82 <tcp_close_shutdown+0xae>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	60da      	str	r2, [r3, #12]
 8008da8:	4b37      	ldr	r3, [pc, #220]	@ (8008e88 <tcp_close_shutdown+0x1b4>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008dae:	4b37      	ldr	r3, [pc, #220]	@ (8008e8c <tcp_close_shutdown+0x1b8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d102      	bne.n	8008dbe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008db8:	f003 fd62 	bl	800c880 <tcp_trigger_input_pcb_close>
 8008dbc:	e002      	b.n	8008dc4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff fed6 	bl	8008b70 <tcp_free>
      }
      return ERR_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e050      	b.n	8008e6a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7d1b      	ldrb	r3, [r3, #20]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d03b      	beq.n	8008e48 <tcp_close_shutdown+0x174>
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	dc44      	bgt.n	8008e5e <tcp_close_shutdown+0x18a>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <tcp_close_shutdown+0x10a>
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d02a      	beq.n	8008e32 <tcp_close_shutdown+0x15e>
 8008ddc:	e03f      	b.n	8008e5e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	8adb      	ldrh	r3, [r3, #22]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d021      	beq.n	8008e2a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008de6:	4b2a      	ldr	r3, [pc, #168]	@ (8008e90 <tcp_close_shutdown+0x1bc>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d105      	bne.n	8008dfc <tcp_close_shutdown+0x128>
 8008df0:	4b27      	ldr	r3, [pc, #156]	@ (8008e90 <tcp_close_shutdown+0x1bc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	4a26      	ldr	r2, [pc, #152]	@ (8008e90 <tcp_close_shutdown+0x1bc>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	e013      	b.n	8008e24 <tcp_close_shutdown+0x150>
 8008dfc:	4b24      	ldr	r3, [pc, #144]	@ (8008e90 <tcp_close_shutdown+0x1bc>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60bb      	str	r3, [r7, #8]
 8008e02:	e00c      	b.n	8008e1e <tcp_close_shutdown+0x14a>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d104      	bne.n	8008e18 <tcp_close_shutdown+0x144>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	60da      	str	r2, [r3, #12]
 8008e16:	e005      	b.n	8008e24 <tcp_close_shutdown+0x150>
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1ef      	bne.n	8008e04 <tcp_close_shutdown+0x130>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fea0 	bl	8008b70 <tcp_free>
      break;
 8008e30:	e01a      	b.n	8008e68 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ff14 	bl	8008c60 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4816      	ldr	r0, [pc, #88]	@ (8008e94 <tcp_close_shutdown+0x1c0>)
 8008e3c:	f001 f8aa 	bl	8009f94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff feb1 	bl	8008ba8 <tcp_free_listen>
      break;
 8008e46:	e00f      	b.n	8008e68 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	480e      	ldr	r0, [pc, #56]	@ (8008e84 <tcp_close_shutdown+0x1b0>)
 8008e4c:	f001 f8a2 	bl	8009f94 <tcp_pcb_remove>
 8008e50:	4b0d      	ldr	r3, [pc, #52]	@ (8008e88 <tcp_close_shutdown+0x1b4>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff fe8a 	bl	8008b70 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008e5c:	e004      	b.n	8008e68 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f81a 	bl	8008e98 <tcp_close_shutdown_fin>
 8008e64:	4603      	mov	r3, r0
 8008e66:	e000      	b.n	8008e6a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bdb0      	pop	{r4, r5, r7, pc}
 8008e72:	bf00      	nop
 8008e74:	08013880 	.word	0x08013880
 8008e78:	08013954 	.word	0x08013954
 8008e7c:	080138c4 	.word	0x080138c4
 8008e80:	08013974 	.word	0x08013974
 8008e84:	20007fb8 	.word	0x20007fb8
 8008e88:	20007fc0 	.word	0x20007fc0
 8008e8c:	20007ffc 	.word	0x20007ffc
 8008e90:	20007fb0 	.word	0x20007fb0
 8008e94:	20007fb4 	.word	0x20007fb4

08008e98 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <tcp_close_shutdown_fin+0x1c>
 8008ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8008f60 <tcp_close_shutdown_fin+0xc8>)
 8008ea8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008eac:	492d      	ldr	r1, [pc, #180]	@ (8008f64 <tcp_close_shutdown_fin+0xcc>)
 8008eae:	482e      	ldr	r0, [pc, #184]	@ (8008f68 <tcp_close_shutdown_fin+0xd0>)
 8008eb0:	f008 fe2c 	bl	8011b0c <iprintf>

  switch (pcb->state) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7d1b      	ldrb	r3, [r3, #20]
 8008eb8:	2b07      	cmp	r3, #7
 8008eba:	d020      	beq.n	8008efe <tcp_close_shutdown_fin+0x66>
 8008ebc:	2b07      	cmp	r3, #7
 8008ebe:	dc2b      	bgt.n	8008f18 <tcp_close_shutdown_fin+0x80>
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d002      	beq.n	8008eca <tcp_close_shutdown_fin+0x32>
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d00d      	beq.n	8008ee4 <tcp_close_shutdown_fin+0x4c>
 8008ec8:	e026      	b.n	8008f18 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f003 fef0 	bl	800ccb0 <tcp_send_fin>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d11f      	bne.n	8008f1c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2205      	movs	r2, #5
 8008ee0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ee2:	e01b      	b.n	8008f1c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f003 fee3 	bl	800ccb0 <tcp_send_fin>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d114      	bne.n	8008f20 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2205      	movs	r2, #5
 8008efa:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008efc:	e010      	b.n	8008f20 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f003 fed6 	bl	800ccb0 <tcp_send_fin>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2209      	movs	r2, #9
 8008f14:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f16:	e005      	b.n	8008f24 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e01c      	b.n	8008f56 <tcp_close_shutdown_fin+0xbe>
      break;
 8008f1c:	bf00      	nop
 8008f1e:	e002      	b.n	8008f26 <tcp_close_shutdown_fin+0x8e>
      break;
 8008f20:	bf00      	nop
 8008f22:	e000      	b.n	8008f26 <tcp_close_shutdown_fin+0x8e>
      break;
 8008f24:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f003 fffc 	bl	800cf2c <tcp_output>
 8008f34:	e00d      	b.n	8008f52 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f3e:	d108      	bne.n	8008f52 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	8b5b      	ldrh	r3, [r3, #26]
 8008f44:	f043 0308 	orr.w	r3, r3, #8
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e001      	b.n	8008f56 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	08013880 	.word	0x08013880
 8008f64:	08013930 	.word	0x08013930
 8008f68:	080138c4 	.word	0x080138c4

08008f6c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <tcp_close+0x22>
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fb8 <tcp_close+0x4c>)
 8008f7c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008f80:	490e      	ldr	r1, [pc, #56]	@ (8008fbc <tcp_close+0x50>)
 8008f82:	480f      	ldr	r0, [pc, #60]	@ (8008fc0 <tcp_close+0x54>)
 8008f84:	f008 fdc2 	bl	8011b0c <iprintf>
 8008f88:	f06f 030f 	mvn.w	r3, #15
 8008f8c:	e00f      	b.n	8008fae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	7d1b      	ldrb	r3, [r3, #20]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d006      	beq.n	8008fa4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	8b5b      	ldrh	r3, [r3, #26]
 8008f9a:	f043 0310 	orr.w	r3, r3, #16
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff fe94 	bl	8008cd4 <tcp_close_shutdown>
 8008fac:	4603      	mov	r3, r0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	08013880 	.word	0x08013880
 8008fbc:	08013990 	.word	0x08013990
 8008fc0:	080138c4 	.word	0x080138c4

08008fc4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08e      	sub	sp, #56	@ 0x38
 8008fc8:	af04      	add	r7, sp, #16
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d107      	bne.n	8008fe4 <tcp_abandon+0x20>
 8008fd4:	4b52      	ldr	r3, [pc, #328]	@ (8009120 <tcp_abandon+0x15c>)
 8008fd6:	f240 223d 	movw	r2, #573	@ 0x23d
 8008fda:	4952      	ldr	r1, [pc, #328]	@ (8009124 <tcp_abandon+0x160>)
 8008fdc:	4852      	ldr	r0, [pc, #328]	@ (8009128 <tcp_abandon+0x164>)
 8008fde:	f008 fd95 	bl	8011b0c <iprintf>
 8008fe2:	e099      	b.n	8009118 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7d1b      	ldrb	r3, [r3, #20]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d106      	bne.n	8008ffa <tcp_abandon+0x36>
 8008fec:	4b4c      	ldr	r3, [pc, #304]	@ (8009120 <tcp_abandon+0x15c>)
 8008fee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008ff2:	494e      	ldr	r1, [pc, #312]	@ (800912c <tcp_abandon+0x168>)
 8008ff4:	484c      	ldr	r0, [pc, #304]	@ (8009128 <tcp_abandon+0x164>)
 8008ff6:	f008 fd89 	bl	8011b0c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7d1b      	ldrb	r3, [r3, #20]
 8008ffe:	2b0a      	cmp	r3, #10
 8009000:	d107      	bne.n	8009012 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	484a      	ldr	r0, [pc, #296]	@ (8009130 <tcp_abandon+0x16c>)
 8009006:	f000 ffc5 	bl	8009f94 <tcp_pcb_remove>
    tcp_free(pcb);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff fdb0 	bl	8008b70 <tcp_free>
 8009010:	e082      	b.n	8009118 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800901e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009024:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800902c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7d1b      	ldrb	r3, [r3, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d126      	bne.n	800908a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	8adb      	ldrh	r3, [r3, #22]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d02e      	beq.n	80090a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009044:	4b3b      	ldr	r3, [pc, #236]	@ (8009134 <tcp_abandon+0x170>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	429a      	cmp	r2, r3
 800904c:	d105      	bne.n	800905a <tcp_abandon+0x96>
 800904e:	4b39      	ldr	r3, [pc, #228]	@ (8009134 <tcp_abandon+0x170>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	4a37      	ldr	r2, [pc, #220]	@ (8009134 <tcp_abandon+0x170>)
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e013      	b.n	8009082 <tcp_abandon+0xbe>
 800905a:	4b36      	ldr	r3, [pc, #216]	@ (8009134 <tcp_abandon+0x170>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	e00c      	b.n	800907c <tcp_abandon+0xb8>
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d104      	bne.n	8009076 <tcp_abandon+0xb2>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	60da      	str	r2, [r3, #12]
 8009074:	e005      	b.n	8009082 <tcp_abandon+0xbe>
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1ef      	bne.n	8009062 <tcp_abandon+0x9e>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	60da      	str	r2, [r3, #12]
 8009088:	e00b      	b.n	80090a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	8adb      	ldrh	r3, [r3, #22]
 8009092:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4828      	ldr	r0, [pc, #160]	@ (8009138 <tcp_abandon+0x174>)
 8009098:	f000 ff7c 	bl	8009f94 <tcp_pcb_remove>
 800909c:	4b27      	ldr	r3, [pc, #156]	@ (800913c <tcp_abandon+0x178>)
 800909e:	2201      	movs	r2, #1
 80090a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fd1e 	bl	8009af0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d004      	beq.n	80090c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fd15 	bl	8009af0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fd0c 	bl	8009af0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3304      	adds	r3, #4
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	8b12      	ldrh	r2, [r2, #24]
 80090e8:	9202      	str	r2, [sp, #8]
 80090ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	460b      	mov	r3, r1
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	69b9      	ldr	r1, [r7, #24]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f004 fcd8 	bl	800daac <tcp_rst>
    }
    last_state = pcb->state;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7d1b      	ldrb	r3, [r3, #20]
 8009100:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fd34 	bl	8008b70 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d004      	beq.n	8009118 <tcp_abandon+0x154>
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f06f 010c 	mvn.w	r1, #12
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	4798      	blx	r3
  }
}
 8009118:	3728      	adds	r7, #40	@ 0x28
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	08013880 	.word	0x08013880
 8009124:	080139c4 	.word	0x080139c4
 8009128:	080138c4 	.word	0x080138c4
 800912c:	080139e0 	.word	0x080139e0
 8009130:	20007fbc 	.word	0x20007fbc
 8009134:	20007fb0 	.word	0x20007fb0
 8009138:	20007fb8 	.word	0x20007fb8
 800913c:	20007fc0 	.word	0x20007fc0

08009140 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009148:	2101      	movs	r1, #1
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff ff3a 	bl	8008fc4 <tcp_abandon>
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d106      	bne.n	8009174 <tcp_update_rcv_ann_wnd+0x1c>
 8009166:	4b25      	ldr	r3, [pc, #148]	@ (80091fc <tcp_update_rcv_ann_wnd+0xa4>)
 8009168:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800916c:	4924      	ldr	r1, [pc, #144]	@ (8009200 <tcp_update_rcv_ann_wnd+0xa8>)
 800916e:	4825      	ldr	r0, [pc, #148]	@ (8009204 <tcp_update_rcv_ann_wnd+0xac>)
 8009170:	f008 fccc 	bl	8011b0c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800917c:	4413      	add	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009188:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800918c:	bf28      	it	cs
 800918e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8009192:	b292      	uxth	r2, r2
 8009194:	4413      	add	r3, r2
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	db08      	blt.n	80091b0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	e020      	b.n	80091f2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd03      	ble.n	80091c6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091c4:	e014      	b.n	80091f0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091d8:	d306      	bcc.n	80091e8 <tcp_update_rcv_ann_wnd+0x90>
 80091da:	4b08      	ldr	r3, [pc, #32]	@ (80091fc <tcp_update_rcv_ann_wnd+0xa4>)
 80091dc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80091e0:	4909      	ldr	r1, [pc, #36]	@ (8009208 <tcp_update_rcv_ann_wnd+0xb0>)
 80091e2:	4808      	ldr	r0, [pc, #32]	@ (8009204 <tcp_update_rcv_ann_wnd+0xac>)
 80091e4:	f008 fc92 	bl	8011b0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80091f0:	2300      	movs	r3, #0
  }
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	08013880 	.word	0x08013880
 8009200:	08013adc 	.word	0x08013adc
 8009204:	080138c4 	.word	0x080138c4
 8009208:	08013b00 	.word	0x08013b00

0800920c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d107      	bne.n	800922e <tcp_recved+0x22>
 800921e:	4b1f      	ldr	r3, [pc, #124]	@ (800929c <tcp_recved+0x90>)
 8009220:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009224:	491e      	ldr	r1, [pc, #120]	@ (80092a0 <tcp_recved+0x94>)
 8009226:	481f      	ldr	r0, [pc, #124]	@ (80092a4 <tcp_recved+0x98>)
 8009228:	f008 fc70 	bl	8011b0c <iprintf>
 800922c:	e032      	b.n	8009294 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7d1b      	ldrb	r3, [r3, #20]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d106      	bne.n	8009244 <tcp_recved+0x38>
 8009236:	4b19      	ldr	r3, [pc, #100]	@ (800929c <tcp_recved+0x90>)
 8009238:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800923c:	491a      	ldr	r1, [pc, #104]	@ (80092a8 <tcp_recved+0x9c>)
 800923e:	4819      	ldr	r0, [pc, #100]	@ (80092a4 <tcp_recved+0x98>)
 8009240:	f008 fc64 	bl	8011b0c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009248:	887b      	ldrh	r3, [r7, #2]
 800924a:	4413      	add	r3, r2
 800924c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800924e:	89fb      	ldrh	r3, [r7, #14]
 8009250:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009254:	d804      	bhi.n	8009260 <tcp_recved+0x54>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800925a:	89fa      	ldrh	r2, [r7, #14]
 800925c:	429a      	cmp	r2, r3
 800925e:	d204      	bcs.n	800926a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009266:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009268:	e002      	b.n	8009270 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	89fa      	ldrh	r2, [r7, #14]
 800926e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff ff71 	bl	8009158 <tcp_update_rcv_ann_wnd>
 8009276:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800927e:	d309      	bcc.n	8009294 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	8b5b      	ldrh	r3, [r3, #26]
 8009284:	f043 0302 	orr.w	r3, r3, #2
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f003 fe4c 	bl	800cf2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	08013880 	.word	0x08013880
 80092a0:	08013b1c 	.word	0x08013b1c
 80092a4:	080138c4 	.word	0x080138c4
 80092a8:	08013b34 	.word	0x08013b34

080092ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80092ac:	b5b0      	push	{r4, r5, r7, lr}
 80092ae:	b090      	sub	sp, #64	@ 0x40
 80092b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80092b8:	4b95      	ldr	r3, [pc, #596]	@ (8009510 <tcp_slowtmr+0x264>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3301      	adds	r3, #1
 80092be:	4a94      	ldr	r2, [pc, #592]	@ (8009510 <tcp_slowtmr+0x264>)
 80092c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80092c2:	4b94      	ldr	r3, [pc, #592]	@ (8009514 <tcp_slowtmr+0x268>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	3301      	adds	r3, #1
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	4b92      	ldr	r3, [pc, #584]	@ (8009514 <tcp_slowtmr+0x268>)
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	e000      	b.n	80092d2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80092d0:	bf00      	nop
  prev = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80092d6:	4b90      	ldr	r3, [pc, #576]	@ (8009518 <tcp_slowtmr+0x26c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80092dc:	e29d      	b.n	800981a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80092de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e0:	7d1b      	ldrb	r3, [r3, #20]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <tcp_slowtmr+0x48>
 80092e6:	4b8d      	ldr	r3, [pc, #564]	@ (800951c <tcp_slowtmr+0x270>)
 80092e8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80092ec:	498c      	ldr	r1, [pc, #560]	@ (8009520 <tcp_slowtmr+0x274>)
 80092ee:	488d      	ldr	r0, [pc, #564]	@ (8009524 <tcp_slowtmr+0x278>)
 80092f0:	f008 fc0c 	bl	8011b0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	7d1b      	ldrb	r3, [r3, #20]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d106      	bne.n	800930a <tcp_slowtmr+0x5e>
 80092fc:	4b87      	ldr	r3, [pc, #540]	@ (800951c <tcp_slowtmr+0x270>)
 80092fe:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009302:	4989      	ldr	r1, [pc, #548]	@ (8009528 <tcp_slowtmr+0x27c>)
 8009304:	4887      	ldr	r0, [pc, #540]	@ (8009524 <tcp_slowtmr+0x278>)
 8009306:	f008 fc01 	bl	8011b0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800930a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930c:	7d1b      	ldrb	r3, [r3, #20]
 800930e:	2b0a      	cmp	r3, #10
 8009310:	d106      	bne.n	8009320 <tcp_slowtmr+0x74>
 8009312:	4b82      	ldr	r3, [pc, #520]	@ (800951c <tcp_slowtmr+0x270>)
 8009314:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009318:	4984      	ldr	r1, [pc, #528]	@ (800952c <tcp_slowtmr+0x280>)
 800931a:	4882      	ldr	r0, [pc, #520]	@ (8009524 <tcp_slowtmr+0x278>)
 800931c:	f008 fbf6 	bl	8011b0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	7f9a      	ldrb	r2, [r3, #30]
 8009324:	4b7b      	ldr	r3, [pc, #492]	@ (8009514 <tcp_slowtmr+0x268>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d105      	bne.n	8009338 <tcp_slowtmr+0x8c>
      prev = pcb;
 800932c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009336:	e270      	b.n	800981a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8009338:	4b76      	ldr	r3, [pc, #472]	@ (8009514 <tcp_slowtmr+0x268>)
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800934c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934e:	7d1b      	ldrb	r3, [r3, #20]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d10a      	bne.n	800936a <tcp_slowtmr+0xbe>
 8009354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800935a:	2b05      	cmp	r3, #5
 800935c:	d905      	bls.n	800936a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800935e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009362:	3301      	adds	r3, #1
 8009364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8009368:	e11e      	b.n	80095a8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800936a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009370:	2b0b      	cmp	r3, #11
 8009372:	d905      	bls.n	8009380 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009378:	3301      	adds	r3, #1
 800937a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800937e:	e113      	b.n	80095a8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009386:	2b00      	cmp	r3, #0
 8009388:	d075      	beq.n	8009476 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800938a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800938e:	2b00      	cmp	r3, #0
 8009390:	d006      	beq.n	80093a0 <tcp_slowtmr+0xf4>
 8009392:	4b62      	ldr	r3, [pc, #392]	@ (800951c <tcp_slowtmr+0x270>)
 8009394:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009398:	4965      	ldr	r1, [pc, #404]	@ (8009530 <tcp_slowtmr+0x284>)
 800939a:	4862      	ldr	r0, [pc, #392]	@ (8009524 <tcp_slowtmr+0x278>)
 800939c:	f008 fbb6 	bl	8011b0c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80093a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <tcp_slowtmr+0x10a>
 80093a8:	4b5c      	ldr	r3, [pc, #368]	@ (800951c <tcp_slowtmr+0x270>)
 80093aa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80093ae:	4961      	ldr	r1, [pc, #388]	@ (8009534 <tcp_slowtmr+0x288>)
 80093b0:	485c      	ldr	r0, [pc, #368]	@ (8009524 <tcp_slowtmr+0x278>)
 80093b2:	f008 fbab 	bl	8011b0c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80093b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80093bc:	2b0b      	cmp	r3, #11
 80093be:	d905      	bls.n	80093cc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80093c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093c4:	3301      	adds	r3, #1
 80093c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80093ca:	e0ed      	b.n	80095a8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80093cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80093d2:	3b01      	subs	r3, #1
 80093d4:	4a58      	ldr	r2, [pc, #352]	@ (8009538 <tcp_slowtmr+0x28c>)
 80093d6:	5cd3      	ldrb	r3, [r2, r3]
 80093d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80093da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093e0:	7c7a      	ldrb	r2, [r7, #17]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d907      	bls.n	80093f6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093ec:	3301      	adds	r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80093f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093fc:	7c7a      	ldrb	r2, [r7, #17]
 80093fe:	429a      	cmp	r2, r3
 8009400:	f200 80d2 	bhi.w	80095a8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009404:	2301      	movs	r3, #1
 8009406:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800940e:	2b00      	cmp	r3, #0
 8009410:	d108      	bne.n	8009424 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009412:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009414:	f004 fc3e 	bl	800dc94 <tcp_zero_window_probe>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d014      	beq.n	8009448 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800941e:	2300      	movs	r3, #0
 8009420:	623b      	str	r3, [r7, #32]
 8009422:	e011      	b.n	8009448 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800942a:	4619      	mov	r1, r3
 800942c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800942e:	f003 faf3 	bl	800ca18 <tcp_split_unsent_seg>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d107      	bne.n	8009448 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009438:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800943a:	f003 fd77 	bl	800cf2c <tcp_output>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80ac 	beq.w	80095a8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800945e:	2b06      	cmp	r3, #6
 8009460:	f200 80a2 	bhi.w	80095a8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009466:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800946a:	3301      	adds	r3, #1
 800946c:	b2da      	uxtb	r2, r3
 800946e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009470:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009474:	e098      	b.n	80095a8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800947c:	2b00      	cmp	r3, #0
 800947e:	db0f      	blt.n	80094a0 <tcp_slowtmr+0x1f4>
 8009480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009482:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009486:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800948a:	4293      	cmp	r3, r2
 800948c:	d008      	beq.n	80094a0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009494:	b29b      	uxth	r3, r3
 8009496:	3301      	adds	r3, #1
 8009498:	b29b      	uxth	r3, r3
 800949a:	b21a      	sxth	r2, r3
 800949c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80094a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80094a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80094ac:	429a      	cmp	r2, r3
 80094ae:	db7b      	blt.n	80095a8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80094b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094b2:	f004 f831 	bl	800d518 <tcp_rexmit_rto_prepare>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <tcp_slowtmr+0x220>
 80094bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d171      	bne.n	80095a8 <tcp_slowtmr+0x2fc>
 80094c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d06d      	beq.n	80095a8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80094cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ce:	7d1b      	ldrb	r3, [r3, #20]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d03a      	beq.n	800954a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80094d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094da:	2b0c      	cmp	r3, #12
 80094dc:	bf28      	it	cs
 80094de:	230c      	movcs	r3, #12
 80094e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80094e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80094e8:	10db      	asrs	r3, r3, #3
 80094ea:	b21b      	sxth	r3, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80094f4:	4413      	add	r3, r2
 80094f6:	7efa      	ldrb	r2, [r7, #27]
 80094f8:	4910      	ldr	r1, [pc, #64]	@ (800953c <tcp_slowtmr+0x290>)
 80094fa:	5c8a      	ldrb	r2, [r1, r2]
 80094fc:	4093      	lsls	r3, r2
 80094fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8009506:	4293      	cmp	r3, r2
 8009508:	dc1a      	bgt.n	8009540 <tcp_slowtmr+0x294>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	b21a      	sxth	r2, r3
 800950e:	e019      	b.n	8009544 <tcp_slowtmr+0x298>
 8009510:	20007fac 	.word	0x20007fac
 8009514:	20007fc2 	.word	0x20007fc2
 8009518:	20007fb8 	.word	0x20007fb8
 800951c:	08013880 	.word	0x08013880
 8009520:	08013bc4 	.word	0x08013bc4
 8009524:	080138c4 	.word	0x080138c4
 8009528:	08013bf0 	.word	0x08013bf0
 800952c:	08013c1c 	.word	0x08013c1c
 8009530:	08013c4c 	.word	0x08013c4c
 8009534:	08013c80 	.word	0x08013c80
 8009538:	08016034 	.word	0x08016034
 800953c:	08016024 	.word	0x08016024
 8009540:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009546:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800954a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954c:	2200      	movs	r2, #0
 800954e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800955c:	4293      	cmp	r3, r2
 800955e:	bf28      	it	cs
 8009560:	4613      	movcs	r3, r2
 8009562:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009564:	8a7b      	ldrh	r3, [r7, #18]
 8009566:	085b      	lsrs	r3, r3, #1
 8009568:	b29a      	uxth	r2, r3
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009572:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009578:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	b29b      	uxth	r3, r3
 800957e:	429a      	cmp	r2, r3
 8009580:	d206      	bcs.n	8009590 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009584:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009592:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009596:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800959a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959c:	2200      	movs	r2, #0
 800959e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80095a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095a4:	f004 f832 	bl	800d60c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80095a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095aa:	7d1b      	ldrb	r3, [r3, #20]
 80095ac:	2b06      	cmp	r3, #6
 80095ae:	d111      	bne.n	80095d4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80095b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b2:	8b5b      	ldrh	r3, [r3, #26]
 80095b4:	f003 0310 	and.w	r3, r3, #16
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095bc:	4b9c      	ldr	r3, [pc, #624]	@ (8009830 <tcp_slowtmr+0x584>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b28      	cmp	r3, #40	@ 0x28
 80095c8:	d904      	bls.n	80095d4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80095ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095ce:	3301      	adds	r3, #1
 80095d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d6:	7a5b      	ldrb	r3, [r3, #9]
 80095d8:	f003 0308 	and.w	r3, r3, #8
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d04a      	beq.n	8009676 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095e4:	2b04      	cmp	r3, #4
 80095e6:	d003      	beq.n	80095f0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	d142      	bne.n	8009676 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095f0:	4b8f      	ldr	r3, [pc, #572]	@ (8009830 <tcp_slowtmr+0x584>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80095fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009600:	4b8c      	ldr	r3, [pc, #560]	@ (8009834 <tcp_slowtmr+0x588>)
 8009602:	440b      	add	r3, r1
 8009604:	498c      	ldr	r1, [pc, #560]	@ (8009838 <tcp_slowtmr+0x58c>)
 8009606:	fba1 1303 	umull	r1, r3, r1, r3
 800960a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800960c:	429a      	cmp	r2, r3
 800960e:	d90a      	bls.n	8009626 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8009610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009614:	3301      	adds	r3, #1
 8009616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800961a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800961e:	3301      	adds	r3, #1
 8009620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009624:	e027      	b.n	8009676 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009626:	4b82      	ldr	r3, [pc, #520]	@ (8009830 <tcp_slowtmr+0x584>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009632:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009638:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800963c:	4618      	mov	r0, r3
 800963e:	4b7f      	ldr	r3, [pc, #508]	@ (800983c <tcp_slowtmr+0x590>)
 8009640:	fb00 f303 	mul.w	r3, r0, r3
 8009644:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009646:	497c      	ldr	r1, [pc, #496]	@ (8009838 <tcp_slowtmr+0x58c>)
 8009648:	fba1 1303 	umull	r1, r3, r1, r3
 800964c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800964e:	429a      	cmp	r2, r3
 8009650:	d911      	bls.n	8009676 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009654:	f004 fade 	bl	800dc14 <tcp_keepalive>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800965e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009668:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800966c:	3301      	adds	r3, #1
 800966e:	b2da      	uxtb	r2, r3
 8009670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009672:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800967a:	2b00      	cmp	r3, #0
 800967c:	d011      	beq.n	80096a2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800967e:	4b6c      	ldr	r3, [pc, #432]	@ (8009830 <tcp_slowtmr+0x584>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800968e:	4619      	mov	r1, r3
 8009690:	460b      	mov	r3, r1
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	440b      	add	r3, r1
 8009696:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009698:	429a      	cmp	r2, r3
 800969a:	d302      	bcc.n	80096a2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800969c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800969e:	f000 fde3 	bl	800a268 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80096a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a4:	7d1b      	ldrb	r3, [r3, #20]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d10b      	bne.n	80096c2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096aa:	4b61      	ldr	r3, [pc, #388]	@ (8009830 <tcp_slowtmr+0x584>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b28      	cmp	r3, #40	@ 0x28
 80096b6:	d904      	bls.n	80096c2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80096b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096bc:	3301      	adds	r3, #1
 80096be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80096c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c4:	7d1b      	ldrb	r3, [r3, #20]
 80096c6:	2b09      	cmp	r3, #9
 80096c8:	d10b      	bne.n	80096e2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096ca:	4b59      	ldr	r3, [pc, #356]	@ (8009830 <tcp_slowtmr+0x584>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2bf0      	cmp	r3, #240	@ 0xf0
 80096d6:	d904      	bls.n	80096e2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80096d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096dc:	3301      	adds	r3, #1
 80096de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80096e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d060      	beq.n	80097ac <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80096ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80096f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096f4:	f000 fbfe 	bl	8009ef4 <tcp_pcb_purge>
      if (prev != NULL) {
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d010      	beq.n	8009720 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80096fe:	4b50      	ldr	r3, [pc, #320]	@ (8009840 <tcp_slowtmr+0x594>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009704:	429a      	cmp	r2, r3
 8009706:	d106      	bne.n	8009716 <tcp_slowtmr+0x46a>
 8009708:	4b4e      	ldr	r3, [pc, #312]	@ (8009844 <tcp_slowtmr+0x598>)
 800970a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800970e:	494e      	ldr	r1, [pc, #312]	@ (8009848 <tcp_slowtmr+0x59c>)
 8009710:	484e      	ldr	r0, [pc, #312]	@ (800984c <tcp_slowtmr+0x5a0>)
 8009712:	f008 f9fb 	bl	8011b0c <iprintf>
        prev->next = pcb->next;
 8009716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	60da      	str	r2, [r3, #12]
 800971e:	e00f      	b.n	8009740 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009720:	4b47      	ldr	r3, [pc, #284]	@ (8009840 <tcp_slowtmr+0x594>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009726:	429a      	cmp	r2, r3
 8009728:	d006      	beq.n	8009738 <tcp_slowtmr+0x48c>
 800972a:	4b46      	ldr	r3, [pc, #280]	@ (8009844 <tcp_slowtmr+0x598>)
 800972c:	f240 5271 	movw	r2, #1393	@ 0x571
 8009730:	4947      	ldr	r1, [pc, #284]	@ (8009850 <tcp_slowtmr+0x5a4>)
 8009732:	4846      	ldr	r0, [pc, #280]	@ (800984c <tcp_slowtmr+0x5a0>)
 8009734:	f008 f9ea 	bl	8011b0c <iprintf>
        tcp_active_pcbs = pcb->next;
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	4a40      	ldr	r2, [pc, #256]	@ (8009840 <tcp_slowtmr+0x594>)
 800973e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009744:	2b00      	cmp	r3, #0
 8009746:	d013      	beq.n	8009770 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009750:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	3304      	adds	r3, #4
 8009756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009758:	8ad2      	ldrh	r2, [r2, #22]
 800975a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800975c:	8b09      	ldrh	r1, [r1, #24]
 800975e:	9102      	str	r1, [sp, #8]
 8009760:	9201      	str	r2, [sp, #4]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	462b      	mov	r3, r5
 8009766:	4622      	mov	r2, r4
 8009768:	4601      	mov	r1, r0
 800976a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800976c:	f004 f99e 	bl	800daac <tcp_rst>
      err_arg = pcb->callback_arg;
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	7d1b      	ldrb	r3, [r3, #20]
 800977a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009786:	6838      	ldr	r0, [r7, #0]
 8009788:	f7ff f9f2 	bl	8008b70 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800978c:	4b31      	ldr	r3, [pc, #196]	@ (8009854 <tcp_slowtmr+0x5a8>)
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <tcp_slowtmr+0x4f6>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f06f 010c 	mvn.w	r1, #12
 800979e:	68b8      	ldr	r0, [r7, #8]
 80097a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80097a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009854 <tcp_slowtmr+0x5a8>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d037      	beq.n	800981a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80097aa:	e592      	b.n	80092d2 <tcp_slowtmr+0x26>
      prev = pcb;
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80097b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	7f1b      	ldrb	r3, [r3, #28]
 80097ba:	3301      	adds	r3, #1
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80097c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c4:	7f1a      	ldrb	r2, [r3, #28]
 80097c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c8:	7f5b      	ldrb	r3, [r3, #29]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d325      	bcc.n	800981a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80097ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d0:	2200      	movs	r2, #0
 80097d2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80097d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009854 <tcp_slowtmr+0x5a8>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80097da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <tcp_slowtmr+0x550>
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ec:	6912      	ldr	r2, [r2, #16]
 80097ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80097fa:	e002      	b.n	8009802 <tcp_slowtmr+0x556>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009802:	4b14      	ldr	r3, [pc, #80]	@ (8009854 <tcp_slowtmr+0x5a8>)
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f47f ad62 	bne.w	80092d0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800980c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009810:	2b00      	cmp	r3, #0
 8009812:	d102      	bne.n	800981a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009816:	f003 fb89 	bl	800cf2c <tcp_output>
  while (pcb != NULL) {
 800981a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981c:	2b00      	cmp	r3, #0
 800981e:	f47f ad5e 	bne.w	80092de <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8009826:	4b0c      	ldr	r3, [pc, #48]	@ (8009858 <tcp_slowtmr+0x5ac>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800982c:	e069      	b.n	8009902 <tcp_slowtmr+0x656>
 800982e:	bf00      	nop
 8009830:	20007fac 	.word	0x20007fac
 8009834:	000a4cb8 	.word	0x000a4cb8
 8009838:	10624dd3 	.word	0x10624dd3
 800983c:	000124f8 	.word	0x000124f8
 8009840:	20007fb8 	.word	0x20007fb8
 8009844:	08013880 	.word	0x08013880
 8009848:	08013cb8 	.word	0x08013cb8
 800984c:	080138c4 	.word	0x080138c4
 8009850:	08013ce4 	.word	0x08013ce4
 8009854:	20007fc0 	.word	0x20007fc0
 8009858:	20007fbc 	.word	0x20007fbc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985e:	7d1b      	ldrb	r3, [r3, #20]
 8009860:	2b0a      	cmp	r3, #10
 8009862:	d006      	beq.n	8009872 <tcp_slowtmr+0x5c6>
 8009864:	4b2b      	ldr	r3, [pc, #172]	@ (8009914 <tcp_slowtmr+0x668>)
 8009866:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800986a:	492b      	ldr	r1, [pc, #172]	@ (8009918 <tcp_slowtmr+0x66c>)
 800986c:	482b      	ldr	r0, [pc, #172]	@ (800991c <tcp_slowtmr+0x670>)
 800986e:	f008 f94d 	bl	8011b0c <iprintf>
    pcb_remove = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009878:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <tcp_slowtmr+0x674>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2bf0      	cmp	r3, #240	@ 0xf0
 8009884:	d904      	bls.n	8009890 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800988a:	3301      	adds	r3, #1
 800988c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009894:	2b00      	cmp	r3, #0
 8009896:	d02f      	beq.n	80098f8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009898:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800989a:	f000 fb2b 	bl	8009ef4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d010      	beq.n	80098c6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80098a4:	4b1f      	ldr	r3, [pc, #124]	@ (8009924 <tcp_slowtmr+0x678>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d106      	bne.n	80098bc <tcp_slowtmr+0x610>
 80098ae:	4b19      	ldr	r3, [pc, #100]	@ (8009914 <tcp_slowtmr+0x668>)
 80098b0:	f240 52af 	movw	r2, #1455	@ 0x5af
 80098b4:	491c      	ldr	r1, [pc, #112]	@ (8009928 <tcp_slowtmr+0x67c>)
 80098b6:	4819      	ldr	r0, [pc, #100]	@ (800991c <tcp_slowtmr+0x670>)
 80098b8:	f008 f928 	bl	8011b0c <iprintf>
        prev->next = pcb->next;
 80098bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c2:	60da      	str	r2, [r3, #12]
 80098c4:	e00f      	b.n	80098e6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80098c6:	4b17      	ldr	r3, [pc, #92]	@ (8009924 <tcp_slowtmr+0x678>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d006      	beq.n	80098de <tcp_slowtmr+0x632>
 80098d0:	4b10      	ldr	r3, [pc, #64]	@ (8009914 <tcp_slowtmr+0x668>)
 80098d2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80098d6:	4915      	ldr	r1, [pc, #84]	@ (800992c <tcp_slowtmr+0x680>)
 80098d8:	4810      	ldr	r0, [pc, #64]	@ (800991c <tcp_slowtmr+0x670>)
 80098da:	f008 f917 	bl	8011b0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	4a10      	ldr	r2, [pc, #64]	@ (8009924 <tcp_slowtmr+0x678>)
 80098e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80098ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80098f0:	69f8      	ldr	r0, [r7, #28]
 80098f2:	f7ff f93d 	bl	8008b70 <tcp_free>
 80098f6:	e004      	b.n	8009902 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80098f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80098fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1a9      	bne.n	800985c <tcp_slowtmr+0x5b0>
    }
  }
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	3730      	adds	r7, #48	@ 0x30
 800990e:	46bd      	mov	sp, r7
 8009910:	bdb0      	pop	{r4, r5, r7, pc}
 8009912:	bf00      	nop
 8009914:	08013880 	.word	0x08013880
 8009918:	08013d10 	.word	0x08013d10
 800991c:	080138c4 	.word	0x080138c4
 8009920:	20007fac 	.word	0x20007fac
 8009924:	20007fbc 	.word	0x20007fbc
 8009928:	08013d40 	.word	0x08013d40
 800992c:	08013d68 	.word	0x08013d68

08009930 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009936:	4b2d      	ldr	r3, [pc, #180]	@ (80099ec <tcp_fasttmr+0xbc>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	3301      	adds	r3, #1
 800993c:	b2da      	uxtb	r2, r3
 800993e:	4b2b      	ldr	r3, [pc, #172]	@ (80099ec <tcp_fasttmr+0xbc>)
 8009940:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009942:	4b2b      	ldr	r3, [pc, #172]	@ (80099f0 <tcp_fasttmr+0xc0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009948:	e048      	b.n	80099dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	7f9a      	ldrb	r2, [r3, #30]
 800994e:	4b27      	ldr	r3, [pc, #156]	@ (80099ec <tcp_fasttmr+0xbc>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d03f      	beq.n	80099d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009956:	4b25      	ldr	r3, [pc, #148]	@ (80099ec <tcp_fasttmr+0xbc>)
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	8b5b      	ldrh	r3, [r3, #26]
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d010      	beq.n	800998c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8b5b      	ldrh	r3, [r3, #26]
 800996e:	f043 0302 	orr.w	r3, r3, #2
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f003 fad7 	bl	800cf2c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	8b5b      	ldrh	r3, [r3, #26]
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	b29a      	uxth	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8b5b      	ldrh	r3, [r3, #26]
 8009990:	f003 0308 	and.w	r3, r3, #8
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	8b5b      	ldrh	r3, [r3, #26]
 800999c:	f023 0308 	bic.w	r3, r3, #8
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff fa76 	bl	8008e98 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80099ba:	4b0e      	ldr	r3, [pc, #56]	@ (80099f4 <tcp_fasttmr+0xc4>)
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f819 	bl	80099f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80099c6:	4b0b      	ldr	r3, [pc, #44]	@ (80099f4 <tcp_fasttmr+0xc4>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d000      	beq.n	80099d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80099ce:	e7b8      	b.n	8009942 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	607b      	str	r3, [r7, #4]
 80099d4:	e002      	b.n	80099dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1b3      	bne.n	800994a <tcp_fasttmr+0x1a>
    }
  }
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20007fc2 	.word	0x20007fc2
 80099f0:	20007fb8 	.word	0x20007fb8
 80099f4:	20007fc0 	.word	0x20007fc0

080099f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80099f8:	b590      	push	{r4, r7, lr}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d109      	bne.n	8009a1a <tcp_process_refused_data+0x22>
 8009a06:	4b37      	ldr	r3, [pc, #220]	@ (8009ae4 <tcp_process_refused_data+0xec>)
 8009a08:	f240 6209 	movw	r2, #1545	@ 0x609
 8009a0c:	4936      	ldr	r1, [pc, #216]	@ (8009ae8 <tcp_process_refused_data+0xf0>)
 8009a0e:	4837      	ldr	r0, [pc, #220]	@ (8009aec <tcp_process_refused_data+0xf4>)
 8009a10:	f008 f87c 	bl	8011b0c <iprintf>
 8009a14:	f06f 030f 	mvn.w	r3, #15
 8009a18:	e060      	b.n	8009adc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a1e:	7b5b      	ldrb	r3, [r3, #13]
 8009a20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <tcp_process_refused_data+0x58>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6918      	ldr	r0, [r3, #16]
 8009a42:	2300      	movs	r3, #0
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	47a0      	blx	r4
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
 8009a4e:	e007      	b.n	8009a60 <tcp_process_refused_data+0x68>
 8009a50:	2300      	movs	r3, #0
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	2000      	movs	r0, #0
 8009a58:	f000 f8a4 	bl	8009ba4 <tcp_recv_null>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d12a      	bne.n	8009abe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d033      	beq.n	8009ada <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a76:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009a7a:	d005      	beq.n	8009a88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a80:	3301      	adds	r3, #1
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <tcp_process_refused_data+0xb2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6918      	ldr	r0, [r3, #16]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	47a0      	blx	r4
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73fb      	strb	r3, [r7, #15]
 8009aa8:	e001      	b.n	8009aae <tcp_process_refused_data+0xb6>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ab2:	f113 0f0d 	cmn.w	r3, #13
 8009ab6:	d110      	bne.n	8009ada <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009ab8:	f06f 030c 	mvn.w	r3, #12
 8009abc:	e00e      	b.n	8009adc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac2:	f113 0f0d 	cmn.w	r3, #13
 8009ac6:	d102      	bne.n	8009ace <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009ac8:	f06f 030c 	mvn.w	r3, #12
 8009acc:	e006      	b.n	8009adc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009ad4:	f06f 0304 	mvn.w	r3, #4
 8009ad8:	e000      	b.n	8009adc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd90      	pop	{r4, r7, pc}
 8009ae4:	08013880 	.word	0x08013880
 8009ae8:	08013d90 	.word	0x08013d90
 8009aec:	080138c4 	.word	0x080138c4

08009af0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009af8:	e007      	b.n	8009b0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f80a 	bl	8009b1a <tcp_seg_free>
    seg = next;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1f4      	bne.n	8009afa <tcp_segs_free+0xa>
  }
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00c      	beq.n	8009b42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe fd6b 	bl	8008610 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	2003      	movs	r0, #3
 8009b3e:	f7fd fdfb 	bl	8007738 <memp_free>
  }
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <tcp_seg_copy+0x1c>
 8009b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b98 <tcp_seg_copy+0x4c>)
 8009b5c:	f240 6282 	movw	r2, #1666	@ 0x682
 8009b60:	490e      	ldr	r1, [pc, #56]	@ (8009b9c <tcp_seg_copy+0x50>)
 8009b62:	480f      	ldr	r0, [pc, #60]	@ (8009ba0 <tcp_seg_copy+0x54>)
 8009b64:	f007 ffd2 	bl	8011b0c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009b68:	2003      	movs	r0, #3
 8009b6a:	f7fd fd75 	bl	8007658 <memp_malloc>
 8009b6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <tcp_seg_copy+0x2e>
    return NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	e00a      	b.n	8009b90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009b7a:	2214      	movs	r2, #20
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f008 f999 	bl	8011eb6 <memcpy>
  pbuf_ref(cseg->p);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe fde1 	bl	8008750 <pbuf_ref>
  return cseg;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	08013880 	.word	0x08013880
 8009b9c:	08013dd4 	.word	0x08013dd4
 8009ba0:	080138c4 	.word	0x080138c4

08009ba4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <tcp_recv_null+0x28>
 8009bb8:	4b12      	ldr	r3, [pc, #72]	@ (8009c04 <tcp_recv_null+0x60>)
 8009bba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009bbe:	4912      	ldr	r1, [pc, #72]	@ (8009c08 <tcp_recv_null+0x64>)
 8009bc0:	4812      	ldr	r0, [pc, #72]	@ (8009c0c <tcp_recv_null+0x68>)
 8009bc2:	f007 ffa3 	bl	8011b0c <iprintf>
 8009bc6:	f06f 030f 	mvn.w	r3, #15
 8009bca:	e016      	b.n	8009bfa <tcp_recv_null+0x56>

  if (p != NULL) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d009      	beq.n	8009be6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	891b      	ldrh	r3, [r3, #8]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	68b8      	ldr	r0, [r7, #8]
 8009bda:	f7ff fb17 	bl	800920c <tcp_recved>
    pbuf_free(p);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7fe fd16 	bl	8008610 <pbuf_free>
 8009be4:	e008      	b.n	8009bf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	f7ff f9bc 	bl	8008f6c <tcp_close>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	e000      	b.n	8009bfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	08013880 	.word	0x08013880
 8009c08:	08013df0 	.word	0x08013df0
 8009c0c:	080138c4 	.word	0x080138c4

08009c10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	db01      	blt.n	8009c26 <tcp_kill_prio+0x16>
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	e000      	b.n	8009c28 <tcp_kill_prio+0x18>
 8009c26:	237f      	movs	r3, #127	@ 0x7f
 8009c28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009c2a:	7afb      	ldrb	r3, [r7, #11]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d034      	beq.n	8009c9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c3e:	4b19      	ldr	r3, [pc, #100]	@ (8009ca4 <tcp_kill_prio+0x94>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	e01f      	b.n	8009c86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	7d5b      	ldrb	r3, [r3, #21]
 8009c4a:	7afa      	ldrb	r2, [r7, #11]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d80c      	bhi.n	8009c6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009c54:	7afa      	ldrb	r2, [r7, #11]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d112      	bne.n	8009c80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c5a:	4b13      	ldr	r3, [pc, #76]	@ (8009ca8 <tcp_kill_prio+0x98>)
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d80a      	bhi.n	8009c80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca8 <tcp_kill_prio+0x98>)
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	7d5b      	ldrb	r3, [r3, #21]
 8009c7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	617b      	str	r3, [r7, #20]
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1dc      	bne.n	8009c46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009c92:	6938      	ldr	r0, [r7, #16]
 8009c94:	f7ff fa54 	bl	8009140 <tcp_abort>
 8009c98:	e000      	b.n	8009c9c <tcp_kill_prio+0x8c>
    return;
 8009c9a:	bf00      	nop
  }
}
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20007fb8 	.word	0x20007fb8
 8009ca8:	20007fac 	.word	0x20007fac

08009cac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d009      	beq.n	8009cd0 <tcp_kill_state+0x24>
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d006      	beq.n	8009cd0 <tcp_kill_state+0x24>
 8009cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d2c <tcp_kill_state+0x80>)
 8009cc4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009cc8:	4919      	ldr	r1, [pc, #100]	@ (8009d30 <tcp_kill_state+0x84>)
 8009cca:	481a      	ldr	r0, [pc, #104]	@ (8009d34 <tcp_kill_state+0x88>)
 8009ccc:	f007 ff1e 	bl	8011b0c <iprintf>

  inactivity = 0;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cd8:	4b17      	ldr	r3, [pc, #92]	@ (8009d38 <tcp_kill_state+0x8c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e017      	b.n	8009d10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	7d1b      	ldrb	r3, [r3, #20]
 8009ce4:	79fa      	ldrb	r2, [r7, #7]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d10f      	bne.n	8009d0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cea:	4b14      	ldr	r3, [pc, #80]	@ (8009d3c <tcp_kill_state+0x90>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d807      	bhi.n	8009d0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009cfa:	4b10      	ldr	r3, [pc, #64]	@ (8009d3c <tcp_kill_state+0x90>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e4      	bne.n	8009ce0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7ff f950 	bl	8008fc4 <tcp_abandon>
  }
}
 8009d24:	bf00      	nop
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	08013880 	.word	0x08013880
 8009d30:	08013e0c 	.word	0x08013e0c
 8009d34:	080138c4 	.word	0x080138c4
 8009d38:	20007fb8 	.word	0x20007fb8
 8009d3c:	20007fac 	.word	0x20007fac

08009d40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d4e:	4b12      	ldr	r3, [pc, #72]	@ (8009d98 <tcp_kill_timewait+0x58>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e012      	b.n	8009d7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d56:	4b11      	ldr	r3, [pc, #68]	@ (8009d9c <tcp_kill_timewait+0x5c>)
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d807      	bhi.n	8009d76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009d66:	4b0d      	ldr	r3, [pc, #52]	@ (8009d9c <tcp_kill_timewait+0x5c>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e9      	bne.n	8009d56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f7ff f9d9 	bl	8009140 <tcp_abort>
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20007fbc 	.word	0x20007fbc
 8009d9c:	20007fac 	.word	0x20007fac

08009da0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009da6:	4b10      	ldr	r3, [pc, #64]	@ (8009de8 <tcp_handle_closepend+0x48>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009dac:	e014      	b.n	8009dd8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8b5b      	ldrh	r3, [r3, #26]
 8009db8:	f003 0308 	and.w	r3, r3, #8
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8b5b      	ldrh	r3, [r3, #26]
 8009dc4:	f023 0308 	bic.w	r3, r3, #8
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff f862 	bl	8008e98 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e7      	bne.n	8009dae <tcp_handle_closepend+0xe>
  }
}
 8009dde:	bf00      	nop
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20007fb8 	.word	0x20007fb8

08009dec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009df6:	2001      	movs	r0, #1
 8009df8:	f7fd fc2e 	bl	8007658 <memp_malloc>
 8009dfc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d126      	bne.n	8009e52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009e04:	f7ff ffcc 	bl	8009da0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009e08:	f7ff ff9a 	bl	8009d40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	f7fd fc23 	bl	8007658 <memp_malloc>
 8009e12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d11b      	bne.n	8009e52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009e1a:	2009      	movs	r0, #9
 8009e1c:	f7ff ff46 	bl	8009cac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e20:	2001      	movs	r0, #1
 8009e22:	f7fd fc19 	bl	8007658 <memp_malloc>
 8009e26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d111      	bne.n	8009e52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009e2e:	2008      	movs	r0, #8
 8009e30:	f7ff ff3c 	bl	8009cac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e34:	2001      	movs	r0, #1
 8009e36:	f7fd fc0f 	bl	8007658 <memp_malloc>
 8009e3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d107      	bne.n	8009e52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009e42:	79fb      	ldrb	r3, [r7, #7]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff fee3 	bl	8009c10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	f7fd fc04 	bl	8007658 <memp_malloc>
 8009e50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d03f      	beq.n	8009ed8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009e58:	229c      	movs	r2, #156	@ 0x9c
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f007 ffb5 	bl	8011dcc <memset>
    pcb->prio = prio;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	79fa      	ldrb	r2, [r7, #7]
 8009e66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009e6e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	22ff      	movs	r2, #255	@ 0xff
 8009e86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009e8e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2206      	movs	r2, #6
 8009e94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2206      	movs	r2, #6
 8009e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ea4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009eae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee4 <tcp_alloc+0xf8>)
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee8 <tcp_alloc+0xfc>)
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009ec4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4a08      	ldr	r2, [pc, #32]	@ (8009eec <tcp_alloc+0x100>)
 8009ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a07      	ldr	r2, [pc, #28]	@ (8009ef0 <tcp_alloc+0x104>)
 8009ed4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20007fac 	.word	0x20007fac
 8009ee8:	20007fc2 	.word	0x20007fc2
 8009eec:	08009ba5 	.word	0x08009ba5
 8009ef0:	006ddd00 	.word	0x006ddd00

08009ef4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d107      	bne.n	8009f12 <tcp_pcb_purge+0x1e>
 8009f02:	4b21      	ldr	r3, [pc, #132]	@ (8009f88 <tcp_pcb_purge+0x94>)
 8009f04:	f640 0251 	movw	r2, #2129	@ 0x851
 8009f08:	4920      	ldr	r1, [pc, #128]	@ (8009f8c <tcp_pcb_purge+0x98>)
 8009f0a:	4821      	ldr	r0, [pc, #132]	@ (8009f90 <tcp_pcb_purge+0x9c>)
 8009f0c:	f007 fdfe 	bl	8011b0c <iprintf>
 8009f10:	e037      	b.n	8009f82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7d1b      	ldrb	r3, [r3, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d033      	beq.n	8009f82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009f1e:	2b0a      	cmp	r3, #10
 8009f20:	d02f      	beq.n	8009f82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d02b      	beq.n	8009f82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fb6a 	bl	8008610 <pbuf_free>
      pcb->refused_data = NULL;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f98c 	bl	800a268 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f56:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff fdc7 	bl	8009af0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff fdc2 	bl	8009af0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	08013880 	.word	0x08013880
 8009f8c:	08013ecc 	.word	0x08013ecc
 8009f90:	080138c4 	.word	0x080138c4

08009f94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <tcp_pcb_remove+0x1e>
 8009fa4:	4b3e      	ldr	r3, [pc, #248]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 8009fa6:	f640 0283 	movw	r2, #2179	@ 0x883
 8009faa:	493e      	ldr	r1, [pc, #248]	@ (800a0a4 <tcp_pcb_remove+0x110>)
 8009fac:	483e      	ldr	r0, [pc, #248]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 8009fae:	f007 fdad 	bl	8011b0c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <tcp_pcb_remove+0x32>
 8009fb8:	4b39      	ldr	r3, [pc, #228]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 8009fba:	f640 0284 	movw	r2, #2180	@ 0x884
 8009fbe:	493b      	ldr	r1, [pc, #236]	@ (800a0ac <tcp_pcb_remove+0x118>)
 8009fc0:	4839      	ldr	r0, [pc, #228]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 8009fc2:	f007 fda3 	bl	8011b0c <iprintf>

  TCP_RMV(pcblist, pcb);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d105      	bne.n	8009fdc <tcp_pcb_remove+0x48>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	e013      	b.n	800a004 <tcp_pcb_remove+0x70>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e00c      	b.n	8009ffe <tcp_pcb_remove+0x6a>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d104      	bne.n	8009ff8 <tcp_pcb_remove+0x64>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	60da      	str	r2, [r3, #12]
 8009ff6:	e005      	b.n	800a004 <tcp_pcb_remove+0x70>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1ef      	bne.n	8009fe4 <tcp_pcb_remove+0x50>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a00a:	6838      	ldr	r0, [r7, #0]
 800a00c:	f7ff ff72 	bl	8009ef4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	7d1b      	ldrb	r3, [r3, #20]
 800a014:	2b0a      	cmp	r3, #10
 800a016:	d013      	beq.n	800a040 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d00f      	beq.n	800a040 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	8b5b      	ldrh	r3, [r3, #26]
 800a024:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d009      	beq.n	800a040 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	8b5b      	ldrh	r3, [r3, #26]
 800a030:	f043 0302 	orr.w	r3, r3, #2
 800a034:	b29a      	uxth	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a03a:	6838      	ldr	r0, [r7, #0]
 800a03c:	f002 ff76 	bl	800cf2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	7d1b      	ldrb	r3, [r3, #20]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d020      	beq.n	800a08a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <tcp_pcb_remove+0xca>
 800a050:	4b13      	ldr	r3, [pc, #76]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 800a052:	f640 0293 	movw	r2, #2195	@ 0x893
 800a056:	4916      	ldr	r1, [pc, #88]	@ (800a0b0 <tcp_pcb_remove+0x11c>)
 800a058:	4813      	ldr	r0, [pc, #76]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 800a05a:	f007 fd57 	bl	8011b0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <tcp_pcb_remove+0xe0>
 800a066:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 800a068:	f640 0294 	movw	r2, #2196	@ 0x894
 800a06c:	4911      	ldr	r1, [pc, #68]	@ (800a0b4 <tcp_pcb_remove+0x120>)
 800a06e:	480e      	ldr	r0, [pc, #56]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 800a070:	f007 fd4c 	bl	8011b0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <tcp_pcb_remove+0xf6>
 800a07c:	4b08      	ldr	r3, [pc, #32]	@ (800a0a0 <tcp_pcb_remove+0x10c>)
 800a07e:	f640 0296 	movw	r2, #2198	@ 0x896
 800a082:	490d      	ldr	r1, [pc, #52]	@ (800a0b8 <tcp_pcb_remove+0x124>)
 800a084:	4808      	ldr	r0, [pc, #32]	@ (800a0a8 <tcp_pcb_remove+0x114>)
 800a086:	f007 fd41 	bl	8011b0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2200      	movs	r2, #0
 800a08e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2200      	movs	r2, #0
 800a094:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	08013880 	.word	0x08013880
 800a0a4:	08013ee8 	.word	0x08013ee8
 800a0a8:	080138c4 	.word	0x080138c4
 800a0ac:	08013f04 	.word	0x08013f04
 800a0b0:	08013f24 	.word	0x08013f24
 800a0b4:	08013f3c 	.word	0x08013f3c
 800a0b8:	08013f58 	.word	0x08013f58

0800a0bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <tcp_next_iss+0x1c>
 800a0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a0f4 <tcp_next_iss+0x38>)
 800a0cc:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a0d0:	4909      	ldr	r1, [pc, #36]	@ (800a0f8 <tcp_next_iss+0x3c>)
 800a0d2:	480a      	ldr	r0, [pc, #40]	@ (800a0fc <tcp_next_iss+0x40>)
 800a0d4:	f007 fd1a 	bl	8011b0c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a0d8:	4b09      	ldr	r3, [pc, #36]	@ (800a100 <tcp_next_iss+0x44>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4b09      	ldr	r3, [pc, #36]	@ (800a104 <tcp_next_iss+0x48>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	4a07      	ldr	r2, [pc, #28]	@ (800a100 <tcp_next_iss+0x44>)
 800a0e4:	6013      	str	r3, [r2, #0]
  return iss;
 800a0e6:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <tcp_next_iss+0x44>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	08013880 	.word	0x08013880
 800a0f8:	08013f70 	.word	0x08013f70
 800a0fc:	080138c4 	.word	0x080138c4
 800a100:	20000068 	.word	0x20000068
 800a104:	20007fac 	.word	0x20007fac

0800a108 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <tcp_eff_send_mss_netif+0x22>
 800a11c:	4b14      	ldr	r3, [pc, #80]	@ (800a170 <tcp_eff_send_mss_netif+0x68>)
 800a11e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a122:	4914      	ldr	r1, [pc, #80]	@ (800a174 <tcp_eff_send_mss_netif+0x6c>)
 800a124:	4814      	ldr	r0, [pc, #80]	@ (800a178 <tcp_eff_send_mss_netif+0x70>)
 800a126:	f007 fcf1 	bl	8011b0c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	e019      	b.n	800a168 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a138:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a13a:	8afb      	ldrh	r3, [r7, #22]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d012      	beq.n	800a166 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a140:	2328      	movs	r3, #40	@ 0x28
 800a142:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a144:	8afa      	ldrh	r2, [r7, #22]
 800a146:	8abb      	ldrh	r3, [r7, #20]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d904      	bls.n	800a156 <tcp_eff_send_mss_netif+0x4e>
 800a14c:	8afa      	ldrh	r2, [r7, #22]
 800a14e:	8abb      	ldrh	r3, [r7, #20]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	b29b      	uxth	r3, r3
 800a154:	e000      	b.n	800a158 <tcp_eff_send_mss_netif+0x50>
 800a156:	2300      	movs	r3, #0
 800a158:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a15a:	8a7a      	ldrh	r2, [r7, #18]
 800a15c:	89fb      	ldrh	r3, [r7, #14]
 800a15e:	4293      	cmp	r3, r2
 800a160:	bf28      	it	cs
 800a162:	4613      	movcs	r3, r2
 800a164:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a166:	89fb      	ldrh	r3, [r7, #14]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	08013880 	.word	0x08013880
 800a174:	08013f8c 	.word	0x08013f8c
 800a178:	080138c4 	.word	0x080138c4

0800a17c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d11d      	bne.n	800a1cc <tcp_netif_ip_addr_changed_pcblist+0x50>
 800a190:	4b12      	ldr	r3, [pc, #72]	@ (800a1dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a192:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a196:	4912      	ldr	r1, [pc, #72]	@ (800a1e0 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800a198:	4812      	ldr	r0, [pc, #72]	@ (800a1e4 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800a19a:	f007 fcb7 	bl	8011b0c <iprintf>

  while (pcb != NULL) {
 800a19e:	e015      	b.n	800a1cc <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d10c      	bne.n	800a1c6 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	480c      	ldr	r0, [pc, #48]	@ (800a1e8 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800a1b6:	f007 fca9 	bl	8011b0c <iprintf>
      tcp_abort(pcb);
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7fe ffc0 	bl	8009140 <tcp_abort>
      pcb = next;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e002      	b.n	800a1cc <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e6      	bne.n	800a1a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a1d2:	bf00      	nop
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	08013880 	.word	0x08013880
 800a1e0:	08013fb4 	.word	0x08013fb4
 800a1e4:	080138c4 	.word	0x080138c4
 800a1e8:	08013fe8 	.word	0x08013fe8

0800a1ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d02a      	beq.n	800a252 <tcp_netif_ip_addr_changed+0x66>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d026      	beq.n	800a252 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a204:	4b15      	ldr	r3, [pc, #84]	@ (800a25c <tcp_netif_ip_addr_changed+0x70>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff ffb6 	bl	800a17c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a210:	4b13      	ldr	r3, [pc, #76]	@ (800a260 <tcp_netif_ip_addr_changed+0x74>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff ffb0 	bl	800a17c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d017      	beq.n	800a252 <tcp_netif_ip_addr_changed+0x66>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d013      	beq.n	800a252 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a22a:	4b0e      	ldr	r3, [pc, #56]	@ (800a264 <tcp_netif_ip_addr_changed+0x78>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	e00c      	b.n	800a24c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d103      	bne.n	800a246 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1ef      	bne.n	800a232 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a252:	bf00      	nop
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20007fb8 	.word	0x20007fb8
 800a260:	20007fb0 	.word	0x20007fb0
 800a264:	20007fb4 	.word	0x20007fb4

0800a268 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fc37 	bl	8009af0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a290:	b590      	push	{r4, r7, lr}
 800a292:	b08d      	sub	sp, #52	@ 0x34
 800a294:	af04      	add	r7, sp, #16
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d105      	bne.n	800a2ac <tcp_input+0x1c>
 800a2a0:	4b9b      	ldr	r3, [pc, #620]	@ (800a510 <tcp_input+0x280>)
 800a2a2:	2283      	movs	r2, #131	@ 0x83
 800a2a4:	499b      	ldr	r1, [pc, #620]	@ (800a514 <tcp_input+0x284>)
 800a2a6:	489c      	ldr	r0, [pc, #624]	@ (800a518 <tcp_input+0x288>)
 800a2a8:	f007 fc30 	bl	8011b0c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4a9a      	ldr	r2, [pc, #616]	@ (800a51c <tcp_input+0x28c>)
 800a2b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	895b      	ldrh	r3, [r3, #10]
 800a2b8:	2b13      	cmp	r3, #19
 800a2ba:	f240 83d1 	bls.w	800aa60 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2be:	4b98      	ldr	r3, [pc, #608]	@ (800a520 <tcp_input+0x290>)
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	4a97      	ldr	r2, [pc, #604]	@ (800a520 <tcp_input+0x290>)
 800a2c4:	6812      	ldr	r2, [r2, #0]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f006 f9a5 	bl	8010618 <ip4_addr_isbroadcast_u32>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f040 83c7 	bne.w	800aa64 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a2d6:	4b92      	ldr	r3, [pc, #584]	@ (800a520 <tcp_input+0x290>)
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2de:	2be0      	cmp	r3, #224	@ 0xe0
 800a2e0:	f000 83c0 	beq.w	800aa64 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a2e4:	4b8d      	ldr	r3, [pc, #564]	@ (800a51c <tcp_input+0x28c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	899b      	ldrh	r3, [r3, #12]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fc fd3f 	bl	8006d70 <lwip_htons>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	0b1b      	lsrs	r3, r3, #12
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a2fe:	7cbb      	ldrb	r3, [r7, #18]
 800a300:	2b13      	cmp	r3, #19
 800a302:	f240 83b1 	bls.w	800aa68 <tcp_input+0x7d8>
 800a306:	7cbb      	ldrb	r3, [r7, #18]
 800a308:	b29a      	uxth	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	891b      	ldrh	r3, [r3, #8]
 800a30e:	429a      	cmp	r2, r3
 800a310:	f200 83aa 	bhi.w	800aa68 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a314:	7cbb      	ldrb	r3, [r7, #18]
 800a316:	b29b      	uxth	r3, r3
 800a318:	3b14      	subs	r3, #20
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	4b81      	ldr	r3, [pc, #516]	@ (800a524 <tcp_input+0x294>)
 800a31e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a320:	4b81      	ldr	r3, [pc, #516]	@ (800a528 <tcp_input+0x298>)
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	895a      	ldrh	r2, [r3, #10]
 800a32a:	7cbb      	ldrb	r3, [r7, #18]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	429a      	cmp	r2, r3
 800a330:	d309      	bcc.n	800a346 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a332:	4b7c      	ldr	r3, [pc, #496]	@ (800a524 <tcp_input+0x294>)
 800a334:	881a      	ldrh	r2, [r3, #0]
 800a336:	4b7d      	ldr	r3, [pc, #500]	@ (800a52c <tcp_input+0x29c>)
 800a338:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a33a:	7cbb      	ldrb	r3, [r7, #18]
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7fe f8e0 	bl	8008504 <pbuf_remove_header>
 800a344:	e04e      	b.n	800a3e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d105      	bne.n	800a35a <tcp_input+0xca>
 800a34e:	4b70      	ldr	r3, [pc, #448]	@ (800a510 <tcp_input+0x280>)
 800a350:	22c2      	movs	r2, #194	@ 0xc2
 800a352:	4977      	ldr	r1, [pc, #476]	@ (800a530 <tcp_input+0x2a0>)
 800a354:	4870      	ldr	r0, [pc, #448]	@ (800a518 <tcp_input+0x288>)
 800a356:	f007 fbd9 	bl	8011b0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a35a:	2114      	movs	r1, #20
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7fe f8d1 	bl	8008504 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	895a      	ldrh	r2, [r3, #10]
 800a366:	4b71      	ldr	r3, [pc, #452]	@ (800a52c <tcp_input+0x29c>)
 800a368:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a36a:	4b6e      	ldr	r3, [pc, #440]	@ (800a524 <tcp_input+0x294>)
 800a36c:	881a      	ldrh	r2, [r3, #0]
 800a36e:	4b6f      	ldr	r3, [pc, #444]	@ (800a52c <tcp_input+0x29c>)
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a376:	4b6d      	ldr	r3, [pc, #436]	@ (800a52c <tcp_input+0x29c>)
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7fe f8c1 	bl	8008504 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	895b      	ldrh	r3, [r3, #10]
 800a388:	8a3a      	ldrh	r2, [r7, #16]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	f200 836e 	bhi.w	800aa6c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	4a64      	ldr	r2, [pc, #400]	@ (800a528 <tcp_input+0x298>)
 800a398:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	8a3a      	ldrh	r2, [r7, #16]
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe f8ae 	bl	8008504 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	891a      	ldrh	r2, [r3, #8]
 800a3ac:	8a3b      	ldrh	r3, [r7, #16]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	895b      	ldrh	r3, [r3, #10]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d005      	beq.n	800a3ca <tcp_input+0x13a>
 800a3be:	4b54      	ldr	r3, [pc, #336]	@ (800a510 <tcp_input+0x280>)
 800a3c0:	22df      	movs	r2, #223	@ 0xdf
 800a3c2:	495c      	ldr	r1, [pc, #368]	@ (800a534 <tcp_input+0x2a4>)
 800a3c4:	4854      	ldr	r0, [pc, #336]	@ (800a518 <tcp_input+0x288>)
 800a3c6:	f007 fba1 	bl	8011b0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	891a      	ldrh	r2, [r3, #8]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	891b      	ldrh	r3, [r3, #8]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d005      	beq.n	800a3e4 <tcp_input+0x154>
 800a3d8:	4b4d      	ldr	r3, [pc, #308]	@ (800a510 <tcp_input+0x280>)
 800a3da:	22e0      	movs	r2, #224	@ 0xe0
 800a3dc:	4956      	ldr	r1, [pc, #344]	@ (800a538 <tcp_input+0x2a8>)
 800a3de:	484e      	ldr	r0, [pc, #312]	@ (800a518 <tcp_input+0x288>)
 800a3e0:	f007 fb94 	bl	8011b0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a3e4:	4b4d      	ldr	r3, [pc, #308]	@ (800a51c <tcp_input+0x28c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	4a4b      	ldr	r2, [pc, #300]	@ (800a51c <tcp_input+0x28c>)
 800a3ee:	6814      	ldr	r4, [r2, #0]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fc fcbd 	bl	8006d70 <lwip_htons>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a3fa:	4b48      	ldr	r3, [pc, #288]	@ (800a51c <tcp_input+0x28c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	885b      	ldrh	r3, [r3, #2]
 800a400:	b29b      	uxth	r3, r3
 800a402:	4a46      	ldr	r2, [pc, #280]	@ (800a51c <tcp_input+0x28c>)
 800a404:	6814      	ldr	r4, [r2, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f7fc fcb2 	bl	8006d70 <lwip_htons>
 800a40c:	4603      	mov	r3, r0
 800a40e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a410:	4b42      	ldr	r3, [pc, #264]	@ (800a51c <tcp_input+0x28c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	4a41      	ldr	r2, [pc, #260]	@ (800a51c <tcp_input+0x28c>)
 800a418:	6814      	ldr	r4, [r2, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fc fcbe 	bl	8006d9c <lwip_htonl>
 800a420:	4603      	mov	r3, r0
 800a422:	6063      	str	r3, [r4, #4]
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	4a45      	ldr	r2, [pc, #276]	@ (800a53c <tcp_input+0x2ac>)
 800a428:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a42a:	4b3c      	ldr	r3, [pc, #240]	@ (800a51c <tcp_input+0x28c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	4a3a      	ldr	r2, [pc, #232]	@ (800a51c <tcp_input+0x28c>)
 800a432:	6814      	ldr	r4, [r2, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f7fc fcb1 	bl	8006d9c <lwip_htonl>
 800a43a:	4603      	mov	r3, r0
 800a43c:	60a3      	str	r3, [r4, #8]
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	4a3f      	ldr	r2, [pc, #252]	@ (800a540 <tcp_input+0x2b0>)
 800a442:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a444:	4b35      	ldr	r3, [pc, #212]	@ (800a51c <tcp_input+0x28c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	89db      	ldrh	r3, [r3, #14]
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	4a33      	ldr	r2, [pc, #204]	@ (800a51c <tcp_input+0x28c>)
 800a44e:	6814      	ldr	r4, [r2, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f7fc fc8d 	bl	8006d70 <lwip_htons>
 800a456:	4603      	mov	r3, r0
 800a458:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a45a:	4b30      	ldr	r3, [pc, #192]	@ (800a51c <tcp_input+0x28c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	899b      	ldrh	r3, [r3, #12]
 800a460:	b29b      	uxth	r3, r3
 800a462:	4618      	mov	r0, r3
 800a464:	f7fc fc84 	bl	8006d70 <lwip_htons>
 800a468:	4603      	mov	r3, r0
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a470:	b2da      	uxtb	r2, r3
 800a472:	4b34      	ldr	r3, [pc, #208]	@ (800a544 <tcp_input+0x2b4>)
 800a474:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	891a      	ldrh	r2, [r3, #8]
 800a47a:	4b33      	ldr	r3, [pc, #204]	@ (800a548 <tcp_input+0x2b8>)
 800a47c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a47e:	4b31      	ldr	r3, [pc, #196]	@ (800a544 <tcp_input+0x2b4>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00c      	beq.n	800a4a4 <tcp_input+0x214>
    tcplen++;
 800a48a:	4b2f      	ldr	r3, [pc, #188]	@ (800a548 <tcp_input+0x2b8>)
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	3301      	adds	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	4b2d      	ldr	r3, [pc, #180]	@ (800a548 <tcp_input+0x2b8>)
 800a494:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	891a      	ldrh	r2, [r3, #8]
 800a49a:	4b2b      	ldr	r3, [pc, #172]	@ (800a548 <tcp_input+0x2b8>)
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	f200 82e6 	bhi.w	800aa70 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4a8:	4b28      	ldr	r3, [pc, #160]	@ (800a54c <tcp_input+0x2bc>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	e09d      	b.n	800a5ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d105      	bne.n	800a4c4 <tcp_input+0x234>
 800a4b8:	4b15      	ldr	r3, [pc, #84]	@ (800a510 <tcp_input+0x280>)
 800a4ba:	22fb      	movs	r2, #251	@ 0xfb
 800a4bc:	4924      	ldr	r1, [pc, #144]	@ (800a550 <tcp_input+0x2c0>)
 800a4be:	4816      	ldr	r0, [pc, #88]	@ (800a518 <tcp_input+0x288>)
 800a4c0:	f007 fb24 	bl	8011b0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	7d1b      	ldrb	r3, [r3, #20]
 800a4c8:	2b0a      	cmp	r3, #10
 800a4ca:	d105      	bne.n	800a4d8 <tcp_input+0x248>
 800a4cc:	4b10      	ldr	r3, [pc, #64]	@ (800a510 <tcp_input+0x280>)
 800a4ce:	22fc      	movs	r2, #252	@ 0xfc
 800a4d0:	4920      	ldr	r1, [pc, #128]	@ (800a554 <tcp_input+0x2c4>)
 800a4d2:	4811      	ldr	r0, [pc, #68]	@ (800a518 <tcp_input+0x288>)
 800a4d4:	f007 fb1a 	bl	8011b0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	7d1b      	ldrb	r3, [r3, #20]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d105      	bne.n	800a4ec <tcp_input+0x25c>
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a510 <tcp_input+0x280>)
 800a4e2:	22fd      	movs	r2, #253	@ 0xfd
 800a4e4:	491c      	ldr	r1, [pc, #112]	@ (800a558 <tcp_input+0x2c8>)
 800a4e6:	480c      	ldr	r0, [pc, #48]	@ (800a518 <tcp_input+0x288>)
 800a4e8:	f007 fb10 	bl	8011b0c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	7a1b      	ldrb	r3, [r3, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d033      	beq.n	800a55c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	7a1a      	ldrb	r2, [r3, #8]
 800a4f8:	4b09      	ldr	r3, [pc, #36]	@ (800a520 <tcp_input+0x290>)
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a500:	3301      	adds	r3, #1
 800a502:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a504:	429a      	cmp	r2, r3
 800a506:	d029      	beq.n	800a55c <tcp_input+0x2cc>
      prev = pcb;
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	61fb      	str	r3, [r7, #28]
      continue;
 800a50c:	e06b      	b.n	800a5e6 <tcp_input+0x356>
 800a50e:	bf00      	nop
 800a510:	08014010 	.word	0x08014010
 800a514:	08014044 	.word	0x08014044
 800a518:	0801405c 	.word	0x0801405c
 800a51c:	20007fd8 	.word	0x20007fd8
 800a520:	20005050 	.word	0x20005050
 800a524:	20007fdc 	.word	0x20007fdc
 800a528:	20007fe0 	.word	0x20007fe0
 800a52c:	20007fde 	.word	0x20007fde
 800a530:	08014084 	.word	0x08014084
 800a534:	08014094 	.word	0x08014094
 800a538:	080140a0 	.word	0x080140a0
 800a53c:	20007fe8 	.word	0x20007fe8
 800a540:	20007fec 	.word	0x20007fec
 800a544:	20007ff4 	.word	0x20007ff4
 800a548:	20007ff2 	.word	0x20007ff2
 800a54c:	20007fb8 	.word	0x20007fb8
 800a550:	080140c0 	.word	0x080140c0
 800a554:	080140e8 	.word	0x080140e8
 800a558:	08014114 	.word	0x08014114
    }

    if (pcb->remote_port == tcphdr->src &&
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	8b1a      	ldrh	r2, [r3, #24]
 800a560:	4b72      	ldr	r3, [pc, #456]	@ (800a72c <tcp_input+0x49c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	b29b      	uxth	r3, r3
 800a568:	429a      	cmp	r2, r3
 800a56a:	d13a      	bne.n	800a5e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	8ada      	ldrh	r2, [r3, #22]
 800a570:	4b6e      	ldr	r3, [pc, #440]	@ (800a72c <tcp_input+0x49c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	885b      	ldrh	r3, [r3, #2]
 800a576:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a578:	429a      	cmp	r2, r3
 800a57a:	d132      	bne.n	800a5e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	4b6b      	ldr	r3, [pc, #428]	@ (800a730 <tcp_input+0x4a0>)
 800a582:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a584:	429a      	cmp	r2, r3
 800a586:	d12c      	bne.n	800a5e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	4b68      	ldr	r3, [pc, #416]	@ (800a730 <tcp_input+0x4a0>)
 800a58e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a590:	429a      	cmp	r2, r3
 800a592:	d126      	bne.n	800a5e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d106      	bne.n	800a5ac <tcp_input+0x31c>
 800a59e:	4b65      	ldr	r3, [pc, #404]	@ (800a734 <tcp_input+0x4a4>)
 800a5a0:	f240 120d 	movw	r2, #269	@ 0x10d
 800a5a4:	4964      	ldr	r1, [pc, #400]	@ (800a738 <tcp_input+0x4a8>)
 800a5a6:	4865      	ldr	r0, [pc, #404]	@ (800a73c <tcp_input+0x4ac>)
 800a5a8:	f007 fab0 	bl	8011b0c <iprintf>
      if (prev != NULL) {
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <tcp_input+0x338>
        prev->next = pcb->next;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a5ba:	4b61      	ldr	r3, [pc, #388]	@ (800a740 <tcp_input+0x4b0>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a5c2:	4a5f      	ldr	r2, [pc, #380]	@ (800a740 <tcp_input+0x4b0>)
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d111      	bne.n	800a5f6 <tcp_input+0x366>
 800a5d2:	4b58      	ldr	r3, [pc, #352]	@ (800a734 <tcp_input+0x4a4>)
 800a5d4:	f240 1215 	movw	r2, #277	@ 0x115
 800a5d8:	495a      	ldr	r1, [pc, #360]	@ (800a744 <tcp_input+0x4b4>)
 800a5da:	4858      	ldr	r0, [pc, #352]	@ (800a73c <tcp_input+0x4ac>)
 800a5dc:	f007 fa96 	bl	8011b0c <iprintf>
      break;
 800a5e0:	e009      	b.n	800a5f6 <tcp_input+0x366>
    }
    prev = pcb;
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f47f af5e 	bne.w	800a4b0 <tcp_input+0x220>
 800a5f4:	e000      	b.n	800a5f8 <tcp_input+0x368>
      break;
 800a5f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f040 80aa 	bne.w	800a754 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a600:	4b51      	ldr	r3, [pc, #324]	@ (800a748 <tcp_input+0x4b8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	61bb      	str	r3, [r7, #24]
 800a606:	e03f      	b.n	800a688 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	7d1b      	ldrb	r3, [r3, #20]
 800a60c:	2b0a      	cmp	r3, #10
 800a60e:	d006      	beq.n	800a61e <tcp_input+0x38e>
 800a610:	4b48      	ldr	r3, [pc, #288]	@ (800a734 <tcp_input+0x4a4>)
 800a612:	f240 121f 	movw	r2, #287	@ 0x11f
 800a616:	494d      	ldr	r1, [pc, #308]	@ (800a74c <tcp_input+0x4bc>)
 800a618:	4848      	ldr	r0, [pc, #288]	@ (800a73c <tcp_input+0x4ac>)
 800a61a:	f007 fa77 	bl	8011b0c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	7a1b      	ldrb	r3, [r3, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	7a1a      	ldrb	r2, [r3, #8]
 800a62a:	4b41      	ldr	r3, [pc, #260]	@ (800a730 <tcp_input+0x4a0>)
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a632:	3301      	adds	r3, #1
 800a634:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a636:	429a      	cmp	r2, r3
 800a638:	d122      	bne.n	800a680 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	8b1a      	ldrh	r2, [r3, #24]
 800a63e:	4b3b      	ldr	r3, [pc, #236]	@ (800a72c <tcp_input+0x49c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	429a      	cmp	r2, r3
 800a648:	d11b      	bne.n	800a682 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	8ada      	ldrh	r2, [r3, #22]
 800a64e:	4b37      	ldr	r3, [pc, #220]	@ (800a72c <tcp_input+0x49c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a656:	429a      	cmp	r2, r3
 800a658:	d113      	bne.n	800a682 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	4b34      	ldr	r3, [pc, #208]	@ (800a730 <tcp_input+0x4a0>)
 800a660:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a662:	429a      	cmp	r2, r3
 800a664:	d10d      	bne.n	800a682 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	4b31      	ldr	r3, [pc, #196]	@ (800a730 <tcp_input+0x4a0>)
 800a66c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a66e:	429a      	cmp	r2, r3
 800a670:	d107      	bne.n	800a682 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a672:	69b8      	ldr	r0, [r7, #24]
 800a674:	f000 fb56 	bl	800ad24 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7fd ffc9 	bl	8008610 <pbuf_free>
        return;
 800a67e:	e1fd      	b.n	800aa7c <tcp_input+0x7ec>
        continue;
 800a680:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	61bb      	str	r3, [r7, #24]
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1bc      	bne.n	800a608 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a692:	4b2f      	ldr	r3, [pc, #188]	@ (800a750 <tcp_input+0x4c0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	e02a      	b.n	800a6f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	7a1b      	ldrb	r3, [r3, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00c      	beq.n	800a6bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	7a1a      	ldrb	r2, [r3, #8]
 800a6a6:	4b22      	ldr	r3, [pc, #136]	@ (800a730 <tcp_input+0x4a0>)
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d002      	beq.n	800a6bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	61fb      	str	r3, [r7, #28]
        continue;
 800a6ba:	e016      	b.n	800a6ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	8ada      	ldrh	r2, [r3, #22]
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a72c <tcp_input+0x49c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	885b      	ldrh	r3, [r3, #2]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d10c      	bne.n	800a6e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	4b17      	ldr	r3, [pc, #92]	@ (800a730 <tcp_input+0x4a0>)
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d00f      	beq.n	800a6f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00d      	beq.n	800a6fa <tcp_input+0x46a>
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1d1      	bne.n	800a69a <tcp_input+0x40a>
 800a6f6:	e000      	b.n	800a6fa <tcp_input+0x46a>
            break;
 800a6f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d029      	beq.n	800a754 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00a      	beq.n	800a71c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a70e:	4b10      	ldr	r3, [pc, #64]	@ (800a750 <tcp_input+0x4c0>)
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a716:	4a0e      	ldr	r2, [pc, #56]	@ (800a750 <tcp_input+0x4c0>)
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a71c:	6978      	ldr	r0, [r7, #20]
 800a71e:	f000 fa03 	bl	800ab28 <tcp_listen_input>
      }
      pbuf_free(p);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7fd ff74 	bl	8008610 <pbuf_free>
      return;
 800a728:	e1a8      	b.n	800aa7c <tcp_input+0x7ec>
 800a72a:	bf00      	nop
 800a72c:	20007fd8 	.word	0x20007fd8
 800a730:	20005050 	.word	0x20005050
 800a734:	08014010 	.word	0x08014010
 800a738:	0801413c 	.word	0x0801413c
 800a73c:	0801405c 	.word	0x0801405c
 800a740:	20007fb8 	.word	0x20007fb8
 800a744:	08014168 	.word	0x08014168
 800a748:	20007fbc 	.word	0x20007fbc
 800a74c:	08014194 	.word	0x08014194
 800a750:	20007fb4 	.word	0x20007fb4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 8158 	beq.w	800aa0c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a75c:	4b95      	ldr	r3, [pc, #596]	@ (800a9b4 <tcp_input+0x724>)
 800a75e:	2200      	movs	r2, #0
 800a760:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	891a      	ldrh	r2, [r3, #8]
 800a766:	4b93      	ldr	r3, [pc, #588]	@ (800a9b4 <tcp_input+0x724>)
 800a768:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a76a:	4a92      	ldr	r2, [pc, #584]	@ (800a9b4 <tcp_input+0x724>)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a770:	4b91      	ldr	r3, [pc, #580]	@ (800a9b8 <tcp_input+0x728>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a8f      	ldr	r2, [pc, #572]	@ (800a9b4 <tcp_input+0x724>)
 800a776:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800a778:	4b90      	ldr	r3, [pc, #576]	@ (800a9bc <tcp_input+0x72c>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a77e:	4b90      	ldr	r3, [pc, #576]	@ (800a9c0 <tcp_input+0x730>)
 800a780:	2200      	movs	r2, #0
 800a782:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a784:	4b8f      	ldr	r3, [pc, #572]	@ (800a9c4 <tcp_input+0x734>)
 800a786:	2200      	movs	r2, #0
 800a788:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a78a:	4b8f      	ldr	r3, [pc, #572]	@ (800a9c8 <tcp_input+0x738>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	f003 0308 	and.w	r3, r3, #8
 800a792:	2b00      	cmp	r3, #0
 800a794:	d006      	beq.n	800a7a4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	7b5b      	ldrb	r3, [r3, #13]
 800a79a:	f043 0301 	orr.w	r3, r3, #1
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d017      	beq.n	800a7dc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a7ac:	69b8      	ldr	r0, [r7, #24]
 800a7ae:	f7ff f923 	bl	80099f8 <tcp_process_refused_data>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	f113 0f0d 	cmn.w	r3, #13
 800a7b8:	d007      	beq.n	800a7ca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00c      	beq.n	800a7dc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a7c2:	4b82      	ldr	r3, [pc, #520]	@ (800a9cc <tcp_input+0x73c>)
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d008      	beq.n	800a7dc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f040 80e3 	bne.w	800a99a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a7d4:	69b8      	ldr	r0, [r7, #24]
 800a7d6:	f003 f9bb 	bl	800db50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a7da:	e0de      	b.n	800a99a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a7dc:	4a7c      	ldr	r2, [pc, #496]	@ (800a9d0 <tcp_input+0x740>)
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a7e2:	69b8      	ldr	r0, [r7, #24]
 800a7e4:	f000 fb18 	bl	800ae18 <tcp_process>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a7ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7f0:	f113 0f0d 	cmn.w	r3, #13
 800a7f4:	f000 80d3 	beq.w	800a99e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a7f8:	4b71      	ldr	r3, [pc, #452]	@ (800a9c0 <tcp_input+0x730>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	f003 0308 	and.w	r3, r3, #8
 800a800:	2b00      	cmp	r3, #0
 800a802:	d015      	beq.n	800a830 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d008      	beq.n	800a820 <tcp_input+0x590>
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	6912      	ldr	r2, [r2, #16]
 800a818:	f06f 010d 	mvn.w	r1, #13
 800a81c:	4610      	mov	r0, r2
 800a81e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a820:	69b9      	ldr	r1, [r7, #24]
 800a822:	486c      	ldr	r0, [pc, #432]	@ (800a9d4 <tcp_input+0x744>)
 800a824:	f7ff fbb6 	bl	8009f94 <tcp_pcb_remove>
        tcp_free(pcb);
 800a828:	69b8      	ldr	r0, [r7, #24]
 800a82a:	f7fe f9a1 	bl	8008b70 <tcp_free>
 800a82e:	e0da      	b.n	800a9e6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a834:	4b63      	ldr	r3, [pc, #396]	@ (800a9c4 <tcp_input+0x734>)
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01d      	beq.n	800a878 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a83c:	4b61      	ldr	r3, [pc, #388]	@ (800a9c4 <tcp_input+0x734>)
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00a      	beq.n	800a862 <tcp_input+0x5d2>
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	6910      	ldr	r0, [r2, #16]
 800a856:	89fa      	ldrh	r2, [r7, #14]
 800a858:	69b9      	ldr	r1, [r7, #24]
 800a85a:	4798      	blx	r3
 800a85c:	4603      	mov	r3, r0
 800a85e:	74fb      	strb	r3, [r7, #19]
 800a860:	e001      	b.n	800a866 <tcp_input+0x5d6>
 800a862:	2300      	movs	r3, #0
 800a864:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a866:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a86a:	f113 0f0d 	cmn.w	r3, #13
 800a86e:	f000 8098 	beq.w	800a9a2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a872:	4b54      	ldr	r3, [pc, #336]	@ (800a9c4 <tcp_input+0x734>)
 800a874:	2200      	movs	r2, #0
 800a876:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a878:	69b8      	ldr	r0, [r7, #24]
 800a87a:	f000 f915 	bl	800aaa8 <tcp_input_delayed_close>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	f040 8090 	bne.w	800a9a6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a886:	4b4d      	ldr	r3, [pc, #308]	@ (800a9bc <tcp_input+0x72c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d041      	beq.n	800a912 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a892:	2b00      	cmp	r3, #0
 800a894:	d006      	beq.n	800a8a4 <tcp_input+0x614>
 800a896:	4b50      	ldr	r3, [pc, #320]	@ (800a9d8 <tcp_input+0x748>)
 800a898:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a89c:	494f      	ldr	r1, [pc, #316]	@ (800a9dc <tcp_input+0x74c>)
 800a89e:	4850      	ldr	r0, [pc, #320]	@ (800a9e0 <tcp_input+0x750>)
 800a8a0:	f007 f934 	bl	8011b0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	8b5b      	ldrh	r3, [r3, #26]
 800a8a8:	f003 0310 	and.w	r3, r3, #16
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d008      	beq.n	800a8c2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a8b0:	4b42      	ldr	r3, [pc, #264]	@ (800a9bc <tcp_input+0x72c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fd feab 	bl	8008610 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a8ba:	69b8      	ldr	r0, [r7, #24]
 800a8bc:	f7fe fc40 	bl	8009140 <tcp_abort>
            goto aborted;
 800a8c0:	e091      	b.n	800a9e6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00c      	beq.n	800a8e6 <tcp_input+0x656>
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	6918      	ldr	r0, [r3, #16]
 800a8d6:	4b39      	ldr	r3, [pc, #228]	@ (800a9bc <tcp_input+0x72c>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	69b9      	ldr	r1, [r7, #24]
 800a8de:	47a0      	blx	r4
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	74fb      	strb	r3, [r7, #19]
 800a8e4:	e008      	b.n	800a8f8 <tcp_input+0x668>
 800a8e6:	4b35      	ldr	r3, [pc, #212]	@ (800a9bc <tcp_input+0x72c>)
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	69b9      	ldr	r1, [r7, #24]
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	f7ff f958 	bl	8009ba4 <tcp_recv_null>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a8f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8fc:	f113 0f0d 	cmn.w	r3, #13
 800a900:	d053      	beq.n	800a9aa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a90a:	4b2c      	ldr	r3, [pc, #176]	@ (800a9bc <tcp_input+0x72c>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a912:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c0 <tcp_input+0x730>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	f003 0320 	and.w	r3, r3, #32
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d030      	beq.n	800a980 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a92a:	7b5a      	ldrb	r2, [r3, #13]
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a930:	f042 0220 	orr.w	r2, r2, #32
 800a934:	b2d2      	uxtb	r2, r2
 800a936:	735a      	strb	r2, [r3, #13]
 800a938:	e022      	b.n	800a980 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a93e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a942:	d005      	beq.n	800a950 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a948:	3301      	adds	r3, #1
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <tcp_input+0x6e2>
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	6918      	ldr	r0, [r3, #16]
 800a964:	2300      	movs	r3, #0
 800a966:	2200      	movs	r2, #0
 800a968:	69b9      	ldr	r1, [r7, #24]
 800a96a:	47a0      	blx	r4
 800a96c:	4603      	mov	r3, r0
 800a96e:	74fb      	strb	r3, [r7, #19]
 800a970:	e001      	b.n	800a976 <tcp_input+0x6e6>
 800a972:	2300      	movs	r3, #0
 800a974:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a976:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a97a:	f113 0f0d 	cmn.w	r3, #13
 800a97e:	d016      	beq.n	800a9ae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a980:	4b13      	ldr	r3, [pc, #76]	@ (800a9d0 <tcp_input+0x740>)
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a986:	69b8      	ldr	r0, [r7, #24]
 800a988:	f000 f88e 	bl	800aaa8 <tcp_input_delayed_close>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d128      	bne.n	800a9e4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a992:	69b8      	ldr	r0, [r7, #24]
 800a994:	f002 faca 	bl	800cf2c <tcp_output>
 800a998:	e025      	b.n	800a9e6 <tcp_input+0x756>
        goto aborted;
 800a99a:	bf00      	nop
 800a99c:	e023      	b.n	800a9e6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a99e:	bf00      	nop
 800a9a0:	e021      	b.n	800a9e6 <tcp_input+0x756>
              goto aborted;
 800a9a2:	bf00      	nop
 800a9a4:	e01f      	b.n	800a9e6 <tcp_input+0x756>
          goto aborted;
 800a9a6:	bf00      	nop
 800a9a8:	e01d      	b.n	800a9e6 <tcp_input+0x756>
            goto aborted;
 800a9aa:	bf00      	nop
 800a9ac:	e01b      	b.n	800a9e6 <tcp_input+0x756>
              goto aborted;
 800a9ae:	bf00      	nop
 800a9b0:	e019      	b.n	800a9e6 <tcp_input+0x756>
 800a9b2:	bf00      	nop
 800a9b4:	20007fc4 	.word	0x20007fc4
 800a9b8:	20007fd8 	.word	0x20007fd8
 800a9bc:	20007ff8 	.word	0x20007ff8
 800a9c0:	20007ff5 	.word	0x20007ff5
 800a9c4:	20007ff0 	.word	0x20007ff0
 800a9c8:	20007ff4 	.word	0x20007ff4
 800a9cc:	20007ff2 	.word	0x20007ff2
 800a9d0:	20007ffc 	.word	0x20007ffc
 800a9d4:	20007fb8 	.word	0x20007fb8
 800a9d8:	08014010 	.word	0x08014010
 800a9dc:	080141c4 	.word	0x080141c4
 800a9e0:	0801405c 	.word	0x0801405c
          goto aborted;
 800a9e4:	bf00      	nop
    tcp_input_pcb = NULL;
 800a9e6:	4b27      	ldr	r3, [pc, #156]	@ (800aa84 <tcp_input+0x7f4>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a9ec:	4b26      	ldr	r3, [pc, #152]	@ (800aa88 <tcp_input+0x7f8>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a9f2:	4b26      	ldr	r3, [pc, #152]	@ (800aa8c <tcp_input+0x7fc>)
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d03f      	beq.n	800aa7a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a9fa:	4b24      	ldr	r3, [pc, #144]	@ (800aa8c <tcp_input+0x7fc>)
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fd fe06 	bl	8008610 <pbuf_free>
      inseg.p = NULL;
 800aa04:	4b21      	ldr	r3, [pc, #132]	@ (800aa8c <tcp_input+0x7fc>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800aa0a:	e036      	b.n	800aa7a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800aa0c:	4b20      	ldr	r3, [pc, #128]	@ (800aa90 <tcp_input+0x800>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	899b      	ldrh	r3, [r3, #12]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fc f9ab 	bl	8006d70 <lwip_htons>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	f003 0304 	and.w	r3, r3, #4
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d118      	bne.n	800aa58 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa26:	4b1b      	ldr	r3, [pc, #108]	@ (800aa94 <tcp_input+0x804>)
 800aa28:	6819      	ldr	r1, [r3, #0]
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa98 <tcp_input+0x808>)
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	4b1a      	ldr	r3, [pc, #104]	@ (800aa9c <tcp_input+0x80c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa36:	4b16      	ldr	r3, [pc, #88]	@ (800aa90 <tcp_input+0x800>)
 800aa38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa3a:	885b      	ldrh	r3, [r3, #2]
 800aa3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa3e:	4a14      	ldr	r2, [pc, #80]	@ (800aa90 <tcp_input+0x800>)
 800aa40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa42:	8812      	ldrh	r2, [r2, #0]
 800aa44:	b292      	uxth	r2, r2
 800aa46:	9202      	str	r2, [sp, #8]
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	4b15      	ldr	r3, [pc, #84]	@ (800aaa0 <tcp_input+0x810>)
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	4b15      	ldr	r3, [pc, #84]	@ (800aaa4 <tcp_input+0x814>)
 800aa50:	4602      	mov	r2, r0
 800aa52:	2000      	movs	r0, #0
 800aa54:	f003 f82a 	bl	800daac <tcp_rst>
    pbuf_free(p);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7fd fdd9 	bl	8008610 <pbuf_free>
  return;
 800aa5e:	e00c      	b.n	800aa7a <tcp_input+0x7ea>
    goto dropped;
 800aa60:	bf00      	nop
 800aa62:	e006      	b.n	800aa72 <tcp_input+0x7e2>
    goto dropped;
 800aa64:	bf00      	nop
 800aa66:	e004      	b.n	800aa72 <tcp_input+0x7e2>
    goto dropped;
 800aa68:	bf00      	nop
 800aa6a:	e002      	b.n	800aa72 <tcp_input+0x7e2>
      goto dropped;
 800aa6c:	bf00      	nop
 800aa6e:	e000      	b.n	800aa72 <tcp_input+0x7e2>
      goto dropped;
 800aa70:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7fd fdcc 	bl	8008610 <pbuf_free>
 800aa78:	e000      	b.n	800aa7c <tcp_input+0x7ec>
  return;
 800aa7a:	bf00      	nop
}
 800aa7c:	3724      	adds	r7, #36	@ 0x24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd90      	pop	{r4, r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20007ffc 	.word	0x20007ffc
 800aa88:	20007ff8 	.word	0x20007ff8
 800aa8c:	20007fc4 	.word	0x20007fc4
 800aa90:	20007fd8 	.word	0x20007fd8
 800aa94:	20007fec 	.word	0x20007fec
 800aa98:	20007ff2 	.word	0x20007ff2
 800aa9c:	20007fe8 	.word	0x20007fe8
 800aaa0:	20005060 	.word	0x20005060
 800aaa4:	20005064 	.word	0x20005064

0800aaa8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <tcp_input_delayed_close+0x1c>
 800aab6:	4b17      	ldr	r3, [pc, #92]	@ (800ab14 <tcp_input_delayed_close+0x6c>)
 800aab8:	f240 225a 	movw	r2, #602	@ 0x25a
 800aabc:	4916      	ldr	r1, [pc, #88]	@ (800ab18 <tcp_input_delayed_close+0x70>)
 800aabe:	4817      	ldr	r0, [pc, #92]	@ (800ab1c <tcp_input_delayed_close+0x74>)
 800aac0:	f007 f824 	bl	8011b0c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aac4:	4b16      	ldr	r3, [pc, #88]	@ (800ab20 <tcp_input_delayed_close+0x78>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 0310 	and.w	r3, r3, #16
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d01c      	beq.n	800ab0a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8b5b      	ldrh	r3, [r3, #26]
 800aad4:	f003 0310 	and.w	r3, r3, #16
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10d      	bne.n	800aaf8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d008      	beq.n	800aaf8 <tcp_input_delayed_close+0x50>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	6912      	ldr	r2, [r2, #16]
 800aaf0:	f06f 010e 	mvn.w	r1, #14
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	480a      	ldr	r0, [pc, #40]	@ (800ab24 <tcp_input_delayed_close+0x7c>)
 800aafc:	f7ff fa4a 	bl	8009f94 <tcp_pcb_remove>
    tcp_free(pcb);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7fe f835 	bl	8008b70 <tcp_free>
    return 1;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	08014010 	.word	0x08014010
 800ab18:	080141e0 	.word	0x080141e0
 800ab1c:	0801405c 	.word	0x0801405c
 800ab20:	20007ff5 	.word	0x20007ff5
 800ab24:	20007fb8 	.word	0x20007fb8

0800ab28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b08b      	sub	sp, #44	@ 0x2c
 800ab2c:	af04      	add	r7, sp, #16
 800ab2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ab30:	4b6f      	ldr	r3, [pc, #444]	@ (800acf0 <tcp_listen_input+0x1c8>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f040 80d2 	bne.w	800ace2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d106      	bne.n	800ab52 <tcp_listen_input+0x2a>
 800ab44:	4b6b      	ldr	r3, [pc, #428]	@ (800acf4 <tcp_listen_input+0x1cc>)
 800ab46:	f240 2281 	movw	r2, #641	@ 0x281
 800ab4a:	496b      	ldr	r1, [pc, #428]	@ (800acf8 <tcp_listen_input+0x1d0>)
 800ab4c:	486b      	ldr	r0, [pc, #428]	@ (800acfc <tcp_listen_input+0x1d4>)
 800ab4e:	f006 ffdd 	bl	8011b0c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ab52:	4b67      	ldr	r3, [pc, #412]	@ (800acf0 <tcp_listen_input+0x1c8>)
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	f003 0310 	and.w	r3, r3, #16
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d019      	beq.n	800ab92 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab5e:	4b68      	ldr	r3, [pc, #416]	@ (800ad00 <tcp_listen_input+0x1d8>)
 800ab60:	6819      	ldr	r1, [r3, #0]
 800ab62:	4b68      	ldr	r3, [pc, #416]	@ (800ad04 <tcp_listen_input+0x1dc>)
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	4b67      	ldr	r3, [pc, #412]	@ (800ad08 <tcp_listen_input+0x1e0>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab6e:	4b67      	ldr	r3, [pc, #412]	@ (800ad0c <tcp_listen_input+0x1e4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab72:	885b      	ldrh	r3, [r3, #2]
 800ab74:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab76:	4a65      	ldr	r2, [pc, #404]	@ (800ad0c <tcp_listen_input+0x1e4>)
 800ab78:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab7a:	8812      	ldrh	r2, [r2, #0]
 800ab7c:	b292      	uxth	r2, r2
 800ab7e:	9202      	str	r2, [sp, #8]
 800ab80:	9301      	str	r3, [sp, #4]
 800ab82:	4b63      	ldr	r3, [pc, #396]	@ (800ad10 <tcp_listen_input+0x1e8>)
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	4b63      	ldr	r3, [pc, #396]	@ (800ad14 <tcp_listen_input+0x1ec>)
 800ab88:	4602      	mov	r2, r0
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f002 ff8e 	bl	800daac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ab90:	e0a9      	b.n	800ace6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ab92:	4b57      	ldr	r3, [pc, #348]	@ (800acf0 <tcp_listen_input+0x1c8>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 80a3 	beq.w	800ace6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	7d5b      	ldrb	r3, [r3, #21]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff f921 	bl	8009dec <tcp_alloc>
 800abaa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d111      	bne.n	800abd6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <tcp_listen_input+0xa8>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6910      	ldr	r0, [r2, #16]
 800abc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abc6:	2100      	movs	r1, #0
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
 800abcc:	73bb      	strb	r3, [r7, #14]
      return;
 800abce:	e08b      	b.n	800ace8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800abd0:	23f0      	movs	r3, #240	@ 0xf0
 800abd2:	73bb      	strb	r3, [r7, #14]
      return;
 800abd4:	e088      	b.n	800ace8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800abd6:	4b50      	ldr	r3, [pc, #320]	@ (800ad18 <tcp_listen_input+0x1f0>)
 800abd8:	695a      	ldr	r2, [r3, #20]
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800abde:	4b4e      	ldr	r3, [pc, #312]	@ (800ad18 <tcp_listen_input+0x1f0>)
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	8ada      	ldrh	r2, [r3, #22]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800abee:	4b47      	ldr	r3, [pc, #284]	@ (800ad0c <tcp_listen_input+0x1e4>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2203      	movs	r2, #3
 800abfe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ac00:	4b41      	ldr	r3, [pc, #260]	@ (800ad08 <tcp_listen_input+0x1e0>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	1c5a      	adds	r2, r3, #1
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ac12:	6978      	ldr	r0, [r7, #20]
 800ac14:	f7ff fa52 	bl	800a0bc <tcp_next_iss>
 800ac18:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ac32:	4b35      	ldr	r3, [pc, #212]	@ (800ad08 <tcp_listen_input+0x1e0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	1e5a      	subs	r2, r3, #1
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	691a      	ldr	r2, [r3, #16]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	7a5b      	ldrb	r3, [r3, #9]
 800ac4e:	f003 030c 	and.w	r3, r3, #12
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	7a1a      	ldrb	r2, [r3, #8]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ac60:	4b2e      	ldr	r3, [pc, #184]	@ (800ad1c <tcp_listen_input+0x1f4>)
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	60da      	str	r2, [r3, #12]
 800ac68:	4a2c      	ldr	r2, [pc, #176]	@ (800ad1c <tcp_listen_input+0x1f4>)
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	f003 f8df 	bl	800de30 <tcp_timer_needed>
 800ac72:	4b2b      	ldr	r3, [pc, #172]	@ (800ad20 <tcp_listen_input+0x1f8>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ac78:	6978      	ldr	r0, [r7, #20]
 800ac7a:	f001 fd8b 	bl	800c794 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ac7e:	4b23      	ldr	r3, [pc, #140]	@ (800ad0c <tcp_listen_input+0x1e4>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	89db      	ldrh	r3, [r3, #14]
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4618      	mov	r0, r3
 800aca2:	f005 fa23 	bl	80100ec <ip4_route>
 800aca6:	4601      	mov	r1, r0
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	3304      	adds	r3, #4
 800acac:	461a      	mov	r2, r3
 800acae:	4620      	mov	r0, r4
 800acb0:	f7ff fa2a 	bl	800a108 <tcp_eff_send_mss_netif>
 800acb4:	4603      	mov	r3, r0
 800acb6:	461a      	mov	r2, r3
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800acbc:	2112      	movs	r1, #18
 800acbe:	6978      	ldr	r0, [r7, #20]
 800acc0:	f002 f846 	bl	800cd50 <tcp_enqueue_flags>
 800acc4:	4603      	mov	r3, r0
 800acc6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800acc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d004      	beq.n	800acda <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800acd0:	2100      	movs	r1, #0
 800acd2:	6978      	ldr	r0, [r7, #20]
 800acd4:	f7fe f976 	bl	8008fc4 <tcp_abandon>
      return;
 800acd8:	e006      	b.n	800ace8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800acda:	6978      	ldr	r0, [r7, #20]
 800acdc:	f002 f926 	bl	800cf2c <tcp_output>
  return;
 800ace0:	e001      	b.n	800ace6 <tcp_listen_input+0x1be>
    return;
 800ace2:	bf00      	nop
 800ace4:	e000      	b.n	800ace8 <tcp_listen_input+0x1c0>
  return;
 800ace6:	bf00      	nop
}
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	bd90      	pop	{r4, r7, pc}
 800acee:	bf00      	nop
 800acf0:	20007ff4 	.word	0x20007ff4
 800acf4:	08014010 	.word	0x08014010
 800acf8:	08014208 	.word	0x08014208
 800acfc:	0801405c 	.word	0x0801405c
 800ad00:	20007fec 	.word	0x20007fec
 800ad04:	20007ff2 	.word	0x20007ff2
 800ad08:	20007fe8 	.word	0x20007fe8
 800ad0c:	20007fd8 	.word	0x20007fd8
 800ad10:	20005060 	.word	0x20005060
 800ad14:	20005064 	.word	0x20005064
 800ad18:	20005050 	.word	0x20005050
 800ad1c:	20007fb8 	.word	0x20007fb8
 800ad20:	20007fc0 	.word	0x20007fc0

0800ad24 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af04      	add	r7, sp, #16
 800ad2a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ad2c:	4b2f      	ldr	r3, [pc, #188]	@ (800adec <tcp_timewait_input+0xc8>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d153      	bne.n	800ade0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <tcp_timewait_input+0x28>
 800ad3e:	4b2c      	ldr	r3, [pc, #176]	@ (800adf0 <tcp_timewait_input+0xcc>)
 800ad40:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ad44:	492b      	ldr	r1, [pc, #172]	@ (800adf4 <tcp_timewait_input+0xd0>)
 800ad46:	482c      	ldr	r0, [pc, #176]	@ (800adf8 <tcp_timewait_input+0xd4>)
 800ad48:	f006 fee0 	bl	8011b0c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ad4c:	4b27      	ldr	r3, [pc, #156]	@ (800adec <tcp_timewait_input+0xc8>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d02a      	beq.n	800adae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ad58:	4b28      	ldr	r3, [pc, #160]	@ (800adfc <tcp_timewait_input+0xd8>)
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	db2d      	blt.n	800adc2 <tcp_timewait_input+0x9e>
 800ad66:	4b25      	ldr	r3, [pc, #148]	@ (800adfc <tcp_timewait_input+0xd8>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ad72:	440b      	add	r3, r1
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dc23      	bgt.n	800adc2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad7a:	4b21      	ldr	r3, [pc, #132]	@ (800ae00 <tcp_timewait_input+0xdc>)
 800ad7c:	6819      	ldr	r1, [r3, #0]
 800ad7e:	4b21      	ldr	r3, [pc, #132]	@ (800ae04 <tcp_timewait_input+0xe0>)
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	4b1d      	ldr	r3, [pc, #116]	@ (800adfc <tcp_timewait_input+0xd8>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ae08 <tcp_timewait_input+0xe4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad8e:	885b      	ldrh	r3, [r3, #2]
 800ad90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad92:	4a1d      	ldr	r2, [pc, #116]	@ (800ae08 <tcp_timewait_input+0xe4>)
 800ad94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad96:	8812      	ldrh	r2, [r2, #0]
 800ad98:	b292      	uxth	r2, r2
 800ad9a:	9202      	str	r2, [sp, #8]
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ae0c <tcp_timewait_input+0xe8>)
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae10 <tcp_timewait_input+0xec>)
 800ada4:	4602      	mov	r2, r0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f002 fe80 	bl	800daac <tcp_rst>
      return;
 800adac:	e01b      	b.n	800ade6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800adae:	4b0f      	ldr	r3, [pc, #60]	@ (800adec <tcp_timewait_input+0xc8>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800adba:	4b16      	ldr	r3, [pc, #88]	@ (800ae14 <tcp_timewait_input+0xf0>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800adc2:	4b10      	ldr	r3, [pc, #64]	@ (800ae04 <tcp_timewait_input+0xe0>)
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00c      	beq.n	800ade4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	8b5b      	ldrh	r3, [r3, #26]
 800adce:	f043 0302 	orr.w	r3, r3, #2
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f002 f8a7 	bl	800cf2c <tcp_output>
  }
  return;
 800adde:	e001      	b.n	800ade4 <tcp_timewait_input+0xc0>
    return;
 800ade0:	bf00      	nop
 800ade2:	e000      	b.n	800ade6 <tcp_timewait_input+0xc2>
  return;
 800ade4:	bf00      	nop
}
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20007ff4 	.word	0x20007ff4
 800adf0:	08014010 	.word	0x08014010
 800adf4:	08014228 	.word	0x08014228
 800adf8:	0801405c 	.word	0x0801405c
 800adfc:	20007fe8 	.word	0x20007fe8
 800ae00:	20007fec 	.word	0x20007fec
 800ae04:	20007ff2 	.word	0x20007ff2
 800ae08:	20007fd8 	.word	0x20007fd8
 800ae0c:	20005060 	.word	0x20005060
 800ae10:	20005064 	.word	0x20005064
 800ae14:	20007fac 	.word	0x20007fac

0800ae18 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ae18:	b590      	push	{r4, r7, lr}
 800ae1a:	b08d      	sub	sp, #52	@ 0x34
 800ae1c:	af04      	add	r7, sp, #16
 800ae1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <tcp_process+0x24>
 800ae2e:	4b9d      	ldr	r3, [pc, #628]	@ (800b0a4 <tcp_process+0x28c>)
 800ae30:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ae34:	499c      	ldr	r1, [pc, #624]	@ (800b0a8 <tcp_process+0x290>)
 800ae36:	489d      	ldr	r0, [pc, #628]	@ (800b0ac <tcp_process+0x294>)
 800ae38:	f006 fe68 	bl	8011b0c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ae3c:	4b9c      	ldr	r3, [pc, #624]	@ (800b0b0 <tcp_process+0x298>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d04e      	beq.n	800aee6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	7d1b      	ldrb	r3, [r3, #20]
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d108      	bne.n	800ae62 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae54:	4b97      	ldr	r3, [pc, #604]	@ (800b0b4 <tcp_process+0x29c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d123      	bne.n	800aea4 <tcp_process+0x8c>
        acceptable = 1;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	77fb      	strb	r3, [r7, #31]
 800ae60:	e020      	b.n	800aea4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae66:	4b94      	ldr	r3, [pc, #592]	@ (800b0b8 <tcp_process+0x2a0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d102      	bne.n	800ae74 <tcp_process+0x5c>
        acceptable = 1;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	77fb      	strb	r3, [r7, #31]
 800ae72:	e017      	b.n	800aea4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae74:	4b90      	ldr	r3, [pc, #576]	@ (800b0b8 <tcp_process+0x2a0>)
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	db10      	blt.n	800aea4 <tcp_process+0x8c>
 800ae82:	4b8d      	ldr	r3, [pc, #564]	@ (800b0b8 <tcp_process+0x2a0>)
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ae8e:	440b      	add	r3, r1
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	dc06      	bgt.n	800aea4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	8b5b      	ldrh	r3, [r3, #26]
 800ae9a:	f043 0302 	orr.w	r3, r3, #2
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aea4:	7ffb      	ldrb	r3, [r7, #31]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01b      	beq.n	800aee2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	7d1b      	ldrb	r3, [r3, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <tcp_process+0xa8>
 800aeb2:	4b7c      	ldr	r3, [pc, #496]	@ (800b0a4 <tcp_process+0x28c>)
 800aeb4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800aeb8:	4980      	ldr	r1, [pc, #512]	@ (800b0bc <tcp_process+0x2a4>)
 800aeba:	487c      	ldr	r0, [pc, #496]	@ (800b0ac <tcp_process+0x294>)
 800aebc:	f006 fe26 	bl	8011b0c <iprintf>
      recv_flags |= TF_RESET;
 800aec0:	4b7f      	ldr	r3, [pc, #508]	@ (800b0c0 <tcp_process+0x2a8>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	f043 0308 	orr.w	r3, r3, #8
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b7d      	ldr	r3, [pc, #500]	@ (800b0c0 <tcp_process+0x2a8>)
 800aecc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	8b5b      	ldrh	r3, [r3, #26]
 800aed2:	f023 0301 	bic.w	r3, r3, #1
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aedc:	f06f 030d 	mvn.w	r3, #13
 800aee0:	e37a      	b.n	800b5d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	e378      	b.n	800b5d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aee6:	4b72      	ldr	r3, [pc, #456]	@ (800b0b0 <tcp_process+0x298>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d010      	beq.n	800af14 <tcp_process+0xfc>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	7d1b      	ldrb	r3, [r3, #20]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d00c      	beq.n	800af14 <tcp_process+0xfc>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7d1b      	ldrb	r3, [r3, #20]
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d008      	beq.n	800af14 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	8b5b      	ldrh	r3, [r3, #26]
 800af06:	f043 0302 	orr.w	r3, r3, #2
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	e361      	b.n	800b5d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	8b5b      	ldrh	r3, [r3, #26]
 800af18:	f003 0310 	and.w	r3, r3, #16
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d103      	bne.n	800af28 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800af20:	4b68      	ldr	r3, [pc, #416]	@ (800b0c4 <tcp_process+0x2ac>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fc2b 	bl	800c794 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	7d1b      	ldrb	r3, [r3, #20]
 800af42:	3b02      	subs	r3, #2
 800af44:	2b07      	cmp	r3, #7
 800af46:	f200 8337 	bhi.w	800b5b8 <tcp_process+0x7a0>
 800af4a:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <tcp_process+0x138>)
 800af4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af50:	0800af71 	.word	0x0800af71
 800af54:	0800b1a1 	.word	0x0800b1a1
 800af58:	0800b319 	.word	0x0800b319
 800af5c:	0800b343 	.word	0x0800b343
 800af60:	0800b467 	.word	0x0800b467
 800af64:	0800b319 	.word	0x0800b319
 800af68:	0800b4f3 	.word	0x0800b4f3
 800af6c:	0800b583 	.word	0x0800b583
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800af70:	4b4f      	ldr	r3, [pc, #316]	@ (800b0b0 <tcp_process+0x298>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	f003 0310 	and.w	r3, r3, #16
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 80e4 	beq.w	800b146 <tcp_process+0x32e>
 800af7e:	4b4c      	ldr	r3, [pc, #304]	@ (800b0b0 <tcp_process+0x298>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 80dd 	beq.w	800b146 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af90:	1c5a      	adds	r2, r3, #1
 800af92:	4b48      	ldr	r3, [pc, #288]	@ (800b0b4 <tcp_process+0x29c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	f040 80d5 	bne.w	800b146 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800af9c:	4b46      	ldr	r3, [pc, #280]	@ (800b0b8 <tcp_process+0x2a0>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800afae:	4b41      	ldr	r3, [pc, #260]	@ (800b0b4 <tcp_process+0x29c>)
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800afb6:	4b44      	ldr	r3, [pc, #272]	@ (800b0c8 <tcp_process+0x2b0>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	89db      	ldrh	r3, [r3, #14]
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800afd0:	4b39      	ldr	r3, [pc, #228]	@ (800b0b8 <tcp_process+0x2a0>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	1e5a      	subs	r2, r3, #1
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2204      	movs	r2, #4
 800afde:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4618      	mov	r0, r3
 800afea:	f005 f87f 	bl	80100ec <ip4_route>
 800afee:	4601      	mov	r1, r0
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	461a      	mov	r2, r3
 800aff6:	4620      	mov	r0, r4
 800aff8:	f7ff f886 	bl	800a108 <tcp_eff_send_mss_netif>
 800affc:	4603      	mov	r3, r0
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b008:	009a      	lsls	r2, r3, #2
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b014:	428b      	cmp	r3, r1
 800b016:	bf38      	it	cc
 800b018:	460b      	movcc	r3, r1
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d204      	bcs.n	800b028 <tcp_process+0x210>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	b29b      	uxth	r3, r3
 800b026:	e00d      	b.n	800b044 <tcp_process+0x22c>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b02c:	005b      	lsls	r3, r3, #1
 800b02e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b032:	4293      	cmp	r3, r2
 800b034:	d904      	bls.n	800b040 <tcp_process+0x228>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	e001      	b.n	800b044 <tcp_process+0x22c>
 800b040:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b050:	2b00      	cmp	r3, #0
 800b052:	d106      	bne.n	800b062 <tcp_process+0x24a>
 800b054:	4b13      	ldr	r3, [pc, #76]	@ (800b0a4 <tcp_process+0x28c>)
 800b056:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b05a:	491c      	ldr	r1, [pc, #112]	@ (800b0cc <tcp_process+0x2b4>)
 800b05c:	4813      	ldr	r0, [pc, #76]	@ (800b0ac <tcp_process+0x294>)
 800b05e:	f006 fd55 	bl	8011b0c <iprintf>
        --pcb->snd_queuelen;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b068:	3b01      	subs	r3, #1
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b076:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d12a      	bne.n	800b0d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b082:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d106      	bne.n	800b098 <tcp_process+0x280>
 800b08a:	4b06      	ldr	r3, [pc, #24]	@ (800b0a4 <tcp_process+0x28c>)
 800b08c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b090:	490f      	ldr	r1, [pc, #60]	@ (800b0d0 <tcp_process+0x2b8>)
 800b092:	4806      	ldr	r0, [pc, #24]	@ (800b0ac <tcp_process+0x294>)
 800b094:	f006 fd3a 	bl	8011b0c <iprintf>
          pcb->unsent = rseg->next;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b0a0:	e01c      	b.n	800b0dc <tcp_process+0x2c4>
 800b0a2:	bf00      	nop
 800b0a4:	08014010 	.word	0x08014010
 800b0a8:	08014248 	.word	0x08014248
 800b0ac:	0801405c 	.word	0x0801405c
 800b0b0:	20007ff4 	.word	0x20007ff4
 800b0b4:	20007fec 	.word	0x20007fec
 800b0b8:	20007fe8 	.word	0x20007fe8
 800b0bc:	08014264 	.word	0x08014264
 800b0c0:	20007ff5 	.word	0x20007ff5
 800b0c4:	20007fac 	.word	0x20007fac
 800b0c8:	20007fd8 	.word	0x20007fd8
 800b0cc:	08014284 	.word	0x08014284
 800b0d0:	0801429c 	.word	0x0801429c
        } else {
          pcb->unacked = rseg->next;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b0dc:	6978      	ldr	r0, [r7, #20]
 800b0de:	f7fe fd1c 	bl	8009b1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d104      	bne.n	800b0f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0f0:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b0f2:	e006      	b.n	800b102 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <tcp_process+0x30a>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	6910      	ldr	r0, [r2, #16]
 800b116:	2200      	movs	r2, #0
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	4798      	blx	r3
 800b11c:	4603      	mov	r3, r0
 800b11e:	77bb      	strb	r3, [r7, #30]
 800b120:	e001      	b.n	800b126 <tcp_process+0x30e>
 800b122:	2300      	movs	r3, #0
 800b124:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800b126:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b12a:	f113 0f0d 	cmn.w	r3, #13
 800b12e:	d102      	bne.n	800b136 <tcp_process+0x31e>
          return ERR_ABRT;
 800b130:	f06f 030c 	mvn.w	r3, #12
 800b134:	e250      	b.n	800b5d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	8b5b      	ldrh	r3, [r3, #26]
 800b13a:	f043 0302 	orr.w	r3, r3, #2
 800b13e:	b29a      	uxth	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b144:	e23a      	b.n	800b5bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b146:	4b98      	ldr	r3, [pc, #608]	@ (800b3a8 <tcp_process+0x590>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	f003 0310 	and.w	r3, r3, #16
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8234 	beq.w	800b5bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b154:	4b95      	ldr	r3, [pc, #596]	@ (800b3ac <tcp_process+0x594>)
 800b156:	6819      	ldr	r1, [r3, #0]
 800b158:	4b95      	ldr	r3, [pc, #596]	@ (800b3b0 <tcp_process+0x598>)
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	461a      	mov	r2, r3
 800b15e:	4b95      	ldr	r3, [pc, #596]	@ (800b3b4 <tcp_process+0x59c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b164:	4b94      	ldr	r3, [pc, #592]	@ (800b3b8 <tcp_process+0x5a0>)
 800b166:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b168:	885b      	ldrh	r3, [r3, #2]
 800b16a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b16c:	4a92      	ldr	r2, [pc, #584]	@ (800b3b8 <tcp_process+0x5a0>)
 800b16e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b170:	8812      	ldrh	r2, [r2, #0]
 800b172:	b292      	uxth	r2, r2
 800b174:	9202      	str	r2, [sp, #8]
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	4b90      	ldr	r3, [pc, #576]	@ (800b3bc <tcp_process+0x5a4>)
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	4b90      	ldr	r3, [pc, #576]	@ (800b3c0 <tcp_process+0x5a8>)
 800b17e:	4602      	mov	r2, r0
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f002 fc93 	bl	800daac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b18c:	2b05      	cmp	r3, #5
 800b18e:	f200 8215 	bhi.w	800b5bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f002 fa5f 	bl	800d65c <tcp_rexmit_rto>
      break;
 800b19e:	e20d      	b.n	800b5bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b1a0:	4b81      	ldr	r3, [pc, #516]	@ (800b3a8 <tcp_process+0x590>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	f003 0310 	and.w	r3, r3, #16
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 80a1 	beq.w	800b2f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1ae:	4b7f      	ldr	r3, [pc, #508]	@ (800b3ac <tcp_process+0x594>)
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	db7e      	blt.n	800b2bc <tcp_process+0x4a4>
 800b1be:	4b7b      	ldr	r3, [pc, #492]	@ (800b3ac <tcp_process+0x594>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dc77      	bgt.n	800b2bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2204      	movs	r2, #4
 800b1d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d102      	bne.n	800b1e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b1da:	23fa      	movs	r3, #250	@ 0xfa
 800b1dc:	77bb      	strb	r3, [r7, #30]
 800b1de:	e01d      	b.n	800b21c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <tcp_process+0x3e0>
 800b1ea:	4b76      	ldr	r3, [pc, #472]	@ (800b3c4 <tcp_process+0x5ac>)
 800b1ec:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b1f0:	4975      	ldr	r1, [pc, #468]	@ (800b3c8 <tcp_process+0x5b0>)
 800b1f2:	4876      	ldr	r0, [pc, #472]	@ (800b3cc <tcp_process+0x5b4>)
 800b1f4:	f006 fc8a 	bl	8011b0c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00a      	beq.n	800b218 <tcp_process+0x400>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	6910      	ldr	r0, [r2, #16]
 800b20c:	2200      	movs	r2, #0
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	4798      	blx	r3
 800b212:	4603      	mov	r3, r0
 800b214:	77bb      	strb	r3, [r7, #30]
 800b216:	e001      	b.n	800b21c <tcp_process+0x404>
 800b218:	23f0      	movs	r3, #240	@ 0xf0
 800b21a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800b21c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00a      	beq.n	800b23a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b224:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b228:	f113 0f0d 	cmn.w	r3, #13
 800b22c:	d002      	beq.n	800b234 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7fd ff86 	bl	8009140 <tcp_abort>
            }
            return ERR_ABRT;
 800b234:	f06f 030c 	mvn.w	r3, #12
 800b238:	e1ce      	b.n	800b5d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fae0 	bl	800b800 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b240:	4b63      	ldr	r3, [pc, #396]	@ (800b3d0 <tcp_process+0x5b8>)
 800b242:	881b      	ldrh	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d005      	beq.n	800b254 <tcp_process+0x43c>
            recv_acked--;
 800b248:	4b61      	ldr	r3, [pc, #388]	@ (800b3d0 <tcp_process+0x5b8>)
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	b29a      	uxth	r2, r3
 800b250:	4b5f      	ldr	r3, [pc, #380]	@ (800b3d0 <tcp_process+0x5b8>)
 800b252:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b258:	009a      	lsls	r2, r3, #2
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b264:	428b      	cmp	r3, r1
 800b266:	bf38      	it	cc
 800b268:	460b      	movcc	r3, r1
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d204      	bcs.n	800b278 <tcp_process+0x460>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	b29b      	uxth	r3, r3
 800b276:	e00d      	b.n	800b294 <tcp_process+0x47c>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b282:	4293      	cmp	r3, r2
 800b284:	d904      	bls.n	800b290 <tcp_process+0x478>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	e001      	b.n	800b294 <tcp_process+0x47c>
 800b290:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b29a:	4b4e      	ldr	r3, [pc, #312]	@ (800b3d4 <tcp_process+0x5bc>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d037      	beq.n	800b316 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	8b5b      	ldrh	r3, [r3, #26]
 800b2aa:	f043 0302 	orr.w	r3, r3, #2
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2207      	movs	r2, #7
 800b2b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b2ba:	e02c      	b.n	800b316 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2bc:	4b3b      	ldr	r3, [pc, #236]	@ (800b3ac <tcp_process+0x594>)
 800b2be:	6819      	ldr	r1, [r3, #0]
 800b2c0:	4b3b      	ldr	r3, [pc, #236]	@ (800b3b0 <tcp_process+0x598>)
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4b3b      	ldr	r3, [pc, #236]	@ (800b3b4 <tcp_process+0x59c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2cc:	4b3a      	ldr	r3, [pc, #232]	@ (800b3b8 <tcp_process+0x5a0>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2d0:	885b      	ldrh	r3, [r3, #2]
 800b2d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2d4:	4a38      	ldr	r2, [pc, #224]	@ (800b3b8 <tcp_process+0x5a0>)
 800b2d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2d8:	8812      	ldrh	r2, [r2, #0]
 800b2da:	b292      	uxth	r2, r2
 800b2dc:	9202      	str	r2, [sp, #8]
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	4b36      	ldr	r3, [pc, #216]	@ (800b3bc <tcp_process+0x5a4>)
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	4b36      	ldr	r3, [pc, #216]	@ (800b3c0 <tcp_process+0x5a8>)
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f002 fbdf 	bl	800daac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b2ee:	e167      	b.n	800b5c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b2f0:	4b2d      	ldr	r3, [pc, #180]	@ (800b3a8 <tcp_process+0x590>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 8161 	beq.w	800b5c0 <tcp_process+0x7a8>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b302:	1e5a      	subs	r2, r3, #1
 800b304:	4b2b      	ldr	r3, [pc, #172]	@ (800b3b4 <tcp_process+0x59c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	429a      	cmp	r2, r3
 800b30a:	f040 8159 	bne.w	800b5c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f002 f9c6 	bl	800d6a0 <tcp_rexmit>
      break;
 800b314:	e154      	b.n	800b5c0 <tcp_process+0x7a8>
 800b316:	e153      	b.n	800b5c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fa71 	bl	800b800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b31e:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d4 <tcp_process+0x5bc>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	f003 0320 	and.w	r3, r3, #32
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 814c 	beq.w	800b5c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	8b5b      	ldrh	r3, [r3, #26]
 800b330:	f043 0302 	orr.w	r3, r3, #2
 800b334:	b29a      	uxth	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2207      	movs	r2, #7
 800b33e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b340:	e140      	b.n	800b5c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fa5c 	bl	800b800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b348:	4b22      	ldr	r3, [pc, #136]	@ (800b3d4 <tcp_process+0x5bc>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	f003 0320 	and.w	r3, r3, #32
 800b350:	2b00      	cmp	r3, #0
 800b352:	d071      	beq.n	800b438 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b354:	4b14      	ldr	r3, [pc, #80]	@ (800b3a8 <tcp_process+0x590>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	f003 0310 	and.w	r3, r3, #16
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d060      	beq.n	800b422 <tcp_process+0x60a>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b364:	4b11      	ldr	r3, [pc, #68]	@ (800b3ac <tcp_process+0x594>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d15a      	bne.n	800b422 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b370:	2b00      	cmp	r3, #0
 800b372:	d156      	bne.n	800b422 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8b5b      	ldrh	r3, [r3, #26]
 800b378:	f043 0302 	orr.w	r3, r3, #2
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7fe fdb6 	bl	8009ef4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b388:	4b13      	ldr	r3, [pc, #76]	@ (800b3d8 <tcp_process+0x5c0>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d105      	bne.n	800b39e <tcp_process+0x586>
 800b392:	4b11      	ldr	r3, [pc, #68]	@ (800b3d8 <tcp_process+0x5c0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	4a0f      	ldr	r2, [pc, #60]	@ (800b3d8 <tcp_process+0x5c0>)
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	e02e      	b.n	800b3fc <tcp_process+0x5e4>
 800b39e:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d8 <tcp_process+0x5c0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	613b      	str	r3, [r7, #16]
 800b3a4:	e027      	b.n	800b3f6 <tcp_process+0x5de>
 800b3a6:	bf00      	nop
 800b3a8:	20007ff4 	.word	0x20007ff4
 800b3ac:	20007fec 	.word	0x20007fec
 800b3b0:	20007ff2 	.word	0x20007ff2
 800b3b4:	20007fe8 	.word	0x20007fe8
 800b3b8:	20007fd8 	.word	0x20007fd8
 800b3bc:	20005060 	.word	0x20005060
 800b3c0:	20005064 	.word	0x20005064
 800b3c4:	08014010 	.word	0x08014010
 800b3c8:	080142b0 	.word	0x080142b0
 800b3cc:	0801405c 	.word	0x0801405c
 800b3d0:	20007ff0 	.word	0x20007ff0
 800b3d4:	20007ff5 	.word	0x20007ff5
 800b3d8:	20007fb8 	.word	0x20007fb8
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d104      	bne.n	800b3f0 <tcp_process+0x5d8>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	60da      	str	r2, [r3, #12]
 800b3ee:	e005      	b.n	800b3fc <tcp_process+0x5e4>
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1ef      	bne.n	800b3dc <tcp_process+0x5c4>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	60da      	str	r2, [r3, #12]
 800b402:	4b77      	ldr	r3, [pc, #476]	@ (800b5e0 <tcp_process+0x7c8>)
 800b404:	2201      	movs	r2, #1
 800b406:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	220a      	movs	r2, #10
 800b40c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b40e:	4b75      	ldr	r3, [pc, #468]	@ (800b5e4 <tcp_process+0x7cc>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60da      	str	r2, [r3, #12]
 800b416:	4a73      	ldr	r2, [pc, #460]	@ (800b5e4 <tcp_process+0x7cc>)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	f002 fd08 	bl	800de30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b420:	e0d2      	b.n	800b5c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8b5b      	ldrh	r3, [r3, #26]
 800b426:	f043 0302 	orr.w	r3, r3, #2
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2208      	movs	r2, #8
 800b434:	751a      	strb	r2, [r3, #20]
      break;
 800b436:	e0c7      	b.n	800b5c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b438:	4b6b      	ldr	r3, [pc, #428]	@ (800b5e8 <tcp_process+0x7d0>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	f003 0310 	and.w	r3, r3, #16
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 80c1 	beq.w	800b5c8 <tcp_process+0x7b0>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b44a:	4b68      	ldr	r3, [pc, #416]	@ (800b5ec <tcp_process+0x7d4>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	f040 80ba 	bne.w	800b5c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f040 80b5 	bne.w	800b5c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2206      	movs	r2, #6
 800b462:	751a      	strb	r2, [r3, #20]
      break;
 800b464:	e0b0      	b.n	800b5c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f9ca 	bl	800b800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b46c:	4b60      	ldr	r3, [pc, #384]	@ (800b5f0 <tcp_process+0x7d8>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f003 0320 	and.w	r3, r3, #32
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 80a9 	beq.w	800b5cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	8b5b      	ldrh	r3, [r3, #26]
 800b47e:	f043 0302 	orr.w	r3, r3, #2
 800b482:	b29a      	uxth	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7fe fd33 	bl	8009ef4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b48e:	4b59      	ldr	r3, [pc, #356]	@ (800b5f4 <tcp_process+0x7dc>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	429a      	cmp	r2, r3
 800b496:	d105      	bne.n	800b4a4 <tcp_process+0x68c>
 800b498:	4b56      	ldr	r3, [pc, #344]	@ (800b5f4 <tcp_process+0x7dc>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	4a55      	ldr	r2, [pc, #340]	@ (800b5f4 <tcp_process+0x7dc>)
 800b4a0:	6013      	str	r3, [r2, #0]
 800b4a2:	e013      	b.n	800b4cc <tcp_process+0x6b4>
 800b4a4:	4b53      	ldr	r3, [pc, #332]	@ (800b5f4 <tcp_process+0x7dc>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60fb      	str	r3, [r7, #12]
 800b4aa:	e00c      	b.n	800b4c6 <tcp_process+0x6ae>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d104      	bne.n	800b4c0 <tcp_process+0x6a8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68da      	ldr	r2, [r3, #12]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	60da      	str	r2, [r3, #12]
 800b4be:	e005      	b.n	800b4cc <tcp_process+0x6b4>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1ef      	bne.n	800b4ac <tcp_process+0x694>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	60da      	str	r2, [r3, #12]
 800b4d2:	4b43      	ldr	r3, [pc, #268]	@ (800b5e0 <tcp_process+0x7c8>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	220a      	movs	r2, #10
 800b4dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b4de:	4b41      	ldr	r3, [pc, #260]	@ (800b5e4 <tcp_process+0x7cc>)
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	60da      	str	r2, [r3, #12]
 800b4e6:	4a3f      	ldr	r2, [pc, #252]	@ (800b5e4 <tcp_process+0x7cc>)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	f002 fca0 	bl	800de30 <tcp_timer_needed>
      }
      break;
 800b4f0:	e06c      	b.n	800b5cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f984 	bl	800b800 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4f8:	4b3b      	ldr	r3, [pc, #236]	@ (800b5e8 <tcp_process+0x7d0>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 0310 	and.w	r3, r3, #16
 800b500:	2b00      	cmp	r3, #0
 800b502:	d065      	beq.n	800b5d0 <tcp_process+0x7b8>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b508:	4b38      	ldr	r3, [pc, #224]	@ (800b5ec <tcp_process+0x7d4>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d15f      	bne.n	800b5d0 <tcp_process+0x7b8>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b514:	2b00      	cmp	r3, #0
 800b516:	d15b      	bne.n	800b5d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7fe fceb 	bl	8009ef4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b51e:	4b35      	ldr	r3, [pc, #212]	@ (800b5f4 <tcp_process+0x7dc>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	429a      	cmp	r2, r3
 800b526:	d105      	bne.n	800b534 <tcp_process+0x71c>
 800b528:	4b32      	ldr	r3, [pc, #200]	@ (800b5f4 <tcp_process+0x7dc>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	4a31      	ldr	r2, [pc, #196]	@ (800b5f4 <tcp_process+0x7dc>)
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e013      	b.n	800b55c <tcp_process+0x744>
 800b534:	4b2f      	ldr	r3, [pc, #188]	@ (800b5f4 <tcp_process+0x7dc>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	e00c      	b.n	800b556 <tcp_process+0x73e>
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	429a      	cmp	r2, r3
 800b544:	d104      	bne.n	800b550 <tcp_process+0x738>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	60da      	str	r2, [r3, #12]
 800b54e:	e005      	b.n	800b55c <tcp_process+0x744>
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	61bb      	str	r3, [r7, #24]
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1ef      	bne.n	800b53c <tcp_process+0x724>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	60da      	str	r2, [r3, #12]
 800b562:	4b1f      	ldr	r3, [pc, #124]	@ (800b5e0 <tcp_process+0x7c8>)
 800b564:	2201      	movs	r2, #1
 800b566:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	220a      	movs	r2, #10
 800b56c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b56e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e4 <tcp_process+0x7cc>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	60da      	str	r2, [r3, #12]
 800b576:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e4 <tcp_process+0x7cc>)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6013      	str	r3, [r2, #0]
 800b57c:	f002 fc58 	bl	800de30 <tcp_timer_needed>
      }
      break;
 800b580:	e026      	b.n	800b5d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f93c 	bl	800b800 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b588:	4b17      	ldr	r3, [pc, #92]	@ (800b5e8 <tcp_process+0x7d0>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	f003 0310 	and.w	r3, r3, #16
 800b590:	2b00      	cmp	r3, #0
 800b592:	d01f      	beq.n	800b5d4 <tcp_process+0x7bc>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b598:	4b14      	ldr	r3, [pc, #80]	@ (800b5ec <tcp_process+0x7d4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d119      	bne.n	800b5d4 <tcp_process+0x7bc>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d115      	bne.n	800b5d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b5a8:	4b11      	ldr	r3, [pc, #68]	@ (800b5f0 <tcp_process+0x7d8>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	f043 0310 	orr.w	r3, r3, #16
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f0 <tcp_process+0x7d8>)
 800b5b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b5b6:	e00d      	b.n	800b5d4 <tcp_process+0x7bc>
    default:
      break;
 800b5b8:	bf00      	nop
 800b5ba:	e00c      	b.n	800b5d6 <tcp_process+0x7be>
      break;
 800b5bc:	bf00      	nop
 800b5be:	e00a      	b.n	800b5d6 <tcp_process+0x7be>
      break;
 800b5c0:	bf00      	nop
 800b5c2:	e008      	b.n	800b5d6 <tcp_process+0x7be>
      break;
 800b5c4:	bf00      	nop
 800b5c6:	e006      	b.n	800b5d6 <tcp_process+0x7be>
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e004      	b.n	800b5d6 <tcp_process+0x7be>
      break;
 800b5cc:	bf00      	nop
 800b5ce:	e002      	b.n	800b5d6 <tcp_process+0x7be>
      break;
 800b5d0:	bf00      	nop
 800b5d2:	e000      	b.n	800b5d6 <tcp_process+0x7be>
      break;
 800b5d4:	bf00      	nop
  }
  return ERR_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3724      	adds	r7, #36	@ 0x24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd90      	pop	{r4, r7, pc}
 800b5e0:	20007fc0 	.word	0x20007fc0
 800b5e4:	20007fbc 	.word	0x20007fbc
 800b5e8:	20007ff4 	.word	0x20007ff4
 800b5ec:	20007fec 	.word	0x20007fec
 800b5f0:	20007ff5 	.word	0x20007ff5
 800b5f4:	20007fb8 	.word	0x20007fb8

0800b5f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b5f8:	b590      	push	{r4, r7, lr}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d106      	bne.n	800b616 <tcp_oos_insert_segment+0x1e>
 800b608:	4b3b      	ldr	r3, [pc, #236]	@ (800b6f8 <tcp_oos_insert_segment+0x100>)
 800b60a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b60e:	493b      	ldr	r1, [pc, #236]	@ (800b6fc <tcp_oos_insert_segment+0x104>)
 800b610:	483b      	ldr	r0, [pc, #236]	@ (800b700 <tcp_oos_insert_segment+0x108>)
 800b612:	f006 fa7b 	bl	8011b0c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	899b      	ldrh	r3, [r3, #12]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fb fba6 	bl	8006d70 <lwip_htons>
 800b624:	4603      	mov	r3, r0
 800b626:	b2db      	uxtb	r3, r3
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d028      	beq.n	800b682 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b630:	6838      	ldr	r0, [r7, #0]
 800b632:	f7fe fa5d 	bl	8009af0 <tcp_segs_free>
    next = NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	603b      	str	r3, [r7, #0]
 800b63a:	e056      	b.n	800b6ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	899b      	ldrh	r3, [r3, #12]
 800b642:	b29b      	uxth	r3, r3
 800b644:	4618      	mov	r0, r3
 800b646:	f7fb fb93 	bl	8006d70 <lwip_htons>
 800b64a:	4603      	mov	r3, r0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00d      	beq.n	800b672 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	899b      	ldrh	r3, [r3, #12]
 800b65c:	b29c      	uxth	r4, r3
 800b65e:	2001      	movs	r0, #1
 800b660:	f7fb fb86 	bl	8006d70 <lwip_htons>
 800b664:	4603      	mov	r3, r0
 800b666:	461a      	mov	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	4322      	orrs	r2, r4
 800b66e:	b292      	uxth	r2, r2
 800b670:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7fe fa4c 	bl	8009b1a <tcp_seg_free>
    while (next &&
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00e      	beq.n	800b6a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	891b      	ldrh	r3, [r3, #8]
 800b68c:	461a      	mov	r2, r3
 800b68e:	4b1d      	ldr	r3, [pc, #116]	@ (800b704 <tcp_oos_insert_segment+0x10c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	441a      	add	r2, r3
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	8909      	ldrh	r1, [r1, #8]
 800b69e:	440b      	add	r3, r1
 800b6a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	daca      	bge.n	800b63c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d01e      	beq.n	800b6ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	891b      	ldrh	r3, [r3, #8]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4b14      	ldr	r3, [pc, #80]	@ (800b704 <tcp_oos_insert_segment+0x10c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	441a      	add	r2, r3
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	dd12      	ble.n	800b6ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b704 <tcp_oos_insert_segment+0x10c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	891b      	ldrh	r3, [r3, #8]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f7fc fe0d 	bl	8008304 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	601a      	str	r2, [r3, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd90      	pop	{r4, r7, pc}
 800b6f8:	08014010 	.word	0x08014010
 800b6fc:	080142d0 	.word	0x080142d0
 800b700:	0801405c 	.word	0x0801405c
 800b704:	20007fe8 	.word	0x20007fe8

0800b708 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b708:	b5b0      	push	{r4, r5, r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b716:	e03e      	b.n	800b796 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	4618      	mov	r0, r3
 800b728:	f7fc fffa 	bl	8008720 <pbuf_clen>
 800b72c:	4603      	mov	r3, r0
 800b72e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b736:	8a7a      	ldrh	r2, [r7, #18]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d906      	bls.n	800b74a <tcp_free_acked_segments+0x42>
 800b73c:	4b2a      	ldr	r3, [pc, #168]	@ (800b7e8 <tcp_free_acked_segments+0xe0>)
 800b73e:	f240 4257 	movw	r2, #1111	@ 0x457
 800b742:	492a      	ldr	r1, [pc, #168]	@ (800b7ec <tcp_free_acked_segments+0xe4>)
 800b744:	482a      	ldr	r0, [pc, #168]	@ (800b7f0 <tcp_free_acked_segments+0xe8>)
 800b746:	f006 f9e1 	bl	8011b0c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800b750:	8a7b      	ldrh	r3, [r7, #18]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	b29a      	uxth	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	891a      	ldrh	r2, [r3, #8]
 800b760:	4b24      	ldr	r3, [pc, #144]	@ (800b7f4 <tcp_free_acked_segments+0xec>)
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	4413      	add	r3, r2
 800b766:	b29a      	uxth	r2, r3
 800b768:	4b22      	ldr	r3, [pc, #136]	@ (800b7f4 <tcp_free_acked_segments+0xec>)
 800b76a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b76c:	6978      	ldr	r0, [r7, #20]
 800b76e:	f7fe f9d4 	bl	8009b1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00c      	beq.n	800b796 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d109      	bne.n	800b796 <tcp_free_acked_segments+0x8e>
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d106      	bne.n	800b796 <tcp_free_acked_segments+0x8e>
 800b788:	4b17      	ldr	r3, [pc, #92]	@ (800b7e8 <tcp_free_acked_segments+0xe0>)
 800b78a:	f240 4261 	movw	r2, #1121	@ 0x461
 800b78e:	491a      	ldr	r1, [pc, #104]	@ (800b7f8 <tcp_free_acked_segments+0xf0>)
 800b790:	4817      	ldr	r0, [pc, #92]	@ (800b7f0 <tcp_free_acked_segments+0xe8>)
 800b792:	f006 f9bb 	bl	8011b0c <iprintf>
  while (seg_list != NULL &&
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d020      	beq.n	800b7de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fb fafa 	bl	8006d9c <lwip_htonl>
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	891b      	ldrh	r3, [r3, #8]
 800b7ae:	461d      	mov	r5, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	899b      	ldrh	r3, [r3, #12]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fb fad9 	bl	8006d70 <lwip_htons>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 0303 	and.w	r3, r3, #3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <tcp_free_acked_segments+0xc6>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e000      	b.n	800b7d0 <tcp_free_acked_segments+0xc8>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	442b      	add	r3, r5
 800b7d2:	18e2      	adds	r2, r4, r3
 800b7d4:	4b09      	ldr	r3, [pc, #36]	@ (800b7fc <tcp_free_acked_segments+0xf4>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dd9c      	ble.n	800b718 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b7de:	68bb      	ldr	r3, [r7, #8]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b7e8:	08014010 	.word	0x08014010
 800b7ec:	080142f8 	.word	0x080142f8
 800b7f0:	0801405c 	.word	0x0801405c
 800b7f4:	20007ff0 	.word	0x20007ff0
 800b7f8:	08014320 	.word	0x08014320
 800b7fc:	20007fec 	.word	0x20007fec

0800b800 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b800:	b5b0      	push	{r4, r5, r7, lr}
 800b802:	b094      	sub	sp, #80	@ 0x50
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <tcp_receive+0x20>
 800b812:	4b91      	ldr	r3, [pc, #580]	@ (800ba58 <tcp_receive+0x258>)
 800b814:	f240 427b 	movw	r2, #1147	@ 0x47b
 800b818:	4990      	ldr	r1, [pc, #576]	@ (800ba5c <tcp_receive+0x25c>)
 800b81a:	4891      	ldr	r0, [pc, #580]	@ (800ba60 <tcp_receive+0x260>)
 800b81c:	f006 f976 	bl	8011b0c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	7d1b      	ldrb	r3, [r3, #20]
 800b824:	2b03      	cmp	r3, #3
 800b826:	d806      	bhi.n	800b836 <tcp_receive+0x36>
 800b828:	4b8b      	ldr	r3, [pc, #556]	@ (800ba58 <tcp_receive+0x258>)
 800b82a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b82e:	498d      	ldr	r1, [pc, #564]	@ (800ba64 <tcp_receive+0x264>)
 800b830:	488b      	ldr	r0, [pc, #556]	@ (800ba60 <tcp_receive+0x260>)
 800b832:	f006 f96b 	bl	8011b0c <iprintf>

  if (flags & TCP_ACK) {
 800b836:	4b8c      	ldr	r3, [pc, #560]	@ (800ba68 <tcp_receive+0x268>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	f003 0310 	and.w	r3, r3, #16
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 8264 	beq.w	800bd0c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b84a:	461a      	mov	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b850:	4413      	add	r3, r2
 800b852:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b858:	4b84      	ldr	r3, [pc, #528]	@ (800ba6c <tcp_receive+0x26c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	db1b      	blt.n	800b89a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b866:	4b81      	ldr	r3, [pc, #516]	@ (800ba6c <tcp_receive+0x26c>)
 800b868:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d106      	bne.n	800b87c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b872:	4b7f      	ldr	r3, [pc, #508]	@ (800ba70 <tcp_receive+0x270>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	db0e      	blt.n	800b89a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b880:	4b7b      	ldr	r3, [pc, #492]	@ (800ba70 <tcp_receive+0x270>)
 800b882:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b884:	429a      	cmp	r2, r3
 800b886:	d125      	bne.n	800b8d4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b888:	4b7a      	ldr	r3, [pc, #488]	@ (800ba74 <tcp_receive+0x274>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	89db      	ldrh	r3, [r3, #14]
 800b88e:	b29a      	uxth	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b896:	429a      	cmp	r2, r3
 800b898:	d91c      	bls.n	800b8d4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b89a:	4b76      	ldr	r3, [pc, #472]	@ (800ba74 <tcp_receive+0x274>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	89db      	ldrh	r3, [r3, #14]
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d205      	bcs.n	800b8c4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800b8c4:	4b69      	ldr	r3, [pc, #420]	@ (800ba6c <tcp_receive+0x26c>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800b8cc:	4b68      	ldr	r3, [pc, #416]	@ (800ba70 <tcp_receive+0x270>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b8d4:	4b66      	ldr	r3, [pc, #408]	@ (800ba70 <tcp_receive+0x270>)
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	dc58      	bgt.n	800b994 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b8e2:	4b65      	ldr	r3, [pc, #404]	@ (800ba78 <tcp_receive+0x278>)
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d14b      	bne.n	800b982 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800b8f4:	4413      	add	r3, r2
 800b8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d142      	bne.n	800b982 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b902:	2b00      	cmp	r3, #0
 800b904:	db3d      	blt.n	800b982 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b90a:	4b59      	ldr	r3, [pc, #356]	@ (800ba70 <tcp_receive+0x270>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d137      	bne.n	800b982 <tcp_receive+0x182>
              found_dupack = 1;
 800b912:	2301      	movs	r3, #1
 800b914:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b91c:	2bff      	cmp	r3, #255	@ 0xff
 800b91e:	d007      	beq.n	800b930 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b926:	3301      	adds	r3, #1
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b936:	2b03      	cmp	r3, #3
 800b938:	d91b      	bls.n	800b972 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b944:	4413      	add	r3, r2
 800b946:	b29a      	uxth	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b94e:	429a      	cmp	r2, r3
 800b950:	d30a      	bcc.n	800b968 <tcp_receive+0x168>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b95c:	4413      	add	r3, r2
 800b95e:	b29a      	uxth	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b966:	e004      	b.n	800b972 <tcp_receive+0x172>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b96e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d902      	bls.n	800b982 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 fefb 	bl	800d778 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 8161 	bne.w	800bc4c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b992:	e15b      	b.n	800bc4c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b994:	4b36      	ldr	r3, [pc, #216]	@ (800ba70 <tcp_receive+0x270>)
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f2c0 814e 	blt.w	800bc42 <tcp_receive+0x442>
 800b9a6:	4b32      	ldr	r3, [pc, #200]	@ (800ba70 <tcp_receive+0x270>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f300 8146 	bgt.w	800bc42 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	8b5b      	ldrh	r3, [r3, #26]
 800b9ba:	f003 0304 	and.w	r3, r3, #4
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d010      	beq.n	800b9e4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	8b5b      	ldrh	r3, [r3, #26]
 800b9c6:	f023 0304 	bic.w	r3, r3, #4
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b9f2:	10db      	asrs	r3, r3, #3
 800b9f4:	b21b      	sxth	r3, r3
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	4413      	add	r3, r2
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	b21a      	sxth	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ba0c:	4b18      	ldr	r3, [pc, #96]	@ (800ba70 <tcp_receive+0x270>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ba24:	4b12      	ldr	r3, [pc, #72]	@ (800ba70 <tcp_receive+0x270>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	7d1b      	ldrb	r3, [r3, #20]
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	f240 8097 	bls.w	800bb64 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d245      	bcs.n	800bad2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8b5b      	ldrh	r3, [r3, #26]
 800ba4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d014      	beq.n	800ba7c <tcp_receive+0x27c>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e013      	b.n	800ba7e <tcp_receive+0x27e>
 800ba56:	bf00      	nop
 800ba58:	08014010 	.word	0x08014010
 800ba5c:	08014340 	.word	0x08014340
 800ba60:	0801405c 	.word	0x0801405c
 800ba64:	0801435c 	.word	0x0801435c
 800ba68:	20007ff4 	.word	0x20007ff4
 800ba6c:	20007fe8 	.word	0x20007fe8
 800ba70:	20007fec 	.word	0x20007fec
 800ba74:	20007fd8 	.word	0x20007fd8
 800ba78:	20007ff2 	.word	0x20007ff2
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ba82:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba8c:	fb12 f303 	smulbb	r3, r2, r3
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bf28      	it	cs
 800ba98:	4613      	movcs	r3, r2
 800ba9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800baa2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800baa4:	4413      	add	r3, r2
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800baae:	429a      	cmp	r2, r3
 800bab0:	d309      	bcc.n	800bac6 <tcp_receive+0x2c6>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bab8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800baba:	4413      	add	r3, r2
 800babc:	b29a      	uxth	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bac4:	e04e      	b.n	800bb64 <tcp_receive+0x364>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bacc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bad0:	e048      	b.n	800bb64 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bad8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bada:	4413      	add	r3, r2
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d309      	bcc.n	800bafc <tcp_receive+0x2fc>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800baee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800baf0:	4413      	add	r3, r2
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bafa:	e004      	b.n	800bb06 <tcp_receive+0x306>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d326      	bcc.n	800bb64 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb36:	4413      	add	r3, r2
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d30a      	bcc.n	800bb5a <tcp_receive+0x35a>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb4e:	4413      	add	r3, r2
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bb58:	e004      	b.n	800bb64 <tcp_receive+0x364>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb6c:	4a98      	ldr	r2, [pc, #608]	@ (800bdd0 <tcp_receive+0x5d0>)
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f7ff fdca 	bl	800b708 <tcp_free_acked_segments>
 800bb74:	4602      	mov	r2, r0
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb82:	4a94      	ldr	r2, [pc, #592]	@ (800bdd4 <tcp_receive+0x5d4>)
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7ff fdbf 	bl	800b708 <tcp_free_acked_segments>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d104      	bne.n	800bba2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb9e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bba0:	e002      	b.n	800bba8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d103      	bne.n	800bbbe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bbc4:	4b84      	ldr	r3, [pc, #528]	@ (800bdd8 <tcp_receive+0x5d8>)
 800bbc6:	881b      	ldrh	r3, [r3, #0]
 800bbc8:	4413      	add	r3, r2
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	8b5b      	ldrh	r3, [r3, #26]
 800bbd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d035      	beq.n	800bc4a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d118      	bne.n	800bc18 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00c      	beq.n	800bc08 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fb f8ce 	bl	8006d9c <lwip_htonl>
 800bc00:	4603      	mov	r3, r0
 800bc02:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	dc20      	bgt.n	800bc4a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	8b5b      	ldrh	r3, [r3, #26]
 800bc0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc16:	e018      	b.n	800bc4a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fb f8b9 	bl	8006d9c <lwip_htonl>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	1ae3      	subs	r3, r4, r3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	dc0b      	bgt.n	800bc4a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	8b5b      	ldrh	r3, [r3, #26]
 800bc36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc40:	e003      	b.n	800bc4a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f001 ff84 	bl	800db50 <tcp_send_empty_ack>
 800bc48:	e000      	b.n	800bc4c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc4a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d05b      	beq.n	800bd0c <tcp_receive+0x50c>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc58:	4b60      	ldr	r3, [pc, #384]	@ (800bddc <tcp_receive+0x5dc>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	da54      	bge.n	800bd0c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bc62:	4b5f      	ldr	r3, [pc, #380]	@ (800bde0 <tcp_receive+0x5e0>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bc76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc80:	10db      	asrs	r3, r3, #3
 800bc82:	b21b      	sxth	r3, r3
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc9a:	4413      	add	r3, r2
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	b21a      	sxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800bca4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da05      	bge.n	800bcb8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bcac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bcb0:	425b      	negs	r3, r3
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bcb8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bcc2:	109b      	asrs	r3, r3, #2
 800bcc4:	b21b      	sxth	r3, r3
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bcdc:	4413      	add	r3, r2
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	b21a      	sxth	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bcec:	10db      	asrs	r3, r3, #3
 800bcee:	b21b      	sxth	r3, r3
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	4413      	add	r3, r2
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	b21a      	sxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bd0c:	4b35      	ldr	r3, [pc, #212]	@ (800bde4 <tcp_receive+0x5e4>)
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 84df 	beq.w	800c6d4 <tcp_receive+0xed4>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7d1b      	ldrb	r3, [r3, #20]
 800bd1a:	2b06      	cmp	r3, #6
 800bd1c:	f200 84da 	bhi.w	800c6d4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd24:	4b30      	ldr	r3, [pc, #192]	@ (800bde8 <tcp_receive+0x5e8>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f2c0 808f 	blt.w	800be50 <tcp_receive+0x650>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd36:	4b2b      	ldr	r3, [pc, #172]	@ (800bde4 <tcp_receive+0x5e4>)
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bde8 <tcp_receive+0x5e8>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	440b      	add	r3, r1
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	3301      	adds	r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f300 8082 	bgt.w	800be50 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bd4c:	4b27      	ldr	r3, [pc, #156]	@ (800bdec <tcp_receive+0x5ec>)
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd56:	4b24      	ldr	r3, [pc, #144]	@ (800bde8 <tcp_receive+0x5e8>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bd5e:	4b23      	ldr	r3, [pc, #140]	@ (800bdec <tcp_receive+0x5ec>)
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <tcp_receive+0x574>
 800bd66:	4b22      	ldr	r3, [pc, #136]	@ (800bdf0 <tcp_receive+0x5f0>)
 800bd68:	f240 5294 	movw	r2, #1428	@ 0x594
 800bd6c:	4921      	ldr	r1, [pc, #132]	@ (800bdf4 <tcp_receive+0x5f4>)
 800bd6e:	4822      	ldr	r0, [pc, #136]	@ (800bdf8 <tcp_receive+0x5f8>)
 800bd70:	f005 fecc 	bl	8011b0c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d906      	bls.n	800bd8c <tcp_receive+0x58c>
 800bd7e:	4b1c      	ldr	r3, [pc, #112]	@ (800bdf0 <tcp_receive+0x5f0>)
 800bd80:	f240 5295 	movw	r2, #1429	@ 0x595
 800bd84:	491d      	ldr	r1, [pc, #116]	@ (800bdfc <tcp_receive+0x5fc>)
 800bd86:	481c      	ldr	r0, [pc, #112]	@ (800bdf8 <tcp_receive+0x5f8>)
 800bd88:	f005 fec0 	bl	8011b0c <iprintf>
      off = (u16_t)off32;
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bd92:	4b16      	ldr	r3, [pc, #88]	@ (800bdec <tcp_receive+0x5ec>)
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	891b      	ldrh	r3, [r3, #8]
 800bd98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d906      	bls.n	800bdae <tcp_receive+0x5ae>
 800bda0:	4b13      	ldr	r3, [pc, #76]	@ (800bdf0 <tcp_receive+0x5f0>)
 800bda2:	f240 5297 	movw	r2, #1431	@ 0x597
 800bda6:	4916      	ldr	r1, [pc, #88]	@ (800be00 <tcp_receive+0x600>)
 800bda8:	4813      	ldr	r0, [pc, #76]	@ (800bdf8 <tcp_receive+0x5f8>)
 800bdaa:	f005 feaf 	bl	8011b0c <iprintf>
      inseg.len -= off;
 800bdae:	4b0f      	ldr	r3, [pc, #60]	@ (800bdec <tcp_receive+0x5ec>)
 800bdb0:	891a      	ldrh	r2, [r3, #8]
 800bdb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	4b0c      	ldr	r3, [pc, #48]	@ (800bdec <tcp_receive+0x5ec>)
 800bdbc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bdec <tcp_receive+0x5ec>)
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	891a      	ldrh	r2, [r3, #8]
 800bdc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800bdcc:	e02a      	b.n	800be24 <tcp_receive+0x624>
 800bdce:	bf00      	nop
 800bdd0:	08014378 	.word	0x08014378
 800bdd4:	08014380 	.word	0x08014380
 800bdd8:	20007ff0 	.word	0x20007ff0
 800bddc:	20007fec 	.word	0x20007fec
 800bde0:	20007fac 	.word	0x20007fac
 800bde4:	20007ff2 	.word	0x20007ff2
 800bde8:	20007fe8 	.word	0x20007fe8
 800bdec:	20007fc4 	.word	0x20007fc4
 800bdf0:	08014010 	.word	0x08014010
 800bdf4:	08014388 	.word	0x08014388
 800bdf8:	0801405c 	.word	0x0801405c
 800bdfc:	08014398 	.word	0x08014398
 800be00:	080143a8 	.word	0x080143a8
        off -= p->len;
 800be04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be06:	895b      	ldrh	r3, [r3, #10]
 800be08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800be12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be14:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800be16:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800be18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be1a:	2200      	movs	r2, #0
 800be1c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800be1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800be24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be26:	895b      	ldrh	r3, [r3, #10]
 800be28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d8e9      	bhi.n	800be04 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800be30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be34:	4619      	mov	r1, r3
 800be36:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800be38:	f7fc fb64 	bl	8008504 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be40:	4a90      	ldr	r2, [pc, #576]	@ (800c084 <tcp_receive+0x884>)
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	4b90      	ldr	r3, [pc, #576]	@ (800c088 <tcp_receive+0x888>)
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	4a8e      	ldr	r2, [pc, #568]	@ (800c084 <tcp_receive+0x884>)
 800be4a:	6812      	ldr	r2, [r2, #0]
 800be4c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be4e:	e00d      	b.n	800be6c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800be50:	4b8c      	ldr	r3, [pc, #560]	@ (800c084 <tcp_receive+0x884>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	da06      	bge.n	800be6c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	8b5b      	ldrh	r3, [r3, #26]
 800be62:	f043 0302 	orr.w	r3, r3, #2
 800be66:	b29a      	uxth	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be6c:	4b85      	ldr	r3, [pc, #532]	@ (800c084 <tcp_receive+0x884>)
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	f2c0 8427 	blt.w	800c6ca <tcp_receive+0xeca>
 800be7c:	4b81      	ldr	r3, [pc, #516]	@ (800c084 <tcp_receive+0x884>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be84:	6879      	ldr	r1, [r7, #4]
 800be86:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800be88:	440b      	add	r3, r1
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	3301      	adds	r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f300 841b 	bgt.w	800c6ca <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be98:	4b7a      	ldr	r3, [pc, #488]	@ (800c084 <tcp_receive+0x884>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	f040 8298 	bne.w	800c3d2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bea2:	4b79      	ldr	r3, [pc, #484]	@ (800c088 <tcp_receive+0x888>)
 800bea4:	891c      	ldrh	r4, [r3, #8]
 800bea6:	4b78      	ldr	r3, [pc, #480]	@ (800c088 <tcp_receive+0x888>)
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	899b      	ldrh	r3, [r3, #12]
 800beac:	b29b      	uxth	r3, r3
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fa ff5e 	bl	8006d70 <lwip_htons>
 800beb4:	4603      	mov	r3, r0
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	f003 0303 	and.w	r3, r3, #3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <tcp_receive+0x6c4>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e000      	b.n	800bec6 <tcp_receive+0x6c6>
 800bec4:	2300      	movs	r3, #0
 800bec6:	4423      	add	r3, r4
 800bec8:	b29a      	uxth	r2, r3
 800beca:	4b70      	ldr	r3, [pc, #448]	@ (800c08c <tcp_receive+0x88c>)
 800becc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bed2:	4b6e      	ldr	r3, [pc, #440]	@ (800c08c <tcp_receive+0x88c>)
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d274      	bcs.n	800bfc4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800beda:	4b6b      	ldr	r3, [pc, #428]	@ (800c088 <tcp_receive+0x888>)
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	899b      	ldrh	r3, [r3, #12]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fa ff44 	bl	8006d70 <lwip_htons>
 800bee8:	4603      	mov	r3, r0
 800beea:	b2db      	uxtb	r3, r3
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d01e      	beq.n	800bf32 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bef4:	4b64      	ldr	r3, [pc, #400]	@ (800c088 <tcp_receive+0x888>)
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	899b      	ldrh	r3, [r3, #12]
 800befa:	b29b      	uxth	r3, r3
 800befc:	b21b      	sxth	r3, r3
 800befe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf02:	b21c      	sxth	r4, r3
 800bf04:	4b60      	ldr	r3, [pc, #384]	@ (800c088 <tcp_receive+0x888>)
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	899b      	ldrh	r3, [r3, #12]
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fa ff2f 	bl	8006d70 <lwip_htons>
 800bf12:	4603      	mov	r3, r0
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fa ff27 	bl	8006d70 <lwip_htons>
 800bf22:	4603      	mov	r3, r0
 800bf24:	b21b      	sxth	r3, r3
 800bf26:	4323      	orrs	r3, r4
 800bf28:	b21a      	sxth	r2, r3
 800bf2a:	4b57      	ldr	r3, [pc, #348]	@ (800c088 <tcp_receive+0x888>)
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	b292      	uxth	r2, r2
 800bf30:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bf36:	4b54      	ldr	r3, [pc, #336]	@ (800c088 <tcp_receive+0x888>)
 800bf38:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf3a:	4b53      	ldr	r3, [pc, #332]	@ (800c088 <tcp_receive+0x888>)
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	899b      	ldrh	r3, [r3, #12]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fa ff14 	bl	8006d70 <lwip_htons>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f003 0302 	and.w	r3, r3, #2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <tcp_receive+0x760>
            inseg.len -= 1;
 800bf54:	4b4c      	ldr	r3, [pc, #304]	@ (800c088 <tcp_receive+0x888>)
 800bf56:	891b      	ldrh	r3, [r3, #8]
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	4b4a      	ldr	r3, [pc, #296]	@ (800c088 <tcp_receive+0x888>)
 800bf5e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bf60:	4b49      	ldr	r3, [pc, #292]	@ (800c088 <tcp_receive+0x888>)
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	4a48      	ldr	r2, [pc, #288]	@ (800c088 <tcp_receive+0x888>)
 800bf66:	8912      	ldrh	r2, [r2, #8]
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fc f9ca 	bl	8008304 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bf70:	4b45      	ldr	r3, [pc, #276]	@ (800c088 <tcp_receive+0x888>)
 800bf72:	891c      	ldrh	r4, [r3, #8]
 800bf74:	4b44      	ldr	r3, [pc, #272]	@ (800c088 <tcp_receive+0x888>)
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	899b      	ldrh	r3, [r3, #12]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fa fef7 	bl	8006d70 <lwip_htons>
 800bf82:	4603      	mov	r3, r0
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 0303 	and.w	r3, r3, #3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <tcp_receive+0x792>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e000      	b.n	800bf94 <tcp_receive+0x794>
 800bf92:	2300      	movs	r3, #0
 800bf94:	4423      	add	r3, r4
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	4b3c      	ldr	r3, [pc, #240]	@ (800c08c <tcp_receive+0x88c>)
 800bf9a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf9c:	4b3b      	ldr	r3, [pc, #236]	@ (800c08c <tcp_receive+0x88c>)
 800bf9e:	881b      	ldrh	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4b38      	ldr	r3, [pc, #224]	@ (800c084 <tcp_receive+0x884>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	441a      	add	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bfb0:	440b      	add	r3, r1
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d006      	beq.n	800bfc4 <tcp_receive+0x7c4>
 800bfb6:	4b36      	ldr	r3, [pc, #216]	@ (800c090 <tcp_receive+0x890>)
 800bfb8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800bfbc:	4935      	ldr	r1, [pc, #212]	@ (800c094 <tcp_receive+0x894>)
 800bfbe:	4836      	ldr	r0, [pc, #216]	@ (800c098 <tcp_receive+0x898>)
 800bfc0:	f005 fda4 	bl	8011b0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 80e6 	beq.w	800c19a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bfce:	4b2e      	ldr	r3, [pc, #184]	@ (800c088 <tcp_receive+0x888>)
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	899b      	ldrh	r3, [r3, #12]
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fa feca 	bl	8006d70 <lwip_htons>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d010      	beq.n	800c00a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bfe8:	e00a      	b.n	800c000 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfee:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f7fd fd8d 	bl	8009b1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1f0      	bne.n	800bfea <tcp_receive+0x7ea>
 800c008:	e0c7      	b.n	800c19a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c010:	e051      	b.n	800c0b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	899b      	ldrh	r3, [r3, #12]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fa fea8 	bl	8006d70 <lwip_htons>
 800c020:	4603      	mov	r3, r0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	f003 0301 	and.w	r3, r3, #1
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d03c      	beq.n	800c0a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c02c:	4b16      	ldr	r3, [pc, #88]	@ (800c088 <tcp_receive+0x888>)
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	899b      	ldrh	r3, [r3, #12]
 800c032:	b29b      	uxth	r3, r3
 800c034:	4618      	mov	r0, r3
 800c036:	f7fa fe9b 	bl	8006d70 <lwip_htons>
 800c03a:	4603      	mov	r3, r0
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c042:	2b00      	cmp	r3, #0
 800c044:	d12f      	bne.n	800c0a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c046:	4b10      	ldr	r3, [pc, #64]	@ (800c088 <tcp_receive+0x888>)
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	899b      	ldrh	r3, [r3, #12]
 800c04c:	b29c      	uxth	r4, r3
 800c04e:	2001      	movs	r0, #1
 800c050:	f7fa fe8e 	bl	8006d70 <lwip_htons>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	4b0b      	ldr	r3, [pc, #44]	@ (800c088 <tcp_receive+0x888>)
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	4322      	orrs	r2, r4
 800c05e:	b292      	uxth	r2, r2
 800c060:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c062:	4b09      	ldr	r3, [pc, #36]	@ (800c088 <tcp_receive+0x888>)
 800c064:	891c      	ldrh	r4, [r3, #8]
 800c066:	4b08      	ldr	r3, [pc, #32]	@ (800c088 <tcp_receive+0x888>)
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	899b      	ldrh	r3, [r3, #12]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fa fe7e 	bl	8006d70 <lwip_htons>
 800c074:	4603      	mov	r3, r0
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f003 0303 	and.w	r3, r3, #3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00d      	beq.n	800c09c <tcp_receive+0x89c>
 800c080:	2301      	movs	r3, #1
 800c082:	e00c      	b.n	800c09e <tcp_receive+0x89e>
 800c084:	20007fe8 	.word	0x20007fe8
 800c088:	20007fc4 	.word	0x20007fc4
 800c08c:	20007ff2 	.word	0x20007ff2
 800c090:	08014010 	.word	0x08014010
 800c094:	080143b8 	.word	0x080143b8
 800c098:	0801405c 	.word	0x0801405c
 800c09c:	2300      	movs	r3, #0
 800c09e:	4423      	add	r3, r4
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	4b98      	ldr	r3, [pc, #608]	@ (800c304 <tcp_receive+0xb04>)
 800c0a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c0b0:	6938      	ldr	r0, [r7, #16]
 800c0b2:	f7fd fd32 	bl	8009b1a <tcp_seg_free>
            while (next &&
 800c0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00e      	beq.n	800c0da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c0bc:	4b91      	ldr	r3, [pc, #580]	@ (800c304 <tcp_receive+0xb04>)
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	4b91      	ldr	r3, [pc, #580]	@ (800c308 <tcp_receive+0xb08>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	441a      	add	r2, r3
 800c0c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0d0:	8909      	ldrh	r1, [r1, #8]
 800c0d2:	440b      	add	r3, r1
 800c0d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	da9b      	bge.n	800c012 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d059      	beq.n	800c194 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c0e0:	4b88      	ldr	r3, [pc, #544]	@ (800c304 <tcp_receive+0xb04>)
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	4b88      	ldr	r3, [pc, #544]	@ (800c308 <tcp_receive+0xb08>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	441a      	add	r2, r3
 800c0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	dd4d      	ble.n	800c194 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	4b81      	ldr	r3, [pc, #516]	@ (800c308 <tcp_receive+0xb08>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	b29b      	uxth	r3, r3
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	b29a      	uxth	r2, r3
 800c10a:	4b80      	ldr	r3, [pc, #512]	@ (800c30c <tcp_receive+0xb0c>)
 800c10c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c10e:	4b7f      	ldr	r3, [pc, #508]	@ (800c30c <tcp_receive+0xb0c>)
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	899b      	ldrh	r3, [r3, #12]
 800c114:	b29b      	uxth	r3, r3
 800c116:	4618      	mov	r0, r3
 800c118:	f7fa fe2a 	bl	8006d70 <lwip_htons>
 800c11c:	4603      	mov	r3, r0
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	f003 0302 	and.w	r3, r3, #2
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <tcp_receive+0x934>
                inseg.len -= 1;
 800c128:	4b78      	ldr	r3, [pc, #480]	@ (800c30c <tcp_receive+0xb0c>)
 800c12a:	891b      	ldrh	r3, [r3, #8]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	b29a      	uxth	r2, r3
 800c130:	4b76      	ldr	r3, [pc, #472]	@ (800c30c <tcp_receive+0xb0c>)
 800c132:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c134:	4b75      	ldr	r3, [pc, #468]	@ (800c30c <tcp_receive+0xb0c>)
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	4a74      	ldr	r2, [pc, #464]	@ (800c30c <tcp_receive+0xb0c>)
 800c13a:	8912      	ldrh	r2, [r2, #8]
 800c13c:	4611      	mov	r1, r2
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fc f8e0 	bl	8008304 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c144:	4b71      	ldr	r3, [pc, #452]	@ (800c30c <tcp_receive+0xb0c>)
 800c146:	891c      	ldrh	r4, [r3, #8]
 800c148:	4b70      	ldr	r3, [pc, #448]	@ (800c30c <tcp_receive+0xb0c>)
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	899b      	ldrh	r3, [r3, #12]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	4618      	mov	r0, r3
 800c152:	f7fa fe0d 	bl	8006d70 <lwip_htons>
 800c156:	4603      	mov	r3, r0
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	f003 0303 	and.w	r3, r3, #3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <tcp_receive+0x966>
 800c162:	2301      	movs	r3, #1
 800c164:	e000      	b.n	800c168 <tcp_receive+0x968>
 800c166:	2300      	movs	r3, #0
 800c168:	4423      	add	r3, r4
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	4b65      	ldr	r3, [pc, #404]	@ (800c304 <tcp_receive+0xb04>)
 800c16e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c170:	4b64      	ldr	r3, [pc, #400]	@ (800c304 <tcp_receive+0xb04>)
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	461a      	mov	r2, r3
 800c176:	4b64      	ldr	r3, [pc, #400]	@ (800c308 <tcp_receive+0xb08>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	441a      	add	r2, r3
 800c17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d006      	beq.n	800c194 <tcp_receive+0x994>
 800c186:	4b62      	ldr	r3, [pc, #392]	@ (800c310 <tcp_receive+0xb10>)
 800c188:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c18c:	4961      	ldr	r1, [pc, #388]	@ (800c314 <tcp_receive+0xb14>)
 800c18e:	4862      	ldr	r0, [pc, #392]	@ (800c318 <tcp_receive+0xb18>)
 800c190:	f005 fcbc 	bl	8011b0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c198:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c19a:	4b5a      	ldr	r3, [pc, #360]	@ (800c304 <tcp_receive+0xb04>)
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	4b59      	ldr	r3, [pc, #356]	@ (800c308 <tcp_receive+0xb08>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	441a      	add	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c1ae:	4b55      	ldr	r3, [pc, #340]	@ (800c304 <tcp_receive+0xb04>)
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d206      	bcs.n	800c1c4 <tcp_receive+0x9c4>
 800c1b6:	4b56      	ldr	r3, [pc, #344]	@ (800c310 <tcp_receive+0xb10>)
 800c1b8:	f240 6207 	movw	r2, #1543	@ 0x607
 800c1bc:	4957      	ldr	r1, [pc, #348]	@ (800c31c <tcp_receive+0xb1c>)
 800c1be:	4856      	ldr	r0, [pc, #344]	@ (800c318 <tcp_receive+0xb18>)
 800c1c0:	f005 fca4 	bl	8011b0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c1c8:	4b4e      	ldr	r3, [pc, #312]	@ (800c304 <tcp_receive+0xb04>)
 800c1ca:	881b      	ldrh	r3, [r3, #0]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7fc ffbf 	bl	8009158 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c1da:	4b4c      	ldr	r3, [pc, #304]	@ (800c30c <tcp_receive+0xb0c>)
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	891b      	ldrh	r3, [r3, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d006      	beq.n	800c1f2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c1e4:	4b49      	ldr	r3, [pc, #292]	@ (800c30c <tcp_receive+0xb0c>)
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	4a4d      	ldr	r2, [pc, #308]	@ (800c320 <tcp_receive+0xb20>)
 800c1ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c1ec:	4b47      	ldr	r3, [pc, #284]	@ (800c30c <tcp_receive+0xb0c>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1f2:	4b46      	ldr	r3, [pc, #280]	@ (800c30c <tcp_receive+0xb0c>)
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	899b      	ldrh	r3, [r3, #12]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fa fdb8 	bl	8006d70 <lwip_htons>
 800c200:	4603      	mov	r3, r0
 800c202:	b2db      	uxtb	r3, r3
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80b8 	beq.w	800c37e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c20e:	4b45      	ldr	r3, [pc, #276]	@ (800c324 <tcp_receive+0xb24>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	f043 0320 	orr.w	r3, r3, #32
 800c216:	b2da      	uxtb	r2, r3
 800c218:	4b42      	ldr	r3, [pc, #264]	@ (800c324 <tcp_receive+0xb24>)
 800c21a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c21c:	e0af      	b.n	800c37e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c222:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	4a36      	ldr	r2, [pc, #216]	@ (800c308 <tcp_receive+0xb08>)
 800c22e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	891b      	ldrh	r3, [r3, #8]
 800c234:	461c      	mov	r4, r3
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	899b      	ldrh	r3, [r3, #12]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fa fd96 	bl	8006d70 <lwip_htons>
 800c244:	4603      	mov	r3, r0
 800c246:	b2db      	uxtb	r3, r3
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d001      	beq.n	800c254 <tcp_receive+0xa54>
 800c250:	2301      	movs	r3, #1
 800c252:	e000      	b.n	800c256 <tcp_receive+0xa56>
 800c254:	2300      	movs	r3, #0
 800c256:	191a      	adds	r2, r3, r4
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25c:	441a      	add	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c266:	461c      	mov	r4, r3
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	891b      	ldrh	r3, [r3, #8]
 800c26c:	461d      	mov	r5, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	899b      	ldrh	r3, [r3, #12]
 800c274:	b29b      	uxth	r3, r3
 800c276:	4618      	mov	r0, r3
 800c278:	f7fa fd7a 	bl	8006d70 <lwip_htons>
 800c27c:	4603      	mov	r3, r0
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <tcp_receive+0xa8c>
 800c288:	2301      	movs	r3, #1
 800c28a:	e000      	b.n	800c28e <tcp_receive+0xa8e>
 800c28c:	2300      	movs	r3, #0
 800c28e:	442b      	add	r3, r5
 800c290:	429c      	cmp	r4, r3
 800c292:	d206      	bcs.n	800c2a2 <tcp_receive+0xaa2>
 800c294:	4b1e      	ldr	r3, [pc, #120]	@ (800c310 <tcp_receive+0xb10>)
 800c296:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c29a:	4923      	ldr	r1, [pc, #140]	@ (800c328 <tcp_receive+0xb28>)
 800c29c:	481e      	ldr	r0, [pc, #120]	@ (800c318 <tcp_receive+0xb18>)
 800c29e:	f005 fc35 	bl	8011b0c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	891b      	ldrh	r3, [r3, #8]
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	899b      	ldrh	r3, [r3, #12]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fa fd5d 	bl	8006d70 <lwip_htons>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	f003 0303 	and.w	r3, r3, #3
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d001      	beq.n	800c2c6 <tcp_receive+0xac6>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e000      	b.n	800c2c8 <tcp_receive+0xac8>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	1919      	adds	r1, r3, r4
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c2ce:	b28b      	uxth	r3, r1
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7fc ff3d 	bl	8009158 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	891b      	ldrh	r3, [r3, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d028      	beq.n	800c33a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c2e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c320 <tcp_receive+0xb20>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d01d      	beq.n	800c32c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c320 <tcp_receive+0xb20>)
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	f7fc fa4a 	bl	8008794 <pbuf_cat>
 800c300:	e018      	b.n	800c334 <tcp_receive+0xb34>
 800c302:	bf00      	nop
 800c304:	20007ff2 	.word	0x20007ff2
 800c308:	20007fe8 	.word	0x20007fe8
 800c30c:	20007fc4 	.word	0x20007fc4
 800c310:	08014010 	.word	0x08014010
 800c314:	080143f0 	.word	0x080143f0
 800c318:	0801405c 	.word	0x0801405c
 800c31c:	0801442c 	.word	0x0801442c
 800c320:	20007ff8 	.word	0x20007ff8
 800c324:	20007ff5 	.word	0x20007ff5
 800c328:	0801444c 	.word	0x0801444c
            } else {
              recv_data = cseg->p;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4a70      	ldr	r2, [pc, #448]	@ (800c4f4 <tcp_receive+0xcf4>)
 800c332:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2200      	movs	r2, #0
 800c338:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	899b      	ldrh	r3, [r3, #12]
 800c340:	b29b      	uxth	r3, r3
 800c342:	4618      	mov	r0, r3
 800c344:	f7fa fd14 	bl	8006d70 <lwip_htons>
 800c348:	4603      	mov	r3, r0
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00d      	beq.n	800c370 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c354:	4b68      	ldr	r3, [pc, #416]	@ (800c4f8 <tcp_receive+0xcf8>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	f043 0320 	orr.w	r3, r3, #32
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	4b66      	ldr	r3, [pc, #408]	@ (800c4f8 <tcp_receive+0xcf8>)
 800c360:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	7d1b      	ldrb	r3, [r3, #20]
 800c366:	2b04      	cmp	r3, #4
 800c368:	d102      	bne.n	800c370 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2207      	movs	r2, #7
 800c36e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c378:	68b8      	ldr	r0, [r7, #8]
 800c37a:	f7fd fbce 	bl	8009b1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c382:	2b00      	cmp	r3, #0
 800c384:	d008      	beq.n	800c398 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c392:	429a      	cmp	r2, r3
 800c394:	f43f af43 	beq.w	800c21e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	8b5b      	ldrh	r3, [r3, #26]
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00e      	beq.n	800c3c2 <tcp_receive+0xbc2>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	8b5b      	ldrh	r3, [r3, #26]
 800c3a8:	f023 0301 	bic.w	r3, r3, #1
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	835a      	strh	r2, [r3, #26]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	8b5b      	ldrh	r3, [r3, #26]
 800c3b6:	f043 0302 	orr.w	r3, r3, #2
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3c0:	e187      	b.n	800c6d2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	8b5b      	ldrh	r3, [r3, #26]
 800c3c6:	f043 0301 	orr.w	r3, r3, #1
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3d0:	e17f      	b.n	800c6d2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d106      	bne.n	800c3e8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c3da:	4848      	ldr	r0, [pc, #288]	@ (800c4fc <tcp_receive+0xcfc>)
 800c3dc:	f7fd fbb6 	bl	8009b4c <tcp_seg_copy>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800c3e6:	e16c      	b.n	800c6c2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3f2:	e156      	b.n	800c6a2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	685a      	ldr	r2, [r3, #4]
 800c3fa:	4b41      	ldr	r3, [pc, #260]	@ (800c500 <tcp_receive+0xd00>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d11d      	bne.n	800c43e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c402:	4b3e      	ldr	r3, [pc, #248]	@ (800c4fc <tcp_receive+0xcfc>)
 800c404:	891a      	ldrh	r2, [r3, #8]
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	891b      	ldrh	r3, [r3, #8]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	f240 814e 	bls.w	800c6ac <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c410:	483a      	ldr	r0, [pc, #232]	@ (800c4fc <tcp_receive+0xcfc>)
 800c412:	f7fd fb9b 	bl	8009b4c <tcp_seg_copy>
 800c416:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 8148 	beq.w	800c6b0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c428:	697a      	ldr	r2, [r7, #20]
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	e002      	b.n	800c434 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c434:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c436:	6978      	ldr	r0, [r7, #20]
 800c438:	f7ff f8de 	bl	800b5f8 <tcp_oos_insert_segment>
                }
                break;
 800c43c:	e138      	b.n	800c6b0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c440:	2b00      	cmp	r3, #0
 800c442:	d117      	bne.n	800c474 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c444:	4b2e      	ldr	r3, [pc, #184]	@ (800c500 <tcp_receive+0xd00>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	da57      	bge.n	800c504 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c454:	4829      	ldr	r0, [pc, #164]	@ (800c4fc <tcp_receive+0xcfc>)
 800c456:	f7fd fb79 	bl	8009b4c <tcp_seg_copy>
 800c45a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 8128 	beq.w	800c6b4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c46a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c46c:	69b8      	ldr	r0, [r7, #24]
 800c46e:	f7ff f8c3 	bl	800b5f8 <tcp_oos_insert_segment>
                  }
                  break;
 800c472:	e11f      	b.n	800c6b4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c474:	4b22      	ldr	r3, [pc, #136]	@ (800c500 <tcp_receive+0xd00>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	3b01      	subs	r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	db3e      	blt.n	800c504 <tcp_receive+0xd04>
 800c486:	4b1e      	ldr	r3, [pc, #120]	@ (800c500 <tcp_receive+0xd00>)
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	3301      	adds	r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	dc35      	bgt.n	800c504 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c498:	4818      	ldr	r0, [pc, #96]	@ (800c4fc <tcp_receive+0xcfc>)
 800c49a:	f7fd fb57 	bl	8009b4c <tcp_seg_copy>
 800c49e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 8108 	beq.w	800c6b8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4b0:	8912      	ldrh	r2, [r2, #8]
 800c4b2:	441a      	add	r2, r3
 800c4b4:	4b12      	ldr	r3, [pc, #72]	@ (800c500 <tcp_receive+0xd00>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dd12      	ble.n	800c4e4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c4be:	4b10      	ldr	r3, [pc, #64]	@ (800c500 <tcp_receive+0xd00>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4da:	891b      	ldrh	r3, [r3, #8]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f7fb ff10 	bl	8008304 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e6:	69fa      	ldr	r2, [r7, #28]
 800c4e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c4ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c4ec:	69f8      	ldr	r0, [r7, #28]
 800c4ee:	f7ff f883 	bl	800b5f8 <tcp_oos_insert_segment>
                  }
                  break;
 800c4f2:	e0e1      	b.n	800c6b8 <tcp_receive+0xeb8>
 800c4f4:	20007ff8 	.word	0x20007ff8
 800c4f8:	20007ff5 	.word	0x20007ff5
 800c4fc:	20007fc4 	.word	0x20007fc4
 800c500:	20007fe8 	.word	0x20007fe8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c506:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f040 80c5 	bne.w	800c69c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c512:	4b7f      	ldr	r3, [pc, #508]	@ (800c710 <tcp_receive+0xf10>)
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f340 80bc 	ble.w	800c69c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	899b      	ldrh	r3, [r3, #12]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fa fc1f 	bl	8006d70 <lwip_htons>
 800c532:	4603      	mov	r3, r0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f040 80be 	bne.w	800c6bc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c540:	4874      	ldr	r0, [pc, #464]	@ (800c714 <tcp_receive+0xf14>)
 800c542:	f7fd fb03 	bl	8009b4c <tcp_seg_copy>
 800c546:	4602      	mov	r2, r0
 800c548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 80b5 	beq.w	800c6c0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c55e:	8912      	ldrh	r2, [r2, #8]
 800c560:	441a      	add	r2, r3
 800c562:	4b6b      	ldr	r3, [pc, #428]	@ (800c710 <tcp_receive+0xf10>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	dd12      	ble.n	800c592 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c56c:	4b68      	ldr	r3, [pc, #416]	@ (800c710 <tcp_receive+0xf10>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	b29a      	uxth	r2, r3
 800c572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	b29b      	uxth	r3, r3
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c580:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c588:	891b      	ldrh	r3, [r3, #8]
 800c58a:	4619      	mov	r1, r3
 800c58c:	4610      	mov	r0, r2
 800c58e:	f7fb feb9 	bl	8008304 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c592:	4b61      	ldr	r3, [pc, #388]	@ (800c718 <tcp_receive+0xf18>)
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	4b5d      	ldr	r3, [pc, #372]	@ (800c710 <tcp_receive+0xf10>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	441a      	add	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c5a6:	440b      	add	r3, r1
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f340 8088 	ble.w	800c6c0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	899b      	ldrh	r3, [r3, #12]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fa fbd8 	bl	8006d70 <lwip_htons>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d021      	beq.n	800c610 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	899b      	ldrh	r3, [r3, #12]
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	b21b      	sxth	r3, r3
 800c5d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c5dc:	b21c      	sxth	r4, r3
 800c5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	899b      	ldrh	r3, [r3, #12]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fa fbc1 	bl	8006d70 <lwip_htons>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fa fbb9 	bl	8006d70 <lwip_htons>
 800c5fe:	4603      	mov	r3, r0
 800c600:	b21b      	sxth	r3, r3
 800c602:	4323      	orrs	r3, r4
 800c604:	b21a      	sxth	r2, r3
 800c606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	b292      	uxth	r2, r2
 800c60e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c614:	b29a      	uxth	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c61a:	4413      	add	r3, r2
 800c61c:	b299      	uxth	r1, r3
 800c61e:	4b3c      	ldr	r3, [pc, #240]	@ (800c710 <tcp_receive+0xf10>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	b29a      	uxth	r2, r3
 800c624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	1a8a      	subs	r2, r1, r2
 800c62a:	b292      	uxth	r2, r2
 800c62c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	891b      	ldrh	r3, [r3, #8]
 800c63a:	4619      	mov	r1, r3
 800c63c:	4610      	mov	r0, r2
 800c63e:	f7fb fe61 	bl	8008304 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	891c      	ldrh	r4, [r3, #8]
 800c648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	899b      	ldrh	r3, [r3, #12]
 800c650:	b29b      	uxth	r3, r3
 800c652:	4618      	mov	r0, r3
 800c654:	f7fa fb8c 	bl	8006d70 <lwip_htons>
 800c658:	4603      	mov	r3, r0
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	f003 0303 	and.w	r3, r3, #3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <tcp_receive+0xe68>
 800c664:	2301      	movs	r3, #1
 800c666:	e000      	b.n	800c66a <tcp_receive+0xe6a>
 800c668:	2300      	movs	r3, #0
 800c66a:	4423      	add	r3, r4
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	4b2a      	ldr	r3, [pc, #168]	@ (800c718 <tcp_receive+0xf18>)
 800c670:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c672:	4b29      	ldr	r3, [pc, #164]	@ (800c718 <tcp_receive+0xf18>)
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	4b25      	ldr	r3, [pc, #148]	@ (800c710 <tcp_receive+0xf10>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	441a      	add	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c682:	6879      	ldr	r1, [r7, #4]
 800c684:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c686:	440b      	add	r3, r1
 800c688:	429a      	cmp	r2, r3
 800c68a:	d019      	beq.n	800c6c0 <tcp_receive+0xec0>
 800c68c:	4b23      	ldr	r3, [pc, #140]	@ (800c71c <tcp_receive+0xf1c>)
 800c68e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c692:	4923      	ldr	r1, [pc, #140]	@ (800c720 <tcp_receive+0xf20>)
 800c694:	4823      	ldr	r0, [pc, #140]	@ (800c724 <tcp_receive+0xf24>)
 800c696:	f005 fa39 	bl	8011b0c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c69a:	e011      	b.n	800c6c0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f47f aea5 	bne.w	800c3f4 <tcp_receive+0xbf4>
 800c6aa:	e00a      	b.n	800c6c2 <tcp_receive+0xec2>
                break;
 800c6ac:	bf00      	nop
 800c6ae:	e008      	b.n	800c6c2 <tcp_receive+0xec2>
                break;
 800c6b0:	bf00      	nop
 800c6b2:	e006      	b.n	800c6c2 <tcp_receive+0xec2>
                  break;
 800c6b4:	bf00      	nop
 800c6b6:	e004      	b.n	800c6c2 <tcp_receive+0xec2>
                  break;
 800c6b8:	bf00      	nop
 800c6ba:	e002      	b.n	800c6c2 <tcp_receive+0xec2>
                  break;
 800c6bc:	bf00      	nop
 800c6be:	e000      	b.n	800c6c2 <tcp_receive+0xec2>
                break;
 800c6c0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f001 fa44 	bl	800db50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c6c8:	e003      	b.n	800c6d2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f001 fa40 	bl	800db50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c6d0:	e01a      	b.n	800c708 <tcp_receive+0xf08>
 800c6d2:	e019      	b.n	800c708 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c6d4:	4b0e      	ldr	r3, [pc, #56]	@ (800c710 <tcp_receive+0xf10>)
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	db0a      	blt.n	800c6f8 <tcp_receive+0xef8>
 800c6e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c710 <tcp_receive+0xf10>)
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c6ee:	440b      	add	r3, r1
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	dd07      	ble.n	800c708 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	8b5b      	ldrh	r3, [r3, #26]
 800c6fc:	f043 0302 	orr.w	r3, r3, #2
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c706:	e7ff      	b.n	800c708 <tcp_receive+0xf08>
 800c708:	bf00      	nop
 800c70a:	3750      	adds	r7, #80	@ 0x50
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bdb0      	pop	{r4, r5, r7, pc}
 800c710:	20007fe8 	.word	0x20007fe8
 800c714:	20007fc4 	.word	0x20007fc4
 800c718:	20007ff2 	.word	0x20007ff2
 800c71c:	08014010 	.word	0x08014010
 800c720:	080143b8 	.word	0x080143b8
 800c724:	0801405c 	.word	0x0801405c

0800c728 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c72e:	4b15      	ldr	r3, [pc, #84]	@ (800c784 <tcp_get_next_optbyte+0x5c>)
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	b291      	uxth	r1, r2
 800c736:	4a13      	ldr	r2, [pc, #76]	@ (800c784 <tcp_get_next_optbyte+0x5c>)
 800c738:	8011      	strh	r1, [r2, #0]
 800c73a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c73c:	4b12      	ldr	r3, [pc, #72]	@ (800c788 <tcp_get_next_optbyte+0x60>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d004      	beq.n	800c74e <tcp_get_next_optbyte+0x26>
 800c744:	4b11      	ldr	r3, [pc, #68]	@ (800c78c <tcp_get_next_optbyte+0x64>)
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	88fa      	ldrh	r2, [r7, #6]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d208      	bcs.n	800c760 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c74e:	4b10      	ldr	r3, [pc, #64]	@ (800c790 <tcp_get_next_optbyte+0x68>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3314      	adds	r3, #20
 800c754:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c756:	88fb      	ldrh	r3, [r7, #6]
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	4413      	add	r3, r2
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	e00b      	b.n	800c778 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c760:	88fb      	ldrh	r3, [r7, #6]
 800c762:	b2da      	uxtb	r2, r3
 800c764:	4b09      	ldr	r3, [pc, #36]	@ (800c78c <tcp_get_next_optbyte+0x64>)
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c76e:	4b06      	ldr	r3, [pc, #24]	@ (800c788 <tcp_get_next_optbyte+0x60>)
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	797b      	ldrb	r3, [r7, #5]
 800c774:	4413      	add	r3, r2
 800c776:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c778:	4618      	mov	r0, r3
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr
 800c784:	20007fe4 	.word	0x20007fe4
 800c788:	20007fe0 	.word	0x20007fe0
 800c78c:	20007fde 	.word	0x20007fde
 800c790:	20007fd8 	.word	0x20007fd8

0800c794 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d106      	bne.n	800c7b0 <tcp_parseopt+0x1c>
 800c7a2:	4b32      	ldr	r3, [pc, #200]	@ (800c86c <tcp_parseopt+0xd8>)
 800c7a4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c7a8:	4931      	ldr	r1, [pc, #196]	@ (800c870 <tcp_parseopt+0xdc>)
 800c7aa:	4832      	ldr	r0, [pc, #200]	@ (800c874 <tcp_parseopt+0xe0>)
 800c7ac:	f005 f9ae 	bl	8011b0c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c7b0:	4b31      	ldr	r3, [pc, #196]	@ (800c878 <tcp_parseopt+0xe4>)
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d056      	beq.n	800c866 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7b8:	4b30      	ldr	r3, [pc, #192]	@ (800c87c <tcp_parseopt+0xe8>)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	801a      	strh	r2, [r3, #0]
 800c7be:	e046      	b.n	800c84e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800c7c0:	f7ff ffb2 	bl	800c728 <tcp_get_next_optbyte>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d006      	beq.n	800c7dc <tcp_parseopt+0x48>
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	dc2a      	bgt.n	800c828 <tcp_parseopt+0x94>
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d042      	beq.n	800c85c <tcp_parseopt+0xc8>
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d038      	beq.n	800c84c <tcp_parseopt+0xb8>
 800c7da:	e025      	b.n	800c828 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c7dc:	f7ff ffa4 	bl	800c728 <tcp_get_next_optbyte>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	d13c      	bne.n	800c860 <tcp_parseopt+0xcc>
 800c7e6:	4b25      	ldr	r3, [pc, #148]	@ (800c87c <tcp_parseopt+0xe8>)
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	4a22      	ldr	r2, [pc, #136]	@ (800c878 <tcp_parseopt+0xe4>)
 800c7ee:	8812      	ldrh	r2, [r2, #0]
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	da35      	bge.n	800c860 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c7f4:	f7ff ff98 	bl	800c728 <tcp_get_next_optbyte>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c7fe:	f7ff ff93 	bl	800c728 <tcp_get_next_optbyte>
 800c802:	4603      	mov	r3, r0
 800c804:	461a      	mov	r2, r3
 800c806:	89bb      	ldrh	r3, [r7, #12]
 800c808:	4313      	orrs	r3, r2
 800c80a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c80c:	89bb      	ldrh	r3, [r7, #12]
 800c80e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c812:	d804      	bhi.n	800c81e <tcp_parseopt+0x8a>
 800c814:	89bb      	ldrh	r3, [r7, #12]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <tcp_parseopt+0x8a>
 800c81a:	89ba      	ldrh	r2, [r7, #12]
 800c81c:	e001      	b.n	800c822 <tcp_parseopt+0x8e>
 800c81e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800c826:	e012      	b.n	800c84e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c828:	f7ff ff7e 	bl	800c728 <tcp_get_next_optbyte>
 800c82c:	4603      	mov	r3, r0
 800c82e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c830:	7afb      	ldrb	r3, [r7, #11]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d916      	bls.n	800c864 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c836:	7afb      	ldrb	r3, [r7, #11]
 800c838:	b29a      	uxth	r2, r3
 800c83a:	4b10      	ldr	r3, [pc, #64]	@ (800c87c <tcp_parseopt+0xe8>)
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	4413      	add	r3, r2
 800c840:	b29b      	uxth	r3, r3
 800c842:	3b02      	subs	r3, #2
 800c844:	b29a      	uxth	r2, r3
 800c846:	4b0d      	ldr	r3, [pc, #52]	@ (800c87c <tcp_parseopt+0xe8>)
 800c848:	801a      	strh	r2, [r3, #0]
 800c84a:	e000      	b.n	800c84e <tcp_parseopt+0xba>
          break;
 800c84c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c84e:	4b0b      	ldr	r3, [pc, #44]	@ (800c87c <tcp_parseopt+0xe8>)
 800c850:	881a      	ldrh	r2, [r3, #0]
 800c852:	4b09      	ldr	r3, [pc, #36]	@ (800c878 <tcp_parseopt+0xe4>)
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d3b2      	bcc.n	800c7c0 <tcp_parseopt+0x2c>
 800c85a:	e004      	b.n	800c866 <tcp_parseopt+0xd2>
          return;
 800c85c:	bf00      	nop
 800c85e:	e002      	b.n	800c866 <tcp_parseopt+0xd2>
            return;
 800c860:	bf00      	nop
 800c862:	e000      	b.n	800c866 <tcp_parseopt+0xd2>
            return;
 800c864:	bf00      	nop
      }
    }
  }
}
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	08014010 	.word	0x08014010
 800c870:	08014474 	.word	0x08014474
 800c874:	0801405c 	.word	0x0801405c
 800c878:	20007fdc 	.word	0x20007fdc
 800c87c:	20007fe4 	.word	0x20007fe4

0800c880 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c880:	b480      	push	{r7}
 800c882:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c884:	4b05      	ldr	r3, [pc, #20]	@ (800c89c <tcp_trigger_input_pcb_close+0x1c>)
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	f043 0310 	orr.w	r3, r3, #16
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	4b03      	ldr	r3, [pc, #12]	@ (800c89c <tcp_trigger_input_pcb_close+0x1c>)
 800c890:	701a      	strb	r2, [r3, #0]
}
 800c892:	bf00      	nop
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	20007ff5 	.word	0x20007ff5

0800c8a0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <tcp_route+0x28>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	7a1b      	ldrb	r3, [r3, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	7a1b      	ldrb	r3, [r3, #8]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fb fb46 	bl	8007f50 <netif_get_by_index>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	e003      	b.n	800c8d0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f003 fc0f 	bl	80100ec <ip4_route>
 800c8ce:	4603      	mov	r3, r0
  }
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c8d8:	b590      	push	{r4, r7, lr}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	603b      	str	r3, [r7, #0]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d105      	bne.n	800c8fa <tcp_create_segment+0x22>
 800c8ee:	4b45      	ldr	r3, [pc, #276]	@ (800ca04 <tcp_create_segment+0x12c>)
 800c8f0:	22a3      	movs	r2, #163	@ 0xa3
 800c8f2:	4945      	ldr	r1, [pc, #276]	@ (800ca08 <tcp_create_segment+0x130>)
 800c8f4:	4845      	ldr	r0, [pc, #276]	@ (800ca0c <tcp_create_segment+0x134>)
 800c8f6:	f005 f909 	bl	8011b0c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d105      	bne.n	800c90c <tcp_create_segment+0x34>
 800c900:	4b40      	ldr	r3, [pc, #256]	@ (800ca04 <tcp_create_segment+0x12c>)
 800c902:	22a4      	movs	r2, #164	@ 0xa4
 800c904:	4942      	ldr	r1, [pc, #264]	@ (800ca10 <tcp_create_segment+0x138>)
 800c906:	4841      	ldr	r0, [pc, #260]	@ (800ca0c <tcp_create_segment+0x134>)
 800c908:	f005 f900 	bl	8011b0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c90c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	b2db      	uxtb	r3, r3
 800c914:	f003 0304 	and.w	r3, r3, #4
 800c918:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c91a:	2003      	movs	r0, #3
 800c91c:	f7fa fe9c 	bl	8007658 <memp_malloc>
 800c920:	6138      	str	r0, [r7, #16]
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d104      	bne.n	800c932 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c928:	68b8      	ldr	r0, [r7, #8]
 800c92a:	f7fb fe71 	bl	8008610 <pbuf_free>
    return NULL;
 800c92e:	2300      	movs	r3, #0
 800c930:	e063      	b.n	800c9fa <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c938:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	891a      	ldrh	r2, [r3, #8]
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	429a      	cmp	r2, r3
 800c950:	d205      	bcs.n	800c95e <tcp_create_segment+0x86>
 800c952:	4b2c      	ldr	r3, [pc, #176]	@ (800ca04 <tcp_create_segment+0x12c>)
 800c954:	22b0      	movs	r2, #176	@ 0xb0
 800c956:	492f      	ldr	r1, [pc, #188]	@ (800ca14 <tcp_create_segment+0x13c>)
 800c958:	482c      	ldr	r0, [pc, #176]	@ (800ca0c <tcp_create_segment+0x134>)
 800c95a:	f005 f8d7 	bl	8011b0c <iprintf>
  seg->len = p->tot_len - optlen;
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	891a      	ldrh	r2, [r3, #8]
 800c962:	7dfb      	ldrb	r3, [r7, #23]
 800c964:	b29b      	uxth	r3, r3
 800c966:	1ad3      	subs	r3, r2, r3
 800c968:	b29a      	uxth	r2, r3
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	2200      	movs	r2, #0
 800c972:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c974:	2114      	movs	r1, #20
 800c976:	68b8      	ldr	r0, [r7, #8]
 800c978:	f7fb fdb4 	bl	80084e4 <pbuf_add_header>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d004      	beq.n	800c98c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c982:	6938      	ldr	r0, [r7, #16]
 800c984:	f7fd f8c9 	bl	8009b1a <tcp_seg_free>
    return NULL;
 800c988:	2300      	movs	r3, #0
 800c98a:	e036      	b.n	800c9fa <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	8ada      	ldrh	r2, [r3, #22]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	691c      	ldr	r4, [r3, #16]
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f7fa f9e6 	bl	8006d70 <lwip_htons>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	8b1a      	ldrh	r2, [r3, #24]
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	691c      	ldr	r4, [r3, #16]
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	f7fa f9dd 	bl	8006d70 <lwip_htons>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	691c      	ldr	r4, [r3, #16]
 800c9be:	6838      	ldr	r0, [r7, #0]
 800c9c0:	f7fa f9ec 	bl	8006d9c <lwip_htonl>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ca:	089b      	lsrs	r3, r3, #2
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	3305      	adds	r3, #5
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	031b      	lsls	r3, r3, #12
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	79fb      	ldrb	r3, [r7, #7]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	691c      	ldr	r4, [r3, #16]
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	f7fa f9c4 	bl	8006d70 <lwip_htons>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	749a      	strb	r2, [r3, #18]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	74da      	strb	r2, [r3, #19]
  return seg;
 800c9f8:	693b      	ldr	r3, [r7, #16]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	371c      	adds	r7, #28
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd90      	pop	{r4, r7, pc}
 800ca02:	bf00      	nop
 800ca04:	08014490 	.word	0x08014490
 800ca08:	080144c4 	.word	0x080144c4
 800ca0c:	080144e4 	.word	0x080144e4
 800ca10:	0801450c 	.word	0x0801450c
 800ca14:	08014530 	.word	0x08014530

0800ca18 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ca18:	b590      	push	{r4, r7, lr}
 800ca1a:	b08b      	sub	sp, #44	@ 0x2c
 800ca1c:	af02      	add	r7, sp, #8
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	460b      	mov	r3, r1
 800ca22:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ca24:	2300      	movs	r3, #0
 800ca26:	61bb      	str	r3, [r7, #24]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <tcp_split_unsent_seg+0x2c>
 800ca36:	4b97      	ldr	r3, [pc, #604]	@ (800cc94 <tcp_split_unsent_seg+0x27c>)
 800ca38:	f240 324b 	movw	r2, #843	@ 0x34b
 800ca3c:	4996      	ldr	r1, [pc, #600]	@ (800cc98 <tcp_split_unsent_seg+0x280>)
 800ca3e:	4897      	ldr	r0, [pc, #604]	@ (800cc9c <tcp_split_unsent_seg+0x284>)
 800ca40:	f005 f864 	bl	8011b0c <iprintf>

  useg = pcb->unsent;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca48:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d102      	bne.n	800ca56 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ca50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca54:	e119      	b.n	800cc8a <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800ca56:	887b      	ldrh	r3, [r7, #2]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d109      	bne.n	800ca70 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ca5c:	4b8d      	ldr	r3, [pc, #564]	@ (800cc94 <tcp_split_unsent_seg+0x27c>)
 800ca5e:	f240 3253 	movw	r2, #851	@ 0x353
 800ca62:	498f      	ldr	r1, [pc, #572]	@ (800cca0 <tcp_split_unsent_seg+0x288>)
 800ca64:	488d      	ldr	r0, [pc, #564]	@ (800cc9c <tcp_split_unsent_seg+0x284>)
 800ca66:	f005 f851 	bl	8011b0c <iprintf>
    return ERR_VAL;
 800ca6a:	f06f 0305 	mvn.w	r3, #5
 800ca6e:	e10c      	b.n	800cc8a <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	891b      	ldrh	r3, [r3, #8]
 800ca74:	887a      	ldrh	r2, [r7, #2]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d301      	bcc.n	800ca7e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e105      	b.n	800cc8a <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca82:	887a      	ldrh	r2, [r7, #2]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d906      	bls.n	800ca96 <tcp_split_unsent_seg+0x7e>
 800ca88:	4b82      	ldr	r3, [pc, #520]	@ (800cc94 <tcp_split_unsent_seg+0x27c>)
 800ca8a:	f240 325b 	movw	r2, #859	@ 0x35b
 800ca8e:	4985      	ldr	r1, [pc, #532]	@ (800cca4 <tcp_split_unsent_seg+0x28c>)
 800ca90:	4882      	ldr	r0, [pc, #520]	@ (800cc9c <tcp_split_unsent_seg+0x284>)
 800ca92:	f005 f83b 	bl	8011b0c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	891b      	ldrh	r3, [r3, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d106      	bne.n	800caac <tcp_split_unsent_seg+0x94>
 800ca9e:	4b7d      	ldr	r3, [pc, #500]	@ (800cc94 <tcp_split_unsent_seg+0x27c>)
 800caa0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800caa4:	4980      	ldr	r1, [pc, #512]	@ (800cca8 <tcp_split_unsent_seg+0x290>)
 800caa6:	487d      	ldr	r0, [pc, #500]	@ (800cc9c <tcp_split_unsent_seg+0x284>)
 800caa8:	f005 f830 	bl	8011b0c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	7b1b      	ldrb	r3, [r3, #12]
 800cab0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	891a      	ldrh	r2, [r3, #8]
 800cac2:	887b      	ldrh	r3, [r7, #2]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	b29a      	uxth	r2, r3
 800cacc:	89bb      	ldrh	r3, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cad6:	4619      	mov	r1, r3
 800cad8:	2036      	movs	r0, #54	@ 0x36
 800cada:	f7fb fab5 	bl	8008048 <pbuf_alloc>
 800cade:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 80ba 	beq.w	800cc5c <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	891a      	ldrh	r2, [r3, #8]
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	891b      	ldrh	r3, [r3, #8]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	887b      	ldrh	r3, [r7, #2]
 800caf8:	4413      	add	r3, r2
 800cafa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	6858      	ldr	r0, [r3, #4]
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	685a      	ldr	r2, [r3, #4]
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	18d1      	adds	r1, r2, r3
 800cb08:	897b      	ldrh	r3, [r7, #10]
 800cb0a:	89ba      	ldrh	r2, [r7, #12]
 800cb0c:	f7fb ff7a 	bl	8008a04 <pbuf_copy_partial>
 800cb10:	4603      	mov	r3, r0
 800cb12:	461a      	mov	r2, r3
 800cb14:	89bb      	ldrh	r3, [r7, #12]
 800cb16:	4293      	cmp	r3, r2
 800cb18:	f040 80a2 	bne.w	800cc60 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	899b      	ldrh	r3, [r3, #12]
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7fa f923 	bl	8006d70 <lwip_htons>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb32:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cb34:	2300      	movs	r3, #0
 800cb36:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800cb38:	7ffb      	ldrb	r3, [r7, #31]
 800cb3a:	f003 0308 	and.w	r3, r3, #8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d007      	beq.n	800cb52 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cb42:	7ffb      	ldrb	r3, [r7, #31]
 800cb44:	f023 0308 	bic.w	r3, r3, #8
 800cb48:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800cb4a:	7fbb      	ldrb	r3, [r7, #30]
 800cb4c:	f043 0308 	orr.w	r3, r3, #8
 800cb50:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800cb52:	7ffb      	ldrb	r3, [r7, #31]
 800cb54:	f003 0301 	and.w	r3, r3, #1
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d007      	beq.n	800cb6c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cb5c:	7ffb      	ldrb	r3, [r7, #31]
 800cb5e:	f023 0301 	bic.w	r3, r3, #1
 800cb62:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800cb64:	7fbb      	ldrb	r3, [r7, #30]
 800cb66:	f043 0301 	orr.w	r3, r3, #1
 800cb6a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fa f912 	bl	8006d9c <lwip_htonl>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	887b      	ldrh	r3, [r7, #2]
 800cb7c:	18d1      	adds	r1, r2, r3
 800cb7e:	7fba      	ldrb	r2, [r7, #30]
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	460b      	mov	r3, r1
 800cb86:	6939      	ldr	r1, [r7, #16]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff fea5 	bl	800c8d8 <tcp_create_segment>
 800cb8e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d066      	beq.n	800cc64 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fb fdc0 	bl	8008720 <pbuf_clen>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cbaa:	1a9b      	subs	r3, r3, r2
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	6858      	ldr	r0, [r3, #4]
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	891a      	ldrh	r2, [r3, #8]
 800cbbe:	89bb      	ldrh	r3, [r7, #12]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	f7fb fb9d 	bl	8008304 <pbuf_realloc>
  useg->len -= remainder;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	891a      	ldrh	r2, [r3, #8]
 800cbce:	89bb      	ldrh	r3, [r7, #12]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	899b      	ldrh	r3, [r3, #12]
 800cbde:	b29c      	uxth	r4, r3
 800cbe0:	7ffb      	ldrb	r3, [r7, #31]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fa f8c3 	bl	8006d70 <lwip_htons>
 800cbea:	4603      	mov	r3, r0
 800cbec:	461a      	mov	r2, r3
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	4322      	orrs	r2, r4
 800cbf4:	b292      	uxth	r2, r2
 800cbf6:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fb fd8c 	bl	8008720 <pbuf_clen>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc12:	4413      	add	r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fb fd7d 	bl	8008720 <pbuf_clen>
 800cc26:	4603      	mov	r3, r0
 800cc28:	461a      	mov	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc30:	4413      	add	r3, r2
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	69ba      	ldr	r2, [r7, #24]
 800cc46:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d103      	bne.n	800cc58 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e016      	b.n	800cc8a <tcp_split_unsent_seg+0x272>
    goto memerr;
 800cc5c:	bf00      	nop
 800cc5e:	e002      	b.n	800cc66 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800cc60:	bf00      	nop
 800cc62:	e000      	b.n	800cc66 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800cc64:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d006      	beq.n	800cc7a <tcp_split_unsent_seg+0x262>
 800cc6c:	4b09      	ldr	r3, [pc, #36]	@ (800cc94 <tcp_split_unsent_seg+0x27c>)
 800cc6e:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cc72:	490e      	ldr	r1, [pc, #56]	@ (800ccac <tcp_split_unsent_seg+0x294>)
 800cc74:	4809      	ldr	r0, [pc, #36]	@ (800cc9c <tcp_split_unsent_seg+0x284>)
 800cc76:	f004 ff49 	bl	8011b0c <iprintf>
  if (p != NULL) {
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800cc80:	6938      	ldr	r0, [r7, #16]
 800cc82:	f7fb fcc5 	bl	8008610 <pbuf_free>
  }

  return ERR_MEM;
 800cc86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3724      	adds	r7, #36	@ 0x24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd90      	pop	{r4, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	08014490 	.word	0x08014490
 800cc98:	08014880 	.word	0x08014880
 800cc9c:	080144e4 	.word	0x080144e4
 800cca0:	080148a4 	.word	0x080148a4
 800cca4:	080148c8 	.word	0x080148c8
 800cca8:	080148d8 	.word	0x080148d8
 800ccac:	080148e8 	.word	0x080148e8

0800ccb0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ccb0:	b590      	push	{r4, r7, lr}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d106      	bne.n	800cccc <tcp_send_fin+0x1c>
 800ccbe:	4b21      	ldr	r3, [pc, #132]	@ (800cd44 <tcp_send_fin+0x94>)
 800ccc0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800ccc4:	4920      	ldr	r1, [pc, #128]	@ (800cd48 <tcp_send_fin+0x98>)
 800ccc6:	4821      	ldr	r0, [pc, #132]	@ (800cd4c <tcp_send_fin+0x9c>)
 800ccc8:	f004 ff20 	bl	8011b0c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d02e      	beq.n	800cd32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	e002      	b.n	800cce2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1f8      	bne.n	800ccdc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	899b      	ldrh	r3, [r3, #12]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fa f83c 	bl	8006d70 <lwip_htons>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 0307 	and.w	r3, r3, #7
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d116      	bne.n	800cd32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	899b      	ldrh	r3, [r3, #12]
 800cd0a:	b29c      	uxth	r4, r3
 800cd0c:	2001      	movs	r0, #1
 800cd0e:	f7fa f82f 	bl	8006d70 <lwip_htons>
 800cd12:	4603      	mov	r3, r0
 800cd14:	461a      	mov	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	4322      	orrs	r2, r4
 800cd1c:	b292      	uxth	r2, r2
 800cd1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	8b5b      	ldrh	r3, [r3, #26]
 800cd24:	f043 0320 	orr.w	r3, r3, #32
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e004      	b.n	800cd3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cd32:	2101      	movs	r1, #1
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f80b 	bl	800cd50 <tcp_enqueue_flags>
 800cd3a:	4603      	mov	r3, r0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd90      	pop	{r4, r7, pc}
 800cd44:	08014490 	.word	0x08014490
 800cd48:	080148f4 	.word	0x080148f4
 800cd4c:	080144e4 	.word	0x080144e4

0800cd50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af02      	add	r7, sp, #8
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cd64:	78fb      	ldrb	r3, [r7, #3]
 800cd66:	f003 0303 	and.w	r3, r3, #3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <tcp_enqueue_flags+0x2c>
 800cd6e:	4b67      	ldr	r3, [pc, #412]	@ (800cf0c <tcp_enqueue_flags+0x1bc>)
 800cd70:	f240 4211 	movw	r2, #1041	@ 0x411
 800cd74:	4966      	ldr	r1, [pc, #408]	@ (800cf10 <tcp_enqueue_flags+0x1c0>)
 800cd76:	4867      	ldr	r0, [pc, #412]	@ (800cf14 <tcp_enqueue_flags+0x1c4>)
 800cd78:	f004 fec8 	bl	8011b0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <tcp_enqueue_flags+0x40>
 800cd82:	4b62      	ldr	r3, [pc, #392]	@ (800cf0c <tcp_enqueue_flags+0x1bc>)
 800cd84:	f240 4213 	movw	r2, #1043	@ 0x413
 800cd88:	4963      	ldr	r1, [pc, #396]	@ (800cf18 <tcp_enqueue_flags+0x1c8>)
 800cd8a:	4862      	ldr	r0, [pc, #392]	@ (800cf14 <tcp_enqueue_flags+0x1c4>)
 800cd8c:	f004 febe 	bl	8011b0c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cd90:	78fb      	ldrb	r3, [r7, #3]
 800cd92:	f003 0302 	and.w	r3, r3, #2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	f003 0304 	and.w	r3, r3, #4
 800cda8:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cdaa:	7dbb      	ldrb	r3, [r7, #22]
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	2036      	movs	r0, #54	@ 0x36
 800cdb6:	f7fb f947 	bl	8008048 <pbuf_alloc>
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d109      	bne.n	800cdd6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	8b5b      	ldrh	r3, [r3, #26]
 800cdc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdd4:	e095      	b.n	800cf02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	895a      	ldrh	r2, [r3, #10]
 800cdda:	7dbb      	ldrb	r3, [r7, #22]
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d206      	bcs.n	800cdf0 <tcp_enqueue_flags+0xa0>
 800cde2:	4b4a      	ldr	r3, [pc, #296]	@ (800cf0c <tcp_enqueue_flags+0x1bc>)
 800cde4:	f240 4239 	movw	r2, #1081	@ 0x439
 800cde8:	494c      	ldr	r1, [pc, #304]	@ (800cf1c <tcp_enqueue_flags+0x1cc>)
 800cdea:	484a      	ldr	r0, [pc, #296]	@ (800cf14 <tcp_enqueue_flags+0x1c4>)
 800cdec:	f004 fe8e 	bl	8011b0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cdf4:	78fa      	ldrb	r2, [r7, #3]
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	68f9      	ldr	r1, [r7, #12]
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff fd6a 	bl	800c8d8 <tcp_create_segment>
 800ce04:	60b8      	str	r0, [r7, #8]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d109      	bne.n	800ce20 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	8b5b      	ldrh	r3, [r3, #26]
 800ce10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ce1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce1e:	e070      	b.n	800cf02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	691b      	ldr	r3, [r3, #16]
 800ce24:	f003 0303 	and.w	r3, r3, #3
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d006      	beq.n	800ce3a <tcp_enqueue_flags+0xea>
 800ce2c:	4b37      	ldr	r3, [pc, #220]	@ (800cf0c <tcp_enqueue_flags+0x1bc>)
 800ce2e:	f240 4242 	movw	r2, #1090	@ 0x442
 800ce32:	493b      	ldr	r1, [pc, #236]	@ (800cf20 <tcp_enqueue_flags+0x1d0>)
 800ce34:	4837      	ldr	r0, [pc, #220]	@ (800cf14 <tcp_enqueue_flags+0x1c4>)
 800ce36:	f004 fe69 	bl	8011b0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	891b      	ldrh	r3, [r3, #8]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d006      	beq.n	800ce50 <tcp_enqueue_flags+0x100>
 800ce42:	4b32      	ldr	r3, [pc, #200]	@ (800cf0c <tcp_enqueue_flags+0x1bc>)
 800ce44:	f240 4243 	movw	r2, #1091	@ 0x443
 800ce48:	4936      	ldr	r1, [pc, #216]	@ (800cf24 <tcp_enqueue_flags+0x1d4>)
 800ce4a:	4832      	ldr	r0, [pc, #200]	@ (800cf14 <tcp_enqueue_flags+0x1c4>)
 800ce4c:	f004 fe5e 	bl	8011b0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d103      	bne.n	800ce60 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ce5e:	e00d      	b.n	800ce7c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce64:	613b      	str	r3, [r7, #16]
 800ce66:	e002      	b.n	800ce6e <tcp_enqueue_flags+0x11e>
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	613b      	str	r3, [r7, #16]
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1f8      	bne.n	800ce68 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	f003 0302 	and.w	r3, r3, #2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d104      	bne.n	800ce98 <tcp_enqueue_flags+0x148>
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d004      	beq.n	800cea2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce9c:	1c5a      	adds	r2, r3, #1
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cea2:	78fb      	ldrb	r3, [r7, #3]
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d006      	beq.n	800ceba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	8b5b      	ldrh	r3, [r3, #26]
 800ceb0:	f043 0320 	orr.w	r3, r3, #32
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fb fc2e 	bl	8008720 <pbuf_clen>
 800cec4:	4603      	mov	r3, r0
 800cec6:	461a      	mov	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cece:	4413      	add	r3, r2
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00e      	beq.n	800cf00 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10a      	bne.n	800cf00 <tcp_enqueue_flags+0x1b0>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d106      	bne.n	800cf00 <tcp_enqueue_flags+0x1b0>
 800cef2:	4b06      	ldr	r3, [pc, #24]	@ (800cf0c <tcp_enqueue_flags+0x1bc>)
 800cef4:	f240 4265 	movw	r2, #1125	@ 0x465
 800cef8:	490b      	ldr	r1, [pc, #44]	@ (800cf28 <tcp_enqueue_flags+0x1d8>)
 800cefa:	4806      	ldr	r0, [pc, #24]	@ (800cf14 <tcp_enqueue_flags+0x1c4>)
 800cefc:	f004 fe06 	bl	8011b0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3718      	adds	r7, #24
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	08014490 	.word	0x08014490
 800cf10:	08014910 	.word	0x08014910
 800cf14:	080144e4 	.word	0x080144e4
 800cf18:	08014968 	.word	0x08014968
 800cf1c:	08014988 	.word	0x08014988
 800cf20:	080149c4 	.word	0x080149c4
 800cf24:	080149dc 	.word	0x080149dc
 800cf28:	08014a08 	.word	0x08014a08

0800cf2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cf2c:	b5b0      	push	{r4, r5, r7, lr}
 800cf2e:	b08a      	sub	sp, #40	@ 0x28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <tcp_output+0x1c>
 800cf3a:	4b8a      	ldr	r3, [pc, #552]	@ (800d164 <tcp_output+0x238>)
 800cf3c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800cf40:	4989      	ldr	r1, [pc, #548]	@ (800d168 <tcp_output+0x23c>)
 800cf42:	488a      	ldr	r0, [pc, #552]	@ (800d16c <tcp_output+0x240>)
 800cf44:	f004 fde2 	bl	8011b0c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7d1b      	ldrb	r3, [r3, #20]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d106      	bne.n	800cf5e <tcp_output+0x32>
 800cf50:	4b84      	ldr	r3, [pc, #528]	@ (800d164 <tcp_output+0x238>)
 800cf52:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cf56:	4986      	ldr	r1, [pc, #536]	@ (800d170 <tcp_output+0x244>)
 800cf58:	4884      	ldr	r0, [pc, #528]	@ (800d16c <tcp_output+0x240>)
 800cf5a:	f004 fdd7 	bl	8011b0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cf5e:	4b85      	ldr	r3, [pc, #532]	@ (800d174 <tcp_output+0x248>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d101      	bne.n	800cf6c <tcp_output+0x40>
    return ERR_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	e1d1      	b.n	800d310 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	bf28      	it	cs
 800cf7c:	4613      	movcs	r3, r2
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800cf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	8b5b      	ldrh	r3, [r3, #26]
 800cf92:	f003 0302 	and.w	r3, r3, #2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f000 81ad 	beq.w	800d2f6 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fdd7 	bl	800db50 <tcp_send_empty_ack>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	e1b4      	b.n	800d310 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cfa6:	6879      	ldr	r1, [r7, #4]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	461a      	mov	r2, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff fc76 	bl	800c8a0 <tcp_route>
 800cfb4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d102      	bne.n	800cfc2 <tcp_output+0x96>
    return ERR_RTE;
 800cfbc:	f06f 0303 	mvn.w	r3, #3
 800cfc0:	e1a6      	b.n	800d310 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d003      	beq.n	800cfd0 <tcp_output+0xa4>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d111      	bne.n	800cff4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d002      	beq.n	800cfdc <tcp_output+0xb0>
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	e000      	b.n	800cfde <tcp_output+0xb2>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d102      	bne.n	800cfec <tcp_output+0xc0>
      return ERR_RTE;
 800cfe6:	f06f 0303 	mvn.w	r3, #3
 800cfea:	e191      	b.n	800d310 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7f9 fece 	bl	8006d9c <lwip_htonl>
 800d000:	4602      	mov	r2, r0
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d00a:	8912      	ldrh	r2, [r2, #8]
 800d00c:	4413      	add	r3, r2
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	429a      	cmp	r2, r3
 800d012:	d227      	bcs.n	800d064 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d01a:	461a      	mov	r2, r3
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	4293      	cmp	r3, r2
 800d020:	d114      	bne.n	800d04c <tcp_output+0x120>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d026:	2b00      	cmp	r3, #0
 800d028:	d110      	bne.n	800d04c <tcp_output+0x120>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10b      	bne.n	800d04c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8b5b      	ldrh	r3, [r3, #26]
 800d050:	f003 0302 	and.w	r3, r3, #2
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 8150 	beq.w	800d2fa <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fd78 	bl	800db50 <tcp_send_empty_ack>
 800d060:	4603      	mov	r3, r0
 800d062:	e155      	b.n	800d310 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d070:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d072:	6a3b      	ldr	r3, [r7, #32]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 811f 	beq.w	800d2b8 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800d07a:	e002      	b.n	800d082 <tcp_output+0x156>
 800d07c:	6a3b      	ldr	r3, [r7, #32]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	623b      	str	r3, [r7, #32]
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1f8      	bne.n	800d07c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d08a:	e115      	b.n	800d2b8 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08e:	691b      	ldr	r3, [r3, #16]
 800d090:	899b      	ldrh	r3, [r3, #12]
 800d092:	b29b      	uxth	r3, r3
 800d094:	4618      	mov	r0, r3
 800d096:	f7f9 fe6b 	bl	8006d70 <lwip_htons>
 800d09a:	4603      	mov	r3, r0
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	f003 0304 	and.w	r3, r3, #4
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d006      	beq.n	800d0b4 <tcp_output+0x188>
 800d0a6:	4b2f      	ldr	r3, [pc, #188]	@ (800d164 <tcp_output+0x238>)
 800d0a8:	f240 5236 	movw	r2, #1334	@ 0x536
 800d0ac:	4932      	ldr	r1, [pc, #200]	@ (800d178 <tcp_output+0x24c>)
 800d0ae:	482f      	ldr	r0, [pc, #188]	@ (800d16c <tcp_output+0x240>)
 800d0b0:	f004 fd2c 	bl	8011b0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d01f      	beq.n	800d0fc <tcp_output+0x1d0>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	8b5b      	ldrh	r3, [r3, #26]
 800d0c0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d119      	bne.n	800d0fc <tcp_output+0x1d0>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00b      	beq.n	800d0e8 <tcp_output+0x1bc>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d110      	bne.n	800d0fc <tcp_output+0x1d0>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0de:	891a      	ldrh	r2, [r3, #8]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d209      	bcs.n	800d0fc <tcp_output+0x1d0>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d004      	beq.n	800d0fc <tcp_output+0x1d0>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d0f8:	2b08      	cmp	r3, #8
 800d0fa:	d901      	bls.n	800d100 <tcp_output+0x1d4>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e000      	b.n	800d102 <tcp_output+0x1d6>
 800d100:	2300      	movs	r3, #0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d106      	bne.n	800d114 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	8b5b      	ldrh	r3, [r3, #26]
 800d10a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f000 80e7 	beq.w	800d2e2 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	7d1b      	ldrb	r3, [r3, #20]
 800d118:	2b02      	cmp	r3, #2
 800d11a:	d00d      	beq.n	800d138 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	899b      	ldrh	r3, [r3, #12]
 800d122:	b29c      	uxth	r4, r3
 800d124:	2010      	movs	r0, #16
 800d126:	f7f9 fe23 	bl	8006d70 <lwip_htons>
 800d12a:	4603      	mov	r3, r0
 800d12c:	461a      	mov	r2, r3
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	4322      	orrs	r2, r4
 800d134:	b292      	uxth	r2, r2
 800d136:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d13e:	f000 f90b 	bl	800d358 <tcp_output_segment>
 800d142:	4603      	mov	r3, r0
 800d144:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d016      	beq.n	800d17c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	8b5b      	ldrh	r3, [r3, #26]
 800d152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d156:	b29a      	uxth	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	835a      	strh	r2, [r3, #26]
      return err;
 800d15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d160:	e0d6      	b.n	800d310 <tcp_output+0x3e4>
 800d162:	bf00      	nop
 800d164:	08014490 	.word	0x08014490
 800d168:	08014a30 	.word	0x08014a30
 800d16c:	080144e4 	.word	0x080144e4
 800d170:	08014a48 	.word	0x08014a48
 800d174:	20007ffc 	.word	0x20007ffc
 800d178:	08014a70 	.word	0x08014a70
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800d17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17e:	2200      	movs	r2, #0
 800d180:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7d1b      	ldrb	r3, [r3, #20]
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d006      	beq.n	800d1a0 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8b5b      	ldrh	r3, [r3, #26]
 800d196:	f023 0303 	bic.w	r3, r3, #3
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f9 fdf8 	bl	8006d9c <lwip_htonl>
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b0:	891b      	ldrh	r3, [r3, #8]
 800d1b2:	461d      	mov	r5, r3
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	899b      	ldrh	r3, [r3, #12]
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7f9 fdd7 	bl	8006d70 <lwip_htons>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	f003 0303 	and.w	r3, r3, #3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d001      	beq.n	800d1d2 <tcp_output+0x2a6>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e000      	b.n	800d1d4 <tcp_output+0x2a8>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	442b      	add	r3, r5
 800d1d6:	4423      	add	r3, r4
 800d1d8:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	1ad3      	subs	r3, r2, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	da02      	bge.n	800d1ec <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	891b      	ldrh	r3, [r3, #8]
 800d1f0:	461c      	mov	r4, r3
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	899b      	ldrh	r3, [r3, #12]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7f9 fdb8 	bl	8006d70 <lwip_htons>
 800d200:	4603      	mov	r3, r0
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 0303 	and.w	r3, r3, #3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <tcp_output+0x2e4>
 800d20c:	2301      	movs	r3, #1
 800d20e:	e000      	b.n	800d212 <tcp_output+0x2e6>
 800d210:	2300      	movs	r3, #0
 800d212:	4423      	add	r3, r4
 800d214:	2b00      	cmp	r3, #0
 800d216:	d049      	beq.n	800d2ac <tcp_output+0x380>
      seg->next = NULL;
 800d218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d222:	2b00      	cmp	r3, #0
 800d224:	d105      	bne.n	800d232 <tcp_output+0x306>
        pcb->unacked = seg;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d22a:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	623b      	str	r3, [r7, #32]
 800d230:	e03f      	b.n	800d2b2 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4618      	mov	r0, r3
 800d23a:	f7f9 fdaf 	bl	8006d9c <lwip_htonl>
 800d23e:	4604      	mov	r4, r0
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	4618      	mov	r0, r3
 800d248:	f7f9 fda8 	bl	8006d9c <lwip_htonl>
 800d24c:	4603      	mov	r3, r0
 800d24e:	1ae3      	subs	r3, r4, r3
 800d250:	2b00      	cmp	r3, #0
 800d252:	da24      	bge.n	800d29e <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	3370      	adds	r3, #112	@ 0x70
 800d258:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d25a:	e002      	b.n	800d262 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d011      	beq.n	800d28e <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	4618      	mov	r0, r3
 800d274:	f7f9 fd92 	bl	8006d9c <lwip_htonl>
 800d278:	4604      	mov	r4, r0
 800d27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	4618      	mov	r0, r3
 800d282:	f7f9 fd8b 	bl	8006d9c <lwip_htonl>
 800d286:	4603      	mov	r3, r0
 800d288:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	dbe6      	blt.n	800d25c <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d294:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	e009      	b.n	800d2b2 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2a2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d2a4:	6a3b      	ldr	r3, [r7, #32]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	623b      	str	r3, [r7, #32]
 800d2aa:	e002      	b.n	800d2b2 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d2ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d2ae:	f7fc fc34 	bl	8009b1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d012      	beq.n	800d2e4 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7f9 fd69 	bl	8006d9c <lwip_htonl>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2d4:	8912      	ldrh	r2, [r2, #8]
 800d2d6:	4413      	add	r3, r2
  while (seg != NULL &&
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	f4bf aed6 	bcs.w	800d08c <tcp_output+0x160>
 800d2e0:	e000      	b.n	800d2e4 <tcp_output+0x3b8>
      break;
 800d2e2:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d108      	bne.n	800d2fe <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d2f4:	e004      	b.n	800d300 <tcp_output+0x3d4>
    goto output_done;
 800d2f6:	bf00      	nop
 800d2f8:	e002      	b.n	800d300 <tcp_output+0x3d4>
    goto output_done;
 800d2fa:	bf00      	nop
 800d2fc:	e000      	b.n	800d300 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d2fe:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8b5b      	ldrh	r3, [r3, #26]
 800d304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d308:	b29a      	uxth	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3728      	adds	r7, #40	@ 0x28
 800d314:	46bd      	mov	sp, r7
 800d316:	bdb0      	pop	{r4, r5, r7, pc}

0800d318 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d106      	bne.n	800d334 <tcp_output_segment_busy+0x1c>
 800d326:	4b09      	ldr	r3, [pc, #36]	@ (800d34c <tcp_output_segment_busy+0x34>)
 800d328:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d32c:	4908      	ldr	r1, [pc, #32]	@ (800d350 <tcp_output_segment_busy+0x38>)
 800d32e:	4809      	ldr	r0, [pc, #36]	@ (800d354 <tcp_output_segment_busy+0x3c>)
 800d330:	f004 fbec 	bl	8011b0c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	7b9b      	ldrb	r3, [r3, #14]
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d001      	beq.n	800d342 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d33e:	2301      	movs	r3, #1
 800d340:	e000      	b.n	800d344 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	08014490 	.word	0x08014490
 800d350:	08014a88 	.word	0x08014a88
 800d354:	080144e4 	.word	0x080144e4

0800d358 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d358:	b5b0      	push	{r4, r5, r7, lr}
 800d35a:	b08c      	sub	sp, #48	@ 0x30
 800d35c:	af04      	add	r7, sp, #16
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d106      	bne.n	800d378 <tcp_output_segment+0x20>
 800d36a:	4b64      	ldr	r3, [pc, #400]	@ (800d4fc <tcp_output_segment+0x1a4>)
 800d36c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d370:	4963      	ldr	r1, [pc, #396]	@ (800d500 <tcp_output_segment+0x1a8>)
 800d372:	4864      	ldr	r0, [pc, #400]	@ (800d504 <tcp_output_segment+0x1ac>)
 800d374:	f004 fbca 	bl	8011b0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d106      	bne.n	800d38c <tcp_output_segment+0x34>
 800d37e:	4b5f      	ldr	r3, [pc, #380]	@ (800d4fc <tcp_output_segment+0x1a4>)
 800d380:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d384:	4960      	ldr	r1, [pc, #384]	@ (800d508 <tcp_output_segment+0x1b0>)
 800d386:	485f      	ldr	r0, [pc, #380]	@ (800d504 <tcp_output_segment+0x1ac>)
 800d388:	f004 fbc0 	bl	8011b0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d106      	bne.n	800d3a0 <tcp_output_segment+0x48>
 800d392:	4b5a      	ldr	r3, [pc, #360]	@ (800d4fc <tcp_output_segment+0x1a4>)
 800d394:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d398:	495c      	ldr	r1, [pc, #368]	@ (800d50c <tcp_output_segment+0x1b4>)
 800d39a:	485a      	ldr	r0, [pc, #360]	@ (800d504 <tcp_output_segment+0x1ac>)
 800d39c:	f004 fbb6 	bl	8011b0c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f7ff ffb9 	bl	800d318 <tcp_output_segment_busy>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	e0a1      	b.n	800d4f4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	691c      	ldr	r4, [r3, #16]
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	f7f9 fcef 	bl	8006d9c <lwip_htonl>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	691c      	ldr	r4, [r3, #16]
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	f7f9 fcd0 	bl	8006d70 <lwip_htons>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d3dc:	441a      	add	r2, r3
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	3314      	adds	r3, #20
 800d3e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	7b1b      	ldrb	r3, [r3, #12]
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d015      	beq.n	800d422 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	3304      	adds	r3, #4
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d402:	f7fc fe81 	bl	800a108 <tcp_eff_send_mss_netif>
 800d406:	4603      	mov	r3, r0
 800d408:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d40a:	8b7b      	ldrh	r3, [r7, #26]
 800d40c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d410:	4618      	mov	r0, r3
 800d412:	f7f9 fcc3 	bl	8006d9c <lwip_htonl>
 800d416:	4602      	mov	r2, r0
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	3304      	adds	r3, #4
 800d420:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d428:	2b00      	cmp	r3, #0
 800d42a:	da02      	bge.n	800d432 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	2200      	movs	r2, #0
 800d430:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10c      	bne.n	800d454 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d43a:	4b35      	ldr	r3, [pc, #212]	@ (800d510 <tcp_output_segment+0x1b8>)
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	4618      	mov	r0, r3
 800d44a:	f7f9 fca7 	bl	8006d9c <lwip_htonl>
 800d44e:	4602      	mov	r2, r0
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	691a      	ldr	r2, [r3, #16]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	8959      	ldrh	r1, [r3, #10]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	8b3a      	ldrh	r2, [r7, #24]
 800d46e:	1a8a      	subs	r2, r1, r2
 800d470:	b292      	uxth	r2, r2
 800d472:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	8919      	ldrh	r1, [r3, #8]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	8b3a      	ldrh	r2, [r7, #24]
 800d480:	1a8a      	subs	r2, r1, r2
 800d482:	b292      	uxth	r2, r2
 800d484:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	6912      	ldr	r2, [r2, #16]
 800d48e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	2200      	movs	r2, #0
 800d496:	741a      	strb	r2, [r3, #16]
 800d498:	2200      	movs	r2, #0
 800d49a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	691a      	ldr	r2, [r3, #16]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	7b1b      	ldrb	r3, [r3, #12]
 800d4a4:	f003 0301 	and.w	r3, r3, #1
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d001      	beq.n	800d4b0 <tcp_output_segment+0x158>
 800d4ac:	2318      	movs	r3, #24
 800d4ae:	e000      	b.n	800d4b2 <tcp_output_segment+0x15a>
 800d4b0:	2314      	movs	r3, #20
 800d4b2:	4413      	add	r3, r2
 800d4b4:	69fa      	ldr	r2, [r7, #28]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d006      	beq.n	800d4c8 <tcp_output_segment+0x170>
 800d4ba:	4b10      	ldr	r3, [pc, #64]	@ (800d4fc <tcp_output_segment+0x1a4>)
 800d4bc:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d4c0:	4914      	ldr	r1, [pc, #80]	@ (800d514 <tcp_output_segment+0x1bc>)
 800d4c2:	4810      	ldr	r0, [pc, #64]	@ (800d504 <tcp_output_segment+0x1ac>)
 800d4c4:	f004 fb22 	bl	8011b0c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6858      	ldr	r0, [r3, #4]
 800d4cc:	68b9      	ldr	r1, [r7, #8]
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	1d1c      	adds	r4, r3, #4
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	7add      	ldrb	r5, [r3, #11]
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	7a9b      	ldrb	r3, [r3, #10]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	9202      	str	r2, [sp, #8]
 800d4de:	2206      	movs	r2, #6
 800d4e0:	9201      	str	r2, [sp, #4]
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	462b      	mov	r3, r5
 800d4e6:	4622      	mov	r2, r4
 800d4e8:	f002 ffbe 	bl	8010468 <ip4_output_if>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d4f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3720      	adds	r7, #32
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d4fc:	08014490 	.word	0x08014490
 800d500:	08014ab0 	.word	0x08014ab0
 800d504:	080144e4 	.word	0x080144e4
 800d508:	08014ad0 	.word	0x08014ad0
 800d50c:	08014af0 	.word	0x08014af0
 800d510:	20007fac 	.word	0x20007fac
 800d514:	08014b14 	.word	0x08014b14

0800d518 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d518:	b5b0      	push	{r4, r5, r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <tcp_rexmit_rto_prepare+0x1c>
 800d526:	4b36      	ldr	r3, [pc, #216]	@ (800d600 <tcp_rexmit_rto_prepare+0xe8>)
 800d528:	f240 6263 	movw	r2, #1635	@ 0x663
 800d52c:	4935      	ldr	r1, [pc, #212]	@ (800d604 <tcp_rexmit_rto_prepare+0xec>)
 800d52e:	4836      	ldr	r0, [pc, #216]	@ (800d608 <tcp_rexmit_rto_prepare+0xf0>)
 800d530:	f004 faec 	bl	8011b0c <iprintf>

  if (pcb->unacked == NULL) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d102      	bne.n	800d542 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d53c:	f06f 0305 	mvn.w	r3, #5
 800d540:	e059      	b.n	800d5f6 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	e00b      	b.n	800d562 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff fee4 	bl	800d318 <tcp_output_segment_busy>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d556:	f06f 0305 	mvn.w	r3, #5
 800d55a:	e04c      	b.n	800d5f6 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1ef      	bne.n	800d54a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f7ff fed4 	bl	800d318 <tcp_output_segment_busy>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d576:	f06f 0305 	mvn.w	r3, #5
 800d57a:	e03c      	b.n	800d5f6 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d104      	bne.n	800d596 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	895a      	ldrh	r2, [r3, #10]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	8b5b      	ldrh	r3, [r3, #26]
 800d5a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7f9 fbef 	bl	8006d9c <lwip_htonl>
 800d5be:	4604      	mov	r4, r0
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	891b      	ldrh	r3, [r3, #8]
 800d5c4:	461d      	mov	r5, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	691b      	ldr	r3, [r3, #16]
 800d5ca:	899b      	ldrh	r3, [r3, #12]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7f9 fbce 	bl	8006d70 <lwip_htons>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	f003 0303 	and.w	r3, r3, #3
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <tcp_rexmit_rto_prepare+0xcc>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e000      	b.n	800d5e6 <tcp_rexmit_rto_prepare+0xce>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	442b      	add	r3, r5
 800d5e8:	18e2      	adds	r2, r4, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bdb0      	pop	{r4, r5, r7, pc}
 800d5fe:	bf00      	nop
 800d600:	08014490 	.word	0x08014490
 800d604:	08014b28 	.word	0x08014b28
 800d608:	080144e4 	.word	0x080144e4

0800d60c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <tcp_rexmit_rto_commit+0x1c>
 800d61a:	4b0d      	ldr	r3, [pc, #52]	@ (800d650 <tcp_rexmit_rto_commit+0x44>)
 800d61c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d620:	490c      	ldr	r1, [pc, #48]	@ (800d654 <tcp_rexmit_rto_commit+0x48>)
 800d622:	480d      	ldr	r0, [pc, #52]	@ (800d658 <tcp_rexmit_rto_commit+0x4c>)
 800d624:	f004 fa72 	bl	8011b0c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d62e:	2bff      	cmp	r3, #255	@ 0xff
 800d630:	d007      	beq.n	800d642 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d638:	3301      	adds	r3, #1
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7ff fc72 	bl	800cf2c <tcp_output>
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	08014490 	.word	0x08014490
 800d654:	08014b4c 	.word	0x08014b4c
 800d658:	080144e4 	.word	0x080144e4

0800d65c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d106      	bne.n	800d678 <tcp_rexmit_rto+0x1c>
 800d66a:	4b0a      	ldr	r3, [pc, #40]	@ (800d694 <tcp_rexmit_rto+0x38>)
 800d66c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d670:	4909      	ldr	r1, [pc, #36]	@ (800d698 <tcp_rexmit_rto+0x3c>)
 800d672:	480a      	ldr	r0, [pc, #40]	@ (800d69c <tcp_rexmit_rto+0x40>)
 800d674:	f004 fa4a 	bl	8011b0c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff ff4d 	bl	800d518 <tcp_rexmit_rto_prepare>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff ffc1 	bl	800d60c <tcp_rexmit_rto_commit>
  }
}
 800d68a:	bf00      	nop
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	08014490 	.word	0x08014490
 800d698:	08014b70 	.word	0x08014b70
 800d69c:	080144e4 	.word	0x080144e4

0800d6a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d6a0:	b590      	push	{r4, r7, lr}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <tcp_rexmit+0x1c>
 800d6ae:	4b2f      	ldr	r3, [pc, #188]	@ (800d76c <tcp_rexmit+0xcc>)
 800d6b0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d6b4:	492e      	ldr	r1, [pc, #184]	@ (800d770 <tcp_rexmit+0xd0>)
 800d6b6:	482f      	ldr	r0, [pc, #188]	@ (800d774 <tcp_rexmit+0xd4>)
 800d6b8:	f004 fa28 	bl	8011b0c <iprintf>

  if (pcb->unacked == NULL) {
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d102      	bne.n	800d6ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d6c4:	f06f 0305 	mvn.w	r3, #5
 800d6c8:	e04c      	b.n	800d764 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d6d0:	68b8      	ldr	r0, [r7, #8]
 800d6d2:	f7ff fe21 	bl	800d318 <tcp_output_segment_busy>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d6dc:	f06f 0305 	mvn.w	r3, #5
 800d6e0:	e040      	b.n	800d764 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	336c      	adds	r3, #108	@ 0x6c
 800d6ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6f0:	e002      	b.n	800d6f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d011      	beq.n	800d724 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7f9 fb47 	bl	8006d9c <lwip_htonl>
 800d70e:	4604      	mov	r4, r0
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	4618      	mov	r0, r3
 800d718:	f7f9 fb40 	bl	8006d9c <lwip_htonl>
 800d71c:	4603      	mov	r3, r0
 800d71e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d720:	2b00      	cmp	r3, #0
 800d722:	dbe6      	blt.n	800d6f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d103      	bne.n	800d742 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d748:	2bff      	cmp	r3, #255	@ 0xff
 800d74a:	d007      	beq.n	800d75c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d752:	3301      	adds	r3, #1
 800d754:	b2da      	uxtb	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd90      	pop	{r4, r7, pc}
 800d76c:	08014490 	.word	0x08014490
 800d770:	08014b8c 	.word	0x08014b8c
 800d774:	080144e4 	.word	0x080144e4

0800d778 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d106      	bne.n	800d794 <tcp_rexmit_fast+0x1c>
 800d786:	4b2a      	ldr	r3, [pc, #168]	@ (800d830 <tcp_rexmit_fast+0xb8>)
 800d788:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d78c:	4929      	ldr	r1, [pc, #164]	@ (800d834 <tcp_rexmit_fast+0xbc>)
 800d78e:	482a      	ldr	r0, [pc, #168]	@ (800d838 <tcp_rexmit_fast+0xc0>)
 800d790:	f004 f9bc 	bl	8011b0c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d045      	beq.n	800d828 <tcp_rexmit_fast+0xb0>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	8b5b      	ldrh	r3, [r3, #26]
 800d7a0:	f003 0304 	and.w	r3, r3, #4
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d13f      	bne.n	800d828 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff ff79 	bl	800d6a0 <tcp_rexmit>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d139      	bne.n	800d828 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	bf28      	it	cs
 800d7c4:	4613      	movcs	r3, r2
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	da00      	bge.n	800d7ce <tcp_rexmit_fast+0x56>
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	105b      	asrs	r3, r3, #1
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d7de:	461a      	mov	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d206      	bcs.n	800d7f8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d802:	4619      	mov	r1, r3
 800d804:	0049      	lsls	r1, r1, #1
 800d806:	440b      	add	r3, r1
 800d808:	b29b      	uxth	r3, r3
 800d80a:	4413      	add	r3, r2
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	8b5b      	ldrh	r3, [r3, #26]
 800d818:	f043 0304 	orr.w	r3, r3, #4
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d828:	bf00      	nop
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	08014490 	.word	0x08014490
 800d834:	08014ba4 	.word	0x08014ba4
 800d838:	080144e4 	.word	0x080144e4

0800d83c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	607b      	str	r3, [r7, #4]
 800d846:	460b      	mov	r3, r1
 800d848:	817b      	strh	r3, [r7, #10]
 800d84a:	4613      	mov	r3, r2
 800d84c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d84e:	897a      	ldrh	r2, [r7, #10]
 800d850:	893b      	ldrh	r3, [r7, #8]
 800d852:	4413      	add	r3, r2
 800d854:	b29b      	uxth	r3, r3
 800d856:	3314      	adds	r3, #20
 800d858:	b29b      	uxth	r3, r3
 800d85a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d85e:	4619      	mov	r1, r3
 800d860:	2022      	movs	r0, #34	@ 0x22
 800d862:	f7fa fbf1 	bl	8008048 <pbuf_alloc>
 800d866:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d04d      	beq.n	800d90a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d86e:	897b      	ldrh	r3, [r7, #10]
 800d870:	3313      	adds	r3, #19
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	8952      	ldrh	r2, [r2, #10]
 800d876:	4293      	cmp	r3, r2
 800d878:	db06      	blt.n	800d888 <tcp_output_alloc_header_common+0x4c>
 800d87a:	4b26      	ldr	r3, [pc, #152]	@ (800d914 <tcp_output_alloc_header_common+0xd8>)
 800d87c:	f240 7223 	movw	r2, #1827	@ 0x723
 800d880:	4925      	ldr	r1, [pc, #148]	@ (800d918 <tcp_output_alloc_header_common+0xdc>)
 800d882:	4826      	ldr	r0, [pc, #152]	@ (800d91c <tcp_output_alloc_header_common+0xe0>)
 800d884:	f004 f942 	bl	8011b0c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d88e:	8c3b      	ldrh	r3, [r7, #32]
 800d890:	4618      	mov	r0, r3
 800d892:	f7f9 fa6d 	bl	8006d70 <lwip_htons>
 800d896:	4603      	mov	r3, r0
 800d898:	461a      	mov	r2, r3
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d89e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7f9 fa65 	bl	8006d70 <lwip_htons>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f7f9 fa71 	bl	8006d9c <lwip_htonl>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d8c0:	897b      	ldrh	r3, [r7, #10]
 800d8c2:	089b      	lsrs	r3, r3, #2
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	3305      	adds	r3, #5
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	031b      	lsls	r3, r3, #12
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7f9 fa49 	bl	8006d70 <lwip_htons>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d8e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7f9 fa41 	bl	8006d70 <lwip_htons>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	741a      	strb	r2, [r3, #16]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2200      	movs	r2, #0
 800d904:	749a      	strb	r2, [r3, #18]
 800d906:	2200      	movs	r2, #0
 800d908:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d90a:	697b      	ldr	r3, [r7, #20]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	08014490 	.word	0x08014490
 800d918:	08014bc4 	.word	0x08014bc4
 800d91c:	080144e4 	.word	0x080144e4

0800d920 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d920:	b5b0      	push	{r4, r5, r7, lr}
 800d922:	b08a      	sub	sp, #40	@ 0x28
 800d924:	af04      	add	r7, sp, #16
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	607b      	str	r3, [r7, #4]
 800d92a:	460b      	mov	r3, r1
 800d92c:	817b      	strh	r3, [r7, #10]
 800d92e:	4613      	mov	r3, r2
 800d930:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <tcp_output_alloc_header+0x26>
 800d938:	4b15      	ldr	r3, [pc, #84]	@ (800d990 <tcp_output_alloc_header+0x70>)
 800d93a:	f240 7242 	movw	r2, #1858	@ 0x742
 800d93e:	4915      	ldr	r1, [pc, #84]	@ (800d994 <tcp_output_alloc_header+0x74>)
 800d940:	4815      	ldr	r0, [pc, #84]	@ (800d998 <tcp_output_alloc_header+0x78>)
 800d942:	f004 f8e3 	bl	8011b0c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	8adb      	ldrh	r3, [r3, #22]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	8b12      	ldrh	r2, [r2, #24]
 800d952:	68f9      	ldr	r1, [r7, #12]
 800d954:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d956:	893d      	ldrh	r5, [r7, #8]
 800d958:	897c      	ldrh	r4, [r7, #10]
 800d95a:	9103      	str	r1, [sp, #12]
 800d95c:	2110      	movs	r1, #16
 800d95e:	9102      	str	r1, [sp, #8]
 800d960:	9201      	str	r2, [sp, #4]
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	462a      	mov	r2, r5
 800d968:	4621      	mov	r1, r4
 800d96a:	f7ff ff67 	bl	800d83c <tcp_output_alloc_header_common>
 800d96e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d006      	beq.n	800d984 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d97e:	441a      	add	r2, r3
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d984:	697b      	ldr	r3, [r7, #20]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3718      	adds	r7, #24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bdb0      	pop	{r4, r5, r7, pc}
 800d98e:	bf00      	nop
 800d990:	08014490 	.word	0x08014490
 800d994:	08014bf4 	.word	0x08014bf4
 800d998:	080144e4 	.word	0x080144e4

0800d99c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b088      	sub	sp, #32
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	71fb      	strb	r3, [r7, #7]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d106      	bne.n	800d9ca <tcp_output_fill_options+0x2e>
 800d9bc:	4b12      	ldr	r3, [pc, #72]	@ (800da08 <tcp_output_fill_options+0x6c>)
 800d9be:	f240 7256 	movw	r2, #1878	@ 0x756
 800d9c2:	4912      	ldr	r1, [pc, #72]	@ (800da0c <tcp_output_fill_options+0x70>)
 800d9c4:	4812      	ldr	r0, [pc, #72]	@ (800da10 <tcp_output_fill_options+0x74>)
 800d9c6:	f004 f8a1 	bl	8011b0c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	3314      	adds	r3, #20
 800d9d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d9d6:	8bfb      	ldrh	r3, [r7, #30]
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	461a      	mov	r2, r3
 800d9dc:	79fb      	ldrb	r3, [r7, #7]
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	f003 0304 	and.w	r3, r3, #4
 800d9e4:	4413      	add	r3, r2
 800d9e6:	3314      	adds	r3, #20
 800d9e8:	69ba      	ldr	r2, [r7, #24]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d006      	beq.n	800da00 <tcp_output_fill_options+0x64>
 800d9f2:	4b05      	ldr	r3, [pc, #20]	@ (800da08 <tcp_output_fill_options+0x6c>)
 800d9f4:	f240 7275 	movw	r2, #1909	@ 0x775
 800d9f8:	4906      	ldr	r1, [pc, #24]	@ (800da14 <tcp_output_fill_options+0x78>)
 800d9fa:	4805      	ldr	r0, [pc, #20]	@ (800da10 <tcp_output_fill_options+0x74>)
 800d9fc:	f004 f886 	bl	8011b0c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800da00:	bf00      	nop
 800da02:	3720      	adds	r7, #32
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	08014490 	.word	0x08014490
 800da0c:	08014c1c 	.word	0x08014c1c
 800da10:	080144e4 	.word	0x080144e4
 800da14:	08014b14 	.word	0x08014b14

0800da18 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b08a      	sub	sp, #40	@ 0x28
 800da1c:	af04      	add	r7, sp, #16
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
 800da24:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d106      	bne.n	800da3a <tcp_output_control_segment+0x22>
 800da2c:	4b1c      	ldr	r3, [pc, #112]	@ (800daa0 <tcp_output_control_segment+0x88>)
 800da2e:	f240 7287 	movw	r2, #1927	@ 0x787
 800da32:	491c      	ldr	r1, [pc, #112]	@ (800daa4 <tcp_output_control_segment+0x8c>)
 800da34:	481c      	ldr	r0, [pc, #112]	@ (800daa8 <tcp_output_control_segment+0x90>)
 800da36:	f004 f869 	bl	8011b0c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	6879      	ldr	r1, [r7, #4]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7fe ff2e 	bl	800c8a0 <tcp_route>
 800da44:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d102      	bne.n	800da52 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800da4c:	23fc      	movs	r3, #252	@ 0xfc
 800da4e:	75fb      	strb	r3, [r7, #23]
 800da50:	e01c      	b.n	800da8c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d006      	beq.n	800da66 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	7adb      	ldrb	r3, [r3, #11]
 800da5c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	7a9b      	ldrb	r3, [r3, #10]
 800da62:	757b      	strb	r3, [r7, #21]
 800da64:	e003      	b.n	800da6e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800da66:	23ff      	movs	r3, #255	@ 0xff
 800da68:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800da6e:	7dba      	ldrb	r2, [r7, #22]
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	9302      	str	r3, [sp, #8]
 800da74:	2306      	movs	r3, #6
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	7d7b      	ldrb	r3, [r7, #21]
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	4613      	mov	r3, r2
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	6879      	ldr	r1, [r7, #4]
 800da82:	68b8      	ldr	r0, [r7, #8]
 800da84:	f002 fcf0 	bl	8010468 <ip4_output_if>
 800da88:	4603      	mov	r3, r0
 800da8a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800da8c:	68b8      	ldr	r0, [r7, #8]
 800da8e:	f7fa fdbf 	bl	8008610 <pbuf_free>
  return err;
 800da92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	08014490 	.word	0x08014490
 800daa4:	08014c44 	.word	0x08014c44
 800daa8:	080144e4 	.word	0x080144e4

0800daac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800daac:	b590      	push	{r4, r7, lr}
 800daae:	b08b      	sub	sp, #44	@ 0x2c
 800dab0:	af04      	add	r7, sp, #16
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d106      	bne.n	800dace <tcp_rst+0x22>
 800dac0:	4b1f      	ldr	r3, [pc, #124]	@ (800db40 <tcp_rst+0x94>)
 800dac2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800dac6:	491f      	ldr	r1, [pc, #124]	@ (800db44 <tcp_rst+0x98>)
 800dac8:	481f      	ldr	r0, [pc, #124]	@ (800db48 <tcp_rst+0x9c>)
 800daca:	f004 f81f 	bl	8011b0c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d106      	bne.n	800dae2 <tcp_rst+0x36>
 800dad4:	4b1a      	ldr	r3, [pc, #104]	@ (800db40 <tcp_rst+0x94>)
 800dad6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800dada:	491c      	ldr	r1, [pc, #112]	@ (800db4c <tcp_rst+0xa0>)
 800dadc:	481a      	ldr	r0, [pc, #104]	@ (800db48 <tcp_rst+0x9c>)
 800dade:	f004 f815 	bl	8011b0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dae2:	2300      	movs	r3, #0
 800dae4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dae6:	f246 0308 	movw	r3, #24584	@ 0x6008
 800daea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800daec:	7dfb      	ldrb	r3, [r7, #23]
 800daee:	b29c      	uxth	r4, r3
 800daf0:	68b8      	ldr	r0, [r7, #8]
 800daf2:	f7f9 f953 	bl	8006d9c <lwip_htonl>
 800daf6:	4602      	mov	r2, r0
 800daf8:	8abb      	ldrh	r3, [r7, #20]
 800dafa:	9303      	str	r3, [sp, #12]
 800dafc:	2314      	movs	r3, #20
 800dafe:	9302      	str	r3, [sp, #8]
 800db00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800db02:	9301      	str	r3, [sp, #4]
 800db04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	4613      	mov	r3, r2
 800db0a:	2200      	movs	r2, #0
 800db0c:	4621      	mov	r1, r4
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff fe94 	bl	800d83c <tcp_output_alloc_header_common>
 800db14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00c      	beq.n	800db36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800db1c:	7dfb      	ldrb	r3, [r7, #23]
 800db1e:	2200      	movs	r2, #0
 800db20:	6939      	ldr	r1, [r7, #16]
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f7ff ff3a 	bl	800d99c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800db28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	6939      	ldr	r1, [r7, #16]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7ff ff72 	bl	800da18 <tcp_output_control_segment>
 800db34:	e000      	b.n	800db38 <tcp_rst+0x8c>
    return;
 800db36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800db38:	371c      	adds	r7, #28
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd90      	pop	{r4, r7, pc}
 800db3e:	bf00      	nop
 800db40:	08014490 	.word	0x08014490
 800db44:	08014c70 	.word	0x08014c70
 800db48:	080144e4 	.word	0x080144e4
 800db4c:	08014c8c 	.word	0x08014c8c

0800db50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800db50:	b590      	push	{r4, r7, lr}
 800db52:	b087      	sub	sp, #28
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d106      	bne.n	800db74 <tcp_send_empty_ack+0x24>
 800db66:	4b28      	ldr	r3, [pc, #160]	@ (800dc08 <tcp_send_empty_ack+0xb8>)
 800db68:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800db6c:	4927      	ldr	r1, [pc, #156]	@ (800dc0c <tcp_send_empty_ack+0xbc>)
 800db6e:	4828      	ldr	r0, [pc, #160]	@ (800dc10 <tcp_send_empty_ack+0xc0>)
 800db70:	f003 ffcc 	bl	8011b0c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0304 	and.w	r3, r3, #4
 800db7e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800db80:	7d7b      	ldrb	r3, [r7, #21]
 800db82:	b29c      	uxth	r4, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db88:	4618      	mov	r0, r3
 800db8a:	f7f9 f907 	bl	8006d9c <lwip_htonl>
 800db8e:	4603      	mov	r3, r0
 800db90:	2200      	movs	r2, #0
 800db92:	4621      	mov	r1, r4
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff fec3 	bl	800d920 <tcp_output_alloc_header>
 800db9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d109      	bne.n	800dbb6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	8b5b      	ldrh	r3, [r3, #26]
 800dba6:	f043 0303 	orr.w	r3, r3, #3
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dbb0:	f06f 0301 	mvn.w	r3, #1
 800dbb4:	e023      	b.n	800dbfe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dbb6:	7dbb      	ldrb	r3, [r7, #22]
 800dbb8:	7dfa      	ldrb	r2, [r7, #23]
 800dbba:	6939      	ldr	r1, [r7, #16]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff feed 	bl	800d99c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	6939      	ldr	r1, [r7, #16]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff ff24 	bl	800da18 <tcp_output_control_segment>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d007      	beq.n	800dbec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	8b5b      	ldrh	r3, [r3, #26]
 800dbe0:	f043 0303 	orr.w	r3, r3, #3
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	835a      	strh	r2, [r3, #26]
 800dbea:	e006      	b.n	800dbfa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	8b5b      	ldrh	r3, [r3, #26]
 800dbf0:	f023 0303 	bic.w	r3, r3, #3
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dbfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	371c      	adds	r7, #28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd90      	pop	{r4, r7, pc}
 800dc06:	bf00      	nop
 800dc08:	08014490 	.word	0x08014490
 800dc0c:	08014ca8 	.word	0x08014ca8
 800dc10:	080144e4 	.word	0x080144e4

0800dc14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dc14:	b590      	push	{r4, r7, lr}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <tcp_keepalive+0x20>
 800dc26:	4b18      	ldr	r3, [pc, #96]	@ (800dc88 <tcp_keepalive+0x74>)
 800dc28:	f640 0224 	movw	r2, #2084	@ 0x824
 800dc2c:	4917      	ldr	r1, [pc, #92]	@ (800dc8c <tcp_keepalive+0x78>)
 800dc2e:	4818      	ldr	r0, [pc, #96]	@ (800dc90 <tcp_keepalive+0x7c>)
 800dc30:	f003 ff6c 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dc34:	7abb      	ldrb	r3, [r7, #10]
 800dc36:	b29c      	uxth	r4, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f9 f8ac 	bl	8006d9c <lwip_htonl>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2200      	movs	r2, #0
 800dc48:	4621      	mov	r1, r4
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff fe68 	bl	800d920 <tcp_output_alloc_header>
 800dc50:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dc58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc5c:	e010      	b.n	800dc80 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc5e:	7abb      	ldrb	r3, [r7, #10]
 800dc60:	2200      	movs	r2, #0
 800dc62:	68f9      	ldr	r1, [r7, #12]
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7ff fe99 	bl	800d99c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	3304      	adds	r3, #4
 800dc70:	68f9      	ldr	r1, [r7, #12]
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7ff fed0 	bl	800da18 <tcp_output_control_segment>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd90      	pop	{r4, r7, pc}
 800dc88:	08014490 	.word	0x08014490
 800dc8c:	08014cc8 	.word	0x08014cc8
 800dc90:	080144e4 	.word	0x080144e4

0800dc94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dc94:	b590      	push	{r4, r7, lr}
 800dc96:	b08b      	sub	sp, #44	@ 0x2c
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d106      	bne.n	800dcb4 <tcp_zero_window_probe+0x20>
 800dca6:	4b4d      	ldr	r3, [pc, #308]	@ (800dddc <tcp_zero_window_probe+0x148>)
 800dca8:	f640 024f 	movw	r2, #2127	@ 0x84f
 800dcac:	494c      	ldr	r1, [pc, #304]	@ (800dde0 <tcp_zero_window_probe+0x14c>)
 800dcae:	484d      	ldr	r0, [pc, #308]	@ (800dde4 <tcp_zero_window_probe+0x150>)
 800dcb0:	f003 ff2c 	bl	8011b0c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d101      	bne.n	800dcc4 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	e087      	b.n	800ddd4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dcca:	2bff      	cmp	r3, #255	@ 0xff
 800dccc:	d007      	beq.n	800dcde <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	899b      	ldrh	r3, [r3, #12]
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7f9 f842 	bl	8006d70 <lwip_htons>
 800dcec:	4603      	mov	r3, r0
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	f003 0301 	and.w	r3, r3, #1
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <tcp_zero_window_probe+0x70>
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfa:	891b      	ldrh	r3, [r3, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <tcp_zero_window_probe+0x70>
 800dd00:	2301      	movs	r3, #1
 800dd02:	e000      	b.n	800dd06 <tcp_zero_window_probe+0x72>
 800dd04:	2300      	movs	r3, #0
 800dd06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dd0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	bf0c      	ite	eq
 800dd12:	2301      	moveq	r3, #1
 800dd14:	2300      	movne	r3, #0
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dd1a:	7cfb      	ldrb	r3, [r7, #19]
 800dd1c:	b299      	uxth	r1, r3
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd20:	691b      	ldr	r3, [r3, #16]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	8c3a      	ldrh	r2, [r7, #32]
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff fdfa 	bl	800d920 <tcp_output_alloc_header>
 800dd2c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dd34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd38:	e04c      	b.n	800ddd4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800dd40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d011      	beq.n	800dd6c <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	899b      	ldrh	r3, [r3, #12]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	b21b      	sxth	r3, r3
 800dd50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dd54:	b21c      	sxth	r4, r3
 800dd56:	2011      	movs	r0, #17
 800dd58:	f7f9 f80a 	bl	8006d70 <lwip_htons>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	b21b      	sxth	r3, r3
 800dd60:	4323      	orrs	r3, r4
 800dd62:	b21b      	sxth	r3, r3
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	819a      	strh	r2, [r3, #12]
 800dd6a:	e010      	b.n	800dd8e <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	3314      	adds	r3, #20
 800dd72:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd76:	6858      	ldr	r0, [r3, #4]
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	891a      	ldrh	r2, [r3, #8]
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd80:	891b      	ldrh	r3, [r3, #8]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	2201      	movs	r2, #1
 800dd88:	6979      	ldr	r1, [r7, #20]
 800dd8a:	f7fa fe3b 	bl	8008a04 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7f9 f801 	bl	8006d9c <lwip_htonl>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	da02      	bge.n	800ddb2 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ddb2:	7cfb      	ldrb	r3, [r7, #19]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	69f9      	ldr	r1, [r7, #28]
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff fdef 	bl	800d99c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	69f9      	ldr	r1, [r7, #28]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fe26 	bl	800da18 <tcp_output_control_segment>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ddd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	372c      	adds	r7, #44	@ 0x2c
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd90      	pop	{r4, r7, pc}
 800dddc:	08014490 	.word	0x08014490
 800dde0:	08014ce4 	.word	0x08014ce4
 800dde4:	080144e4 	.word	0x080144e4

0800dde8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ddf0:	f7fa fef6 	bl	8008be0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ddf4:	4b0a      	ldr	r3, [pc, #40]	@ (800de20 <tcpip_tcp_timer+0x38>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d103      	bne.n	800de04 <tcpip_tcp_timer+0x1c>
 800ddfc:	4b09      	ldr	r3, [pc, #36]	@ (800de24 <tcpip_tcp_timer+0x3c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d005      	beq.n	800de10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de04:	2200      	movs	r2, #0
 800de06:	4908      	ldr	r1, [pc, #32]	@ (800de28 <tcpip_tcp_timer+0x40>)
 800de08:	20fa      	movs	r0, #250	@ 0xfa
 800de0a:	f000 f8f3 	bl	800dff4 <sys_timeout>
 800de0e:	e003      	b.n	800de18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800de10:	4b06      	ldr	r3, [pc, #24]	@ (800de2c <tcpip_tcp_timer+0x44>)
 800de12:	2200      	movs	r2, #0
 800de14:	601a      	str	r2, [r3, #0]
  }
}
 800de16:	bf00      	nop
 800de18:	bf00      	nop
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20007fb8 	.word	0x20007fb8
 800de24:	20007fbc 	.word	0x20007fbc
 800de28:	0800dde9 	.word	0x0800dde9
 800de2c:	20008008 	.word	0x20008008

0800de30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800de34:	4b0a      	ldr	r3, [pc, #40]	@ (800de60 <tcp_timer_needed+0x30>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10f      	bne.n	800de5c <tcp_timer_needed+0x2c>
 800de3c:	4b09      	ldr	r3, [pc, #36]	@ (800de64 <tcp_timer_needed+0x34>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d103      	bne.n	800de4c <tcp_timer_needed+0x1c>
 800de44:	4b08      	ldr	r3, [pc, #32]	@ (800de68 <tcp_timer_needed+0x38>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800de4c:	4b04      	ldr	r3, [pc, #16]	@ (800de60 <tcp_timer_needed+0x30>)
 800de4e:	2201      	movs	r2, #1
 800de50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de52:	2200      	movs	r2, #0
 800de54:	4905      	ldr	r1, [pc, #20]	@ (800de6c <tcp_timer_needed+0x3c>)
 800de56:	20fa      	movs	r0, #250	@ 0xfa
 800de58:	f000 f8cc 	bl	800dff4 <sys_timeout>
  }
}
 800de5c:	bf00      	nop
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20008008 	.word	0x20008008
 800de64:	20007fb8 	.word	0x20007fb8
 800de68:	20007fbc 	.word	0x20007fbc
 800de6c:	0800dde9 	.word	0x0800dde9

0800de70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de7c:	2006      	movs	r0, #6
 800de7e:	f7f9 fbeb 	bl	8007658 <memp_malloc>
 800de82:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d109      	bne.n	800de9e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d151      	bne.n	800df34 <sys_timeout_abs+0xc4>
 800de90:	4b2a      	ldr	r3, [pc, #168]	@ (800df3c <sys_timeout_abs+0xcc>)
 800de92:	22be      	movs	r2, #190	@ 0xbe
 800de94:	492a      	ldr	r1, [pc, #168]	@ (800df40 <sys_timeout_abs+0xd0>)
 800de96:	482b      	ldr	r0, [pc, #172]	@ (800df44 <sys_timeout_abs+0xd4>)
 800de98:	f003 fe38 	bl	8011b0c <iprintf>
    return;
 800de9c:	e04a      	b.n	800df34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	2200      	movs	r2, #0
 800dea2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800deb6:	4b24      	ldr	r3, [pc, #144]	@ (800df48 <sys_timeout_abs+0xd8>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d103      	bne.n	800dec6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800debe:	4a22      	ldr	r2, [pc, #136]	@ (800df48 <sys_timeout_abs+0xd8>)
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	6013      	str	r3, [r2, #0]
    return;
 800dec4:	e037      	b.n	800df36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	685a      	ldr	r2, [r3, #4]
 800deca:	4b1f      	ldr	r3, [pc, #124]	@ (800df48 <sys_timeout_abs+0xd8>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	0fdb      	lsrs	r3, r3, #31
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d007      	beq.n	800deee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dede:	4b1a      	ldr	r3, [pc, #104]	@ (800df48 <sys_timeout_abs+0xd8>)
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dee6:	4a18      	ldr	r2, [pc, #96]	@ (800df48 <sys_timeout_abs+0xd8>)
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	6013      	str	r3, [r2, #0]
 800deec:	e023      	b.n	800df36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800deee:	4b16      	ldr	r3, [pc, #88]	@ (800df48 <sys_timeout_abs+0xd8>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	e01a      	b.n	800df2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00b      	beq.n	800df16 <sys_timeout_abs+0xa6>
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	0fdb      	lsrs	r3, r3, #31
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d007      	beq.n	800df26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	601a      	str	r2, [r3, #0]
        break;
 800df24:	e007      	b.n	800df36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	617b      	str	r3, [r7, #20]
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1e1      	bne.n	800def6 <sys_timeout_abs+0x86>
 800df32:	e000      	b.n	800df36 <sys_timeout_abs+0xc6>
    return;
 800df34:	bf00      	nop
      }
    }
  }
}
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	08014d08 	.word	0x08014d08
 800df40:	08014d3c 	.word	0x08014d3c
 800df44:	08014d7c 	.word	0x08014d7c
 800df48:	20008000 	.word	0x20008000

0800df4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	4798      	blx	r3

  now = sys_now();
 800df5e:	f7f8 fccb 	bl	80068f8 <sys_now>
 800df62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	4b0f      	ldr	r3, [pc, #60]	@ (800dfa8 <lwip_cyclic_timer+0x5c>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4413      	add	r3, r2
 800df6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	0fdb      	lsrs	r3, r3, #31
 800df78:	f003 0301 	and.w	r3, r3, #1
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d009      	beq.n	800df96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	4413      	add	r3, r2
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	4907      	ldr	r1, [pc, #28]	@ (800dfac <lwip_cyclic_timer+0x60>)
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff ff6e 	bl	800de70 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800df94:	e004      	b.n	800dfa0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	4904      	ldr	r1, [pc, #16]	@ (800dfac <lwip_cyclic_timer+0x60>)
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f7ff ff68 	bl	800de70 <sys_timeout_abs>
}
 800dfa0:	bf00      	nop
 800dfa2:	3718      	adds	r7, #24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20008004 	.word	0x20008004
 800dfac:	0800df4d 	.word	0x0800df4d

0800dfb0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	607b      	str	r3, [r7, #4]
 800dfba:	e00e      	b.n	800dfda <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dfbc:	4a0b      	ldr	r2, [pc, #44]	@ (800dfec <sys_timeouts_init+0x3c>)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	00db      	lsls	r3, r3, #3
 800dfc8:	4a08      	ldr	r2, [pc, #32]	@ (800dfec <sys_timeouts_init+0x3c>)
 800dfca:	4413      	add	r3, r2
 800dfcc:	461a      	mov	r2, r3
 800dfce:	4908      	ldr	r1, [pc, #32]	@ (800dff0 <sys_timeouts_init+0x40>)
 800dfd0:	f000 f810 	bl	800dff4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	607b      	str	r3, [r7, #4]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b02      	cmp	r3, #2
 800dfde:	d9ed      	bls.n	800dfbc <sys_timeouts_init+0xc>
  }
}
 800dfe0:	bf00      	nop
 800dfe2:	bf00      	nop
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	0801604c 	.word	0x0801604c
 800dff0:	0800df4d 	.word	0x0800df4d

0800dff4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e006:	d306      	bcc.n	800e016 <sys_timeout+0x22>
 800e008:	4b0a      	ldr	r3, [pc, #40]	@ (800e034 <sys_timeout+0x40>)
 800e00a:	f240 1229 	movw	r2, #297	@ 0x129
 800e00e:	490a      	ldr	r1, [pc, #40]	@ (800e038 <sys_timeout+0x44>)
 800e010:	480a      	ldr	r0, [pc, #40]	@ (800e03c <sys_timeout+0x48>)
 800e012:	f003 fd7b 	bl	8011b0c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e016:	f7f8 fc6f 	bl	80068f8 <sys_now>
 800e01a:	4602      	mov	r2, r0
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	4413      	add	r3, r2
 800e020:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	6978      	ldr	r0, [r7, #20]
 800e028:	f7ff ff22 	bl	800de70 <sys_timeout_abs>
#endif
}
 800e02c:	bf00      	nop
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	08014d08 	.word	0x08014d08
 800e038:	08014da4 	.word	0x08014da4
 800e03c:	08014d7c 	.word	0x08014d7c

0800e040 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e046:	f7f8 fc57 	bl	80068f8 <sys_now>
 800e04a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e04c:	4b1a      	ldr	r3, [pc, #104]	@ (800e0b8 <sys_check_timeouts+0x78>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	b2db      	uxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <sys_check_timeouts+0x1a>
 800e056:	f7f9 ffa1 	bl	8007f9c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e05a:	4b18      	ldr	r3, [pc, #96]	@ (800e0bc <sys_check_timeouts+0x7c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d022      	beq.n	800e0ac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	0fdb      	lsrs	r3, r3, #31
 800e070:	f003 0301 	and.w	r3, r3, #1
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d11a      	bne.n	800e0b0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a0f      	ldr	r2, [pc, #60]	@ (800e0bc <sys_check_timeouts+0x7c>)
 800e080:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	4a0b      	ldr	r2, [pc, #44]	@ (800e0c0 <sys_check_timeouts+0x80>)
 800e094:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e096:	68b9      	ldr	r1, [r7, #8]
 800e098:	2006      	movs	r0, #6
 800e09a:	f7f9 fb4d 	bl	8007738 <memp_free>
    if (handler != NULL) {
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d0d3      	beq.n	800e04c <sys_check_timeouts+0xc>
      handler(arg);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6838      	ldr	r0, [r7, #0]
 800e0a8:	4798      	blx	r3
  do {
 800e0aa:	e7cf      	b.n	800e04c <sys_check_timeouts+0xc>
      return;
 800e0ac:	bf00      	nop
 800e0ae:	e000      	b.n	800e0b2 <sys_check_timeouts+0x72>
      return;
 800e0b0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	20007fa9 	.word	0x20007fa9
 800e0bc:	20008000 	.word	0x20008000
 800e0c0:	20008004 	.word	0x20008004

0800e0c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e0c8:	f003 fc20 	bl	801190c <rand>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	4b01      	ldr	r3, [pc, #4]	@ (800e0e4 <udp_init+0x20>)
 800e0de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0e0:	bf00      	nop
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	2000006c 	.word	0x2000006c

0800e0e8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e0f2:	4b17      	ldr	r3, [pc, #92]	@ (800e150 <udp_new_port+0x68>)
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	1c5a      	adds	r2, r3, #1
 800e0f8:	b291      	uxth	r1, r2
 800e0fa:	4a15      	ldr	r2, [pc, #84]	@ (800e150 <udp_new_port+0x68>)
 800e0fc:	8011      	strh	r1, [r2, #0]
 800e0fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e102:	4293      	cmp	r3, r2
 800e104:	d103      	bne.n	800e10e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e106:	4b12      	ldr	r3, [pc, #72]	@ (800e150 <udp_new_port+0x68>)
 800e108:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e10c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e10e:	4b11      	ldr	r3, [pc, #68]	@ (800e154 <udp_new_port+0x6c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	603b      	str	r3, [r7, #0]
 800e114:	e011      	b.n	800e13a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	8a5a      	ldrh	r2, [r3, #18]
 800e11a:	4b0d      	ldr	r3, [pc, #52]	@ (800e150 <udp_new_port+0x68>)
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d108      	bne.n	800e134 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e122:	88fb      	ldrh	r3, [r7, #6]
 800e124:	3301      	adds	r3, #1
 800e126:	80fb      	strh	r3, [r7, #6]
 800e128:	88fb      	ldrh	r3, [r7, #6]
 800e12a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e12e:	d3e0      	bcc.n	800e0f2 <udp_new_port+0xa>
        return 0;
 800e130:	2300      	movs	r3, #0
 800e132:	e007      	b.n	800e144 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	603b      	str	r3, [r7, #0]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1ea      	bne.n	800e116 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e140:	4b03      	ldr	r3, [pc, #12]	@ (800e150 <udp_new_port+0x68>)
 800e142:	881b      	ldrh	r3, [r3, #0]
}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	2000006c 	.word	0x2000006c
 800e154:	2000800c 	.word	0x2000800c

0800e158 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	4613      	mov	r3, r2
 800e164:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d105      	bne.n	800e178 <udp_input_local_match+0x20>
 800e16c:	4b27      	ldr	r3, [pc, #156]	@ (800e20c <udp_input_local_match+0xb4>)
 800e16e:	2287      	movs	r2, #135	@ 0x87
 800e170:	4927      	ldr	r1, [pc, #156]	@ (800e210 <udp_input_local_match+0xb8>)
 800e172:	4828      	ldr	r0, [pc, #160]	@ (800e214 <udp_input_local_match+0xbc>)
 800e174:	f003 fcca 	bl	8011b0c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d105      	bne.n	800e18a <udp_input_local_match+0x32>
 800e17e:	4b23      	ldr	r3, [pc, #140]	@ (800e20c <udp_input_local_match+0xb4>)
 800e180:	2288      	movs	r2, #136	@ 0x88
 800e182:	4925      	ldr	r1, [pc, #148]	@ (800e218 <udp_input_local_match+0xc0>)
 800e184:	4823      	ldr	r0, [pc, #140]	@ (800e214 <udp_input_local_match+0xbc>)
 800e186:	f003 fcc1 	bl	8011b0c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	7a1b      	ldrb	r3, [r3, #8]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00b      	beq.n	800e1aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	7a1a      	ldrb	r2, [r3, #8]
 800e196:	4b21      	ldr	r3, [pc, #132]	@ (800e21c <udp_input_local_match+0xc4>)
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e19e:	3301      	adds	r3, #1
 800e1a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d001      	beq.n	800e1aa <udp_input_local_match+0x52>
    return 0;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e02b      	b.n	800e202 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d018      	beq.n	800e1e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d013      	beq.n	800e1de <udp_input_local_match+0x86>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00f      	beq.n	800e1de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e1be:	4b17      	ldr	r3, [pc, #92]	@ (800e21c <udp_input_local_match+0xc4>)
 800e1c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1c6:	d00a      	beq.n	800e1de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	4b13      	ldr	r3, [pc, #76]	@ (800e21c <udp_input_local_match+0xc4>)
 800e1ce:	695b      	ldr	r3, [r3, #20]
 800e1d0:	405a      	eors	r2, r3
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	3308      	adds	r3, #8
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d110      	bne.n	800e200 <udp_input_local_match+0xa8>
          return 1;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e00f      	b.n	800e202 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d009      	beq.n	800e1fc <udp_input_local_match+0xa4>
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d005      	beq.n	800e1fc <udp_input_local_match+0xa4>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	4b09      	ldr	r3, [pc, #36]	@ (800e21c <udp_input_local_match+0xc4>)
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d101      	bne.n	800e200 <udp_input_local_match+0xa8>
        return 1;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e000      	b.n	800e202 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	08014df0 	.word	0x08014df0
 800e210:	08014e20 	.word	0x08014e20
 800e214:	08014e44 	.word	0x08014e44
 800e218:	08014e6c 	.word	0x08014e6c
 800e21c:	20005050 	.word	0x20005050

0800e220 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e220:	b590      	push	{r4, r7, lr}
 800e222:	b08d      	sub	sp, #52	@ 0x34
 800e224:	af02      	add	r7, sp, #8
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d105      	bne.n	800e240 <udp_input+0x20>
 800e234:	4b95      	ldr	r3, [pc, #596]	@ (800e48c <udp_input+0x26c>)
 800e236:	22cf      	movs	r2, #207	@ 0xcf
 800e238:	4995      	ldr	r1, [pc, #596]	@ (800e490 <udp_input+0x270>)
 800e23a:	4896      	ldr	r0, [pc, #600]	@ (800e494 <udp_input+0x274>)
 800e23c:	f003 fc66 	bl	8011b0c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d105      	bne.n	800e252 <udp_input+0x32>
 800e246:	4b91      	ldr	r3, [pc, #580]	@ (800e48c <udp_input+0x26c>)
 800e248:	22d0      	movs	r2, #208	@ 0xd0
 800e24a:	4993      	ldr	r1, [pc, #588]	@ (800e498 <udp_input+0x278>)
 800e24c:	4891      	ldr	r0, [pc, #580]	@ (800e494 <udp_input+0x274>)
 800e24e:	f003 fc5d 	bl	8011b0c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	895b      	ldrh	r3, [r3, #10]
 800e256:	2b07      	cmp	r3, #7
 800e258:	d809      	bhi.n	800e26e <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	891b      	ldrh	r3, [r3, #8]
 800e25e:	4619      	mov	r1, r3
 800e260:	488e      	ldr	r0, [pc, #568]	@ (800e49c <udp_input+0x27c>)
 800e262:	f003 fc53 	bl	8011b0c <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7fa f9d2 	bl	8008610 <pbuf_free>
    goto end;
 800e26c:	e18d      	b.n	800e58a <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e274:	4b8a      	ldr	r3, [pc, #552]	@ (800e4a0 <udp_input+0x280>)
 800e276:	695b      	ldr	r3, [r3, #20]
 800e278:	4a89      	ldr	r2, [pc, #548]	@ (800e4a0 <udp_input+0x280>)
 800e27a:	6812      	ldr	r2, [r2, #0]
 800e27c:	4611      	mov	r1, r2
 800e27e:	4618      	mov	r0, r3
 800e280:	f002 f9ca 	bl	8010618 <ip4_addr_isbroadcast_u32>
 800e284:	4603      	mov	r3, r0
 800e286:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	891b      	ldrh	r3, [r3, #8]
 800e28c:	4619      	mov	r1, r3
 800e28e:	4885      	ldr	r0, [pc, #532]	@ (800e4a4 <udp_input+0x284>)
 800e290:	f003 fc3c 	bl	8011b0c <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f8 fd68 	bl	8006d70 <lwip_htons>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	885b      	ldrh	r3, [r3, #2]
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7f8 fd60 	bl	8006d70 <lwip_htons>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 800e2b4:	6978      	ldr	r0, [r7, #20]
 800e2b6:	f000 fd3b 	bl	800ed30 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 800e2ba:	487b      	ldr	r0, [pc, #492]	@ (800e4a8 <udp_input+0x288>)
 800e2bc:	f003 fc26 	bl	8011b0c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 800e2c0:	4b77      	ldr	r3, [pc, #476]	@ (800e4a0 <udp_input+0x280>)
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4b75      	ldr	r3, [pc, #468]	@ (800e4a0 <udp_input+0x280>)
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	0a1b      	lsrs	r3, r3, #8
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4b73      	ldr	r3, [pc, #460]	@ (800e4a0 <udp_input+0x280>)
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	0c1b      	lsrs	r3, r3, #16
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	4618      	mov	r0, r3
 800e2dc:	4b70      	ldr	r3, [pc, #448]	@ (800e4a0 <udp_input+0x280>)
 800e2de:	695b      	ldr	r3, [r3, #20]
 800e2e0:	0e1b      	lsrs	r3, r3, #24
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	4870      	ldr	r0, [pc, #448]	@ (800e4ac <udp_input+0x28c>)
 800e2ea:	f003 fc0f 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	885b      	ldrh	r3, [r3, #2]
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7f8 fd3b 	bl	8006d70 <lwip_htons>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	486c      	ldr	r0, [pc, #432]	@ (800e4b0 <udp_input+0x290>)
 800e300:	f003 fc04 	bl	8011b0c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 800e304:	4b66      	ldr	r3, [pc, #408]	@ (800e4a0 <udp_input+0x280>)
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	4619      	mov	r1, r3
 800e30c:	4b64      	ldr	r3, [pc, #400]	@ (800e4a0 <udp_input+0x280>)
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	0a1b      	lsrs	r3, r3, #8
 800e312:	b2db      	uxtb	r3, r3
 800e314:	461a      	mov	r2, r3
 800e316:	4b62      	ldr	r3, [pc, #392]	@ (800e4a0 <udp_input+0x280>)
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	0c1b      	lsrs	r3, r3, #16
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	4618      	mov	r0, r3
 800e320:	4b5f      	ldr	r3, [pc, #380]	@ (800e4a0 <udp_input+0x280>)
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	0e1b      	lsrs	r3, r3, #24
 800e326:	b2db      	uxtb	r3, r3
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	4603      	mov	r3, r0
 800e32c:	485f      	ldr	r0, [pc, #380]	@ (800e4ac <udp_input+0x28c>)
 800e32e:	f003 fbed 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	b29b      	uxth	r3, r3
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f8 fd19 	bl	8006d70 <lwip_htons>
 800e33e:	4603      	mov	r3, r0
 800e340:	4619      	mov	r1, r3
 800e342:	485c      	ldr	r0, [pc, #368]	@ (800e4b4 <udp_input+0x294>)
 800e344:	f003 fbe2 	bl	8011b0c <iprintf>

  pcb = NULL;
 800e348:	2300      	movs	r3, #0
 800e34a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e350:	2300      	movs	r3, #0
 800e352:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e354:	4b58      	ldr	r3, [pc, #352]	@ (800e4b8 <udp_input+0x298>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	627b      	str	r3, [r7, #36]	@ 0x24
 800e35a:	e091      	b.n	800e480 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 800e35c:	4857      	ldr	r0, [pc, #348]	@ (800e4bc <udp_input+0x29c>)
 800e35e:	f003 fbd5 	bl	8011b0c <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 800e362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	b2db      	uxtb	r3, r3
 800e368:	4619      	mov	r1, r3
 800e36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	0a1b      	lsrs	r3, r3, #8
 800e370:	b2db      	uxtb	r3, r3
 800e372:	461a      	mov	r2, r3
 800e374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	0c1b      	lsrs	r3, r3, #16
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	4618      	mov	r0, r3
 800e37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	0e1b      	lsrs	r3, r3, #24
 800e384:	b2db      	uxtb	r3, r3
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	4603      	mov	r3, r0
 800e38a:	4848      	ldr	r0, [pc, #288]	@ (800e4ac <udp_input+0x28c>)
 800e38c:	f003 fbbe 	bl	8011b0c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 800e390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e392:	8a5b      	ldrh	r3, [r3, #18]
 800e394:	4619      	mov	r1, r3
 800e396:	4846      	ldr	r0, [pc, #280]	@ (800e4b0 <udp_input+0x290>)
 800e398:	f003 fbb8 	bl	8011b0c <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 800e39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	0a1b      	lsrs	r3, r3, #8
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	0c1b      	lsrs	r3, r3, #16
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	0e1b      	lsrs	r3, r3, #24
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	4839      	ldr	r0, [pc, #228]	@ (800e4ac <udp_input+0x28c>)
 800e3c6:	f003 fba1 	bl	8011b0c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3cc:	8a9b      	ldrh	r3, [r3, #20]
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	4838      	ldr	r0, [pc, #224]	@ (800e4b4 <udp_input+0x294>)
 800e3d2:	f003 fb9b 	bl	8011b0c <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d8:	8a5b      	ldrh	r3, [r3, #18]
 800e3da:	89fa      	ldrh	r2, [r7, #14]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d14a      	bne.n	800e476 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e3e0:	7cfb      	ldrb	r3, [r7, #19]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3e8:	f7ff feb6 	bl	800e158 <udp_input_local_match>
 800e3ec:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d041      	beq.n	800e476 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f4:	7c1b      	ldrb	r3, [r3, #16]
 800e3f6:	f003 0304 	and.w	r3, r3, #4
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d11d      	bne.n	800e43a <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d102      	bne.n	800e40a <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e406:	61fb      	str	r3, [r7, #28]
 800e408:	e017      	b.n	800e43a <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e40a:	7cfb      	ldrb	r3, [r7, #19]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d014      	beq.n	800e43a <udp_input+0x21a>
 800e410:	4b23      	ldr	r3, [pc, #140]	@ (800e4a0 <udp_input+0x280>)
 800e412:	695b      	ldr	r3, [r3, #20]
 800e414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e418:	d10f      	bne.n	800e43a <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	3304      	adds	r3, #4
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	429a      	cmp	r2, r3
 800e426:	d008      	beq.n	800e43a <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	3304      	adds	r3, #4
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	429a      	cmp	r2, r3
 800e434:	d101      	bne.n	800e43a <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 800e436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e438:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43c:	8a9b      	ldrh	r3, [r3, #20]
 800e43e:	8a3a      	ldrh	r2, [r7, #16]
 800e440:	429a      	cmp	r2, r3
 800e442:	d118      	bne.n	800e476 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e446:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d005      	beq.n	800e458 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	4b13      	ldr	r3, [pc, #76]	@ (800e4a0 <udp_input+0x280>)
 800e452:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e454:	429a      	cmp	r2, r3
 800e456:	d10e      	bne.n	800e476 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e458:	6a3b      	ldr	r3, [r7, #32]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d030      	beq.n	800e4c0 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e460:	68da      	ldr	r2, [r3, #12]
 800e462:	6a3b      	ldr	r3, [r7, #32]
 800e464:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e466:	4b14      	ldr	r3, [pc, #80]	@ (800e4b8 <udp_input+0x298>)
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e46c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e46e:	4a12      	ldr	r2, [pc, #72]	@ (800e4b8 <udp_input+0x298>)
 800e470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e472:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e474:	e024      	b.n	800e4c0 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e482:	2b00      	cmp	r3, #0
 800e484:	f47f af6a 	bne.w	800e35c <udp_input+0x13c>
 800e488:	e01b      	b.n	800e4c2 <udp_input+0x2a2>
 800e48a:	bf00      	nop
 800e48c:	08014df0 	.word	0x08014df0
 800e490:	08014e94 	.word	0x08014e94
 800e494:	08014e44 	.word	0x08014e44
 800e498:	08014eac 	.word	0x08014eac
 800e49c:	08014ec8 	.word	0x08014ec8
 800e4a0:	20005050 	.word	0x20005050
 800e4a4:	08014f00 	.word	0x08014f00
 800e4a8:	08014f2c 	.word	0x08014f2c
 800e4ac:	08014f34 	.word	0x08014f34
 800e4b0:	08014f44 	.word	0x08014f44
 800e4b4:	08014f54 	.word	0x08014f54
 800e4b8:	2000800c 	.word	0x2000800c
 800e4bc:	08014f5c 	.word	0x08014f5c
        break;
 800e4c0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <udp_input+0x2ac>
    pcb = uncon_pcb;
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d002      	beq.n	800e4d8 <udp_input+0x2b8>
    for_us = 1;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	76fb      	strb	r3, [r7, #27]
 800e4d6:	e00a      	b.n	800e4ee <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	4b2d      	ldr	r3, [pc, #180]	@ (800e594 <udp_input+0x374>)
 800e4e0:	695b      	ldr	r3, [r3, #20]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	bf0c      	ite	eq
 800e4e6:	2301      	moveq	r3, #1
 800e4e8:	2300      	movne	r3, #0
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e4ee:	7efb      	ldrb	r3, [r7, #27]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d047      	beq.n	800e584 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 800e4f4:	4828      	ldr	r0, [pc, #160]	@ (800e598 <udp_input+0x378>)
 800e4f6:	f003 fb79 	bl	8011bec <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e4fa:	2108      	movs	r1, #8
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f7fa f801 	bl	8008504 <pbuf_remove_header>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00a      	beq.n	800e51e <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e508:	4b24      	ldr	r3, [pc, #144]	@ (800e59c <udp_input+0x37c>)
 800e50a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e50e:	4924      	ldr	r1, [pc, #144]	@ (800e5a0 <udp_input+0x380>)
 800e510:	4824      	ldr	r0, [pc, #144]	@ (800e5a4 <udp_input+0x384>)
 800e512:	f003 fafb 	bl	8011b0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7fa f87a 	bl	8008610 <pbuf_free>
      goto end;
 800e51c:	e035      	b.n	800e58a <udp_input+0x36a>
    }

    if (pcb != NULL) {
 800e51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e520:	2b00      	cmp	r3, #0
 800e522:	d012      	beq.n	800e54a <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e526:	699b      	ldr	r3, [r3, #24]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00a      	beq.n	800e542 <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52e:	699c      	ldr	r4, [r3, #24]
 800e530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e532:	69d8      	ldr	r0, [r3, #28]
 800e534:	8a3b      	ldrh	r3, [r7, #16]
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	4b1b      	ldr	r3, [pc, #108]	@ (800e5a8 <udp_input+0x388>)
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e53e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e540:	e024      	b.n	800e58c <udp_input+0x36c>
        pbuf_free(p);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7fa f864 	bl	8008610 <pbuf_free>
        goto end;
 800e548:	e01f      	b.n	800e58a <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 800e54a:	4818      	ldr	r0, [pc, #96]	@ (800e5ac <udp_input+0x38c>)
 800e54c:	f003 fb4e 	bl	8011bec <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e550:	7cfb      	ldrb	r3, [r7, #19]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d112      	bne.n	800e57c <udp_input+0x35c>
 800e556:	4b0f      	ldr	r3, [pc, #60]	@ (800e594 <udp_input+0x374>)
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e55e:	2be0      	cmp	r3, #224	@ 0xe0
 800e560:	d00c      	beq.n	800e57c <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e562:	4b0c      	ldr	r3, [pc, #48]	@ (800e594 <udp_input+0x374>)
 800e564:	899b      	ldrh	r3, [r3, #12]
 800e566:	3308      	adds	r3, #8
 800e568:	b29b      	uxth	r3, r3
 800e56a:	b21b      	sxth	r3, r3
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7fa f83b 	bl	80085ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e574:	2103      	movs	r1, #3
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f001 fcee 	bl	800ff58 <icmp_dest_unreach>
      pbuf_free(p);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f7fa f847 	bl	8008610 <pbuf_free>
  return;
 800e582:	e003      	b.n	800e58c <udp_input+0x36c>
    pbuf_free(p);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7fa f843 	bl	8008610 <pbuf_free>
  return;
 800e58a:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e58c:	372c      	adds	r7, #44	@ 0x2c
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd90      	pop	{r4, r7, pc}
 800e592:	bf00      	nop
 800e594:	20005050 	.word	0x20005050
 800e598:	08014f64 	.word	0x08014f64
 800e59c:	08014df0 	.word	0x08014df0
 800e5a0:	08014f84 	.word	0x08014f84
 800e5a4:	08014e44 	.word	0x08014e44
 800e5a8:	20005060 	.word	0x20005060
 800e5ac:	08014fa0 	.word	0x08014fa0

0800e5b0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af02      	add	r7, sp, #8
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d109      	bne.n	800e5d8 <udp_sendto+0x28>
 800e5c4:	4b3b      	ldr	r3, [pc, #236]	@ (800e6b4 <udp_sendto+0x104>)
 800e5c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e5ca:	493b      	ldr	r1, [pc, #236]	@ (800e6b8 <udp_sendto+0x108>)
 800e5cc:	483b      	ldr	r0, [pc, #236]	@ (800e6bc <udp_sendto+0x10c>)
 800e5ce:	f003 fa9d 	bl	8011b0c <iprintf>
 800e5d2:	f06f 030f 	mvn.w	r3, #15
 800e5d6:	e068      	b.n	800e6aa <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d109      	bne.n	800e5f2 <udp_sendto+0x42>
 800e5de:	4b35      	ldr	r3, [pc, #212]	@ (800e6b4 <udp_sendto+0x104>)
 800e5e0:	f240 2219 	movw	r2, #537	@ 0x219
 800e5e4:	4936      	ldr	r1, [pc, #216]	@ (800e6c0 <udp_sendto+0x110>)
 800e5e6:	4835      	ldr	r0, [pc, #212]	@ (800e6bc <udp_sendto+0x10c>)
 800e5e8:	f003 fa90 	bl	8011b0c <iprintf>
 800e5ec:	f06f 030f 	mvn.w	r3, #15
 800e5f0:	e05b      	b.n	800e6aa <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d109      	bne.n	800e60c <udp_sendto+0x5c>
 800e5f8:	4b2e      	ldr	r3, [pc, #184]	@ (800e6b4 <udp_sendto+0x104>)
 800e5fa:	f240 221a 	movw	r2, #538	@ 0x21a
 800e5fe:	4931      	ldr	r1, [pc, #196]	@ (800e6c4 <udp_sendto+0x114>)
 800e600:	482e      	ldr	r0, [pc, #184]	@ (800e6bc <udp_sendto+0x10c>)
 800e602:	f003 fa83 	bl	8011b0c <iprintf>
 800e606:	f06f 030f 	mvn.w	r3, #15
 800e60a:	e04e      	b.n	800e6aa <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 800e60c:	482e      	ldr	r0, [pc, #184]	@ (800e6c8 <udp_sendto+0x118>)
 800e60e:	f003 faed 	bl	8011bec <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	7a1b      	ldrb	r3, [r3, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d006      	beq.n	800e628 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	7a1b      	ldrb	r3, [r3, #8]
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f9 fc96 	bl	8007f50 <netif_get_by_index>
 800e624:	6178      	str	r0, [r7, #20]
 800e626:	e003      	b.n	800e630 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f001 fd5f 	bl	80100ec <ip4_route>
 800e62e:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d12f      	bne.n	800e696 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 800e636:	4825      	ldr	r0, [pc, #148]	@ (800e6cc <udp_sendto+0x11c>)
 800e638:	f003 fa68 	bl	8011b0c <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d003      	beq.n	800e64a <udp_sendto+0x9a>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	4619      	mov	r1, r3
 800e648:	e000      	b.n	800e64c <udp_sendto+0x9c>
 800e64a:	2100      	movs	r1, #0
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d004      	beq.n	800e65c <udp_sendto+0xac>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3301      	adds	r3, #1
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	461a      	mov	r2, r3
 800e65a:	e000      	b.n	800e65e <udp_sendto+0xae>
 800e65c:	2200      	movs	r2, #0
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d004      	beq.n	800e66e <udp_sendto+0xbe>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3302      	adds	r3, #2
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	4618      	mov	r0, r3
 800e66c:	e000      	b.n	800e670 <udp_sendto+0xc0>
 800e66e:	2000      	movs	r0, #0
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <udp_sendto+0xce>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	3303      	adds	r3, #3
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	e000      	b.n	800e680 <udp_sendto+0xd0>
 800e67e:	2300      	movs	r3, #0
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	4603      	mov	r3, r0
 800e684:	4812      	ldr	r0, [pc, #72]	@ (800e6d0 <udp_sendto+0x120>)
 800e686:	f003 fa41 	bl	8011b0c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 800e68a:	200a      	movs	r0, #10
 800e68c:	f003 fa50 	bl	8011b30 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800e690:	f06f 0303 	mvn.w	r3, #3
 800e694:	e009      	b.n	800e6aa <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e696:	887a      	ldrh	r2, [r7, #2]
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	4613      	mov	r3, r2
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	68b9      	ldr	r1, [r7, #8]
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f000 f816 	bl	800e6d4 <udp_sendto_if>
 800e6a8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3718      	adds	r7, #24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	08014df0 	.word	0x08014df0
 800e6b8:	08014fe8 	.word	0x08014fe8
 800e6bc:	08014e44 	.word	0x08014e44
 800e6c0:	08015000 	.word	0x08015000
 800e6c4:	0801501c 	.word	0x0801501c
 800e6c8:	08015038 	.word	0x08015038
 800e6cc:	08015044 	.word	0x08015044
 800e6d0:	08014f34 	.word	0x08014f34

0800e6d4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af02      	add	r7, sp, #8
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d109      	bne.n	800e6fc <udp_sendto_if+0x28>
 800e6e8:	4b2e      	ldr	r3, [pc, #184]	@ (800e7a4 <udp_sendto_if+0xd0>)
 800e6ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e6ee:	492e      	ldr	r1, [pc, #184]	@ (800e7a8 <udp_sendto_if+0xd4>)
 800e6f0:	482e      	ldr	r0, [pc, #184]	@ (800e7ac <udp_sendto_if+0xd8>)
 800e6f2:	f003 fa0b 	bl	8011b0c <iprintf>
 800e6f6:	f06f 030f 	mvn.w	r3, #15
 800e6fa:	e04f      	b.n	800e79c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d109      	bne.n	800e716 <udp_sendto_if+0x42>
 800e702:	4b28      	ldr	r3, [pc, #160]	@ (800e7a4 <udp_sendto_if+0xd0>)
 800e704:	f240 2281 	movw	r2, #641	@ 0x281
 800e708:	4929      	ldr	r1, [pc, #164]	@ (800e7b0 <udp_sendto_if+0xdc>)
 800e70a:	4828      	ldr	r0, [pc, #160]	@ (800e7ac <udp_sendto_if+0xd8>)
 800e70c:	f003 f9fe 	bl	8011b0c <iprintf>
 800e710:	f06f 030f 	mvn.w	r3, #15
 800e714:	e042      	b.n	800e79c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d109      	bne.n	800e730 <udp_sendto_if+0x5c>
 800e71c:	4b21      	ldr	r3, [pc, #132]	@ (800e7a4 <udp_sendto_if+0xd0>)
 800e71e:	f240 2282 	movw	r2, #642	@ 0x282
 800e722:	4924      	ldr	r1, [pc, #144]	@ (800e7b4 <udp_sendto_if+0xe0>)
 800e724:	4821      	ldr	r0, [pc, #132]	@ (800e7ac <udp_sendto_if+0xd8>)
 800e726:	f003 f9f1 	bl	8011b0c <iprintf>
 800e72a:	f06f 030f 	mvn.w	r3, #15
 800e72e:	e035      	b.n	800e79c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d109      	bne.n	800e74a <udp_sendto_if+0x76>
 800e736:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a4 <udp_sendto_if+0xd0>)
 800e738:	f240 2283 	movw	r2, #643	@ 0x283
 800e73c:	491e      	ldr	r1, [pc, #120]	@ (800e7b8 <udp_sendto_if+0xe4>)
 800e73e:	481b      	ldr	r0, [pc, #108]	@ (800e7ac <udp_sendto_if+0xd8>)
 800e740:	f003 f9e4 	bl	8011b0c <iprintf>
 800e744:	f06f 030f 	mvn.w	r3, #15
 800e748:	e028      	b.n	800e79c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d009      	beq.n	800e764 <udp_sendto_if+0x90>
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d005      	beq.n	800e764 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e760:	2be0      	cmp	r3, #224	@ 0xe0
 800e762:	d103      	bne.n	800e76c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	3304      	adds	r3, #4
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	e00b      	b.n	800e784 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	6a3b      	ldr	r3, [r7, #32]
 800e772:	3304      	adds	r3, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	429a      	cmp	r2, r3
 800e778:	d002      	beq.n	800e780 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e77a:	f06f 0303 	mvn.w	r3, #3
 800e77e:	e00d      	b.n	800e79c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e784:	887a      	ldrh	r2, [r7, #2]
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	4613      	mov	r3, r2
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	68b9      	ldr	r1, [r7, #8]
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f000 f811 	bl	800e7bc <udp_sendto_if_src>
 800e79a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	08014df0 	.word	0x08014df0
 800e7a8:	0801505c 	.word	0x0801505c
 800e7ac:	08014e44 	.word	0x08014e44
 800e7b0:	08015078 	.word	0x08015078
 800e7b4:	08015094 	.word	0x08015094
 800e7b8:	080150b4 	.word	0x080150b4

0800e7bc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08c      	sub	sp, #48	@ 0x30
 800e7c0:	af04      	add	r7, sp, #16
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d109      	bne.n	800e7e4 <udp_sendto_if_src+0x28>
 800e7d0:	4b7a      	ldr	r3, [pc, #488]	@ (800e9bc <udp_sendto_if_src+0x200>)
 800e7d2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e7d6:	497a      	ldr	r1, [pc, #488]	@ (800e9c0 <udp_sendto_if_src+0x204>)
 800e7d8:	487a      	ldr	r0, [pc, #488]	@ (800e9c4 <udp_sendto_if_src+0x208>)
 800e7da:	f003 f997 	bl	8011b0c <iprintf>
 800e7de:	f06f 030f 	mvn.w	r3, #15
 800e7e2:	e0e6      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d109      	bne.n	800e7fe <udp_sendto_if_src+0x42>
 800e7ea:	4b74      	ldr	r3, [pc, #464]	@ (800e9bc <udp_sendto_if_src+0x200>)
 800e7ec:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800e7f0:	4975      	ldr	r1, [pc, #468]	@ (800e9c8 <udp_sendto_if_src+0x20c>)
 800e7f2:	4874      	ldr	r0, [pc, #464]	@ (800e9c4 <udp_sendto_if_src+0x208>)
 800e7f4:	f003 f98a 	bl	8011b0c <iprintf>
 800e7f8:	f06f 030f 	mvn.w	r3, #15
 800e7fc:	e0d9      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d109      	bne.n	800e818 <udp_sendto_if_src+0x5c>
 800e804:	4b6d      	ldr	r3, [pc, #436]	@ (800e9bc <udp_sendto_if_src+0x200>)
 800e806:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800e80a:	4970      	ldr	r1, [pc, #448]	@ (800e9cc <udp_sendto_if_src+0x210>)
 800e80c:	486d      	ldr	r0, [pc, #436]	@ (800e9c4 <udp_sendto_if_src+0x208>)
 800e80e:	f003 f97d 	bl	8011b0c <iprintf>
 800e812:	f06f 030f 	mvn.w	r3, #15
 800e816:	e0cc      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d109      	bne.n	800e832 <udp_sendto_if_src+0x76>
 800e81e:	4b67      	ldr	r3, [pc, #412]	@ (800e9bc <udp_sendto_if_src+0x200>)
 800e820:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800e824:	496a      	ldr	r1, [pc, #424]	@ (800e9d0 <udp_sendto_if_src+0x214>)
 800e826:	4867      	ldr	r0, [pc, #412]	@ (800e9c4 <udp_sendto_if_src+0x208>)
 800e828:	f003 f970 	bl	8011b0c <iprintf>
 800e82c:	f06f 030f 	mvn.w	r3, #15
 800e830:	e0bf      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e834:	2b00      	cmp	r3, #0
 800e836:	d109      	bne.n	800e84c <udp_sendto_if_src+0x90>
 800e838:	4b60      	ldr	r3, [pc, #384]	@ (800e9bc <udp_sendto_if_src+0x200>)
 800e83a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e83e:	4965      	ldr	r1, [pc, #404]	@ (800e9d4 <udp_sendto_if_src+0x218>)
 800e840:	4860      	ldr	r0, [pc, #384]	@ (800e9c4 <udp_sendto_if_src+0x208>)
 800e842:	f003 f963 	bl	8011b0c <iprintf>
 800e846:	f06f 030f 	mvn.w	r3, #15
 800e84a:	e0b2      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	8a5b      	ldrh	r3, [r3, #18]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d115      	bne.n	800e880 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 800e854:	4860      	ldr	r0, [pc, #384]	@ (800e9d8 <udp_sendto_if_src+0x21c>)
 800e856:	f003 f9c9 	bl	8011bec <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e85a:	68f9      	ldr	r1, [r7, #12]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	8a5b      	ldrh	r3, [r3, #18]
 800e860:	461a      	mov	r2, r3
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 f8cc 	bl	800ea00 <udp_bind>
 800e868:	4603      	mov	r3, r0
 800e86a:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e86c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d005      	beq.n	800e880 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 800e874:	4859      	ldr	r0, [pc, #356]	@ (800e9dc <udp_sendto_if_src+0x220>)
 800e876:	f003 f9b9 	bl	8011bec <puts>
      return err;
 800e87a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e87e:	e098      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	891b      	ldrh	r3, [r3, #8]
 800e884:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e888:	4293      	cmp	r3, r2
 800e88a:	d902      	bls.n	800e892 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e890:	e08f      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e892:	2108      	movs	r1, #8
 800e894:	68b8      	ldr	r0, [r7, #8]
 800e896:	f7f9 fe25 	bl	80084e4 <pbuf_add_header>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d01d      	beq.n	800e8dc <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e8a0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e8a4:	2108      	movs	r1, #8
 800e8a6:	2022      	movs	r0, #34	@ 0x22
 800e8a8:	f7f9 fbce 	bl	8008048 <pbuf_alloc>
 800e8ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d105      	bne.n	800e8c0 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 800e8b4:	484a      	ldr	r0, [pc, #296]	@ (800e9e0 <udp_sendto_if_src+0x224>)
 800e8b6:	f003 f999 	bl	8011bec <puts>
      return ERR_MEM;
 800e8ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e8be:	e078      	b.n	800e9b2 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	891b      	ldrh	r3, [r3, #8]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d003      	beq.n	800e8d0 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e8c8:	68b9      	ldr	r1, [r7, #8]
 800e8ca:	69f8      	ldr	r0, [r7, #28]
 800e8cc:	f7f9 ffb8 	bl	8008840 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	69f9      	ldr	r1, [r7, #28]
 800e8d4:	4843      	ldr	r0, [pc, #268]	@ (800e9e4 <udp_sendto_if_src+0x228>)
 800e8d6:	f003 f919 	bl	8011b0c <iprintf>
 800e8da:	e005      	b.n	800e8e8 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	4841      	ldr	r0, [pc, #260]	@ (800e9e8 <udp_sendto_if_src+0x22c>)
 800e8e4:	f003 f912 	bl	8011b0c <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	895b      	ldrh	r3, [r3, #10]
 800e8ec:	2b07      	cmp	r3, #7
 800e8ee:	d806      	bhi.n	800e8fe <udp_sendto_if_src+0x142>
 800e8f0:	4b32      	ldr	r3, [pc, #200]	@ (800e9bc <udp_sendto_if_src+0x200>)
 800e8f2:	f240 320d 	movw	r2, #781	@ 0x30d
 800e8f6:	493d      	ldr	r1, [pc, #244]	@ (800e9ec <udp_sendto_if_src+0x230>)
 800e8f8:	4832      	ldr	r0, [pc, #200]	@ (800e9c4 <udp_sendto_if_src+0x208>)
 800e8fa:	f003 f907 	bl	8011b0c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	8a5b      	ldrh	r3, [r3, #18]
 800e908:	4618      	mov	r0, r3
 800e90a:	f7f8 fa31 	bl	8006d70 <lwip_htons>
 800e90e:	4603      	mov	r3, r0
 800e910:	461a      	mov	r2, r3
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e916:	887b      	ldrh	r3, [r7, #2]
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f8 fa29 	bl	8006d70 <lwip_htons>
 800e91e:	4603      	mov	r3, r0
 800e920:	461a      	mov	r2, r3
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	2200      	movs	r2, #0
 800e92a:	719a      	strb	r2, [r3, #6]
 800e92c:	2200      	movs	r2, #0
 800e92e:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	891b      	ldrh	r3, [r3, #8]
 800e934:	4619      	mov	r1, r3
 800e936:	482e      	ldr	r0, [pc, #184]	@ (800e9f0 <udp_sendto_if_src+0x234>)
 800e938:	f003 f8e8 	bl	8011b0c <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	891b      	ldrh	r3, [r3, #8]
 800e940:	4619      	mov	r1, r3
 800e942:	482c      	ldr	r0, [pc, #176]	@ (800e9f4 <udp_sendto_if_src+0x238>)
 800e944:	f003 f8e2 	bl	8011b0c <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	891b      	ldrh	r3, [r3, #8]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7f8 fa0f 	bl	8006d70 <lwip_htons>
 800e952:	4603      	mov	r3, r0
 800e954:	461a      	mov	r2, r3
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e95a:	2311      	movs	r3, #17
 800e95c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	7adb      	ldrb	r3, [r3, #11]
 800e962:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	88db      	ldrh	r3, [r3, #6]
 800e968:	b29b      	uxth	r3, r3
 800e96a:	4619      	mov	r1, r3
 800e96c:	4822      	ldr	r0, [pc, #136]	@ (800e9f8 <udp_sendto_if_src+0x23c>)
 800e96e:	f003 f8cd 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 800e972:	7cfb      	ldrb	r3, [r7, #19]
 800e974:	4619      	mov	r1, r3
 800e976:	4821      	ldr	r0, [pc, #132]	@ (800e9fc <udp_sendto_if_src+0x240>)
 800e978:	f003 f8c8 	bl	8011b0c <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	7a9b      	ldrb	r3, [r3, #10]
 800e980:	7cb9      	ldrb	r1, [r7, #18]
 800e982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e984:	9202      	str	r2, [sp, #8]
 800e986:	7cfa      	ldrb	r2, [r7, #19]
 800e988:	9201      	str	r2, [sp, #4]
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	460b      	mov	r3, r1
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e992:	69f8      	ldr	r0, [r7, #28]
 800e994:	f001 fd92 	bl	80104bc <ip4_output_if_src>
 800e998:	4603      	mov	r3, r0
 800e99a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e99c:	69fa      	ldr	r2, [r7, #28]
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d004      	beq.n	800e9ae <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 800e9a4:	69f8      	ldr	r0, [r7, #28]
 800e9a6:	f7f9 fe33 	bl	8008610 <pbuf_free>
    q = NULL;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e9ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3720      	adds	r7, #32
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	08014df0 	.word	0x08014df0
 800e9c0:	080150d4 	.word	0x080150d4
 800e9c4:	08014e44 	.word	0x08014e44
 800e9c8:	080150f4 	.word	0x080150f4
 800e9cc:	08015114 	.word	0x08015114
 800e9d0:	08015138 	.word	0x08015138
 800e9d4:	0801515c 	.word	0x0801515c
 800e9d8:	08015180 	.word	0x08015180
 800e9dc:	080151b0 	.word	0x080151b0
 800e9e0:	080151d4 	.word	0x080151d4
 800e9e4:	080151f8 	.word	0x080151f8
 800e9e8:	08015230 	.word	0x08015230
 800e9ec:	0801525c 	.word	0x0801525c
 800e9f0:	0801528c 	.word	0x0801528c
 800e9f4:	080152b8 	.word	0x080152b8
 800e9f8:	080152dc 	.word	0x080152dc
 800e9fc:	080152fc 	.word	0x080152fc

0800ea00 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d101      	bne.n	800ea18 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ea14:	4b65      	ldr	r3, [pc, #404]	@ (800ebac <udp_bind+0x1ac>)
 800ea16:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d109      	bne.n	800ea32 <udp_bind+0x32>
 800ea1e:	4b64      	ldr	r3, [pc, #400]	@ (800ebb0 <udp_bind+0x1b0>)
 800ea20:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800ea24:	4963      	ldr	r1, [pc, #396]	@ (800ebb4 <udp_bind+0x1b4>)
 800ea26:	4864      	ldr	r0, [pc, #400]	@ (800ebb8 <udp_bind+0x1b8>)
 800ea28:	f003 f870 	bl	8011b0c <iprintf>
 800ea2c:	f06f 030f 	mvn.w	r3, #15
 800ea30:	e0b7      	b.n	800eba2 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 800ea32:	4862      	ldr	r0, [pc, #392]	@ (800ebbc <udp_bind+0x1bc>)
 800ea34:	f003 f86a 	bl	8011b0c <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d003      	beq.n	800ea46 <udp_bind+0x46>
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	4619      	mov	r1, r3
 800ea44:	e000      	b.n	800ea48 <udp_bind+0x48>
 800ea46:	2100      	movs	r1, #0
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d004      	beq.n	800ea58 <udp_bind+0x58>
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	3301      	adds	r3, #1
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	461a      	mov	r2, r3
 800ea56:	e000      	b.n	800ea5a <udp_bind+0x5a>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d004      	beq.n	800ea6a <udp_bind+0x6a>
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	3302      	adds	r3, #2
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	4618      	mov	r0, r3
 800ea68:	e000      	b.n	800ea6c <udp_bind+0x6c>
 800ea6a:	2000      	movs	r0, #0
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d003      	beq.n	800ea7a <udp_bind+0x7a>
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	3303      	adds	r3, #3
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	e000      	b.n	800ea7c <udp_bind+0x7c>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	9300      	str	r3, [sp, #0]
 800ea7e:	4603      	mov	r3, r0
 800ea80:	484f      	ldr	r0, [pc, #316]	@ (800ebc0 <udp_bind+0x1c0>)
 800ea82:	f003 f843 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 800ea86:	88fb      	ldrh	r3, [r7, #6]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	484e      	ldr	r0, [pc, #312]	@ (800ebc4 <udp_bind+0x1c4>)
 800ea8c:	f003 f83e 	bl	8011b0c <iprintf>

  rebind = 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea94:	4b4c      	ldr	r3, [pc, #304]	@ (800ebc8 <udp_bind+0x1c8>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	617b      	str	r3, [r7, #20]
 800ea9a:	e009      	b.n	800eab0 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d102      	bne.n	800eaaa <udp_bind+0xaa>
      rebind = 1;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	74fb      	strb	r3, [r7, #19]
      break;
 800eaa8:	e005      	b.n	800eab6 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	617b      	str	r3, [r7, #20]
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1f2      	bne.n	800ea9c <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800eab6:	88fb      	ldrh	r3, [r7, #6]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10c      	bne.n	800ead6 <udp_bind+0xd6>
    port = udp_new_port();
 800eabc:	f7ff fb14 	bl	800e0e8 <udp_new_port>
 800eac0:	4603      	mov	r3, r0
 800eac2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800eac4:	88fb      	ldrh	r3, [r7, #6]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d134      	bne.n	800eb34 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 800eaca:	4840      	ldr	r0, [pc, #256]	@ (800ebcc <udp_bind+0x1cc>)
 800eacc:	f003 f88e 	bl	8011bec <puts>
      return ERR_USE;
 800ead0:	f06f 0307 	mvn.w	r3, #7
 800ead4:	e065      	b.n	800eba2 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ead6:	4b3c      	ldr	r3, [pc, #240]	@ (800ebc8 <udp_bind+0x1c8>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	617b      	str	r3, [r7, #20]
 800eadc:	e027      	b.n	800eb2e <udp_bind+0x12e>
      if (pcb != ipcb) {
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d020      	beq.n	800eb28 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	8a5b      	ldrh	r3, [r3, #18]
 800eaea:	88fa      	ldrh	r2, [r7, #6]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d11b      	bne.n	800eb28 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d00d      	beq.n	800eb18 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00a      	beq.n	800eb18 <udp_bind+0x118>
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d006      	beq.n	800eb18 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb0a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d107      	bne.n	800eb28 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 800eb18:	88fb      	ldrh	r3, [r7, #6]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	482c      	ldr	r0, [pc, #176]	@ (800ebd0 <udp_bind+0x1d0>)
 800eb1e:	f002 fff5 	bl	8011b0c <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800eb22:	f06f 0307 	mvn.w	r3, #7
 800eb26:	e03c      	b.n	800eba2 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	617b      	str	r3, [r7, #20]
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1d4      	bne.n	800eade <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <udp_bind+0x140>
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	e000      	b.n	800eb42 <udp_bind+0x142>
 800eb40:	2300      	movs	r3, #0
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	88fa      	ldrh	r2, [r7, #6]
 800eb4a:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800eb4c:	7cfb      	ldrb	r3, [r7, #19]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d106      	bne.n	800eb60 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800eb52:	4b1d      	ldr	r3, [pc, #116]	@ (800ebc8 <udp_bind+0x1c8>)
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800eb5a:	4a1b      	ldr	r2, [pc, #108]	@ (800ebc8 <udp_bind+0x1c8>)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 800eb60:	481c      	ldr	r0, [pc, #112]	@ (800ebd4 <udp_bind+0x1d4>)
 800eb62:	f002 ffd3 	bl	8011b0c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	0a1b      	lsrs	r3, r3, #8
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	461a      	mov	r2, r3
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	0c1b      	lsrs	r3, r3, #16
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	4618      	mov	r0, r3
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	0e1b      	lsrs	r3, r3, #24
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	480c      	ldr	r0, [pc, #48]	@ (800ebc0 <udp_bind+0x1c0>)
 800eb90:	f002 ffbc 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	8a5b      	ldrh	r3, [r3, #18]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	480f      	ldr	r0, [pc, #60]	@ (800ebd8 <udp_bind+0x1d8>)
 800eb9c:	f002 ffb6 	bl	8011b0c <iprintf>
  return ERR_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3718      	adds	r7, #24
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	08016064 	.word	0x08016064
 800ebb0:	08014df0 	.word	0x08014df0
 800ebb4:	08015324 	.word	0x08015324
 800ebb8:	08014e44 	.word	0x08014e44
 800ebbc:	0801533c 	.word	0x0801533c
 800ebc0:	08014f34 	.word	0x08014f34
 800ebc4:	08015350 	.word	0x08015350
 800ebc8:	2000800c 	.word	0x2000800c
 800ebcc:	08015360 	.word	0x08015360
 800ebd0:	08015380 	.word	0x08015380
 800ebd4:	080153b8 	.word	0x080153b8
 800ebd8:	080153cc 	.word	0x080153cc

0800ebdc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d107      	bne.n	800ebfe <udp_recv+0x22>
 800ebee:	4b08      	ldr	r3, [pc, #32]	@ (800ec10 <udp_recv+0x34>)
 800ebf0:	f240 428a 	movw	r2, #1162	@ 0x48a
 800ebf4:	4907      	ldr	r1, [pc, #28]	@ (800ec14 <udp_recv+0x38>)
 800ebf6:	4808      	ldr	r0, [pc, #32]	@ (800ec18 <udp_recv+0x3c>)
 800ebf8:	f002 ff88 	bl	8011b0c <iprintf>
 800ebfc:	e005      	b.n	800ec0a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	61da      	str	r2, [r3, #28]
}
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	08014df0 	.word	0x08014df0
 800ec14:	0801544c 	.word	0x0801544c
 800ec18:	08014e44 	.word	0x08014e44

0800ec1c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d107      	bne.n	800ec3a <udp_remove+0x1e>
 800ec2a:	4b19      	ldr	r3, [pc, #100]	@ (800ec90 <udp_remove+0x74>)
 800ec2c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800ec30:	4918      	ldr	r1, [pc, #96]	@ (800ec94 <udp_remove+0x78>)
 800ec32:	4819      	ldr	r0, [pc, #100]	@ (800ec98 <udp_remove+0x7c>)
 800ec34:	f002 ff6a 	bl	8011b0c <iprintf>
 800ec38:	e026      	b.n	800ec88 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ec3a:	4b18      	ldr	r3, [pc, #96]	@ (800ec9c <udp_remove+0x80>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d105      	bne.n	800ec50 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ec44:	4b15      	ldr	r3, [pc, #84]	@ (800ec9c <udp_remove+0x80>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	4a14      	ldr	r2, [pc, #80]	@ (800ec9c <udp_remove+0x80>)
 800ec4c:	6013      	str	r3, [r2, #0]
 800ec4e:	e017      	b.n	800ec80 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ec50:	4b12      	ldr	r3, [pc, #72]	@ (800ec9c <udp_remove+0x80>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	60fb      	str	r3, [r7, #12]
 800ec56:	e010      	b.n	800ec7a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d009      	beq.n	800ec74 <udp_remove+0x58>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d104      	bne.n	800ec74 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68da      	ldr	r2, [r3, #12]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	60da      	str	r2, [r3, #12]
        break;
 800ec72:	e005      	b.n	800ec80 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	60fb      	str	r3, [r7, #12]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d1eb      	bne.n	800ec58 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ec80:	6879      	ldr	r1, [r7, #4]
 800ec82:	2000      	movs	r0, #0
 800ec84:	f7f8 fd58 	bl	8007738 <memp_free>
}
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	08014df0 	.word	0x08014df0
 800ec94:	08015464 	.word	0x08015464
 800ec98:	08014e44 	.word	0x08014e44
 800ec9c:	2000800c 	.word	0x2000800c

0800eca0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800eca6:	2000      	movs	r0, #0
 800eca8:	f7f8 fcd6 	bl	8007658 <memp_malloc>
 800ecac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d007      	beq.n	800ecc4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ecb4:	2220      	movs	r2, #32
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f003 f887 	bl	8011dcc <memset>
    pcb->ttl = UDP_TTL;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	22ff      	movs	r2, #255	@ 0xff
 800ecc2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ecc4:	687b      	ldr	r3, [r7, #4]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
	...

0800ecd0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01e      	beq.n	800ed1e <udp_netif_ip_addr_changed+0x4e>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d01a      	beq.n	800ed1e <udp_netif_ip_addr_changed+0x4e>
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d017      	beq.n	800ed1e <udp_netif_ip_addr_changed+0x4e>
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d013      	beq.n	800ed1e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ecf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed2c <udp_netif_ip_addr_changed+0x5c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	e00c      	b.n	800ed18 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d103      	bne.n	800ed12 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d1ef      	bne.n	800ecfe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ed1e:	bf00      	nop
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	2000800c 	.word	0x2000800c

0800ed30 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 800ed30:	b590      	push	{r4, r7, lr}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 800ed38:	481b      	ldr	r0, [pc, #108]	@ (800eda8 <udp_debug_print+0x78>)
 800ed3a:	f002 ff57 	bl	8011bec <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800ed3e:	481b      	ldr	r0, [pc, #108]	@ (800edac <udp_debug_print+0x7c>)
 800ed40:	f002 ff54 	bl	8011bec <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	881b      	ldrh	r3, [r3, #0]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7f8 f810 	bl	8006d70 <lwip_htons>
 800ed50:	4603      	mov	r3, r0
 800ed52:	461c      	mov	r4, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	885b      	ldrh	r3, [r3, #2]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7f8 f808 	bl	8006d70 <lwip_htons>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461a      	mov	r2, r3
 800ed64:	4621      	mov	r1, r4
 800ed66:	4812      	ldr	r0, [pc, #72]	@ (800edb0 <udp_debug_print+0x80>)
 800ed68:	f002 fed0 	bl	8011b0c <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800ed6c:	480f      	ldr	r0, [pc, #60]	@ (800edac <udp_debug_print+0x7c>)
 800ed6e:	f002 ff3d 	bl	8011bec <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	889b      	ldrh	r3, [r3, #4]
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7f7 fff9 	bl	8006d70 <lwip_htons>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	461c      	mov	r4, r3
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	88db      	ldrh	r3, [r3, #6]
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7f7 fff1 	bl	8006d70 <lwip_htons>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	461a      	mov	r2, r3
 800ed92:	4621      	mov	r1, r4
 800ed94:	4807      	ldr	r0, [pc, #28]	@ (800edb4 <udp_debug_print+0x84>)
 800ed96:	f002 feb9 	bl	8011b0c <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800ed9a:	4804      	ldr	r0, [pc, #16]	@ (800edac <udp_debug_print+0x7c>)
 800ed9c:	f002 ff26 	bl	8011bec <puts>
}
 800eda0:	bf00      	nop
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd90      	pop	{r4, r7, pc}
 800eda8:	0801547c 	.word	0x0801547c
 800edac:	08015488 	.word	0x08015488
 800edb0:	080154ac 	.word	0x080154ac
 800edb4:	080154e4 	.word	0x080154e4

0800edb8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800edc0:	492b      	ldr	r1, [pc, #172]	@ (800ee70 <etharp_free_entry+0xb8>)
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	4613      	mov	r3, r2
 800edc6:	005b      	lsls	r3, r3, #1
 800edc8:	4413      	add	r3, r2
 800edca:	00db      	lsls	r3, r3, #3
 800edcc:	440b      	add	r3, r1
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d013      	beq.n	800edfc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800edd4:	4926      	ldr	r1, [pc, #152]	@ (800ee70 <etharp_free_entry+0xb8>)
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	4613      	mov	r3, r2
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	4413      	add	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	440b      	add	r3, r1
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7f9 fc13 	bl	8008610 <pbuf_free>
    arp_table[i].q = NULL;
 800edea:	4921      	ldr	r1, [pc, #132]	@ (800ee70 <etharp_free_entry+0xb8>)
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	4613      	mov	r3, r2
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	4413      	add	r3, r2
 800edf4:	00db      	lsls	r3, r3, #3
 800edf6:	440b      	add	r3, r1
 800edf8:	2200      	movs	r2, #0
 800edfa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800edfc:	491c      	ldr	r1, [pc, #112]	@ (800ee70 <etharp_free_entry+0xb8>)
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	4613      	mov	r3, r2
 800ee02:	005b      	lsls	r3, r3, #1
 800ee04:	4413      	add	r3, r2
 800ee06:	00db      	lsls	r3, r3, #3
 800ee08:	440b      	add	r3, r1
 800ee0a:	3314      	adds	r3, #20
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800ee10:	4917      	ldr	r1, [pc, #92]	@ (800ee70 <etharp_free_entry+0xb8>)
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	4613      	mov	r3, r2
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	4413      	add	r3, r2
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	440b      	add	r3, r1
 800ee1e:	3312      	adds	r3, #18
 800ee20:	2200      	movs	r2, #0
 800ee22:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800ee24:	4912      	ldr	r1, [pc, #72]	@ (800ee70 <etharp_free_entry+0xb8>)
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	4413      	add	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	440b      	add	r3, r1
 800ee32:	3308      	adds	r3, #8
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800ee38:	490d      	ldr	r1, [pc, #52]	@ (800ee70 <etharp_free_entry+0xb8>)
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	4413      	add	r3, r2
 800ee42:	00db      	lsls	r3, r3, #3
 800ee44:	440b      	add	r3, r1
 800ee46:	3304      	adds	r3, #4
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800ee4c:	4908      	ldr	r1, [pc, #32]	@ (800ee70 <etharp_free_entry+0xb8>)
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	4613      	mov	r3, r2
 800ee52:	005b      	lsls	r3, r3, #1
 800ee54:	4413      	add	r3, r2
 800ee56:	00db      	lsls	r3, r3, #3
 800ee58:	440b      	add	r3, r1
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	4a05      	ldr	r2, [pc, #20]	@ (800ee74 <etharp_free_entry+0xbc>)
 800ee5e:	3304      	adds	r3, #4
 800ee60:	6810      	ldr	r0, [r2, #0]
 800ee62:	6018      	str	r0, [r3, #0]
 800ee64:	8892      	ldrh	r2, [r2, #4]
 800ee66:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	20008010 	.word	0x20008010
 800ee74:	08016070 	.word	0x08016070

0800ee78 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee7e:	2300      	movs	r3, #0
 800ee80:	607b      	str	r3, [r7, #4]
 800ee82:	e096      	b.n	800efb2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ee84:	494f      	ldr	r1, [pc, #316]	@ (800efc4 <etharp_tmr+0x14c>)
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	4413      	add	r3, r2
 800ee8e:	00db      	lsls	r3, r3, #3
 800ee90:	440b      	add	r3, r1
 800ee92:	3314      	adds	r3, #20
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ee98:	78fb      	ldrb	r3, [r7, #3]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f000 8086 	beq.w	800efac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800eea0:	4948      	ldr	r1, [pc, #288]	@ (800efc4 <etharp_tmr+0x14c>)
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	4613      	mov	r3, r2
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	4413      	add	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	440b      	add	r3, r1
 800eeae:	3312      	adds	r3, #18
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	b298      	uxth	r0, r3
 800eeb6:	4943      	ldr	r1, [pc, #268]	@ (800efc4 <etharp_tmr+0x14c>)
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	4613      	mov	r3, r2
 800eebc:	005b      	lsls	r3, r3, #1
 800eebe:	4413      	add	r3, r2
 800eec0:	00db      	lsls	r3, r3, #3
 800eec2:	440b      	add	r3, r1
 800eec4:	3312      	adds	r3, #18
 800eec6:	4602      	mov	r2, r0
 800eec8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eeca:	493e      	ldr	r1, [pc, #248]	@ (800efc4 <etharp_tmr+0x14c>)
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	4613      	mov	r3, r2
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	4413      	add	r3, r2
 800eed4:	00db      	lsls	r3, r3, #3
 800eed6:	440b      	add	r3, r1
 800eed8:	3312      	adds	r3, #18
 800eeda:	881b      	ldrh	r3, [r3, #0]
 800eedc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800eee0:	d215      	bcs.n	800ef0e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eee2:	4938      	ldr	r1, [pc, #224]	@ (800efc4 <etharp_tmr+0x14c>)
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	4613      	mov	r3, r2
 800eee8:	005b      	lsls	r3, r3, #1
 800eeea:	4413      	add	r3, r2
 800eeec:	00db      	lsls	r3, r3, #3
 800eeee:	440b      	add	r3, r1
 800eef0:	3314      	adds	r3, #20
 800eef2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d10e      	bne.n	800ef16 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800eef8:	4932      	ldr	r1, [pc, #200]	@ (800efc4 <etharp_tmr+0x14c>)
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	4613      	mov	r3, r2
 800eefe:	005b      	lsls	r3, r3, #1
 800ef00:	4413      	add	r3, r2
 800ef02:	00db      	lsls	r3, r3, #3
 800ef04:	440b      	add	r3, r1
 800ef06:	3312      	adds	r3, #18
 800ef08:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ef0a:	2b04      	cmp	r3, #4
 800ef0c:	d903      	bls.n	800ef16 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7ff ff52 	bl	800edb8 <etharp_free_entry>
 800ef14:	e04a      	b.n	800efac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ef16:	492b      	ldr	r1, [pc, #172]	@ (800efc4 <etharp_tmr+0x14c>)
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	005b      	lsls	r3, r3, #1
 800ef1e:	4413      	add	r3, r2
 800ef20:	00db      	lsls	r3, r3, #3
 800ef22:	440b      	add	r3, r1
 800ef24:	3314      	adds	r3, #20
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b03      	cmp	r3, #3
 800ef2a:	d10a      	bne.n	800ef42 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ef2c:	4925      	ldr	r1, [pc, #148]	@ (800efc4 <etharp_tmr+0x14c>)
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	4613      	mov	r3, r2
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	4413      	add	r3, r2
 800ef36:	00db      	lsls	r3, r3, #3
 800ef38:	440b      	add	r3, r1
 800ef3a:	3314      	adds	r3, #20
 800ef3c:	2204      	movs	r2, #4
 800ef3e:	701a      	strb	r2, [r3, #0]
 800ef40:	e034      	b.n	800efac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ef42:	4920      	ldr	r1, [pc, #128]	@ (800efc4 <etharp_tmr+0x14c>)
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	4613      	mov	r3, r2
 800ef48:	005b      	lsls	r3, r3, #1
 800ef4a:	4413      	add	r3, r2
 800ef4c:	00db      	lsls	r3, r3, #3
 800ef4e:	440b      	add	r3, r1
 800ef50:	3314      	adds	r3, #20
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b04      	cmp	r3, #4
 800ef56:	d10a      	bne.n	800ef6e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ef58:	491a      	ldr	r1, [pc, #104]	@ (800efc4 <etharp_tmr+0x14c>)
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	4413      	add	r3, r2
 800ef62:	00db      	lsls	r3, r3, #3
 800ef64:	440b      	add	r3, r1
 800ef66:	3314      	adds	r3, #20
 800ef68:	2202      	movs	r2, #2
 800ef6a:	701a      	strb	r2, [r3, #0]
 800ef6c:	e01e      	b.n	800efac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ef6e:	4915      	ldr	r1, [pc, #84]	@ (800efc4 <etharp_tmr+0x14c>)
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	4613      	mov	r3, r2
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	4413      	add	r3, r2
 800ef78:	00db      	lsls	r3, r3, #3
 800ef7a:	440b      	add	r3, r1
 800ef7c:	3314      	adds	r3, #20
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d113      	bne.n	800efac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ef84:	490f      	ldr	r1, [pc, #60]	@ (800efc4 <etharp_tmr+0x14c>)
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	005b      	lsls	r3, r3, #1
 800ef8c:	4413      	add	r3, r2
 800ef8e:	00db      	lsls	r3, r3, #3
 800ef90:	440b      	add	r3, r1
 800ef92:	3308      	adds	r3, #8
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	005b      	lsls	r3, r3, #1
 800ef9c:	4413      	add	r3, r2
 800ef9e:	00db      	lsls	r3, r3, #3
 800efa0:	4a08      	ldr	r2, [pc, #32]	@ (800efc4 <etharp_tmr+0x14c>)
 800efa2:	4413      	add	r3, r2
 800efa4:	3304      	adds	r3, #4
 800efa6:	4619      	mov	r1, r3
 800efa8:	f000 fe6e 	bl	800fc88 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	3301      	adds	r3, #1
 800efb0:	607b      	str	r3, [r7, #4]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b09      	cmp	r3, #9
 800efb6:	f77f af65 	ble.w	800ee84 <etharp_tmr+0xc>
      }
    }
  }
}
 800efba:	bf00      	nop
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	20008010 	.word	0x20008010

0800efc8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08a      	sub	sp, #40	@ 0x28
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	460b      	mov	r3, r1
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800efd6:	230a      	movs	r3, #10
 800efd8:	843b      	strh	r3, [r7, #32]
 800efda:	230a      	movs	r3, #10
 800efdc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800efde:	230a      	movs	r3, #10
 800efe0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800efe6:	230a      	movs	r3, #10
 800efe8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	83bb      	strh	r3, [r7, #28]
 800efee:	2300      	movs	r3, #0
 800eff0:	837b      	strh	r3, [r7, #26]
 800eff2:	2300      	movs	r3, #0
 800eff4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eff6:	2300      	movs	r3, #0
 800eff8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800effa:	e0ae      	b.n	800f15a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800effc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f000:	49a6      	ldr	r1, [pc, #664]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f002:	4613      	mov	r3, r2
 800f004:	005b      	lsls	r3, r3, #1
 800f006:	4413      	add	r3, r2
 800f008:	00db      	lsls	r3, r3, #3
 800f00a:	440b      	add	r3, r1
 800f00c:	3314      	adds	r3, #20
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f012:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f016:	2b0a      	cmp	r3, #10
 800f018:	d105      	bne.n	800f026 <etharp_find_entry+0x5e>
 800f01a:	7dfb      	ldrb	r3, [r7, #23]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d102      	bne.n	800f026 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f020:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f022:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f024:	e095      	b.n	800f152 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f026:	7dfb      	ldrb	r3, [r7, #23]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f000 8092 	beq.w	800f152 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f02e:	7dfb      	ldrb	r3, [r7, #23]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d009      	beq.n	800f048 <etharp_find_entry+0x80>
 800f034:	7dfb      	ldrb	r3, [r7, #23]
 800f036:	2b01      	cmp	r3, #1
 800f038:	d806      	bhi.n	800f048 <etharp_find_entry+0x80>
 800f03a:	4b99      	ldr	r3, [pc, #612]	@ (800f2a0 <etharp_find_entry+0x2d8>)
 800f03c:	f240 1223 	movw	r2, #291	@ 0x123
 800f040:	4998      	ldr	r1, [pc, #608]	@ (800f2a4 <etharp_find_entry+0x2dc>)
 800f042:	4899      	ldr	r0, [pc, #612]	@ (800f2a8 <etharp_find_entry+0x2e0>)
 800f044:	f002 fd62 	bl	8011b0c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d020      	beq.n	800f090 <etharp_find_entry+0xc8>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6819      	ldr	r1, [r3, #0]
 800f052:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f056:	4891      	ldr	r0, [pc, #580]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f058:	4613      	mov	r3, r2
 800f05a:	005b      	lsls	r3, r3, #1
 800f05c:	4413      	add	r3, r2
 800f05e:	00db      	lsls	r3, r3, #3
 800f060:	4403      	add	r3, r0
 800f062:	3304      	adds	r3, #4
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4299      	cmp	r1, r3
 800f068:	d112      	bne.n	800f090 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00c      	beq.n	800f08a <etharp_find_entry+0xc2>
 800f070:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f074:	4989      	ldr	r1, [pc, #548]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f076:	4613      	mov	r3, r2
 800f078:	005b      	lsls	r3, r3, #1
 800f07a:	4413      	add	r3, r2
 800f07c:	00db      	lsls	r3, r3, #3
 800f07e:	440b      	add	r3, r1
 800f080:	3308      	adds	r3, #8
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	429a      	cmp	r2, r3
 800f088:	d102      	bne.n	800f090 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f08a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f08e:	e100      	b.n	800f292 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f090:	7dfb      	ldrb	r3, [r7, #23]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d140      	bne.n	800f118 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f096:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f09a:	4980      	ldr	r1, [pc, #512]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f09c:	4613      	mov	r3, r2
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	4413      	add	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	440b      	add	r3, r1
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d01a      	beq.n	800f0e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f0ac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f0b0:	497a      	ldr	r1, [pc, #488]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	4413      	add	r3, r2
 800f0b8:	00db      	lsls	r3, r3, #3
 800f0ba:	440b      	add	r3, r1
 800f0bc:	3312      	adds	r3, #18
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	8bba      	ldrh	r2, [r7, #28]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d845      	bhi.n	800f152 <etharp_find_entry+0x18a>
            old_queue = i;
 800f0c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f0ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f0ce:	4973      	ldr	r1, [pc, #460]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	4413      	add	r3, r2
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	440b      	add	r3, r1
 800f0da:	3312      	adds	r3, #18
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	83bb      	strh	r3, [r7, #28]
 800f0e0:	e037      	b.n	800f152 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f0e2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f0e6:	496d      	ldr	r1, [pc, #436]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	005b      	lsls	r3, r3, #1
 800f0ec:	4413      	add	r3, r2
 800f0ee:	00db      	lsls	r3, r3, #3
 800f0f0:	440b      	add	r3, r1
 800f0f2:	3312      	adds	r3, #18
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	8b7a      	ldrh	r2, [r7, #26]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d82a      	bhi.n	800f152 <etharp_find_entry+0x18a>
            old_pending = i;
 800f0fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0fe:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800f100:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f104:	4965      	ldr	r1, [pc, #404]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f106:	4613      	mov	r3, r2
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	4413      	add	r3, r2
 800f10c:	00db      	lsls	r3, r3, #3
 800f10e:	440b      	add	r3, r1
 800f110:	3312      	adds	r3, #18
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	837b      	strh	r3, [r7, #26]
 800f116:	e01c      	b.n	800f152 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f118:	7dfb      	ldrb	r3, [r7, #23]
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d919      	bls.n	800f152 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f11e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f122:	495e      	ldr	r1, [pc, #376]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f124:	4613      	mov	r3, r2
 800f126:	005b      	lsls	r3, r3, #1
 800f128:	4413      	add	r3, r2
 800f12a:	00db      	lsls	r3, r3, #3
 800f12c:	440b      	add	r3, r1
 800f12e:	3312      	adds	r3, #18
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	8b3a      	ldrh	r2, [r7, #24]
 800f134:	429a      	cmp	r2, r3
 800f136:	d80c      	bhi.n	800f152 <etharp_find_entry+0x18a>
            old_stable = i;
 800f138:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f13a:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 800f13c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f140:	4956      	ldr	r1, [pc, #344]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f142:	4613      	mov	r3, r2
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	4413      	add	r3, r2
 800f148:	00db      	lsls	r3, r3, #3
 800f14a:	440b      	add	r3, r1
 800f14c:	3312      	adds	r3, #18
 800f14e:	881b      	ldrh	r3, [r3, #0]
 800f150:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f152:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f154:	3301      	adds	r3, #1
 800f156:	b29b      	uxth	r3, r3
 800f158:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f15a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f15e:	2b09      	cmp	r3, #9
 800f160:	f77f af4c 	ble.w	800effc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f164:	7afb      	ldrb	r3, [r7, #11]
 800f166:	f003 0302 	and.w	r3, r3, #2
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d108      	bne.n	800f180 <etharp_find_entry+0x1b8>
 800f16e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f172:	2b0a      	cmp	r3, #10
 800f174:	d107      	bne.n	800f186 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f176:	7afb      	ldrb	r3, [r7, #11]
 800f178:	f003 0301 	and.w	r3, r3, #1
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d102      	bne.n	800f186 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f184:	e085      	b.n	800f292 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f186:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f18a:	2b09      	cmp	r3, #9
 800f18c:	dc02      	bgt.n	800f194 <etharp_find_entry+0x1cc>
    i = empty;
 800f18e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f190:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f192:	e039      	b.n	800f208 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f194:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f198:	2b09      	cmp	r3, #9
 800f19a:	dc14      	bgt.n	800f1c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f19c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f19e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f1a0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f1a4:	493d      	ldr	r1, [pc, #244]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	4413      	add	r3, r2
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	440b      	add	r3, r1
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d018      	beq.n	800f1e8 <etharp_find_entry+0x220>
 800f1b6:	4b3a      	ldr	r3, [pc, #232]	@ (800f2a0 <etharp_find_entry+0x2d8>)
 800f1b8:	f240 126d 	movw	r2, #365	@ 0x16d
 800f1bc:	493b      	ldr	r1, [pc, #236]	@ (800f2ac <etharp_find_entry+0x2e4>)
 800f1be:	483a      	ldr	r0, [pc, #232]	@ (800f2a8 <etharp_find_entry+0x2e0>)
 800f1c0:	f002 fca4 	bl	8011b0c <iprintf>
 800f1c4:	e010      	b.n	800f1e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f1c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f1ca:	2b09      	cmp	r3, #9
 800f1cc:	dc02      	bgt.n	800f1d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f1ce:	8c3b      	ldrh	r3, [r7, #32]
 800f1d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f1d2:	e009      	b.n	800f1e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f1d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f1d8:	2b09      	cmp	r3, #9
 800f1da:	dc02      	bgt.n	800f1e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f1dc:	8bfb      	ldrh	r3, [r7, #30]
 800f1de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f1e0:	e002      	b.n	800f1e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f1e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f1e6:	e054      	b.n	800f292 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f1e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f1ec:	2b09      	cmp	r3, #9
 800f1ee:	dd06      	ble.n	800f1fe <etharp_find_entry+0x236>
 800f1f0:	4b2b      	ldr	r3, [pc, #172]	@ (800f2a0 <etharp_find_entry+0x2d8>)
 800f1f2:	f240 127f 	movw	r2, #383	@ 0x17f
 800f1f6:	492e      	ldr	r1, [pc, #184]	@ (800f2b0 <etharp_find_entry+0x2e8>)
 800f1f8:	482b      	ldr	r0, [pc, #172]	@ (800f2a8 <etharp_find_entry+0x2e0>)
 800f1fa:	f002 fc87 	bl	8011b0c <iprintf>
    etharp_free_entry(i);
 800f1fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fdd8 	bl	800edb8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f208:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f20c:	2b09      	cmp	r3, #9
 800f20e:	dd06      	ble.n	800f21e <etharp_find_entry+0x256>
 800f210:	4b23      	ldr	r3, [pc, #140]	@ (800f2a0 <etharp_find_entry+0x2d8>)
 800f212:	f240 1283 	movw	r2, #387	@ 0x183
 800f216:	4926      	ldr	r1, [pc, #152]	@ (800f2b0 <etharp_find_entry+0x2e8>)
 800f218:	4823      	ldr	r0, [pc, #140]	@ (800f2a8 <etharp_find_entry+0x2e0>)
 800f21a:	f002 fc77 	bl	8011b0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f21e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f222:	491e      	ldr	r1, [pc, #120]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f224:	4613      	mov	r3, r2
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	440b      	add	r3, r1
 800f22e:	3314      	adds	r3, #20
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d006      	beq.n	800f244 <etharp_find_entry+0x27c>
 800f236:	4b1a      	ldr	r3, [pc, #104]	@ (800f2a0 <etharp_find_entry+0x2d8>)
 800f238:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f23c:	491d      	ldr	r1, [pc, #116]	@ (800f2b4 <etharp_find_entry+0x2ec>)
 800f23e:	481a      	ldr	r0, [pc, #104]	@ (800f2a8 <etharp_find_entry+0x2e0>)
 800f240:	f002 fc64 	bl	8011b0c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00b      	beq.n	800f262 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f24a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6819      	ldr	r1, [r3, #0]
 800f252:	4812      	ldr	r0, [pc, #72]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f254:	4613      	mov	r3, r2
 800f256:	005b      	lsls	r3, r3, #1
 800f258:	4413      	add	r3, r2
 800f25a:	00db      	lsls	r3, r3, #3
 800f25c:	4403      	add	r3, r0
 800f25e:	3304      	adds	r3, #4
 800f260:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f262:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f266:	490d      	ldr	r1, [pc, #52]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f268:	4613      	mov	r3, r2
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	4413      	add	r3, r2
 800f26e:	00db      	lsls	r3, r3, #3
 800f270:	440b      	add	r3, r1
 800f272:	3312      	adds	r3, #18
 800f274:	2200      	movs	r2, #0
 800f276:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f278:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800f27c:	4907      	ldr	r1, [pc, #28]	@ (800f29c <etharp_find_entry+0x2d4>)
 800f27e:	4613      	mov	r3, r2
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	4413      	add	r3, r2
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	440b      	add	r3, r1
 800f288:	3308      	adds	r3, #8
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f28e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800f292:	4618      	mov	r0, r3
 800f294:	3728      	adds	r7, #40	@ 0x28
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	20008010 	.word	0x20008010
 800f2a0:	08015518 	.word	0x08015518
 800f2a4:	08015550 	.word	0x08015550
 800f2a8:	08015590 	.word	0x08015590
 800f2ac:	080155b8 	.word	0x080155b8
 800f2b0:	080155d0 	.word	0x080155d0
 800f2b4:	080155e4 	.word	0x080155e4

0800f2b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b088      	sub	sp, #32
 800f2bc:	af02      	add	r7, sp, #8
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
 800f2c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f2cc:	2b06      	cmp	r3, #6
 800f2ce:	d006      	beq.n	800f2de <etharp_update_arp_entry+0x26>
 800f2d0:	4b48      	ldr	r3, [pc, #288]	@ (800f3f4 <etharp_update_arp_entry+0x13c>)
 800f2d2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f2d6:	4948      	ldr	r1, [pc, #288]	@ (800f3f8 <etharp_update_arp_entry+0x140>)
 800f2d8:	4848      	ldr	r0, [pc, #288]	@ (800f3fc <etharp_update_arp_entry+0x144>)
 800f2da:	f002 fc17 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d012      	beq.n	800f30a <etharp_update_arp_entry+0x52>
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00e      	beq.n	800f30a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68f9      	ldr	r1, [r7, #12]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f001 f990 	bl	8010618 <ip4_addr_isbroadcast_u32>
 800f2f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d105      	bne.n	800f30a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f306:	2be0      	cmp	r3, #224	@ 0xe0
 800f308:	d102      	bne.n	800f310 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f30a:	f06f 030f 	mvn.w	r3, #15
 800f30e:	e06c      	b.n	800f3ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f310:	78fb      	ldrb	r3, [r7, #3]
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	4619      	mov	r1, r3
 800f316:	68b8      	ldr	r0, [r7, #8]
 800f318:	f7ff fe56 	bl	800efc8 <etharp_find_entry>
 800f31c:	4603      	mov	r3, r0
 800f31e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f324:	2b00      	cmp	r3, #0
 800f326:	da02      	bge.n	800f32e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f328:	8afb      	ldrh	r3, [r7, #22]
 800f32a:	b25b      	sxtb	r3, r3
 800f32c:	e05d      	b.n	800f3ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f32e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f332:	4933      	ldr	r1, [pc, #204]	@ (800f400 <etharp_update_arp_entry+0x148>)
 800f334:	4613      	mov	r3, r2
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	4413      	add	r3, r2
 800f33a:	00db      	lsls	r3, r3, #3
 800f33c:	440b      	add	r3, r1
 800f33e:	3314      	adds	r3, #20
 800f340:	2202      	movs	r2, #2
 800f342:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f344:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f348:	492d      	ldr	r1, [pc, #180]	@ (800f400 <etharp_update_arp_entry+0x148>)
 800f34a:	4613      	mov	r3, r2
 800f34c:	005b      	lsls	r3, r3, #1
 800f34e:	4413      	add	r3, r2
 800f350:	00db      	lsls	r3, r3, #3
 800f352:	440b      	add	r3, r1
 800f354:	3308      	adds	r3, #8
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f35a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f35e:	4613      	mov	r3, r2
 800f360:	005b      	lsls	r3, r3, #1
 800f362:	4413      	add	r3, r2
 800f364:	00db      	lsls	r3, r3, #3
 800f366:	3308      	adds	r3, #8
 800f368:	4a25      	ldr	r2, [pc, #148]	@ (800f400 <etharp_update_arp_entry+0x148>)
 800f36a:	4413      	add	r3, r2
 800f36c:	3304      	adds	r3, #4
 800f36e:	2206      	movs	r2, #6
 800f370:	6879      	ldr	r1, [r7, #4]
 800f372:	4618      	mov	r0, r3
 800f374:	f002 fd9f 	bl	8011eb6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f378:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f37c:	4920      	ldr	r1, [pc, #128]	@ (800f400 <etharp_update_arp_entry+0x148>)
 800f37e:	4613      	mov	r3, r2
 800f380:	005b      	lsls	r3, r3, #1
 800f382:	4413      	add	r3, r2
 800f384:	00db      	lsls	r3, r3, #3
 800f386:	440b      	add	r3, r1
 800f388:	3312      	adds	r3, #18
 800f38a:	2200      	movs	r2, #0
 800f38c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f38e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f392:	491b      	ldr	r1, [pc, #108]	@ (800f400 <etharp_update_arp_entry+0x148>)
 800f394:	4613      	mov	r3, r2
 800f396:	005b      	lsls	r3, r3, #1
 800f398:	4413      	add	r3, r2
 800f39a:	00db      	lsls	r3, r3, #3
 800f39c:	440b      	add	r3, r1
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d021      	beq.n	800f3e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f3a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f3a8:	4915      	ldr	r1, [pc, #84]	@ (800f400 <etharp_update_arp_entry+0x148>)
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	4413      	add	r3, r2
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	440b      	add	r3, r1
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f3b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f3bc:	4910      	ldr	r1, [pc, #64]	@ (800f400 <etharp_update_arp_entry+0x148>)
 800f3be:	4613      	mov	r3, r2
 800f3c0:	005b      	lsls	r3, r3, #1
 800f3c2:	4413      	add	r3, r2
 800f3c4:	00db      	lsls	r3, r3, #3
 800f3c6:	440b      	add	r3, r1
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f3d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6939      	ldr	r1, [r7, #16]
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f002 f829 	bl	8011434 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f3e2:	6938      	ldr	r0, [r7, #16]
 800f3e4:	f7f9 f914 	bl	8008610 <pbuf_free>
  }
  return ERR_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	08015518 	.word	0x08015518
 800f3f8:	08015610 	.word	0x08015610
 800f3fc:	08015590 	.word	0x08015590
 800f400:	20008010 	.word	0x20008010

0800f404 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f40c:	2300      	movs	r3, #0
 800f40e:	60fb      	str	r3, [r7, #12]
 800f410:	e01e      	b.n	800f450 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f412:	4913      	ldr	r1, [pc, #76]	@ (800f460 <etharp_cleanup_netif+0x5c>)
 800f414:	68fa      	ldr	r2, [r7, #12]
 800f416:	4613      	mov	r3, r2
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	4413      	add	r3, r2
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	440b      	add	r3, r1
 800f420:	3314      	adds	r3, #20
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f426:	7afb      	ldrb	r3, [r7, #11]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00e      	beq.n	800f44a <etharp_cleanup_netif+0x46>
 800f42c:	490c      	ldr	r1, [pc, #48]	@ (800f460 <etharp_cleanup_netif+0x5c>)
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	4613      	mov	r3, r2
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	4413      	add	r3, r2
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	440b      	add	r3, r1
 800f43a:	3308      	adds	r3, #8
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	429a      	cmp	r2, r3
 800f442:	d102      	bne.n	800f44a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7ff fcb7 	bl	800edb8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3301      	adds	r3, #1
 800f44e:	60fb      	str	r3, [r7, #12]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2b09      	cmp	r3, #9
 800f454:	dddd      	ble.n	800f412 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f456:	bf00      	nop
 800f458:	bf00      	nop
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	20008010 	.word	0x20008010

0800f464 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f464:	b5b0      	push	{r4, r5, r7, lr}
 800f466:	b08a      	sub	sp, #40	@ 0x28
 800f468:	af04      	add	r7, sp, #16
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d107      	bne.n	800f484 <etharp_input+0x20>
 800f474:	4b3d      	ldr	r3, [pc, #244]	@ (800f56c <etharp_input+0x108>)
 800f476:	f240 228a 	movw	r2, #650	@ 0x28a
 800f47a:	493d      	ldr	r1, [pc, #244]	@ (800f570 <etharp_input+0x10c>)
 800f47c:	483d      	ldr	r0, [pc, #244]	@ (800f574 <etharp_input+0x110>)
 800f47e:	f002 fb45 	bl	8011b0c <iprintf>
 800f482:	e06f      	b.n	800f564 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	881b      	ldrh	r3, [r3, #0]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f494:	d10c      	bne.n	800f4b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f49a:	2b06      	cmp	r3, #6
 800f49c:	d108      	bne.n	800f4b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f4a2:	2b04      	cmp	r3, #4
 800f4a4:	d104      	bne.n	800f4b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	885b      	ldrh	r3, [r3, #2]
 800f4aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f4ac:	2b08      	cmp	r3, #8
 800f4ae:	d003      	beq.n	800f4b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7f9 f8ad 	bl	8008610 <pbuf_free>
    return;
 800f4b6:	e055      	b.n	800f564 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	330e      	adds	r3, #14
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	3318      	adds	r3, #24
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	3304      	adds	r3, #4
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d102      	bne.n	800f4d8 <etharp_input+0x74>
    for_us = 0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	74fb      	strb	r3, [r7, #19]
 800f4d6:	e009      	b.n	800f4ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	3304      	adds	r3, #4
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	bf0c      	ite	eq
 800f4e4:	2301      	moveq	r3, #1
 800f4e6:	2300      	movne	r3, #0
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	f103 0208 	add.w	r2, r3, #8
 800f4f2:	7cfb      	ldrb	r3, [r7, #19]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <etharp_input+0x98>
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e000      	b.n	800f4fe <etharp_input+0x9a>
 800f4fc:	2302      	movs	r3, #2
 800f4fe:	f107 010c 	add.w	r1, r7, #12
 800f502:	6838      	ldr	r0, [r7, #0]
 800f504:	f7ff fed8 	bl	800f2b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	88db      	ldrh	r3, [r3, #6]
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f512:	d003      	beq.n	800f51c <etharp_input+0xb8>
 800f514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f518:	d01e      	beq.n	800f558 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f51a:	e020      	b.n	800f55e <etharp_input+0xfa>
      if (for_us) {
 800f51c:	7cfb      	ldrb	r3, [r7, #19]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d01c      	beq.n	800f55c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f538:	697a      	ldr	r2, [r7, #20]
 800f53a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f53c:	2102      	movs	r1, #2
 800f53e:	9103      	str	r1, [sp, #12]
 800f540:	f107 010c 	add.w	r1, r7, #12
 800f544:	9102      	str	r1, [sp, #8]
 800f546:	9201      	str	r2, [sp, #4]
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	462b      	mov	r3, r5
 800f54c:	4622      	mov	r2, r4
 800f54e:	4601      	mov	r1, r0
 800f550:	6838      	ldr	r0, [r7, #0]
 800f552:	f000 faeb 	bl	800fb2c <etharp_raw>
      break;
 800f556:	e001      	b.n	800f55c <etharp_input+0xf8>
      break;
 800f558:	bf00      	nop
 800f55a:	e000      	b.n	800f55e <etharp_input+0xfa>
      break;
 800f55c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7f9 f856 	bl	8008610 <pbuf_free>
}
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bdb0      	pop	{r4, r5, r7, pc}
 800f56a:	bf00      	nop
 800f56c:	08015518 	.word	0x08015518
 800f570:	08015668 	.word	0x08015668
 800f574:	08015590 	.word	0x08015590

0800f578 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af02      	add	r7, sp, #8
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	4613      	mov	r3, r2
 800f584:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f586:	79fa      	ldrb	r2, [r7, #7]
 800f588:	4944      	ldr	r1, [pc, #272]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f58a:	4613      	mov	r3, r2
 800f58c:	005b      	lsls	r3, r3, #1
 800f58e:	4413      	add	r3, r2
 800f590:	00db      	lsls	r3, r3, #3
 800f592:	440b      	add	r3, r1
 800f594:	3314      	adds	r3, #20
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d806      	bhi.n	800f5aa <etharp_output_to_arp_index+0x32>
 800f59c:	4b40      	ldr	r3, [pc, #256]	@ (800f6a0 <etharp_output_to_arp_index+0x128>)
 800f59e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f5a2:	4940      	ldr	r1, [pc, #256]	@ (800f6a4 <etharp_output_to_arp_index+0x12c>)
 800f5a4:	4840      	ldr	r0, [pc, #256]	@ (800f6a8 <etharp_output_to_arp_index+0x130>)
 800f5a6:	f002 fab1 	bl	8011b0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f5aa:	79fa      	ldrb	r2, [r7, #7]
 800f5ac:	493b      	ldr	r1, [pc, #236]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	4413      	add	r3, r2
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	440b      	add	r3, r1
 800f5b8:	3314      	adds	r3, #20
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d153      	bne.n	800f668 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f5c0:	79fa      	ldrb	r2, [r7, #7]
 800f5c2:	4936      	ldr	r1, [pc, #216]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	005b      	lsls	r3, r3, #1
 800f5c8:	4413      	add	r3, r2
 800f5ca:	00db      	lsls	r3, r3, #3
 800f5cc:	440b      	add	r3, r1
 800f5ce:	3312      	adds	r3, #18
 800f5d0:	881b      	ldrh	r3, [r3, #0]
 800f5d2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f5d6:	d919      	bls.n	800f60c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f5d8:	79fa      	ldrb	r2, [r7, #7]
 800f5da:	4613      	mov	r3, r2
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	4413      	add	r3, r2
 800f5e0:	00db      	lsls	r3, r3, #3
 800f5e2:	4a2e      	ldr	r2, [pc, #184]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f5e4:	4413      	add	r3, r2
 800f5e6:	3304      	adds	r3, #4
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f000 fb4c 	bl	800fc88 <etharp_request>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d138      	bne.n	800f668 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f5f6:	79fa      	ldrb	r2, [r7, #7]
 800f5f8:	4928      	ldr	r1, [pc, #160]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	4413      	add	r3, r2
 800f600:	00db      	lsls	r3, r3, #3
 800f602:	440b      	add	r3, r1
 800f604:	3314      	adds	r3, #20
 800f606:	2203      	movs	r2, #3
 800f608:	701a      	strb	r2, [r3, #0]
 800f60a:	e02d      	b.n	800f668 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f60c:	79fa      	ldrb	r2, [r7, #7]
 800f60e:	4923      	ldr	r1, [pc, #140]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f610:	4613      	mov	r3, r2
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	4413      	add	r3, r2
 800f616:	00db      	lsls	r3, r3, #3
 800f618:	440b      	add	r3, r1
 800f61a:	3312      	adds	r3, #18
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f622:	d321      	bcc.n	800f668 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f624:	79fa      	ldrb	r2, [r7, #7]
 800f626:	4613      	mov	r3, r2
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	4413      	add	r3, r2
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	4a1b      	ldr	r2, [pc, #108]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f630:	4413      	add	r3, r2
 800f632:	1d19      	adds	r1, r3, #4
 800f634:	79fa      	ldrb	r2, [r7, #7]
 800f636:	4613      	mov	r3, r2
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	4413      	add	r3, r2
 800f63c:	00db      	lsls	r3, r3, #3
 800f63e:	3308      	adds	r3, #8
 800f640:	4a16      	ldr	r2, [pc, #88]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f642:	4413      	add	r3, r2
 800f644:	3304      	adds	r3, #4
 800f646:	461a      	mov	r2, r3
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f000 fafb 	bl	800fc44 <etharp_request_dst>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d109      	bne.n	800f668 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f654:	79fa      	ldrb	r2, [r7, #7]
 800f656:	4911      	ldr	r1, [pc, #68]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f658:	4613      	mov	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	4413      	add	r3, r2
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	440b      	add	r3, r1
 800f662:	3314      	adds	r3, #20
 800f664:	2203      	movs	r2, #3
 800f666:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f66e:	79fa      	ldrb	r2, [r7, #7]
 800f670:	4613      	mov	r3, r2
 800f672:	005b      	lsls	r3, r3, #1
 800f674:	4413      	add	r3, r2
 800f676:	00db      	lsls	r3, r3, #3
 800f678:	3308      	adds	r3, #8
 800f67a:	4a08      	ldr	r2, [pc, #32]	@ (800f69c <etharp_output_to_arp_index+0x124>)
 800f67c:	4413      	add	r3, r2
 800f67e:	3304      	adds	r3, #4
 800f680:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f684:	9200      	str	r2, [sp, #0]
 800f686:	460a      	mov	r2, r1
 800f688:	68b9      	ldr	r1, [r7, #8]
 800f68a:	68f8      	ldr	r0, [r7, #12]
 800f68c:	f001 fed2 	bl	8011434 <ethernet_output>
 800f690:	4603      	mov	r3, r0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	20008010 	.word	0x20008010
 800f6a0:	08015518 	.word	0x08015518
 800f6a4:	08015688 	.word	0x08015688
 800f6a8:	08015590 	.word	0x08015590

0800f6ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08a      	sub	sp, #40	@ 0x28
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d106      	bne.n	800f6d0 <etharp_output+0x24>
 800f6c2:	4b73      	ldr	r3, [pc, #460]	@ (800f890 <etharp_output+0x1e4>)
 800f6c4:	f240 321e 	movw	r2, #798	@ 0x31e
 800f6c8:	4972      	ldr	r1, [pc, #456]	@ (800f894 <etharp_output+0x1e8>)
 800f6ca:	4873      	ldr	r0, [pc, #460]	@ (800f898 <etharp_output+0x1ec>)
 800f6cc:	f002 fa1e 	bl	8011b0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d106      	bne.n	800f6e4 <etharp_output+0x38>
 800f6d6:	4b6e      	ldr	r3, [pc, #440]	@ (800f890 <etharp_output+0x1e4>)
 800f6d8:	f240 321f 	movw	r2, #799	@ 0x31f
 800f6dc:	496f      	ldr	r1, [pc, #444]	@ (800f89c <etharp_output+0x1f0>)
 800f6de:	486e      	ldr	r0, [pc, #440]	@ (800f898 <etharp_output+0x1ec>)
 800f6e0:	f002 fa14 	bl	8011b0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <etharp_output+0x4c>
 800f6ea:	4b69      	ldr	r3, [pc, #420]	@ (800f890 <etharp_output+0x1e4>)
 800f6ec:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f6f0:	496b      	ldr	r1, [pc, #428]	@ (800f8a0 <etharp_output+0x1f4>)
 800f6f2:	4869      	ldr	r0, [pc, #420]	@ (800f898 <etharp_output+0x1ec>)
 800f6f4:	f002 fa0a 	bl	8011b0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	68f9      	ldr	r1, [r7, #12]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 ff8a 	bl	8010618 <ip4_addr_isbroadcast_u32>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d002      	beq.n	800f710 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f70a:	4b66      	ldr	r3, [pc, #408]	@ (800f8a4 <etharp_output+0x1f8>)
 800f70c:	61fb      	str	r3, [r7, #28]
 800f70e:	e0af      	b.n	800f870 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f718:	2be0      	cmp	r3, #224	@ 0xe0
 800f71a:	d118      	bne.n	800f74e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f71c:	2301      	movs	r3, #1
 800f71e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f720:	2300      	movs	r3, #0
 800f722:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f724:	235e      	movs	r3, #94	@ 0x5e
 800f726:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	3301      	adds	r3, #1
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f732:	b2db      	uxtb	r3, r3
 800f734:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	3302      	adds	r3, #2
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	3303      	adds	r3, #3
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f746:	f107 0310 	add.w	r3, r7, #16
 800f74a:	61fb      	str	r3, [r7, #28]
 800f74c:	e090      	b.n	800f870 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3304      	adds	r3, #4
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	405a      	eors	r2, r3
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	3308      	adds	r3, #8
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4013      	ands	r3, r2
 800f762:	2b00      	cmp	r3, #0
 800f764:	d012      	beq.n	800f78c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f76c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f770:	4293      	cmp	r3, r2
 800f772:	d00b      	beq.n	800f78c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	330c      	adds	r3, #12
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d003      	beq.n	800f786 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	330c      	adds	r3, #12
 800f782:	61bb      	str	r3, [r7, #24]
 800f784:	e002      	b.n	800f78c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f786:	f06f 0303 	mvn.w	r3, #3
 800f78a:	e07d      	b.n	800f888 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f78c:	4b46      	ldr	r3, [pc, #280]	@ (800f8a8 <etharp_output+0x1fc>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	4619      	mov	r1, r3
 800f792:	4a46      	ldr	r2, [pc, #280]	@ (800f8ac <etharp_output+0x200>)
 800f794:	460b      	mov	r3, r1
 800f796:	005b      	lsls	r3, r3, #1
 800f798:	440b      	add	r3, r1
 800f79a:	00db      	lsls	r3, r3, #3
 800f79c:	4413      	add	r3, r2
 800f79e:	3314      	adds	r3, #20
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d925      	bls.n	800f7f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f7a6:	4b40      	ldr	r3, [pc, #256]	@ (800f8a8 <etharp_output+0x1fc>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	4a3f      	ldr	r2, [pc, #252]	@ (800f8ac <etharp_output+0x200>)
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	005b      	lsls	r3, r3, #1
 800f7b2:	440b      	add	r3, r1
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	4413      	add	r3, r2
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d117      	bne.n	800f7f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	4b38      	ldr	r3, [pc, #224]	@ (800f8a8 <etharp_output+0x1fc>)
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	4937      	ldr	r1, [pc, #220]	@ (800f8ac <etharp_output+0x200>)
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	005b      	lsls	r3, r3, #1
 800f7d2:	4403      	add	r3, r0
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	440b      	add	r3, r1
 800f7d8:	3304      	adds	r3, #4
 800f7da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d108      	bne.n	800f7f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f7e0:	4b31      	ldr	r3, [pc, #196]	@ (800f8a8 <etharp_output+0x1fc>)
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	68b9      	ldr	r1, [r7, #8]
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f7ff fec5 	bl	800f578 <etharp_output_to_arp_index>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	e04a      	b.n	800f888 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	75fb      	strb	r3, [r7, #23]
 800f7f6:	e031      	b.n	800f85c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f7f8:	7dfa      	ldrb	r2, [r7, #23]
 800f7fa:	492c      	ldr	r1, [pc, #176]	@ (800f8ac <etharp_output+0x200>)
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	005b      	lsls	r3, r3, #1
 800f800:	4413      	add	r3, r2
 800f802:	00db      	lsls	r3, r3, #3
 800f804:	440b      	add	r3, r1
 800f806:	3314      	adds	r3, #20
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d923      	bls.n	800f856 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f80e:	7dfa      	ldrb	r2, [r7, #23]
 800f810:	4926      	ldr	r1, [pc, #152]	@ (800f8ac <etharp_output+0x200>)
 800f812:	4613      	mov	r3, r2
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	4413      	add	r3, r2
 800f818:	00db      	lsls	r3, r3, #3
 800f81a:	440b      	add	r3, r1
 800f81c:	3308      	adds	r3, #8
 800f81e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	429a      	cmp	r2, r3
 800f824:	d117      	bne.n	800f856 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	6819      	ldr	r1, [r3, #0]
 800f82a:	7dfa      	ldrb	r2, [r7, #23]
 800f82c:	481f      	ldr	r0, [pc, #124]	@ (800f8ac <etharp_output+0x200>)
 800f82e:	4613      	mov	r3, r2
 800f830:	005b      	lsls	r3, r3, #1
 800f832:	4413      	add	r3, r2
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	4403      	add	r3, r0
 800f838:	3304      	adds	r3, #4
 800f83a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d10a      	bne.n	800f856 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f840:	4a19      	ldr	r2, [pc, #100]	@ (800f8a8 <etharp_output+0x1fc>)
 800f842:	7dfb      	ldrb	r3, [r7, #23]
 800f844:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f846:	7dfb      	ldrb	r3, [r7, #23]
 800f848:	461a      	mov	r2, r3
 800f84a:	68b9      	ldr	r1, [r7, #8]
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f7ff fe93 	bl	800f578 <etharp_output_to_arp_index>
 800f852:	4603      	mov	r3, r0
 800f854:	e018      	b.n	800f888 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f856:	7dfb      	ldrb	r3, [r7, #23]
 800f858:	3301      	adds	r3, #1
 800f85a:	75fb      	strb	r3, [r7, #23]
 800f85c:	7dfb      	ldrb	r3, [r7, #23]
 800f85e:	2b09      	cmp	r3, #9
 800f860:	d9ca      	bls.n	800f7f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	69b9      	ldr	r1, [r7, #24]
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f000 f822 	bl	800f8b0 <etharp_query>
 800f86c:	4603      	mov	r3, r0
 800f86e:	e00b      	b.n	800f888 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f876:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f001 fdd7 	bl	8011434 <ethernet_output>
 800f886:	4603      	mov	r3, r0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3720      	adds	r7, #32
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	08015518 	.word	0x08015518
 800f894:	08015668 	.word	0x08015668
 800f898:	08015590 	.word	0x08015590
 800f89c:	080156b8 	.word	0x080156b8
 800f8a0:	08015658 	.word	0x08015658
 800f8a4:	08016068 	.word	0x08016068
 800f8a8:	20008100 	.word	0x20008100
 800f8ac:	20008010 	.word	0x20008010

0800f8b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b08c      	sub	sp, #48	@ 0x30
 800f8b4:	af02      	add	r7, sp, #8
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	3326      	adds	r3, #38	@ 0x26
 800f8c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f8c2:	23ff      	movs	r3, #255	@ 0xff
 800f8c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	68f9      	ldr	r1, [r7, #12]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 fea0 	bl	8010618 <ip4_addr_isbroadcast_u32>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10c      	bne.n	800f8f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f8e6:	2be0      	cmp	r3, #224	@ 0xe0
 800f8e8:	d006      	beq.n	800f8f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d003      	beq.n	800f8f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d102      	bne.n	800f8fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f8f8:	f06f 030f 	mvn.w	r3, #15
 800f8fc:	e101      	b.n	800fb02 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	2101      	movs	r1, #1
 800f902:	68b8      	ldr	r0, [r7, #8]
 800f904:	f7ff fb60 	bl	800efc8 <etharp_find_entry>
 800f908:	4603      	mov	r3, r0
 800f90a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f90c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f910:	2b00      	cmp	r3, #0
 800f912:	da02      	bge.n	800f91a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f914:	8a7b      	ldrh	r3, [r7, #18]
 800f916:	b25b      	sxtb	r3, r3
 800f918:	e0f3      	b.n	800fb02 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f91a:	8a7b      	ldrh	r3, [r7, #18]
 800f91c:	2b7e      	cmp	r3, #126	@ 0x7e
 800f91e:	d906      	bls.n	800f92e <etharp_query+0x7e>
 800f920:	4b7a      	ldr	r3, [pc, #488]	@ (800fb0c <etharp_query+0x25c>)
 800f922:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800f926:	497a      	ldr	r1, [pc, #488]	@ (800fb10 <etharp_query+0x260>)
 800f928:	487a      	ldr	r0, [pc, #488]	@ (800fb14 <etharp_query+0x264>)
 800f92a:	f002 f8ef 	bl	8011b0c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f92e:	8a7b      	ldrh	r3, [r7, #18]
 800f930:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f932:	7c7a      	ldrb	r2, [r7, #17]
 800f934:	4978      	ldr	r1, [pc, #480]	@ (800fb18 <etharp_query+0x268>)
 800f936:	4613      	mov	r3, r2
 800f938:	005b      	lsls	r3, r3, #1
 800f93a:	4413      	add	r3, r2
 800f93c:	00db      	lsls	r3, r3, #3
 800f93e:	440b      	add	r3, r1
 800f940:	3314      	adds	r3, #20
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d115      	bne.n	800f974 <etharp_query+0xc4>
    is_new_entry = 1;
 800f948:	2301      	movs	r3, #1
 800f94a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f94c:	7c7a      	ldrb	r2, [r7, #17]
 800f94e:	4972      	ldr	r1, [pc, #456]	@ (800fb18 <etharp_query+0x268>)
 800f950:	4613      	mov	r3, r2
 800f952:	005b      	lsls	r3, r3, #1
 800f954:	4413      	add	r3, r2
 800f956:	00db      	lsls	r3, r3, #3
 800f958:	440b      	add	r3, r1
 800f95a:	3314      	adds	r3, #20
 800f95c:	2201      	movs	r2, #1
 800f95e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f960:	7c7a      	ldrb	r2, [r7, #17]
 800f962:	496d      	ldr	r1, [pc, #436]	@ (800fb18 <etharp_query+0x268>)
 800f964:	4613      	mov	r3, r2
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	4413      	add	r3, r2
 800f96a:	00db      	lsls	r3, r3, #3
 800f96c:	440b      	add	r3, r1
 800f96e:	3308      	adds	r3, #8
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f974:	7c7a      	ldrb	r2, [r7, #17]
 800f976:	4968      	ldr	r1, [pc, #416]	@ (800fb18 <etharp_query+0x268>)
 800f978:	4613      	mov	r3, r2
 800f97a:	005b      	lsls	r3, r3, #1
 800f97c:	4413      	add	r3, r2
 800f97e:	00db      	lsls	r3, r3, #3
 800f980:	440b      	add	r3, r1
 800f982:	3314      	adds	r3, #20
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d011      	beq.n	800f9ae <etharp_query+0xfe>
 800f98a:	7c7a      	ldrb	r2, [r7, #17]
 800f98c:	4962      	ldr	r1, [pc, #392]	@ (800fb18 <etharp_query+0x268>)
 800f98e:	4613      	mov	r3, r2
 800f990:	005b      	lsls	r3, r3, #1
 800f992:	4413      	add	r3, r2
 800f994:	00db      	lsls	r3, r3, #3
 800f996:	440b      	add	r3, r1
 800f998:	3314      	adds	r3, #20
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d806      	bhi.n	800f9ae <etharp_query+0xfe>
 800f9a0:	4b5a      	ldr	r3, [pc, #360]	@ (800fb0c <etharp_query+0x25c>)
 800f9a2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800f9a6:	495d      	ldr	r1, [pc, #372]	@ (800fb1c <etharp_query+0x26c>)
 800f9a8:	485a      	ldr	r0, [pc, #360]	@ (800fb14 <etharp_query+0x264>)
 800f9aa:	f002 f8af 	bl	8011b0c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d102      	bne.n	800f9ba <etharp_query+0x10a>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10c      	bne.n	800f9d4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f9ba:	68b9      	ldr	r1, [r7, #8]
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f000 f963 	bl	800fc88 <etharp_request>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <etharp_query+0x124>
      return result;
 800f9ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f9d2:	e096      	b.n	800fb02 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d106      	bne.n	800f9e8 <etharp_query+0x138>
 800f9da:	4b4c      	ldr	r3, [pc, #304]	@ (800fb0c <etharp_query+0x25c>)
 800f9dc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800f9e0:	494f      	ldr	r1, [pc, #316]	@ (800fb20 <etharp_query+0x270>)
 800f9e2:	484c      	ldr	r0, [pc, #304]	@ (800fb14 <etharp_query+0x264>)
 800f9e4:	f002 f892 	bl	8011b0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f9e8:	7c7a      	ldrb	r2, [r7, #17]
 800f9ea:	494b      	ldr	r1, [pc, #300]	@ (800fb18 <etharp_query+0x268>)
 800f9ec:	4613      	mov	r3, r2
 800f9ee:	005b      	lsls	r3, r3, #1
 800f9f0:	4413      	add	r3, r2
 800f9f2:	00db      	lsls	r3, r3, #3
 800f9f4:	440b      	add	r3, r1
 800f9f6:	3314      	adds	r3, #20
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	d917      	bls.n	800fa2e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f9fe:	4a49      	ldr	r2, [pc, #292]	@ (800fb24 <etharp_query+0x274>)
 800fa00:	7c7b      	ldrb	r3, [r7, #17]
 800fa02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fa04:	7c7a      	ldrb	r2, [r7, #17]
 800fa06:	4613      	mov	r3, r2
 800fa08:	005b      	lsls	r3, r3, #1
 800fa0a:	4413      	add	r3, r2
 800fa0c:	00db      	lsls	r3, r3, #3
 800fa0e:	3308      	adds	r3, #8
 800fa10:	4a41      	ldr	r2, [pc, #260]	@ (800fb18 <etharp_query+0x268>)
 800fa12:	4413      	add	r3, r2
 800fa14:	3304      	adds	r3, #4
 800fa16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fa1a:	9200      	str	r2, [sp, #0]
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	6879      	ldr	r1, [r7, #4]
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f001 fd07 	bl	8011434 <ethernet_output>
 800fa26:	4603      	mov	r3, r0
 800fa28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fa2c:	e067      	b.n	800fafe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fa2e:	7c7a      	ldrb	r2, [r7, #17]
 800fa30:	4939      	ldr	r1, [pc, #228]	@ (800fb18 <etharp_query+0x268>)
 800fa32:	4613      	mov	r3, r2
 800fa34:	005b      	lsls	r3, r3, #1
 800fa36:	4413      	add	r3, r2
 800fa38:	00db      	lsls	r3, r3, #3
 800fa3a:	440b      	add	r3, r1
 800fa3c:	3314      	adds	r3, #20
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d15c      	bne.n	800fafe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fa4c:	e01c      	b.n	800fa88 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	895a      	ldrh	r2, [r3, #10]
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	891b      	ldrh	r3, [r3, #8]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d10a      	bne.n	800fa70 <etharp_query+0x1c0>
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d006      	beq.n	800fa70 <etharp_query+0x1c0>
 800fa62:	4b2a      	ldr	r3, [pc, #168]	@ (800fb0c <etharp_query+0x25c>)
 800fa64:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800fa68:	492f      	ldr	r1, [pc, #188]	@ (800fb28 <etharp_query+0x278>)
 800fa6a:	482a      	ldr	r0, [pc, #168]	@ (800fb14 <etharp_query+0x264>)
 800fa6c:	f002 f84e 	bl	8011b0c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	7b1b      	ldrb	r3, [r3, #12]
 800fa74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <etharp_query+0x1d2>
        copy_needed = 1;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	61bb      	str	r3, [r7, #24]
        break;
 800fa80:	e005      	b.n	800fa8e <etharp_query+0x1de>
      }
      p = p->next;
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1df      	bne.n	800fa4e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d007      	beq.n	800faa4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800fa9a:	200e      	movs	r0, #14
 800fa9c:	f7f9 f824 	bl	8008ae8 <pbuf_clone>
 800faa0:	61f8      	str	r0, [r7, #28]
 800faa2:	e004      	b.n	800faae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800faa8:	69f8      	ldr	r0, [r7, #28]
 800faaa:	f7f8 fe51 	bl	8008750 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d021      	beq.n	800faf8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fab4:	7c7a      	ldrb	r2, [r7, #17]
 800fab6:	4918      	ldr	r1, [pc, #96]	@ (800fb18 <etharp_query+0x268>)
 800fab8:	4613      	mov	r3, r2
 800faba:	005b      	lsls	r3, r3, #1
 800fabc:	4413      	add	r3, r2
 800fabe:	00db      	lsls	r3, r3, #3
 800fac0:	440b      	add	r3, r1
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00a      	beq.n	800fade <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fac8:	7c7a      	ldrb	r2, [r7, #17]
 800faca:	4913      	ldr	r1, [pc, #76]	@ (800fb18 <etharp_query+0x268>)
 800facc:	4613      	mov	r3, r2
 800face:	005b      	lsls	r3, r3, #1
 800fad0:	4413      	add	r3, r2
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	440b      	add	r3, r1
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f8 fd99 	bl	8008610 <pbuf_free>
      }
      arp_table[i].q = p;
 800fade:	7c7a      	ldrb	r2, [r7, #17]
 800fae0:	490d      	ldr	r1, [pc, #52]	@ (800fb18 <etharp_query+0x268>)
 800fae2:	4613      	mov	r3, r2
 800fae4:	005b      	lsls	r3, r3, #1
 800fae6:	4413      	add	r3, r2
 800fae8:	00db      	lsls	r3, r3, #3
 800faea:	440b      	add	r3, r1
 800faec:	69fa      	ldr	r2, [r7, #28]
 800faee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800faf0:	2300      	movs	r3, #0
 800faf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800faf6:	e002      	b.n	800fafe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800faf8:	23ff      	movs	r3, #255	@ 0xff
 800fafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800fafe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3728      	adds	r7, #40	@ 0x28
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	08015518 	.word	0x08015518
 800fb10:	080156c4 	.word	0x080156c4
 800fb14:	08015590 	.word	0x08015590
 800fb18:	20008010 	.word	0x20008010
 800fb1c:	080156d4 	.word	0x080156d4
 800fb20:	080156b8 	.word	0x080156b8
 800fb24:	20008100 	.word	0x20008100
 800fb28:	080156fc 	.word	0x080156fc

0800fb2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b08a      	sub	sp, #40	@ 0x28
 800fb30:	af02      	add	r7, sp, #8
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d106      	bne.n	800fb52 <etharp_raw+0x26>
 800fb44:	4b3a      	ldr	r3, [pc, #232]	@ (800fc30 <etharp_raw+0x104>)
 800fb46:	f240 4257 	movw	r2, #1111	@ 0x457
 800fb4a:	493a      	ldr	r1, [pc, #232]	@ (800fc34 <etharp_raw+0x108>)
 800fb4c:	483a      	ldr	r0, [pc, #232]	@ (800fc38 <etharp_raw+0x10c>)
 800fb4e:	f001 ffdd 	bl	8011b0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fb52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fb56:	211c      	movs	r1, #28
 800fb58:	200e      	movs	r0, #14
 800fb5a:	f7f8 fa75 	bl	8008048 <pbuf_alloc>
 800fb5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fb60:	69bb      	ldr	r3, [r7, #24]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d102      	bne.n	800fb6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fb66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb6a:	e05d      	b.n	800fc28 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	895b      	ldrh	r3, [r3, #10]
 800fb70:	2b1b      	cmp	r3, #27
 800fb72:	d806      	bhi.n	800fb82 <etharp_raw+0x56>
 800fb74:	4b2e      	ldr	r3, [pc, #184]	@ (800fc30 <etharp_raw+0x104>)
 800fb76:	f240 4262 	movw	r2, #1122	@ 0x462
 800fb7a:	4930      	ldr	r1, [pc, #192]	@ (800fc3c <etharp_raw+0x110>)
 800fb7c:	482e      	ldr	r0, [pc, #184]	@ (800fc38 <etharp_raw+0x10c>)
 800fb7e:	f001 ffc5 	bl	8011b0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fb88:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7f7 f8f0 	bl	8006d70 <lwip_htons>
 800fb90:	4603      	mov	r3, r0
 800fb92:	461a      	mov	r2, r3
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fb9e:	2b06      	cmp	r3, #6
 800fba0:	d006      	beq.n	800fbb0 <etharp_raw+0x84>
 800fba2:	4b23      	ldr	r3, [pc, #140]	@ (800fc30 <etharp_raw+0x104>)
 800fba4:	f240 4269 	movw	r2, #1129	@ 0x469
 800fba8:	4925      	ldr	r1, [pc, #148]	@ (800fc40 <etharp_raw+0x114>)
 800fbaa:	4823      	ldr	r0, [pc, #140]	@ (800fc38 <etharp_raw+0x10c>)
 800fbac:	f001 ffae 	bl	8011b0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	3308      	adds	r3, #8
 800fbb4:	2206      	movs	r2, #6
 800fbb6:	6839      	ldr	r1, [r7, #0]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f002 f97c 	bl	8011eb6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	3312      	adds	r3, #18
 800fbc2:	2206      	movs	r2, #6
 800fbc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f002 f975 	bl	8011eb6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	330e      	adds	r3, #14
 800fbd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbd2:	6812      	ldr	r2, [r2, #0]
 800fbd4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	3318      	adds	r3, #24
 800fbda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbdc:	6812      	ldr	r2, [r2, #0]
 800fbde:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	701a      	strb	r2, [r3, #0]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f042 0201 	orr.w	r2, r2, #1
 800fbec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f042 0208 	orr.w	r2, r2, #8
 800fbf6:	709a      	strb	r2, [r3, #2]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	2206      	movs	r2, #6
 800fc00:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2204      	movs	r2, #4
 800fc06:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fc08:	f640 0306 	movw	r3, #2054	@ 0x806
 800fc0c:	9300      	str	r3, [sp, #0]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	68ba      	ldr	r2, [r7, #8]
 800fc12:	69b9      	ldr	r1, [r7, #24]
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f001 fc0d 	bl	8011434 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fc1a:	69b8      	ldr	r0, [r7, #24]
 800fc1c:	f7f8 fcf8 	bl	8008610 <pbuf_free>
  p = NULL;
 800fc20:	2300      	movs	r3, #0
 800fc22:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fc24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3720      	adds	r7, #32
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	08015518 	.word	0x08015518
 800fc34:	08015668 	.word	0x08015668
 800fc38:	08015590 	.word	0x08015590
 800fc3c:	08015718 	.word	0x08015718
 800fc40:	0801574c 	.word	0x0801574c

0800fc44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b088      	sub	sp, #32
 800fc48:	af04      	add	r7, sp, #16
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc60:	2201      	movs	r2, #1
 800fc62:	9203      	str	r2, [sp, #12]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	9202      	str	r2, [sp, #8]
 800fc68:	4a06      	ldr	r2, [pc, #24]	@ (800fc84 <etharp_request_dst+0x40>)
 800fc6a:	9201      	str	r2, [sp, #4]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	4603      	mov	r3, r0
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f7ff ff5a 	bl	800fb2c <etharp_raw>
 800fc78:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	08016070 	.word	0x08016070

0800fc88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fc92:	4a05      	ldr	r2, [pc, #20]	@ (800fca8 <etharp_request+0x20>)
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff ffd4 	bl	800fc44 <etharp_request_dst>
 800fc9c:	4603      	mov	r3, r0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	08016068 	.word	0x08016068

0800fcac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b08e      	sub	sp, #56	@ 0x38
 800fcb0:	af04      	add	r7, sp, #16
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fcb6:	4b95      	ldr	r3, [pc, #596]	@ (800ff0c <icmp_input+0x260>)
 800fcb8:	689b      	ldr	r3, [r3, #8]
 800fcba:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	f003 030f 	and.w	r3, r3, #15
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800fccc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fcce:	2b13      	cmp	r3, #19
 800fcd0:	d805      	bhi.n	800fcde <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 800fcd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	488e      	ldr	r0, [pc, #568]	@ (800ff10 <icmp_input+0x264>)
 800fcd8:	f001 ff18 	bl	8011b0c <iprintf>
    goto lenerr;
 800fcdc:	e10a      	b.n	800fef4 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	895b      	ldrh	r3, [r3, #10]
 800fce2:	2b03      	cmp	r3, #3
 800fce4:	d806      	bhi.n	800fcf4 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	891b      	ldrh	r3, [r3, #8]
 800fcea:	4619      	mov	r1, r3
 800fcec:	4889      	ldr	r0, [pc, #548]	@ (800ff14 <icmp_input+0x268>)
 800fcee:	f001 ff0d 	bl	8011b0c <iprintf>
    goto lenerr;
 800fcf2:	e0ff      	b.n	800fef4 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	785b      	ldrb	r3, [r3, #1]
 800fd04:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fd08:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f000 80ea 	beq.w	800fee6 <icmp_input+0x23a>
 800fd12:	2b08      	cmp	r3, #8
 800fd14:	f040 80de 	bne.w	800fed4 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fd18:	4b7f      	ldr	r3, [pc, #508]	@ (800ff18 <icmp_input+0x26c>)
 800fd1a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd1c:	4b7b      	ldr	r3, [pc, #492]	@ (800ff0c <icmp_input+0x260>)
 800fd1e:	695b      	ldr	r3, [r3, #20]
 800fd20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fd24:	2be0      	cmp	r3, #224	@ 0xe0
 800fd26:	d103      	bne.n	800fd30 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 800fd28:	487c      	ldr	r0, [pc, #496]	@ (800ff1c <icmp_input+0x270>)
 800fd2a:	f001 ff5f 	bl	8011bec <puts>
        goto icmperr;
 800fd2e:	e0e5      	b.n	800fefc <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fd30:	4b76      	ldr	r3, [pc, #472]	@ (800ff0c <icmp_input+0x260>)
 800fd32:	695b      	ldr	r3, [r3, #20]
 800fd34:	4a75      	ldr	r2, [pc, #468]	@ (800ff0c <icmp_input+0x260>)
 800fd36:	6812      	ldr	r2, [r2, #0]
 800fd38:	4611      	mov	r1, r2
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f000 fc6c 	bl	8010618 <ip4_addr_isbroadcast_u32>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 800fd46:	4876      	ldr	r0, [pc, #472]	@ (800ff20 <icmp_input+0x274>)
 800fd48:	f001 ff50 	bl	8011bec <puts>
        goto icmperr;
 800fd4c:	e0d6      	b.n	800fefc <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 800fd4e:	4875      	ldr	r0, [pc, #468]	@ (800ff24 <icmp_input+0x278>)
 800fd50:	f001 ff4c 	bl	8011bec <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	891b      	ldrh	r3, [r3, #8]
 800fd58:	2b07      	cmp	r3, #7
 800fd5a:	d803      	bhi.n	800fd64 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 800fd5c:	4872      	ldr	r0, [pc, #456]	@ (800ff28 <icmp_input+0x27c>)
 800fd5e:	f001 ff45 	bl	8011bec <puts>
        goto lenerr;
 800fd62:	e0c7      	b.n	800fef4 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fd64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fd66:	330e      	adds	r3, #14
 800fd68:	4619      	mov	r1, r3
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f7f8 fbba 	bl	80084e4 <pbuf_add_header>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d057      	beq.n	800fe26 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	891a      	ldrh	r2, [r3, #8]
 800fd7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fd7c:	4413      	add	r3, r2
 800fd7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	891b      	ldrh	r3, [r3, #8]
 800fd84:	8b7a      	ldrh	r2, [r7, #26]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d203      	bcs.n	800fd92 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 800fd8a:	4868      	ldr	r0, [pc, #416]	@ (800ff2c <icmp_input+0x280>)
 800fd8c:	f001 ff2e 	bl	8011bec <puts>
          goto icmperr;
 800fd90:	e0b4      	b.n	800fefc <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fd92:	8b7b      	ldrh	r3, [r7, #26]
 800fd94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd98:	4619      	mov	r1, r3
 800fd9a:	200e      	movs	r0, #14
 800fd9c:	f7f8 f954 	bl	8008048 <pbuf_alloc>
 800fda0:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d103      	bne.n	800fdb0 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 800fda8:	4861      	ldr	r0, [pc, #388]	@ (800ff30 <icmp_input+0x284>)
 800fdaa:	f001 ff1f 	bl	8011bec <puts>
          goto icmperr;
 800fdae:	e0a5      	b.n	800fefc <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	895b      	ldrh	r3, [r3, #10]
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fdb8:	3308      	adds	r3, #8
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d206      	bcs.n	800fdcc <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 800fdbe:	485d      	ldr	r0, [pc, #372]	@ (800ff34 <icmp_input+0x288>)
 800fdc0:	f001 fea4 	bl	8011b0c <iprintf>
          pbuf_free(r);
 800fdc4:	6978      	ldr	r0, [r7, #20]
 800fdc6:	f7f8 fc23 	bl	8008610 <pbuf_free>
          goto icmperr;
 800fdca:	e097      	b.n	800fefc <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fdd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f002 f86e 	bl	8011eb6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fdda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fddc:	4619      	mov	r1, r3
 800fdde:	6978      	ldr	r0, [r7, #20]
 800fde0:	f7f8 fb90 	bl	8008504 <pbuf_remove_header>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d009      	beq.n	800fdfe <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fdea:	4b53      	ldr	r3, [pc, #332]	@ (800ff38 <icmp_input+0x28c>)
 800fdec:	22b6      	movs	r2, #182	@ 0xb6
 800fdee:	4953      	ldr	r1, [pc, #332]	@ (800ff3c <icmp_input+0x290>)
 800fdf0:	4853      	ldr	r0, [pc, #332]	@ (800ff40 <icmp_input+0x294>)
 800fdf2:	f001 fe8b 	bl	8011b0c <iprintf>
          pbuf_free(r);
 800fdf6:	6978      	ldr	r0, [r7, #20]
 800fdf8:	f7f8 fc0a 	bl	8008610 <pbuf_free>
          goto icmperr;
 800fdfc:	e07e      	b.n	800fefc <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	6978      	ldr	r0, [r7, #20]
 800fe02:	f7f8 fd2d 	bl	8008860 <pbuf_copy>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d006      	beq.n	800fe1a <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 800fe0c:	484d      	ldr	r0, [pc, #308]	@ (800ff44 <icmp_input+0x298>)
 800fe0e:	f001 fe7d 	bl	8011b0c <iprintf>
          pbuf_free(r);
 800fe12:	6978      	ldr	r0, [r7, #20]
 800fe14:	f7f8 fbfc 	bl	8008610 <pbuf_free>
          goto icmperr;
 800fe18:	e070      	b.n	800fefc <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7f8 fbf8 	bl	8008610 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	607b      	str	r3, [r7, #4]
 800fe24:	e00f      	b.n	800fe46 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fe26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe28:	330e      	adds	r3, #14
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7f8 fb69 	bl	8008504 <pbuf_remove_header>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d006      	beq.n	800fe46 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fe38:	4b3f      	ldr	r3, [pc, #252]	@ (800ff38 <icmp_input+0x28c>)
 800fe3a:	22c7      	movs	r2, #199	@ 0xc7
 800fe3c:	4942      	ldr	r1, [pc, #264]	@ (800ff48 <icmp_input+0x29c>)
 800fe3e:	4840      	ldr	r0, [pc, #256]	@ (800ff40 <icmp_input+0x294>)
 800fe40:	f001 fe64 	bl	8011b0c <iprintf>
          goto icmperr;
 800fe44:	e05a      	b.n	800fefc <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fe4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe4e:	4619      	mov	r1, r3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7f8 fb47 	bl	80084e4 <pbuf_add_header>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 800fe5c:	483b      	ldr	r0, [pc, #236]	@ (800ff4c <icmp_input+0x2a0>)
 800fe5e:	f001 fe55 	bl	8011b0c <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fe62:	e042      	b.n	800feea <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fe72:	4b26      	ldr	r3, [pc, #152]	@ (800ff0c <icmp_input+0x260>)
 800fe74:	691a      	ldr	r2, [r3, #16]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	2200      	movs	r2, #0
 800fe84:	709a      	strb	r2, [r3, #2]
 800fe86:	2200      	movs	r2, #0
 800fe88:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	22ff      	movs	r2, #255	@ 0xff
 800fe8e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2200      	movs	r2, #0
 800fe94:	729a      	strb	r2, [r3, #10]
 800fe96:	2200      	movs	r2, #0
 800fe98:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	9302      	str	r3, [sp, #8]
 800fe9e:	2301      	movs	r3, #1
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	2300      	movs	r3, #0
 800fea4:	9300      	str	r3, [sp, #0]
 800fea6:	23ff      	movs	r3, #255	@ 0xff
 800fea8:	2200      	movs	r2, #0
 800feaa:	69f9      	ldr	r1, [r7, #28]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 fadb 	bl	8010468 <ip4_output_if>
 800feb2:	4603      	mov	r3, r0
 800feb4:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 800feb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d015      	beq.n	800feea <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 800febe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7f6 ff34 	bl	8006d30 <lwip_strerr>
 800fec8:	4603      	mov	r3, r0
 800feca:	4619      	mov	r1, r3
 800fecc:	4820      	ldr	r0, [pc, #128]	@ (800ff50 <icmp_input+0x2a4>)
 800fece:	f001 fe1d 	bl	8011b0c <iprintf>
      break;
 800fed2:	e00a      	b.n	800feea <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 800fed4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fed8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fedc:	4619      	mov	r1, r3
 800fede:	481d      	ldr	r0, [pc, #116]	@ (800ff54 <icmp_input+0x2a8>)
 800fee0:	f001 fe14 	bl	8011b0c <iprintf>
 800fee4:	e002      	b.n	800feec <icmp_input+0x240>
      break;
 800fee6:	bf00      	nop
 800fee8:	e000      	b.n	800feec <icmp_input+0x240>
      break;
 800feea:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7f8 fb8f 	bl	8008610 <pbuf_free>
  return;
 800fef2:	e007      	b.n	800ff04 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7f8 fb8b 	bl	8008610 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fefa:	e003      	b.n	800ff04 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7f8 fb87 	bl	8008610 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ff02:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ff04:	3728      	adds	r7, #40	@ 0x28
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	20005050 	.word	0x20005050
 800ff10:	08015790 	.word	0x08015790
 800ff14:	080157c4 	.word	0x080157c4
 800ff18:	20005064 	.word	0x20005064
 800ff1c:	080157f4 	.word	0x080157f4
 800ff20:	08015820 	.word	0x08015820
 800ff24:	0801584c 	.word	0x0801584c
 800ff28:	08015860 	.word	0x08015860
 800ff2c:	08015884 	.word	0x08015884
 800ff30:	080158c0 	.word	0x080158c0
 800ff34:	080158e8 	.word	0x080158e8
 800ff38:	08015910 	.word	0x08015910
 800ff3c:	08015948 	.word	0x08015948
 800ff40:	08015980 	.word	0x08015980
 800ff44:	080159a8 	.word	0x080159a8
 800ff48:	080159d0 	.word	0x080159d0
 800ff4c:	08015a04 	.word	0x08015a04
 800ff50:	08015a28 	.word	0x08015a28
 800ff54:	08015a58 	.word	0x08015a58

0800ff58 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ff64:	78fb      	ldrb	r3, [r7, #3]
 800ff66:	461a      	mov	r2, r3
 800ff68:	2103      	movs	r1, #3
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f814 	bl	800ff98 <icmp_send_response>
}
 800ff70:	bf00      	nop
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	460b      	mov	r3, r1
 800ff82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ff84:	78fb      	ldrb	r3, [r7, #3]
 800ff86:	461a      	mov	r2, r3
 800ff88:	210b      	movs	r1, #11
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 f804 	bl	800ff98 <icmp_send_response>
}
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b08c      	sub	sp, #48	@ 0x30
 800ff9c:	af04      	add	r7, sp, #16
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ffa8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ffac:	2124      	movs	r1, #36	@ 0x24
 800ffae:	2022      	movs	r0, #34	@ 0x22
 800ffb0:	f7f8 f84a 	bl	8008048 <pbuf_alloc>
 800ffb4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d103      	bne.n	800ffc4 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 800ffbc:	4844      	ldr	r0, [pc, #272]	@ (80100d0 <icmp_send_response+0x138>)
 800ffbe:	f001 fe15 	bl	8011bec <puts>
 800ffc2:	e082      	b.n	80100ca <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	895b      	ldrh	r3, [r3, #10]
 800ffc8:	2b23      	cmp	r3, #35	@ 0x23
 800ffca:	d806      	bhi.n	800ffda <icmp_send_response+0x42>
 800ffcc:	4b41      	ldr	r3, [pc, #260]	@ (80100d4 <icmp_send_response+0x13c>)
 800ffce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ffd2:	4941      	ldr	r1, [pc, #260]	@ (80100d8 <icmp_send_response+0x140>)
 800ffd4:	4841      	ldr	r0, [pc, #260]	@ (80100dc <icmp_send_response+0x144>)
 800ffd6:	f001 fd99 	bl	8011b0c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 800ffe0:	483f      	ldr	r0, [pc, #252]	@ (80100e0 <icmp_send_response+0x148>)
 800ffe2:	f001 fd93 	bl	8011b0c <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	4619      	mov	r1, r3
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	0a1b      	lsrs	r3, r3, #8
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	461a      	mov	r2, r3
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	0c1b      	lsrs	r3, r3, #16
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	4618      	mov	r0, r3
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	0e1b      	lsrs	r3, r3, #24
 8010008:	b2db      	uxtb	r3, r3
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	4603      	mov	r3, r0
 801000e:	4835      	ldr	r0, [pc, #212]	@ (80100e4 <icmp_send_response+0x14c>)
 8010010:	f001 fd7c 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 8010014:	4834      	ldr	r0, [pc, #208]	@ (80100e8 <icmp_send_response+0x150>)
 8010016:	f001 fd79 	bl	8011b0c <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	b2db      	uxtb	r3, r3
 8010020:	4619      	mov	r1, r3
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	0a1b      	lsrs	r3, r3, #8
 8010028:	b2db      	uxtb	r3, r3
 801002a:	461a      	mov	r2, r3
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	691b      	ldr	r3, [r3, #16]
 8010030:	0c1b      	lsrs	r3, r3, #16
 8010032:	b2db      	uxtb	r3, r3
 8010034:	4618      	mov	r0, r3
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	691b      	ldr	r3, [r3, #16]
 801003a:	0e1b      	lsrs	r3, r3, #24
 801003c:	b2db      	uxtb	r3, r3
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	4603      	mov	r3, r0
 8010042:	4828      	ldr	r0, [pc, #160]	@ (80100e4 <icmp_send_response+0x14c>)
 8010044:	f001 fd62 	bl	8011b0c <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 8010048:	200a      	movs	r0, #10
 801004a:	f001 fd71 	bl	8011b30 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	78fa      	ldrb	r2, [r7, #3]
 8010058:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	78ba      	ldrb	r2, [r7, #2]
 801005e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	2200      	movs	r2, #0
 8010064:	711a      	strb	r2, [r3, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	2200      	movs	r2, #0
 801006e:	719a      	strb	r2, [r3, #6]
 8010070:	2200      	movs	r2, #0
 8010072:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	f103 0008 	add.w	r0, r3, #8
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	221c      	movs	r2, #28
 8010082:	4619      	mov	r1, r3
 8010084:	f001 ff17 	bl	8011eb6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801008e:	f107 030c 	add.w	r3, r7, #12
 8010092:	4618      	mov	r0, r3
 8010094:	f000 f82a 	bl	80100ec <ip4_route>
 8010098:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d011      	beq.n	80100c4 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	2200      	movs	r2, #0
 80100a4:	709a      	strb	r2, [r3, #2]
 80100a6:	2200      	movs	r2, #0
 80100a8:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80100aa:	f107 020c 	add.w	r2, r7, #12
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	9302      	str	r3, [sp, #8]
 80100b2:	2301      	movs	r3, #1
 80100b4:	9301      	str	r3, [sp, #4]
 80100b6:	2300      	movs	r3, #0
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	23ff      	movs	r3, #255	@ 0xff
 80100bc:	2100      	movs	r1, #0
 80100be:	69f8      	ldr	r0, [r7, #28]
 80100c0:	f000 f9d2 	bl	8010468 <ip4_output_if>
  }
  pbuf_free(q);
 80100c4:	69f8      	ldr	r0, [r7, #28]
 80100c6:	f7f8 faa3 	bl	8008610 <pbuf_free>
}
 80100ca:	3720      	adds	r7, #32
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	08015a8c 	.word	0x08015a8c
 80100d4:	08015910 	.word	0x08015910
 80100d8:	08015acc 	.word	0x08015acc
 80100dc:	08015980 	.word	0x08015980
 80100e0:	08015af8 	.word	0x08015af8
 80100e4:	08015b14 	.word	0x08015b14
 80100e8:	08015b24 	.word	0x08015b24

080100ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b085      	sub	sp, #20
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80100f4:	4b33      	ldr	r3, [pc, #204]	@ (80101c4 <ip4_route+0xd8>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	60fb      	str	r3, [r7, #12]
 80100fa:	e036      	b.n	801016a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010102:	f003 0301 	and.w	r3, r3, #1
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2b00      	cmp	r3, #0
 801010a:	d02b      	beq.n	8010164 <ip4_route+0x78>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010112:	089b      	lsrs	r3, r3, #2
 8010114:	f003 0301 	and.w	r3, r3, #1
 8010118:	b2db      	uxtb	r3, r3
 801011a:	2b00      	cmp	r3, #0
 801011c:	d022      	beq.n	8010164 <ip4_route+0x78>
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	3304      	adds	r3, #4
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d01d      	beq.n	8010164 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	3304      	adds	r3, #4
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	405a      	eors	r2, r3
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	3308      	adds	r3, #8
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4013      	ands	r3, r2
 801013c:	2b00      	cmp	r3, #0
 801013e:	d101      	bne.n	8010144 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	e038      	b.n	80101b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801014a:	f003 0302 	and.w	r3, r3, #2
 801014e:	2b00      	cmp	r3, #0
 8010150:	d108      	bne.n	8010164 <ip4_route+0x78>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	330c      	adds	r3, #12
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	429a      	cmp	r2, r3
 801015e:	d101      	bne.n	8010164 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	e028      	b.n	80101b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	60fb      	str	r3, [r7, #12]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1c5      	bne.n	80100fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010170:	4b15      	ldr	r3, [pc, #84]	@ (80101c8 <ip4_route+0xdc>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d01a      	beq.n	80101ae <ip4_route+0xc2>
 8010178:	4b13      	ldr	r3, [pc, #76]	@ (80101c8 <ip4_route+0xdc>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010180:	f003 0301 	and.w	r3, r3, #1
 8010184:	2b00      	cmp	r3, #0
 8010186:	d012      	beq.n	80101ae <ip4_route+0xc2>
 8010188:	4b0f      	ldr	r3, [pc, #60]	@ (80101c8 <ip4_route+0xdc>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010190:	f003 0304 	and.w	r3, r3, #4
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00a      	beq.n	80101ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010198:	4b0b      	ldr	r3, [pc, #44]	@ (80101c8 <ip4_route+0xdc>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	3304      	adds	r3, #4
 801019e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d004      	beq.n	80101ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80101ac:	d101      	bne.n	80101b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80101ae:	2300      	movs	r3, #0
 80101b0:	e001      	b.n	80101b6 <ip4_route+0xca>
  }

  return netif_default;
 80101b2:	4b05      	ldr	r3, [pc, #20]	@ (80101c8 <ip4_route+0xdc>)
 80101b4:	681b      	ldr	r3, [r3, #0]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3714      	adds	r7, #20
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	20007fa0 	.word	0x20007fa0
 80101c8:	20007fa4 	.word	0x20007fa4

080101cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101da:	f003 0301 	and.w	r3, r3, #1
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d016      	beq.n	8010212 <ip4_input_accept+0x46>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3304      	adds	r3, #4
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d011      	beq.n	8010212 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80101ee:	4b0b      	ldr	r3, [pc, #44]	@ (801021c <ip4_input_accept+0x50>)
 80101f0:	695a      	ldr	r2, [r3, #20]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	3304      	adds	r3, #4
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d008      	beq.n	801020e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80101fc:	4b07      	ldr	r3, [pc, #28]	@ (801021c <ip4_input_accept+0x50>)
 80101fe:	695b      	ldr	r3, [r3, #20]
 8010200:	6879      	ldr	r1, [r7, #4]
 8010202:	4618      	mov	r0, r3
 8010204:	f000 fa08 	bl	8010618 <ip4_addr_isbroadcast_u32>
 8010208:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801020a:	2b00      	cmp	r3, #0
 801020c:	d001      	beq.n	8010212 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801020e:	2301      	movs	r3, #1
 8010210:	e000      	b.n	8010214 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	20005050 	.word	0x20005050

08010220 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	091b      	lsrs	r3, r3, #4
 8010236:	b2db      	uxtb	r3, r3
 8010238:	2b04      	cmp	r3, #4
 801023a:	d004      	beq.n	8010246 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7f8 f9e7 	bl	8008610 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010242:	2300      	movs	r3, #0
 8010244:	e107      	b.n	8010456 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 030f 	and.w	r3, r3, #15
 801024e:	b2db      	uxtb	r3, r3
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	b2db      	uxtb	r3, r3
 8010254:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	885b      	ldrh	r3, [r3, #2]
 801025a:	b29b      	uxth	r3, r3
 801025c:	4618      	mov	r0, r3
 801025e:	f7f6 fd87 	bl	8006d70 <lwip_htons>
 8010262:	4603      	mov	r3, r0
 8010264:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	891b      	ldrh	r3, [r3, #8]
 801026a:	89ba      	ldrh	r2, [r7, #12]
 801026c:	429a      	cmp	r2, r3
 801026e:	d204      	bcs.n	801027a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010270:	89bb      	ldrh	r3, [r7, #12]
 8010272:	4619      	mov	r1, r3
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7f8 f845 	bl	8008304 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	895b      	ldrh	r3, [r3, #10]
 801027e:	89fa      	ldrh	r2, [r7, #14]
 8010280:	429a      	cmp	r2, r3
 8010282:	d807      	bhi.n	8010294 <ip4_input+0x74>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	891b      	ldrh	r3, [r3, #8]
 8010288:	89ba      	ldrh	r2, [r7, #12]
 801028a:	429a      	cmp	r2, r3
 801028c:	d802      	bhi.n	8010294 <ip4_input+0x74>
 801028e:	89fb      	ldrh	r3, [r7, #14]
 8010290:	2b13      	cmp	r3, #19
 8010292:	d804      	bhi.n	801029e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f7f8 f9bb 	bl	8008610 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801029a:	2300      	movs	r3, #0
 801029c:	e0db      	b.n	8010456 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	4a6f      	ldr	r2, [pc, #444]	@ (8010460 <ip4_input+0x240>)
 80102a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	4a6d      	ldr	r2, [pc, #436]	@ (8010460 <ip4_input+0x240>)
 80102ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80102ae:	4b6c      	ldr	r3, [pc, #432]	@ (8010460 <ip4_input+0x240>)
 80102b0:	695b      	ldr	r3, [r3, #20]
 80102b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80102b6:	2be0      	cmp	r3, #224	@ 0xe0
 80102b8:	d112      	bne.n	80102e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80102c0:	f003 0301 	and.w	r3, r3, #1
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d007      	beq.n	80102da <ip4_input+0xba>
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	3304      	adds	r3, #4
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <ip4_input+0xba>
      netif = inp;
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	e02a      	b.n	8010330 <ip4_input+0x110>
    } else {
      netif = NULL;
 80102da:	2300      	movs	r3, #0
 80102dc:	617b      	str	r3, [r7, #20]
 80102de:	e027      	b.n	8010330 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80102e0:	6838      	ldr	r0, [r7, #0]
 80102e2:	f7ff ff73 	bl	80101cc <ip4_input_accept>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <ip4_input+0xd2>
      netif = inp;
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	617b      	str	r3, [r7, #20]
 80102f0:	e01e      	b.n	8010330 <ip4_input+0x110>
    } else {
      netif = NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80102f6:	4b5a      	ldr	r3, [pc, #360]	@ (8010460 <ip4_input+0x240>)
 80102f8:	695b      	ldr	r3, [r3, #20]
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80102fe:	d017      	beq.n	8010330 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010300:	4b58      	ldr	r3, [pc, #352]	@ (8010464 <ip4_input+0x244>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	617b      	str	r3, [r7, #20]
 8010306:	e00e      	b.n	8010326 <ip4_input+0x106>
          if (netif == inp) {
 8010308:	697a      	ldr	r2, [r7, #20]
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	429a      	cmp	r2, r3
 801030e:	d006      	beq.n	801031e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010310:	6978      	ldr	r0, [r7, #20]
 8010312:	f7ff ff5b 	bl	80101cc <ip4_input_accept>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d108      	bne.n	801032e <ip4_input+0x10e>
 801031c:	e000      	b.n	8010320 <ip4_input+0x100>
            continue;
 801031e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	617b      	str	r3, [r7, #20]
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d1ed      	bne.n	8010308 <ip4_input+0xe8>
 801032c:	e000      	b.n	8010330 <ip4_input+0x110>
            break;
 801032e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010330:	4b4b      	ldr	r3, [pc, #300]	@ (8010460 <ip4_input+0x240>)
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	6839      	ldr	r1, [r7, #0]
 8010336:	4618      	mov	r0, r3
 8010338:	f000 f96e 	bl	8010618 <ip4_addr_isbroadcast_u32>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d105      	bne.n	801034e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010342:	4b47      	ldr	r3, [pc, #284]	@ (8010460 <ip4_input+0x240>)
 8010344:	691b      	ldr	r3, [r3, #16]
 8010346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801034a:	2be0      	cmp	r3, #224	@ 0xe0
 801034c:	d104      	bne.n	8010358 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7f8 f95e 	bl	8008610 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	e07e      	b.n	8010456 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d104      	bne.n	8010368 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7f8 f956 	bl	8008610 <pbuf_free>
    return ERR_OK;
 8010364:	2300      	movs	r3, #0
 8010366:	e076      	b.n	8010456 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	88db      	ldrh	r3, [r3, #6]
 801036c:	b29b      	uxth	r3, r3
 801036e:	461a      	mov	r2, r3
 8010370:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8010374:	4013      	ands	r3, r2
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00b      	beq.n	8010392 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f000 fc92 	bl	8010ca4 <ip4_reass>
 8010380:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d101      	bne.n	801038c <ip4_input+0x16c>
      return ERR_OK;
 8010388:	2300      	movs	r3, #0
 801038a:	e064      	b.n	8010456 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010392:	4a33      	ldr	r2, [pc, #204]	@ (8010460 <ip4_input+0x240>)
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010398:	4a31      	ldr	r2, [pc, #196]	@ (8010460 <ip4_input+0x240>)
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801039e:	4a30      	ldr	r2, [pc, #192]	@ (8010460 <ip4_input+0x240>)
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	f003 030f 	and.w	r3, r3, #15
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	461a      	mov	r2, r3
 80103b4:	4b2a      	ldr	r3, [pc, #168]	@ (8010460 <ip4_input+0x240>)
 80103b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80103b8:	89fb      	ldrh	r3, [r7, #14]
 80103ba:	4619      	mov	r1, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7f8 f8a1 	bl	8008504 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	7a5b      	ldrb	r3, [r3, #9]
 80103c6:	2b11      	cmp	r3, #17
 80103c8:	d006      	beq.n	80103d8 <ip4_input+0x1b8>
 80103ca:	2b11      	cmp	r3, #17
 80103cc:	dc13      	bgt.n	80103f6 <ip4_input+0x1d6>
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d00c      	beq.n	80103ec <ip4_input+0x1cc>
 80103d2:	2b06      	cmp	r3, #6
 80103d4:	d005      	beq.n	80103e2 <ip4_input+0x1c2>
 80103d6:	e00e      	b.n	80103f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80103d8:	6839      	ldr	r1, [r7, #0]
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7fd ff20 	bl	800e220 <udp_input>
        break;
 80103e0:	e026      	b.n	8010430 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80103e2:	6839      	ldr	r1, [r7, #0]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7f9 ff53 	bl	800a290 <tcp_input>
        break;
 80103ea:	e021      	b.n	8010430 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80103ec:	6839      	ldr	r1, [r7, #0]
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7ff fc5c 	bl	800fcac <icmp_input>
        break;
 80103f4:	e01c      	b.n	8010430 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80103f6:	4b1a      	ldr	r3, [pc, #104]	@ (8010460 <ip4_input+0x240>)
 80103f8:	695b      	ldr	r3, [r3, #20]
 80103fa:	6979      	ldr	r1, [r7, #20]
 80103fc:	4618      	mov	r0, r3
 80103fe:	f000 f90b 	bl	8010618 <ip4_addr_isbroadcast_u32>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d10f      	bne.n	8010428 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010408:	4b15      	ldr	r3, [pc, #84]	@ (8010460 <ip4_input+0x240>)
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010410:	2be0      	cmp	r3, #224	@ 0xe0
 8010412:	d009      	beq.n	8010428 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7f8 f8e5 	bl	80085ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010420:	2102      	movs	r1, #2
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f7ff fd98 	bl	800ff58 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7f8 f8f1 	bl	8008610 <pbuf_free>
        break;
 801042e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010430:	4b0b      	ldr	r3, [pc, #44]	@ (8010460 <ip4_input+0x240>)
 8010432:	2200      	movs	r2, #0
 8010434:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010436:	4b0a      	ldr	r3, [pc, #40]	@ (8010460 <ip4_input+0x240>)
 8010438:	2200      	movs	r2, #0
 801043a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801043c:	4b08      	ldr	r3, [pc, #32]	@ (8010460 <ip4_input+0x240>)
 801043e:	2200      	movs	r2, #0
 8010440:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010442:	4b07      	ldr	r3, [pc, #28]	@ (8010460 <ip4_input+0x240>)
 8010444:	2200      	movs	r2, #0
 8010446:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010448:	4b05      	ldr	r3, [pc, #20]	@ (8010460 <ip4_input+0x240>)
 801044a:	2200      	movs	r2, #0
 801044c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801044e:	4b04      	ldr	r3, [pc, #16]	@ (8010460 <ip4_input+0x240>)
 8010450:	2200      	movs	r2, #0
 8010452:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3718      	adds	r7, #24
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	20005050 	.word	0x20005050
 8010464:	20007fa0 	.word	0x20007fa0

08010468 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b08a      	sub	sp, #40	@ 0x28
 801046c:	af04      	add	r7, sp, #16
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d009      	beq.n	8010494 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d003      	beq.n	801048e <ip4_output_if+0x26>
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d102      	bne.n	8010494 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801048e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010490:	3304      	adds	r3, #4
 8010492:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010494:	78fa      	ldrb	r2, [r7, #3]
 8010496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010498:	9302      	str	r3, [sp, #8]
 801049a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801049e:	9301      	str	r3, [sp, #4]
 80104a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104a4:	9300      	str	r3, [sp, #0]
 80104a6:	4613      	mov	r3, r2
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	6979      	ldr	r1, [r7, #20]
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f000 f805 	bl	80104bc <ip4_output_if_src>
 80104b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3718      	adds	r7, #24
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b088      	sub	sp, #32
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
 80104c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	7b9b      	ldrb	r3, [r3, #14]
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d006      	beq.n	80104e0 <ip4_output_if_src+0x24>
 80104d2:	4b4b      	ldr	r3, [pc, #300]	@ (8010600 <ip4_output_if_src+0x144>)
 80104d4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80104d8:	494a      	ldr	r1, [pc, #296]	@ (8010604 <ip4_output_if_src+0x148>)
 80104da:	484b      	ldr	r0, [pc, #300]	@ (8010608 <ip4_output_if_src+0x14c>)
 80104dc:	f001 fb16 	bl	8011b0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d060      	beq.n	80105a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80104e6:	2314      	movs	r3, #20
 80104e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80104ea:	2114      	movs	r1, #20
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f7f7 fff9 	bl	80084e4 <pbuf_add_header>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80104f8:	f06f 0301 	mvn.w	r3, #1
 80104fc:	e07c      	b.n	80105f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	895b      	ldrh	r3, [r3, #10]
 8010508:	2b13      	cmp	r3, #19
 801050a:	d806      	bhi.n	801051a <ip4_output_if_src+0x5e>
 801050c:	4b3c      	ldr	r3, [pc, #240]	@ (8010600 <ip4_output_if_src+0x144>)
 801050e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8010512:	493e      	ldr	r1, [pc, #248]	@ (801060c <ip4_output_if_src+0x150>)
 8010514:	483c      	ldr	r0, [pc, #240]	@ (8010608 <ip4_output_if_src+0x14c>)
 8010516:	f001 faf9 	bl	8011b0c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	78fa      	ldrb	r2, [r7, #3]
 801051e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010526:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010530:	8b7b      	ldrh	r3, [r7, #26]
 8010532:	089b      	lsrs	r3, r3, #2
 8010534:	b29b      	uxth	r3, r3
 8010536:	b2db      	uxtb	r3, r3
 8010538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801053c:	b2da      	uxtb	r2, r3
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010548:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	891b      	ldrh	r3, [r3, #8]
 801054e:	4618      	mov	r0, r3
 8010550:	f7f6 fc0e 	bl	8006d70 <lwip_htons>
 8010554:	4603      	mov	r3, r0
 8010556:	461a      	mov	r2, r3
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	2200      	movs	r2, #0
 8010560:	719a      	strb	r2, [r3, #6]
 8010562:	2200      	movs	r2, #0
 8010564:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010566:	4b2a      	ldr	r3, [pc, #168]	@ (8010610 <ip4_output_if_src+0x154>)
 8010568:	881b      	ldrh	r3, [r3, #0]
 801056a:	4618      	mov	r0, r3
 801056c:	f7f6 fc00 	bl	8006d70 <lwip_htons>
 8010570:	4603      	mov	r3, r0
 8010572:	461a      	mov	r2, r3
 8010574:	69fb      	ldr	r3, [r7, #28]
 8010576:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010578:	4b25      	ldr	r3, [pc, #148]	@ (8010610 <ip4_output_if_src+0x154>)
 801057a:	881b      	ldrh	r3, [r3, #0]
 801057c:	3301      	adds	r3, #1
 801057e:	b29a      	uxth	r2, r3
 8010580:	4b23      	ldr	r3, [pc, #140]	@ (8010610 <ip4_output_if_src+0x154>)
 8010582:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d104      	bne.n	8010594 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801058a:	4b22      	ldr	r3, [pc, #136]	@ (8010614 <ip4_output_if_src+0x158>)
 801058c:	681a      	ldr	r2, [r3, #0]
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	60da      	str	r2, [r3, #12]
 8010592:	e003      	b.n	801059c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	2200      	movs	r2, #0
 80105a0:	729a      	strb	r2, [r3, #10]
 80105a2:	2200      	movs	r2, #0
 80105a4:	72da      	strb	r2, [r3, #11]
 80105a6:	e00f      	b.n	80105c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	895b      	ldrh	r3, [r3, #10]
 80105ac:	2b13      	cmp	r3, #19
 80105ae:	d802      	bhi.n	80105b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80105b0:	f06f 0301 	mvn.w	r3, #1
 80105b4:	e020      	b.n	80105f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80105c2:	f107 0314 	add.w	r3, r7, #20
 80105c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80105c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00c      	beq.n	80105ea <ip4_output_if_src+0x12e>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	891a      	ldrh	r2, [r3, #8]
 80105d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80105d8:	429a      	cmp	r2, r3
 80105da:	d906      	bls.n	80105ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f000 fd53 	bl	801108c <ip4_frag>
 80105e6:	4603      	mov	r3, r0
 80105e8:	e006      	b.n	80105f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80105ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ec:	695b      	ldr	r3, [r3, #20]
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	68f9      	ldr	r1, [r7, #12]
 80105f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80105f4:	4798      	blx	r3
 80105f6:	4603      	mov	r3, r0
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3720      	adds	r7, #32
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	08015b2c 	.word	0x08015b2c
 8010604:	08015b60 	.word	0x08015b60
 8010608:	08015b6c 	.word	0x08015b6c
 801060c:	08015b94 	.word	0x08015b94
 8010610:	20008102 	.word	0x20008102
 8010614:	08016064 	.word	0x08016064

08010618 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801062c:	d002      	beq.n	8010634 <ip4_addr_isbroadcast_u32+0x1c>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d101      	bne.n	8010638 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010634:	2301      	movs	r3, #1
 8010636:	e02a      	b.n	801068e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801063e:	f003 0302 	and.w	r3, r3, #2
 8010642:	2b00      	cmp	r3, #0
 8010644:	d101      	bne.n	801064a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010646:	2300      	movs	r3, #0
 8010648:	e021      	b.n	801068e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	3304      	adds	r3, #4
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	429a      	cmp	r2, r3
 8010654:	d101      	bne.n	801065a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010656:	2300      	movs	r3, #0
 8010658:	e019      	b.n	801068e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	3304      	adds	r3, #4
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	405a      	eors	r2, r3
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	3308      	adds	r3, #8
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4013      	ands	r3, r2
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10d      	bne.n	801068c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	3308      	adds	r3, #8
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	43da      	mvns	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	3308      	adds	r3, #8
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010684:	429a      	cmp	r2, r3
 8010686:	d101      	bne.n	801068c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010688:	2301      	movs	r3, #1
 801068a:	e000      	b.n	801068e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801068c:	2300      	movs	r3, #0
  }
}
 801068e:	4618      	mov	r0, r3
 8010690:	3714      	adds	r7, #20
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
	...

0801069c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80106a6:	4b12      	ldr	r3, [pc, #72]	@ (80106f0 <ip_reass_tmr+0x54>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80106ac:	e018      	b.n	80106e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	7fdb      	ldrb	r3, [r3, #31]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00b      	beq.n	80106ce <ip_reass_tmr+0x32>
      r->timer--;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	7fdb      	ldrb	r3, [r3, #31]
 80106ba:	3b01      	subs	r3, #1
 80106bc:	b2da      	uxtb	r2, r3
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	60fb      	str	r3, [r7, #12]
 80106cc:	e008      	b.n	80106e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80106d8:	68b9      	ldr	r1, [r7, #8]
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 f80a 	bl	80106f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1e3      	bne.n	80106ae <ip_reass_tmr+0x12>
    }
  }
}
 80106e6:	bf00      	nop
 80106e8:	bf00      	nop
 80106ea:	3710      	adds	r7, #16
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	20008104 	.word	0x20008104

080106f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b088      	sub	sp, #32
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010702:	683a      	ldr	r2, [r7, #0]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	429a      	cmp	r2, r3
 8010708:	d105      	bne.n	8010716 <ip_reass_free_complete_datagram+0x22>
 801070a:	4b45      	ldr	r3, [pc, #276]	@ (8010820 <ip_reass_free_complete_datagram+0x12c>)
 801070c:	22ab      	movs	r2, #171	@ 0xab
 801070e:	4945      	ldr	r1, [pc, #276]	@ (8010824 <ip_reass_free_complete_datagram+0x130>)
 8010710:	4845      	ldr	r0, [pc, #276]	@ (8010828 <ip_reass_free_complete_datagram+0x134>)
 8010712:	f001 f9fb 	bl	8011b0c <iprintf>
  if (prev != NULL) {
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d00a      	beq.n	8010732 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	429a      	cmp	r2, r3
 8010724:	d005      	beq.n	8010732 <ip_reass_free_complete_datagram+0x3e>
 8010726:	4b3e      	ldr	r3, [pc, #248]	@ (8010820 <ip_reass_free_complete_datagram+0x12c>)
 8010728:	22ad      	movs	r2, #173	@ 0xad
 801072a:	4940      	ldr	r1, [pc, #256]	@ (801082c <ip_reass_free_complete_datagram+0x138>)
 801072c:	483e      	ldr	r0, [pc, #248]	@ (8010828 <ip_reass_free_complete_datagram+0x134>)
 801072e:	f001 f9ed 	bl	8011b0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	889b      	ldrh	r3, [r3, #4]
 801073e:	b29b      	uxth	r3, r3
 8010740:	2b00      	cmp	r3, #0
 8010742:	d12a      	bne.n	801079a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	6858      	ldr	r0, [r3, #4]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3308      	adds	r3, #8
 801075a:	2214      	movs	r2, #20
 801075c:	4619      	mov	r1, r3
 801075e:	f001 fbaa 	bl	8011eb6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010762:	2101      	movs	r1, #1
 8010764:	69b8      	ldr	r0, [r7, #24]
 8010766:	f7ff fc07 	bl	800ff78 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801076a:	69b8      	ldr	r0, [r7, #24]
 801076c:	f7f7 ffd8 	bl	8008720 <pbuf_clen>
 8010770:	4603      	mov	r3, r0
 8010772:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010774:	8bfa      	ldrh	r2, [r7, #30]
 8010776:	8a7b      	ldrh	r3, [r7, #18]
 8010778:	4413      	add	r3, r2
 801077a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801077e:	db05      	blt.n	801078c <ip_reass_free_complete_datagram+0x98>
 8010780:	4b27      	ldr	r3, [pc, #156]	@ (8010820 <ip_reass_free_complete_datagram+0x12c>)
 8010782:	22bc      	movs	r2, #188	@ 0xbc
 8010784:	492a      	ldr	r1, [pc, #168]	@ (8010830 <ip_reass_free_complete_datagram+0x13c>)
 8010786:	4828      	ldr	r0, [pc, #160]	@ (8010828 <ip_reass_free_complete_datagram+0x134>)
 8010788:	f001 f9c0 	bl	8011b0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801078c:	8bfa      	ldrh	r2, [r7, #30]
 801078e:	8a7b      	ldrh	r3, [r7, #18]
 8010790:	4413      	add	r3, r2
 8010792:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010794:	69b8      	ldr	r0, [r7, #24]
 8010796:	f7f7 ff3b 	bl	8008610 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80107a0:	e01f      	b.n	80107e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f7f7 ffb4 	bl	8008720 <pbuf_clen>
 80107b8:	4603      	mov	r3, r0
 80107ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80107bc:	8bfa      	ldrh	r2, [r7, #30]
 80107be:	8a7b      	ldrh	r3, [r7, #18]
 80107c0:	4413      	add	r3, r2
 80107c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107c6:	db05      	blt.n	80107d4 <ip_reass_free_complete_datagram+0xe0>
 80107c8:	4b15      	ldr	r3, [pc, #84]	@ (8010820 <ip_reass_free_complete_datagram+0x12c>)
 80107ca:	22cc      	movs	r2, #204	@ 0xcc
 80107cc:	4918      	ldr	r1, [pc, #96]	@ (8010830 <ip_reass_free_complete_datagram+0x13c>)
 80107ce:	4816      	ldr	r0, [pc, #88]	@ (8010828 <ip_reass_free_complete_datagram+0x134>)
 80107d0:	f001 f99c 	bl	8011b0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80107d4:	8bfa      	ldrh	r2, [r7, #30]
 80107d6:	8a7b      	ldrh	r3, [r7, #18]
 80107d8:	4413      	add	r3, r2
 80107da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f7f7 ff17 	bl	8008610 <pbuf_free>
  while (p != NULL) {
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1dc      	bne.n	80107a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 f8c2 	bl	8010974 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80107f0:	4b10      	ldr	r3, [pc, #64]	@ (8010834 <ip_reass_free_complete_datagram+0x140>)
 80107f2:	881b      	ldrh	r3, [r3, #0]
 80107f4:	8bfa      	ldrh	r2, [r7, #30]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d905      	bls.n	8010806 <ip_reass_free_complete_datagram+0x112>
 80107fa:	4b09      	ldr	r3, [pc, #36]	@ (8010820 <ip_reass_free_complete_datagram+0x12c>)
 80107fc:	22d2      	movs	r2, #210	@ 0xd2
 80107fe:	490e      	ldr	r1, [pc, #56]	@ (8010838 <ip_reass_free_complete_datagram+0x144>)
 8010800:	4809      	ldr	r0, [pc, #36]	@ (8010828 <ip_reass_free_complete_datagram+0x134>)
 8010802:	f001 f983 	bl	8011b0c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010806:	4b0b      	ldr	r3, [pc, #44]	@ (8010834 <ip_reass_free_complete_datagram+0x140>)
 8010808:	881a      	ldrh	r2, [r3, #0]
 801080a:	8bfb      	ldrh	r3, [r7, #30]
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	b29a      	uxth	r2, r3
 8010810:	4b08      	ldr	r3, [pc, #32]	@ (8010834 <ip_reass_free_complete_datagram+0x140>)
 8010812:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010814:	8bfb      	ldrh	r3, [r7, #30]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3720      	adds	r7, #32
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	08015bc4 	.word	0x08015bc4
 8010824:	08015c00 	.word	0x08015c00
 8010828:	08015c0c 	.word	0x08015c0c
 801082c:	08015c34 	.word	0x08015c34
 8010830:	08015c48 	.word	0x08015c48
 8010834:	20008108 	.word	0x20008108
 8010838:	08015c68 	.word	0x08015c68

0801083c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b08a      	sub	sp, #40	@ 0x28
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010846:	2300      	movs	r3, #0
 8010848:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801084a:	2300      	movs	r3, #0
 801084c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801084e:	2300      	movs	r3, #0
 8010850:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010852:	2300      	movs	r3, #0
 8010854:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801085a:	4b28      	ldr	r3, [pc, #160]	@ (80108fc <ip_reass_remove_oldest_datagram+0xc0>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010860:	e030      	b.n	80108c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010864:	695a      	ldr	r2, [r3, #20]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	429a      	cmp	r2, r3
 801086c:	d10c      	bne.n	8010888 <ip_reass_remove_oldest_datagram+0x4c>
 801086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010870:	699a      	ldr	r2, [r3, #24]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	429a      	cmp	r2, r3
 8010878:	d106      	bne.n	8010888 <ip_reass_remove_oldest_datagram+0x4c>
 801087a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801087c:	899a      	ldrh	r2, [r3, #12]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	889b      	ldrh	r3, [r3, #4]
 8010882:	b29b      	uxth	r3, r3
 8010884:	429a      	cmp	r2, r3
 8010886:	d014      	beq.n	80108b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	3301      	adds	r3, #1
 801088c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d104      	bne.n	801089e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010896:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	61bb      	str	r3, [r7, #24]
 801089c:	e009      	b.n	80108b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108a0:	7fda      	ldrb	r2, [r3, #31]
 80108a2:	6a3b      	ldr	r3, [r7, #32]
 80108a4:	7fdb      	ldrb	r3, [r3, #31]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d803      	bhi.n	80108b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80108aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80108b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d001      	beq.n	80108be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80108ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80108be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80108c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1cb      	bne.n	8010862 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80108ca:	6a3b      	ldr	r3, [r7, #32]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d008      	beq.n	80108e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80108d0:	69b9      	ldr	r1, [r7, #24]
 80108d2:	6a38      	ldr	r0, [r7, #32]
 80108d4:	f7ff ff0e 	bl	80106f4 <ip_reass_free_complete_datagram>
 80108d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80108da:	697a      	ldr	r2, [r7, #20]
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4413      	add	r3, r2
 80108e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80108e2:	697a      	ldr	r2, [r7, #20]
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	da02      	bge.n	80108f0 <ip_reass_remove_oldest_datagram+0xb4>
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	dcac      	bgt.n	801084a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80108f0:	697b      	ldr	r3, [r7, #20]
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3728      	adds	r7, #40	@ 0x28
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	20008104 	.word	0x20008104

08010900 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801090a:	2004      	movs	r0, #4
 801090c:	f7f6 fea4 	bl	8007658 <memp_malloc>
 8010910:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d110      	bne.n	801093a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010918:	6839      	ldr	r1, [r7, #0]
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7ff ff8e 	bl	801083c <ip_reass_remove_oldest_datagram>
 8010920:	4602      	mov	r2, r0
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	4293      	cmp	r3, r2
 8010926:	dc03      	bgt.n	8010930 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010928:	2004      	movs	r0, #4
 801092a:	f7f6 fe95 	bl	8007658 <memp_malloc>
 801092e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	e016      	b.n	8010968 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801093a:	2220      	movs	r2, #32
 801093c:	2100      	movs	r1, #0
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f001 fa44 	bl	8011dcc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	220f      	movs	r2, #15
 8010948:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801094a:	4b09      	ldr	r3, [pc, #36]	@ (8010970 <ip_reass_enqueue_new_datagram+0x70>)
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010952:	4a07      	ldr	r2, [pc, #28]	@ (8010970 <ip_reass_enqueue_new_datagram+0x70>)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	3308      	adds	r3, #8
 801095c:	2214      	movs	r2, #20
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	f001 faa8 	bl	8011eb6 <memcpy>
  return ipr;
 8010966:	68fb      	ldr	r3, [r7, #12]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20008104 	.word	0x20008104

08010974 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801097e:	4b10      	ldr	r3, [pc, #64]	@ (80109c0 <ip_reass_dequeue_datagram+0x4c>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	429a      	cmp	r2, r3
 8010986:	d104      	bne.n	8010992 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a0c      	ldr	r2, [pc, #48]	@ (80109c0 <ip_reass_dequeue_datagram+0x4c>)
 801098e:	6013      	str	r3, [r2, #0]
 8010990:	e00d      	b.n	80109ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d106      	bne.n	80109a6 <ip_reass_dequeue_datagram+0x32>
 8010998:	4b0a      	ldr	r3, [pc, #40]	@ (80109c4 <ip_reass_dequeue_datagram+0x50>)
 801099a:	f240 1245 	movw	r2, #325	@ 0x145
 801099e:	490a      	ldr	r1, [pc, #40]	@ (80109c8 <ip_reass_dequeue_datagram+0x54>)
 80109a0:	480a      	ldr	r0, [pc, #40]	@ (80109cc <ip_reass_dequeue_datagram+0x58>)
 80109a2:	f001 f8b3 	bl	8011b0c <iprintf>
    prev->next = ipr->next;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80109ae:	6879      	ldr	r1, [r7, #4]
 80109b0:	2004      	movs	r0, #4
 80109b2:	f7f6 fec1 	bl	8007738 <memp_free>
}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	20008104 	.word	0x20008104
 80109c4:	08015bc4 	.word	0x08015bc4
 80109c8:	08015c8c 	.word	0x08015c8c
 80109cc:	08015c0c 	.word	0x08015c0c

080109d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08c      	sub	sp, #48	@ 0x30
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80109dc:	2300      	movs	r3, #0
 80109de:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80109e0:	2301      	movs	r3, #1
 80109e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80109ea:	69fb      	ldr	r3, [r7, #28]
 80109ec:	885b      	ldrh	r3, [r3, #2]
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7f6 f9bd 	bl	8006d70 <lwip_htons>
 80109f6:	4603      	mov	r3, r0
 80109f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	f003 030f 	and.w	r3, r3, #15
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010a08:	7e7b      	ldrb	r3, [r7, #25]
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	8b7a      	ldrh	r2, [r7, #26]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d202      	bcs.n	8010a18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010a16:	e135      	b.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010a18:	7e7b      	ldrb	r3, [r7, #25]
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	8b7a      	ldrh	r2, [r7, #26]
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	88db      	ldrh	r3, [r3, #6]
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7f6 f9a1 	bl	8006d70 <lwip_htons>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	00db      	lsls	r3, r3, #3
 8010a38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8010a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a42:	2200      	movs	r2, #0
 8010a44:	701a      	strb	r2, [r3, #0]
 8010a46:	2200      	movs	r2, #0
 8010a48:	705a      	strb	r2, [r3, #1]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	709a      	strb	r2, [r3, #2]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a54:	8afa      	ldrh	r2, [r7, #22]
 8010a56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010a58:	8afa      	ldrh	r2, [r7, #22]
 8010a5a:	8b7b      	ldrh	r3, [r7, #26]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a66:	88db      	ldrh	r3, [r3, #6]
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	8afa      	ldrh	r2, [r7, #22]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d902      	bls.n	8010a76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010a74:	e106      	b.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a7c:	e068      	b.n	8010b50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a86:	889b      	ldrh	r3, [r3, #4]
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	889b      	ldrh	r3, [r3, #4]
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d235      	bcs.n	8010b00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d020      	beq.n	8010ae2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa2:	889b      	ldrh	r3, [r3, #4]
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aa8:	88db      	ldrh	r3, [r3, #6]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d307      	bcc.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab2:	88db      	ldrh	r3, [r3, #6]
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	889b      	ldrh	r3, [r3, #4]
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d902      	bls.n	8010ac6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010ac4:	e0de      	b.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ace:	88db      	ldrh	r3, [r3, #6]
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad4:	889b      	ldrh	r3, [r3, #4]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d03d      	beq.n	8010b58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010adc:	2300      	movs	r3, #0
 8010ade:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010ae0:	e03a      	b.n	8010b58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae4:	88db      	ldrh	r3, [r3, #6]
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	889b      	ldrh	r3, [r3, #4]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d902      	bls.n	8010af8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010af6:	e0c5      	b.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	68ba      	ldr	r2, [r7, #8]
 8010afc:	605a      	str	r2, [r3, #4]
      break;
 8010afe:	e02b      	b.n	8010b58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b02:	889b      	ldrh	r3, [r3, #4]
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	889b      	ldrh	r3, [r3, #4]
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d102      	bne.n	8010b16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010b14:	e0b6      	b.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b18:	889b      	ldrh	r3, [r3, #4]
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	88db      	ldrh	r3, [r3, #6]
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d202      	bcs.n	8010b2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010b2a:	e0ab      	b.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d009      	beq.n	8010b46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b34:	88db      	ldrh	r3, [r3, #6]
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	889b      	ldrh	r3, [r3, #4]
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d001      	beq.n	8010b46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8010b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d193      	bne.n	8010a7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010b56:	e000      	b.n	8010b5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010b58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d12d      	bne.n	8010bbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d01c      	beq.n	8010ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b68:	88db      	ldrh	r3, [r3, #6]
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6e:	889b      	ldrh	r3, [r3, #4]
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d906      	bls.n	8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010b76:	4b45      	ldr	r3, [pc, #276]	@ (8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010b78:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8010b7c:	4944      	ldr	r1, [pc, #272]	@ (8010c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010b7e:	4845      	ldr	r0, [pc, #276]	@ (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010b80:	f000 ffc4 	bl	8011b0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b86:	68ba      	ldr	r2, [r7, #8]
 8010b88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b8c:	88db      	ldrh	r3, [r3, #6]
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b92:	889b      	ldrh	r3, [r3, #4]
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d010      	beq.n	8010bbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	623b      	str	r3, [r7, #32]
 8010b9e:	e00d      	b.n	8010bbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d006      	beq.n	8010bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010ba8:	4b38      	ldr	r3, [pc, #224]	@ (8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010baa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8010bae:	493a      	ldr	r1, [pc, #232]	@ (8010c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010bb0:	4838      	ldr	r0, [pc, #224]	@ (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010bb2:	f000 ffab 	bl	8011b0c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d105      	bne.n	8010bce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	7f9b      	ldrb	r3, [r3, #30]
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d059      	beq.n	8010c82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010bce:	6a3b      	ldr	r3, [r7, #32]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d04f      	beq.n	8010c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d006      	beq.n	8010bea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	889b      	ldrh	r3, [r3, #4]
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d002      	beq.n	8010bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	623b      	str	r3, [r7, #32]
 8010bee:	e041      	b.n	8010c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8010bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010bfa:	e012      	b.n	8010c22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8010c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c04:	88db      	ldrh	r3, [r3, #6]
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0a:	889b      	ldrh	r3, [r3, #4]
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d002      	beq.n	8010c18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	623b      	str	r3, [r7, #32]
            break;
 8010c16:	e007      	b.n	8010c28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8010c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d1e9      	bne.n	8010bfc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010c28:	6a3b      	ldr	r3, [r7, #32]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d022      	beq.n	8010c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010c36:	4b15      	ldr	r3, [pc, #84]	@ (8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c38:	f240 12df 	movw	r2, #479	@ 0x1df
 8010c3c:	4917      	ldr	r1, [pc, #92]	@ (8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010c3e:	4815      	ldr	r0, [pc, #84]	@ (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c40:	f000 ff64 	bl	8011b0c <iprintf>
          LWIP_ASSERT("sanity check",
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d106      	bne.n	8010c5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010c50:	4b0e      	ldr	r3, [pc, #56]	@ (8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c52:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010c56:	4911      	ldr	r1, [pc, #68]	@ (8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010c58:	480e      	ldr	r0, [pc, #56]	@ (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c5a:	f000 ff57 	bl	8011b0c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d006      	beq.n	8010c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010c66:	4b09      	ldr	r3, [pc, #36]	@ (8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c68:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010c6c:	490c      	ldr	r1, [pc, #48]	@ (8010ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010c6e:	4809      	ldr	r0, [pc, #36]	@ (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c70:	f000 ff4c 	bl	8011b0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	bf14      	ite	ne
 8010c7a:	2301      	movne	r3, #1
 8010c7c:	2300      	moveq	r3, #0
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	e000      	b.n	8010c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3730      	adds	r7, #48	@ 0x30
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	08015bc4 	.word	0x08015bc4
 8010c90:	08015ca8 	.word	0x08015ca8
 8010c94:	08015c0c 	.word	0x08015c0c
 8010c98:	08015cc8 	.word	0x08015cc8
 8010c9c:	08015d00 	.word	0x08015d00
 8010ca0:	08015d10 	.word	0x08015d10

08010ca4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08e      	sub	sp, #56	@ 0x38
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	f003 030f 	and.w	r3, r3, #15
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	2b14      	cmp	r3, #20
 8010cc2:	f040 8171 	bne.w	8010fa8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cc8:	88db      	ldrh	r3, [r3, #6]
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7f6 f84f 	bl	8006d70 <lwip_htons>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	00db      	lsls	r3, r3, #3
 8010cdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ce0:	885b      	ldrh	r3, [r3, #2]
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7f6 f843 	bl	8006d70 <lwip_htons>
 8010cea:	4603      	mov	r3, r0
 8010cec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	f003 030f 	and.w	r3, r3, #15
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d06:	429a      	cmp	r2, r3
 8010d08:	f0c0 8150 	bcc.w	8010fac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7f7 fd01 	bl	8008720 <pbuf_clen>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010d22:	4b8c      	ldr	r3, [pc, #560]	@ (8010f54 <ip4_reass+0x2b0>)
 8010d24:	881b      	ldrh	r3, [r3, #0]
 8010d26:	461a      	mov	r2, r3
 8010d28:	8c3b      	ldrh	r3, [r7, #32]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	2b0a      	cmp	r3, #10
 8010d2e:	dd10      	ble.n	8010d52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010d30:	8c3b      	ldrh	r3, [r7, #32]
 8010d32:	4619      	mov	r1, r3
 8010d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d36:	f7ff fd81 	bl	801083c <ip_reass_remove_oldest_datagram>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f000 8137 	beq.w	8010fb0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010d42:	4b84      	ldr	r3, [pc, #528]	@ (8010f54 <ip4_reass+0x2b0>)
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	461a      	mov	r2, r3
 8010d48:	8c3b      	ldrh	r3, [r7, #32]
 8010d4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010d4c:	2b0a      	cmp	r3, #10
 8010d4e:	f300 812f 	bgt.w	8010fb0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010d52:	4b81      	ldr	r3, [pc, #516]	@ (8010f58 <ip4_reass+0x2b4>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d58:	e015      	b.n	8010d86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d5c:	695a      	ldr	r2, [r3, #20]
 8010d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d10c      	bne.n	8010d80 <ip4_reass+0xdc>
 8010d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d68:	699a      	ldr	r2, [r3, #24]
 8010d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d6c:	691b      	ldr	r3, [r3, #16]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d106      	bne.n	8010d80 <ip4_reass+0xdc>
 8010d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d74:	899a      	ldrh	r2, [r3, #12]
 8010d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d78:	889b      	ldrh	r3, [r3, #4]
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d006      	beq.n	8010d8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d1e6      	bne.n	8010d5a <ip4_reass+0xb6>
 8010d8c:	e000      	b.n	8010d90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010d8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d109      	bne.n	8010daa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010d96:	8c3b      	ldrh	r3, [r7, #32]
 8010d98:	4619      	mov	r1, r3
 8010d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d9c:	f7ff fdb0 	bl	8010900 <ip_reass_enqueue_new_datagram>
 8010da0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d11c      	bne.n	8010de2 <ip4_reass+0x13e>
      goto nullreturn;
 8010da8:	e105      	b.n	8010fb6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dac:	88db      	ldrh	r3, [r3, #6]
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7f5 ffdd 	bl	8006d70 <lwip_htons>
 8010db6:	4603      	mov	r3, r0
 8010db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d110      	bne.n	8010de2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc2:	89db      	ldrh	r3, [r3, #14]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7f5 ffd3 	bl	8006d70 <lwip_htons>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d006      	beq.n	8010de2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dd6:	3308      	adds	r3, #8
 8010dd8:	2214      	movs	r2, #20
 8010dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f001 f86a 	bl	8011eb6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de4:	88db      	ldrh	r3, [r3, #6]
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	f003 0320 	and.w	r3, r3, #32
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	bf0c      	ite	eq
 8010df0:	2301      	moveq	r3, #1
 8010df2:	2300      	movne	r3, #0
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00e      	beq.n	8010e1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010dfe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010e00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e02:	4413      	add	r3, r2
 8010e04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010e06:	8b7a      	ldrh	r2, [r7, #26]
 8010e08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	f0c0 80a0 	bcc.w	8010f50 <ip4_reass+0x2ac>
 8010e10:	8b7b      	ldrh	r3, [r7, #26]
 8010e12:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8010e16:	4293      	cmp	r3, r2
 8010e18:	f200 809a 	bhi.w	8010f50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010e1c:	69fa      	ldr	r2, [r7, #28]
 8010e1e:	6879      	ldr	r1, [r7, #4]
 8010e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e22:	f7ff fdd5 	bl	80109d0 <ip_reass_chain_frag_into_datagram_and_validate>
 8010e26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010e2e:	f000 809b 	beq.w	8010f68 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010e32:	4b48      	ldr	r3, [pc, #288]	@ (8010f54 <ip4_reass+0x2b0>)
 8010e34:	881a      	ldrh	r2, [r3, #0]
 8010e36:	8c3b      	ldrh	r3, [r7, #32]
 8010e38:	4413      	add	r3, r2
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	4b45      	ldr	r3, [pc, #276]	@ (8010f54 <ip4_reass+0x2b0>)
 8010e3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d00d      	beq.n	8010e62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010e46:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010e48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e4a:	4413      	add	r3, r2
 8010e4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e50:	8a7a      	ldrh	r2, [r7, #18]
 8010e52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e56:	7f9b      	ldrb	r3, [r3, #30]
 8010e58:	f043 0301 	orr.w	r3, r3, #1
 8010e5c:	b2da      	uxtb	r2, r3
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d171      	bne.n	8010f4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6a:	8b9b      	ldrh	r3, [r3, #28]
 8010e6c:	3314      	adds	r3, #20
 8010e6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e84:	3308      	adds	r3, #8
 8010e86:	2214      	movs	r2, #20
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e8c:	f001 f813 	bl	8011eb6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010e90:	8a3b      	ldrh	r3, [r7, #16]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7f5 ff6c 	bl	8006d70 <lwip_htons>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	719a      	strb	r2, [r3, #6]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eac:	2200      	movs	r2, #0
 8010eae:	729a      	strb	r2, [r3, #10]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010eba:	e00d      	b.n	8010ed8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010ec2:	2114      	movs	r1, #20
 8010ec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ec6:	f7f7 fb1d 	bl	8008504 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7f7 fc61 	bl	8008794 <pbuf_cat>
      r = iprh->next_pbuf;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8010ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1ee      	bne.n	8010ebc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010ede:	4b1e      	ldr	r3, [pc, #120]	@ (8010f58 <ip4_reass+0x2b4>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d102      	bne.n	8010eee <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8010eec:	e010      	b.n	8010f10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010eee:	4b1a      	ldr	r3, [pc, #104]	@ (8010f58 <ip4_reass+0x2b4>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ef4:	e007      	b.n	8010f06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d006      	beq.n	8010f0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1f4      	bne.n	8010ef6 <ip4_reass+0x252>
 8010f0c:	e000      	b.n	8010f10 <ip4_reass+0x26c>
          break;
 8010f0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010f10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f14:	f7ff fd2e 	bl	8010974 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7f7 fc01 	bl	8008720 <pbuf_clen>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010f22:	4b0c      	ldr	r3, [pc, #48]	@ (8010f54 <ip4_reass+0x2b0>)
 8010f24:	881b      	ldrh	r3, [r3, #0]
 8010f26:	8c3a      	ldrh	r2, [r7, #32]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d906      	bls.n	8010f3a <ip4_reass+0x296>
 8010f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8010f5c <ip4_reass+0x2b8>)
 8010f2e:	f240 229b 	movw	r2, #667	@ 0x29b
 8010f32:	490b      	ldr	r1, [pc, #44]	@ (8010f60 <ip4_reass+0x2bc>)
 8010f34:	480b      	ldr	r0, [pc, #44]	@ (8010f64 <ip4_reass+0x2c0>)
 8010f36:	f000 fde9 	bl	8011b0c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010f3a:	4b06      	ldr	r3, [pc, #24]	@ (8010f54 <ip4_reass+0x2b0>)
 8010f3c:	881a      	ldrh	r2, [r3, #0]
 8010f3e:	8c3b      	ldrh	r3, [r7, #32]
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	4b03      	ldr	r3, [pc, #12]	@ (8010f54 <ip4_reass+0x2b0>)
 8010f46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	e038      	b.n	8010fbe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e036      	b.n	8010fbe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010f50:	bf00      	nop
 8010f52:	e00a      	b.n	8010f6a <ip4_reass+0x2c6>
 8010f54:	20008108 	.word	0x20008108
 8010f58:	20008104 	.word	0x20008104
 8010f5c:	08015bc4 	.word	0x08015bc4
 8010f60:	08015d34 	.word	0x08015d34
 8010f64:	08015c0c 	.word	0x08015c0c
    goto nullreturn_ipr;
 8010f68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d106      	bne.n	8010f7e <ip4_reass+0x2da>
 8010f70:	4b15      	ldr	r3, [pc, #84]	@ (8010fc8 <ip4_reass+0x324>)
 8010f72:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8010f76:	4915      	ldr	r1, [pc, #84]	@ (8010fcc <ip4_reass+0x328>)
 8010f78:	4815      	ldr	r0, [pc, #84]	@ (8010fd0 <ip4_reass+0x32c>)
 8010f7a:	f000 fdc7 	bl	8011b0c <iprintf>
  if (ipr->p == NULL) {
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d116      	bne.n	8010fb4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010f86:	4b13      	ldr	r3, [pc, #76]	@ (8010fd4 <ip4_reass+0x330>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d006      	beq.n	8010f9e <ip4_reass+0x2fa>
 8010f90:	4b0d      	ldr	r3, [pc, #52]	@ (8010fc8 <ip4_reass+0x324>)
 8010f92:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010f96:	4910      	ldr	r1, [pc, #64]	@ (8010fd8 <ip4_reass+0x334>)
 8010f98:	480d      	ldr	r0, [pc, #52]	@ (8010fd0 <ip4_reass+0x32c>)
 8010f9a:	f000 fdb7 	bl	8011b0c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010fa2:	f7ff fce7 	bl	8010974 <ip_reass_dequeue_datagram>
 8010fa6:	e006      	b.n	8010fb6 <ip4_reass+0x312>
    goto nullreturn;
 8010fa8:	bf00      	nop
 8010faa:	e004      	b.n	8010fb6 <ip4_reass+0x312>
    goto nullreturn;
 8010fac:	bf00      	nop
 8010fae:	e002      	b.n	8010fb6 <ip4_reass+0x312>
      goto nullreturn;
 8010fb0:	bf00      	nop
 8010fb2:	e000      	b.n	8010fb6 <ip4_reass+0x312>
  }

nullreturn:
 8010fb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f7f7 fb2a 	bl	8008610 <pbuf_free>
  return NULL;
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3738      	adds	r7, #56	@ 0x38
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	08015bc4 	.word	0x08015bc4
 8010fcc:	08015d50 	.word	0x08015d50
 8010fd0:	08015c0c 	.word	0x08015c0c
 8010fd4:	20008104 	.word	0x20008104
 8010fd8:	08015d5c 	.word	0x08015d5c

08010fdc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010fe0:	2005      	movs	r0, #5
 8010fe2:	f7f6 fb39 	bl	8007658 <memp_malloc>
 8010fe6:	4603      	mov	r3, r0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	bd80      	pop	{r7, pc}

08010fec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d106      	bne.n	8011008 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010ffa:	4b07      	ldr	r3, [pc, #28]	@ (8011018 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010ffc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8011000:	4906      	ldr	r1, [pc, #24]	@ (801101c <ip_frag_free_pbuf_custom_ref+0x30>)
 8011002:	4807      	ldr	r0, [pc, #28]	@ (8011020 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011004:	f000 fd82 	bl	8011b0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011008:	6879      	ldr	r1, [r7, #4]
 801100a:	2005      	movs	r0, #5
 801100c:	f7f6 fb94 	bl	8007738 <memp_free>
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	08015bc4 	.word	0x08015bc4
 801101c:	08015d7c 	.word	0x08015d7c
 8011020:	08015c0c 	.word	0x08015c0c

08011024 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d106      	bne.n	8011044 <ipfrag_free_pbuf_custom+0x20>
 8011036:	4b11      	ldr	r3, [pc, #68]	@ (801107c <ipfrag_free_pbuf_custom+0x58>)
 8011038:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801103c:	4910      	ldr	r1, [pc, #64]	@ (8011080 <ipfrag_free_pbuf_custom+0x5c>)
 801103e:	4811      	ldr	r0, [pc, #68]	@ (8011084 <ipfrag_free_pbuf_custom+0x60>)
 8011040:	f000 fd64 	bl	8011b0c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	429a      	cmp	r2, r3
 801104a:	d006      	beq.n	801105a <ipfrag_free_pbuf_custom+0x36>
 801104c:	4b0b      	ldr	r3, [pc, #44]	@ (801107c <ipfrag_free_pbuf_custom+0x58>)
 801104e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8011052:	490d      	ldr	r1, [pc, #52]	@ (8011088 <ipfrag_free_pbuf_custom+0x64>)
 8011054:	480b      	ldr	r0, [pc, #44]	@ (8011084 <ipfrag_free_pbuf_custom+0x60>)
 8011056:	f000 fd59 	bl	8011b0c <iprintf>
  if (pcr->original != NULL) {
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	695b      	ldr	r3, [r3, #20]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d004      	beq.n	801106c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	695b      	ldr	r3, [r3, #20]
 8011066:	4618      	mov	r0, r3
 8011068:	f7f7 fad2 	bl	8008610 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	f7ff ffbd 	bl	8010fec <ip_frag_free_pbuf_custom_ref>
}
 8011072:	bf00      	nop
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	08015bc4 	.word	0x08015bc4
 8011080:	08015d88 	.word	0x08015d88
 8011084:	08015c0c 	.word	0x08015c0c
 8011088:	08015d94 	.word	0x08015d94

0801108c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b094      	sub	sp, #80	@ 0x50
 8011090:	af02      	add	r7, sp, #8
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011098:	2300      	movs	r3, #0
 801109a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80110a2:	3b14      	subs	r3, #20
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	da00      	bge.n	80110aa <ip4_frag+0x1e>
 80110a8:	3307      	adds	r3, #7
 80110aa:	10db      	asrs	r3, r3, #3
 80110ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80110ae:	2314      	movs	r3, #20
 80110b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80110b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80110bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	f003 030f 	and.w	r3, r3, #15
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	2b14      	cmp	r3, #20
 80110cc:	d002      	beq.n	80110d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80110ce:	f06f 0305 	mvn.w	r3, #5
 80110d2:	e110      	b.n	80112f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	895b      	ldrh	r3, [r3, #10]
 80110d8:	2b13      	cmp	r3, #19
 80110da:	d809      	bhi.n	80110f0 <ip4_frag+0x64>
 80110dc:	4b88      	ldr	r3, [pc, #544]	@ (8011300 <ip4_frag+0x274>)
 80110de:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80110e2:	4988      	ldr	r1, [pc, #544]	@ (8011304 <ip4_frag+0x278>)
 80110e4:	4888      	ldr	r0, [pc, #544]	@ (8011308 <ip4_frag+0x27c>)
 80110e6:	f000 fd11 	bl	8011b0c <iprintf>
 80110ea:	f06f 0305 	mvn.w	r3, #5
 80110ee:	e102      	b.n	80112f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80110f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f2:	88db      	ldrh	r3, [r3, #6]
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7f5 fe3a 	bl	8006d70 <lwip_htons>
 80110fc:	4603      	mov	r3, r0
 80110fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011100:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011102:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011106:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801110a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801110c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011110:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	891b      	ldrh	r3, [r3, #8]
 8011116:	3b14      	subs	r3, #20
 8011118:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801111c:	e0e1      	b.n	80112e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801111e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011120:	00db      	lsls	r3, r3, #3
 8011122:	b29b      	uxth	r3, r3
 8011124:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011128:	4293      	cmp	r3, r2
 801112a:	bf28      	it	cs
 801112c:	4613      	movcs	r3, r2
 801112e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011130:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011134:	2114      	movs	r1, #20
 8011136:	200e      	movs	r0, #14
 8011138:	f7f6 ff86 	bl	8008048 <pbuf_alloc>
 801113c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 80d5 	beq.w	80112f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011148:	895b      	ldrh	r3, [r3, #10]
 801114a:	2b13      	cmp	r3, #19
 801114c:	d806      	bhi.n	801115c <ip4_frag+0xd0>
 801114e:	4b6c      	ldr	r3, [pc, #432]	@ (8011300 <ip4_frag+0x274>)
 8011150:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011154:	496d      	ldr	r1, [pc, #436]	@ (801130c <ip4_frag+0x280>)
 8011156:	486c      	ldr	r0, [pc, #432]	@ (8011308 <ip4_frag+0x27c>)
 8011158:	f000 fcd8 	bl	8011b0c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	2214      	movs	r2, #20
 8011162:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011164:	4618      	mov	r0, r3
 8011166:	f000 fea6 	bl	8011eb6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011170:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011172:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8011176:	e064      	b.n	8011242 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	895a      	ldrh	r2, [r3, #10]
 801117c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	895b      	ldrh	r3, [r3, #10]
 8011186:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011188:	429a      	cmp	r2, r3
 801118a:	d906      	bls.n	801119a <ip4_frag+0x10e>
 801118c:	4b5c      	ldr	r3, [pc, #368]	@ (8011300 <ip4_frag+0x274>)
 801118e:	f240 322d 	movw	r2, #813	@ 0x32d
 8011192:	495f      	ldr	r1, [pc, #380]	@ (8011310 <ip4_frag+0x284>)
 8011194:	485c      	ldr	r0, [pc, #368]	@ (8011308 <ip4_frag+0x27c>)
 8011196:	f000 fcb9 	bl	8011b0c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801119a:	8bfa      	ldrh	r2, [r7, #30]
 801119c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80111a0:	4293      	cmp	r3, r2
 80111a2:	bf28      	it	cs
 80111a4:	4613      	movcs	r3, r2
 80111a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80111aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d105      	bne.n	80111be <ip4_frag+0x132>
        poff = 0;
 80111b2:	2300      	movs	r3, #0
 80111b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	60fb      	str	r3, [r7, #12]
        continue;
 80111bc:	e041      	b.n	8011242 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80111be:	f7ff ff0d 	bl	8010fdc <ip_frag_alloc_pbuf_custom_ref>
 80111c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80111c4:	69bb      	ldr	r3, [r7, #24]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d103      	bne.n	80111d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80111ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80111cc:	f7f7 fa20 	bl	8008610 <pbuf_free>
        goto memerr;
 80111d0:	e08f      	b.n	80112f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80111d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80111d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80111da:	4413      	add	r3, r2
 80111dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80111e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80111e4:	9201      	str	r2, [sp, #4]
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	4603      	mov	r3, r0
 80111ea:	2241      	movs	r2, #65	@ 0x41
 80111ec:	2000      	movs	r0, #0
 80111ee:	f7f7 f855 	bl	800829c <pbuf_alloced_custom>
 80111f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d106      	bne.n	8011208 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80111fa:	69b8      	ldr	r0, [r7, #24]
 80111fc:	f7ff fef6 	bl	8010fec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011200:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011202:	f7f7 fa05 	bl	8008610 <pbuf_free>
        goto memerr;
 8011206:	e074      	b.n	80112f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011208:	68f8      	ldr	r0, [r7, #12]
 801120a:	f7f7 faa1 	bl	8008750 <pbuf_ref>
      pcr->original = p;
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011214:	69bb      	ldr	r3, [r7, #24]
 8011216:	4a3f      	ldr	r2, [pc, #252]	@ (8011314 <ip4_frag+0x288>)
 8011218:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801121a:	6979      	ldr	r1, [r7, #20]
 801121c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801121e:	f7f7 fab9 	bl	8008794 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011222:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8011226:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011230:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011234:	2b00      	cmp	r3, #0
 8011236:	d004      	beq.n	8011242 <ip4_frag+0x1b6>
        poff = 0;
 8011238:	2300      	movs	r3, #0
 801123a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011242:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011246:	2b00      	cmp	r3, #0
 8011248:	d196      	bne.n	8011178 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801124a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801124c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011250:	4413      	add	r3, r2
 8011252:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011258:	f1a3 0213 	sub.w	r2, r3, #19
 801125c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011260:	429a      	cmp	r2, r3
 8011262:	bfcc      	ite	gt
 8011264:	2301      	movgt	r3, #1
 8011266:	2300      	movle	r3, #0
 8011268:	b2db      	uxtb	r3, r3
 801126a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801126c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011274:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d002      	beq.n	8011282 <ip4_frag+0x1f6>
 801127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801127e:	2b00      	cmp	r3, #0
 8011280:	d003      	beq.n	801128a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011282:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011284:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011288:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801128a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801128c:	4618      	mov	r0, r3
 801128e:	f7f5 fd6f 	bl	8006d70 <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	461a      	mov	r2, r3
 8011296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011298:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801129a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801129c:	3314      	adds	r3, #20
 801129e:	b29b      	uxth	r3, r3
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7f5 fd65 	bl	8006d70 <lwip_htons>
 80112a6:	4603      	mov	r3, r0
 80112a8:	461a      	mov	r2, r3
 80112aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80112ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112b0:	2200      	movs	r2, #0
 80112b2:	729a      	strb	r2, [r3, #10]
 80112b4:	2200      	movs	r2, #0
 80112b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	695b      	ldr	r3, [r3, #20]
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80112c0:	68b8      	ldr	r0, [r7, #8]
 80112c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80112c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112c6:	f7f7 f9a3 	bl	8008610 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80112ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80112ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80112d0:	1ad3      	subs	r3, r2, r3
 80112d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80112d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80112da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80112dc:	4413      	add	r3, r2
 80112de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80112e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	f47f af19 	bne.w	801111e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80112ec:	2300      	movs	r3, #0
 80112ee:	e002      	b.n	80112f6 <ip4_frag+0x26a>
      goto memerr;
 80112f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80112f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3748      	adds	r7, #72	@ 0x48
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	08015bc4 	.word	0x08015bc4
 8011304:	08015da0 	.word	0x08015da0
 8011308:	08015c0c 	.word	0x08015c0c
 801130c:	08015dbc 	.word	0x08015dbc
 8011310:	08015ddc 	.word	0x08015ddc
 8011314:	08011025 	.word	0x08011025

08011318 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011322:	230e      	movs	r3, #14
 8011324:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	895b      	ldrh	r3, [r3, #10]
 801132a:	2b0e      	cmp	r3, #14
 801132c:	d96e      	bls.n	801140c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	7bdb      	ldrb	r3, [r3, #15]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d106      	bne.n	8011344 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801133c:	3301      	adds	r3, #1
 801133e:	b2da      	uxtb	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	7b1a      	ldrb	r2, [r3, #12]
 801134e:	7b5b      	ldrb	r3, [r3, #13]
 8011350:	021b      	lsls	r3, r3, #8
 8011352:	4313      	orrs	r3, r2
 8011354:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	f003 0301 	and.w	r3, r3, #1
 801135e:	2b00      	cmp	r3, #0
 8011360:	d023      	beq.n	80113aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d10f      	bne.n	801138a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	785b      	ldrb	r3, [r3, #1]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d11b      	bne.n	80113aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011376:	2b5e      	cmp	r3, #94	@ 0x5e
 8011378:	d117      	bne.n	80113aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	7b5b      	ldrb	r3, [r3, #13]
 801137e:	f043 0310 	orr.w	r3, r3, #16
 8011382:	b2da      	uxtb	r2, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	735a      	strb	r2, [r3, #13]
 8011388:	e00f      	b.n	80113aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	2206      	movs	r2, #6
 801138e:	4928      	ldr	r1, [pc, #160]	@ (8011430 <ethernet_input+0x118>)
 8011390:	4618      	mov	r0, r3
 8011392:	f000 fd0b 	bl	8011dac <memcmp>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d106      	bne.n	80113aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7b5b      	ldrb	r3, [r3, #13]
 80113a0:	f043 0308 	orr.w	r3, r3, #8
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80113aa:	89fb      	ldrh	r3, [r7, #14]
 80113ac:	2b08      	cmp	r3, #8
 80113ae:	d003      	beq.n	80113b8 <ethernet_input+0xa0>
 80113b0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80113b4:	d014      	beq.n	80113e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80113b6:	e032      	b.n	801141e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113be:	f003 0308 	and.w	r3, r3, #8
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d024      	beq.n	8011410 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80113c6:	8afb      	ldrh	r3, [r7, #22]
 80113c8:	4619      	mov	r1, r3
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7f7 f89a 	bl	8008504 <pbuf_remove_header>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d11e      	bne.n	8011414 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7fe ff21 	bl	8010220 <ip4_input>
      break;
 80113de:	e013      	b.n	8011408 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113e6:	f003 0308 	and.w	r3, r3, #8
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d014      	beq.n	8011418 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80113ee:	8afb      	ldrh	r3, [r7, #22]
 80113f0:	4619      	mov	r1, r3
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f7f7 f886 	bl	8008504 <pbuf_remove_header>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d10e      	bne.n	801141c <ethernet_input+0x104>
        etharp_input(p, netif);
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fe f82f 	bl	800f464 <etharp_input>
      break;
 8011406:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011408:	2300      	movs	r3, #0
 801140a:	e00c      	b.n	8011426 <ethernet_input+0x10e>
    goto free_and_return;
 801140c:	bf00      	nop
 801140e:	e006      	b.n	801141e <ethernet_input+0x106>
        goto free_and_return;
 8011410:	bf00      	nop
 8011412:	e004      	b.n	801141e <ethernet_input+0x106>
        goto free_and_return;
 8011414:	bf00      	nop
 8011416:	e002      	b.n	801141e <ethernet_input+0x106>
        goto free_and_return;
 8011418:	bf00      	nop
 801141a:	e000      	b.n	801141e <ethernet_input+0x106>
        goto free_and_return;
 801141c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f7f7 f8f6 	bl	8008610 <pbuf_free>
  return ERR_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3718      	adds	r7, #24
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	08016068 	.word	0x08016068

08011434 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011434:	b580      	push	{r7, lr}
 8011436:	b086      	sub	sp, #24
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
 8011440:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011442:	8c3b      	ldrh	r3, [r7, #32]
 8011444:	4618      	mov	r0, r3
 8011446:	f7f5 fc93 	bl	8006d70 <lwip_htons>
 801144a:	4603      	mov	r3, r0
 801144c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801144e:	210e      	movs	r1, #14
 8011450:	68b8      	ldr	r0, [r7, #8]
 8011452:	f7f7 f847 	bl	80084e4 <pbuf_add_header>
 8011456:	4603      	mov	r3, r0
 8011458:	2b00      	cmp	r3, #0
 801145a:	d125      	bne.n	80114a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	8afa      	ldrh	r2, [r7, #22]
 8011466:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	2206      	movs	r2, #6
 801146c:	6839      	ldr	r1, [r7, #0]
 801146e:	4618      	mov	r0, r3
 8011470:	f000 fd21 	bl	8011eb6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	3306      	adds	r3, #6
 8011478:	2206      	movs	r2, #6
 801147a:	6879      	ldr	r1, [r7, #4]
 801147c:	4618      	mov	r0, r3
 801147e:	f000 fd1a 	bl	8011eb6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011488:	2b06      	cmp	r3, #6
 801148a:	d006      	beq.n	801149a <ethernet_output+0x66>
 801148c:	4b0a      	ldr	r3, [pc, #40]	@ (80114b8 <ethernet_output+0x84>)
 801148e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8011492:	490a      	ldr	r1, [pc, #40]	@ (80114bc <ethernet_output+0x88>)
 8011494:	480a      	ldr	r0, [pc, #40]	@ (80114c0 <ethernet_output+0x8c>)
 8011496:	f000 fb39 	bl	8011b0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	699b      	ldr	r3, [r3, #24]
 801149e:	68b9      	ldr	r1, [r7, #8]
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	4798      	blx	r3
 80114a4:	4603      	mov	r3, r0
 80114a6:	e002      	b.n	80114ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80114a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80114aa:	f06f 0301 	mvn.w	r3, #1
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3718      	adds	r7, #24
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	08015dec 	.word	0x08015dec
 80114bc:	08015e24 	.word	0x08015e24
 80114c0:	08015e58 	.word	0x08015e58

080114c4 <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 80114c8:	f000 f82a 	bl	8011520 <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 80114cc:	f7f5 f82c 	bl	8006528 <MX_LWIP_Process>
 80114d0:	e7fc      	b.n	80114cc <HW_Verification_Proccess+0x8>
	...

080114d4 <Match_CRC>:
 */
#include "crc.h"
#include "hw_verif_crc.h"

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b086      	sub	sp, #24
 80114d8:	af00      	add	r7, sp, #0
 80114da:	60f8      	str	r0, [r7, #12]
 80114dc:	607a      	str	r2, [r7, #4]
 80114de:	461a      	mov	r2, r3
 80114e0:	460b      	mov	r3, r1
 80114e2:	72fb      	strb	r3, [r7, #11]
 80114e4:	4613      	mov	r3, r2
 80114e6:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 80114e8:	7afb      	ldrb	r3, [r7, #11]
 80114ea:	461a      	mov	r2, r3
 80114ec:	68f9      	ldr	r1, [r7, #12]
 80114ee:	480b      	ldr	r0, [pc, #44]	@ (801151c <Match_CRC+0x48>)
 80114f0:	f7f0 f8fe 	bl	80016f0 <HAL_CRC_Calculate>
 80114f4:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 80114f6:	7abb      	ldrb	r3, [r7, #10]
 80114f8:	461a      	mov	r2, r3
 80114fa:	6879      	ldr	r1, [r7, #4]
 80114fc:	4807      	ldr	r0, [pc, #28]	@ (801151c <Match_CRC+0x48>)
 80114fe:	f7f0 f8f7 	bl	80016f0 <HAL_CRC_Calculate>
 8011502:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 8011504:	697a      	ldr	r2, [r7, #20]
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	429a      	cmp	r2, r3
 801150a:	d101      	bne.n	8011510 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801150c:	2301      	movs	r3, #1
 801150e:	e000      	b.n	8011512 <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3718      	adds	r7, #24
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	20000228 	.word	0x20000228

08011520 <UDP_Server_Init>:

uint8_t perform_test();
void send_result(uint8_t result);

void UDP_Server_Init(void)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8011526:	f7fd fbbb 	bl	800eca0 <udp_new>
 801152a:	4603      	mov	r3, r0
 801152c:	4a12      	ldr	r2, [pc, #72]	@ (8011578 <UDP_Server_Init+0x58>)
 801152e:	6013      	str	r3, [r2, #0]

	if (upcb)
 8011530:	4b11      	ldr	r3, [pc, #68]	@ (8011578 <UDP_Server_Init+0x58>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d01a      	beq.n	801156e <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 8011538:	4b0f      	ldr	r3, [pc, #60]	@ (8011578 <UDP_Server_Init+0x58>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f24d 4231 	movw	r2, #54321	@ 0xd431
 8011540:	490e      	ldr	r1, [pc, #56]	@ (801157c <UDP_Server_Init+0x5c>)
 8011542:	4618      	mov	r0, r3
 8011544:	f7fd fa5c 	bl	800ea00 <udp_bind>
 8011548:	4603      	mov	r3, r0
 801154a:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 801154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d107      	bne.n	8011564 <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 8011554:	4b08      	ldr	r3, [pc, #32]	@ (8011578 <UDP_Server_Init+0x58>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2200      	movs	r2, #0
 801155a:	4909      	ldr	r1, [pc, #36]	@ (8011580 <UDP_Server_Init+0x60>)
 801155c:	4618      	mov	r0, r3
 801155e:	f7fd fb3d 	bl	800ebdc <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 8011562:	e004      	b.n	801156e <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 8011564:	4b04      	ldr	r3, [pc, #16]	@ (8011578 <UDP_Server_Init+0x58>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4618      	mov	r0, r3
 801156a:	f7fd fb57 	bl	800ec1c <udp_remove>
}
 801156e:	bf00      	nop
 8011570:	3708      	adds	r7, #8
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	2000810c 	.word	0x2000810c
 801157c:	08016064 	.word	0x08016064
 8011580:	08011585 	.word	0x08011585

08011584 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b086      	sub	sp, #24
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 8011592:	4a24      	ldr	r2, [pc, #144]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 8011598:	4a22      	ldr	r2, [pc, #136]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 801159e:	4a21      	ldr	r2, [pc, #132]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 80115a0:	8c3b      	ldrh	r3, [r7, #32]
 80115a2:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 80115a4:	2300      	movs	r3, #0
 80115a6:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	461a      	mov	r2, r3
 80115b0:	4b1c      	ldr	r3, [pc, #112]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 80115b2:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	3304      	adds	r3, #4
 80115b8:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	685a      	ldr	r2, [r3, #4]
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	1c59      	adds	r1, r3, #1
 80115c2:	6179      	str	r1, [r7, #20]
 80115c4:	4413      	add	r3, r2
 80115c6:	781a      	ldrb	r2, [r3, #0]
 80115c8:	4b16      	ldr	r3, [pc, #88]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 80115ca:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	685a      	ldr	r2, [r3, #4]
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	1c59      	adds	r1, r3, #1
 80115d4:	6179      	str	r1, [r7, #20]
 80115d6:	4413      	add	r3, r2
 80115d8:	781a      	ldrb	r2, [r3, #0]
 80115da:	4b12      	ldr	r3, [pc, #72]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 80115dc:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	685a      	ldr	r2, [r3, #4]
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	1c59      	adds	r1, r3, #1
 80115e6:	6179      	str	r1, [r7, #20]
 80115e8:	4413      	add	r3, r2
 80115ea:	781a      	ldrb	r2, [r3, #0]
 80115ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 80115ee:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685a      	ldr	r2, [r3, #4]
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	4413      	add	r3, r2
 80115f8:	4a0a      	ldr	r2, [pc, #40]	@ (8011624 <UDP_Recv_Callback+0xa0>)
 80115fa:	7c92      	ldrb	r2, [r2, #18]
 80115fc:	4619      	mov	r1, r3
 80115fe:	480a      	ldr	r0, [pc, #40]	@ (8011628 <UDP_Recv_Callback+0xa4>)
 8011600:	f000 fc59 	bl	8011eb6 <memcpy>

	uint8_t result = perform_test();
 8011604:	f000 f812 	bl	801162c <perform_test>
 8011608:	4603      	mov	r3, r0
 801160a:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 801160c:	7cfb      	ldrb	r3, [r7, #19]
 801160e:	4618      	mov	r0, r3
 8011610:	f000 f850 	bl	80116b4 <send_result>

	// Free the p buffer
	pbuf_free(p);
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f7f6 fffb 	bl	8008610 <pbuf_free>
}
 801161a:	bf00      	nop
 801161c:	3718      	adds	r7, #24
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
 8011622:	bf00      	nop
 8011624:	20008110 	.word	0x20008110
 8011628:	20008123 	.word	0x20008123

0801162c <perform_test>:

uint8_t perform_test()
{
 801162c:	b580      	push	{r7, lr}
 801162e:	af00      	add	r7, sp, #0
	switch (in_msg.peripheral) {
 8011630:	4b1e      	ldr	r3, [pc, #120]	@ (80116ac <perform_test+0x80>)
 8011632:	7c1b      	ldrb	r3, [r3, #16]
 8011634:	3b01      	subs	r3, #1
 8011636:	2b0f      	cmp	r3, #15
 8011638:	d834      	bhi.n	80116a4 <perform_test+0x78>
 801163a:	a201      	add	r2, pc, #4	@ (adr r2, 8011640 <perform_test+0x14>)
 801163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011640:	08011681 	.word	0x08011681
 8011644:	08011685 	.word	0x08011685
 8011648:	080116a5 	.word	0x080116a5
 801164c:	08011699 	.word	0x08011699
 8011650:	080116a5 	.word	0x080116a5
 8011654:	080116a5 	.word	0x080116a5
 8011658:	080116a5 	.word	0x080116a5
 801165c:	0801169d 	.word	0x0801169d
 8011660:	080116a5 	.word	0x080116a5
 8011664:	080116a5 	.word	0x080116a5
 8011668:	080116a5 	.word	0x080116a5
 801166c:	080116a5 	.word	0x080116a5
 8011670:	080116a5 	.word	0x080116a5
 8011674:	080116a5 	.word	0x080116a5
 8011678:	080116a5 	.word	0x080116a5
 801167c:	080116a1 	.word	0x080116a1
		case TEST_TIM:
			return TEST_SUCCESS;
 8011680:	2301      	movs	r3, #1
 8011682:	e010      	b.n	80116a6 <perform_test+0x7a>
			break;
		case TEST_UART:
			return UART_Test_N_Perform((uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8011684:	4b09      	ldr	r3, [pc, #36]	@ (80116ac <perform_test+0x80>)
 8011686:	7c9b      	ldrb	r3, [r3, #18]
 8011688:	4a08      	ldr	r2, [pc, #32]	@ (80116ac <perform_test+0x80>)
 801168a:	7c52      	ldrb	r2, [r2, #17]
 801168c:	4619      	mov	r1, r3
 801168e:	4808      	ldr	r0, [pc, #32]	@ (80116b0 <perform_test+0x84>)
 8011690:	f000 f8ea 	bl	8011868 <UART_Test_N_Perform>
 8011694:	4603      	mov	r3, r0
 8011696:	e006      	b.n	80116a6 <perform_test+0x7a>
			break;
		case TEST_SPI:
			return TEST_SUCCESS;
 8011698:	2301      	movs	r3, #1
 801169a:	e004      	b.n	80116a6 <perform_test+0x7a>
			break;
		case TEST_I2C:
			return TEST_SUCCESS;
 801169c:	2301      	movs	r3, #1
 801169e:	e002      	b.n	80116a6 <perform_test+0x7a>
			break;
		case TEST_ADC:
			return TEST_SUCCESS;
 80116a0:	2301      	movs	r3, #1
 80116a2:	e000      	b.n	80116a6 <perform_test+0x7a>
			break;
		default:
			return TEST_FAILED;
 80116a4:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	20008110 	.word	0x20008110
 80116b0:	20008123 	.word	0x20008123

080116b4 <send_result>:

void send_result(uint8_t result)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b086      	sub	sp, #24
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	4603      	mov	r3, r0
 80116bc:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 80116be:	4b14      	ldr	r3, [pc, #80]	@ (8011710 <send_result+0x5c>)
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 80116c4:	79fb      	ldrb	r3, [r7, #7]
 80116c6:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 80116c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80116cc:	2105      	movs	r1, #5
 80116ce:	2036      	movs	r0, #54	@ 0x36
 80116d0:	f7f6 fcba 	bl	8008048 <pbuf_alloc>
 80116d4:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d014      	beq.n	8011706 <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	461a      	mov	r2, r3
 80116e2:	f107 030c 	add.w	r3, r7, #12
 80116e6:	6818      	ldr	r0, [r3, #0]
 80116e8:	6010      	str	r0, [r2, #0]
 80116ea:	791b      	ldrb	r3, [r3, #4]
 80116ec:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 80116ee:	4b08      	ldr	r3, [pc, #32]	@ (8011710 <send_result+0x5c>)
 80116f0:	6818      	ldr	r0, [r3, #0]
 80116f2:	4b07      	ldr	r3, [pc, #28]	@ (8011710 <send_result+0x5c>)
 80116f4:	685a      	ldr	r2, [r3, #4]
 80116f6:	4b06      	ldr	r3, [pc, #24]	@ (8011710 <send_result+0x5c>)
 80116f8:	891b      	ldrh	r3, [r3, #8]
 80116fa:	6979      	ldr	r1, [r7, #20]
 80116fc:	f7fc ff58 	bl	800e5b0 <udp_sendto>
	    pbuf_free(resp_buf);
 8011700:	6978      	ldr	r0, [r7, #20]
 8011702:	f7f6 ff85 	bl	8008610 <pbuf_free>
	}
}
 8011706:	bf00      	nop
 8011708:	3718      	adds	r7, #24
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	20008110 	.word	0x20008110

08011714 <UART_Test_Perform>:
// DMA synchronization
volatile uint8_t uart4_rx_done;
volatile uint8_t uart5_rx_done;

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8011714:	b590      	push	{r4, r7, lr}
 8011716:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801171a:	af00      	add	r7, sp, #0
 801171c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011720:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011724:	6018      	str	r0, [r3, #0]
 8011726:	460a      	mov	r2, r1
 8011728:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801172c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8011730:	701a      	strb	r2, [r3, #0]
	printf("Performing uart test\n");
 8011732:	4844      	ldr	r0, [pc, #272]	@ (8011844 <UART_Test_Perform+0x130>)
 8011734:	f000 fa5a 	bl	8011bec <puts>

	uart4_rx_done = 0;
 8011738:	4b43      	ldr	r3, [pc, #268]	@ (8011848 <UART_Test_Perform+0x134>)
 801173a:	2200      	movs	r2, #0
 801173c:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 801173e:	4b43      	ldr	r3, [pc, #268]	@ (801184c <UART_Test_Perform+0x138>)
 8011740:	2200      	movs	r2, #0
 8011742:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 8011744:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011748:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	b29a      	uxth	r2, r3
 8011750:	f107 030c 	add.w	r3, r7, #12
 8011754:	4619      	mov	r1, r3
 8011756:	483e      	ldr	r0, [pc, #248]	@ (8011850 <UART_Test_Perform+0x13c>)
 8011758:	f7f3 fb92 	bl	8004e80 <HAL_UART_Receive_DMA>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d004      	beq.n	801176c <UART_Test_Perform+0x58>
	{
		printf("uart4 -> uart5 RX1 failed\n");
 8011762:	483c      	ldr	r0, [pc, #240]	@ (8011854 <UART_Test_Perform+0x140>)
 8011764:	f000 fa42 	bl	8011bec <puts>
		return TEST_FAILED;
 8011768:	23ff      	movs	r3, #255	@ 0xff
 801176a:	e066      	b.n	801183a <UART_Test_Perform+0x126>
	}
	//printf("uart4 gState: %d RxState: %d\n", huart4.gState, huart4.RxState);
	//printf("uart5 gState: %d RxState: %d\n\n", huart5.gState, huart5.RxState);
	if (HAL_UART_Transmit_DMA(&huart4, msg, msg_len) != HAL_OK)
 801176c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011770:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	b29a      	uxth	r2, r3
 8011778:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801177c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011780:	6819      	ldr	r1, [r3, #0]
 8011782:	4835      	ldr	r0, [pc, #212]	@ (8011858 <UART_Test_Perform+0x144>)
 8011784:	f7f3 fb00 	bl	8004d88 <HAL_UART_Transmit_DMA>
 8011788:	4603      	mov	r3, r0
 801178a:	2b00      	cmp	r3, #0
 801178c:	d004      	beq.n	8011798 <UART_Test_Perform+0x84>
	{
		printf("uart4 -> uart5 TX failed\n");
 801178e:	4833      	ldr	r0, [pc, #204]	@ (801185c <UART_Test_Perform+0x148>)
 8011790:	f000 fa2c 	bl	8011bec <puts>
		return TEST_FAILED;
 8011794:	23ff      	movs	r3, #255	@ 0xff
 8011796:	e050      	b.n	801183a <UART_Test_Perform+0x126>
	}
	while (!uart5_rx_done);
 8011798:	bf00      	nop
 801179a:	4b2c      	ldr	r3, [pc, #176]	@ (801184c <UART_Test_Perform+0x138>)
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d0fa      	beq.n	801179a <UART_Test_Perform+0x86>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 80117a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80117a8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80117b4:	4619      	mov	r1, r3
 80117b6:	4828      	ldr	r0, [pc, #160]	@ (8011858 <UART_Test_Perform+0x144>)
 80117b8:	f7f3 fb62 	bl	8004e80 <HAL_UART_Receive_DMA>
 80117bc:	4603      	mov	r3, r0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d004      	beq.n	80117cc <UART_Test_Perform+0xb8>
	{
		printf("uart5 -> uart4 RX failed\n");
 80117c2:	4827      	ldr	r0, [pc, #156]	@ (8011860 <UART_Test_Perform+0x14c>)
 80117c4:	f000 fa12 	bl	8011bec <puts>
		return TEST_FAILED;
 80117c8:	23ff      	movs	r3, #255	@ 0xff
 80117ca:	e036      	b.n	801183a <UART_Test_Perform+0x126>
	}
	//printf("uart4 gState: %d RxState: %d\n", huart4.gState, huart4.RxState);
	//printf("uart5 gState: %d RxState: %d\n\n", huart5.gState, huart5.RxState);
	if (HAL_UART_Transmit_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 80117cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80117d0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	f107 030c 	add.w	r3, r7, #12
 80117dc:	4619      	mov	r1, r3
 80117de:	481c      	ldr	r0, [pc, #112]	@ (8011850 <UART_Test_Perform+0x13c>)
 80117e0:	f7f3 fad2 	bl	8004d88 <HAL_UART_Transmit_DMA>
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d004      	beq.n	80117f4 <UART_Test_Perform+0xe0>
	{
		printf("uart5 -> uart4 TX failed\n");
 80117ea:	481e      	ldr	r0, [pc, #120]	@ (8011864 <UART_Test_Perform+0x150>)
 80117ec:	f000 f9fe 	bl	8011bec <puts>
		return TEST_FAILED;
 80117f0:	23ff      	movs	r3, #255	@ 0xff
 80117f2:	e022      	b.n	801183a <UART_Test_Perform+0x126>
	}

	while (!uart4_rx_done);
 80117f4:	bf00      	nop
 80117f6:	4b14      	ldr	r3, [pc, #80]	@ (8011848 <UART_Test_Perform+0x134>)
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d0fa      	beq.n	80117f6 <UART_Test_Perform+0xe2>

	//printf("\nuart4 gState: %d RxState: %d\n", huart4.gState, huart4.RxState);
	//printf("uart5 gState: %d RxState: %d\n\n", huart5.gState, huart5.RxState);

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8011800:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011804:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8011808:	781c      	ldrb	r4, [r3, #0]
 801180a:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801180e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011812:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8011816:	7819      	ldrb	r1, [r3, #0]
 8011818:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801181c:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8011820:	4623      	mov	r3, r4
 8011822:	6800      	ldr	r0, [r0, #0]
 8011824:	f7ff fe56 	bl	80114d4 <Match_CRC>
 8011828:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c

	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801182c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011830:	2b01      	cmp	r3, #1
 8011832:	d101      	bne.n	8011838 <UART_Test_Perform+0x124>
 8011834:	2301      	movs	r3, #1
 8011836:	e000      	b.n	801183a <UART_Test_Perform+0x126>

	return TEST_FAILED;
 8011838:	23ff      	movs	r3, #255	@ 0xff
}
 801183a:	4618      	mov	r0, r3
 801183c:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8011840:	46bd      	mov	sp, r7
 8011842:	bd90      	pop	{r4, r7, pc}
 8011844:	08015e80 	.word	0x08015e80
 8011848:	20008224 	.word	0x20008224
 801184c:	20008225 	.word	0x20008225
 8011850:	200002d8 	.word	0x200002d8
 8011854:	08015e98 	.word	0x08015e98
 8011858:	20000250 	.word	0x20000250
 801185c:	08015eb4 	.word	0x08015eb4
 8011860:	08015ed0 	.word	0x08015ed0
 8011864:	08015eec 	.word	0x08015eec

08011868 <UART_Test_N_Perform>:

uint8_t UART_Test_N_Perform(uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	460b      	mov	r3, r1
 8011872:	70fb      	strb	r3, [r7, #3]
 8011874:	4613      	mov	r3, r2
 8011876:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < n; i++)
 8011878:	2300      	movs	r3, #0
 801187a:	60fb      	str	r3, [r7, #12]
 801187c:	e018      	b.n	80118b0 <UART_Test_N_Perform+0x48>
	{
		if (UART_Test_Perform(msg, msg_len) == TEST_FAILED)
 801187e:	78fb      	ldrb	r3, [r7, #3]
 8011880:	4619      	mov	r1, r3
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f7ff ff46 	bl	8011714 <UART_Test_Perform>
 8011888:	4603      	mov	r3, r0
 801188a:	2bff      	cmp	r3, #255	@ 0xff
 801188c:	d107      	bne.n	801189e <UART_Test_N_Perform+0x36>
		{
			printf("TEST %d: uart test failed\n", i+1);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	3301      	adds	r3, #1
 8011892:	4619      	mov	r1, r3
 8011894:	480b      	ldr	r0, [pc, #44]	@ (80118c4 <UART_Test_N_Perform+0x5c>)
 8011896:	f000 f939 	bl	8011b0c <iprintf>
			return TEST_FAILED;
 801189a:	23ff      	movs	r3, #255	@ 0xff
 801189c:	e00d      	b.n	80118ba <UART_Test_N_Perform+0x52>
		}
		else printf("TEST %d: uart test success\n", i+1);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	3301      	adds	r3, #1
 80118a2:	4619      	mov	r1, r3
 80118a4:	4808      	ldr	r0, [pc, #32]	@ (80118c8 <UART_Test_N_Perform+0x60>)
 80118a6:	f000 f931 	bl	8011b0c <iprintf>
	for (int i = 0; i < n; i++)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	3301      	adds	r3, #1
 80118ae:	60fb      	str	r3, [r7, #12]
 80118b0:	78bb      	ldrb	r3, [r7, #2]
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	dbe2      	blt.n	801187e <UART_Test_N_Perform+0x16>
	}

	return TEST_SUCCESS;
 80118b8:	2301      	movs	r3, #1
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3710      	adds	r7, #16
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	bf00      	nop
 80118c4:	08015f08 	.word	0x08015f08
 80118c8:	08015f24 	.word	0x08015f24

080118cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	4a09      	ldr	r2, [pc, #36]	@ (80118fc <HAL_UART_RxCpltCallback+0x30>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d102      	bne.n	80118e2 <HAL_UART_RxCpltCallback+0x16>
 80118dc:	4b08      	ldr	r3, [pc, #32]	@ (8011900 <HAL_UART_RxCpltCallback+0x34>)
 80118de:	2201      	movs	r2, #1
 80118e0:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4a07      	ldr	r2, [pc, #28]	@ (8011904 <HAL_UART_RxCpltCallback+0x38>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d102      	bne.n	80118f0 <HAL_UART_RxCpltCallback+0x24>
 80118ea:	4b07      	ldr	r3, [pc, #28]	@ (8011908 <HAL_UART_RxCpltCallback+0x3c>)
 80118ec:	2201      	movs	r2, #1
 80118ee:	701a      	strb	r2, [r3, #0]
}
 80118f0:	bf00      	nop
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	20000250 	.word	0x20000250
 8011900:	20008224 	.word	0x20008224
 8011904:	200002d8 	.word	0x200002d8
 8011908:	20008225 	.word	0x20008225

0801190c <rand>:
 801190c:	4b16      	ldr	r3, [pc, #88]	@ (8011968 <rand+0x5c>)
 801190e:	b510      	push	{r4, lr}
 8011910:	681c      	ldr	r4, [r3, #0]
 8011912:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011914:	b9b3      	cbnz	r3, 8011944 <rand+0x38>
 8011916:	2018      	movs	r0, #24
 8011918:	f000 fb44 	bl	8011fa4 <malloc>
 801191c:	4602      	mov	r2, r0
 801191e:	6320      	str	r0, [r4, #48]	@ 0x30
 8011920:	b920      	cbnz	r0, 801192c <rand+0x20>
 8011922:	4b12      	ldr	r3, [pc, #72]	@ (801196c <rand+0x60>)
 8011924:	4812      	ldr	r0, [pc, #72]	@ (8011970 <rand+0x64>)
 8011926:	2152      	movs	r1, #82	@ 0x52
 8011928:	f000 fad4 	bl	8011ed4 <__assert_func>
 801192c:	4911      	ldr	r1, [pc, #68]	@ (8011974 <rand+0x68>)
 801192e:	4b12      	ldr	r3, [pc, #72]	@ (8011978 <rand+0x6c>)
 8011930:	e9c0 1300 	strd	r1, r3, [r0]
 8011934:	4b11      	ldr	r3, [pc, #68]	@ (801197c <rand+0x70>)
 8011936:	6083      	str	r3, [r0, #8]
 8011938:	230b      	movs	r3, #11
 801193a:	8183      	strh	r3, [r0, #12]
 801193c:	2100      	movs	r1, #0
 801193e:	2001      	movs	r0, #1
 8011940:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011944:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011946:	480e      	ldr	r0, [pc, #56]	@ (8011980 <rand+0x74>)
 8011948:	690b      	ldr	r3, [r1, #16]
 801194a:	694c      	ldr	r4, [r1, #20]
 801194c:	4a0d      	ldr	r2, [pc, #52]	@ (8011984 <rand+0x78>)
 801194e:	4358      	muls	r0, r3
 8011950:	fb02 0004 	mla	r0, r2, r4, r0
 8011954:	fba3 3202 	umull	r3, r2, r3, r2
 8011958:	3301      	adds	r3, #1
 801195a:	eb40 0002 	adc.w	r0, r0, r2
 801195e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011962:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011966:	bd10      	pop	{r4, pc}
 8011968:	2000007c 	.word	0x2000007c
 801196c:	08016076 	.word	0x08016076
 8011970:	0801608d 	.word	0x0801608d
 8011974:	abcd330e 	.word	0xabcd330e
 8011978:	e66d1234 	.word	0xe66d1234
 801197c:	0005deec 	.word	0x0005deec
 8011980:	5851f42d 	.word	0x5851f42d
 8011984:	4c957f2d 	.word	0x4c957f2d

08011988 <std>:
 8011988:	2300      	movs	r3, #0
 801198a:	b510      	push	{r4, lr}
 801198c:	4604      	mov	r4, r0
 801198e:	e9c0 3300 	strd	r3, r3, [r0]
 8011992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011996:	6083      	str	r3, [r0, #8]
 8011998:	8181      	strh	r1, [r0, #12]
 801199a:	6643      	str	r3, [r0, #100]	@ 0x64
 801199c:	81c2      	strh	r2, [r0, #14]
 801199e:	6183      	str	r3, [r0, #24]
 80119a0:	4619      	mov	r1, r3
 80119a2:	2208      	movs	r2, #8
 80119a4:	305c      	adds	r0, #92	@ 0x5c
 80119a6:	f000 fa11 	bl	8011dcc <memset>
 80119aa:	4b0d      	ldr	r3, [pc, #52]	@ (80119e0 <std+0x58>)
 80119ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80119ae:	4b0d      	ldr	r3, [pc, #52]	@ (80119e4 <std+0x5c>)
 80119b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80119b2:	4b0d      	ldr	r3, [pc, #52]	@ (80119e8 <std+0x60>)
 80119b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80119b6:	4b0d      	ldr	r3, [pc, #52]	@ (80119ec <std+0x64>)
 80119b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80119ba:	4b0d      	ldr	r3, [pc, #52]	@ (80119f0 <std+0x68>)
 80119bc:	6224      	str	r4, [r4, #32]
 80119be:	429c      	cmp	r4, r3
 80119c0:	d006      	beq.n	80119d0 <std+0x48>
 80119c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80119c6:	4294      	cmp	r4, r2
 80119c8:	d002      	beq.n	80119d0 <std+0x48>
 80119ca:	33d0      	adds	r3, #208	@ 0xd0
 80119cc:	429c      	cmp	r4, r3
 80119ce:	d105      	bne.n	80119dc <std+0x54>
 80119d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80119d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119d8:	f000 ba6a 	b.w	8011eb0 <__retarget_lock_init_recursive>
 80119dc:	bd10      	pop	{r4, pc}
 80119de:	bf00      	nop
 80119e0:	08011bfd 	.word	0x08011bfd
 80119e4:	08011c1f 	.word	0x08011c1f
 80119e8:	08011c57 	.word	0x08011c57
 80119ec:	08011c7b 	.word	0x08011c7b
 80119f0:	20008228 	.word	0x20008228

080119f4 <stdio_exit_handler>:
 80119f4:	4a02      	ldr	r2, [pc, #8]	@ (8011a00 <stdio_exit_handler+0xc>)
 80119f6:	4903      	ldr	r1, [pc, #12]	@ (8011a04 <stdio_exit_handler+0x10>)
 80119f8:	4803      	ldr	r0, [pc, #12]	@ (8011a08 <stdio_exit_handler+0x14>)
 80119fa:	f000 b869 	b.w	8011ad0 <_fwalk_sglue>
 80119fe:	bf00      	nop
 8011a00:	20000070 	.word	0x20000070
 8011a04:	080127b5 	.word	0x080127b5
 8011a08:	20000080 	.word	0x20000080

08011a0c <cleanup_stdio>:
 8011a0c:	6841      	ldr	r1, [r0, #4]
 8011a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8011a40 <cleanup_stdio+0x34>)
 8011a10:	4299      	cmp	r1, r3
 8011a12:	b510      	push	{r4, lr}
 8011a14:	4604      	mov	r4, r0
 8011a16:	d001      	beq.n	8011a1c <cleanup_stdio+0x10>
 8011a18:	f000 fecc 	bl	80127b4 <_fflush_r>
 8011a1c:	68a1      	ldr	r1, [r4, #8]
 8011a1e:	4b09      	ldr	r3, [pc, #36]	@ (8011a44 <cleanup_stdio+0x38>)
 8011a20:	4299      	cmp	r1, r3
 8011a22:	d002      	beq.n	8011a2a <cleanup_stdio+0x1e>
 8011a24:	4620      	mov	r0, r4
 8011a26:	f000 fec5 	bl	80127b4 <_fflush_r>
 8011a2a:	68e1      	ldr	r1, [r4, #12]
 8011a2c:	4b06      	ldr	r3, [pc, #24]	@ (8011a48 <cleanup_stdio+0x3c>)
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	d004      	beq.n	8011a3c <cleanup_stdio+0x30>
 8011a32:	4620      	mov	r0, r4
 8011a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a38:	f000 bebc 	b.w	80127b4 <_fflush_r>
 8011a3c:	bd10      	pop	{r4, pc}
 8011a3e:	bf00      	nop
 8011a40:	20008228 	.word	0x20008228
 8011a44:	20008290 	.word	0x20008290
 8011a48:	200082f8 	.word	0x200082f8

08011a4c <global_stdio_init.part.0>:
 8011a4c:	b510      	push	{r4, lr}
 8011a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8011a7c <global_stdio_init.part.0+0x30>)
 8011a50:	4c0b      	ldr	r4, [pc, #44]	@ (8011a80 <global_stdio_init.part.0+0x34>)
 8011a52:	4a0c      	ldr	r2, [pc, #48]	@ (8011a84 <global_stdio_init.part.0+0x38>)
 8011a54:	601a      	str	r2, [r3, #0]
 8011a56:	4620      	mov	r0, r4
 8011a58:	2200      	movs	r2, #0
 8011a5a:	2104      	movs	r1, #4
 8011a5c:	f7ff ff94 	bl	8011988 <std>
 8011a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a64:	2201      	movs	r2, #1
 8011a66:	2109      	movs	r1, #9
 8011a68:	f7ff ff8e 	bl	8011988 <std>
 8011a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a70:	2202      	movs	r2, #2
 8011a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a76:	2112      	movs	r1, #18
 8011a78:	f7ff bf86 	b.w	8011988 <std>
 8011a7c:	20008360 	.word	0x20008360
 8011a80:	20008228 	.word	0x20008228
 8011a84:	080119f5 	.word	0x080119f5

08011a88 <__sfp_lock_acquire>:
 8011a88:	4801      	ldr	r0, [pc, #4]	@ (8011a90 <__sfp_lock_acquire+0x8>)
 8011a8a:	f000 ba12 	b.w	8011eb2 <__retarget_lock_acquire_recursive>
 8011a8e:	bf00      	nop
 8011a90:	20008369 	.word	0x20008369

08011a94 <__sfp_lock_release>:
 8011a94:	4801      	ldr	r0, [pc, #4]	@ (8011a9c <__sfp_lock_release+0x8>)
 8011a96:	f000 ba0d 	b.w	8011eb4 <__retarget_lock_release_recursive>
 8011a9a:	bf00      	nop
 8011a9c:	20008369 	.word	0x20008369

08011aa0 <__sinit>:
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	f7ff fff0 	bl	8011a88 <__sfp_lock_acquire>
 8011aa8:	6a23      	ldr	r3, [r4, #32]
 8011aaa:	b11b      	cbz	r3, 8011ab4 <__sinit+0x14>
 8011aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ab0:	f7ff bff0 	b.w	8011a94 <__sfp_lock_release>
 8011ab4:	4b04      	ldr	r3, [pc, #16]	@ (8011ac8 <__sinit+0x28>)
 8011ab6:	6223      	str	r3, [r4, #32]
 8011ab8:	4b04      	ldr	r3, [pc, #16]	@ (8011acc <__sinit+0x2c>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1f5      	bne.n	8011aac <__sinit+0xc>
 8011ac0:	f7ff ffc4 	bl	8011a4c <global_stdio_init.part.0>
 8011ac4:	e7f2      	b.n	8011aac <__sinit+0xc>
 8011ac6:	bf00      	nop
 8011ac8:	08011a0d 	.word	0x08011a0d
 8011acc:	20008360 	.word	0x20008360

08011ad0 <_fwalk_sglue>:
 8011ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ad4:	4607      	mov	r7, r0
 8011ad6:	4688      	mov	r8, r1
 8011ad8:	4614      	mov	r4, r2
 8011ada:	2600      	movs	r6, #0
 8011adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8011ae4:	d505      	bpl.n	8011af2 <_fwalk_sglue+0x22>
 8011ae6:	6824      	ldr	r4, [r4, #0]
 8011ae8:	2c00      	cmp	r4, #0
 8011aea:	d1f7      	bne.n	8011adc <_fwalk_sglue+0xc>
 8011aec:	4630      	mov	r0, r6
 8011aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011af2:	89ab      	ldrh	r3, [r5, #12]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d907      	bls.n	8011b08 <_fwalk_sglue+0x38>
 8011af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011afc:	3301      	adds	r3, #1
 8011afe:	d003      	beq.n	8011b08 <_fwalk_sglue+0x38>
 8011b00:	4629      	mov	r1, r5
 8011b02:	4638      	mov	r0, r7
 8011b04:	47c0      	blx	r8
 8011b06:	4306      	orrs	r6, r0
 8011b08:	3568      	adds	r5, #104	@ 0x68
 8011b0a:	e7e9      	b.n	8011ae0 <_fwalk_sglue+0x10>

08011b0c <iprintf>:
 8011b0c:	b40f      	push	{r0, r1, r2, r3}
 8011b0e:	b507      	push	{r0, r1, r2, lr}
 8011b10:	4906      	ldr	r1, [pc, #24]	@ (8011b2c <iprintf+0x20>)
 8011b12:	ab04      	add	r3, sp, #16
 8011b14:	6808      	ldr	r0, [r1, #0]
 8011b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b1a:	6881      	ldr	r1, [r0, #8]
 8011b1c:	9301      	str	r3, [sp, #4]
 8011b1e:	f000 fb21 	bl	8012164 <_vfiprintf_r>
 8011b22:	b003      	add	sp, #12
 8011b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b28:	b004      	add	sp, #16
 8011b2a:	4770      	bx	lr
 8011b2c:	2000007c 	.word	0x2000007c

08011b30 <putchar>:
 8011b30:	4b02      	ldr	r3, [pc, #8]	@ (8011b3c <putchar+0xc>)
 8011b32:	4601      	mov	r1, r0
 8011b34:	6818      	ldr	r0, [r3, #0]
 8011b36:	6882      	ldr	r2, [r0, #8]
 8011b38:	f000 bed8 	b.w	80128ec <_putc_r>
 8011b3c:	2000007c 	.word	0x2000007c

08011b40 <_puts_r>:
 8011b40:	6a03      	ldr	r3, [r0, #32]
 8011b42:	b570      	push	{r4, r5, r6, lr}
 8011b44:	6884      	ldr	r4, [r0, #8]
 8011b46:	4605      	mov	r5, r0
 8011b48:	460e      	mov	r6, r1
 8011b4a:	b90b      	cbnz	r3, 8011b50 <_puts_r+0x10>
 8011b4c:	f7ff ffa8 	bl	8011aa0 <__sinit>
 8011b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b52:	07db      	lsls	r3, r3, #31
 8011b54:	d405      	bmi.n	8011b62 <_puts_r+0x22>
 8011b56:	89a3      	ldrh	r3, [r4, #12]
 8011b58:	0598      	lsls	r0, r3, #22
 8011b5a:	d402      	bmi.n	8011b62 <_puts_r+0x22>
 8011b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b5e:	f000 f9a8 	bl	8011eb2 <__retarget_lock_acquire_recursive>
 8011b62:	89a3      	ldrh	r3, [r4, #12]
 8011b64:	0719      	lsls	r1, r3, #28
 8011b66:	d502      	bpl.n	8011b6e <_puts_r+0x2e>
 8011b68:	6923      	ldr	r3, [r4, #16]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d135      	bne.n	8011bda <_puts_r+0x9a>
 8011b6e:	4621      	mov	r1, r4
 8011b70:	4628      	mov	r0, r5
 8011b72:	f000 f8c5 	bl	8011d00 <__swsetup_r>
 8011b76:	b380      	cbz	r0, 8011bda <_puts_r+0x9a>
 8011b78:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b7e:	07da      	lsls	r2, r3, #31
 8011b80:	d405      	bmi.n	8011b8e <_puts_r+0x4e>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	059b      	lsls	r3, r3, #22
 8011b86:	d402      	bmi.n	8011b8e <_puts_r+0x4e>
 8011b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b8a:	f000 f993 	bl	8011eb4 <__retarget_lock_release_recursive>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	bd70      	pop	{r4, r5, r6, pc}
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	da04      	bge.n	8011ba0 <_puts_r+0x60>
 8011b96:	69a2      	ldr	r2, [r4, #24]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	dc17      	bgt.n	8011bcc <_puts_r+0x8c>
 8011b9c:	290a      	cmp	r1, #10
 8011b9e:	d015      	beq.n	8011bcc <_puts_r+0x8c>
 8011ba0:	6823      	ldr	r3, [r4, #0]
 8011ba2:	1c5a      	adds	r2, r3, #1
 8011ba4:	6022      	str	r2, [r4, #0]
 8011ba6:	7019      	strb	r1, [r3, #0]
 8011ba8:	68a3      	ldr	r3, [r4, #8]
 8011baa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011bae:	3b01      	subs	r3, #1
 8011bb0:	60a3      	str	r3, [r4, #8]
 8011bb2:	2900      	cmp	r1, #0
 8011bb4:	d1ed      	bne.n	8011b92 <_puts_r+0x52>
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	da11      	bge.n	8011bde <_puts_r+0x9e>
 8011bba:	4622      	mov	r2, r4
 8011bbc:	210a      	movs	r1, #10
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f000 f85f 	bl	8011c82 <__swbuf_r>
 8011bc4:	3001      	adds	r0, #1
 8011bc6:	d0d7      	beq.n	8011b78 <_puts_r+0x38>
 8011bc8:	250a      	movs	r5, #10
 8011bca:	e7d7      	b.n	8011b7c <_puts_r+0x3c>
 8011bcc:	4622      	mov	r2, r4
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f000 f857 	bl	8011c82 <__swbuf_r>
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	d1e7      	bne.n	8011ba8 <_puts_r+0x68>
 8011bd8:	e7ce      	b.n	8011b78 <_puts_r+0x38>
 8011bda:	3e01      	subs	r6, #1
 8011bdc:	e7e4      	b.n	8011ba8 <_puts_r+0x68>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	1c5a      	adds	r2, r3, #1
 8011be2:	6022      	str	r2, [r4, #0]
 8011be4:	220a      	movs	r2, #10
 8011be6:	701a      	strb	r2, [r3, #0]
 8011be8:	e7ee      	b.n	8011bc8 <_puts_r+0x88>
	...

08011bec <puts>:
 8011bec:	4b02      	ldr	r3, [pc, #8]	@ (8011bf8 <puts+0xc>)
 8011bee:	4601      	mov	r1, r0
 8011bf0:	6818      	ldr	r0, [r3, #0]
 8011bf2:	f7ff bfa5 	b.w	8011b40 <_puts_r>
 8011bf6:	bf00      	nop
 8011bf8:	2000007c 	.word	0x2000007c

08011bfc <__sread>:
 8011bfc:	b510      	push	{r4, lr}
 8011bfe:	460c      	mov	r4, r1
 8011c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c04:	f000 f90c 	bl	8011e20 <_read_r>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	bfab      	itete	ge
 8011c0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8011c10:	181b      	addge	r3, r3, r0
 8011c12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011c16:	bfac      	ite	ge
 8011c18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011c1a:	81a3      	strhlt	r3, [r4, #12]
 8011c1c:	bd10      	pop	{r4, pc}

08011c1e <__swrite>:
 8011c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c22:	461f      	mov	r7, r3
 8011c24:	898b      	ldrh	r3, [r1, #12]
 8011c26:	05db      	lsls	r3, r3, #23
 8011c28:	4605      	mov	r5, r0
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	4616      	mov	r6, r2
 8011c2e:	d505      	bpl.n	8011c3c <__swrite+0x1e>
 8011c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c34:	2302      	movs	r3, #2
 8011c36:	2200      	movs	r2, #0
 8011c38:	f000 f8e0 	bl	8011dfc <_lseek_r>
 8011c3c:	89a3      	ldrh	r3, [r4, #12]
 8011c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c46:	81a3      	strh	r3, [r4, #12]
 8011c48:	4632      	mov	r2, r6
 8011c4a:	463b      	mov	r3, r7
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c52:	f000 b8f7 	b.w	8011e44 <_write_r>

08011c56 <__sseek>:
 8011c56:	b510      	push	{r4, lr}
 8011c58:	460c      	mov	r4, r1
 8011c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c5e:	f000 f8cd 	bl	8011dfc <_lseek_r>
 8011c62:	1c43      	adds	r3, r0, #1
 8011c64:	89a3      	ldrh	r3, [r4, #12]
 8011c66:	bf15      	itete	ne
 8011c68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011c6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011c6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011c72:	81a3      	strheq	r3, [r4, #12]
 8011c74:	bf18      	it	ne
 8011c76:	81a3      	strhne	r3, [r4, #12]
 8011c78:	bd10      	pop	{r4, pc}

08011c7a <__sclose>:
 8011c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c7e:	f000 b8ad 	b.w	8011ddc <_close_r>

08011c82 <__swbuf_r>:
 8011c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c84:	460e      	mov	r6, r1
 8011c86:	4614      	mov	r4, r2
 8011c88:	4605      	mov	r5, r0
 8011c8a:	b118      	cbz	r0, 8011c94 <__swbuf_r+0x12>
 8011c8c:	6a03      	ldr	r3, [r0, #32]
 8011c8e:	b90b      	cbnz	r3, 8011c94 <__swbuf_r+0x12>
 8011c90:	f7ff ff06 	bl	8011aa0 <__sinit>
 8011c94:	69a3      	ldr	r3, [r4, #24]
 8011c96:	60a3      	str	r3, [r4, #8]
 8011c98:	89a3      	ldrh	r3, [r4, #12]
 8011c9a:	071a      	lsls	r2, r3, #28
 8011c9c:	d501      	bpl.n	8011ca2 <__swbuf_r+0x20>
 8011c9e:	6923      	ldr	r3, [r4, #16]
 8011ca0:	b943      	cbnz	r3, 8011cb4 <__swbuf_r+0x32>
 8011ca2:	4621      	mov	r1, r4
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	f000 f82b 	bl	8011d00 <__swsetup_r>
 8011caa:	b118      	cbz	r0, 8011cb4 <__swbuf_r+0x32>
 8011cac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	6922      	ldr	r2, [r4, #16]
 8011cb8:	1a98      	subs	r0, r3, r2
 8011cba:	6963      	ldr	r3, [r4, #20]
 8011cbc:	b2f6      	uxtb	r6, r6
 8011cbe:	4283      	cmp	r3, r0
 8011cc0:	4637      	mov	r7, r6
 8011cc2:	dc05      	bgt.n	8011cd0 <__swbuf_r+0x4e>
 8011cc4:	4621      	mov	r1, r4
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	f000 fd74 	bl	80127b4 <_fflush_r>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d1ed      	bne.n	8011cac <__swbuf_r+0x2a>
 8011cd0:	68a3      	ldr	r3, [r4, #8]
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	60a3      	str	r3, [r4, #8]
 8011cd6:	6823      	ldr	r3, [r4, #0]
 8011cd8:	1c5a      	adds	r2, r3, #1
 8011cda:	6022      	str	r2, [r4, #0]
 8011cdc:	701e      	strb	r6, [r3, #0]
 8011cde:	6962      	ldr	r2, [r4, #20]
 8011ce0:	1c43      	adds	r3, r0, #1
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d004      	beq.n	8011cf0 <__swbuf_r+0x6e>
 8011ce6:	89a3      	ldrh	r3, [r4, #12]
 8011ce8:	07db      	lsls	r3, r3, #31
 8011cea:	d5e1      	bpl.n	8011cb0 <__swbuf_r+0x2e>
 8011cec:	2e0a      	cmp	r6, #10
 8011cee:	d1df      	bne.n	8011cb0 <__swbuf_r+0x2e>
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f000 fd5e 	bl	80127b4 <_fflush_r>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d0d9      	beq.n	8011cb0 <__swbuf_r+0x2e>
 8011cfc:	e7d6      	b.n	8011cac <__swbuf_r+0x2a>
	...

08011d00 <__swsetup_r>:
 8011d00:	b538      	push	{r3, r4, r5, lr}
 8011d02:	4b29      	ldr	r3, [pc, #164]	@ (8011da8 <__swsetup_r+0xa8>)
 8011d04:	4605      	mov	r5, r0
 8011d06:	6818      	ldr	r0, [r3, #0]
 8011d08:	460c      	mov	r4, r1
 8011d0a:	b118      	cbz	r0, 8011d14 <__swsetup_r+0x14>
 8011d0c:	6a03      	ldr	r3, [r0, #32]
 8011d0e:	b90b      	cbnz	r3, 8011d14 <__swsetup_r+0x14>
 8011d10:	f7ff fec6 	bl	8011aa0 <__sinit>
 8011d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d18:	0719      	lsls	r1, r3, #28
 8011d1a:	d422      	bmi.n	8011d62 <__swsetup_r+0x62>
 8011d1c:	06da      	lsls	r2, r3, #27
 8011d1e:	d407      	bmi.n	8011d30 <__swsetup_r+0x30>
 8011d20:	2209      	movs	r2, #9
 8011d22:	602a      	str	r2, [r5, #0]
 8011d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d28:	81a3      	strh	r3, [r4, #12]
 8011d2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d2e:	e033      	b.n	8011d98 <__swsetup_r+0x98>
 8011d30:	0758      	lsls	r0, r3, #29
 8011d32:	d512      	bpl.n	8011d5a <__swsetup_r+0x5a>
 8011d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d36:	b141      	cbz	r1, 8011d4a <__swsetup_r+0x4a>
 8011d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d3c:	4299      	cmp	r1, r3
 8011d3e:	d002      	beq.n	8011d46 <__swsetup_r+0x46>
 8011d40:	4628      	mov	r0, r5
 8011d42:	f000 f8e5 	bl	8011f10 <_free_r>
 8011d46:	2300      	movs	r3, #0
 8011d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d4a:	89a3      	ldrh	r3, [r4, #12]
 8011d4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d50:	81a3      	strh	r3, [r4, #12]
 8011d52:	2300      	movs	r3, #0
 8011d54:	6063      	str	r3, [r4, #4]
 8011d56:	6923      	ldr	r3, [r4, #16]
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	89a3      	ldrh	r3, [r4, #12]
 8011d5c:	f043 0308 	orr.w	r3, r3, #8
 8011d60:	81a3      	strh	r3, [r4, #12]
 8011d62:	6923      	ldr	r3, [r4, #16]
 8011d64:	b94b      	cbnz	r3, 8011d7a <__swsetup_r+0x7a>
 8011d66:	89a3      	ldrh	r3, [r4, #12]
 8011d68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d70:	d003      	beq.n	8011d7a <__swsetup_r+0x7a>
 8011d72:	4621      	mov	r1, r4
 8011d74:	4628      	mov	r0, r5
 8011d76:	f000 fd7d 	bl	8012874 <__smakebuf_r>
 8011d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d7e:	f013 0201 	ands.w	r2, r3, #1
 8011d82:	d00a      	beq.n	8011d9a <__swsetup_r+0x9a>
 8011d84:	2200      	movs	r2, #0
 8011d86:	60a2      	str	r2, [r4, #8]
 8011d88:	6962      	ldr	r2, [r4, #20]
 8011d8a:	4252      	negs	r2, r2
 8011d8c:	61a2      	str	r2, [r4, #24]
 8011d8e:	6922      	ldr	r2, [r4, #16]
 8011d90:	b942      	cbnz	r2, 8011da4 <__swsetup_r+0xa4>
 8011d92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d96:	d1c5      	bne.n	8011d24 <__swsetup_r+0x24>
 8011d98:	bd38      	pop	{r3, r4, r5, pc}
 8011d9a:	0799      	lsls	r1, r3, #30
 8011d9c:	bf58      	it	pl
 8011d9e:	6962      	ldrpl	r2, [r4, #20]
 8011da0:	60a2      	str	r2, [r4, #8]
 8011da2:	e7f4      	b.n	8011d8e <__swsetup_r+0x8e>
 8011da4:	2000      	movs	r0, #0
 8011da6:	e7f7      	b.n	8011d98 <__swsetup_r+0x98>
 8011da8:	2000007c 	.word	0x2000007c

08011dac <memcmp>:
 8011dac:	b510      	push	{r4, lr}
 8011dae:	3901      	subs	r1, #1
 8011db0:	4402      	add	r2, r0
 8011db2:	4290      	cmp	r0, r2
 8011db4:	d101      	bne.n	8011dba <memcmp+0xe>
 8011db6:	2000      	movs	r0, #0
 8011db8:	e005      	b.n	8011dc6 <memcmp+0x1a>
 8011dba:	7803      	ldrb	r3, [r0, #0]
 8011dbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011dc0:	42a3      	cmp	r3, r4
 8011dc2:	d001      	beq.n	8011dc8 <memcmp+0x1c>
 8011dc4:	1b18      	subs	r0, r3, r4
 8011dc6:	bd10      	pop	{r4, pc}
 8011dc8:	3001      	adds	r0, #1
 8011dca:	e7f2      	b.n	8011db2 <memcmp+0x6>

08011dcc <memset>:
 8011dcc:	4402      	add	r2, r0
 8011dce:	4603      	mov	r3, r0
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d100      	bne.n	8011dd6 <memset+0xa>
 8011dd4:	4770      	bx	lr
 8011dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dda:	e7f9      	b.n	8011dd0 <memset+0x4>

08011ddc <_close_r>:
 8011ddc:	b538      	push	{r3, r4, r5, lr}
 8011dde:	4d06      	ldr	r5, [pc, #24]	@ (8011df8 <_close_r+0x1c>)
 8011de0:	2300      	movs	r3, #0
 8011de2:	4604      	mov	r4, r0
 8011de4:	4608      	mov	r0, r1
 8011de6:	602b      	str	r3, [r5, #0]
 8011de8:	f7ee fe5a 	bl	8000aa0 <_close>
 8011dec:	1c43      	adds	r3, r0, #1
 8011dee:	d102      	bne.n	8011df6 <_close_r+0x1a>
 8011df0:	682b      	ldr	r3, [r5, #0]
 8011df2:	b103      	cbz	r3, 8011df6 <_close_r+0x1a>
 8011df4:	6023      	str	r3, [r4, #0]
 8011df6:	bd38      	pop	{r3, r4, r5, pc}
 8011df8:	20008364 	.word	0x20008364

08011dfc <_lseek_r>:
 8011dfc:	b538      	push	{r3, r4, r5, lr}
 8011dfe:	4d07      	ldr	r5, [pc, #28]	@ (8011e1c <_lseek_r+0x20>)
 8011e00:	4604      	mov	r4, r0
 8011e02:	4608      	mov	r0, r1
 8011e04:	4611      	mov	r1, r2
 8011e06:	2200      	movs	r2, #0
 8011e08:	602a      	str	r2, [r5, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	f7ee fe6f 	bl	8000aee <_lseek>
 8011e10:	1c43      	adds	r3, r0, #1
 8011e12:	d102      	bne.n	8011e1a <_lseek_r+0x1e>
 8011e14:	682b      	ldr	r3, [r5, #0]
 8011e16:	b103      	cbz	r3, 8011e1a <_lseek_r+0x1e>
 8011e18:	6023      	str	r3, [r4, #0]
 8011e1a:	bd38      	pop	{r3, r4, r5, pc}
 8011e1c:	20008364 	.word	0x20008364

08011e20 <_read_r>:
 8011e20:	b538      	push	{r3, r4, r5, lr}
 8011e22:	4d07      	ldr	r5, [pc, #28]	@ (8011e40 <_read_r+0x20>)
 8011e24:	4604      	mov	r4, r0
 8011e26:	4608      	mov	r0, r1
 8011e28:	4611      	mov	r1, r2
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	602a      	str	r2, [r5, #0]
 8011e2e:	461a      	mov	r2, r3
 8011e30:	f7ee fe19 	bl	8000a66 <_read>
 8011e34:	1c43      	adds	r3, r0, #1
 8011e36:	d102      	bne.n	8011e3e <_read_r+0x1e>
 8011e38:	682b      	ldr	r3, [r5, #0]
 8011e3a:	b103      	cbz	r3, 8011e3e <_read_r+0x1e>
 8011e3c:	6023      	str	r3, [r4, #0]
 8011e3e:	bd38      	pop	{r3, r4, r5, pc}
 8011e40:	20008364 	.word	0x20008364

08011e44 <_write_r>:
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	4d07      	ldr	r5, [pc, #28]	@ (8011e64 <_write_r+0x20>)
 8011e48:	4604      	mov	r4, r0
 8011e4a:	4608      	mov	r0, r1
 8011e4c:	4611      	mov	r1, r2
 8011e4e:	2200      	movs	r2, #0
 8011e50:	602a      	str	r2, [r5, #0]
 8011e52:	461a      	mov	r2, r3
 8011e54:	f7ee fc82 	bl	800075c <_write>
 8011e58:	1c43      	adds	r3, r0, #1
 8011e5a:	d102      	bne.n	8011e62 <_write_r+0x1e>
 8011e5c:	682b      	ldr	r3, [r5, #0]
 8011e5e:	b103      	cbz	r3, 8011e62 <_write_r+0x1e>
 8011e60:	6023      	str	r3, [r4, #0]
 8011e62:	bd38      	pop	{r3, r4, r5, pc}
 8011e64:	20008364 	.word	0x20008364

08011e68 <__libc_init_array>:
 8011e68:	b570      	push	{r4, r5, r6, lr}
 8011e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8011ea0 <__libc_init_array+0x38>)
 8011e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8011ea4 <__libc_init_array+0x3c>)
 8011e6e:	1b64      	subs	r4, r4, r5
 8011e70:	10a4      	asrs	r4, r4, #2
 8011e72:	2600      	movs	r6, #0
 8011e74:	42a6      	cmp	r6, r4
 8011e76:	d109      	bne.n	8011e8c <__libc_init_array+0x24>
 8011e78:	4d0b      	ldr	r5, [pc, #44]	@ (8011ea8 <__libc_init_array+0x40>)
 8011e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8011eac <__libc_init_array+0x44>)
 8011e7c:	f000 fde8 	bl	8012a50 <_init>
 8011e80:	1b64      	subs	r4, r4, r5
 8011e82:	10a4      	asrs	r4, r4, #2
 8011e84:	2600      	movs	r6, #0
 8011e86:	42a6      	cmp	r6, r4
 8011e88:	d105      	bne.n	8011e96 <__libc_init_array+0x2e>
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}
 8011e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e90:	4798      	blx	r3
 8011e92:	3601      	adds	r6, #1
 8011e94:	e7ee      	b.n	8011e74 <__libc_init_array+0xc>
 8011e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e9a:	4798      	blx	r3
 8011e9c:	3601      	adds	r6, #1
 8011e9e:	e7f2      	b.n	8011e86 <__libc_init_array+0x1e>
 8011ea0:	0801615c 	.word	0x0801615c
 8011ea4:	0801615c 	.word	0x0801615c
 8011ea8:	0801615c 	.word	0x0801615c
 8011eac:	08016160 	.word	0x08016160

08011eb0 <__retarget_lock_init_recursive>:
 8011eb0:	4770      	bx	lr

08011eb2 <__retarget_lock_acquire_recursive>:
 8011eb2:	4770      	bx	lr

08011eb4 <__retarget_lock_release_recursive>:
 8011eb4:	4770      	bx	lr

08011eb6 <memcpy>:
 8011eb6:	440a      	add	r2, r1
 8011eb8:	4291      	cmp	r1, r2
 8011eba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011ebe:	d100      	bne.n	8011ec2 <memcpy+0xc>
 8011ec0:	4770      	bx	lr
 8011ec2:	b510      	push	{r4, lr}
 8011ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ecc:	4291      	cmp	r1, r2
 8011ece:	d1f9      	bne.n	8011ec4 <memcpy+0xe>
 8011ed0:	bd10      	pop	{r4, pc}
	...

08011ed4 <__assert_func>:
 8011ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ed6:	4614      	mov	r4, r2
 8011ed8:	461a      	mov	r2, r3
 8011eda:	4b09      	ldr	r3, [pc, #36]	@ (8011f00 <__assert_func+0x2c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	4605      	mov	r5, r0
 8011ee0:	68d8      	ldr	r0, [r3, #12]
 8011ee2:	b14c      	cbz	r4, 8011ef8 <__assert_func+0x24>
 8011ee4:	4b07      	ldr	r3, [pc, #28]	@ (8011f04 <__assert_func+0x30>)
 8011ee6:	9100      	str	r1, [sp, #0]
 8011ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011eec:	4906      	ldr	r1, [pc, #24]	@ (8011f08 <__assert_func+0x34>)
 8011eee:	462b      	mov	r3, r5
 8011ef0:	f000 fc88 	bl	8012804 <fiprintf>
 8011ef4:	f000 fd60 	bl	80129b8 <abort>
 8011ef8:	4b04      	ldr	r3, [pc, #16]	@ (8011f0c <__assert_func+0x38>)
 8011efa:	461c      	mov	r4, r3
 8011efc:	e7f3      	b.n	8011ee6 <__assert_func+0x12>
 8011efe:	bf00      	nop
 8011f00:	2000007c 	.word	0x2000007c
 8011f04:	080160e5 	.word	0x080160e5
 8011f08:	080160f2 	.word	0x080160f2
 8011f0c:	08016120 	.word	0x08016120

08011f10 <_free_r>:
 8011f10:	b538      	push	{r3, r4, r5, lr}
 8011f12:	4605      	mov	r5, r0
 8011f14:	2900      	cmp	r1, #0
 8011f16:	d041      	beq.n	8011f9c <_free_r+0x8c>
 8011f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f1c:	1f0c      	subs	r4, r1, #4
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	bfb8      	it	lt
 8011f22:	18e4      	addlt	r4, r4, r3
 8011f24:	f000 f8e8 	bl	80120f8 <__malloc_lock>
 8011f28:	4a1d      	ldr	r2, [pc, #116]	@ (8011fa0 <_free_r+0x90>)
 8011f2a:	6813      	ldr	r3, [r2, #0]
 8011f2c:	b933      	cbnz	r3, 8011f3c <_free_r+0x2c>
 8011f2e:	6063      	str	r3, [r4, #4]
 8011f30:	6014      	str	r4, [r2, #0]
 8011f32:	4628      	mov	r0, r5
 8011f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f38:	f000 b8e4 	b.w	8012104 <__malloc_unlock>
 8011f3c:	42a3      	cmp	r3, r4
 8011f3e:	d908      	bls.n	8011f52 <_free_r+0x42>
 8011f40:	6820      	ldr	r0, [r4, #0]
 8011f42:	1821      	adds	r1, r4, r0
 8011f44:	428b      	cmp	r3, r1
 8011f46:	bf01      	itttt	eq
 8011f48:	6819      	ldreq	r1, [r3, #0]
 8011f4a:	685b      	ldreq	r3, [r3, #4]
 8011f4c:	1809      	addeq	r1, r1, r0
 8011f4e:	6021      	streq	r1, [r4, #0]
 8011f50:	e7ed      	b.n	8011f2e <_free_r+0x1e>
 8011f52:	461a      	mov	r2, r3
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	b10b      	cbz	r3, 8011f5c <_free_r+0x4c>
 8011f58:	42a3      	cmp	r3, r4
 8011f5a:	d9fa      	bls.n	8011f52 <_free_r+0x42>
 8011f5c:	6811      	ldr	r1, [r2, #0]
 8011f5e:	1850      	adds	r0, r2, r1
 8011f60:	42a0      	cmp	r0, r4
 8011f62:	d10b      	bne.n	8011f7c <_free_r+0x6c>
 8011f64:	6820      	ldr	r0, [r4, #0]
 8011f66:	4401      	add	r1, r0
 8011f68:	1850      	adds	r0, r2, r1
 8011f6a:	4283      	cmp	r3, r0
 8011f6c:	6011      	str	r1, [r2, #0]
 8011f6e:	d1e0      	bne.n	8011f32 <_free_r+0x22>
 8011f70:	6818      	ldr	r0, [r3, #0]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	6053      	str	r3, [r2, #4]
 8011f76:	4408      	add	r0, r1
 8011f78:	6010      	str	r0, [r2, #0]
 8011f7a:	e7da      	b.n	8011f32 <_free_r+0x22>
 8011f7c:	d902      	bls.n	8011f84 <_free_r+0x74>
 8011f7e:	230c      	movs	r3, #12
 8011f80:	602b      	str	r3, [r5, #0]
 8011f82:	e7d6      	b.n	8011f32 <_free_r+0x22>
 8011f84:	6820      	ldr	r0, [r4, #0]
 8011f86:	1821      	adds	r1, r4, r0
 8011f88:	428b      	cmp	r3, r1
 8011f8a:	bf04      	itt	eq
 8011f8c:	6819      	ldreq	r1, [r3, #0]
 8011f8e:	685b      	ldreq	r3, [r3, #4]
 8011f90:	6063      	str	r3, [r4, #4]
 8011f92:	bf04      	itt	eq
 8011f94:	1809      	addeq	r1, r1, r0
 8011f96:	6021      	streq	r1, [r4, #0]
 8011f98:	6054      	str	r4, [r2, #4]
 8011f9a:	e7ca      	b.n	8011f32 <_free_r+0x22>
 8011f9c:	bd38      	pop	{r3, r4, r5, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20008370 	.word	0x20008370

08011fa4 <malloc>:
 8011fa4:	4b02      	ldr	r3, [pc, #8]	@ (8011fb0 <malloc+0xc>)
 8011fa6:	4601      	mov	r1, r0
 8011fa8:	6818      	ldr	r0, [r3, #0]
 8011faa:	f000 b825 	b.w	8011ff8 <_malloc_r>
 8011fae:	bf00      	nop
 8011fb0:	2000007c 	.word	0x2000007c

08011fb4 <sbrk_aligned>:
 8011fb4:	b570      	push	{r4, r5, r6, lr}
 8011fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8011ff4 <sbrk_aligned+0x40>)
 8011fb8:	460c      	mov	r4, r1
 8011fba:	6831      	ldr	r1, [r6, #0]
 8011fbc:	4605      	mov	r5, r0
 8011fbe:	b911      	cbnz	r1, 8011fc6 <sbrk_aligned+0x12>
 8011fc0:	f000 fcea 	bl	8012998 <_sbrk_r>
 8011fc4:	6030      	str	r0, [r6, #0]
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	4628      	mov	r0, r5
 8011fca:	f000 fce5 	bl	8012998 <_sbrk_r>
 8011fce:	1c43      	adds	r3, r0, #1
 8011fd0:	d103      	bne.n	8011fda <sbrk_aligned+0x26>
 8011fd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	bd70      	pop	{r4, r5, r6, pc}
 8011fda:	1cc4      	adds	r4, r0, #3
 8011fdc:	f024 0403 	bic.w	r4, r4, #3
 8011fe0:	42a0      	cmp	r0, r4
 8011fe2:	d0f8      	beq.n	8011fd6 <sbrk_aligned+0x22>
 8011fe4:	1a21      	subs	r1, r4, r0
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	f000 fcd6 	bl	8012998 <_sbrk_r>
 8011fec:	3001      	adds	r0, #1
 8011fee:	d1f2      	bne.n	8011fd6 <sbrk_aligned+0x22>
 8011ff0:	e7ef      	b.n	8011fd2 <sbrk_aligned+0x1e>
 8011ff2:	bf00      	nop
 8011ff4:	2000836c 	.word	0x2000836c

08011ff8 <_malloc_r>:
 8011ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ffc:	1ccd      	adds	r5, r1, #3
 8011ffe:	f025 0503 	bic.w	r5, r5, #3
 8012002:	3508      	adds	r5, #8
 8012004:	2d0c      	cmp	r5, #12
 8012006:	bf38      	it	cc
 8012008:	250c      	movcc	r5, #12
 801200a:	2d00      	cmp	r5, #0
 801200c:	4606      	mov	r6, r0
 801200e:	db01      	blt.n	8012014 <_malloc_r+0x1c>
 8012010:	42a9      	cmp	r1, r5
 8012012:	d904      	bls.n	801201e <_malloc_r+0x26>
 8012014:	230c      	movs	r3, #12
 8012016:	6033      	str	r3, [r6, #0]
 8012018:	2000      	movs	r0, #0
 801201a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801201e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80120f4 <_malloc_r+0xfc>
 8012022:	f000 f869 	bl	80120f8 <__malloc_lock>
 8012026:	f8d8 3000 	ldr.w	r3, [r8]
 801202a:	461c      	mov	r4, r3
 801202c:	bb44      	cbnz	r4, 8012080 <_malloc_r+0x88>
 801202e:	4629      	mov	r1, r5
 8012030:	4630      	mov	r0, r6
 8012032:	f7ff ffbf 	bl	8011fb4 <sbrk_aligned>
 8012036:	1c43      	adds	r3, r0, #1
 8012038:	4604      	mov	r4, r0
 801203a:	d158      	bne.n	80120ee <_malloc_r+0xf6>
 801203c:	f8d8 4000 	ldr.w	r4, [r8]
 8012040:	4627      	mov	r7, r4
 8012042:	2f00      	cmp	r7, #0
 8012044:	d143      	bne.n	80120ce <_malloc_r+0xd6>
 8012046:	2c00      	cmp	r4, #0
 8012048:	d04b      	beq.n	80120e2 <_malloc_r+0xea>
 801204a:	6823      	ldr	r3, [r4, #0]
 801204c:	4639      	mov	r1, r7
 801204e:	4630      	mov	r0, r6
 8012050:	eb04 0903 	add.w	r9, r4, r3
 8012054:	f000 fca0 	bl	8012998 <_sbrk_r>
 8012058:	4581      	cmp	r9, r0
 801205a:	d142      	bne.n	80120e2 <_malloc_r+0xea>
 801205c:	6821      	ldr	r1, [r4, #0]
 801205e:	1a6d      	subs	r5, r5, r1
 8012060:	4629      	mov	r1, r5
 8012062:	4630      	mov	r0, r6
 8012064:	f7ff ffa6 	bl	8011fb4 <sbrk_aligned>
 8012068:	3001      	adds	r0, #1
 801206a:	d03a      	beq.n	80120e2 <_malloc_r+0xea>
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	442b      	add	r3, r5
 8012070:	6023      	str	r3, [r4, #0]
 8012072:	f8d8 3000 	ldr.w	r3, [r8]
 8012076:	685a      	ldr	r2, [r3, #4]
 8012078:	bb62      	cbnz	r2, 80120d4 <_malloc_r+0xdc>
 801207a:	f8c8 7000 	str.w	r7, [r8]
 801207e:	e00f      	b.n	80120a0 <_malloc_r+0xa8>
 8012080:	6822      	ldr	r2, [r4, #0]
 8012082:	1b52      	subs	r2, r2, r5
 8012084:	d420      	bmi.n	80120c8 <_malloc_r+0xd0>
 8012086:	2a0b      	cmp	r2, #11
 8012088:	d917      	bls.n	80120ba <_malloc_r+0xc2>
 801208a:	1961      	adds	r1, r4, r5
 801208c:	42a3      	cmp	r3, r4
 801208e:	6025      	str	r5, [r4, #0]
 8012090:	bf18      	it	ne
 8012092:	6059      	strne	r1, [r3, #4]
 8012094:	6863      	ldr	r3, [r4, #4]
 8012096:	bf08      	it	eq
 8012098:	f8c8 1000 	streq.w	r1, [r8]
 801209c:	5162      	str	r2, [r4, r5]
 801209e:	604b      	str	r3, [r1, #4]
 80120a0:	4630      	mov	r0, r6
 80120a2:	f000 f82f 	bl	8012104 <__malloc_unlock>
 80120a6:	f104 000b 	add.w	r0, r4, #11
 80120aa:	1d23      	adds	r3, r4, #4
 80120ac:	f020 0007 	bic.w	r0, r0, #7
 80120b0:	1ac2      	subs	r2, r0, r3
 80120b2:	bf1c      	itt	ne
 80120b4:	1a1b      	subne	r3, r3, r0
 80120b6:	50a3      	strne	r3, [r4, r2]
 80120b8:	e7af      	b.n	801201a <_malloc_r+0x22>
 80120ba:	6862      	ldr	r2, [r4, #4]
 80120bc:	42a3      	cmp	r3, r4
 80120be:	bf0c      	ite	eq
 80120c0:	f8c8 2000 	streq.w	r2, [r8]
 80120c4:	605a      	strne	r2, [r3, #4]
 80120c6:	e7eb      	b.n	80120a0 <_malloc_r+0xa8>
 80120c8:	4623      	mov	r3, r4
 80120ca:	6864      	ldr	r4, [r4, #4]
 80120cc:	e7ae      	b.n	801202c <_malloc_r+0x34>
 80120ce:	463c      	mov	r4, r7
 80120d0:	687f      	ldr	r7, [r7, #4]
 80120d2:	e7b6      	b.n	8012042 <_malloc_r+0x4a>
 80120d4:	461a      	mov	r2, r3
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	42a3      	cmp	r3, r4
 80120da:	d1fb      	bne.n	80120d4 <_malloc_r+0xdc>
 80120dc:	2300      	movs	r3, #0
 80120de:	6053      	str	r3, [r2, #4]
 80120e0:	e7de      	b.n	80120a0 <_malloc_r+0xa8>
 80120e2:	230c      	movs	r3, #12
 80120e4:	6033      	str	r3, [r6, #0]
 80120e6:	4630      	mov	r0, r6
 80120e8:	f000 f80c 	bl	8012104 <__malloc_unlock>
 80120ec:	e794      	b.n	8012018 <_malloc_r+0x20>
 80120ee:	6005      	str	r5, [r0, #0]
 80120f0:	e7d6      	b.n	80120a0 <_malloc_r+0xa8>
 80120f2:	bf00      	nop
 80120f4:	20008370 	.word	0x20008370

080120f8 <__malloc_lock>:
 80120f8:	4801      	ldr	r0, [pc, #4]	@ (8012100 <__malloc_lock+0x8>)
 80120fa:	f7ff beda 	b.w	8011eb2 <__retarget_lock_acquire_recursive>
 80120fe:	bf00      	nop
 8012100:	20008368 	.word	0x20008368

08012104 <__malloc_unlock>:
 8012104:	4801      	ldr	r0, [pc, #4]	@ (801210c <__malloc_unlock+0x8>)
 8012106:	f7ff bed5 	b.w	8011eb4 <__retarget_lock_release_recursive>
 801210a:	bf00      	nop
 801210c:	20008368 	.word	0x20008368

08012110 <__sfputc_r>:
 8012110:	6893      	ldr	r3, [r2, #8]
 8012112:	3b01      	subs	r3, #1
 8012114:	2b00      	cmp	r3, #0
 8012116:	b410      	push	{r4}
 8012118:	6093      	str	r3, [r2, #8]
 801211a:	da08      	bge.n	801212e <__sfputc_r+0x1e>
 801211c:	6994      	ldr	r4, [r2, #24]
 801211e:	42a3      	cmp	r3, r4
 8012120:	db01      	blt.n	8012126 <__sfputc_r+0x16>
 8012122:	290a      	cmp	r1, #10
 8012124:	d103      	bne.n	801212e <__sfputc_r+0x1e>
 8012126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801212a:	f7ff bdaa 	b.w	8011c82 <__swbuf_r>
 801212e:	6813      	ldr	r3, [r2, #0]
 8012130:	1c58      	adds	r0, r3, #1
 8012132:	6010      	str	r0, [r2, #0]
 8012134:	7019      	strb	r1, [r3, #0]
 8012136:	4608      	mov	r0, r1
 8012138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801213c:	4770      	bx	lr

0801213e <__sfputs_r>:
 801213e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012140:	4606      	mov	r6, r0
 8012142:	460f      	mov	r7, r1
 8012144:	4614      	mov	r4, r2
 8012146:	18d5      	adds	r5, r2, r3
 8012148:	42ac      	cmp	r4, r5
 801214a:	d101      	bne.n	8012150 <__sfputs_r+0x12>
 801214c:	2000      	movs	r0, #0
 801214e:	e007      	b.n	8012160 <__sfputs_r+0x22>
 8012150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012154:	463a      	mov	r2, r7
 8012156:	4630      	mov	r0, r6
 8012158:	f7ff ffda 	bl	8012110 <__sfputc_r>
 801215c:	1c43      	adds	r3, r0, #1
 801215e:	d1f3      	bne.n	8012148 <__sfputs_r+0xa>
 8012160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012164 <_vfiprintf_r>:
 8012164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012168:	460d      	mov	r5, r1
 801216a:	b09d      	sub	sp, #116	@ 0x74
 801216c:	4614      	mov	r4, r2
 801216e:	4698      	mov	r8, r3
 8012170:	4606      	mov	r6, r0
 8012172:	b118      	cbz	r0, 801217c <_vfiprintf_r+0x18>
 8012174:	6a03      	ldr	r3, [r0, #32]
 8012176:	b90b      	cbnz	r3, 801217c <_vfiprintf_r+0x18>
 8012178:	f7ff fc92 	bl	8011aa0 <__sinit>
 801217c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801217e:	07d9      	lsls	r1, r3, #31
 8012180:	d405      	bmi.n	801218e <_vfiprintf_r+0x2a>
 8012182:	89ab      	ldrh	r3, [r5, #12]
 8012184:	059a      	lsls	r2, r3, #22
 8012186:	d402      	bmi.n	801218e <_vfiprintf_r+0x2a>
 8012188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801218a:	f7ff fe92 	bl	8011eb2 <__retarget_lock_acquire_recursive>
 801218e:	89ab      	ldrh	r3, [r5, #12]
 8012190:	071b      	lsls	r3, r3, #28
 8012192:	d501      	bpl.n	8012198 <_vfiprintf_r+0x34>
 8012194:	692b      	ldr	r3, [r5, #16]
 8012196:	b99b      	cbnz	r3, 80121c0 <_vfiprintf_r+0x5c>
 8012198:	4629      	mov	r1, r5
 801219a:	4630      	mov	r0, r6
 801219c:	f7ff fdb0 	bl	8011d00 <__swsetup_r>
 80121a0:	b170      	cbz	r0, 80121c0 <_vfiprintf_r+0x5c>
 80121a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121a4:	07dc      	lsls	r4, r3, #31
 80121a6:	d504      	bpl.n	80121b2 <_vfiprintf_r+0x4e>
 80121a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121ac:	b01d      	add	sp, #116	@ 0x74
 80121ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b2:	89ab      	ldrh	r3, [r5, #12]
 80121b4:	0598      	lsls	r0, r3, #22
 80121b6:	d4f7      	bmi.n	80121a8 <_vfiprintf_r+0x44>
 80121b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80121ba:	f7ff fe7b 	bl	8011eb4 <__retarget_lock_release_recursive>
 80121be:	e7f3      	b.n	80121a8 <_vfiprintf_r+0x44>
 80121c0:	2300      	movs	r3, #0
 80121c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80121c4:	2320      	movs	r3, #32
 80121c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80121ce:	2330      	movs	r3, #48	@ 0x30
 80121d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012380 <_vfiprintf_r+0x21c>
 80121d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121d8:	f04f 0901 	mov.w	r9, #1
 80121dc:	4623      	mov	r3, r4
 80121de:	469a      	mov	sl, r3
 80121e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121e4:	b10a      	cbz	r2, 80121ea <_vfiprintf_r+0x86>
 80121e6:	2a25      	cmp	r2, #37	@ 0x25
 80121e8:	d1f9      	bne.n	80121de <_vfiprintf_r+0x7a>
 80121ea:	ebba 0b04 	subs.w	fp, sl, r4
 80121ee:	d00b      	beq.n	8012208 <_vfiprintf_r+0xa4>
 80121f0:	465b      	mov	r3, fp
 80121f2:	4622      	mov	r2, r4
 80121f4:	4629      	mov	r1, r5
 80121f6:	4630      	mov	r0, r6
 80121f8:	f7ff ffa1 	bl	801213e <__sfputs_r>
 80121fc:	3001      	adds	r0, #1
 80121fe:	f000 80a7 	beq.w	8012350 <_vfiprintf_r+0x1ec>
 8012202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012204:	445a      	add	r2, fp
 8012206:	9209      	str	r2, [sp, #36]	@ 0x24
 8012208:	f89a 3000 	ldrb.w	r3, [sl]
 801220c:	2b00      	cmp	r3, #0
 801220e:	f000 809f 	beq.w	8012350 <_vfiprintf_r+0x1ec>
 8012212:	2300      	movs	r3, #0
 8012214:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801221c:	f10a 0a01 	add.w	sl, sl, #1
 8012220:	9304      	str	r3, [sp, #16]
 8012222:	9307      	str	r3, [sp, #28]
 8012224:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012228:	931a      	str	r3, [sp, #104]	@ 0x68
 801222a:	4654      	mov	r4, sl
 801222c:	2205      	movs	r2, #5
 801222e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012232:	4853      	ldr	r0, [pc, #332]	@ (8012380 <_vfiprintf_r+0x21c>)
 8012234:	f7ed ffec 	bl	8000210 <memchr>
 8012238:	9a04      	ldr	r2, [sp, #16]
 801223a:	b9d8      	cbnz	r0, 8012274 <_vfiprintf_r+0x110>
 801223c:	06d1      	lsls	r1, r2, #27
 801223e:	bf44      	itt	mi
 8012240:	2320      	movmi	r3, #32
 8012242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012246:	0713      	lsls	r3, r2, #28
 8012248:	bf44      	itt	mi
 801224a:	232b      	movmi	r3, #43	@ 0x2b
 801224c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012250:	f89a 3000 	ldrb.w	r3, [sl]
 8012254:	2b2a      	cmp	r3, #42	@ 0x2a
 8012256:	d015      	beq.n	8012284 <_vfiprintf_r+0x120>
 8012258:	9a07      	ldr	r2, [sp, #28]
 801225a:	4654      	mov	r4, sl
 801225c:	2000      	movs	r0, #0
 801225e:	f04f 0c0a 	mov.w	ip, #10
 8012262:	4621      	mov	r1, r4
 8012264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012268:	3b30      	subs	r3, #48	@ 0x30
 801226a:	2b09      	cmp	r3, #9
 801226c:	d94b      	bls.n	8012306 <_vfiprintf_r+0x1a2>
 801226e:	b1b0      	cbz	r0, 801229e <_vfiprintf_r+0x13a>
 8012270:	9207      	str	r2, [sp, #28]
 8012272:	e014      	b.n	801229e <_vfiprintf_r+0x13a>
 8012274:	eba0 0308 	sub.w	r3, r0, r8
 8012278:	fa09 f303 	lsl.w	r3, r9, r3
 801227c:	4313      	orrs	r3, r2
 801227e:	9304      	str	r3, [sp, #16]
 8012280:	46a2      	mov	sl, r4
 8012282:	e7d2      	b.n	801222a <_vfiprintf_r+0xc6>
 8012284:	9b03      	ldr	r3, [sp, #12]
 8012286:	1d19      	adds	r1, r3, #4
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	9103      	str	r1, [sp, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	bfbb      	ittet	lt
 8012290:	425b      	neglt	r3, r3
 8012292:	f042 0202 	orrlt.w	r2, r2, #2
 8012296:	9307      	strge	r3, [sp, #28]
 8012298:	9307      	strlt	r3, [sp, #28]
 801229a:	bfb8      	it	lt
 801229c:	9204      	strlt	r2, [sp, #16]
 801229e:	7823      	ldrb	r3, [r4, #0]
 80122a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80122a2:	d10a      	bne.n	80122ba <_vfiprintf_r+0x156>
 80122a4:	7863      	ldrb	r3, [r4, #1]
 80122a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80122a8:	d132      	bne.n	8012310 <_vfiprintf_r+0x1ac>
 80122aa:	9b03      	ldr	r3, [sp, #12]
 80122ac:	1d1a      	adds	r2, r3, #4
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	9203      	str	r2, [sp, #12]
 80122b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122b6:	3402      	adds	r4, #2
 80122b8:	9305      	str	r3, [sp, #20]
 80122ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012390 <_vfiprintf_r+0x22c>
 80122be:	7821      	ldrb	r1, [r4, #0]
 80122c0:	2203      	movs	r2, #3
 80122c2:	4650      	mov	r0, sl
 80122c4:	f7ed ffa4 	bl	8000210 <memchr>
 80122c8:	b138      	cbz	r0, 80122da <_vfiprintf_r+0x176>
 80122ca:	9b04      	ldr	r3, [sp, #16]
 80122cc:	eba0 000a 	sub.w	r0, r0, sl
 80122d0:	2240      	movs	r2, #64	@ 0x40
 80122d2:	4082      	lsls	r2, r0
 80122d4:	4313      	orrs	r3, r2
 80122d6:	3401      	adds	r4, #1
 80122d8:	9304      	str	r3, [sp, #16]
 80122da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122de:	4829      	ldr	r0, [pc, #164]	@ (8012384 <_vfiprintf_r+0x220>)
 80122e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122e4:	2206      	movs	r2, #6
 80122e6:	f7ed ff93 	bl	8000210 <memchr>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d03f      	beq.n	801236e <_vfiprintf_r+0x20a>
 80122ee:	4b26      	ldr	r3, [pc, #152]	@ (8012388 <_vfiprintf_r+0x224>)
 80122f0:	bb1b      	cbnz	r3, 801233a <_vfiprintf_r+0x1d6>
 80122f2:	9b03      	ldr	r3, [sp, #12]
 80122f4:	3307      	adds	r3, #7
 80122f6:	f023 0307 	bic.w	r3, r3, #7
 80122fa:	3308      	adds	r3, #8
 80122fc:	9303      	str	r3, [sp, #12]
 80122fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012300:	443b      	add	r3, r7
 8012302:	9309      	str	r3, [sp, #36]	@ 0x24
 8012304:	e76a      	b.n	80121dc <_vfiprintf_r+0x78>
 8012306:	fb0c 3202 	mla	r2, ip, r2, r3
 801230a:	460c      	mov	r4, r1
 801230c:	2001      	movs	r0, #1
 801230e:	e7a8      	b.n	8012262 <_vfiprintf_r+0xfe>
 8012310:	2300      	movs	r3, #0
 8012312:	3401      	adds	r4, #1
 8012314:	9305      	str	r3, [sp, #20]
 8012316:	4619      	mov	r1, r3
 8012318:	f04f 0c0a 	mov.w	ip, #10
 801231c:	4620      	mov	r0, r4
 801231e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012322:	3a30      	subs	r2, #48	@ 0x30
 8012324:	2a09      	cmp	r2, #9
 8012326:	d903      	bls.n	8012330 <_vfiprintf_r+0x1cc>
 8012328:	2b00      	cmp	r3, #0
 801232a:	d0c6      	beq.n	80122ba <_vfiprintf_r+0x156>
 801232c:	9105      	str	r1, [sp, #20]
 801232e:	e7c4      	b.n	80122ba <_vfiprintf_r+0x156>
 8012330:	fb0c 2101 	mla	r1, ip, r1, r2
 8012334:	4604      	mov	r4, r0
 8012336:	2301      	movs	r3, #1
 8012338:	e7f0      	b.n	801231c <_vfiprintf_r+0x1b8>
 801233a:	ab03      	add	r3, sp, #12
 801233c:	9300      	str	r3, [sp, #0]
 801233e:	462a      	mov	r2, r5
 8012340:	4b12      	ldr	r3, [pc, #72]	@ (801238c <_vfiprintf_r+0x228>)
 8012342:	a904      	add	r1, sp, #16
 8012344:	4630      	mov	r0, r6
 8012346:	f3af 8000 	nop.w
 801234a:	4607      	mov	r7, r0
 801234c:	1c78      	adds	r0, r7, #1
 801234e:	d1d6      	bne.n	80122fe <_vfiprintf_r+0x19a>
 8012350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012352:	07d9      	lsls	r1, r3, #31
 8012354:	d405      	bmi.n	8012362 <_vfiprintf_r+0x1fe>
 8012356:	89ab      	ldrh	r3, [r5, #12]
 8012358:	059a      	lsls	r2, r3, #22
 801235a:	d402      	bmi.n	8012362 <_vfiprintf_r+0x1fe>
 801235c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801235e:	f7ff fda9 	bl	8011eb4 <__retarget_lock_release_recursive>
 8012362:	89ab      	ldrh	r3, [r5, #12]
 8012364:	065b      	lsls	r3, r3, #25
 8012366:	f53f af1f 	bmi.w	80121a8 <_vfiprintf_r+0x44>
 801236a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801236c:	e71e      	b.n	80121ac <_vfiprintf_r+0x48>
 801236e:	ab03      	add	r3, sp, #12
 8012370:	9300      	str	r3, [sp, #0]
 8012372:	462a      	mov	r2, r5
 8012374:	4b05      	ldr	r3, [pc, #20]	@ (801238c <_vfiprintf_r+0x228>)
 8012376:	a904      	add	r1, sp, #16
 8012378:	4630      	mov	r0, r6
 801237a:	f000 f879 	bl	8012470 <_printf_i>
 801237e:	e7e4      	b.n	801234a <_vfiprintf_r+0x1e6>
 8012380:	08016121 	.word	0x08016121
 8012384:	0801612b 	.word	0x0801612b
 8012388:	00000000 	.word	0x00000000
 801238c:	0801213f 	.word	0x0801213f
 8012390:	08016127 	.word	0x08016127

08012394 <_printf_common>:
 8012394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012398:	4616      	mov	r6, r2
 801239a:	4698      	mov	r8, r3
 801239c:	688a      	ldr	r2, [r1, #8]
 801239e:	690b      	ldr	r3, [r1, #16]
 80123a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80123a4:	4293      	cmp	r3, r2
 80123a6:	bfb8      	it	lt
 80123a8:	4613      	movlt	r3, r2
 80123aa:	6033      	str	r3, [r6, #0]
 80123ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80123b0:	4607      	mov	r7, r0
 80123b2:	460c      	mov	r4, r1
 80123b4:	b10a      	cbz	r2, 80123ba <_printf_common+0x26>
 80123b6:	3301      	adds	r3, #1
 80123b8:	6033      	str	r3, [r6, #0]
 80123ba:	6823      	ldr	r3, [r4, #0]
 80123bc:	0699      	lsls	r1, r3, #26
 80123be:	bf42      	ittt	mi
 80123c0:	6833      	ldrmi	r3, [r6, #0]
 80123c2:	3302      	addmi	r3, #2
 80123c4:	6033      	strmi	r3, [r6, #0]
 80123c6:	6825      	ldr	r5, [r4, #0]
 80123c8:	f015 0506 	ands.w	r5, r5, #6
 80123cc:	d106      	bne.n	80123dc <_printf_common+0x48>
 80123ce:	f104 0a19 	add.w	sl, r4, #25
 80123d2:	68e3      	ldr	r3, [r4, #12]
 80123d4:	6832      	ldr	r2, [r6, #0]
 80123d6:	1a9b      	subs	r3, r3, r2
 80123d8:	42ab      	cmp	r3, r5
 80123da:	dc26      	bgt.n	801242a <_printf_common+0x96>
 80123dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80123e0:	6822      	ldr	r2, [r4, #0]
 80123e2:	3b00      	subs	r3, #0
 80123e4:	bf18      	it	ne
 80123e6:	2301      	movne	r3, #1
 80123e8:	0692      	lsls	r2, r2, #26
 80123ea:	d42b      	bmi.n	8012444 <_printf_common+0xb0>
 80123ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80123f0:	4641      	mov	r1, r8
 80123f2:	4638      	mov	r0, r7
 80123f4:	47c8      	blx	r9
 80123f6:	3001      	adds	r0, #1
 80123f8:	d01e      	beq.n	8012438 <_printf_common+0xa4>
 80123fa:	6823      	ldr	r3, [r4, #0]
 80123fc:	6922      	ldr	r2, [r4, #16]
 80123fe:	f003 0306 	and.w	r3, r3, #6
 8012402:	2b04      	cmp	r3, #4
 8012404:	bf02      	ittt	eq
 8012406:	68e5      	ldreq	r5, [r4, #12]
 8012408:	6833      	ldreq	r3, [r6, #0]
 801240a:	1aed      	subeq	r5, r5, r3
 801240c:	68a3      	ldr	r3, [r4, #8]
 801240e:	bf0c      	ite	eq
 8012410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012414:	2500      	movne	r5, #0
 8012416:	4293      	cmp	r3, r2
 8012418:	bfc4      	itt	gt
 801241a:	1a9b      	subgt	r3, r3, r2
 801241c:	18ed      	addgt	r5, r5, r3
 801241e:	2600      	movs	r6, #0
 8012420:	341a      	adds	r4, #26
 8012422:	42b5      	cmp	r5, r6
 8012424:	d11a      	bne.n	801245c <_printf_common+0xc8>
 8012426:	2000      	movs	r0, #0
 8012428:	e008      	b.n	801243c <_printf_common+0xa8>
 801242a:	2301      	movs	r3, #1
 801242c:	4652      	mov	r2, sl
 801242e:	4641      	mov	r1, r8
 8012430:	4638      	mov	r0, r7
 8012432:	47c8      	blx	r9
 8012434:	3001      	adds	r0, #1
 8012436:	d103      	bne.n	8012440 <_printf_common+0xac>
 8012438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801243c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012440:	3501      	adds	r5, #1
 8012442:	e7c6      	b.n	80123d2 <_printf_common+0x3e>
 8012444:	18e1      	adds	r1, r4, r3
 8012446:	1c5a      	adds	r2, r3, #1
 8012448:	2030      	movs	r0, #48	@ 0x30
 801244a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801244e:	4422      	add	r2, r4
 8012450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012458:	3302      	adds	r3, #2
 801245a:	e7c7      	b.n	80123ec <_printf_common+0x58>
 801245c:	2301      	movs	r3, #1
 801245e:	4622      	mov	r2, r4
 8012460:	4641      	mov	r1, r8
 8012462:	4638      	mov	r0, r7
 8012464:	47c8      	blx	r9
 8012466:	3001      	adds	r0, #1
 8012468:	d0e6      	beq.n	8012438 <_printf_common+0xa4>
 801246a:	3601      	adds	r6, #1
 801246c:	e7d9      	b.n	8012422 <_printf_common+0x8e>
	...

08012470 <_printf_i>:
 8012470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012474:	7e0f      	ldrb	r7, [r1, #24]
 8012476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012478:	2f78      	cmp	r7, #120	@ 0x78
 801247a:	4691      	mov	r9, r2
 801247c:	4680      	mov	r8, r0
 801247e:	460c      	mov	r4, r1
 8012480:	469a      	mov	sl, r3
 8012482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012486:	d807      	bhi.n	8012498 <_printf_i+0x28>
 8012488:	2f62      	cmp	r7, #98	@ 0x62
 801248a:	d80a      	bhi.n	80124a2 <_printf_i+0x32>
 801248c:	2f00      	cmp	r7, #0
 801248e:	f000 80d1 	beq.w	8012634 <_printf_i+0x1c4>
 8012492:	2f58      	cmp	r7, #88	@ 0x58
 8012494:	f000 80b8 	beq.w	8012608 <_printf_i+0x198>
 8012498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801249c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80124a0:	e03a      	b.n	8012518 <_printf_i+0xa8>
 80124a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80124a6:	2b15      	cmp	r3, #21
 80124a8:	d8f6      	bhi.n	8012498 <_printf_i+0x28>
 80124aa:	a101      	add	r1, pc, #4	@ (adr r1, 80124b0 <_printf_i+0x40>)
 80124ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124b0:	08012509 	.word	0x08012509
 80124b4:	0801251d 	.word	0x0801251d
 80124b8:	08012499 	.word	0x08012499
 80124bc:	08012499 	.word	0x08012499
 80124c0:	08012499 	.word	0x08012499
 80124c4:	08012499 	.word	0x08012499
 80124c8:	0801251d 	.word	0x0801251d
 80124cc:	08012499 	.word	0x08012499
 80124d0:	08012499 	.word	0x08012499
 80124d4:	08012499 	.word	0x08012499
 80124d8:	08012499 	.word	0x08012499
 80124dc:	0801261b 	.word	0x0801261b
 80124e0:	08012547 	.word	0x08012547
 80124e4:	080125d5 	.word	0x080125d5
 80124e8:	08012499 	.word	0x08012499
 80124ec:	08012499 	.word	0x08012499
 80124f0:	0801263d 	.word	0x0801263d
 80124f4:	08012499 	.word	0x08012499
 80124f8:	08012547 	.word	0x08012547
 80124fc:	08012499 	.word	0x08012499
 8012500:	08012499 	.word	0x08012499
 8012504:	080125dd 	.word	0x080125dd
 8012508:	6833      	ldr	r3, [r6, #0]
 801250a:	1d1a      	adds	r2, r3, #4
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	6032      	str	r2, [r6, #0]
 8012510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012518:	2301      	movs	r3, #1
 801251a:	e09c      	b.n	8012656 <_printf_i+0x1e6>
 801251c:	6833      	ldr	r3, [r6, #0]
 801251e:	6820      	ldr	r0, [r4, #0]
 8012520:	1d19      	adds	r1, r3, #4
 8012522:	6031      	str	r1, [r6, #0]
 8012524:	0606      	lsls	r6, r0, #24
 8012526:	d501      	bpl.n	801252c <_printf_i+0xbc>
 8012528:	681d      	ldr	r5, [r3, #0]
 801252a:	e003      	b.n	8012534 <_printf_i+0xc4>
 801252c:	0645      	lsls	r5, r0, #25
 801252e:	d5fb      	bpl.n	8012528 <_printf_i+0xb8>
 8012530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012534:	2d00      	cmp	r5, #0
 8012536:	da03      	bge.n	8012540 <_printf_i+0xd0>
 8012538:	232d      	movs	r3, #45	@ 0x2d
 801253a:	426d      	negs	r5, r5
 801253c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012540:	4858      	ldr	r0, [pc, #352]	@ (80126a4 <_printf_i+0x234>)
 8012542:	230a      	movs	r3, #10
 8012544:	e011      	b.n	801256a <_printf_i+0xfa>
 8012546:	6821      	ldr	r1, [r4, #0]
 8012548:	6833      	ldr	r3, [r6, #0]
 801254a:	0608      	lsls	r0, r1, #24
 801254c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012550:	d402      	bmi.n	8012558 <_printf_i+0xe8>
 8012552:	0649      	lsls	r1, r1, #25
 8012554:	bf48      	it	mi
 8012556:	b2ad      	uxthmi	r5, r5
 8012558:	2f6f      	cmp	r7, #111	@ 0x6f
 801255a:	4852      	ldr	r0, [pc, #328]	@ (80126a4 <_printf_i+0x234>)
 801255c:	6033      	str	r3, [r6, #0]
 801255e:	bf14      	ite	ne
 8012560:	230a      	movne	r3, #10
 8012562:	2308      	moveq	r3, #8
 8012564:	2100      	movs	r1, #0
 8012566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801256a:	6866      	ldr	r6, [r4, #4]
 801256c:	60a6      	str	r6, [r4, #8]
 801256e:	2e00      	cmp	r6, #0
 8012570:	db05      	blt.n	801257e <_printf_i+0x10e>
 8012572:	6821      	ldr	r1, [r4, #0]
 8012574:	432e      	orrs	r6, r5
 8012576:	f021 0104 	bic.w	r1, r1, #4
 801257a:	6021      	str	r1, [r4, #0]
 801257c:	d04b      	beq.n	8012616 <_printf_i+0x1a6>
 801257e:	4616      	mov	r6, r2
 8012580:	fbb5 f1f3 	udiv	r1, r5, r3
 8012584:	fb03 5711 	mls	r7, r3, r1, r5
 8012588:	5dc7      	ldrb	r7, [r0, r7]
 801258a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801258e:	462f      	mov	r7, r5
 8012590:	42bb      	cmp	r3, r7
 8012592:	460d      	mov	r5, r1
 8012594:	d9f4      	bls.n	8012580 <_printf_i+0x110>
 8012596:	2b08      	cmp	r3, #8
 8012598:	d10b      	bne.n	80125b2 <_printf_i+0x142>
 801259a:	6823      	ldr	r3, [r4, #0]
 801259c:	07df      	lsls	r7, r3, #31
 801259e:	d508      	bpl.n	80125b2 <_printf_i+0x142>
 80125a0:	6923      	ldr	r3, [r4, #16]
 80125a2:	6861      	ldr	r1, [r4, #4]
 80125a4:	4299      	cmp	r1, r3
 80125a6:	bfde      	ittt	le
 80125a8:	2330      	movle	r3, #48	@ 0x30
 80125aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80125ae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80125b2:	1b92      	subs	r2, r2, r6
 80125b4:	6122      	str	r2, [r4, #16]
 80125b6:	f8cd a000 	str.w	sl, [sp]
 80125ba:	464b      	mov	r3, r9
 80125bc:	aa03      	add	r2, sp, #12
 80125be:	4621      	mov	r1, r4
 80125c0:	4640      	mov	r0, r8
 80125c2:	f7ff fee7 	bl	8012394 <_printf_common>
 80125c6:	3001      	adds	r0, #1
 80125c8:	d14a      	bne.n	8012660 <_printf_i+0x1f0>
 80125ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80125ce:	b004      	add	sp, #16
 80125d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125d4:	6823      	ldr	r3, [r4, #0]
 80125d6:	f043 0320 	orr.w	r3, r3, #32
 80125da:	6023      	str	r3, [r4, #0]
 80125dc:	4832      	ldr	r0, [pc, #200]	@ (80126a8 <_printf_i+0x238>)
 80125de:	2778      	movs	r7, #120	@ 0x78
 80125e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80125e4:	6823      	ldr	r3, [r4, #0]
 80125e6:	6831      	ldr	r1, [r6, #0]
 80125e8:	061f      	lsls	r7, r3, #24
 80125ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80125ee:	d402      	bmi.n	80125f6 <_printf_i+0x186>
 80125f0:	065f      	lsls	r7, r3, #25
 80125f2:	bf48      	it	mi
 80125f4:	b2ad      	uxthmi	r5, r5
 80125f6:	6031      	str	r1, [r6, #0]
 80125f8:	07d9      	lsls	r1, r3, #31
 80125fa:	bf44      	itt	mi
 80125fc:	f043 0320 	orrmi.w	r3, r3, #32
 8012600:	6023      	strmi	r3, [r4, #0]
 8012602:	b11d      	cbz	r5, 801260c <_printf_i+0x19c>
 8012604:	2310      	movs	r3, #16
 8012606:	e7ad      	b.n	8012564 <_printf_i+0xf4>
 8012608:	4826      	ldr	r0, [pc, #152]	@ (80126a4 <_printf_i+0x234>)
 801260a:	e7e9      	b.n	80125e0 <_printf_i+0x170>
 801260c:	6823      	ldr	r3, [r4, #0]
 801260e:	f023 0320 	bic.w	r3, r3, #32
 8012612:	6023      	str	r3, [r4, #0]
 8012614:	e7f6      	b.n	8012604 <_printf_i+0x194>
 8012616:	4616      	mov	r6, r2
 8012618:	e7bd      	b.n	8012596 <_printf_i+0x126>
 801261a:	6833      	ldr	r3, [r6, #0]
 801261c:	6825      	ldr	r5, [r4, #0]
 801261e:	6961      	ldr	r1, [r4, #20]
 8012620:	1d18      	adds	r0, r3, #4
 8012622:	6030      	str	r0, [r6, #0]
 8012624:	062e      	lsls	r6, r5, #24
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	d501      	bpl.n	801262e <_printf_i+0x1be>
 801262a:	6019      	str	r1, [r3, #0]
 801262c:	e002      	b.n	8012634 <_printf_i+0x1c4>
 801262e:	0668      	lsls	r0, r5, #25
 8012630:	d5fb      	bpl.n	801262a <_printf_i+0x1ba>
 8012632:	8019      	strh	r1, [r3, #0]
 8012634:	2300      	movs	r3, #0
 8012636:	6123      	str	r3, [r4, #16]
 8012638:	4616      	mov	r6, r2
 801263a:	e7bc      	b.n	80125b6 <_printf_i+0x146>
 801263c:	6833      	ldr	r3, [r6, #0]
 801263e:	1d1a      	adds	r2, r3, #4
 8012640:	6032      	str	r2, [r6, #0]
 8012642:	681e      	ldr	r6, [r3, #0]
 8012644:	6862      	ldr	r2, [r4, #4]
 8012646:	2100      	movs	r1, #0
 8012648:	4630      	mov	r0, r6
 801264a:	f7ed fde1 	bl	8000210 <memchr>
 801264e:	b108      	cbz	r0, 8012654 <_printf_i+0x1e4>
 8012650:	1b80      	subs	r0, r0, r6
 8012652:	6060      	str	r0, [r4, #4]
 8012654:	6863      	ldr	r3, [r4, #4]
 8012656:	6123      	str	r3, [r4, #16]
 8012658:	2300      	movs	r3, #0
 801265a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801265e:	e7aa      	b.n	80125b6 <_printf_i+0x146>
 8012660:	6923      	ldr	r3, [r4, #16]
 8012662:	4632      	mov	r2, r6
 8012664:	4649      	mov	r1, r9
 8012666:	4640      	mov	r0, r8
 8012668:	47d0      	blx	sl
 801266a:	3001      	adds	r0, #1
 801266c:	d0ad      	beq.n	80125ca <_printf_i+0x15a>
 801266e:	6823      	ldr	r3, [r4, #0]
 8012670:	079b      	lsls	r3, r3, #30
 8012672:	d413      	bmi.n	801269c <_printf_i+0x22c>
 8012674:	68e0      	ldr	r0, [r4, #12]
 8012676:	9b03      	ldr	r3, [sp, #12]
 8012678:	4298      	cmp	r0, r3
 801267a:	bfb8      	it	lt
 801267c:	4618      	movlt	r0, r3
 801267e:	e7a6      	b.n	80125ce <_printf_i+0x15e>
 8012680:	2301      	movs	r3, #1
 8012682:	4632      	mov	r2, r6
 8012684:	4649      	mov	r1, r9
 8012686:	4640      	mov	r0, r8
 8012688:	47d0      	blx	sl
 801268a:	3001      	adds	r0, #1
 801268c:	d09d      	beq.n	80125ca <_printf_i+0x15a>
 801268e:	3501      	adds	r5, #1
 8012690:	68e3      	ldr	r3, [r4, #12]
 8012692:	9903      	ldr	r1, [sp, #12]
 8012694:	1a5b      	subs	r3, r3, r1
 8012696:	42ab      	cmp	r3, r5
 8012698:	dcf2      	bgt.n	8012680 <_printf_i+0x210>
 801269a:	e7eb      	b.n	8012674 <_printf_i+0x204>
 801269c:	2500      	movs	r5, #0
 801269e:	f104 0619 	add.w	r6, r4, #25
 80126a2:	e7f5      	b.n	8012690 <_printf_i+0x220>
 80126a4:	08016132 	.word	0x08016132
 80126a8:	08016143 	.word	0x08016143

080126ac <__sflush_r>:
 80126ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b4:	0716      	lsls	r6, r2, #28
 80126b6:	4605      	mov	r5, r0
 80126b8:	460c      	mov	r4, r1
 80126ba:	d454      	bmi.n	8012766 <__sflush_r+0xba>
 80126bc:	684b      	ldr	r3, [r1, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dc02      	bgt.n	80126c8 <__sflush_r+0x1c>
 80126c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dd48      	ble.n	801275a <__sflush_r+0xae>
 80126c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126ca:	2e00      	cmp	r6, #0
 80126cc:	d045      	beq.n	801275a <__sflush_r+0xae>
 80126ce:	2300      	movs	r3, #0
 80126d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126d4:	682f      	ldr	r7, [r5, #0]
 80126d6:	6a21      	ldr	r1, [r4, #32]
 80126d8:	602b      	str	r3, [r5, #0]
 80126da:	d030      	beq.n	801273e <__sflush_r+0x92>
 80126dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126de:	89a3      	ldrh	r3, [r4, #12]
 80126e0:	0759      	lsls	r1, r3, #29
 80126e2:	d505      	bpl.n	80126f0 <__sflush_r+0x44>
 80126e4:	6863      	ldr	r3, [r4, #4]
 80126e6:	1ad2      	subs	r2, r2, r3
 80126e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126ea:	b10b      	cbz	r3, 80126f0 <__sflush_r+0x44>
 80126ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126ee:	1ad2      	subs	r2, r2, r3
 80126f0:	2300      	movs	r3, #0
 80126f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126f4:	6a21      	ldr	r1, [r4, #32]
 80126f6:	4628      	mov	r0, r5
 80126f8:	47b0      	blx	r6
 80126fa:	1c43      	adds	r3, r0, #1
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	d106      	bne.n	801270e <__sflush_r+0x62>
 8012700:	6829      	ldr	r1, [r5, #0]
 8012702:	291d      	cmp	r1, #29
 8012704:	d82b      	bhi.n	801275e <__sflush_r+0xb2>
 8012706:	4a2a      	ldr	r2, [pc, #168]	@ (80127b0 <__sflush_r+0x104>)
 8012708:	40ca      	lsrs	r2, r1
 801270a:	07d6      	lsls	r6, r2, #31
 801270c:	d527      	bpl.n	801275e <__sflush_r+0xb2>
 801270e:	2200      	movs	r2, #0
 8012710:	6062      	str	r2, [r4, #4]
 8012712:	04d9      	lsls	r1, r3, #19
 8012714:	6922      	ldr	r2, [r4, #16]
 8012716:	6022      	str	r2, [r4, #0]
 8012718:	d504      	bpl.n	8012724 <__sflush_r+0x78>
 801271a:	1c42      	adds	r2, r0, #1
 801271c:	d101      	bne.n	8012722 <__sflush_r+0x76>
 801271e:	682b      	ldr	r3, [r5, #0]
 8012720:	b903      	cbnz	r3, 8012724 <__sflush_r+0x78>
 8012722:	6560      	str	r0, [r4, #84]	@ 0x54
 8012724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012726:	602f      	str	r7, [r5, #0]
 8012728:	b1b9      	cbz	r1, 801275a <__sflush_r+0xae>
 801272a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801272e:	4299      	cmp	r1, r3
 8012730:	d002      	beq.n	8012738 <__sflush_r+0x8c>
 8012732:	4628      	mov	r0, r5
 8012734:	f7ff fbec 	bl	8011f10 <_free_r>
 8012738:	2300      	movs	r3, #0
 801273a:	6363      	str	r3, [r4, #52]	@ 0x34
 801273c:	e00d      	b.n	801275a <__sflush_r+0xae>
 801273e:	2301      	movs	r3, #1
 8012740:	4628      	mov	r0, r5
 8012742:	47b0      	blx	r6
 8012744:	4602      	mov	r2, r0
 8012746:	1c50      	adds	r0, r2, #1
 8012748:	d1c9      	bne.n	80126de <__sflush_r+0x32>
 801274a:	682b      	ldr	r3, [r5, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d0c6      	beq.n	80126de <__sflush_r+0x32>
 8012750:	2b1d      	cmp	r3, #29
 8012752:	d001      	beq.n	8012758 <__sflush_r+0xac>
 8012754:	2b16      	cmp	r3, #22
 8012756:	d11e      	bne.n	8012796 <__sflush_r+0xea>
 8012758:	602f      	str	r7, [r5, #0]
 801275a:	2000      	movs	r0, #0
 801275c:	e022      	b.n	80127a4 <__sflush_r+0xf8>
 801275e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012762:	b21b      	sxth	r3, r3
 8012764:	e01b      	b.n	801279e <__sflush_r+0xf2>
 8012766:	690f      	ldr	r7, [r1, #16]
 8012768:	2f00      	cmp	r7, #0
 801276a:	d0f6      	beq.n	801275a <__sflush_r+0xae>
 801276c:	0793      	lsls	r3, r2, #30
 801276e:	680e      	ldr	r6, [r1, #0]
 8012770:	bf08      	it	eq
 8012772:	694b      	ldreq	r3, [r1, #20]
 8012774:	600f      	str	r7, [r1, #0]
 8012776:	bf18      	it	ne
 8012778:	2300      	movne	r3, #0
 801277a:	eba6 0807 	sub.w	r8, r6, r7
 801277e:	608b      	str	r3, [r1, #8]
 8012780:	f1b8 0f00 	cmp.w	r8, #0
 8012784:	dde9      	ble.n	801275a <__sflush_r+0xae>
 8012786:	6a21      	ldr	r1, [r4, #32]
 8012788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801278a:	4643      	mov	r3, r8
 801278c:	463a      	mov	r2, r7
 801278e:	4628      	mov	r0, r5
 8012790:	47b0      	blx	r6
 8012792:	2800      	cmp	r0, #0
 8012794:	dc08      	bgt.n	80127a8 <__sflush_r+0xfc>
 8012796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801279a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801279e:	81a3      	strh	r3, [r4, #12]
 80127a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	4407      	add	r7, r0
 80127aa:	eba8 0800 	sub.w	r8, r8, r0
 80127ae:	e7e7      	b.n	8012780 <__sflush_r+0xd4>
 80127b0:	20400001 	.word	0x20400001

080127b4 <_fflush_r>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	690b      	ldr	r3, [r1, #16]
 80127b8:	4605      	mov	r5, r0
 80127ba:	460c      	mov	r4, r1
 80127bc:	b913      	cbnz	r3, 80127c4 <_fflush_r+0x10>
 80127be:	2500      	movs	r5, #0
 80127c0:	4628      	mov	r0, r5
 80127c2:	bd38      	pop	{r3, r4, r5, pc}
 80127c4:	b118      	cbz	r0, 80127ce <_fflush_r+0x1a>
 80127c6:	6a03      	ldr	r3, [r0, #32]
 80127c8:	b90b      	cbnz	r3, 80127ce <_fflush_r+0x1a>
 80127ca:	f7ff f969 	bl	8011aa0 <__sinit>
 80127ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0f3      	beq.n	80127be <_fflush_r+0xa>
 80127d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127d8:	07d0      	lsls	r0, r2, #31
 80127da:	d404      	bmi.n	80127e6 <_fflush_r+0x32>
 80127dc:	0599      	lsls	r1, r3, #22
 80127de:	d402      	bmi.n	80127e6 <_fflush_r+0x32>
 80127e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127e2:	f7ff fb66 	bl	8011eb2 <__retarget_lock_acquire_recursive>
 80127e6:	4628      	mov	r0, r5
 80127e8:	4621      	mov	r1, r4
 80127ea:	f7ff ff5f 	bl	80126ac <__sflush_r>
 80127ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127f0:	07da      	lsls	r2, r3, #31
 80127f2:	4605      	mov	r5, r0
 80127f4:	d4e4      	bmi.n	80127c0 <_fflush_r+0xc>
 80127f6:	89a3      	ldrh	r3, [r4, #12]
 80127f8:	059b      	lsls	r3, r3, #22
 80127fa:	d4e1      	bmi.n	80127c0 <_fflush_r+0xc>
 80127fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127fe:	f7ff fb59 	bl	8011eb4 <__retarget_lock_release_recursive>
 8012802:	e7dd      	b.n	80127c0 <_fflush_r+0xc>

08012804 <fiprintf>:
 8012804:	b40e      	push	{r1, r2, r3}
 8012806:	b503      	push	{r0, r1, lr}
 8012808:	4601      	mov	r1, r0
 801280a:	ab03      	add	r3, sp, #12
 801280c:	4805      	ldr	r0, [pc, #20]	@ (8012824 <fiprintf+0x20>)
 801280e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012812:	6800      	ldr	r0, [r0, #0]
 8012814:	9301      	str	r3, [sp, #4]
 8012816:	f7ff fca5 	bl	8012164 <_vfiprintf_r>
 801281a:	b002      	add	sp, #8
 801281c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012820:	b003      	add	sp, #12
 8012822:	4770      	bx	lr
 8012824:	2000007c 	.word	0x2000007c

08012828 <__swhatbuf_r>:
 8012828:	b570      	push	{r4, r5, r6, lr}
 801282a:	460c      	mov	r4, r1
 801282c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012830:	2900      	cmp	r1, #0
 8012832:	b096      	sub	sp, #88	@ 0x58
 8012834:	4615      	mov	r5, r2
 8012836:	461e      	mov	r6, r3
 8012838:	da0d      	bge.n	8012856 <__swhatbuf_r+0x2e>
 801283a:	89a3      	ldrh	r3, [r4, #12]
 801283c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012840:	f04f 0100 	mov.w	r1, #0
 8012844:	bf14      	ite	ne
 8012846:	2340      	movne	r3, #64	@ 0x40
 8012848:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801284c:	2000      	movs	r0, #0
 801284e:	6031      	str	r1, [r6, #0]
 8012850:	602b      	str	r3, [r5, #0]
 8012852:	b016      	add	sp, #88	@ 0x58
 8012854:	bd70      	pop	{r4, r5, r6, pc}
 8012856:	466a      	mov	r2, sp
 8012858:	f000 f87c 	bl	8012954 <_fstat_r>
 801285c:	2800      	cmp	r0, #0
 801285e:	dbec      	blt.n	801283a <__swhatbuf_r+0x12>
 8012860:	9901      	ldr	r1, [sp, #4]
 8012862:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012866:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801286a:	4259      	negs	r1, r3
 801286c:	4159      	adcs	r1, r3
 801286e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012872:	e7eb      	b.n	801284c <__swhatbuf_r+0x24>

08012874 <__smakebuf_r>:
 8012874:	898b      	ldrh	r3, [r1, #12]
 8012876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012878:	079d      	lsls	r5, r3, #30
 801287a:	4606      	mov	r6, r0
 801287c:	460c      	mov	r4, r1
 801287e:	d507      	bpl.n	8012890 <__smakebuf_r+0x1c>
 8012880:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012884:	6023      	str	r3, [r4, #0]
 8012886:	6123      	str	r3, [r4, #16]
 8012888:	2301      	movs	r3, #1
 801288a:	6163      	str	r3, [r4, #20]
 801288c:	b003      	add	sp, #12
 801288e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012890:	ab01      	add	r3, sp, #4
 8012892:	466a      	mov	r2, sp
 8012894:	f7ff ffc8 	bl	8012828 <__swhatbuf_r>
 8012898:	9f00      	ldr	r7, [sp, #0]
 801289a:	4605      	mov	r5, r0
 801289c:	4639      	mov	r1, r7
 801289e:	4630      	mov	r0, r6
 80128a0:	f7ff fbaa 	bl	8011ff8 <_malloc_r>
 80128a4:	b948      	cbnz	r0, 80128ba <__smakebuf_r+0x46>
 80128a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128aa:	059a      	lsls	r2, r3, #22
 80128ac:	d4ee      	bmi.n	801288c <__smakebuf_r+0x18>
 80128ae:	f023 0303 	bic.w	r3, r3, #3
 80128b2:	f043 0302 	orr.w	r3, r3, #2
 80128b6:	81a3      	strh	r3, [r4, #12]
 80128b8:	e7e2      	b.n	8012880 <__smakebuf_r+0xc>
 80128ba:	89a3      	ldrh	r3, [r4, #12]
 80128bc:	6020      	str	r0, [r4, #0]
 80128be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128c2:	81a3      	strh	r3, [r4, #12]
 80128c4:	9b01      	ldr	r3, [sp, #4]
 80128c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80128ca:	b15b      	cbz	r3, 80128e4 <__smakebuf_r+0x70>
 80128cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128d0:	4630      	mov	r0, r6
 80128d2:	f000 f851 	bl	8012978 <_isatty_r>
 80128d6:	b128      	cbz	r0, 80128e4 <__smakebuf_r+0x70>
 80128d8:	89a3      	ldrh	r3, [r4, #12]
 80128da:	f023 0303 	bic.w	r3, r3, #3
 80128de:	f043 0301 	orr.w	r3, r3, #1
 80128e2:	81a3      	strh	r3, [r4, #12]
 80128e4:	89a3      	ldrh	r3, [r4, #12]
 80128e6:	431d      	orrs	r5, r3
 80128e8:	81a5      	strh	r5, [r4, #12]
 80128ea:	e7cf      	b.n	801288c <__smakebuf_r+0x18>

080128ec <_putc_r>:
 80128ec:	b570      	push	{r4, r5, r6, lr}
 80128ee:	460d      	mov	r5, r1
 80128f0:	4614      	mov	r4, r2
 80128f2:	4606      	mov	r6, r0
 80128f4:	b118      	cbz	r0, 80128fe <_putc_r+0x12>
 80128f6:	6a03      	ldr	r3, [r0, #32]
 80128f8:	b90b      	cbnz	r3, 80128fe <_putc_r+0x12>
 80128fa:	f7ff f8d1 	bl	8011aa0 <__sinit>
 80128fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012900:	07d8      	lsls	r0, r3, #31
 8012902:	d405      	bmi.n	8012910 <_putc_r+0x24>
 8012904:	89a3      	ldrh	r3, [r4, #12]
 8012906:	0599      	lsls	r1, r3, #22
 8012908:	d402      	bmi.n	8012910 <_putc_r+0x24>
 801290a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801290c:	f7ff fad1 	bl	8011eb2 <__retarget_lock_acquire_recursive>
 8012910:	68a3      	ldr	r3, [r4, #8]
 8012912:	3b01      	subs	r3, #1
 8012914:	2b00      	cmp	r3, #0
 8012916:	60a3      	str	r3, [r4, #8]
 8012918:	da05      	bge.n	8012926 <_putc_r+0x3a>
 801291a:	69a2      	ldr	r2, [r4, #24]
 801291c:	4293      	cmp	r3, r2
 801291e:	db12      	blt.n	8012946 <_putc_r+0x5a>
 8012920:	b2eb      	uxtb	r3, r5
 8012922:	2b0a      	cmp	r3, #10
 8012924:	d00f      	beq.n	8012946 <_putc_r+0x5a>
 8012926:	6823      	ldr	r3, [r4, #0]
 8012928:	1c5a      	adds	r2, r3, #1
 801292a:	6022      	str	r2, [r4, #0]
 801292c:	701d      	strb	r5, [r3, #0]
 801292e:	b2ed      	uxtb	r5, r5
 8012930:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012932:	07da      	lsls	r2, r3, #31
 8012934:	d405      	bmi.n	8012942 <_putc_r+0x56>
 8012936:	89a3      	ldrh	r3, [r4, #12]
 8012938:	059b      	lsls	r3, r3, #22
 801293a:	d402      	bmi.n	8012942 <_putc_r+0x56>
 801293c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801293e:	f7ff fab9 	bl	8011eb4 <__retarget_lock_release_recursive>
 8012942:	4628      	mov	r0, r5
 8012944:	bd70      	pop	{r4, r5, r6, pc}
 8012946:	4629      	mov	r1, r5
 8012948:	4622      	mov	r2, r4
 801294a:	4630      	mov	r0, r6
 801294c:	f7ff f999 	bl	8011c82 <__swbuf_r>
 8012950:	4605      	mov	r5, r0
 8012952:	e7ed      	b.n	8012930 <_putc_r+0x44>

08012954 <_fstat_r>:
 8012954:	b538      	push	{r3, r4, r5, lr}
 8012956:	4d07      	ldr	r5, [pc, #28]	@ (8012974 <_fstat_r+0x20>)
 8012958:	2300      	movs	r3, #0
 801295a:	4604      	mov	r4, r0
 801295c:	4608      	mov	r0, r1
 801295e:	4611      	mov	r1, r2
 8012960:	602b      	str	r3, [r5, #0]
 8012962:	f7ee f8a9 	bl	8000ab8 <_fstat>
 8012966:	1c43      	adds	r3, r0, #1
 8012968:	d102      	bne.n	8012970 <_fstat_r+0x1c>
 801296a:	682b      	ldr	r3, [r5, #0]
 801296c:	b103      	cbz	r3, 8012970 <_fstat_r+0x1c>
 801296e:	6023      	str	r3, [r4, #0]
 8012970:	bd38      	pop	{r3, r4, r5, pc}
 8012972:	bf00      	nop
 8012974:	20008364 	.word	0x20008364

08012978 <_isatty_r>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	4d06      	ldr	r5, [pc, #24]	@ (8012994 <_isatty_r+0x1c>)
 801297c:	2300      	movs	r3, #0
 801297e:	4604      	mov	r4, r0
 8012980:	4608      	mov	r0, r1
 8012982:	602b      	str	r3, [r5, #0]
 8012984:	f7ee f8a8 	bl	8000ad8 <_isatty>
 8012988:	1c43      	adds	r3, r0, #1
 801298a:	d102      	bne.n	8012992 <_isatty_r+0x1a>
 801298c:	682b      	ldr	r3, [r5, #0]
 801298e:	b103      	cbz	r3, 8012992 <_isatty_r+0x1a>
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	bd38      	pop	{r3, r4, r5, pc}
 8012994:	20008364 	.word	0x20008364

08012998 <_sbrk_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4d06      	ldr	r5, [pc, #24]	@ (80129b4 <_sbrk_r+0x1c>)
 801299c:	2300      	movs	r3, #0
 801299e:	4604      	mov	r4, r0
 80129a0:	4608      	mov	r0, r1
 80129a2:	602b      	str	r3, [r5, #0]
 80129a4:	f7ee f8b0 	bl	8000b08 <_sbrk>
 80129a8:	1c43      	adds	r3, r0, #1
 80129aa:	d102      	bne.n	80129b2 <_sbrk_r+0x1a>
 80129ac:	682b      	ldr	r3, [r5, #0]
 80129ae:	b103      	cbz	r3, 80129b2 <_sbrk_r+0x1a>
 80129b0:	6023      	str	r3, [r4, #0]
 80129b2:	bd38      	pop	{r3, r4, r5, pc}
 80129b4:	20008364 	.word	0x20008364

080129b8 <abort>:
 80129b8:	b508      	push	{r3, lr}
 80129ba:	2006      	movs	r0, #6
 80129bc:	f000 f82c 	bl	8012a18 <raise>
 80129c0:	2001      	movs	r0, #1
 80129c2:	f7ee f845 	bl	8000a50 <_exit>

080129c6 <_raise_r>:
 80129c6:	291f      	cmp	r1, #31
 80129c8:	b538      	push	{r3, r4, r5, lr}
 80129ca:	4605      	mov	r5, r0
 80129cc:	460c      	mov	r4, r1
 80129ce:	d904      	bls.n	80129da <_raise_r+0x14>
 80129d0:	2316      	movs	r3, #22
 80129d2:	6003      	str	r3, [r0, #0]
 80129d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129d8:	bd38      	pop	{r3, r4, r5, pc}
 80129da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129dc:	b112      	cbz	r2, 80129e4 <_raise_r+0x1e>
 80129de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129e2:	b94b      	cbnz	r3, 80129f8 <_raise_r+0x32>
 80129e4:	4628      	mov	r0, r5
 80129e6:	f000 f831 	bl	8012a4c <_getpid_r>
 80129ea:	4622      	mov	r2, r4
 80129ec:	4601      	mov	r1, r0
 80129ee:	4628      	mov	r0, r5
 80129f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129f4:	f000 b818 	b.w	8012a28 <_kill_r>
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d00a      	beq.n	8012a12 <_raise_r+0x4c>
 80129fc:	1c59      	adds	r1, r3, #1
 80129fe:	d103      	bne.n	8012a08 <_raise_r+0x42>
 8012a00:	2316      	movs	r3, #22
 8012a02:	6003      	str	r3, [r0, #0]
 8012a04:	2001      	movs	r0, #1
 8012a06:	e7e7      	b.n	80129d8 <_raise_r+0x12>
 8012a08:	2100      	movs	r1, #0
 8012a0a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012a0e:	4620      	mov	r0, r4
 8012a10:	4798      	blx	r3
 8012a12:	2000      	movs	r0, #0
 8012a14:	e7e0      	b.n	80129d8 <_raise_r+0x12>
	...

08012a18 <raise>:
 8012a18:	4b02      	ldr	r3, [pc, #8]	@ (8012a24 <raise+0xc>)
 8012a1a:	4601      	mov	r1, r0
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	f7ff bfd2 	b.w	80129c6 <_raise_r>
 8012a22:	bf00      	nop
 8012a24:	2000007c 	.word	0x2000007c

08012a28 <_kill_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	4d07      	ldr	r5, [pc, #28]	@ (8012a48 <_kill_r+0x20>)
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	4604      	mov	r4, r0
 8012a30:	4608      	mov	r0, r1
 8012a32:	4611      	mov	r1, r2
 8012a34:	602b      	str	r3, [r5, #0]
 8012a36:	f7ed fff9 	bl	8000a2c <_kill>
 8012a3a:	1c43      	adds	r3, r0, #1
 8012a3c:	d102      	bne.n	8012a44 <_kill_r+0x1c>
 8012a3e:	682b      	ldr	r3, [r5, #0]
 8012a40:	b103      	cbz	r3, 8012a44 <_kill_r+0x1c>
 8012a42:	6023      	str	r3, [r4, #0]
 8012a44:	bd38      	pop	{r3, r4, r5, pc}
 8012a46:	bf00      	nop
 8012a48:	20008364 	.word	0x20008364

08012a4c <_getpid_r>:
 8012a4c:	f7ed bfe6 	b.w	8000a1c <_getpid>

08012a50 <_init>:
 8012a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a52:	bf00      	nop
 8012a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a56:	bc08      	pop	{r3}
 8012a58:	469e      	mov	lr, r3
 8012a5a:	4770      	bx	lr

08012a5c <_fini>:
 8012a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a5e:	bf00      	nop
 8012a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a62:	bc08      	pop	{r3}
 8012a64:	469e      	mov	lr, r3
 8012a66:	4770      	bx	lr
